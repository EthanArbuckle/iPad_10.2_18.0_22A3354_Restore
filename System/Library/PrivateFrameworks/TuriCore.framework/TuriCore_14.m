uint64_t CoreML::Specification::ModelDescription::MergePartialFromCodedStream(CoreML::Specification::ModelDescription *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  std::string **v6;
  std::string **v7;
  char *v8;
  char *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int TagFallback;
  unsigned int v18;
  std::string *v19;
  uint64_t result;
  std::string *v21;
  const char *size;
  CoreML::Specification::Metadata *v23;
  char *v24;
  int VarintSizeAsIntFallback;
  uint64_t v26;
  std::string *v27;
  CoreML::Specification::FeatureDescription *v28;
  char *v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  const char *v36;

  v5 = (char *)this + 64;
  v6 = (std::string **)((char *)this + 96);
  v7 = (std::string **)((char *)this + 88);
  v8 = (char *)this + 40;
  v9 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v10 = *(unsigned __int8 **)a2;
        v11 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v11)
        {
          v13 = 0;
        }
        else
        {
          v12 = v10 + 1;
          v13 = *v10;
          if ((char)*v10 >= 1)
          {
            *(_QWORD *)a2 = v12;
            v14 = v13 | 0x100000000;
            if ((v14 & 0x100000000) == 0)
              goto LABEL_9;
            goto LABEL_17;
          }
          if ((unint64_t)v12 < v11)
          {
            v15 = *v12;
            if ((v13 & ~v15) >= 0x80)
            {
              *(_QWORD *)a2 = v10 + 2;
              v14 = (v13 + (v15 << 7) - 128) | 0x100000000;
              goto LABEL_17;
            }
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v13);
        v14 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v14 & 0x100000000) == 0)
          goto LABEL_9;
LABEL_17:
        v18 = v14 >> 3;
        if (v14 >> 3 > 0xB)
          break;
        if (v18 == 1)
        {
          if (v14 == 10)
          {
            v26 = (uint64_t)v9;
            goto LABEL_48;
          }
          goto LABEL_9;
        }
        if (v18 == 10)
        {
          if (v14 == 82)
          {
            v26 = (uint64_t)v8;
            goto LABEL_48;
          }
          goto LABEL_9;
        }
        if (v18 != 11 || v14 != 90)
          goto LABEL_9;
        v19 = *v7;
        if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v19 = *v7;
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v19);
        if (!(_DWORD)result)
          return result;
        v21 = *v7;
        if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (std::string *)v21->__r_.__value_.__r.__words[0];
          size = (const char *)(*v7)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
        }
        v36 = "CoreML.Specification.ModelDescription.predictedFeatureName";
LABEL_64:
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v21, size, 0, (uint64_t)v36))return 0;
      }
      if (v18 == 12)
      {
        if (v14 == 98)
        {
          v27 = *v6;
          if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v27 = *v6;
          }
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v27);
          if (!(_DWORD)result)
            return result;
          v21 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            v21 = (std::string *)v21->__r_.__value_.__r.__words[0];
            size = (const char *)(*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          v36 = "CoreML.Specification.ModelDescription.predictedProbabilitiesName";
          goto LABEL_64;
        }
        goto LABEL_9;
      }
      if (v18 == 50)
        break;
      if (v18 != 100 || v14 != 34)
        goto LABEL_9;
      v23 = (CoreML::Specification::Metadata *)*((_QWORD *)this + 13);
      if (!v23)
      {
        v23 = (CoreML::Specification::Metadata *)operator new();
        CoreML::Specification::Metadata::Metadata(v23);
        *((_QWORD *)this + 13) = v23;
      }
      v24 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v24 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v24;
        *(_QWORD *)a2 = v24 + 1;
      }
      v34 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v34 & 0x8000000000000000) != 0)
        return 0;
      v33 = v34;
      result = CoreML::Specification::Metadata::MergePartialFromCodedStream(v23, a2, v35);
      if (!(_DWORD)result)
        return result;
LABEL_58:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v33))
        return 0;
    }
    if (v14 == 146)
    {
      v26 = (uint64_t)v5;
LABEL_48:
      v28 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v26);
      v29 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v29 < 0)
      {
        v30 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v30 < 0)
          return 0;
      }
      else
      {
        v30 = *v29;
        *(_QWORD *)a2 = v29 + 1;
      }
      v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v30);
      if ((v31 & 0x8000000000000000) != 0)
        return 0;
      v33 = v31;
      result = CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(v28, (char **)a2, v32);
      if (!(_DWORD)result)
        return result;
      goto LABEL_58;
    }
LABEL_9:
    if (!(_DWORD)v14 || (v14 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v14, a3) & 1) == 0)return 0;
  }
}

void sub_218418E74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4012F24C1ELL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ModelDescription::SerializeWithCachedSizes(CoreML::Specification::ModelDescription *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  int i;
  int v8;
  int j;
  _tc_google::protobuf::internal *v10;
  const char *v11;
  uint64_t result;
  const char *v13;
  int v14;
  int k;
  uint64_t v16;

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  v8 = *((_DWORD *)this + 12);
  if (v8)
  {
    for (j = 0; j != v8; ++j)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(*((_QWORD *)this + 7) + 8 * j + 8), a2, a4);
  }
  v10 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 11);
  if (*((char *)v10 + 23) < 0)
  {
    v11 = (const char *)*((_QWORD *)v10 + 1);
    if (!v11)
      goto LABEL_13;
    v10 = *(_tc_google::protobuf::internal **)v10;
    goto LABEL_12;
  }
  v11 = (const char *)*((unsigned __int8 *)v10 + 23);
  if (*((_BYTE *)v10 + 23))
  {
LABEL_12:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(11, *((_QWORD *)this + 11), a2);
  }
LABEL_13:
  result = *((_QWORD *)this + 12);
  if (*(char *)(result + 23) < 0)
  {
    v13 = *(const char **)(result + 8);
    if (!v13)
      goto LABEL_19;
    result = *(_QWORD *)result;
    goto LABEL_18;
  }
  v13 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_18:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v13, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedProbabilitiesName");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(12, *((_QWORD *)this + 12), a2);
  }
LABEL_19:
  v14 = *((_DWORD *)this + 18);
  if (v14)
  {
    for (k = 0; k != v14; ++k)
      result = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x32, *(_QWORD *)(*((_QWORD *)this + 10) + 8 * k + 8), a2, a4);
  }
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v16 = *((_QWORD *)this + 13);
    if (v16)
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v16, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::ModelDescription::ByteSizeLong(CoreML::Specification::ModelDescription *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CoreML::Specification::Metadata *v20;
  uint64_t v21;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  v7 = v4 + v6;
  if ((_DWORD)v6)
  {
    v8 = 0;
    do
    {
      v9 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  v10 = *((unsigned int *)this + 18);
  v11 = v7 + 2 * v10;
  if ((_DWORD)v10)
  {
    v12 = 0;
    do
    {
      v13 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 10) + 8 * v12 + 8));
      v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      ++v12;
    }
    while ((_DWORD)v10 != v12);
  }
  v14 = *((_QWORD *)this + 11);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_17;
  }
  else if (!*(_BYTE *)(v14 + 23))
  {
    goto LABEL_17;
  }
  v16 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  v11 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_17:
  v17 = *((_QWORD *)this + 12);
  v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
  {
    if (!*(_QWORD *)(v17 + 8))
      goto LABEL_22;
  }
  else if (!*(_BYTE *)(v17 + 23))
  {
    goto LABEL_22;
  }
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v11 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_22:
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v20 = (CoreML::Specification::Metadata *)*((_QWORD *)this + 13);
    if (v20)
    {
      v21 = CoreML::Specification::Metadata::ByteSizeLong(v20);
      v11 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 2;
    }
  }
  *((_DWORD *)this + 28) = v11;
  return v11;
}

void CoreML::Specification::ModelDescription::MergeFrom(CoreML::Specification::ModelDescription *this, const CoreML::Specification::ModelDescription *a2)
{
  uint64_t v4;
  signed int v5;
  const CoreML::Specification::FeatureDescription **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  signed int v10;
  const CoreML::Specification::FeatureDescription **v11;
  unsigned int *v12;
  int v13;
  int *v14;
  signed int v15;
  const CoreML::Specification::FeatureDescription **v16;
  unsigned int *v17;
  int v18;
  int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  const CoreML::Specification::Metadata *v24;
  CoreML::Specification::Metadata *v25;
  const CoreML::Specification::Metadata *v26;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::FeatureDescription **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    v11 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 7) + 8);
    v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_tc_google::protobuf::Arena **)this + 5, (CoreML::Specification::FeatureDescription **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    v16 = (const CoreML::Specification::FeatureDescription **)(*((_QWORD *)a2 + 10) + 8);
    v17 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_tc_google::protobuf::Arena **)this + 8, (CoreML::Specification::FeatureDescription **)v17, v16, v15, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v18 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v18;
    v19 = (int *)*((_QWORD *)this + 10);
    if (*v19 < v18)
      *v19 = v18;
  }
  v20 = *((_QWORD *)a2 + 11);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(_QWORD *)(v20 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v20 + 23))
  {
    goto LABEL_20;
  }
  v21 = (uint64_t *)*((_QWORD *)this + 11);
  if (v21 != (uint64_t *)v20)
  {
    if (v21 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, v20);
    else
      std::string::operator=(*((std::string **)this + 11), (const std::string *)v20);
  }
LABEL_20:
  v22 = *((_QWORD *)a2 + 12);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(_QWORD *)(v22 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v22 + 23))
  {
    goto LABEL_28;
  }
  v23 = (uint64_t *)*((_QWORD *)this + 12);
  if (v23 != (uint64_t *)v22)
  {
    if (v23 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, v22);
    else
      std::string::operator=(*((std::string **)this + 12), (const std::string *)v22);
  }
LABEL_28:
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    v24 = (const CoreML::Specification::Metadata *)*((_QWORD *)a2 + 13);
    if (v24)
    {
      v25 = (CoreML::Specification::Metadata *)*((_QWORD *)this + 13);
      if (!v25)
      {
        v25 = (CoreML::Specification::Metadata *)operator new();
        CoreML::Specification::Metadata::Metadata(v25);
        *((_QWORD *)this + 13) = v25;
        v24 = (const CoreML::Specification::Metadata *)*((_QWORD *)a2 + 13);
      }
      if (v24)
        v26 = v24;
      else
        v26 = (const CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_;
      CoreML::Specification::Metadata::MergeFrom(v25, v26);
    }
  }
}

void sub_218419494(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4012F24C1ELL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ModelDescription::IsInitialized(CoreML::Specification::ModelDescription *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ModelDescription::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ModelDescription");
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::SerializedModel(CoreML::Specification::SerializedModel *this)
{
  *(_QWORD *)this = &off_24D940058;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SerializedModel *)&CoreML::Specification::_SerializedModel_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_218419528(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SerializedModel::~SerializedModel(CoreML::Specification::SerializedModel *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D940058;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D940058;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SerializedModel *v3;

  v3 = (CoreML::Specification::SerializedModel *)operator new();
  CoreML::Specification::SerializedModel::SerializedModel(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SerializedModel>(a2, v3);
  return v3;
}

void sub_218419614(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SerializedModel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>);
  return result;
}

uint64_t CoreML::Specification::SerializedModel::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *(_QWORD *)(this + 24);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  return this;
}

BOOL CoreML::Specification::SerializedModel::MergePartialFromCodedStream(CoreML::Specification::SerializedModel *this, char **a2, unsigned int a3)
{
  std::string **v4;
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  _BOOL8 result;
  std::string *v13;
  const char *size;
  std::string *v15;

  v4 = (std::string **)((char *)this + 24);
  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_24;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_24;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_24;
        v15 = *v4;
        if (*v4 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v15 = *v4;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v15))
          return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11);
      if (!result)
        return result;
      v13 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v13, size, 0, (uint64_t)"CoreML.Specification.SerializedModel.identifier"))return 0;
    }
LABEL_24:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::SerializedModel::SerializeWithCachedSizes(CoreML::Specification::SerializedModel *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v5 = *(const char **)(result + 8);
    if (!v5)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  v5 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v5, 1, (uint64_t)"CoreML.Specification.SerializedModel.identifier");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v6 = *((_QWORD *)this + 3);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v6 + 23))
      return result;
    return _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2, v6, a2);
  }
  if (*(_QWORD *)(v6 + 8))
    return _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2, v6, a2);
  return result;
}

uint64_t CoreML::Specification::SerializedModel::ByteSizeLong(CoreML::Specification::SerializedModel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::SerializedModel::IsInitialized(CoreML::Specification::SerializedModel *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SerializedModel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SerializedModel");
}

CoreML::Specification::Model *CoreML::Specification::Model::Model(CoreML::Specification::Model *this)
{
  *(_QWORD *)this = &off_24D9400F0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *(_QWORD *)((char *)this + 21) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_2184199D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::Model *CoreML::Specification::Model::Model(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  uint64_t v4;
  CoreML::Specification::ModelDescription *v6;
  int v7;
  int v8;
  CoreML::Specification::GLMClassifier *v9;
  CoreML::Specification::GLMClassifier *v10;
  uint64_t *v11;
  CoreML::Specification::OneHotEncoder *v12;
  CoreML::Specification::OneHotEncoder *v13;
  uint64_t *v14;
  CoreML::Specification::CoreMLModels::TextClassifier *v15;
  CoreML::Specification::CoreMLModels::TextClassifier *v16;
  uint64_t *v17;
  CoreML::Specification::GLMRegressor *v18;
  CoreML::Specification::GLMRegressor *v19;
  uint64_t *v20;
  CoreML::Specification::LinkedModel *v21;
  CoreML::Specification::LinkedModel *v22;
  uint64_t *v23;
  CoreML::Specification::Pipeline *v24;
  CoreML::Specification::protobuf_Model_2eproto *v25;
  const CoreML::Specification::Pipeline *v26;
  CoreML::Specification::SerializedModel *v27;
  CoreML::Specification::protobuf_Model_2eproto *v28;
  const CoreML::Specification::CategoricalCrossEntropyLossLayer *v29;
  CoreML::Specification::ItemSimilarityRecommender *v30;
  CoreML::Specification::ItemSimilarityRecommender *v31;
  uint64_t *v32;
  CoreML::Specification::Imputer *v33;
  CoreML::Specification::Imputer *v34;
  uint64_t *v35;
  CoreML::Specification::FeatureVectorizer *v36;
  CoreML::Specification::FeatureVectorizer *v37;
  uint64_t *v38;
  CoreML::Specification::DictVectorizer *v39;
  CoreML::Specification::DictVectorizer *v40;
  uint64_t *v41;
  CoreML::Specification::Scaler *v42;
  CoreML::Specification::Scaler *v43;
  uint64_t *v44;
  CoreML::Specification::CategoricalMapping *v45;
  CoreML::Specification::CategoricalMapping *v46;
  uint64_t *v47;
  CoreML::Specification::Normalizer *v48;
  CoreML::Specification::Normalizer *v49;
  uint64_t *v50;
  CoreML::Specification::ArrayFeatureExtractor *v51;
  CoreML::Specification::ArrayFeatureExtractor *v52;
  uint64_t *v53;
  CoreML::Specification::NonMaximumSuppression *v54;
  CoreML::Specification::NonMaximumSuppression *v55;
  uint64_t *v56;
  CoreML::Specification::SupportVectorClassifier *v57;
  CoreML::Specification::SupportVectorClassifier *v58;
  uint64_t *v59;
  CoreML::Specification::TreeEnsembleClassifier *v60;
  CoreML::Specification::TreeEnsembleClassifier *v61;
  uint64_t *v62;
  CoreML::Specification::NeuralNetworkClassifier *v63;
  CoreML::Specification::NeuralNetworkClassifier *v64;
  uint64_t *v65;
  CoreML::Specification::KNearestNeighborsClassifier *v66;
  CoreML::Specification::KNearestNeighborsClassifier *v67;
  uint64_t *v68;
  CoreML::Specification::CoreMLModels::WordTagger *v69;
  CoreML::Specification::CoreMLModels::WordTagger *v70;
  uint64_t *v71;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v72;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v73;
  uint64_t *v74;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v75;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v76;
  uint64_t *v77;
  CoreML::Specification::CoreMLModels::Gazetteer *v78;
  CoreML::Specification::CoreMLModels::Gazetteer *v79;
  uint64_t *v80;
  CoreML::Specification::CoreMLModels::WordEmbedding *v81;
  CoreML::Specification::CoreMLModels::WordEmbedding *v82;
  uint64_t *v83;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v84;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v85;
  uint64_t *v86;
  CoreML::Specification::SupportVectorRegressor *v87;
  CoreML::Specification::SupportVectorRegressor *v88;
  uint64_t *v89;
  CoreML::Specification::TreeEnsembleRegressor *v90;
  CoreML::Specification::TreeEnsembleRegressor *v91;
  uint64_t *v92;
  CoreML::Specification::NeuralNetworkRegressor *v93;
  CoreML::Specification::NeuralNetworkRegressor *v94;
  uint64_t *v95;
  CoreML::Specification::BayesianProbitRegressor *v96;
  CoreML::Specification::BayesianProbitRegressor *v97;
  uint64_t *v98;
  CoreML::Specification::V5::Program *v99;
  CoreML::Specification::V5::Program *v100;
  const CoreML::Specification::V5::Program *v101;
  CoreML::Specification::CustomModel *v102;
  CoreML::Specification::CustomModel *v103;
  const CoreML::Specification::CustomModel *v104;
  CoreML::Specification::PipelineClassifier *v105;
  CoreML::Specification::protobuf_Model_2eproto *v106;
  const CoreML::Specification::PipelineClassifier *v107;
  CoreML::Specification::PipelineRegressor *v108;
  CoreML::Specification::protobuf_Model_2eproto *v109;
  const CoreML::Specification::PipelineRegressor *v110;
  CoreML::Specification::Identity *v111;
  CoreML::Specification::Identity *v112;
  uint64_t *v113;
  CoreML::Specification::NeuralNetwork *v114;
  CoreML::Specification::NeuralNetwork *v115;
  uint64_t *v116;

  *(_QWORD *)this = &off_24D9400F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == (const CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_
    || *((_QWORD *)a2 + 2) == 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v6, *((const CoreML::Specification::ModelDescription **)a2 + 2));
  }
  *((_QWORD *)this + 2) = v6;
  v7 = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_DWORD *)this + 6) = v7;
  *((_DWORD *)this + 11) = 0;
  v8 = *((_DWORD *)a2 + 11);
  if (v8 > 599)
  {
    if (v8 > 899)
    {
      switch(v8)
      {
        case 2000:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2000;
          v15 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
          v16 = (CoreML::Specification::CoreMLModels::TextClassifier *)CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v15);
          *((_QWORD *)this + 4) = v15;
          if (*((_DWORD *)a2 + 11) == 2000)
            v17 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v17 = CoreML::Specification::CoreMLModels::TextClassifier::default_instance(v16);
          CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(v15, (const CoreML::Specification::CoreMLModels::TextClassifier *)v17);
          break;
        case 2001:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2001;
          v69 = (CoreML::Specification::CoreMLModels::WordTagger *)operator new();
          v70 = (CoreML::Specification::CoreMLModels::WordTagger *)CoreML::Specification::CoreMLModels::WordTagger::WordTagger(v69);
          *((_QWORD *)this + 4) = v69;
          if (*((_DWORD *)a2 + 11) == 2001)
            v71 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v71 = CoreML::Specification::CoreMLModels::WordTagger::default_instance(v70);
          CoreML::Specification::CoreMLModels::WordTagger::MergeFrom(v69, (const CoreML::Specification::CoreMLModels::WordTagger *)v71);
          break;
        case 2002:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2002;
          v72 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
          v73 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v72);
          *((_QWORD *)this + 4) = v72;
          if (*((_DWORD *)a2 + 11) == 2002)
            v74 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v74 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::default_instance(v73);
          CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom(v72, (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)v74);
          break;
        case 2003:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2003;
          v75 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
          v76 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v75);
          *((_QWORD *)this + 4) = v75;
          if (*((_DWORD *)a2 + 11) == 2003)
            v77 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v77 = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::default_instance(v76);
          CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom(v75, (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)v77);
          break;
        case 2004:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2004;
          v78 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
          v79 = (CoreML::Specification::CoreMLModels::Gazetteer *)CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v78);
          *((_QWORD *)this + 4) = v78;
          if (*((_DWORD *)a2 + 11) == 2004)
            v80 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v80 = CoreML::Specification::CoreMLModels::Gazetteer::default_instance(v79);
          CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(v78, (const CoreML::Specification::CoreMLModels::Gazetteer *)v80);
          break;
        case 2005:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2005;
          v81 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
          v82 = (CoreML::Specification::CoreMLModels::WordEmbedding *)CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v81);
          *((_QWORD *)this + 4) = v81;
          if (*((_DWORD *)a2 + 11) == 2005)
            v83 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v83 = CoreML::Specification::CoreMLModels::WordEmbedding::default_instance(v82);
          CoreML::Specification::CoreMLModels::WordEmbedding::MergeFrom(v81, (const CoreML::Specification::CoreMLModels::WordEmbedding *)v83);
          break;
        case 2006:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2006;
          v84 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
          v85 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v84);
          *((_QWORD *)this + 4) = v84;
          if (*((_DWORD *)a2 + 11) == 2006)
            v86 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v86 = CoreML::Specification::CoreMLModels::AudioFeaturePrint::default_instance(v85);
          CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom(v84, (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)v86);
          break;
        default:
          if (v8 == 900)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 900;
            v111 = (CoreML::Specification::Identity *)operator new();
            v112 = (CoreML::Specification::Identity *)CoreML::Specification::Identity::Identity(v111);
            *((_QWORD *)this + 4) = v111;
            if (*((_DWORD *)a2 + 11) == 900)
              v113 = (uint64_t *)*((_QWORD *)a2 + 4);
            else
              v113 = CoreML::Specification::Identity::default_instance(v112);
            CoreML::Specification::Identity::MergeFrom((std::string *)v111, (const CoreML::Specification::Identity *)v113);
          }
          else if (v8 == 3000)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 3000;
            v27 = (CoreML::Specification::SerializedModel *)operator new();
            v28 = CoreML::Specification::SerializedModel::SerializedModel(v27);
            *((_QWORD *)this + 4) = v27;
            if (*((_DWORD *)a2 + 11) == 3000)
            {
              v29 = (const CoreML::Specification::CategoricalCrossEntropyLossLayer *)*((_QWORD *)a2 + 4);
            }
            else
            {
              CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v28);
              v29 = (const CoreML::Specification::CategoricalCrossEntropyLossLayer *)&CoreML::Specification::_SerializedModel_default_instance_;
            }
            CoreML::Specification::CategoricalCrossEntropyLossLayer::MergeFrom(v27, v29);
          }
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case 600:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 600;
          v12 = (CoreML::Specification::OneHotEncoder *)operator new();
          v13 = (CoreML::Specification::OneHotEncoder *)CoreML::Specification::OneHotEncoder::OneHotEncoder(v12);
          *((_QWORD *)this + 4) = v12;
          if (*((_DWORD *)a2 + 11) == 600)
            v14 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v14 = CoreML::Specification::OneHotEncoder::default_instance(v13);
          CoreML::Specification::OneHotEncoder::MergeFrom((std::string *)v12, (const CoreML::Specification::OneHotEncoder *)v14);
          break;
        case 601:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 601;
          v33 = (CoreML::Specification::Imputer *)operator new();
          v34 = (CoreML::Specification::Imputer *)CoreML::Specification::Imputer::Imputer(v33);
          *((_QWORD *)this + 4) = v33;
          if (*((_DWORD *)a2 + 11) == 601)
            v35 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v35 = CoreML::Specification::Imputer::default_instance(v34);
          CoreML::Specification::Imputer::MergeFrom(v33, (const CoreML::Specification::Imputer *)v35);
          break;
        case 602:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 602;
          v36 = (CoreML::Specification::FeatureVectorizer *)operator new();
          v37 = (CoreML::Specification::FeatureVectorizer *)CoreML::Specification::FeatureVectorizer::FeatureVectorizer(v36);
          *((_QWORD *)this + 4) = v36;
          if (*((_DWORD *)a2 + 11) == 602)
            v38 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v38 = CoreML::Specification::FeatureVectorizer::default_instance(v37);
          CoreML::Specification::FeatureVectorizer::MergeFrom(v36, (const CoreML::Specification::FeatureVectorizer *)v38);
          break;
        case 603:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 603;
          v39 = (CoreML::Specification::DictVectorizer *)operator new();
          v40 = (CoreML::Specification::DictVectorizer *)CoreML::Specification::DictVectorizer::DictVectorizer(v39);
          *((_QWORD *)this + 4) = v39;
          if (*((_DWORD *)a2 + 11) == 603)
            v41 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v41 = CoreML::Specification::DictVectorizer::default_instance(v40);
          CoreML::Specification::DictVectorizer::MergeFrom((std::string *)v39, (const CoreML::Specification::DictVectorizer *)v41);
          break;
        case 604:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 604;
          v42 = (CoreML::Specification::Scaler *)operator new();
          v43 = (CoreML::Specification::Scaler *)CoreML::Specification::Scaler::Scaler(v42);
          *((_QWORD *)this + 4) = v42;
          if (*((_DWORD *)a2 + 11) == 604)
            v44 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v44 = CoreML::Specification::Scaler::default_instance(v43);
          CoreML::Specification::Scaler::MergeFrom((uint64_t *)v42, (const CoreML::Specification::Scaler *)v44);
          break;
        case 606:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 606;
          v45 = (CoreML::Specification::CategoricalMapping *)operator new();
          v46 = (CoreML::Specification::CategoricalMapping *)CoreML::Specification::CategoricalMapping::CategoricalMapping(v45);
          *((_QWORD *)this + 4) = v45;
          if (*((_DWORD *)a2 + 11) == 606)
            v47 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v47 = CoreML::Specification::CategoricalMapping::default_instance(v46);
          CoreML::Specification::CategoricalMapping::MergeFrom(v45, (const CoreML::Specification::CategoricalMapping *)v47);
          break;
        case 607:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 607;
          v48 = (CoreML::Specification::Normalizer *)operator new();
          v49 = (CoreML::Specification::Normalizer *)CoreML::Specification::Normalizer::Normalizer(v48);
          *((_QWORD *)this + 4) = v48;
          if (*((_DWORD *)a2 + 11) == 607)
            v50 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v50 = CoreML::Specification::Normalizer::default_instance(v49);
          CoreML::Specification::FlattenLayerParams::MergeFrom((std::string *)v48, (const CoreML::Specification::FlattenLayerParams *)v50);
          break;
        case 609:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 609;
          v51 = (CoreML::Specification::ArrayFeatureExtractor *)operator new();
          v52 = (CoreML::Specification::ArrayFeatureExtractor *)CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(v51);
          *((_QWORD *)this + 4) = v51;
          if (*((_DWORD *)a2 + 11) == 609)
            v53 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v53 = CoreML::Specification::ArrayFeatureExtractor::default_instance(v52);
          CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v51, (const CoreML::Specification::GLMRegressor_DoubleArray *)v53);
          break;
        case 610:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 610;
          v54 = (CoreML::Specification::NonMaximumSuppression *)operator new();
          v55 = (CoreML::Specification::NonMaximumSuppression *)CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v54);
          *((_QWORD *)this + 4) = v54;
          if (*((_DWORD *)a2 + 11) == 610)
            v56 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v56 = CoreML::Specification::NonMaximumSuppression::default_instance(v55);
          CoreML::Specification::NonMaximumSuppression::MergeFrom(v54, (const CoreML::Specification::NonMaximumSuppression *)v56);
          break;
        default:
          return this;
      }
    }
  }
  else if (v8 <= 399)
  {
    if (v8 <= 299)
    {
      switch(v8)
      {
        case 200:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 200;
          v105 = (CoreML::Specification::PipelineClassifier *)operator new();
          v106 = CoreML::Specification::PipelineClassifier::PipelineClassifier(v105);
          *((_QWORD *)this + 4) = v105;
          if (*((_DWORD *)a2 + 11) == 200)
          {
            v107 = (const CoreML::Specification::PipelineClassifier *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v106);
            v107 = (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_;
          }
          CoreML::Specification::PipelineClassifier::MergeFrom((std::string *)v105, v107);
          break;
        case 201:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 201;
          v108 = (CoreML::Specification::PipelineRegressor *)operator new();
          v109 = CoreML::Specification::PipelineRegressor::PipelineRegressor(v108);
          *((_QWORD *)this + 4) = v108;
          if (*((_DWORD *)a2 + 11) == 201)
          {
            v110 = (const CoreML::Specification::PipelineRegressor *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v109);
            v110 = (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_;
          }
          CoreML::Specification::PipelineRegressor::MergeFrom((std::string *)v108, v110);
          break;
        case 202:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 202;
          v24 = (CoreML::Specification::Pipeline *)operator new();
          v25 = CoreML::Specification::Pipeline::Pipeline(v24);
          *((_QWORD *)this + 4) = v24;
          if (*((_DWORD *)a2 + 11) == 202)
          {
            v26 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 4);
          }
          else
          {
            CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v25);
            v26 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
          }
          CoreML::Specification::Pipeline::MergeFrom((uint64_t)v24, v26);
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case 300:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 300;
          v18 = (CoreML::Specification::GLMRegressor *)operator new();
          v19 = (CoreML::Specification::GLMRegressor *)CoreML::Specification::GLMRegressor::GLMRegressor(v18);
          *((_QWORD *)this + 4) = v18;
          if (*((_DWORD *)a2 + 11) == 300)
            v20 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v20 = CoreML::Specification::GLMRegressor::default_instance(v19);
          CoreML::Specification::GLMRegressor::MergeFrom((uint64_t *)v18, (const CoreML::Specification::GLMRegressor *)v20);
          break;
        case 301:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 301;
          v87 = (CoreML::Specification::SupportVectorRegressor *)operator new();
          v88 = (CoreML::Specification::SupportVectorRegressor *)CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v87);
          *((_QWORD *)this + 4) = v87;
          if (*((_DWORD *)a2 + 11) == 301)
            v89 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v89 = CoreML::Specification::SupportVectorRegressor::default_instance(v88);
          CoreML::Specification::SupportVectorRegressor::MergeFrom(v87, (const CoreML::Specification::SupportVectorRegressor *)v89);
          break;
        case 302:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 302;
          v90 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
          v91 = (CoreML::Specification::TreeEnsembleRegressor *)CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v90);
          *((_QWORD *)this + 4) = v90;
          if (*((_DWORD *)a2 + 11) == 302)
            v92 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v92 = CoreML::Specification::TreeEnsembleRegressor::default_instance(v91);
          CoreML::Specification::TreeEnsembleRegressor::MergeFrom((std::string *)v90, (const CoreML::Specification::TreeEnsembleRegressor *)v92);
          break;
        case 303:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 303;
          v93 = (CoreML::Specification::NeuralNetworkRegressor *)operator new();
          v94 = (CoreML::Specification::NeuralNetworkRegressor *)CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor(v93);
          *((_QWORD *)this + 4) = v93;
          if (*((_DWORD *)a2 + 11) == 303)
            v95 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v95 = CoreML::Specification::NeuralNetworkRegressor::default_instance(v94);
          CoreML::Specification::NeuralNetworkRegressor::MergeFrom(v93, (const CoreML::Specification::NeuralNetworkRegressor *)v95);
          break;
        case 304:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 304;
          v96 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
          v97 = (CoreML::Specification::BayesianProbitRegressor *)CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v96);
          *((_QWORD *)this + 4) = v96;
          if (*((_DWORD *)a2 + 11) == 304)
            v98 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v98 = CoreML::Specification::BayesianProbitRegressor::default_instance(v97);
          CoreML::Specification::BayesianProbitRegressor::MergeFrom(v96, (const CoreML::Specification::BayesianProbitRegressor *)v98);
          break;
        default:
          return this;
      }
    }
  }
  else if (v8 > 499)
  {
    if (v8 <= 501)
    {
      if (v8 == 500)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 500;
        v114 = (CoreML::Specification::NeuralNetwork *)operator new();
        v115 = (CoreML::Specification::NeuralNetwork *)CoreML::Specification::NeuralNetwork::NeuralNetwork(v114);
        *((_QWORD *)this + 4) = v114;
        if (*((_DWORD *)a2 + 11) == 500)
          v116 = (uint64_t *)*((_QWORD *)a2 + 4);
        else
          v116 = CoreML::Specification::NeuralNetwork::default_instance(v115);
        CoreML::Specification::NeuralNetwork::MergeFrom(v114, (const CoreML::Specification::NeuralNetwork *)v116);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 501;
        v30 = (CoreML::Specification::ItemSimilarityRecommender *)operator new();
        v31 = (CoreML::Specification::ItemSimilarityRecommender *)CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(v30);
        *((_QWORD *)this + 4) = v30;
        if (*((_DWORD *)a2 + 11) == 501)
          v32 = (uint64_t *)*((_QWORD *)a2 + 4);
        else
          v32 = CoreML::Specification::ItemSimilarityRecommender::default_instance(v31);
        CoreML::Specification::ItemSimilarityRecommender::MergeFrom(v30, (const CoreML::Specification::ItemSimilarityRecommender *)v32);
      }
    }
    else
    {
      switch(v8)
      {
        case 502:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 502;
          v99 = (CoreML::Specification::V5::Program *)operator new();
          v100 = (CoreML::Specification::V5::Program *)CoreML::Specification::V5::Program::Program(v99);
          *((_QWORD *)this + 4) = v99;
          if (*((_DWORD *)a2 + 11) == 502)
            v101 = (const CoreML::Specification::V5::Program *)*((_QWORD *)a2 + 4);
          else
            v101 = (const CoreML::Specification::V5::Program *)CoreML::Specification::V5::Program::default_instance(v100);
          CoreML::Specification::V5::Program::MergeFrom(v99, v101);
          break;
        case 555:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 555;
          v102 = (CoreML::Specification::CustomModel *)operator new();
          v103 = (CoreML::Specification::CustomModel *)CoreML::Specification::CustomModel::CustomModel(v102);
          *((_QWORD *)this + 4) = v102;
          if (*((_DWORD *)a2 + 11) == 555)
            v104 = (const CoreML::Specification::CustomModel *)*((_QWORD *)a2 + 4);
          else
            v104 = (const CoreML::Specification::CustomModel *)CoreML::Specification::CustomModel::default_instance(v103);
          CoreML::Specification::CustomModel::MergeFrom(v102, v104);
          break;
        case 556:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 556;
          v21 = (CoreML::Specification::LinkedModel *)operator new();
          v22 = (CoreML::Specification::LinkedModel *)CoreML::Specification::LinkedModel::LinkedModel(v21);
          *((_QWORD *)this + 4) = v21;
          if (*((_DWORD *)a2 + 11) == 556)
            v23 = (uint64_t *)*((_QWORD *)a2 + 4);
          else
            v23 = CoreML::Specification::LinkedModel::default_instance(v22);
          CoreML::Specification::LinkedModel::MergeFrom(v21, (const CoreML::Specification::LinkedModel *)v23);
          break;
      }
    }
  }
  else
  {
    switch(v8)
    {
      case 400:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 400;
        v9 = (CoreML::Specification::GLMClassifier *)operator new();
        v10 = (CoreML::Specification::GLMClassifier *)CoreML::Specification::GLMClassifier::GLMClassifier(v9);
        *((_QWORD *)this + 4) = v9;
        if (*((_DWORD *)a2 + 11) == 400)
          v11 = (uint64_t *)*((_QWORD *)a2 + 4);
        else
          v11 = CoreML::Specification::GLMClassifier::default_instance(v10);
        CoreML::Specification::GLMClassifier::MergeFrom((std::string *)v9, (const CoreML::Specification::GLMClassifier *)v11);
        break;
      case 401:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 401;
        v57 = (CoreML::Specification::SupportVectorClassifier *)operator new();
        v58 = (CoreML::Specification::SupportVectorClassifier *)CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v57);
        *((_QWORD *)this + 4) = v57;
        if (*((_DWORD *)a2 + 11) == 401)
          v59 = (uint64_t *)*((_QWORD *)a2 + 4);
        else
          v59 = CoreML::Specification::SupportVectorClassifier::default_instance(v58);
        CoreML::Specification::SupportVectorClassifier::MergeFrom(v57, (const CoreML::Specification::SupportVectorClassifier *)v59);
        break;
      case 402:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 402;
        v60 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
        v61 = (CoreML::Specification::TreeEnsembleClassifier *)CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v60);
        *((_QWORD *)this + 4) = v60;
        if (*((_DWORD *)a2 + 11) == 402)
          v62 = (uint64_t *)*((_QWORD *)a2 + 4);
        else
          v62 = CoreML::Specification::TreeEnsembleClassifier::default_instance(v61);
        CoreML::Specification::TreeEnsembleClassifier::MergeFrom((std::string *)v60, (const CoreML::Specification::TreeEnsembleClassifier *)v62);
        break;
      case 403:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 403;
        v63 = (CoreML::Specification::NeuralNetworkClassifier *)operator new();
        v64 = (CoreML::Specification::NeuralNetworkClassifier *)CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier(v63);
        *((_QWORD *)this + 4) = v63;
        if (*((_DWORD *)a2 + 11) == 403)
          v65 = (uint64_t *)*((_QWORD *)a2 + 4);
        else
          v65 = CoreML::Specification::NeuralNetworkClassifier::default_instance(v64);
        CoreML::Specification::NeuralNetworkClassifier::MergeFrom(v63, (const CoreML::Specification::NeuralNetworkClassifier *)v65);
        break;
      case 404:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 404;
        v66 = (CoreML::Specification::KNearestNeighborsClassifier *)operator new();
        v67 = (CoreML::Specification::KNearestNeighborsClassifier *)CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(v66);
        *((_QWORD *)this + 4) = v66;
        if (*((_DWORD *)a2 + 11) == 404)
          v68 = (uint64_t *)*((_QWORD *)a2 + 4);
        else
          v68 = CoreML::Specification::KNearestNeighborsClassifier::default_instance(v67);
        CoreML::Specification::KNearestNeighborsClassifier::MergeFrom(v66, (const CoreML::Specification::KNearestNeighborsClassifier *)v68);
        break;
      default:
        return this;
    }
  }
  return this;
}

void sub_21841A8B4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C40280AC348);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Model::~Model(CoreML::Specification::Model *this)
{
  *(_QWORD *)this = &off_24D9400F0;
  CoreML::Specification::Model::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Model::~Model(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::Model::SharedDtor(uint64_t *this)
{
  uint64_t v1;

  v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_Model_default_instance_)
  {
    this = (uint64_t *)this[2];
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  if (*(_DWORD *)(v1 + 44))
    return (uint64_t *)CoreML::Specification::Model::clear_Type(v1);
  return this;
}

uint64_t CoreML::Specification::Model::clear_Type(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 44);
  if (v2 > 599)
  {
    if (v2 > 899)
    {
      switch(v2)
      {
        case 2000:
        case 2001:
        case 2002:
        case 2003:
        case 2004:
        case 2005:
        case 2006:
          goto LABEL_10;
        default:
          if (v2 == 900 || v2 == 3000)
            goto LABEL_10;
          break;
      }
    }
    else
    {
      switch(v2)
      {
        case 600:
        case 601:
        case 602:
        case 603:
        case 604:
        case 606:
        case 607:
        case 609:
        case 610:
          goto LABEL_10;
        default:
          break;
      }
    }
  }
  else
  {
    if (v2 > 399)
    {
      if (v2 <= 499)
      {
        switch(v2)
        {
          case 400:
          case 401:
          case 402:
          case 403:
          case 404:
            goto LABEL_10;
          default:
            goto LABEL_12;
        }
        goto LABEL_12;
      }
      if (v2 > 502 && v2 != 555 && v2 != 556)
        goto LABEL_12;
LABEL_10:
      this = *(_QWORD *)(this + 32);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      goto LABEL_12;
    }
    if (v2 <= 299)
    {
      if (v2 != 200 && v2 != 201 && v2 != 202)
        goto LABEL_12;
      goto LABEL_10;
    }
    switch(v2)
    {
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
        goto LABEL_10;
      default:
        break;
    }
  }
LABEL_12:
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

CoreML::Specification::Model *CoreML::Specification::Model::New(CoreML::Specification::Model *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Model *v3;

  v3 = (CoreML::Specification::Model *)operator new();
  CoreML::Specification::Model::Model(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Model>(a2, v3);
  return v3;
}

void sub_21841ADAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Model>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>);
  return result;
}

uint64_t CoreML::Specification::Model::Clear(CoreML::Specification::Model *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)((char *)v3 + 5) = 0;
  *v3 = 0;
  return CoreML::Specification::Model::clear_Type((uint64_t)this);
}

uint64_t CoreML::Specification::Model::MergePartialFromCodedStream(CoreML::Specification::Model *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  unsigned int TagFallback;
  unsigned int v13;
  CoreML::Specification::OneHotEncoder *v14;
  CoreML::Specification::GLMRegressor *v15;
  CoreML::Specification::CoreMLModels::TextClassifier *v16;
  CoreML::Specification::GLMClassifier *v17;
  CoreML::Specification::ModelDescription *v18;
  char *v19;
  int v20;
  CoreML::Specification::V5::Program *v21;
  CoreML::Specification::PipelineClassifier *v22;
  CoreML::Specification::SerializedModel *v23;
  CoreML::Specification::LinkedModel *v24;
  CoreML::Specification::Pipeline *v25;
  char *v26;
  int v27;
  char *v28;
  unint64_t Varint64Fallback;
  CoreML::Specification::Imputer *v30;
  CoreML::Specification::FeatureVectorizer *v31;
  CoreML::Specification::DictVectorizer *v32;
  CoreML::Specification::Scaler *v33;
  CoreML::Specification::CategoricalMapping *v34;
  CoreML::Specification::Normalizer *v35;
  CoreML::Specification::ArrayFeatureExtractor *v36;
  CoreML::Specification::NonMaximumSuppression *v37;
  CoreML::Specification::CoreMLModels::WordTagger *v38;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v39;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v40;
  CoreML::Specification::CoreMLModels::Gazetteer *v41;
  CoreML::Specification::CoreMLModels::WordEmbedding *v42;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v43;
  CoreML::Specification::SupportVectorClassifier *v44;
  CoreML::Specification::TreeEnsembleClassifier *v45;
  CoreML::Specification::NeuralNetworkClassifier *v46;
  CoreML::Specification::KNearestNeighborsClassifier *v47;
  CoreML::Specification::NeuralNetwork *v48;
  CoreML::Specification::ItemSimilarityRecommender *v49;
  CoreML::Specification::Identity *v50;
  CoreML::Specification::CustomModel *v51;
  CoreML::Specification::SupportVectorRegressor *v52;
  CoreML::Specification::TreeEnsembleRegressor *v53;
  CoreML::Specification::NeuralNetworkRegressor *v54;
  CoreML::Specification::BayesianProbitRegressor *v55;
  CoreML::Specification::PipelineRegressor *v56;
  char *v57;
  int v58;
  char *v59;
  int v60;
  char *v61;
  int v62;
  char *v63;
  int v64;
  char *v65;
  int v66;
  char *v67;
  int v68;
  char *v69;
  int v70;
  char *v71;
  int v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  char *v77;
  int v78;
  char *v79;
  int VarintSizeAsIntFallback;
  char *v81;
  int v82;
  char *v83;
  int v84;
  char *v85;
  int v86;
  char *v87;
  int v88;
  char *v89;
  int v90;
  char *v91;
  int v92;
  char *v93;
  int v94;
  char *v95;
  int v96;
  char *v97;
  int v98;
  char *v99;
  int v100;
  char *v101;
  int v102;
  char *v103;
  int v104;
  char *v105;
  int v106;
  char *v107;
  int v108;
  char *v109;
  int v110;
  char *v111;
  int v112;
  char *v113;
  int v114;
  char v115;
  unint64_t v116;
  unsigned int v117;
  int v118;
  uint64_t result;
  unint64_t v120;
  unsigned int v121;
  char *v122;
  int v123;
  char *v124;
  int v125;
  char *v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  char *v132;
  int v133;
  char *v134;
  int v135;
  unint64_t v136;
  unsigned int v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unsigned int v141;
  unint64_t v142;
  unsigned int v143;
  unint64_t v144;
  unsigned int v145;
  unint64_t v146;
  unsigned int v147;
  unint64_t v148;
  unsigned int v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unsigned int v153;
  unint64_t v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int v161;
  unint64_t v162;
  unsigned int v163;
  unint64_t v164;
  unsigned int v165;
  unint64_t v166;
  unsigned int v167;
  unint64_t v168;
  unsigned int v169;
  unint64_t v170;
  unsigned int v171;
  unint64_t v172;
  unsigned int v173;
  unint64_t v174;
  unsigned int v175;
  unint64_t v176;
  unsigned int v177;
  unint64_t v178;
  unsigned int v179;
  unint64_t v180;
  unsigned int v181;
  unint64_t v182;
  unsigned int v183;
  unint64_t v184;
  unsigned int v185;
  unint64_t v186;
  unsigned int v187;
  unint64_t v188;
  unsigned int v189;
  unint64_t v190;
  unsigned int v191;
  unint64_t v192;
  unsigned int v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int v196;
  unint64_t v197;
  unsigned int v198;
  unint64_t v199;
  unsigned int v200;
  unint64_t v201;
  unsigned int v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t Varint32Fallback;

  while (1)
  {
LABEL_1:
    v5 = *(unsigned __int8 **)a2;
    v6 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v6)
    {
      v8 = 0;
    }
    else
    {
      v7 = v5 + 1;
      v8 = *v5;
      if ((char)*v5 >= 1)
      {
        *(_QWORD *)a2 = v7;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_8;
        goto LABEL_16;
      }
      if ((unint64_t)v7 < v6)
      {
        v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(_QWORD *)a2 = v5 + 2;
          v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_16;
        }
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
    v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x5DC2) << 32);
    if ((v9 & 0x100000000) == 0)
      goto LABEL_8;
LABEL_16:
    v13 = v9 >> 3;
    if (v9 >> 3 > 0x22A)
      break;
    if (v9 >> 3 > 0x18F)
    {
      if (v9 >> 3 <= 0x1F3)
      {
        switch(v13)
        {
          case 0x190u:
            if (v9 != 130)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 400)
            {
              v17 = (CoreML::Specification::GLMClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 400;
              v17 = (CoreML::Specification::GLMClassifier *)operator new();
              CoreML::Specification::GLMClassifier::GLMClassifier(v17);
              *((_QWORD *)this + 4) = v17;
            }
            v79 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v79 < 0)
            {
              VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0)
                return 0;
            }
            else
            {
              VarintSizeAsIntFallback = *v79;
              *(_QWORD *)a2 = v79 + 1;
            }
            v156 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
            if ((v156 & 0x8000000000000000) != 0)
              return 0;
            v118 = v156;
            result = CoreML::Specification::GLMClassifier::MergePartialFromCodedStream(v17, a2, v157);
            if (!(_DWORD)result)
              return result;
            goto LABEL_454;
          case 0x191u:
            if (v9 != 138)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 401)
            {
              v44 = (CoreML::Specification::SupportVectorClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 401;
              v44 = (CoreML::Specification::SupportVectorClassifier *)operator new();
              CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v44);
              *((_QWORD *)this + 4) = v44;
            }
            v97 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v97 < 0)
            {
              v98 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v98 < 0)
                return 0;
            }
            else
            {
              v98 = *v97;
              *(_QWORD *)a2 = v97 + 1;
            }
            v174 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v98);
            if ((v174 & 0x8000000000000000) != 0)
              return 0;
            v118 = v174;
            result = CoreML::Specification::SupportVectorClassifier::MergePartialFromCodedStream(v44, a2, v175);
            if (!(_DWORD)result)
              return result;
            goto LABEL_454;
          case 0x192u:
            if (v9 != 146)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 402)
            {
              v45 = (CoreML::Specification::TreeEnsembleClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 402;
              v45 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
              CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v45);
              *((_QWORD *)this + 4) = v45;
            }
            v99 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v99 < 0)
            {
              v100 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v100 < 0)
                return 0;
            }
            else
            {
              v100 = *v99;
              *(_QWORD *)a2 = v99 + 1;
            }
            v176 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v100);
            if ((v176 & 0x8000000000000000) != 0)
              return 0;
            v118 = v176;
            result = CoreML::Specification::TreeEnsembleClassifier::MergePartialFromCodedStream(v45, a2, v177);
            if (!(_DWORD)result)
              return result;
            goto LABEL_454;
          case 0x193u:
            if (v9 != 154)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 403)
            {
              v46 = (CoreML::Specification::NeuralNetworkClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 403;
              v46 = (CoreML::Specification::NeuralNetworkClassifier *)operator new();
              CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier(v46);
              *((_QWORD *)this + 4) = v46;
            }
            v101 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v101 < 0)
            {
              v102 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v102 < 0)
                return 0;
            }
            else
            {
              v102 = *v101;
              *(_QWORD *)a2 = v101 + 1;
            }
            v178 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v102);
            if ((v178 & 0x8000000000000000) != 0)
              return 0;
            v118 = v178;
            result = CoreML::Specification::NeuralNetworkClassifier::MergePartialFromCodedStream(v46, a2, v179);
            if (!(_DWORD)result)
              return result;
            goto LABEL_454;
          case 0x194u:
            if (v9 != 162)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 404)
            {
              v47 = (CoreML::Specification::KNearestNeighborsClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 404;
              v47 = (CoreML::Specification::KNearestNeighborsClassifier *)operator new();
              CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(v47);
              *((_QWORD *)this + 4) = v47;
            }
            v103 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v103 < 0)
            {
              v104 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v104 < 0)
                return 0;
            }
            else
            {
              v104 = *v103;
              *(_QWORD *)a2 = v103 + 1;
            }
            v180 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v104);
            if ((v180 & 0x8000000000000000) != 0)
              return 0;
            v118 = v180;
            result = CoreML::Specification::KNearestNeighborsClassifier::MergePartialFromCodedStream(v47, a2, v181);
            if (!(_DWORD)result)
              return result;
            goto LABEL_454;
          default:
            goto LABEL_8;
        }
      }
      if (v13 == 500)
      {
        if (v9 == 162)
        {
          if (*((_DWORD *)this + 11) == 500)
          {
            v48 = (CoreML::Specification::NeuralNetwork *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 500;
            v48 = (CoreML::Specification::NeuralNetwork *)operator new();
            CoreML::Specification::NeuralNetwork::NeuralNetwork(v48);
            *((_QWORD *)this + 4) = v48;
          }
          v105 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v105 < 0)
          {
            v106 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v106 < 0)
              return 0;
          }
          else
          {
            v106 = *v105;
            *(_QWORD *)a2 = v105 + 1;
          }
          v182 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v106);
          if ((v182 & 0x8000000000000000) != 0)
            return 0;
          v118 = v182;
          result = CoreML::Specification::NeuralNetwork::MergePartialFromCodedStream(v48, (char **)a2, v183);
          if (!(_DWORD)result)
            return result;
          goto LABEL_454;
        }
      }
      else if (v13 == 501)
      {
        if (v9 == 170)
        {
          if (*((_DWORD *)this + 11) == 501)
          {
            v49 = (CoreML::Specification::ItemSimilarityRecommender *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 501;
            v49 = (CoreML::Specification::ItemSimilarityRecommender *)operator new();
            CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(v49);
            *((_QWORD *)this + 4) = v49;
          }
          v107 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v107 < 0)
          {
            v108 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v108 < 0)
              return 0;
          }
          else
          {
            v108 = *v107;
            *(_QWORD *)a2 = v107 + 1;
          }
          v184 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v108);
          if ((v184 & 0x8000000000000000) != 0)
            return 0;
          v118 = v184;
          result = CoreML::Specification::ItemSimilarityRecommender::MergePartialFromCodedStream(v49, a2, v185);
          if (!(_DWORD)result)
            return result;
          goto LABEL_454;
        }
      }
      else if (v13 == 502 && v9 == 178)
      {
        if (*((_DWORD *)this + 11) == 502)
        {
          v21 = (CoreML::Specification::V5::Program *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 502;
          v21 = (CoreML::Specification::V5::Program *)operator new();
          CoreML::Specification::V5::Program::Program(v21);
          *((_QWORD *)this + 4) = v21;
        }
        v81 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v81 < 0)
        {
          v82 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v82 < 0)
            return 0;
        }
        else
        {
          v82 = *v81;
          *(_QWORD *)a2 = v81 + 1;
        }
        v158 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v82);
        if ((v158 & 0x8000000000000000) != 0)
          return 0;
        v118 = v158;
        result = CoreML::Specification::V5::Program::MergePartialFromCodedStream(v21, (char **)a2, v159);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      }
      goto LABEL_8;
    }
    if (v9 >> 3 <= 0xC8)
    {
      if (v9 >> 3 > 9)
      {
        if (v13 != 10)
        {
          if (v13 == 200 && v9 == 66)
          {
            if (*((_DWORD *)this + 11) == 200)
            {
              v22 = (CoreML::Specification::PipelineClassifier *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 200;
              v22 = (CoreML::Specification::PipelineClassifier *)operator new();
              CoreML::Specification::PipelineClassifier::PipelineClassifier(v22);
              *((_QWORD *)this + 4) = v22;
            }
            v57 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v57 < 0)
            {
              v58 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v58 < 0)
                return 0;
            }
            else
            {
              v58 = *v57;
              *(_QWORD *)a2 = v57 + 1;
            }
            v120 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v58);
            if ((v120 & 0x8000000000000000) != 0)
              return 0;
            v118 = v120;
            result = CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(v22, (char **)a2, v121);
            if (!(_DWORD)result)
              return result;
            goto LABEL_454;
          }
          goto LABEL_8;
        }
        if (v9 != 80)
          goto LABEL_8;
        v28 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v28 < 0)
        {
          Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v115 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v28;
          *(_QWORD *)a2 = v28 + 1;
        }
        *((_BYTE *)this + 28) = Varint64Fallback != 0;
      }
      else
      {
        if (v13 != 1)
        {
          if (v13 == 2 && v9 == 18)
          {
            v18 = (CoreML::Specification::ModelDescription *)*((_QWORD *)this + 2);
            if (!v18)
            {
              v18 = (CoreML::Specification::ModelDescription *)operator new();
              CoreML::Specification::ModelDescription::ModelDescription(v18);
              *((_QWORD *)this + 2) = v18;
            }
            v19 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
            {
              v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v20 < 0)
                return 0;
            }
            else
            {
              v20 = *v19;
              *(_QWORD *)a2 = v19 + 1;
            }
            v116 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v20);
            if ((v116 & 0x8000000000000000) != 0)
              return 0;
            v118 = v116;
            result = CoreML::Specification::ModelDescription::MergePartialFromCodedStream(v18, a2, v117);
            if (!(_DWORD)result)
              return result;
            goto LABEL_454;
          }
          goto LABEL_8;
        }
        if (v9 != 8)
          goto LABEL_8;
        v26 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v27 = 0;
        }
        else
        {
          v27 = *v26;
          if ((*v26 & 0x80000000) == 0)
          {
            *(_QWORD *)a2 = v26 + 1;
            goto LABEL_458;
          }
        }
        Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v27);
        v27 = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
LABEL_458:
        *((_DWORD *)this + 6) = v27;
      }
    }
    else
    {
      switch(v13)
      {
        case 0x12Cu:
          if (v9 != 98)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 300)
          {
            v15 = (CoreML::Specification::GLMRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 300;
            v15 = (CoreML::Specification::GLMRegressor *)operator new();
            CoreML::Specification::GLMRegressor::GLMRegressor(v15);
            *((_QWORD *)this + 4) = v15;
          }
          v122 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v122 < 0)
          {
            v123 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v123 < 0)
              return 0;
          }
          else
          {
            v123 = *v122;
            *(_QWORD *)a2 = v122 + 1;
          }
          v192 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v123);
          if ((v192 & 0x8000000000000000) != 0)
            return 0;
          v118 = v192;
          result = CoreML::Specification::GLMRegressor::MergePartialFromCodedStream(v15, (char **)a2, v193);
          if (!(_DWORD)result)
            return result;
          break;
        case 0x12Du:
          if (v9 != 106)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 301)
          {
            v52 = (CoreML::Specification::SupportVectorRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 301;
            v52 = (CoreML::Specification::SupportVectorRegressor *)operator new();
            CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v52);
            *((_QWORD *)this + 4) = v52;
          }
          v126 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v126 < 0)
          {
            v127 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v127 < 0)
              return 0;
          }
          else
          {
            v127 = *v126;
            *(_QWORD *)a2 = v126 + 1;
          }
          v195 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v127);
          if ((v195 & 0x8000000000000000) != 0)
            return 0;
          v118 = v195;
          result = CoreML::Specification::SupportVectorRegressor::MergePartialFromCodedStream(v52, (char **)a2, v196);
          if (!(_DWORD)result)
            return result;
          break;
        case 0x12Eu:
          if (v9 != 114)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 302)
          {
            v53 = (CoreML::Specification::TreeEnsembleRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 302;
            v53 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
            CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v53);
            *((_QWORD *)this + 4) = v53;
          }
          v128 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v128 < 0)
          {
            v129 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v129 < 0)
              return 0;
          }
          else
          {
            v129 = *v128;
            *(_QWORD *)a2 = v128 + 1;
          }
          v197 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v129);
          if ((v197 & 0x8000000000000000) != 0)
            return 0;
          v118 = v197;
          result = CoreML::Specification::TreeEnsembleRegressor::MergePartialFromCodedStream(v53, (char **)a2, v198);
          if (!(_DWORD)result)
            return result;
          break;
        case 0x12Fu:
          if (v9 != 122)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 303)
          {
            v54 = (CoreML::Specification::NeuralNetworkRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 303;
            v54 = (CoreML::Specification::NeuralNetworkRegressor *)operator new();
            CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor(v54);
            *((_QWORD *)this + 4) = v54;
          }
          v130 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v130 < 0)
          {
            v131 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v131 < 0)
              return 0;
          }
          else
          {
            v131 = *v130;
            *(_QWORD *)a2 = v130 + 1;
          }
          v199 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v131);
          if ((v199 & 0x8000000000000000) != 0)
            return 0;
          v118 = v199;
          result = CoreML::Specification::NeuralNetworkRegressor::MergePartialFromCodedStream(v54, (char **)a2, v200);
          if (!(_DWORD)result)
            return result;
          break;
        case 0x130u:
          if (v9 != 130)
            goto LABEL_8;
          if (*((_DWORD *)this + 11) == 304)
          {
            v55 = (CoreML::Specification::BayesianProbitRegressor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 304;
            v55 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
            CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v55);
            *((_QWORD *)this + 4) = v55;
          }
          v132 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v132 < 0)
          {
            v133 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v133 < 0)
              return 0;
          }
          else
          {
            v133 = *v132;
            *(_QWORD *)a2 = v132 + 1;
          }
          v201 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v133);
          if ((v201 & 0x8000000000000000) != 0)
            return 0;
          v118 = v201;
          result = CoreML::Specification::BayesianProbitRegressor::MergePartialFromCodedStream(v55, a2, v202);
          if (!(_DWORD)result)
            return result;
          break;
        default:
          if (v13 == 201)
          {
            if (v9 != 74)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 201)
            {
              v56 = (CoreML::Specification::PipelineRegressor *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 201;
              v56 = (CoreML::Specification::PipelineRegressor *)operator new();
              CoreML::Specification::PipelineRegressor::PipelineRegressor(v56);
              *((_QWORD *)this + 4) = v56;
            }
            v134 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v134 < 0)
            {
              v135 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v135 < 0)
                return 0;
            }
            else
            {
              v135 = *v134;
              *(_QWORD *)a2 = v134 + 1;
            }
            v203 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v135);
            if ((v203 & 0x8000000000000000) != 0)
              return 0;
            v118 = v203;
            result = CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(v56, (char **)a2, v204);
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            if (v13 != 202 || v9 != 82)
              goto LABEL_8;
            if (*((_DWORD *)this + 11) == 202)
            {
              v25 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 202;
              v25 = (CoreML::Specification::Pipeline *)operator new();
              CoreML::Specification::Pipeline::Pipeline(v25);
              *((_QWORD *)this + 4) = v25;
            }
            v124 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v124 < 0)
            {
              v125 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v125 < 0)
                return 0;
            }
            else
            {
              v125 = *v124;
              *(_QWORD *)a2 = v124 + 1;
            }
            v194 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v125);
            if ((v194 & 0x8000000000000000) != 0)
              return 0;
            v118 = v194;
            result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v25, a2);
            if (!(_DWORD)result)
              return result;
          }
          break;
      }
LABEL_454:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v118))
        return 0;
    }
  }
  if (v9 >> 3 > 0x383)
  {
    switch(v13)
    {
      case 0x7D0u:
        if (v9 != 130)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 2000)
        {
          v16 = (CoreML::Specification::CoreMLModels::TextClassifier *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2000;
          v16 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
          CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v16);
          *((_QWORD *)this + 4) = v16;
        }
        v77 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v77 < 0)
        {
          v78 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v78 < 0)
            return 0;
        }
        else
        {
          v78 = *v77;
          *(_QWORD *)a2 = v77 + 1;
        }
        v154 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v78);
        if ((v154 & 0x8000000000000000) != 0)
          return 0;
        v118 = v154;
        result = CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(v16, a2, v155);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      case 0x7D1u:
        if (v9 != 138)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 2001)
        {
          v38 = (CoreML::Specification::CoreMLModels::WordTagger *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2001;
          v38 = (CoreML::Specification::CoreMLModels::WordTagger *)operator new();
          CoreML::Specification::CoreMLModels::WordTagger::WordTagger(v38);
          *((_QWORD *)this + 4) = v38;
        }
        v85 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v85 < 0)
        {
          v86 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v86 < 0)
            return 0;
        }
        else
        {
          v86 = *v85;
          *(_QWORD *)a2 = v85 + 1;
        }
        v162 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v86);
        if ((v162 & 0x8000000000000000) != 0)
          return 0;
        v118 = v162;
        result = CoreML::Specification::CoreMLModels::WordTagger::MergePartialFromCodedStream(v38, a2, v163);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      case 0x7D2u:
        if (v9 != 146)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 2002)
        {
          v39 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2002;
          v39 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
          CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v39);
          *((_QWORD *)this + 4) = v39;
        }
        v87 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v87 < 0)
        {
          v88 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v88 < 0)
            return 0;
        }
        else
        {
          v88 = *v87;
          *(_QWORD *)a2 = v87 + 1;
        }
        v164 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v88);
        if ((v164 & 0x8000000000000000) != 0)
          return 0;
        v118 = v164;
        result = CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergePartialFromCodedStream(v39, a2, v165);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      case 0x7D3u:
        if (v9 != 154)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 2003)
        {
          v40 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2003;
          v40 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
          CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v40);
          *((_QWORD *)this + 4) = v40;
        }
        v89 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v89 < 0)
        {
          v90 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v90 < 0)
            return 0;
        }
        else
        {
          v90 = *v89;
          *(_QWORD *)a2 = v89 + 1;
        }
        v166 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v90);
        if ((v166 & 0x8000000000000000) != 0)
          return 0;
        v118 = v166;
        result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(v40, a2, v167);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      case 0x7D4u:
        if (v9 != 162)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 2004)
        {
          v41 = (CoreML::Specification::CoreMLModels::Gazetteer *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2004;
          v41 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
          CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v41);
          *((_QWORD *)this + 4) = v41;
        }
        v91 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v91 < 0)
        {
          v92 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v92 < 0)
            return 0;
        }
        else
        {
          v92 = *v91;
          *(_QWORD *)a2 = v91 + 1;
        }
        v168 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v92);
        if ((v168 & 0x8000000000000000) != 0)
          return 0;
        v118 = v168;
        result = CoreML::Specification::CoreMLModels::Gazetteer::MergePartialFromCodedStream(v41, a2, v169);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      case 0x7D5u:
        if (v9 != 170)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 2005)
        {
          v42 = (CoreML::Specification::CoreMLModels::WordEmbedding *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2005;
          v42 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
          CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v42);
          *((_QWORD *)this + 4) = v42;
        }
        v93 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v93 < 0)
        {
          v94 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v94 < 0)
            return 0;
        }
        else
        {
          v94 = *v93;
          *(_QWORD *)a2 = v93 + 1;
        }
        v170 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v94);
        if ((v170 & 0x8000000000000000) != 0)
          return 0;
        v118 = v170;
        result = CoreML::Specification::CoreMLModels::WordEmbedding::MergePartialFromCodedStream(v42, a2, v171);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      case 0x7D6u:
        if (v9 != 178)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 2006)
        {
          v43 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2006;
          v43 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
          CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v43);
          *((_QWORD *)this + 4) = v43;
        }
        v95 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v95 < 0)
        {
          v96 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v96 < 0)
            return 0;
        }
        else
        {
          v96 = *v95;
          *(_QWORD *)a2 = v95 + 1;
        }
        v172 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v96);
        if ((v172 & 0x8000000000000000) != 0)
          return 0;
        v118 = v172;
        result = CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(v43, a2, v173);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      default:
        if (v13 == 900)
        {
          if (v9 == 34)
          {
            if (*((_DWORD *)this + 11) == 900)
            {
              v50 = (CoreML::Specification::Identity *)*((_QWORD *)this + 4);
            }
            else
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 900;
              v50 = (CoreML::Specification::Identity *)operator new();
              CoreML::Specification::Identity::Identity(v50);
              *((_QWORD *)this + 4) = v50;
            }
            v109 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v109 < 0)
            {
              v110 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v110 < 0)
                return 0;
            }
            else
            {
              v110 = *v109;
              *(_QWORD *)a2 = v109 + 1;
            }
            v186 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v110);
            if ((v186 & 0x8000000000000000) != 0)
              return 0;
            v118 = v186;
            result = CoreML::Specification::Identity::MergePartialFromCodedStream(v50, (char **)a2, v187);
            if (!(_DWORD)result)
              return result;
            goto LABEL_454;
          }
        }
        else if (v13 == 3000 && v9 == 194)
        {
          if (*((_DWORD *)this + 11) == 3000)
          {
            v23 = (CoreML::Specification::SerializedModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 3000;
            v23 = (CoreML::Specification::SerializedModel *)operator new();
            CoreML::Specification::SerializedModel::SerializedModel(v23);
            *((_QWORD *)this + 4) = v23;
          }
          v83 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v83 < 0)
          {
            v84 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v84 < 0)
              return 0;
          }
          else
          {
            v84 = *v83;
            *(_QWORD *)a2 = v83 + 1;
          }
          v160 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v84);
          if ((v160 & 0x8000000000000000) != 0)
            return 0;
          v118 = v160;
          result = CoreML::Specification::SerializedModel::MergePartialFromCodedStream(v23, (char **)a2, v161);
          if (!(_DWORD)result)
            return result;
          goto LABEL_454;
        }
        break;
    }
    goto LABEL_8;
  }
  switch(v13)
  {
    case 0x258u:
      if (v9 != 194)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 600)
      {
        v14 = (CoreML::Specification::OneHotEncoder *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 600;
        v14 = (CoreML::Specification::OneHotEncoder *)operator new();
        CoreML::Specification::OneHotEncoder::OneHotEncoder(v14);
        *((_QWORD *)this + 4) = v14;
      }
      v59 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v59 < 0)
      {
        v60 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v60 < 0)
          return 0;
      }
      else
      {
        v60 = *v59;
        *(_QWORD *)a2 = v59 + 1;
      }
      v136 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v60);
      if ((v136 & 0x8000000000000000) != 0)
        return 0;
      v118 = v136;
      result = CoreML::Specification::OneHotEncoder::MergePartialFromCodedStream(v14, (char **)a2, v137);
      if (!(_DWORD)result)
        return result;
      goto LABEL_454;
    case 0x259u:
      if (v9 != 202)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 601)
      {
        v30 = (CoreML::Specification::Imputer *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 601;
        v30 = (CoreML::Specification::Imputer *)operator new();
        CoreML::Specification::Imputer::Imputer(v30);
        *((_QWORD *)this + 4) = v30;
      }
      v61 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v61 < 0)
      {
        v62 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v62 < 0)
          return 0;
      }
      else
      {
        v62 = *v61;
        *(_QWORD *)a2 = v61 + 1;
      }
      v138 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v62);
      if ((v138 & 0x8000000000000000) != 0)
        return 0;
      v118 = v138;
      result = CoreML::Specification::Imputer::MergePartialFromCodedStream(v30, (char **)a2, v139);
      if (!(_DWORD)result)
        return result;
      goto LABEL_454;
    case 0x25Au:
      if (v9 != 210)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 602)
      {
        v31 = (CoreML::Specification::FeatureVectorizer *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 602;
        v31 = (CoreML::Specification::FeatureVectorizer *)operator new();
        CoreML::Specification::FeatureVectorizer::FeatureVectorizer(v31);
        *((_QWORD *)this + 4) = v31;
      }
      v63 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v63 < 0)
      {
        v64 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v64 < 0)
          return 0;
      }
      else
      {
        v64 = *v63;
        *(_QWORD *)a2 = v63 + 1;
      }
      v140 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v64);
      if ((v140 & 0x8000000000000000) != 0)
        return 0;
      v118 = v140;
      result = CoreML::Specification::FeatureVectorizer::MergePartialFromCodedStream(v31, (char **)a2, v141);
      if (!(_DWORD)result)
        return result;
      goto LABEL_454;
    case 0x25Bu:
      if (v9 != 218)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 603)
      {
        v32 = (CoreML::Specification::DictVectorizer *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 603;
        v32 = (CoreML::Specification::DictVectorizer *)operator new();
        CoreML::Specification::DictVectorizer::DictVectorizer(v32);
        *((_QWORD *)this + 4) = v32;
      }
      v65 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v65 < 0)
      {
        v66 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v66 < 0)
          return 0;
      }
      else
      {
        v66 = *v65;
        *(_QWORD *)a2 = v65 + 1;
      }
      v142 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v66);
      if ((v142 & 0x8000000000000000) != 0)
        return 0;
      v118 = v142;
      result = CoreML::Specification::DictVectorizer::MergePartialFromCodedStream(v32, (char **)a2, v143);
      if (!(_DWORD)result)
        return result;
      goto LABEL_454;
    case 0x25Cu:
      if (v9 != 226)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 604)
      {
        v33 = (CoreML::Specification::Scaler *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 604;
        v33 = (CoreML::Specification::Scaler *)operator new();
        CoreML::Specification::Scaler::Scaler(v33);
        *((_QWORD *)this + 4) = v33;
      }
      v67 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v67 < 0)
      {
        v68 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v68 < 0)
          return 0;
      }
      else
      {
        v68 = *v67;
        *(_QWORD *)a2 = v67 + 1;
      }
      v144 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v68);
      if ((v144 & 0x8000000000000000) != 0)
        return 0;
      v118 = v144;
      result = CoreML::Specification::Scaler::MergePartialFromCodedStream(v33, (char **)a2, v145);
      if (!(_DWORD)result)
        return result;
      goto LABEL_454;
    case 0x25Du:
    case 0x260u:
      goto LABEL_8;
    case 0x25Eu:
      if (v9 != 242)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 606)
      {
        v34 = (CoreML::Specification::CategoricalMapping *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 606;
        v34 = (CoreML::Specification::CategoricalMapping *)operator new();
        CoreML::Specification::CategoricalMapping::CategoricalMapping(v34);
        *((_QWORD *)this + 4) = v34;
      }
      v69 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v69 < 0)
      {
        v70 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v70 < 0)
          return 0;
      }
      else
      {
        v70 = *v69;
        *(_QWORD *)a2 = v69 + 1;
      }
      v146 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v70);
      if ((v146 & 0x8000000000000000) != 0)
        return 0;
      v118 = v146;
      result = CoreML::Specification::CategoricalMapping::MergePartialFromCodedStream(v34, a2, v147);
      if (!(_DWORD)result)
        return result;
      goto LABEL_454;
    case 0x25Fu:
      if (v9 != 250)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 607)
      {
        v35 = (CoreML::Specification::Normalizer *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 607;
        v35 = (CoreML::Specification::Normalizer *)operator new();
        CoreML::Specification::Normalizer::Normalizer(v35);
        *((_QWORD *)this + 4) = v35;
      }
      v71 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v71 < 0)
      {
        v72 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v72 < 0)
          return 0;
      }
      else
      {
        v72 = *v71;
        *(_QWORD *)a2 = v71 + 1;
      }
      v148 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v72);
      if ((v148 & 0x8000000000000000) != 0)
        return 0;
      v118 = v148;
      result = CoreML::Specification::Normalizer::MergePartialFromCodedStream(v35, (char **)a2, v149);
      if (!(_DWORD)result)
        return result;
      goto LABEL_454;
    case 0x261u:
      if (v9 != 10)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 609)
      {
        v36 = (CoreML::Specification::ArrayFeatureExtractor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 609;
        v36 = (CoreML::Specification::ArrayFeatureExtractor *)operator new();
        CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(v36);
        *((_QWORD *)this + 4) = v36;
      }
      v73 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v73 < 0)
      {
        v74 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v74 < 0)
          return 0;
      }
      else
      {
        v74 = *v73;
        *(_QWORD *)a2 = v73 + 1;
      }
      v150 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v74);
      if ((v150 & 0x8000000000000000) != 0)
        return 0;
      v118 = v150;
      result = CoreML::Specification::ArrayFeatureExtractor::MergePartialFromCodedStream(v36, (char **)a2, v151);
      if (!(_DWORD)result)
        return result;
      goto LABEL_454;
    case 0x262u:
      if (v9 != 18)
        goto LABEL_8;
      if (*((_DWORD *)this + 11) == 610)
      {
        v37 = (CoreML::Specification::NonMaximumSuppression *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 610;
        v37 = (CoreML::Specification::NonMaximumSuppression *)operator new();
        CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v37);
        *((_QWORD *)this + 4) = v37;
      }
      v75 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v75 < 0)
      {
        v76 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v76 < 0)
          return 0;
      }
      else
      {
        v76 = *v75;
        *(_QWORD *)a2 = v75 + 1;
      }
      v152 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v76);
      if ((v152 & 0x8000000000000000) != 0)
        return 0;
      v118 = v152;
      result = CoreML::Specification::NonMaximumSuppression::MergePartialFromCodedStream(v37, a2, v153);
      if (!(_DWORD)result)
        return result;
      goto LABEL_454;
    default:
      if (v13 == 555)
      {
        if (v9 != 90)
          goto LABEL_8;
        if (*((_DWORD *)this + 11) == 555)
        {
          v51 = (CoreML::Specification::CustomModel *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 555;
          v51 = (CoreML::Specification::CustomModel *)operator new();
          CoreML::Specification::CustomModel::CustomModel(v51);
          *((_QWORD *)this + 4) = v51;
        }
        v113 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v113 < 0)
        {
          v114 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v114 < 0)
            return 0;
        }
        else
        {
          v114 = *v113;
          *(_QWORD *)a2 = v113 + 1;
        }
        v190 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v114);
        if ((v190 & 0x8000000000000000) != 0)
          return 0;
        v118 = v190;
        result = CoreML::Specification::CustomModel::MergePartialFromCodedStream(v51, a2, v191);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      }
      if (v13 == 556 && v9 == 98)
      {
        if (*((_DWORD *)this + 11) == 556)
        {
          v24 = (CoreML::Specification::LinkedModel *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 556;
          v24 = (CoreML::Specification::LinkedModel *)operator new();
          CoreML::Specification::LinkedModel::LinkedModel(v24);
          *((_QWORD *)this + 4) = v24;
        }
        v111 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v111 < 0)
        {
          v112 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v112 < 0)
            return 0;
        }
        else
        {
          v112 = *v111;
          *(_QWORD *)a2 = v111 + 1;
        }
        v188 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v112);
        if ((v188 & 0x8000000000000000) != 0)
          return 0;
        v118 = v188;
        result = CoreML::Specification::LinkedModel::MergePartialFromCodedStream(v24, (char **)a2, v189);
        if (!(_DWORD)result)
          return result;
        goto LABEL_454;
      }
LABEL_8:
      if ((_DWORD)v9)
        v11 = (v9 & 7) == 4;
      else
        v11 = 1;
      if (!v11)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
        goto LABEL_1;
      }
      return 1;
  }
}

void sub_21841C9AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Model::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  int v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  if ((uint64_t *)v5 != &CoreML::Specification::_Model_default_instance_)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  if (*(_BYTE *)(v5 + 28))
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(10, 1u, a2, a4);
  v8 = *(_DWORD *)(v5 + 44);
  if (v8 == 200)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 201)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC9, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 202)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xCA, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 300)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x12C, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 301)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x12D, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 302)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x12E, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 303)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x12F, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 304)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x130, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 400)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x190, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 401)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x191, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 402)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x192, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 403)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x193, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 404)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x194, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 500)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F4, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 501)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F5, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 502)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F6, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 555)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x22B, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 556)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x22C, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 600)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x258, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 601)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x259, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 602)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25A, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 603)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25B, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 604)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25C, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 606)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25E, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 607)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25F, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 609)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x261, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 610)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x262, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 900)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x384, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2000)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D0, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2001)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D1, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2002)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D2, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2003)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D3, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2004)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D4, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2005)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D5, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2006)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D6, *(_QWORD *)(v5 + 32), a2, a4);
    v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 3000)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xBB8, *(_QWORD *)(v5 + 32), a2, a4);
  return this;
}

uint64_t CoreML::Specification::Model::ByteSizeLong(CoreML::Specification::Model *this)
{
  CoreML::Specification::ModelDescription *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (this == (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_
    || (v2 = (CoreML::Specification::ModelDescription *)*((_QWORD *)this + 2)) == 0)
  {
    v4 = 0;
  }
  else
  {
    v3 = CoreML::Specification::ModelDescription::ByteSizeLong(v2);
    v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0)
      v6 = 10;
    else
      v6 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    v4 += v6 + 1;
  }
  if (*((_BYTE *)this + 28))
    v7 = v4 + 2;
  else
    v7 = v4;
  v8 = *((_DWORD *)this + 11);
  if (v8 > 599)
  {
    if (v8 > 899)
    {
      switch(v8)
      {
        case 2000:
          v9 = CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(*((CoreML::Specification::CoreMLModels::TextClassifier **)this
                                                                                 + 4));
          goto LABEL_68;
        case 2001:
          v9 = CoreML::Specification::CoreMLModels::WordTagger::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordTagger **)this
                                                                             + 4));
          goto LABEL_68;
        case 2002:
          v9 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::VisionFeaturePrint **)this
                                                                                     + 4));
          goto LABEL_68;
        case 2003:
          v9 = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::ByteSizeLong(*((CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing **)this
                                                                                             + 4));
          goto LABEL_68;
        case 2004:
          v9 = CoreML::Specification::CoreMLModels::Gazetteer::ByteSizeLong(*((CoreML::Specification::CoreMLModels::Gazetteer **)this
                                                                            + 4));
          goto LABEL_68;
        case 2005:
          v9 = CoreML::Specification::CoreMLModels::WordEmbedding::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordEmbedding **)this
                                                                                + 4));
          goto LABEL_68;
        case 2006:
          v9 = CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::AudioFeaturePrint **)this
                                                                                    + 4));
          goto LABEL_68;
        default:
          if (v8 == 900)
          {
            v9 = CoreML::Specification::Identity::ByteSizeLong(*((CoreML::Specification::Identity **)this + 4));
            goto LABEL_68;
          }
          if (v8 == 3000)
          {
            v10 = CoreML::Specification::SerializedModel::ByteSizeLong(*((CoreML::Specification::SerializedModel **)this
                                                                       + 4));
            v7 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 3;
          }
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case 600:
          v9 = CoreML::Specification::OneHotEncoder::ByteSizeLong(*((CoreML::Specification::OneHotEncoder **)this + 4));
          goto LABEL_68;
        case 601:
          v9 = CoreML::Specification::Imputer::ByteSizeLong(*((CoreML::Specification::Imputer **)this + 4));
          goto LABEL_68;
        case 602:
          v9 = CoreML::Specification::FeatureVectorizer::ByteSizeLong(*((CoreML::Specification::FeatureVectorizer **)this
                                                                      + 4));
          goto LABEL_68;
        case 603:
          v9 = CoreML::Specification::DictVectorizer::ByteSizeLong(*((CoreML::Specification::DictVectorizer **)this + 4));
          goto LABEL_68;
        case 604:
          v9 = CoreML::Specification::Scaler::ByteSizeLong(*((CoreML::Specification::Scaler **)this + 4));
          goto LABEL_68;
        case 606:
          v9 = CoreML::Specification::CategoricalMapping::ByteSizeLong(*((CoreML::Specification::CategoricalMapping **)this
                                                                       + 4));
          goto LABEL_68;
        case 607:
          v9 = CoreML::Specification::Normalizer::ByteSizeLong(*((CoreML::Specification::Normalizer **)this + 4));
          goto LABEL_68;
        case 609:
          v9 = CoreML::Specification::ArrayFeatureExtractor::ByteSizeLong(*((CoreML::Specification::ArrayFeatureExtractor **)this
                                                                          + 4));
          goto LABEL_68;
        case 610:
          v9 = CoreML::Specification::NonMaximumSuppression::ByteSizeLong(*((CoreML::Specification::NonMaximumSuppression **)this
                                                                          + 4));
          goto LABEL_68;
        default:
          break;
      }
    }
  }
  else
  {
    if (v8 > 399)
    {
      if (v8 <= 499)
      {
        switch(v8)
        {
          case 400:
            v9 = CoreML::Specification::GLMClassifier::ByteSizeLong(*((CoreML::Specification::GLMClassifier **)this + 4));
            goto LABEL_68;
          case 401:
            v9 = CoreML::Specification::SupportVectorClassifier::ByteSizeLong(*((CoreML::Specification::SupportVectorClassifier **)this
                                                                              + 4));
            goto LABEL_68;
          case 402:
            v9 = CoreML::Specification::TreeEnsembleClassifier::ByteSizeLong(*((CoreML::Specification::TreeEnsembleClassifier **)this
                                                                             + 4));
            goto LABEL_68;
          case 403:
            v9 = CoreML::Specification::NeuralNetworkClassifier::ByteSizeLong(*((CoreML::Specification::NeuralNetworkClassifier **)this
                                                                              + 4));
            goto LABEL_68;
          case 404:
            v9 = CoreML::Specification::KNearestNeighborsClassifier::ByteSizeLong(*((CoreML::Specification::KNearestNeighborsClassifier **)this
                                                                                  + 4));
            goto LABEL_68;
          default:
            goto LABEL_69;
        }
        goto LABEL_69;
      }
      if (v8 <= 501)
      {
        if (v8 == 500)
          v9 = CoreML::Specification::NeuralNetwork::ByteSizeLong(*((CoreML::Specification::NeuralNetwork **)this + 4));
        else
          v9 = CoreML::Specification::ItemSimilarityRecommender::ByteSizeLong(*((CoreML::Specification::ItemSimilarityRecommender **)this
                                                                              + 4));
      }
      else
      {
        switch(v8)
        {
          case 502:
            v9 = CoreML::Specification::V5::Program::ByteSizeLong(*((_tc_google::protobuf::Arena ***)this + 4));
            break;
          case 555:
            v9 = CoreML::Specification::CustomModel::ByteSizeLong(*((CoreML::Specification::CustomModel **)this + 4));
            break;
          case 556:
            v9 = CoreML::Specification::LinkedModel::ByteSizeLong(*((CoreML::Specification::LinkedModelFile ***)this + 4));
            break;
          default:
            goto LABEL_69;
        }
      }
LABEL_68:
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 2;
      goto LABEL_69;
    }
    if (v8 <= 299)
    {
      switch(v8)
      {
        case 200:
          v9 = (uint64_t)CoreML::Specification::PipelineClassifier::ByteSizeLong(*((CoreML::Specification::PipelineClassifier **)this
                                                                                + 4));
          break;
        case 201:
          v9 = (uint64_t)CoreML::Specification::PipelineRegressor::ByteSizeLong(*((CoreML::Specification::PipelineRegressor **)this
                                                                               + 4));
          break;
        case 202:
          v9 = CoreML::Specification::Pipeline::ByteSizeLong(*((CoreML::Specification::Pipeline **)this + 4));
          break;
        default:
          goto LABEL_69;
      }
      goto LABEL_68;
    }
    switch(v8)
    {
      case 300:
        v9 = CoreML::Specification::GLMRegressor::ByteSizeLong(*((CoreML::Specification::GLMRegressor **)this + 4));
        goto LABEL_68;
      case 301:
        v9 = CoreML::Specification::SupportVectorRegressor::ByteSizeLong(*((CoreML::Specification::SupportVectorRegressor **)this
                                                                         + 4));
        goto LABEL_68;
      case 302:
        v9 = (uint64_t)CoreML::Specification::TreeEnsembleRegressor::ByteSizeLong(*((CoreML::Specification::TreeEnsembleRegressor **)this
                                                                                 + 4));
        goto LABEL_68;
      case 303:
        v9 = CoreML::Specification::NeuralNetworkRegressor::ByteSizeLong(*((CoreML::Specification::NeuralNetworkRegressor **)this
                                                                         + 4));
        goto LABEL_68;
      case 304:
        v9 = CoreML::Specification::BayesianProbitRegressor::ByteSizeLong(*((CoreML::Specification::BayesianProbitRegressor **)this
                                                                          + 4));
        goto LABEL_68;
      default:
        break;
    }
  }
LABEL_69:
  *((_DWORD *)this + 10) = v7;
  return v7;
}

void CoreML::Specification::Model::MergeFrom(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  uint64_t v4;
  const CoreML::Specification::ModelDescription *v5;
  CoreML::Specification::ModelDescription *v7;
  const CoreML::Specification::ModelDescription *v8;
  int v9;
  int v10;
  CoreML::Specification::GLMClassifier *v11;
  CoreML::Specification::OneHotEncoder *v12;
  CoreML::Specification::CoreMLModels::TextClassifier *v13;
  CoreML::Specification::GLMRegressor *v14;
  CoreML::Specification::LinkedModel *v15;
  CoreML::Specification::Pipeline *v16;
  CoreML::Specification::SerializedModel *v17;
  CoreML::Specification::ItemSimilarityRecommender *v18;
  CoreML::Specification::Imputer *v19;
  CoreML::Specification::FeatureVectorizer *v20;
  CoreML::Specification::DictVectorizer *v21;
  CoreML::Specification::Scaler *v22;
  CoreML::Specification::CategoricalMapping *v23;
  CoreML::Specification::Normalizer *v24;
  CoreML::Specification::ArrayFeatureExtractor *v25;
  CoreML::Specification::NonMaximumSuppression *v26;
  CoreML::Specification::SupportVectorClassifier *v27;
  CoreML::Specification::TreeEnsembleClassifier *v28;
  CoreML::Specification::NeuralNetworkClassifier *v29;
  CoreML::Specification::KNearestNeighborsClassifier *v30;
  CoreML::Specification::CoreMLModels::WordTagger *v31;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v32;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v33;
  CoreML::Specification::CoreMLModels::Gazetteer *v34;
  CoreML::Specification::CoreMLModels::WordEmbedding *v35;
  CoreML::Specification::SupportVectorRegressor *v36;
  CoreML::Specification::TreeEnsembleRegressor *v37;
  CoreML::Specification::NeuralNetworkRegressor *v38;
  CoreML::Specification::BayesianProbitRegressor *v39;
  CoreML::Specification::V5::Program *v40;
  CoreML::Specification::CustomModel *v41;
  CoreML::Specification::PipelineClassifier *v42;
  CoreML::Specification::PipelineRegressor *v43;
  CoreML::Specification::Identity *v44;
  CoreML::Specification::NeuralNetwork *v45;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v46;
  CoreML::Specification::OneHotEncoder *v47;
  uint64_t *v48;
  CoreML::Specification::Imputer *v49;
  uint64_t *v50;
  CoreML::Specification::FeatureVectorizer *v51;
  uint64_t *v52;
  CoreML::Specification::DictVectorizer *v53;
  uint64_t *v54;
  CoreML::Specification::Scaler *v55;
  uint64_t *v56;
  CoreML::Specification::CategoricalMapping *v57;
  uint64_t *v58;
  CoreML::Specification::Normalizer *v59;
  uint64_t *v60;
  CoreML::Specification::ArrayFeatureExtractor *v61;
  uint64_t *v62;
  CoreML::Specification::NonMaximumSuppression *v63;
  uint64_t *v64;
  CoreML::Specification::GLMClassifier *v65;
  uint64_t *v66;
  CoreML::Specification::CoreMLModels::TextClassifier *v67;
  uint64_t *v68;
  CoreML::Specification::GLMRegressor *v69;
  uint64_t *v70;
  CoreML::Specification::LinkedModel *v71;
  uint64_t *v72;
  CoreML::Specification::protobuf_Model_2eproto *v73;
  const CoreML::Specification::Pipeline *v74;
  CoreML::Specification::protobuf_Model_2eproto *v75;
  const CoreML::Specification::CategoricalCrossEntropyLossLayer *v76;
  CoreML::Specification::ItemSimilarityRecommender *v77;
  uint64_t *v78;
  CoreML::Specification::SupportVectorClassifier *v79;
  uint64_t *v80;
  CoreML::Specification::TreeEnsembleClassifier *v81;
  uint64_t *v82;
  CoreML::Specification::NeuralNetworkClassifier *v83;
  uint64_t *v84;
  CoreML::Specification::KNearestNeighborsClassifier *v85;
  uint64_t *v86;
  CoreML::Specification::CoreMLModels::WordTagger *v87;
  uint64_t *v88;
  CoreML::Specification::CoreMLModels::VisionFeaturePrint *v89;
  uint64_t *v90;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v91;
  uint64_t *v92;
  CoreML::Specification::CoreMLModels::Gazetteer *v93;
  uint64_t *v94;
  CoreML::Specification::CoreMLModels::WordEmbedding *v95;
  uint64_t *v96;
  CoreML::Specification::SupportVectorRegressor *v97;
  uint64_t *v98;
  CoreML::Specification::TreeEnsembleRegressor *v99;
  uint64_t *v100;
  CoreML::Specification::NeuralNetworkRegressor *v101;
  uint64_t *v102;
  CoreML::Specification::BayesianProbitRegressor *v103;
  uint64_t *v104;
  CoreML::Specification::V5::Program *v105;
  const CoreML::Specification::V5::Program *v106;
  CoreML::Specification::CustomModel *v107;
  const CoreML::Specification::CustomModel *v108;
  CoreML::Specification::protobuf_Model_2eproto *v109;
  const CoreML::Specification::PipelineClassifier *v110;
  CoreML::Specification::protobuf_Model_2eproto *v111;
  const CoreML::Specification::PipelineRegressor *v112;
  CoreML::Specification::Identity *v113;
  uint64_t *v114;
  CoreML::Specification::NeuralNetwork *v115;
  uint64_t *v116;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v117;
  uint64_t *v118;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::ModelDescription *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_ && v5 != 0)
  {
    v7 = (CoreML::Specification::ModelDescription *)*((_QWORD *)this + 2);
    if (!v7)
    {
      v7 = (CoreML::Specification::ModelDescription *)operator new();
      CoreML::Specification::ModelDescription::ModelDescription(v7);
      *((_QWORD *)this + 2) = v7;
      v5 = (const CoreML::Specification::ModelDescription *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
    CoreML::Specification::ModelDescription::MergeFrom(v7, v8);
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
    *((_DWORD *)this + 6) = v9;
  if (*((_BYTE *)a2 + 28))
    *((_BYTE *)this + 28) = 1;
  v10 = *((_DWORD *)a2 + 11);
  if (v10 > 599)
  {
    if (v10 <= 899)
    {
      switch(v10)
      {
        case 600:
          if (*((_DWORD *)this + 11) == 600)
          {
            v12 = (CoreML::Specification::OneHotEncoder *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 600;
            v12 = (CoreML::Specification::OneHotEncoder *)operator new();
            v47 = (CoreML::Specification::OneHotEncoder *)CoreML::Specification::OneHotEncoder::OneHotEncoder(v12);
            *((_QWORD *)this + 4) = v12;
            if (*((_DWORD *)a2 + 11) != 600)
            {
              v48 = CoreML::Specification::OneHotEncoder::default_instance(v47);
              goto LABEL_182;
            }
          }
          v48 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_182:
          CoreML::Specification::OneHotEncoder::MergeFrom((std::string *)v12, (const CoreML::Specification::OneHotEncoder *)v48);
          return;
        case 601:
          if (*((_DWORD *)this + 11) == 601)
          {
            v19 = (CoreML::Specification::Imputer *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 601;
            v19 = (CoreML::Specification::Imputer *)operator new();
            v49 = (CoreML::Specification::Imputer *)CoreML::Specification::Imputer::Imputer(v19);
            *((_QWORD *)this + 4) = v19;
            if (*((_DWORD *)a2 + 11) != 601)
            {
              v50 = CoreML::Specification::Imputer::default_instance(v49);
LABEL_184:
              CoreML::Specification::Imputer::MergeFrom(v19, (const CoreML::Specification::Imputer *)v50);
              return;
            }
          }
          v50 = (uint64_t *)*((_QWORD *)a2 + 4);
          goto LABEL_184;
        case 602:
          if (*((_DWORD *)this + 11) == 602)
          {
            v20 = (CoreML::Specification::FeatureVectorizer *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 602;
            v20 = (CoreML::Specification::FeatureVectorizer *)operator new();
            v51 = (CoreML::Specification::FeatureVectorizer *)CoreML::Specification::FeatureVectorizer::FeatureVectorizer(v20);
            *((_QWORD *)this + 4) = v20;
            if (*((_DWORD *)a2 + 11) != 602)
            {
              v52 = CoreML::Specification::FeatureVectorizer::default_instance(v51);
LABEL_186:
              CoreML::Specification::FeatureVectorizer::MergeFrom(v20, (const CoreML::Specification::FeatureVectorizer *)v52);
              return;
            }
          }
          v52 = (uint64_t *)*((_QWORD *)a2 + 4);
          goto LABEL_186;
        case 603:
          if (*((_DWORD *)this + 11) == 603)
          {
            v21 = (CoreML::Specification::DictVectorizer *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 603;
            v21 = (CoreML::Specification::DictVectorizer *)operator new();
            v53 = (CoreML::Specification::DictVectorizer *)CoreML::Specification::DictVectorizer::DictVectorizer(v21);
            *((_QWORD *)this + 4) = v21;
            if (*((_DWORD *)a2 + 11) != 603)
            {
              v54 = CoreML::Specification::DictVectorizer::default_instance(v53);
LABEL_188:
              CoreML::Specification::DictVectorizer::MergeFrom((std::string *)v21, (const CoreML::Specification::DictVectorizer *)v54);
              return;
            }
          }
          v54 = (uint64_t *)*((_QWORD *)a2 + 4);
          goto LABEL_188;
        case 604:
          if (*((_DWORD *)this + 11) == 604)
          {
            v22 = (CoreML::Specification::Scaler *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 604;
            v22 = (CoreML::Specification::Scaler *)operator new();
            v55 = (CoreML::Specification::Scaler *)CoreML::Specification::Scaler::Scaler(v22);
            *((_QWORD *)this + 4) = v22;
            if (*((_DWORD *)a2 + 11) != 604)
            {
              v56 = CoreML::Specification::Scaler::default_instance(v55);
LABEL_190:
              CoreML::Specification::Scaler::MergeFrom((uint64_t *)v22, (const CoreML::Specification::Scaler *)v56);
              return;
            }
          }
          v56 = (uint64_t *)*((_QWORD *)a2 + 4);
          goto LABEL_190;
        case 606:
          if (*((_DWORD *)this + 11) == 606)
          {
            v23 = (CoreML::Specification::CategoricalMapping *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 606;
            v23 = (CoreML::Specification::CategoricalMapping *)operator new();
            v57 = (CoreML::Specification::CategoricalMapping *)CoreML::Specification::CategoricalMapping::CategoricalMapping(v23);
            *((_QWORD *)this + 4) = v23;
            if (*((_DWORD *)a2 + 11) != 606)
            {
              v58 = CoreML::Specification::CategoricalMapping::default_instance(v57);
LABEL_192:
              CoreML::Specification::CategoricalMapping::MergeFrom(v23, (const CoreML::Specification::CategoricalMapping *)v58);
              return;
            }
          }
          v58 = (uint64_t *)*((_QWORD *)a2 + 4);
          goto LABEL_192;
        case 607:
          if (*((_DWORD *)this + 11) == 607)
          {
            v24 = (CoreML::Specification::Normalizer *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 607;
            v24 = (CoreML::Specification::Normalizer *)operator new();
            v59 = (CoreML::Specification::Normalizer *)CoreML::Specification::Normalizer::Normalizer(v24);
            *((_QWORD *)this + 4) = v24;
            if (*((_DWORD *)a2 + 11) != 607)
            {
              v60 = CoreML::Specification::Normalizer::default_instance(v59);
LABEL_194:
              CoreML::Specification::FlattenLayerParams::MergeFrom((std::string *)v24, (const CoreML::Specification::FlattenLayerParams *)v60);
              return;
            }
          }
          v60 = (uint64_t *)*((_QWORD *)a2 + 4);
          goto LABEL_194;
        case 609:
          if (*((_DWORD *)this + 11) == 609)
          {
            v25 = (CoreML::Specification::ArrayFeatureExtractor *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 609;
            v25 = (CoreML::Specification::ArrayFeatureExtractor *)operator new();
            v61 = (CoreML::Specification::ArrayFeatureExtractor *)CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(v25);
            *((_QWORD *)this + 4) = v25;
            if (*((_DWORD *)a2 + 11) != 609)
            {
              v62 = CoreML::Specification::ArrayFeatureExtractor::default_instance(v61);
LABEL_196:
              CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v25, (const CoreML::Specification::GLMRegressor_DoubleArray *)v62);
              return;
            }
          }
          v62 = (uint64_t *)*((_QWORD *)a2 + 4);
          goto LABEL_196;
        case 610:
          if (*((_DWORD *)this + 11) == 610)
          {
            v26 = (CoreML::Specification::NonMaximumSuppression *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 610;
            v26 = (CoreML::Specification::NonMaximumSuppression *)operator new();
            v63 = (CoreML::Specification::NonMaximumSuppression *)CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v26);
            *((_QWORD *)this + 4) = v26;
            if (*((_DWORD *)a2 + 11) != 610)
            {
              v64 = CoreML::Specification::NonMaximumSuppression::default_instance(v63);
LABEL_198:
              CoreML::Specification::NonMaximumSuppression::MergeFrom(v26, (const CoreML::Specification::NonMaximumSuppression *)v64);
              return;
            }
          }
          v64 = (uint64_t *)*((_QWORD *)a2 + 4);
          goto LABEL_198;
        default:
          return;
      }
    }
    switch(v10)
    {
      case 2000:
        if (*((_DWORD *)this + 11) == 2000)
        {
          v13 = (CoreML::Specification::CoreMLModels::TextClassifier *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2000;
          v13 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
          v67 = (CoreML::Specification::CoreMLModels::TextClassifier *)CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v13);
          *((_QWORD *)this + 4) = v13;
          if (*((_DWORD *)a2 + 11) != 2000)
          {
            v68 = CoreML::Specification::CoreMLModels::TextClassifier::default_instance(v67);
            goto LABEL_202;
          }
        }
        v68 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_202:
        CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(v13, (const CoreML::Specification::CoreMLModels::TextClassifier *)v68);
        return;
      case 2001:
        if (*((_DWORD *)this + 11) == 2001)
        {
          v31 = (CoreML::Specification::CoreMLModels::WordTagger *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2001;
          v31 = (CoreML::Specification::CoreMLModels::WordTagger *)operator new();
          v87 = (CoreML::Specification::CoreMLModels::WordTagger *)CoreML::Specification::CoreMLModels::WordTagger::WordTagger(v31);
          *((_QWORD *)this + 4) = v31;
          if (*((_DWORD *)a2 + 11) != 2001)
          {
            v88 = CoreML::Specification::CoreMLModels::WordTagger::default_instance(v87);
LABEL_222:
            CoreML::Specification::CoreMLModels::WordTagger::MergeFrom(v31, (const CoreML::Specification::CoreMLModels::WordTagger *)v88);
            return;
          }
        }
        v88 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_222;
      case 2002:
        if (*((_DWORD *)this + 11) == 2002)
        {
          v32 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2002;
          v32 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)operator new();
          v89 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(v32);
          *((_QWORD *)this + 4) = v32;
          if (*((_DWORD *)a2 + 11) != 2002)
          {
            v90 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::default_instance(v89);
LABEL_224:
            CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom(v32, (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)v90);
            return;
          }
        }
        v90 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_224;
      case 2003:
        if (*((_DWORD *)this + 11) == 2003)
        {
          v33 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2003;
          v33 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
          v91 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v33);
          *((_QWORD *)this + 4) = v33;
          if (*((_DWORD *)a2 + 11) != 2003)
          {
            v92 = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::default_instance(v91);
LABEL_226:
            CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom(v33, (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)v92);
            return;
          }
        }
        v92 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_226;
      case 2004:
        if (*((_DWORD *)this + 11) == 2004)
        {
          v34 = (CoreML::Specification::CoreMLModels::Gazetteer *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2004;
          v34 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
          v93 = (CoreML::Specification::CoreMLModels::Gazetteer *)CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v34);
          *((_QWORD *)this + 4) = v34;
          if (*((_DWORD *)a2 + 11) != 2004)
          {
            v94 = CoreML::Specification::CoreMLModels::Gazetteer::default_instance(v93);
LABEL_228:
            CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(v34, (const CoreML::Specification::CoreMLModels::Gazetteer *)v94);
            return;
          }
        }
        v94 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_228;
      case 2005:
        if (*((_DWORD *)this + 11) == 2005)
        {
          v35 = (CoreML::Specification::CoreMLModels::WordEmbedding *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2005;
          v35 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
          v95 = (CoreML::Specification::CoreMLModels::WordEmbedding *)CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v35);
          *((_QWORD *)this + 4) = v35;
          if (*((_DWORD *)a2 + 11) != 2005)
          {
            v96 = CoreML::Specification::CoreMLModels::WordEmbedding::default_instance(v95);
LABEL_230:
            CoreML::Specification::CoreMLModels::WordEmbedding::MergeFrom(v35, (const CoreML::Specification::CoreMLModels::WordEmbedding *)v96);
            return;
          }
        }
        v96 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_230;
      case 2006:
        if (*((_DWORD *)this + 11) == 2006)
        {
          v46 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2006;
          v46 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
          v117 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v46);
          *((_QWORD *)this + 4) = v46;
          if (*((_DWORD *)a2 + 11) != 2006)
          {
            v118 = CoreML::Specification::CoreMLModels::AudioFeaturePrint::default_instance(v117);
LABEL_252:
            CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom(v46, (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)v118);
            return;
          }
        }
        v118 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_252;
      default:
        if (v10 != 900)
        {
          if (v10 != 3000)
            return;
          if (*((_DWORD *)this + 11) == 3000)
          {
            v17 = (CoreML::Specification::SerializedModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 3000;
            v17 = (CoreML::Specification::SerializedModel *)operator new();
            v75 = CoreML::Specification::SerializedModel::SerializedModel(v17);
            *((_QWORD *)this + 4) = v17;
            if (*((_DWORD *)a2 + 11) != 3000)
            {
              CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v75);
              v76 = (const CoreML::Specification::CategoricalCrossEntropyLossLayer *)&CoreML::Specification::_SerializedModel_default_instance_;
              goto LABEL_210;
            }
          }
          v76 = (const CoreML::Specification::CategoricalCrossEntropyLossLayer *)*((_QWORD *)a2 + 4);
LABEL_210:
          CoreML::Specification::CategoricalCrossEntropyLossLayer::MergeFrom(v17, v76);
          return;
        }
        if (*((_DWORD *)this + 11) == 900)
        {
          v44 = (CoreML::Specification::Identity *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 900;
          v44 = (CoreML::Specification::Identity *)operator new();
          v113 = (CoreML::Specification::Identity *)CoreML::Specification::Identity::Identity(v44);
          *((_QWORD *)this + 4) = v44;
          if (*((_DWORD *)a2 + 11) != 900)
          {
            v114 = CoreML::Specification::Identity::default_instance(v113);
            goto LABEL_248;
          }
        }
        v114 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_248:
        CoreML::Specification::Identity::MergeFrom((std::string *)v44, (const CoreML::Specification::Identity *)v114);
        return;
    }
  }
  if (v10 > 399)
  {
    if (v10 <= 499)
    {
      switch(v10)
      {
        case 400:
          if (*((_DWORD *)this + 11) == 400)
          {
            v11 = (CoreML::Specification::GLMClassifier *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 400;
            v11 = (CoreML::Specification::GLMClassifier *)operator new();
            v65 = (CoreML::Specification::GLMClassifier *)CoreML::Specification::GLMClassifier::GLMClassifier(v11);
            *((_QWORD *)this + 4) = v11;
            if (*((_DWORD *)a2 + 11) != 400)
            {
              v66 = CoreML::Specification::GLMClassifier::default_instance(v65);
              goto LABEL_200;
            }
          }
          v66 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_200:
          CoreML::Specification::GLMClassifier::MergeFrom((std::string *)v11, (const CoreML::Specification::GLMClassifier *)v66);
          return;
        case 401:
          if (*((_DWORD *)this + 11) == 401)
          {
            v27 = (CoreML::Specification::SupportVectorClassifier *)*((_QWORD *)this + 4);
LABEL_142:
            v80 = (uint64_t *)*((_QWORD *)a2 + 4);
            goto LABEL_214;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 401;
          v27 = (CoreML::Specification::SupportVectorClassifier *)operator new();
          v79 = (CoreML::Specification::SupportVectorClassifier *)CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v27);
          *((_QWORD *)this + 4) = v27;
          if (*((_DWORD *)a2 + 11) == 401)
            goto LABEL_142;
          v80 = CoreML::Specification::SupportVectorClassifier::default_instance(v79);
LABEL_214:
          CoreML::Specification::SupportVectorClassifier::MergeFrom(v27, (const CoreML::Specification::SupportVectorClassifier *)v80);
          return;
        case 402:
          if (*((_DWORD *)this + 11) == 402)
          {
            v28 = (CoreML::Specification::TreeEnsembleClassifier *)*((_QWORD *)this + 4);
LABEL_144:
            v82 = (uint64_t *)*((_QWORD *)a2 + 4);
            goto LABEL_216;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 402;
          v28 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
          v81 = (CoreML::Specification::TreeEnsembleClassifier *)CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v28);
          *((_QWORD *)this + 4) = v28;
          if (*((_DWORD *)a2 + 11) == 402)
            goto LABEL_144;
          v82 = CoreML::Specification::TreeEnsembleClassifier::default_instance(v81);
LABEL_216:
          CoreML::Specification::TreeEnsembleClassifier::MergeFrom((std::string *)v28, (const CoreML::Specification::TreeEnsembleClassifier *)v82);
          return;
        case 403:
          if (*((_DWORD *)this + 11) == 403)
          {
            v29 = (CoreML::Specification::NeuralNetworkClassifier *)*((_QWORD *)this + 4);
LABEL_146:
            v84 = (uint64_t *)*((_QWORD *)a2 + 4);
            goto LABEL_218;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 403;
          v29 = (CoreML::Specification::NeuralNetworkClassifier *)operator new();
          v83 = (CoreML::Specification::NeuralNetworkClassifier *)CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier(v29);
          *((_QWORD *)this + 4) = v29;
          if (*((_DWORD *)a2 + 11) == 403)
            goto LABEL_146;
          v84 = CoreML::Specification::NeuralNetworkClassifier::default_instance(v83);
LABEL_218:
          CoreML::Specification::NeuralNetworkClassifier::MergeFrom(v29, (const CoreML::Specification::NeuralNetworkClassifier *)v84);
          return;
        case 404:
          if (*((_DWORD *)this + 11) == 404)
          {
            v30 = (CoreML::Specification::KNearestNeighborsClassifier *)*((_QWORD *)this + 4);
LABEL_148:
            v86 = (uint64_t *)*((_QWORD *)a2 + 4);
            goto LABEL_220;
          }
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 404;
          v30 = (CoreML::Specification::KNearestNeighborsClassifier *)operator new();
          v85 = (CoreML::Specification::KNearestNeighborsClassifier *)CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(v30);
          *((_QWORD *)this + 4) = v30;
          if (*((_DWORD *)a2 + 11) == 404)
            goto LABEL_148;
          v86 = CoreML::Specification::KNearestNeighborsClassifier::default_instance(v85);
LABEL_220:
          CoreML::Specification::KNearestNeighborsClassifier::MergeFrom(v30, (const CoreML::Specification::KNearestNeighborsClassifier *)v86);
          break;
        default:
          return;
      }
      return;
    }
    if (v10 > 501)
    {
      if (v10 != 502)
      {
        if (v10 != 555)
        {
          if (v10 != 556)
            return;
          if (*((_DWORD *)this + 11) == 556)
          {
            v15 = (CoreML::Specification::LinkedModel *)*((_QWORD *)this + 4);
          }
          else
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 556;
            v15 = (CoreML::Specification::LinkedModel *)operator new();
            v71 = (CoreML::Specification::LinkedModel *)CoreML::Specification::LinkedModel::LinkedModel(v15);
            *((_QWORD *)this + 4) = v15;
            if (*((_DWORD *)a2 + 11) != 556)
            {
              v72 = CoreML::Specification::LinkedModel::default_instance(v71);
              goto LABEL_206;
            }
          }
          v72 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_206:
          CoreML::Specification::LinkedModel::MergeFrom(v15, (const CoreML::Specification::LinkedModel *)v72);
          return;
        }
        if (*((_DWORD *)this + 11) == 555)
        {
          v41 = (CoreML::Specification::CustomModel *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 555;
          v41 = (CoreML::Specification::CustomModel *)operator new();
          v107 = (CoreML::Specification::CustomModel *)CoreML::Specification::CustomModel::CustomModel(v41);
          *((_QWORD *)this + 4) = v41;
          if (*((_DWORD *)a2 + 11) != 555)
          {
            v108 = (const CoreML::Specification::CustomModel *)CoreML::Specification::CustomModel::default_instance(v107);
            goto LABEL_242;
          }
        }
        v108 = (const CoreML::Specification::CustomModel *)*((_QWORD *)a2 + 4);
LABEL_242:
        CoreML::Specification::CustomModel::MergeFrom(v41, v108);
        return;
      }
      if (*((_DWORD *)this + 11) == 502)
      {
        v40 = (CoreML::Specification::V5::Program *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 502;
        v40 = (CoreML::Specification::V5::Program *)operator new();
        v105 = (CoreML::Specification::V5::Program *)CoreML::Specification::V5::Program::Program(v40);
        *((_QWORD *)this + 4) = v40;
        if (*((_DWORD *)a2 + 11) != 502)
        {
          v106 = (const CoreML::Specification::V5::Program *)CoreML::Specification::V5::Program::default_instance(v105);
          goto LABEL_240;
        }
      }
      v106 = (const CoreML::Specification::V5::Program *)*((_QWORD *)a2 + 4);
LABEL_240:
      CoreML::Specification::V5::Program::MergeFrom(v40, v106);
      return;
    }
    if (v10 != 500)
    {
      if (*((_DWORD *)this + 11) == 501)
      {
        v18 = (CoreML::Specification::ItemSimilarityRecommender *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 501;
        v18 = (CoreML::Specification::ItemSimilarityRecommender *)operator new();
        v77 = (CoreML::Specification::ItemSimilarityRecommender *)CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(v18);
        *((_QWORD *)this + 4) = v18;
        if (*((_DWORD *)a2 + 11) != 501)
        {
          v78 = CoreML::Specification::ItemSimilarityRecommender::default_instance(v77);
          goto LABEL_212;
        }
      }
      v78 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_212:
      CoreML::Specification::ItemSimilarityRecommender::MergeFrom(v18, (const CoreML::Specification::ItemSimilarityRecommender *)v78);
      return;
    }
    if (*((_DWORD *)this + 11) == 500)
    {
      v45 = (CoreML::Specification::NeuralNetwork *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 500;
      v45 = (CoreML::Specification::NeuralNetwork *)operator new();
      v115 = (CoreML::Specification::NeuralNetwork *)CoreML::Specification::NeuralNetwork::NeuralNetwork(v45);
      *((_QWORD *)this + 4) = v45;
      if (*((_DWORD *)a2 + 11) != 500)
      {
        v116 = CoreML::Specification::NeuralNetwork::default_instance(v115);
        goto LABEL_250;
      }
    }
    v116 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_250:
    CoreML::Specification::NeuralNetwork::MergeFrom(v45, (const CoreML::Specification::NeuralNetwork *)v116);
    return;
  }
  if (v10 <= 299)
  {
    if (v10 != 200)
    {
      if (v10 != 201)
      {
        if (v10 != 202)
          return;
        if (*((_DWORD *)this + 11) == 202)
        {
          v16 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 202;
          v16 = (CoreML::Specification::Pipeline *)operator new();
          v73 = CoreML::Specification::Pipeline::Pipeline(v16);
          *((_QWORD *)this + 4) = v16;
          if (*((_DWORD *)a2 + 11) != 202)
          {
            CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v73);
            v74 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
            goto LABEL_208;
          }
        }
        v74 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 4);
LABEL_208:
        CoreML::Specification::Pipeline::MergeFrom((uint64_t)v16, v74);
        return;
      }
      if (*((_DWORD *)this + 11) == 201)
      {
        v43 = (CoreML::Specification::PipelineRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 201;
        v43 = (CoreML::Specification::PipelineRegressor *)operator new();
        v111 = CoreML::Specification::PipelineRegressor::PipelineRegressor(v43);
        *((_QWORD *)this + 4) = v43;
        if (*((_DWORD *)a2 + 11) != 201)
        {
          CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v111);
          v112 = (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_;
          goto LABEL_246;
        }
      }
      v112 = (const CoreML::Specification::PipelineRegressor *)*((_QWORD *)a2 + 4);
LABEL_246:
      CoreML::Specification::PipelineRegressor::MergeFrom((std::string *)v43, v112);
      return;
    }
    if (*((_DWORD *)this + 11) == 200)
    {
      v42 = (CoreML::Specification::PipelineClassifier *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 200;
      v42 = (CoreML::Specification::PipelineClassifier *)operator new();
      v109 = CoreML::Specification::PipelineClassifier::PipelineClassifier(v42);
      *((_QWORD *)this + 4) = v42;
      if (*((_DWORD *)a2 + 11) != 200)
      {
        CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v109);
        v110 = (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_;
        goto LABEL_244;
      }
    }
    v110 = (const CoreML::Specification::PipelineClassifier *)*((_QWORD *)a2 + 4);
LABEL_244:
    CoreML::Specification::PipelineClassifier::MergeFrom((std::string *)v42, v110);
    return;
  }
  switch(v10)
  {
    case 300:
      if (*((_DWORD *)this + 11) == 300)
      {
        v14 = (CoreML::Specification::GLMRegressor *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 300;
        v14 = (CoreML::Specification::GLMRegressor *)operator new();
        v69 = (CoreML::Specification::GLMRegressor *)CoreML::Specification::GLMRegressor::GLMRegressor(v14);
        *((_QWORD *)this + 4) = v14;
        if (*((_DWORD *)a2 + 11) != 300)
        {
          v70 = CoreML::Specification::GLMRegressor::default_instance(v69);
          goto LABEL_204;
        }
      }
      v70 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_204:
      CoreML::Specification::GLMRegressor::MergeFrom((uint64_t *)v14, (const CoreML::Specification::GLMRegressor *)v70);
      return;
    case 301:
      if (*((_DWORD *)this + 11) == 301)
      {
        v36 = (CoreML::Specification::SupportVectorRegressor *)*((_QWORD *)this + 4);
LABEL_160:
        v98 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_232;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 301;
      v36 = (CoreML::Specification::SupportVectorRegressor *)operator new();
      v97 = (CoreML::Specification::SupportVectorRegressor *)CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v36);
      *((_QWORD *)this + 4) = v36;
      if (*((_DWORD *)a2 + 11) == 301)
        goto LABEL_160;
      v98 = CoreML::Specification::SupportVectorRegressor::default_instance(v97);
LABEL_232:
      CoreML::Specification::SupportVectorRegressor::MergeFrom(v36, (const CoreML::Specification::SupportVectorRegressor *)v98);
      return;
    case 302:
      if (*((_DWORD *)this + 11) == 302)
      {
        v37 = (CoreML::Specification::TreeEnsembleRegressor *)*((_QWORD *)this + 4);
LABEL_162:
        v100 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_234;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 302;
      v37 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
      v99 = (CoreML::Specification::TreeEnsembleRegressor *)CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v37);
      *((_QWORD *)this + 4) = v37;
      if (*((_DWORD *)a2 + 11) == 302)
        goto LABEL_162;
      v100 = CoreML::Specification::TreeEnsembleRegressor::default_instance(v99);
LABEL_234:
      CoreML::Specification::TreeEnsembleRegressor::MergeFrom((std::string *)v37, (const CoreML::Specification::TreeEnsembleRegressor *)v100);
      return;
    case 303:
      if (*((_DWORD *)this + 11) == 303)
      {
        v38 = (CoreML::Specification::NeuralNetworkRegressor *)*((_QWORD *)this + 4);
LABEL_164:
        v102 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_236;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 303;
      v38 = (CoreML::Specification::NeuralNetworkRegressor *)operator new();
      v101 = (CoreML::Specification::NeuralNetworkRegressor *)CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor(v38);
      *((_QWORD *)this + 4) = v38;
      if (*((_DWORD *)a2 + 11) == 303)
        goto LABEL_164;
      v102 = CoreML::Specification::NeuralNetworkRegressor::default_instance(v101);
LABEL_236:
      CoreML::Specification::NeuralNetworkRegressor::MergeFrom(v38, (const CoreML::Specification::NeuralNetworkRegressor *)v102);
      return;
    case 304:
      if (*((_DWORD *)this + 11) == 304)
      {
        v39 = (CoreML::Specification::BayesianProbitRegressor *)*((_QWORD *)this + 4);
LABEL_166:
        v104 = (uint64_t *)*((_QWORD *)a2 + 4);
        goto LABEL_238;
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 304;
      v39 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
      v103 = (CoreML::Specification::BayesianProbitRegressor *)CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v39);
      *((_QWORD *)this + 4) = v39;
      if (*((_DWORD *)a2 + 11) == 304)
        goto LABEL_166;
      v104 = CoreML::Specification::BayesianProbitRegressor::default_instance(v103);
LABEL_238:
      CoreML::Specification::BayesianProbitRegressor::MergeFrom(v39, (const CoreML::Specification::BayesianProbitRegressor *)v104);
      break;
    default:
      return;
  }
}

void sub_21841E708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Model::CopyFrom(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  uint64_t v4;
  _QWORD *v5;

  if (a2 != this)
  {
    v5 = (_QWORD *)((char *)this + 16);
    v4 = *((_QWORD *)this + 2);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)((char *)v5 + 5) = 0;
    *v5 = 0;
    CoreML::Specification::Model::clear_Type((uint64_t)this);
    CoreML::Specification::Model::MergeFrom(this, a2);
  }
}

uint64_t CoreML::Specification::Model::IsInitialized(CoreML::Specification::Model *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Model::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Model");
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this)
{
  return CoreML::Specification::Pipeline::New(this, 0);
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this)
{
  return CoreML::Specification::PipelineClassifier::New(this, 0);
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this)
{
  return CoreML::Specification::PipelineRegressor::New(this, 0);
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this)
{
  return CoreML::Specification::FeatureDescription::New(this, 0);
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this)
{
  return CoreML::Specification::Metadata::New(this, 0);
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this)
{
  return CoreML::Specification::ModelDescription::New(this, 0);
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this)
{
  return CoreML::Specification::SerializedModel::New(this, 0);
}

CoreML::Specification::Model *CoreML::Specification::Model::New(CoreML::Specification::Model *this)
{
  return CoreML::Specification::Model::New(this, 0);
}

_QWORD *_tc_google::protobuf::Map<std::string,std::string>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<std::string,std::string>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x219A19A08](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,std::string>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    _tc_google::protobuf::Map<std::string,std::string>::erase(a1, &v5, (uint64_t)&v7);
    result = *(double *)&v7;
    v3 = v7;
    v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,std::string>::erase@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  if (!*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6)
    {
      v7 = std::pair<std::string,std::string>::~pair(v6);
      MEMORY[0x219A19A08](v7, 0x1012C403467C318);
    }
  }
  v9 = *(_OWORD *)a2;
  v10 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(_QWORD **)(a1 + 16), (uint64_t)&v9);
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  return result;
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = result;
    v3 = (uint64_t *)(*(_QWORD *)(result + 16) + 8);
    do
    {
      v4 = *v3;
      v5 = (_QWORD *)(*v3 + 16);
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      *(_QWORD *)((char *)v5 + 5) = 0;
      *v5 = 0;
      result = CoreML::Specification::Model::clear_Type(v4);
      ++v3;
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D940248;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 32) = this;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D940248;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *(_QWORD *)(result + 24);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergePartialFromCodedStream(uint64_t a1, char **this, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  char *v7;
  unint64_t TagFallback;
  std::string *v9;
  int v10;
  char *v11;
  std::string *v12;
  _BOOL8 result;

  v5 = (std::string **)(a1 + 16);
  v6 = (std::string **)(a1 + 24);
  while (1)
  {
    while (1)
    {
      v7 = *this;
      if (*this >= this[1])
      {
        TagFallback = 0;
      }
      else
      {
        TagFallback = *v7;
        if ((*v7 & 0x80000000) == 0)
        {
          *this = v7 + 1;
          goto LABEL_7;
        }
      }
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)this, TagFallback);
LABEL_7:
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 40) |= 1u;
      v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v9 = *(std::string **)(a1 + 16);
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(this, v9);
      if (!result)
        return result;
      v10 = *(_DWORD *)(a1 + 40) | 1;
      *(_DWORD *)(a1 + 40) = v10;
      v11 = *this;
      if (*this < this[1] && *v11 == 18)
      {
        *this = v11 + 1;
LABEL_20:
        *(_DWORD *)(a1 + 40) = v10 | 2;
        v12 = *(std::string **)(a1 + 24);
        if (v12 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v6, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v12 = *(std::string **)(a1 + 24);
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(this, v12);
        if (!result)
          return result;
        *(_DWORD *)(a1 + 40) |= 2u;
        if (*this == this[1] && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if ((_DWORD)TagFallback == 18)
    {
      v10 = *(_DWORD *)(a1 + 40);
      goto LABEL_20;
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteString(1, v4, a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteString(2, v5, a2);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

char *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v5;
  char *v6;
  const void **v7;

  v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v6 = _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  v7 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v6 = 18;
  return _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v7, v6 + 1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::value(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (!*(_QWORD *)(a1 + 8))
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/map_entry_lite.h", 162);
    v2 = _tc_google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: default_instance_ != NULL: ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, (_tc_google::protobuf::internal::LogMessage *)v2);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 24);
}

void sub_21841F1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D940320;
  if (*(_QWORD *)(a1 + 8) != a1 && !*(_QWORD *)(a1 + 32))
  {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 24));
  }
  return a1;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  std::string **v7;
  const std::string *v8;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      v7 = (std::string **)(a1 + 24);
      if (*(uint64_t **)(a1 + 24) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 24), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v8 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 24), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v8);
      else
        std::string::operator=(*v7, v8);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>(uint64_t result, CoreML::Specification::Model **a2, CoreML::Specification::Model **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::Model **v11;
  CoreML::Specification::Model **v12;
  CoreML::Specification::Model *v13;
  CoreML::Specification::Model *v14;
  CoreML::Specification::Model *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::Model **v18;
  CoreML::Specification::Model **v19;
  CoreML::Specification::Model *v20;
  CoreML::Specification::Model *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::Model::Model(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>);
      }
      else
      {
        Aligned = (CoreML::Specification::Model *)operator new();
        CoreML::Specification::Model::Model(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_21841F454(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(CoreML::Specification::Model *a1, CoreML::Specification::Model *this)
{
  return CoreML::Specification::Model::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_tc_google::protobuf::Map<std::string,std::string>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,std::string>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_21841F544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,std::string>::operator[](uint64_t a1, uint64_t a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::operator[](*(uint64_t **)(a1 + 16), a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,std::string>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_21841F638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,std::string>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v6;
  _tc_google::protobuf::Arena *v7;
  std::string *v8;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 48);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    Aligned[1].__r_.__value_.__l.__size_ = 0;
    Aligned[1].__r_.__value_.__r.__words[2] = 0;
    Aligned[1].__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::OwnDestructor<std::string>(v7, &Aligned[1]);
    std::string::operator=(Aligned, (const std::string *)a2);
  }
  else
  {
    v8 = (std::string *)operator new();
    Aligned = v8;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    Aligned[1].__r_.__value_.__r.__words[0] = 0;
    Aligned[1].__r_.__value_.__l.__size_ = 0;
    Aligned[1].__r_.__value_.__r.__words[2] = 0;
  }
  return Aligned;
}

void sub_21841F720(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,std::string>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<std::string,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,std::string>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<std::string,std::string>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_21841FC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_21841FCEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  __n128 v13;

  v4 = *(_BYTE **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v4 != 10)
  {
    v8 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v8);
    *v8 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)this = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, (std::string *)(a1 + 16)))
    return 0;
  if ((int)(*((_DWORD *)this + 2) - *(_QWORD *)this) < 1
    || **(_BYTE **)this != 18
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = **(_QWORD **)(v5 + 16),
        *(_QWORD *)(a1 + 40) = _tc_google::protobuf::Map<std::string,std::string>::operator[](v5, a1 + 16),
        v6 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_13:
    v9 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    v10 = *(_QWORD *)(a1 + 48);
    if (v10 != v9)
    {
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      *(_QWORD *)(a1 + 48) = v9;
    }
    v11 = *(std::string **)(v9 + 16);
    *(_DWORD *)(v9 + 40) |= 1u;
    if (v11 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v9 + 16), *(_tc_google::protobuf::Arena **)(v9 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v11 = *(std::string **)(v9 + 16);
    }
    std::string::operator=(v11, (const std::string *)(a1 + 16));
    v12 = (*(uint64_t (**)(_QWORD, _tc_google::protobuf::io::CodedInputStream *))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), this);
    if ((_DWORD)v12)
      v13 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v13))
      *(_QWORD *)(a1 + 48) = 0;
    return v12;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip(this, 1u);
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, *(std::string **)(a1 + 40)))
  {
    _tc_google::protobuf::Map<std::string,std::string>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
    return 0;
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 1)
    || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
  {
    return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
  }
  *((_DWORD *)this + 8) = 0;
  v12 = 1;
  *((_BYTE *)this + 36) = 1;
  return v12;
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::erase(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(_QWORD *)(a1 + 16), a2, 0, &v6);
  if (!(_QWORD)v6)
    return 0;
  v4 = v6;
  v5 = v7;
  _tc_google::protobuf::Map<std::string,std::string>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __n128 v13;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(__int128 **)(a1 + 40);
  v7 = *(_QWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 40) |= 2u;
  if ((uint64_t *)v7 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v4 + 24), *(_tc_google::protobuf::Arena **)(v4 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v7 = *(_QWORD *)(v4 + 24);
  }
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v8 = *v6;
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)v6 + 23) = 0;
  *(_BYTE *)v6 = 0;
  _tc_google::protobuf::Map<std::string,std::string>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v9 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v9 + 40) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  if ((uint64_t *)v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v9 + 16), *(_tc_google::protobuf::Arena **)(v9 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v10 = *(_QWORD *)(v9 + 16);
  }
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  v11 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v12)
    v13 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v13))
    *(_QWORD *)(a1 + 48) = 0;
  return v12;
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D940248;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

__n128 _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  std::string *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = _tc_google::protobuf::Map<std::string,std::string>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  v5 = *(_QWORD *)(v4 + 24);
  if ((uint64_t *)v5 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v4 + 24), *(_tc_google::protobuf::Arena **)(v4 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v5 = *(_QWORD *)(v4 + 24);
    v3 = *(std::string **)(a1 + 40);
  }
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3->__r_.__value_.__l.__data_);
  result = *(__n128 *)v5;
  v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
  *(__n128 *)&v3->__r_.__value_.__l.__data_ = result;
  *(_BYTE *)(v5 + 23) = 0;
  *(_BYTE *)v5 = 0;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  const void ***v8;
  const void ***v9;
  const void ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void ***v18;
  char v19;
  BOOL v20;
  const void **v21;

  v8 = (const void ***)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10 - 1, v10))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
            v10 = (const void ***)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  const void ***v8;
  const void **v9;
  const void ***v10;
  const void ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void ***v15;
  const void ***v16;
  const void **v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = this;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &unk_24D9403F0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(_tc_google::protobuf::Arena **a1, CoreML::Specification::FeatureDescription **a2, const CoreML::Specification::FeatureDescription **a3, signed int a4, signed int a5)
{
  uint64_t v10;
  const CoreML::Specification::FeatureDescription **v11;
  CoreML::Specification::FeatureDescription **v12;
  const CoreML::Specification::FeatureDescription *v13;
  const CoreML::Specification::FeatureDescription *v14;
  CoreML::Specification::FeatureDescription *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  const CoreML::Specification::FeatureDescription **v18;
  CoreML::Specification::FeatureDescription **v19;
  const CoreML::Specification::FeatureDescription *v20;
  CoreML::Specification::FeatureDescription *Aligned;

  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *a1;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>);
      }
      else
      {
        Aligned = (CoreML::Specification::FeatureDescription *)operator new();
        CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
      }
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
}

void sub_2184208D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_Model_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_218420AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_10_5()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_testing_utils_cpp_1()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_mlc_od_sn_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::optimization::lbfgs_compat(_QWORD *a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  int *v52;
  file_logger *v53;
  file_logger *started;
  _QWORD *v55;
  _BYTE *v56;
  const std::locale::facet *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  int *v61;
  file_logger *v62;
  file_logger *v63;
  _QWORD *v64;
  _QWORD *v65;
  const std::locale::facet *v66;
  int *v67;
  file_logger *v68;
  file_logger *v69;
  _QWORD *v70;
  _QWORD *v71;
  const std::locale::facet *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t j;
  unint64_t v76;
  int iteration;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BOOL4 v81;
  BOOL v82;
  std::string::size_type size;
  std::string::size_type v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::runtime_error *exception;
  std::string *v96;
  __int128 v97;
  std::runtime_error *v98;
  std::string *v99;
  __int128 v100;
  _QWORD *v101;
  _QWORD *v103;
  uint64_t v104;
  _BOOL4 v105;
  std::string *v106;
  std::string *v107;
  std::string *v108;
  void **v109;
  std::string *v110;
  std::string *v111;
  std::string *v112;
  size_t v113[3];
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::string v116;
  void *v117[2];
  void *v118;
  void *v119;
  __int128 v120;
  __int128 __val;
  double v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134[2];
  char v135;
  timeval v136;
  int64_t v137;
  unint64_t v138;
  timeval v139;
  std::string __idx;
  std::string v141;
  std::string v142;
  __int128 v143;
  __int128 v144;
  double v145;
  int v146;
  std::string v147;
  std::string v148;
  void *__p[2];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  unint64_t v153[2];
  std::string v154;
  uint64_t v155;
  pthread_mutex_t v156[5];
  char v157;
  BOOL v158;
  uint64_t v159[3];
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  __int128 v163;
  char v164;
  _QWORD v165[3];
  __int128 v166;

  *(_QWORD *)&v166 = *MEMORY[0x24BDAC8D0];
  gettimeofday(&v136, 0);
  gettimeofday(&v136, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "max_iterations");
  v9 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, (const void **)__p);
  if (SBYTE7(v150) < 0)
    operator delete(__p[0]);
  if (a3 + 8 == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v134, "max_iterations");
    v10 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::optimization::default_solver_options, (const void **)v134);
  }
  else
  {
    v10 = (_BYTE *)(v9 + 56);
  }
  v104 = 0;
  switch(v10[12])
  {
    case 0:
      v11 = *(_QWORD *)v10;
      goto LABEL_27;
    case 1:
      v11 = (uint64_t)*(double *)v10;
      goto LABEL_27;
    case 2:
      v16 = *(_QWORD *)v10;
      v17 = (char **)(*(_QWORD *)v10 + 8);
      __idx.__r_.__value_.__r.__words[0] = 0;
      v18 = (char *)v17;
      if (*(char *)(v16 + 31) < 0)
        v18 = *v17;
      std::string::basic_string[abi:ne180100]<0>(__p, v18);
      v104 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
      if (SBYTE7(v150) < 0)
        operator delete(__p[0]);
      if (*(char *)(v16 + 31) < 0)
        v19 = *(_QWORD *)(v16 + 16);
      else
        v19 = *(unsigned __int8 *)(v16 + 31);
      if (__idx.__r_.__value_.__r.__words[0] != v19)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v96 = std::string::append(&v116, " cannot be interpreted as an integer");
        v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        *(_QWORD *)&v150 = *((_QWORD *)&v96->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_35;
    case 3:
      v12 = *(_QWORD *)v10;
      *(_QWORD *)&v150 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v12 + 8), *(_QWORD *)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_34;
    case 4:
      v20 = *(_QWORD *)v10;
      *(_QWORD *)&v150 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v116.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
      goto LABEL_34;
    case 5:
      v21 = *(_QWORD *)v10;
      *(_QWORD *)&v150 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(_QWORD *)(v21 + 16) - *(_QWORD *)(v21 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v116.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
      goto LABEL_34;
    case 6:
      v11 = (uint64_t)(*(_QWORD *)v10 << 8) >> 8;
LABEL_27:
      v104 = v11;
      goto LABEL_35;
    case 7:
      goto LABEL_35;
    case 8:
      v22 = *(_QWORD *)v10;
      v23 = *(unsigned int **)(*(_QWORD *)v10 + 16);
      __p[0] = *(void **)(*(_QWORD *)v10 + 8);
      __p[1] = v23;
      if (v23)
      {
        v24 = v23 + 2;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *(_OWORD *)(v22 + 24);
      v27 = *(_OWORD *)(v22 + 56);
      v151 = *(_OWORD *)(v22 + 40);
      v152 = v27;
      v150 = v26;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_34;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v10 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v151 + 1))
      {
        *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
        operator delete(*((void **)&v151 + 1));
      }
      if ((_QWORD)v150)
      {
        *((_QWORD *)&v150 + 1) = v150;
        operator delete((void *)v150);
      }
      v13 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v14 = (unint64_t *)((char *)__p[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
LABEL_34:
      v104 = 0;
LABEL_35:
      if (a3 + 8 == v9 && v135 < 0)
        operator delete(v134[0]);
      v28 = (std::__shared_weak_count *)a1[1];
      v114 = *a1;
      v115 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      turi::optimization::lbfgs_solver::lbfgs_solver((uint64_t)&v116, &v114);
      v31 = v115;
      if (v115)
      {
        v32 = (unint64_t *)&v115->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      turi::optimization::lbfgs_solver::setup((uint64_t)&v116, a2, a3, a4);
      std::string::basic_string[abi:ne180100]<0>(&v163, "simple_mode");
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a3, (const void **)&v163))
      {
        std::string::basic_string[abi:ne180100]<0>(&v147, "simple_mode");
        v34 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(a3, (const void **)&v147.__r_.__value_.__l.__data_);
        v35 = 0;
        switch(v34[12])
        {
          case 0:
            v35 = *(_QWORD *)v34;
            goto LABEL_76;
          case 1:
            v35 = (uint64_t)*(double *)v34;
            goto LABEL_76;
          case 2:
            v40 = *(_QWORD *)v34;
            v41 = (char **)(*(_QWORD *)v34 + 8);
            v113[0] = 0;
            v42 = (char *)v41;
            if (*(char *)(v40 + 31) < 0)
              v42 = *v41;
            std::string::basic_string[abi:ne180100]<0>(__p, v42);
            v35 = std::stoll((const std::string *)__p, v113, 10);
            if (SBYTE7(v150) < 0)
              operator delete(__p[0]);
            if (*(char *)(v40 + 31) < 0)
              v43 = *(_QWORD *)(v40 + 16);
            else
              v43 = *(unsigned __int8 *)(v40 + 31);
            if (v113[0] != v43)
            {
              v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v99 = std::string::append(&__idx, " cannot be interpreted as an integer");
              v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
              *(_QWORD *)&v150 = *((_QWORD *)&v99->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v100;
              v99->__r_.__value_.__l.__size_ = 0;
              v99->__r_.__value_.__r.__words[2] = 0;
              v99->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v98, (const std::string *)__p);
              __cxa_throw(v98, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_76;
          case 3:
            v36 = *(_QWORD *)v34;
            *(_QWORD *)&v150 = 0;
            __p[1] = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v36 + 8), *(_QWORD *)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_75;
          case 4:
            v44 = *(_QWORD *)v34;
            *(_QWORD *)&v150 = 0;
            __p[1] = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 4);
            turi::flexible_type_fail(0);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
            goto LABEL_75;
          case 5:
            v45 = *(_QWORD *)v34;
            *(_QWORD *)&v150 = 0;
            __p[1] = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v45 + 8), *(uint64_t **)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - *(_QWORD *)(v45 + 8)) >> 5);
            turi::flexible_type_fail(0);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
            goto LABEL_75;
          case 6:
            v35 = (uint64_t)(*(_QWORD *)v34 << 8) >> 8;
            goto LABEL_76;
          case 7:
            goto LABEL_76;
          case 8:
            v46 = *(_QWORD *)v34;
            v47 = *(unsigned int **)(*(_QWORD *)v34 + 16);
            __p[0] = *(void **)(*(_QWORD *)v34 + 8);
            __p[1] = v47;
            if (v47)
            {
              v48 = v47 + 2;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            v50 = *(_OWORD *)(v46 + 24);
            v51 = *(_OWORD *)(v46 + 56);
            v151 = *(_OWORD *)(v46 + 40);
            v152 = v51;
            v150 = v50;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            goto LABEL_75;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v34 + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v151 + 1))
            {
              *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
              operator delete(*((void **)&v151 + 1));
            }
            if ((_QWORD)v150)
            {
              *((_QWORD *)&v150 + 1) = v150;
              operator delete((void *)v150);
            }
            v37 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v38 = (unint64_t *)((char *)__p[1] + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
LABEL_75:
            v35 = 0;
LABEL_76:
            v105 = v35 != 0;
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v147.__r_.__value_.__l.__data_);
            goto LABEL_78;
          default:
            turi::flexible_type_fail(0);
            goto LABEL_172;
        }
      }
      v105 = 0;
LABEL_78:
      if (v164 < 0)
        operator delete((void *)v163);
      if (v105)
      {
        v52 = (int *)global_logger();
        if (v52[169] > 4)
        {
LABEL_89:
          v58 = *a1;
          std::string::basic_string[abi:ne180100]<0>(&v163, "Iteration");
          std::string::basic_string[abi:ne180100]<0>(v165, "Elapsed Time");
          v110 = 0;
          v111 = 0;
          v112 = 0;
          __p[0] = &v110;
          LOBYTE(__p[1]) = 0;
          v110 = (std::string *)operator new(0x30uLL);
          v111 = v110;
          v112 = v110 + 2;
          v111 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v112, &v163, &v166, v110);
          (*(void (**)(size_t *__return_ptr, uint64_t, std::string **))(*(_QWORD *)v58 + 64))(v113, v58, &v110);
          v59 = v104;
          __p[0] = &v110;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          for (i = 0; i != -6; i -= 3)
          {
            if (SHIBYTE(v165[i + 2]) < 0)
              operator delete((void *)v165[i]);
          }
          goto LABEL_118;
        }
        if (!cppipc::must_cancel((cppipc *)v52))
        {
          v53 = (file_logger *)global_logger();
          started = file_logger::start_stream(v53, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/lbfgs.cpp", "lbfgs_compat", 40, 1);
          v55 = pthread_getspecific(*((_QWORD *)started + 74));
          if (v55 && *((_BYTE *)v55 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55 + 2, (uint64_t)"Calibrating solver; this may take some time.",
              44);
          v56 = pthread_getspecific(*((_QWORD *)started + 74));
          if (!v56)
            goto LABEL_89;
          if (!v56[280])
            goto LABEL_89;
          std::ios_base::getloc((const std::ios_base *)&v56[*(_QWORD *)(*((_QWORD *)v56 + 2) - 24) + 16]);
          v57 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) != 7)
            goto LABEL_89;
LABEL_169:
          __print_back_trace();
          v101 = __cxa_allocate_exception(8uLL);
          *v101 = "LOG_FATAL encountered";
          __cxa_throw(v101, MEMORY[0x24BEDB718], 0);
        }
LABEL_168:
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      v61 = (int *)global_logger();
      if (v61[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v61))
          goto LABEL_168;
        v62 = (file_logger *)global_logger();
        v63 = file_logger::start_stream(v62, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/lbfgs.cpp", "lbfgs_compat", 33, 1);
        v64 = pthread_getspecific(*((_QWORD *)v63 + 74));
        if (v64 && *((_BYTE *)v64 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64 + 2, (uint64_t)"Starting L-BFGS ", 16);
        v65 = pthread_getspecific(*((_QWORD *)v63 + 74));
        if (v65)
        {
          if (*((_BYTE *)v65 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(_QWORD *)(v65[2] - 24) + 16));
            v66 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v63);
            if (*((_DWORD *)v63 + 150) == 7)
              goto LABEL_169;
          }
        }
      }
      v67 = (int *)global_logger();
      if (v67[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v67))
          goto LABEL_168;
        v68 = (file_logger *)global_logger();
        v69 = file_logger::start_stream(v68, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/lbfgs.cpp", "lbfgs_compat", 34, 1);
        v70 = pthread_getspecific(*((_QWORD *)v69 + 74));
        if (v70 && *((_BYTE *)v70 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70 + 2, (uint64_t)"--------------------------------------------------------", 56);
        v71 = pthread_getspecific(*((_QWORD *)v69 + 74));
        if (v71)
        {
          if (*((_BYTE *)v71 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(_QWORD *)(v71[2] - 24) + 16));
            v72 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v69);
            if (*((_DWORD *)v69 + 150) == 7)
              goto LABEL_169;
          }
        }
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::string::basic_string[abi:ne180100]<0>(&__idx, "");
      std::string::operator=(&v154, &__idx);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&v150 + 8);
      if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__idx.__r_.__value_.__l.__data_);
      __p[0] = *(void **)MEMORY[0x24BEDB7F0];
      v73 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      *(_QWORD *)&v150 = v73;
      *((_QWORD *)&v150 + 1) = MEMORY[0x24BEDB848] + 16;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v155);
      v74 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "Iteration");
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v150 + 1, "Passes");
      std::string::basic_string[abi:ne180100]<0>(&v152, "Step size");
      std::string::basic_string[abi:ne180100]<0>(v153, "Elapsed Time");
      memset(&__idx, 0, sizeof(__idx));
      *(_QWORD *)&v163 = &__idx;
      BYTE8(v163) = 0;
      __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
      __idx.__r_.__value_.__l.__size_ = __idx.__r_.__value_.__r.__words[0];
      __idx.__r_.__value_.__r.__words[2] = __idx.__r_.__value_.__r.__words[0] + 96;
      __idx.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__idx.__r_.__value_.__r.__words[2], (__int128 *)__p, (__int128 *)&v154.__r_.__value_.__r.__words[1], (std::string *)__idx.__r_.__value_.__l.__data_);
      (*(void (**)(size_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v74 + 64))(v113, v74, &__idx);
      v59 = v104;
      *(_QWORD *)&v163 = &__idx;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
      for (j = 0; j != -12; j -= 3)
      {
        if (SHIBYTE(v154.__r_.__value_.__r.__words[j]) < 0)
          operator delete((void *)v153[j]);
      }
LABEL_118:
      turi::table_printer::table_printer(__p, v113, 1);
      turi::table_printer::print_header((turi::table_printer *)__p);
      v109 = __p;
      if (v59)
      {
        v76 = 0;
        v103 = a1;
        while (1)
        {
          iteration = turi::optimization::lbfgs_solver::next_iteration((turi::optimization::lbfgs_solver *)&v116);
          if (v105)
          {
            std::to_string(&v147, v76);
            gettimeofday((timeval *)&__idx, 0);
            std::to_string(&v148, (double)(LODWORD(__idx.__r_.__value_.__r.__words[1]) - v136.tv_usec) / 1000000.0+ (double)(uint64_t)(__idx.__r_.__value_.__r.__words[0] - v136.tv_sec));
            v106 = 0;
            v107 = 0;
            v108 = 0;
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
            __idx.__r_.__value_.__s.__data_[8] = 0;
            v106 = (std::string *)operator new(0x30uLL);
            v107 = v106;
            v108 = v106 + 2;
            v78 = 0;
            v107 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v108, (__int128 *)&v147, (__int128 *)__p, v106);
            do
            {
              if (SHIBYTE(v148.__r_.__value_.__r.__words[v78 + 2]) < 0)
                operator delete(*(void **)((char *)&v147 + v78 * 8 + 24));
              v78 -= 3;
            }
            while (v78 != -6);
          }
          else
          {
            std::to_string(&__idx, v76);
            std::to_string(&v141, __val);
            std::to_string(&v142, v122);
            gettimeofday(&v139, 0);
            std::to_string((std::string *)&v143, (double)(v139.tv_usec - v136.tv_usec) / 1000000.0 + (double)(v139.tv_sec - v136.tv_sec));
            v106 = 0;
            v107 = 0;
            v108 = 0;
            v139.tv_sec = (__darwin_time_t)&v106;
            LOBYTE(v139.tv_usec) = 0;
            v106 = (std::string *)operator new(0x60uLL);
            v107 = v106;
            v108 = v106 + 4;
            v79 = 0;
            v107 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v108, (__int128 *)&__idx, (__int128 *)((char *)&v144 + 8), v106);
            do
            {
              if (*((char *)&v144 + v79 + 7) < 0)
                operator delete(*(void **)((char *)&v143 + v79));
              v79 -= 24;
            }
            while (v79 != -96);
          }
          (*(void (**)(std::string *__return_ptr, _QWORD, void **, std::string **))(*(_QWORD *)*a1 + 72))(&__idx, *a1, v117, &v106);
          v138 = 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(__idx.__r_.__value_.__l.__size_ - __idx.__r_.__value_.__r.__words[0]) >> 3);
          v137 = ((char *)__p[1] - (char *)__p[0]) >> 5;
          if (v138 != v137)
          {
            v139.tv_sec = (__darwin_time_t)&v138;
            *(_QWORD *)&v139.tv_usec = &v137;
            turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()();
          }
          ++v76;
          do
            v80 = __ldaxr(v153);
          while (__stlxr(v80 + 1, v153));
          v81 = turi::table_printer::register_tick((turi::table_printer *)__p, v76, v80 + 1);
          v82 = v81;
          if (v81)
          {
            pthread_mutex_lock((pthread_mutex_t *)&v154.__r_.__value_.__r.__words[1]);
            turi::table_printer::print_row<std::string>(__p, (uint64_t *)&__idx);
            pthread_mutex_unlock((pthread_mutex_t *)&v154.__r_.__value_.__r.__words[1]);
          }
          if (v162 && !(v80 % v162))
          {
            pthread_mutex_lock(v156);
            size = __idx.__r_.__value_.__l.__size_;
            v84 = __idx.__r_.__value_.__r.__words[0];
            if (!v157)
            {
              std::vector<turi::flexible_type>::resize(v159, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(__idx.__r_.__value_.__l.__size_ - __idx.__r_.__value_.__r.__words[0]) >> 3));
              size = __idx.__r_.__value_.__l.__size_;
              v84 = __idx.__r_.__value_.__r.__words[0];
              v85 = 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(__idx.__r_.__value_.__l.__size_ - __idx.__r_.__value_.__r.__words[0]) >> 3);
              if (v85 <= v161 - v160)
              {
                if (v85 < v161 - v160)
                  v161 = v160
                       - 0x5555555555555555
                       * ((uint64_t)(__idx.__r_.__value_.__l.__size_ - __idx.__r_.__value_.__r.__words[0]) >> 3);
              }
              else
              {
                std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)&v160, v85 - (v161 - v160));
                size = __idx.__r_.__value_.__l.__size_;
                v84 = __idx.__r_.__value_.__r.__words[0];
              }
            }
            if (size != v84)
            {
              v86 = 0;
              v87 = 0;
              v88 = 0;
              do
              {
                turi::flexible_type::operator=<std::string>((uint64_t *)(v159[0] + v86), (const std::string *)(v84 + v87));
                *(_BYTE *)(v160 + v88++) = 0;
                v84 = __idx.__r_.__value_.__r.__words[0];
                v87 += 24;
                v86 += 16;
              }
              while (v88 < 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(__idx.__r_.__value_.__l.__size_ - __idx.__r_.__value_.__r.__words[0]) >> 3));
            }
            turi::table_printer::track_progress_row((uint64_t)__p, v159);
            a1 = v103;
            v59 = v104;
            v158 = v82;
            pthread_mutex_unlock(v156);
          }
          if (iteration)
            break;
          v139.tv_sec = (__darwin_time_t)&__idx;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
          __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
          if (v76 == v59)
            goto LABEL_148;
        }
        turi::table_printer::print_footer((turi::table_printer *)__p);
        turi::optimization::lbfgs_compat(std::shared_ptr<turi::optimization::first_order_opt_interface>,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&,std::shared_ptr<turi::optimization::smooth_regularizer_interface> const&)::$_0::operator()((turi::table_printer **)&v109, (uint64_t)&v116.__r_.__value_.__l.__size_, a5);
        v139.tv_sec = (__darwin_time_t)&__idx;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
        __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
      }
      else
      {
LABEL_148:
        *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
        Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&__idx.__r_.__value_.__r.__words[2], (uint64_t)v117);
        Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v141.__r_.__value_.__l.__size_, (uint64_t)&v118);
        Eigen::DenseStorage<double,-1,-1,-1,0>::DenseStorage(&v142, (uint64_t)&v119);
        v143 = v120;
        v144 = __val;
        v145 = v122;
        v146 = 3;
        turi::table_printer::print_footer((turi::table_printer *)__p);
        turi::optimization::lbfgs_compat(std::shared_ptr<turi::optimization::first_order_opt_interface>,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&,std::shared_ptr<turi::optimization::smooth_regularizer_interface> const&)::$_0::operator()((turi::table_printer **)&v109, (uint64_t)&__idx, a5);
        free(v142.__r_.__value_.__l.__data_);
        free((void *)v141.__r_.__value_.__l.__size_);
        free((void *)__idx.__r_.__value_.__r.__words[2]);
      }
      turi::table_printer::~table_printer((turi::table_printer *)__p);
      __p[0] = v113;
      std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24D9404B0;
      free(v133);
      free(v132);
      free(v131);
      free(v130);
      free(v129);
      free(v128);
      free(v127);
      free(v126);
      free(v125);
      v89 = v124;
      if (v124)
      {
        v90 = (unint64_t *)&v124->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = v123;
      if (v123)
      {
        v93 = (unint64_t *)&v123->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D940508;
      free(v119);
      free(v118);
      free(v117[0]);
      return;
    default:
      turi::flexible_type_fail(0);
LABEL_172:
      __break(1u);
      return;
  }
}

void sub_218421FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, pthread_mutex_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,pthread_mutex_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  int v38;
  void *v39;
  uint64_t v40;

  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
    operator delete((void *)STACK[0x2B0]);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (SLOBYTE(STACK[0x347]) < 0)
        operator delete((void *)STACK[0x330]);
      if (*(char *)(v40 - 145) < 0)
        operator delete(*(void **)(v40 - 168));
      turi::optimization::lbfgs_solver::~lbfgs_solver(&a38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

uint64_t turi::optimization::lbfgs_solver::setup(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  void *v22;
  double v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  void *v31;
  void *v32;
  unsigned int v33;
  void **v34;
  char *v35;
  const std::string *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unint64_t v66;
  double v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  void *v80;
  void *v81;
  unsigned int v82;
  void **v83;
  char *v84;
  const std::string *v85;
  double v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  __int128 v101;
  __int128 v102;
  unint64_t v103;
  unint64_t v104;
  BOOL v105;
  float v106;
  unint64_t v107;
  unint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  unint64_t v144;
  uint64_t v145;
  __int128 *v146;
  _OWORD *v147;
  uint64_t v148;
  int64_t v149;
  int64_t v150;
  _OWORD *v151;
  __int128 *v152;
  __int128 v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int64_t v163;
  unint64_t v164;
  uint64_t result;
  std::bad_alloc *v166;
  std::bad_alloc *v167;
  std::runtime_error *exception;
  std::string *v169;
  __int128 v170;
  std::runtime_error *v171;
  std::string *v172;
  __int128 v173;
  void *v174[2];
  char v175;
  uint64_t v176;
  unsigned int *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void **v187;
  std::__shared_weak_count *v188;
  void *v189;
  void *v190;
  void *__p;
  void *v192;
  void *v193;
  void *v194;
  uint64_t v195;
  std::string v196;
  std::string v197;
  size_t __idx;

  v8 = a1 + 40;
  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = (_QWORD *)(a1 + 24);
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v12 = *(void **)(a1 + 56);
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(int64x2_t *)(v8 + 40) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 80) = 0;
  free(v12);
  free(v9);
  free(v11);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v8 + 120), a4);
  std::string::basic_string[abi:ne180100]<0>(v174, "lbfgs_memory_level");
  v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, (const void **)v174);
  if (a3 + 8 == v13)
    v14 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::optimization::default_solver_options, (const void **)v174);
  else
    v14 = v13 + 56;
  v15 = *(double *)v14;
  v16 = *(unsigned __int8 *)(v14 + 12);
  if (v16 <= 9 && ((1 << v16) & 0x33C) != 0)
  {
    do
      v17 = __ldaxr(*(unint64_t **)&v15);
    while (__stlxr(v17 + 1, *(unint64_t **)&v15));
  }
  v18 = 0;
  switch(v16)
  {
    case 0u:
      v18 = *(_QWORD *)&v15;
      goto LABEL_48;
    case 1u:
      v18 = (uint64_t)v15;
      goto LABEL_48;
    case 2u:
      v34 = (void **)(*(_QWORD *)&v15 + 8);
      __idx = 0;
      v35 = (char *)(*(_QWORD *)&v15 + 8);
      if (*(char *)(*(_QWORD *)&v15 + 31) < 0)
        v35 = (char *)*v34;
      v36 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v197, v35);
      v37 = std::stoll(v36, &__idx, 10);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      if (*(char *)(*(_QWORD *)&v15 + 31) < 0)
        v38 = *(_QWORD *)(*(_QWORD *)&v15 + 16);
      else
        v38 = *(unsigned __int8 *)(*(_QWORD *)&v15 + 31);
      if (__idx != v38)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v169 = std::string::append(&v196, " cannot be interpreted as an integer");
        v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v170;
        v169->__r_.__value_.__l.__size_ = 0;
        v169->__r_.__value_.__r.__words[2] = 0;
        v169->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v197);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      *(_QWORD *)(a1 + 184) = v37;
      do
      {
        v57 = __ldaxr(*(unint64_t **)&v15);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, *(unint64_t **)&v15));
      if (v58)
        v59 = 1;
      else
        v59 = *(_QWORD *)&v15 == 0;
      if (v59)
        goto LABEL_87;
      if (*(char *)(*(_QWORD *)&v15 + 31) < 0)
        operator delete(*v34);
      v23 = v15;
      v24 = 0x1012C404EF22A49;
      goto LABEL_86;
    case 3u:
      v194 = 0;
      v195 = 0;
      v193 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v193, *(const void **)(*(_QWORD *)&v15 + 8), *(_QWORD *)(*(_QWORD *)&v15 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v15 + 16) - *(_QWORD *)(*(_QWORD *)&v15 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      *(_QWORD *)(a1 + 184) = 0;
      do
      {
        v19 = __ldaxr(*(unint64_t **)&v15);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, *(unint64_t **)&v15));
      if (v20)
        v21 = 1;
      else
        v21 = *(_QWORD *)&v15 == 0;
      if (v21)
        goto LABEL_87;
      v22 = *(void **)(*(_QWORD *)&v15 + 8);
      if (v22)
      {
        *(_QWORD *)(*(_QWORD *)&v15 + 16) = v22;
        operator delete(v22);
      }
      v23 = v15;
      v24 = 0x1080C409938AC02;
      goto LABEL_86;
    case 4u:
      v185 = 0;
      v186 = 0;
      v39 = *(uint64_t **)(*(_QWORD *)&v15 + 8);
      v40 = *(uint64_t **)(*(_QWORD *)&v15 + 16);
      v184 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v184, v39, v40, ((char *)v40 - (char *)v39) >> 4);
      turi::flexible_type_fail(0);
      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      *(_QWORD *)(a1 + 184) = 0;
      do
      {
        v41 = __ldaxr(*(unint64_t **)&v15);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, *(unint64_t **)&v15));
      if (v42)
        v43 = 1;
      else
        v43 = *(_QWORD *)&v15 == 0;
      if (v43)
        goto LABEL_87;
      v187 = (void **)(*(_QWORD *)&v15 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v187);
      goto LABEL_63;
    case 5u:
      v182 = 0;
      v183 = 0;
      v44 = *(uint64_t **)(*(_QWORD *)&v15 + 8);
      v45 = *(uint64_t **)(*(_QWORD *)&v15 + 16);
      v181 = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v181, v44, v45, ((char *)v45 - (char *)v44) >> 5);
      turi::flexible_type_fail(0);
      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      *(_QWORD *)(a1 + 184) = 0;
      do
      {
        v46 = __ldaxr(*(unint64_t **)&v15);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, *(unint64_t **)&v15));
      if (v47)
        v48 = 1;
      else
        v48 = *(_QWORD *)&v15 == 0;
      if (v48)
        goto LABEL_87;
      v187 = (void **)(*(_QWORD *)&v15 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v187);
LABEL_63:
      v23 = v15;
      v24 = 0x1020C405E66F15BLL;
      goto LABEL_86;
    case 6u:
      v18 = (uint64_t)(*(_QWORD *)&v15 << 8) >> 8;
      goto LABEL_48;
    case 7u:
LABEL_48:
      *(_QWORD *)(a1 + 184) = v18;
      goto LABEL_87;
    case 8u:
      v49 = *(unsigned int **)(*(_QWORD *)&v15 + 16);
      v176 = *(_QWORD *)(*(_QWORD *)&v15 + 8);
      v177 = v49;
      if (v49)
      {
        v50 = v49 + 2;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v52 = *(_OWORD *)(*(_QWORD *)&v15 + 24);
      v53 = *(_OWORD *)(*(_QWORD *)&v15 + 40);
      v180 = *(_OWORD *)(*(_QWORD *)&v15 + 56);
      v179 = v53;
      v178 = v52;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v177);
      *(_QWORD *)(a1 + 184) = 0;
      do
      {
        v54 = __ldaxr(*(unint64_t **)&v15);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, *(unint64_t **)&v15));
      if (v55)
        v56 = 1;
      else
        v56 = *(_QWORD *)&v15 == 0;
      if (v56)
        goto LABEL_87;
      boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v15 + 16));
      v23 = v15;
      v33 = -235920773;
      break;
    case 9u:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v187, *(_QWORD *)&v15 + 8);
      turi::flexible_type_fail(0);
      if (__p)
      {
        v192 = __p;
        operator delete(__p);
      }
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v25 = v188;
      if (v188)
      {
        p_shared_owners = (unint64_t *)&v188->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      *(_QWORD *)(a1 + 184) = 0;
      do
      {
        v28 = __ldaxr(*(unint64_t **)&v15);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, *(unint64_t **)&v15));
      if (v29)
        v30 = 1;
      else
        v30 = *(_QWORD *)&v15 == 0;
      if (v30)
        goto LABEL_87;
      v31 = *(void **)(*(_QWORD *)&v15 + 48);
      if (v31)
      {
        *(_QWORD *)(*(_QWORD *)&v15 + 56) = v31;
        operator delete(v31);
      }
      v32 = *(void **)(*(_QWORD *)&v15 + 24);
      if (v32)
      {
        *(_QWORD *)(*(_QWORD *)&v15 + 32) = v32;
        operator delete(v32);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v15 + 8);
      v23 = v15;
      v33 = 2071181815;
      break;
    default:
LABEL_256:
      result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  v24 = v33 | 0x1030C4000000000;
LABEL_86:
  MEMORY[0x219A19A08](*(_QWORD *)&v23, v24);
LABEL_87:
  if (v175 < 0)
    operator delete(v174[0]);
  std::string::basic_string[abi:ne180100]<0>(v174, "convergence_threshold");
  v60 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, (const void **)v174);
  if (a3 + 8 == v60)
    v61 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::optimization::default_solver_options, (const void **)v174);
  else
    v61 = v60 + 56;
  v62 = *(uint64_t *)v61;
  v63 = *(_DWORD *)(v61 + 8);
  v64 = *(unsigned __int8 *)(v61 + 12);
  if (v64 <= 9 && ((1 << v64) & 0x33C) != 0)
  {
    do
      v66 = __ldaxr((unint64_t *)v62);
    while (__stlxr(v66 + 1, (unint64_t *)v62));
  }
  v67 = 0.0;
  switch(v64)
  {
    case 0u:
      v67 = (double)v62;
      goto LABEL_138;
    case 1u:
      v67 = *(double *)&v62;
      goto LABEL_138;
    case 2u:
      v83 = (void **)(v62 + 8);
      __idx = 0;
      v84 = (char *)(v62 + 8);
      if (*(char *)(v62 + 31) < 0)
        v84 = (char *)*v83;
      v85 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v197, v84);
      v86 = std::stod(v85, &__idx);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      if (*(char *)(v62 + 31) < 0)
        v87 = *(_QWORD *)(v62 + 16);
      else
        v87 = *(unsigned __int8 *)(v62 + 31);
      if (__idx != v87)
      {
        v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v172 = std::string::append(&v196, " cannot be interpreted as a float");
        v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v173;
        v172->__r_.__value_.__l.__size_ = 0;
        v172->__r_.__value_.__r.__words[2] = 0;
        v172->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v171, &v197);
        __cxa_throw(v171, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v106 = v86;
      *(double *)(a1 + 368) = v106;
      do
      {
        v107 = __ldaxr((unint64_t *)v62);
        v108 = v107 - 1;
      }
      while (__stlxr(v108, (unint64_t *)v62));
      if (v108)
        v109 = 1;
      else
        v109 = v62 == 0;
      if (v109)
        goto LABEL_177;
      if (*(char *)(v62 + 31) < 0)
        operator delete(*v83);
      v72 = v62;
      v73 = 0x1012C404EF22A49;
      goto LABEL_176;
    case 3u:
      v194 = 0;
      v195 = 0;
      v193 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v193, *(const void **)(v62 + 8), *(_QWORD *)(v62 + 16), (uint64_t)(*(_QWORD *)(v62 + 16) - *(_QWORD *)(v62 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      *(_QWORD *)(a1 + 368) = 0;
      do
      {
        v68 = __ldaxr((unint64_t *)v62);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, (unint64_t *)v62));
      if (v69)
        v70 = 1;
      else
        v70 = v62 == 0;
      if (v70)
        goto LABEL_177;
      v71 = *(void **)(v62 + 8);
      if (v71)
      {
        *(_QWORD *)(v62 + 16) = v71;
        operator delete(v71);
      }
      v72 = v62;
      v73 = 0x1080C409938AC02;
      goto LABEL_176;
    case 4u:
      v185 = 0;
      v186 = 0;
      v88 = *(uint64_t **)(v62 + 8);
      v89 = *(uint64_t **)(v62 + 16);
      v184 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v184, v88, v89, ((char *)v89 - (char *)v88) >> 4);
      turi::flexible_type_fail(0);
      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      *(_QWORD *)(a1 + 368) = 0;
      do
      {
        v90 = __ldaxr((unint64_t *)v62);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, (unint64_t *)v62));
      if (v91)
        v92 = 1;
      else
        v92 = v62 == 0;
      if (v92)
        goto LABEL_177;
      v187 = (void **)(v62 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v187);
      goto LABEL_153;
    case 5u:
      v182 = 0;
      v183 = 0;
      v93 = *(uint64_t **)(v62 + 8);
      v94 = *(uint64_t **)(v62 + 16);
      v181 = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v181, v93, v94, ((char *)v94 - (char *)v93) >> 5);
      turi::flexible_type_fail(0);
      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      *(_QWORD *)(a1 + 368) = 0;
      do
      {
        v95 = __ldaxr((unint64_t *)v62);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, (unint64_t *)v62));
      if (v96)
        v97 = 1;
      else
        v97 = v62 == 0;
      if (v97)
        goto LABEL_177;
      v187 = (void **)(v62 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v187);
LABEL_153:
      v72 = v62;
      v73 = 0x1020C405E66F15BLL;
      goto LABEL_176;
    case 6u:
      v67 = (double)v63 / 1000000.0 + (double)(v62 << 8 >> 8);
      goto LABEL_138;
    case 7u:
LABEL_138:
      *(double *)(a1 + 368) = v67;
      goto LABEL_177;
    case 8u:
      v98 = *(unsigned int **)(v62 + 16);
      v176 = *(_QWORD *)(v62 + 8);
      v177 = v98;
      if (v98)
      {
        v99 = v98 + 2;
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      v101 = *(_OWORD *)(v62 + 24);
      v102 = *(_OWORD *)(v62 + 40);
      v180 = *(_OWORD *)(v62 + 56);
      v179 = v102;
      v178 = v101;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v177);
      *(_QWORD *)(a1 + 368) = 0;
      do
      {
        v103 = __ldaxr((unint64_t *)v62);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, (unint64_t *)v62));
      if (v104)
        v105 = 1;
      else
        v105 = v62 == 0;
      if (v105)
        goto LABEL_177;
      boost::detail::shared_count::~shared_count((unsigned int **)(v62 + 16));
      v72 = v62;
      v82 = -235920773;
      break;
    case 9u:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v187, v62 + 8);
      turi::flexible_type_fail(0);
      if (__p)
      {
        v192 = __p;
        operator delete(__p);
      }
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v74 = v188;
      if (v188)
      {
        v75 = (unint64_t *)&v188->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      *(_QWORD *)(a1 + 368) = 0;
      do
      {
        v77 = __ldaxr((unint64_t *)v62);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, (unint64_t *)v62));
      if (v78)
        v79 = 1;
      else
        v79 = v62 == 0;
      if (v79)
        goto LABEL_177;
      v80 = *(void **)(v62 + 48);
      if (v80)
      {
        *(_QWORD *)(v62 + 56) = v80;
        operator delete(v80);
      }
      v81 = *(void **)(v62 + 24);
      if (v81)
      {
        *(_QWORD *)(v62 + 32) = v81;
        operator delete(v81);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v62 + 8);
      v72 = v62;
      v82 = 2071181815;
      break;
    default:
      goto LABEL_256;
  }
  v73 = v82 | 0x1030C4000000000;
LABEL_176:
  MEMORY[0x219A19A08](v72, v73);
LABEL_177:
  if (v175 < 0)
    operator delete(v174[0]);
  *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
  v110 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144));
  *(_QWORD *)(a1 + 176) = v110;
  v111 = *(_QWORD *)(a1 + 184);
  if (v110)
    v112 = v111 == 0;
  else
    v112 = 1;
  if (!v112 && 0x7FFFFFFFFFFFFFFFLL / v111 < v110)
    goto LABEL_255;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize((_QWORD *)(a1 + 208), v111 * v110, v110, v111);
  v115 = *(_QWORD *)(a1 + 216);
  v114 = *(_QWORD *)(a1 + 224);
  v116 = *(_QWORD *)(a1 + 208);
  v117 = v114 * v115;
  if (v114 * v115 >= 0)
    v118 = v114 * v115;
  else
    v118 = v117 + 1;
  v119 = v118 & 0xFFFFFFFFFFFFFFFELL;
  if (v117 >= 2)
  {
    v120 = 2;
    if (v119 > 2)
      v120 = v118 & 0xFFFFFFFFFFFFFFFELL;
    bzero(*(void **)(a1 + 208), ((8 * v120 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v119 < v117)
    bzero((void *)(v116 + 16 * (v118 >> 1)), 8 * v117 - 16 * (v118 >> 1));
  v121 = *(_QWORD *)(a1 + 176);
  v122 = *(_QWORD *)(a1 + 184);
  if (v121)
  {
    if (v122 && 0x7FFFFFFFFFFFFFFFLL / v122 < v121)
    {
LABEL_255:
      v166 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v167 = std::bad_alloc::bad_alloc(v166);
      __cxa_throw(v167, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize((_QWORD *)(a1 + 232), v122 * v121, v121, v122);
  v124 = *(_QWORD *)(a1 + 240);
  v123 = *(_QWORD *)(a1 + 248);
  v125 = *(_QWORD *)(a1 + 232);
  v126 = v123 * v124;
  if (v123 * v124 >= 0)
    v127 = v123 * v124;
  else
    v127 = v126 + 1;
  v128 = v127 & 0xFFFFFFFFFFFFFFFELL;
  if (v126 >= 2)
  {
    v129 = 2;
    if (v128 > 2)
      v129 = v127 & 0xFFFFFFFFFFFFFFFELL;
    bzero(*(void **)(a1 + 232), ((8 * v129 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v128 < v126)
    bzero((void *)(v125 + 16 * (v127 >> 1)), 8 * v126 - 16 * (v127 >> 1));
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 176));
  v130 = *(_QWORD *)(a1 + 256);
  v131 = *(_QWORD *)(a1 + 264);
  if (v131 >= 0)
    v132 = *(_QWORD *)(a1 + 264);
  else
    v132 = v131 + 1;
  v133 = v132 & 0xFFFFFFFFFFFFFFFELL;
  if (v131 >= 2)
  {
    v134 = 2;
    if (v133 > 2)
      v134 = v132 & 0xFFFFFFFFFFFFFFFELL;
    bzero(*(void **)(a1 + 256), ((8 * v134 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v133 < v131)
    bzero((void *)(v130 + 16 * (v132 >> 1)), 8 * v131 - 16 * (v132 >> 1));
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 184));
  v135 = *(_QWORD *)(a1 + 272);
  v136 = *(_QWORD *)(a1 + 280);
  if (v136 >= 0)
    v137 = *(_QWORD *)(a1 + 280);
  else
    v137 = v136 + 1;
  v138 = v137 & 0xFFFFFFFFFFFFFFFELL;
  if (v136 >= 2)
  {
    v139 = 2;
    if (v138 > 2)
      v139 = v137 & 0xFFFFFFFFFFFFFFFELL;
    bzero(*(void **)(a1 + 272), ((8 * v139 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v138 < v136)
    bzero((void *)(v135 + 16 * (v137 >> 1)), 8 * v136 - 16 * (v137 >> 1));
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 184));
  v140 = *(_QWORD *)(a1 + 288);
  v141 = *(_QWORD *)(a1 + 296);
  if (v141 >= 0)
    v142 = *(_QWORD *)(a1 + 296);
  else
    v142 = v141 + 1;
  v143 = v142 & 0xFFFFFFFFFFFFFFFELL;
  if (v141 >= 2)
  {
    v144 = 2;
    if (v143 > 2)
      v144 = v142 & 0xFFFFFFFFFFFFFFFELL;
    bzero(*(void **)(a1 + 288), ((8 * v144 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v143 < v141)
    bzero((void *)(v140 + 16 * (v142 >> 1)), 8 * v141 - 16 * (v142 >> 1));
  v146 = *a2;
  v145 = (uint64_t)a2[1];
  if (*(_QWORD *)(a1 + 32) != v145)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v10, v145, 1);
    v145 = *(_QWORD *)(a1 + 32);
  }
  v147 = (_OWORD *)*v10;
  if (v145 >= 0)
    v148 = v145;
  else
    v148 = v145 + 1;
  v149 = v148 & 0xFFFFFFFFFFFFFFFELL;
  if (v145 >= 2)
  {
    v150 = 0;
    v151 = (_OWORD *)*v10;
    v152 = v146;
    do
    {
      v153 = *v152++;
      *v151++ = v153;
      v150 += 2;
    }
    while (v150 < v149);
  }
  v154 = __OFSUB__(v145, v149);
  v155 = v145 - v149;
  if (!((v155 < 0) ^ v154 | (v155 == 0)))
  {
    v156 = v148 >> 1;
    v157 = (uint64_t *)&v146[v148 >> 1];
    v158 = &v147[v156];
    do
    {
      v159 = *v157++;
      *v158++ = v159;
      --v155;
    }
    while (v155);
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)v8, *(_QWORD *)(a1 + 176));
  v160 = *(_QWORD *)(a1 + 40);
  v161 = *(_QWORD *)(a1 + 48);
  if (v161 >= 0)
    v162 = *(_QWORD *)(a1 + 48);
  else
    v162 = v161 + 1;
  v163 = v162 & 0xFFFFFFFFFFFFFFFELL;
  if (v161 >= 2)
  {
    v164 = 2;
    if (v163 > 2)
      v164 = v162 & 0xFFFFFFFFFFFFFFFELL;
    bzero(*(void **)(a1 + 40), ((8 * v164 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v163 < v161)
    bzero((void *)(v160 + 16 * (v162 >> 1)), 8 * v161 - 16 * (v162 >> 1));
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 176));
  result = (uint64_t)Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 176));
  *(_DWORD *)(a1 + 120) = 9;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 88) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 200) = 0x3FF0000000000000;
  return result;
}

void sub_218423248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;

  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));
  if (*(char *)(v33 - 129) < 0)
  {
    operator delete(*(void **)(v33 - 152));
    if ((v30 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  do
  {
LABEL_8:
    v35 = __ldaxr((unint64_t *)v31);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, (unint64_t *)v31));
  if (v36)
    v37 = 1;
  else
    v37 = v31 == 0;
  if (!v37)
  {
    if (*(char *)(v31 + 31) < 0)
      operator delete(*v32);
    MEMORY[0x219A19A08](v31, 0x1012C404EF22A49);
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t turi::optimization::lbfgs_solver::next_iteration(turi::optimization::lbfgs_solver *this)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  _QWORD *v5;
  float64x2_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t **v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  float64x2_t **v17;
  double v18;
  double v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  float64x2_t *v23;
  double v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  float64x2_t *v44;
  float64x2_t *v45;
  float64x2_t *v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  double *f64;
  double *v53;
  double *v54;
  double v55;
  double v56;
  double v57;
  BOOL v58;
  double v60;
  uint64_t v61;
  double v62;
  float64x2_t *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  timeval *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  BOOL v81;
  _BOOL4 v82;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  int64_t v91;
  float64x2_t *v92;
  float64x2_t *v93;
  float64x2_t v94;
  uint64_t v95;
  uint64_t v96;
  double *v97;
  double *v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  int64_t v104;
  float64x2_t *v105;
  uint64_t v106;
  double *v107;
  double v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  __int128 *v123;
  uint64_t v124;
  __int128 v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  double *v138;
  double *v139;
  uint64_t v140;
  double v141;
  double v142;
  double v143;
  int64_t v144;
  float64x2_t *v145;
  uint64_t v146;
  float64x2_t *v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  unint64_t v151;
  uint64_t v152;
  double *v153;
  double *v154;
  double v155;
  double v156;
  double v157;
  char *v158;
  uint64_t v159;
  double v160;
  uint64_t v161;
  double v162;
  double v163;
  uint64_t v164;
  float64x2_t *v165;
  char *v166;
  uint64_t v167;
  int64_t v168;
  int64_t v169;
  float64x2_t *v170;
  float64x2_t *v171;
  float64x2_t v172;
  uint64_t v173;
  uint64_t v174;
  double *v175;
  double *v176;
  double v177;
  double v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  double v185;
  uint64_t v186;
  float64x2_t *v187;
  double v188;
  float64x2_t *v189;
  uint64_t v190;
  int64_t v191;
  int64_t v192;
  float64x2_t *v193;
  float64x2_t *v194;
  float64x2_t v195;
  uint64_t v196;
  uint64_t v197;
  double *v198;
  double *v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int64_t v205;
  int64_t v206;
  float64x2_t *v207;
  float64x2_t *v208;
  float64x2_t v209;
  uint64_t v210;
  uint64_t v211;
  double *v212;
  double *v213;
  double v214;
  _QWORD *v215;
  uint64_t v216;
  __int128 *v217;
  _OWORD *v218;
  uint64_t v219;
  int64_t v220;
  int64_t v221;
  _OWORD *v222;
  __int128 *v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  _QWORD *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t i;
  unint64_t v232;
  uint64_t v233;
  double v234;
  unint64_t v235;
  uint64_t v236;
  _BYTE *v237;
  double v238;
  double v239;
  uint64_t v240;
  uint64_t v241;
  int64_t v242;
  int64_t v243;
  float64x2_t *v244;
  uint64_t v245;
  double *v246;
  unint64_t v247;
  uint64_t v248;
  double v249;
  uint64_t v250;
  double v251;
  uint64_t v252;
  uint64_t v253;
  int64_t v254;
  int64_t v255;
  float64x2_t *v256;
  uint64_t v257;
  double *v258;
  unint64_t v259;
  uint64_t v260;
  double v261;
  unint64_t v262;
  uint64_t v263;
  _BYTE *v264;
  double v265;
  uint64_t v266;
  double v267;
  uint64_t v268;
  int64_t v269;
  int64_t v270;
  float64x2_t *v271;
  uint64_t v272;
  double *v273;
  double v274;
  _BOOL4 v276;
  double v277;
  double v278;
  timeval *v279;
  double v280;
  double v281;
  double v282;
  uint64_t v283;
  double v284;
  uint64_t v285;
  float64x2_t *v286;
  char *v287;
  uint64_t v288;
  int64_t v289;
  int64_t v290;
  float64x2_t *v291;
  float64x2_t *v292;
  float64x2_t v293;
  uint64_t v294;
  uint64_t v295;
  double *v296;
  double *v297;
  double v298;
  double v299;
  std::__shared_weak_count *v300;
  unint64_t *p_shared_owners;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  double v306;
  double v307;
  __darwin_suseconds_t tv_usec;
  uint64_t v309;
  float64x2_t *v310;
  double v311;
  float64x2_t *v312;
  uint64_t v313;
  int64_t v314;
  int64_t v315;
  float64x2_t *v316;
  float64x2_t *v317;
  float64x2_t v318;
  uint64_t v319;
  uint64_t v320;
  double *v321;
  double *v322;
  double v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int64_t v328;
  int64_t v329;
  float64x2_t *v330;
  float64x2_t *v331;
  float64x2_t v332;
  uint64_t v333;
  uint64_t v334;
  double *v335;
  double *v336;
  double v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t result;
  unint64_t v341;
  double v342;
  double v343;
  unint64_t v344;
  unint64_t v345;
  int64x2_t v346;
  char *v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  void *v350;
  uint64_t v351;
  void *v352[2];
  void *v353[2];
  uint64_t v354;
  std::__shared_weak_count *v355;
  void *v356;
  uint64_t v357;
  void *v358[2];
  void *v359[2];
  _BYTE v360[24];
  timeval *v361;
  char *v362;
  unint64_t v363;
  unint64_t v364;
  char *v365;
  timeval v366;
  uint64_t v367;
  _BYTE *v368;
  char *v369;
  _BYTE *v370;

  gettimeofday((timeval *)this + 8, 0);
  v2 = 0;
  v3 = 0;
  v345 = *((_QWORD *)this + 23);
  v347 = (char *)this + 24;
  v4 = *((_QWORD *)this + 1);
  v5 = (_QWORD *)((char *)this + 352);
  v6 = (float64x2_t **)((char *)this + 320);
  v7 = *((_QWORD *)this + 44);
  v8 = *((_QWORD *)this + 45);
  v9 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 44) = *((_QWORD *)this + 40);
  *((_QWORD *)this + 45) = v9;
  *((_QWORD *)this + 40) = v7;
  *((_QWORD *)this + 41) = v8;
  v10 = (float64x2_t **)((char *)this + 304);
  v346 = vdupq_n_s64(1uLL);
  v11 = 1.0;
  v12 = *((double *)this + 24);
  v344 = v4;
  while (1)
  {
    (*(void (**)(_QWORD, char *, char *, char *, _QWORD, uint64_t))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18), v347, (char *)this + 40, (char *)this + 88, 0, -1);
    *((int64x2_t *)this + 6) = vaddq_s64(*((int64x2_t *)this + 6), v346);
    if ((*((_QWORD *)this + 11) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_296;
    if (!v4)
    {
      v366.tv_sec = (__darwin_time_t)this + 40;
      *(_QWORD *)&v360[8] = *((_QWORD *)this + 5);
      v361 = &v366;
      Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v360);
      v11 = 1.0;
      v14 = 1.0 / (v13 + 1.0 + fabs(*((double *)this + 11)));
      *((double *)this + 25) = v14;
      *((double *)this + 46) = *((double *)this + 46) * v14;
    }
    v15 = *((_QWORD *)this + 20);
    if (v15)
    {
      v16 = v5;
      v17 = v10;
      (*(void (**)(uint64_t, char *, char *))(*(_QWORD *)v15 + 24))(v15, v347, (char *)this + 320);
      v18 = (*(double (**)(_QWORD, char *))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20), v347);
      v19 = *((double *)this + 25);
      v21 = (float64x2_t *)*((_QWORD *)this + 5);
      v20 = *((_QWORD *)this + 6);
      v22 = (float64x2_t *)*((_QWORD *)this + 40);
      if (*((_QWORD *)this + 41) == v20)
      {
        v23 = (float64x2_t *)*((_QWORD *)this + 40);
      }
      else
      {
        v343 = *((double *)this + 25);
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 40, v20, 1);
        v19 = v343;
        v23 = (float64x2_t *)*((_QWORD *)this + 40);
        v20 = *((_QWORD *)this + 41);
      }
      if (v20 >= 0)
        v41 = v20;
      else
        v41 = v20 + 1;
      v42 = v41 & 0xFFFFFFFFFFFFFFFELL;
      if (v20 >= 2)
      {
        v43 = 0;
        v44 = v23;
        v45 = v22;
        v46 = v21;
        do
        {
          v47 = *v45++;
          v48 = v47;
          v49 = *v46++;
          *v44++ = vmulq_n_f64(vaddq_f64(v48, v49), v19);
          v43 += 2;
        }
        while (v43 < v42);
      }
      v34 = __OFSUB__(v20, v42);
      v50 = v20 - v42;
      if (!((v50 < 0) ^ v34 | (v50 == 0)))
      {
        v51 = v41 >> 1;
        f64 = v21[v41 >> 1].f64;
        v53 = v22[v51].f64;
        v54 = v23[v51].f64;
        do
        {
          v55 = *v53++;
          v56 = v55;
          v57 = *f64++;
          *v54++ = v19 * (v56 + v57);
          --v50;
        }
        while (v50);
      }
      v40 = *((double *)this + 25) * (v18 + *((double *)this + 11));
      v10 = v17;
      v5 = v16;
      v4 = v344;
    }
    else
    {
      v24 = *((double *)this + 25);
      v26 = (float64x2_t *)*((_QWORD *)this + 5);
      v25 = *((_QWORD *)this + 6);
      if (*((_QWORD *)this + 41) != v25)
      {
        v342 = *((double *)this + 25);
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 40, v25, 1);
        v24 = v342;
        v25 = *((_QWORD *)this + 41);
      }
      v27 = *v6;
      if (v25 >= 0)
        v28 = v25;
      else
        v28 = v25 + 1;
      v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
      if (v25 >= 2)
      {
        v30 = 0;
        v31 = *v6;
        v32 = v26;
        do
        {
          v33 = *v32++;
          *v31++ = vmulq_n_f64(v33, v24);
          v30 += 2;
        }
        while (v30 < v29);
      }
      v34 = __OFSUB__(v25, v29);
      v35 = v25 - v29;
      if (!((v35 < 0) ^ v34 | (v35 == 0)))
      {
        v36 = v28 >> 1;
        v37 = v26[v28 >> 1].f64;
        v38 = v27[v36].f64;
        do
        {
          v39 = *v37++;
          *v38++ = v24 * v39;
          --v35;
        }
        while (v35);
      }
      v40 = *((double *)this + 25) * *((double *)this + 11);
    }
    *((double *)this + 24) = v40;
    if (v4 < 2)
      break;
    v58 = v2 >= 3 || v12 <= v40;
    if (v58 && v2 != 0)
      goto LABEL_95;
    v366.tv_sec = (__darwin_time_t)v10;
    if (!*((_QWORD *)this + 39))
    {
      v62 = 0.0;
LABEL_44:
      v64 = 0.0;
      goto LABEL_45;
    }
    *(_QWORD *)&v360[8] = *((_QWORD *)this + 38);
    v361 = &v366;
    v60 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v360);
    v61 = *((_QWORD *)this + 39);
    v366.tv_sec = (__darwin_time_t)this + 320;
    *(_QWORD *)&v366.tv_usec = v10;
    v62 = sqrt(v60);
    if (!v61)
      goto LABEL_44;
    v63 = *v10;
    *(_QWORD *)&v360[8] = *v6;
    v361 = (timeval *)v63;
    v363 = (unint64_t)&v366;
    v64 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v360);
LABEL_45:
    v65 = v64 / v62;
    if (v64 / v62 <= 0.0)
      goto LABEL_95;
    v366.tv_sec = (__darwin_time_t)v5;
    *(_QWORD *)&v366.tv_usec = v10;
    v66 = 0.0;
    v67 = 0.0;
    if (*((_QWORD *)this + 39))
    {
      v68 = (timeval *)*v10;
      *(_QWORD *)&v360[8] = *v5;
      v361 = v68;
      v363 = (unint64_t)&v366;
      v67 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v360);
    }
    v69 = v67 / v62;
    v70 = *((double *)this + 24);
    v71 = v62 * v69;
    v72 = v62 * v65 + v71 + (v70 - v12) * -2.0;
    v73 = v71 * -2.0 - (v62 * v65 - (v70 - v12) * 3.0);
    v74 = v70 >= v12 ? v12 : *((double *)this + 24);
    v75 = 1.0;
    v76 = v12 < v70 ? 0.0 : 1.0;
    v77 = 32;
    do
    {
      v78 = (v75 + v66) * 0.5;
      v79 = v12 + v71 * v78 + v73 * v78 * v78 + v78 * (v72 * v78) * v78;
      if (v79 < v74)
        v76 = (v75 + v66) * 0.5;
      if (v75 - v66 < 0.000001)
        break;
      if (v79 < v74)
        v74 = v12 + v71 * v78 + v73 * v78 * v78 + v78 * (v72 * v78) * v78;
      if (v71 + (v73 + v73) * v78 + v72 * 3.0 * v78 * v78 > 0.0)
        v75 = (v75 + v66) * 0.5;
      else
        v66 = (v75 + v66) * 0.5;
      --v77;
    }
    while (v77);
    v80 = v62 * v76;
    v81 = v62 * v76 < v62 * 0.1 || v2 == 2;
    v82 = v81;
    v3 |= v82;
    if (v80 >= v62 * 0.8 && v70 >= v12)
      goto LABEL_95;
    v84 = v80 / v62;
    *((double *)this + 14) = v80 / v62 * *((double *)this + 14);
    v85 = v11 - v80 / v62;
    v86 = *((_QWORD *)this + 38);
    v87 = *((_QWORD *)this + 3);
    v88 = *((_QWORD *)this + 4);
    if (v88 >= 0)
      v89 = *((_QWORD *)this + 4);
    else
      v89 = v88 + 1;
    v90 = v89 & 0xFFFFFFFFFFFFFFFELL;
    if (v88 >= 2)
    {
      v91 = 0;
      v92 = (float64x2_t *)*((_QWORD *)this + 3);
      v93 = (float64x2_t *)*((_QWORD *)this + 38);
      do
      {
        v94 = *v93++;
        *v92 = vsubq_f64(*v92, vmulq_n_f64(v94, v85));
        ++v92;
        v91 += 2;
      }
      while (v91 < v90);
    }
    v58 = v88 <= v90;
    v95 = v88 - v90;
    if (!v58)
    {
      v96 = v89 >> 1;
      v97 = (double *)(v86 + 16 * v96);
      v98 = (double *)(v87 + 16 * v96);
      do
      {
        v99 = *v97++;
        *v98 = *v98 - v85 * v99;
        ++v98;
        --v95;
      }
      while (v95);
    }
    v100 = *((_QWORD *)this + 38);
    v101 = *((_QWORD *)this + 39);
    if (v101 >= 0)
      v102 = *((_QWORD *)this + 39);
    else
      v102 = v101 + 1;
    v103 = v102 & 0xFFFFFFFFFFFFFFFELL;
    if (v101 >= 2)
    {
      v104 = 0;
      v105 = (float64x2_t *)*((_QWORD *)this + 38);
      do
      {
        *v105 = vmulq_n_f64(*v105, v84);
        ++v105;
        v104 += 2;
      }
      while (v104 < v103);
    }
    v58 = v101 <= v103;
    v106 = v101 - v103;
    if (!v58)
    {
      v107 = (double *)(v100 + 16 * (v102 >> 1));
      do
      {
        *v107 = v84 * *v107;
        ++v107;
        --v106;
      }
      while (v106);
    }
    ++v2;
  }
  v3 = 0;
LABEL_95:
  v108 = turi::optimization::compute_residual((_QWORD *)this + 40);
  if ((*(_QWORD *)&v108 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_295:
    v109 = 7;
    goto LABEL_297;
  }
  if (v108 >= *((double *)this + 46))
  {
    if (v4)
    {
      v110 = (v4 - 1) % v345;
      v111 = *((_QWORD *)this + 30);
      v112 = *((_QWORD *)this + 29) + 8 * v111 * v110;
      v113 = *((_QWORD *)this + 38);
      v114 = (v112 >> 3) & 1;
      if (v114 >= v111)
        v114 = *((_QWORD *)this + 30);
      if ((v112 & 7) != 0)
        v114 = *((_QWORD *)this + 30);
      v115 = v111 - v114;
      if (v111 >= v114)
        v116 = v111 - v114;
      else
        v116 = v115 + 1;
      v117 = v116 & 0xFFFFFFFFFFFFFFFELL;
      if (v114 >= 1)
      {
        v118 = 0;
        v119 = (uint64_t *)*((_QWORD *)this + 38);
        v120 = v114;
        do
        {
          v121 = *v119++;
          *(_QWORD *)(v112 + 8 * v118++) = v121;
          --v120;
        }
        while (v120);
      }
      v122 = v117 + v114;
      if (v115 > 1)
      {
        v123 = (__int128 *)(v113 + 8 * v114);
        v124 = v114;
        do
        {
          v125 = *v123++;
          *(_OWORD *)(v112 + 8 * v124) = v125;
          v124 += 2;
        }
        while (v124 < v122);
      }
      if (v122 < v111)
      {
        v126 = v115 - v117;
        v127 = (uint64_t *)(v113 + 16 * (v116 >> 1) + 8 * v114);
        do
        {
          v128 = *v127++;
          *(_QWORD *)(v112 + 8 * v122++) = v128;
          --v126;
        }
        while (v126);
      }
      v129 = *((_QWORD *)this + 27);
      v130 = *((_QWORD *)this + 26) + 8 * v129 * v110;
      v131 = *((_QWORD *)this + 40);
      v132 = *((_QWORD *)this + 44);
      v133 = (v130 >> 3) & 1;
      if (v133 >= v129)
        v133 = *((_QWORD *)this + 27);
      if ((v130 & 7) != 0)
        v133 = *((_QWORD *)this + 27);
      v134 = v129 - v133;
      if (v129 >= v133)
        v135 = v129 - v133;
      else
        v135 = v134 + 1;
      v136 = v135 & 0xFFFFFFFFFFFFFFFELL;
      if (v133 >= 1)
      {
        v137 = 0;
        v138 = (double *)*((_QWORD *)this + 40);
        v139 = (double *)*((_QWORD *)this + 44);
        v140 = v133;
        do
        {
          v141 = *v138++;
          v142 = v141;
          v143 = *v139++;
          *(double *)(v130 + 8 * v137++) = v142 - v143;
          --v140;
        }
        while (v140);
      }
      v144 = v136 + v133;
      if (v134 > 1)
      {
        v145 = (float64x2_t *)(v132 + 8 * v133);
        v146 = v133;
        v147 = (float64x2_t *)(v131 + 8 * v133);
        do
        {
          v148 = *v147++;
          v149 = v148;
          v150 = *v145++;
          *(float64x2_t *)(v130 + 8 * v146) = vsubq_f64(v149, v150);
          v146 += 2;
        }
        while (v146 < v144);
      }
      if (v144 < v129)
      {
        v151 = v134 - v136;
        v152 = 16 * (v135 >> 1) + 8 * v133;
        v153 = (double *)(v132 + v152);
        v154 = (double *)(v131 + v152);
        do
        {
          v155 = *v154++;
          v156 = v155;
          v157 = *v153++;
          *(double *)(v130 + 8 * v144++) = v156 - v157;
          --v151;
        }
        while (v151);
      }
      v158 = (char *)*((_QWORD *)this + 27);
      v159 = *((_QWORD *)this + 26) + 8 * (_QWORD)v158 * v110;
      *(_QWORD *)v360 = v10;
      *(_QWORD *)&v360[8] = v159;
      *(_QWORD *)&v360[16] = v158;
      v362 = (char *)this + 208;
      v363 = 0;
      v364 = (v4 - 1) % v345;
      v365 = v158;
      if (v158)
      {
        *(_QWORD *)&v366.tv_usec = *v10;
        v367 = v159;
        v369 = v158;
        v370 = v360;
        v160 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const>>,3,0>::run((uint64_t)&v366);
      }
      else
      {
        v160 = 0.0;
      }
      *(double *)(*((_QWORD *)this + 34) + 8 * v110) = 1.0 / v160;
      v215 = (_QWORD *)((char *)this + 256);
      v217 = (__int128 *)*((_QWORD *)this + 40);
      v216 = *((_QWORD *)this + 41);
      if (*((_QWORD *)this + 33) != v216)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 32, v216, 1);
        v216 = *((_QWORD *)this + 33);
      }
      v218 = (_OWORD *)*v215;
      if (v216 >= 0)
        v219 = v216;
      else
        v219 = v216 + 1;
      v220 = v219 & 0xFFFFFFFFFFFFFFFELL;
      if (v216 >= 2)
      {
        v221 = 0;
        v222 = (_OWORD *)*v215;
        v223 = v217;
        do
        {
          v224 = *v223++;
          *v222++ = v224;
          v221 += 2;
        }
        while (v221 < v220);
      }
      v341 = (v4 - 1) % v345;
      v34 = __OFSUB__(v216, v220);
      v225 = v216 - v220;
      if (!((v225 < 0) ^ v34 | (v225 == 0)))
      {
        v226 = v219 >> 1;
        v227 = (uint64_t *)&v217[v219 >> 1];
        v228 = &v218[v226];
        do
        {
          v229 = *v227++;
          *v228++ = v229;
          --v225;
        }
        while (v225);
      }
      if (v345 >= v4)
        v230 = v4;
      else
        v230 = v345;
      for (i = 0; i != v230; ++i)
      {
        v232 = (v341 + v345 - i) % v345;
        v233 = *((_QWORD *)this + 33);
        v234 = *(double *)(*((_QWORD *)this + 34) + 8 * v232);
        v235 = *((_QWORD *)this + 30);
        v236 = *((_QWORD *)this + 29) + 8 * v235 * v232;
        *(_QWORD *)v360 = v236;
        *(_QWORD *)&v360[8] = v235;
        v361 = (timeval *)((char *)this + 232);
        v362 = 0;
        v363 = v232;
        v364 = v235;
        v365 = (char *)this + 256;
        v237 = (_BYTE *)*((_QWORD *)this + 32);
        if (v233)
        {
          *(_QWORD *)&v366.tv_usec = v236;
          v367 = v235;
          v368 = v237;
          v370 = v360;
          v238 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v366);
          v237 = (_BYTE *)*((_QWORD *)this + 32);
          v233 = *((_QWORD *)this + 33);
        }
        else
        {
          v238 = 0.0;
        }
        v239 = v234 * v238;
        *(double *)(*((_QWORD *)this + 36) + 8 * v232) = v239;
        v240 = *((_QWORD *)this + 26) + 8 * *((_QWORD *)this + 27) * v232;
        if (v233 >= 0)
          v241 = v233;
        else
          v241 = v233 + 1;
        v242 = v241 & 0xFFFFFFFFFFFFFFFELL;
        if (v233 >= 2)
        {
          v243 = 0;
          v244 = (float64x2_t *)v237;
          do
          {
            *v244 = vsubq_f64(*v244, vmulq_n_f64(*(float64x2_t *)(v240 + 8 * v243), v239));
            ++v244;
            v243 += 2;
          }
          while (v243 < v242);
        }
        v58 = v233 <= v242;
        v245 = v233 - v242;
        if (!v58)
        {
          v246 = (double *)&v237[16 * (v241 >> 1)];
          do
          {
            *v246 = *v246 - v239 * *(double *)(v240 + 8 * v242);
            ++v246;
            ++v242;
            --v245;
          }
          while (v245);
        }
      }
      v247 = *((_QWORD *)this + 27);
      v248 = *((_QWORD *)this + 26) + 8 * v247 * v341;
      *(_QWORD *)v360 = v248;
      *(_QWORD *)&v360[8] = v247;
      v361 = (timeval *)((char *)this + 208);
      v362 = 0;
      v363 = (v4 - 1) % v345;
      v364 = v247;
      if (v247)
      {
        *(_QWORD *)&v366.tv_usec = v248;
        v367 = v247;
        v368 = v360;
        v249 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const>>,3,0>::run((uint64_t)&v366);
      }
      else
      {
        v249 = 0.0;
      }
      v250 = *((_QWORD *)this + 33);
      v251 = 1.0 / (v249 * *(double *)(*((_QWORD *)this + 34) + 8 * v341));
      v252 = *((_QWORD *)this + 32);
      if (v250 >= 0)
        v253 = *((_QWORD *)this + 33);
      else
        v253 = v250 + 1;
      v254 = v253 & 0xFFFFFFFFFFFFFFFELL;
      if (v250 >= 2)
      {
        v255 = 0;
        v256 = (float64x2_t *)*((_QWORD *)this + 32);
        do
        {
          *v256 = vmulq_n_f64(*v256, v251);
          ++v256;
          v255 += 2;
        }
        while (v255 < v254);
      }
      v58 = v250 <= v254;
      v257 = v250 - v254;
      if (!v58)
      {
        v258 = (double *)(v252 + 16 * (v253 >> 1));
        do
        {
          *v258 = v251 * *v258;
          ++v258;
          --v257;
        }
        while (v257);
      }
      do
      {
        v259 = (v341 + v345 - v230 + 1) % v345;
        v260 = *((_QWORD *)this + 33);
        v261 = *(double *)(*((_QWORD *)this + 34) + 8 * v259);
        v262 = *((_QWORD *)this + 27);
        v263 = *((_QWORD *)this + 26) + 8 * v262 * v259;
        *(_QWORD *)v360 = v263;
        *(_QWORD *)&v360[8] = v262;
        v361 = (timeval *)((char *)this + 208);
        v362 = 0;
        v363 = v259;
        v364 = v262;
        v365 = (char *)this + 256;
        v264 = (_BYTE *)*((_QWORD *)this + 32);
        if (v260)
        {
          *(_QWORD *)&v366.tv_usec = v263;
          v367 = v262;
          v368 = v264;
          v370 = v360;
          v265 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v366);
          v264 = (_BYTE *)*((_QWORD *)this + 32);
          v260 = *((_QWORD *)this + 33);
        }
        else
        {
          v265 = 0.0;
        }
        v266 = *((_QWORD *)this + 29) + 8 * *((_QWORD *)this + 30) * v259;
        v267 = *(double *)(*((_QWORD *)this + 36) + 8 * v259) - v261 * v265;
        if (v260 >= 0)
          v268 = v260;
        else
          v268 = v260 + 1;
        v269 = v268 & 0xFFFFFFFFFFFFFFFELL;
        if (v260 >= 2)
        {
          v270 = 0;
          v271 = (float64x2_t *)v264;
          do
          {
            *v271 = vaddq_f64(*v271, vmulq_n_f64(*(float64x2_t *)(v266 + 8 * v270), v267));
            ++v271;
            v270 += 2;
          }
          while (v270 < v269);
        }
        v58 = v260 <= v269;
        v272 = v260 - v269;
        if (!v58)
        {
          v273 = (double *)&v264[16 * (v268 >> 1)];
          do
          {
            *v273 = v267 * *(double *)(v266 + 8 * v269) + *v273;
            ++v273;
            ++v269;
            --v272;
          }
          while (v272);
        }
        --v230;
      }
      while (v230);
      v274 = *((double *)this + 24);
      v276 = v274 > v12 || v344 == 1;
      if (((v276 | v3) & 1) == 0)
      {
        v366.tv_sec = (__darwin_time_t)this + 320;
        *(_QWORD *)&v366.tv_usec = v5;
        v277 = 0.0;
        v278 = 0.0;
        if (*((_QWORD *)this + 45))
        {
          v279 = (timeval *)*v5;
          *(_QWORD *)&v360[8] = *v6;
          v361 = v279;
          v363 = (unint64_t)&v366;
          v278 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v360);
        }
        v366.tv_sec = (__darwin_time_t)this + 320;
        if (*((_QWORD *)this + 41))
        {
          *(_QWORD *)&v360[8] = *v6;
          v361 = &v366;
          v277 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v360);
        }
        v280 = v278 * v278;
        v281 = v277 * 0.9;
        v366.tv_sec = (__darwin_time_t)v5;
        if (*((_QWORD *)this + 45))
        {
          *(_QWORD *)&v360[8] = *v5;
          v361 = &v366;
          v282 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v360);
        }
        else
        {
          v282 = 0.0;
        }
        if (v280 <= v281 * v282)
        {
          v306 = *((double *)this + 14);
          if (v306 < 1.0)
          {
            v306 = fmin(v306 * 1.25, 1.0);
            *((double *)this + 14) = v306;
          }
          goto LABEL_268;
        }
        v274 = *((double *)this + 24);
      }
      v283 = *((_QWORD *)this + 18);
      v284 = *((double *)this + 14);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v353, (uint64_t)v347);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v352, (uint64_t)this + 320);
      v350 = 0;
      v351 = 0;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v350, *((_QWORD *)this + 33), 1);
      v286 = (float64x2_t *)*((_QWORD *)this + 32);
      v285 = *((_QWORD *)this + 33);
      if (v351 != v285)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v350, v285, 1);
        v285 = v351;
      }
      v287 = (char *)v350;
      if (v285 >= 0)
        v288 = v285;
      else
        v288 = v285 + 1;
      v289 = v288 & 0xFFFFFFFFFFFFFFFELL;
      if (v285 >= 2)
      {
        v290 = 0;
        v291 = (float64x2_t *)v350;
        v292 = v286;
        do
        {
          v293 = *v292++;
          *v291++ = vnegq_f64(v293);
          v290 += 2;
        }
        while (v290 < v289);
      }
      v34 = __OFSUB__(v285, v289);
      v294 = v285 - v289;
      if (!((v294 < 0) ^ v34 | (v294 == 0)))
      {
        v295 = v288 >> 1;
        v296 = v286[v288 >> 1].f64;
        v297 = (double *)&v287[16 * v295];
        do
        {
          v298 = *v296++;
          *v297++ = -v298;
          --v294;
        }
        while (v294);
      }
      v299 = *((double *)this + 25);
      v300 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
      v348 = *((_QWORD *)this + 20);
      v349 = v300;
      if (v300)
      {
        p_shared_owners = (unint64_t *)&v300->__shared_owners_;
        do
          v302 = __ldxr(p_shared_owners);
        while (__stxr(v302 + 1, p_shared_owners));
      }
      turi::optimization::more_thuente<Eigen::Matrix<double,-1,1,0,-1,1>>(v283, (float64x2_t **)v353, v352, &v350, &v348, 20, (uint64_t)v360, v284, v274, v299);
      v303 = v349;
      if (v349)
      {
        v304 = (unint64_t *)&v349->__shared_owners_;
        do
          v305 = __ldaxr(v304);
        while (__stlxr(v305 - 1, v304));
        if (!v305)
        {
          ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
          std::__shared_weak_count::__release_weak(v303);
        }
      }
      free(v350);
      free(v352[0]);
      free(v353[0]);
      if (v360[8])
      {
        v306 = *(double *)v360;
        *((_QWORD *)this + 14) = *(_QWORD *)v360;
        *((int64x2_t *)this + 6) = vaddw_s32(*((int64x2_t *)this + 6), *(int32x2_t *)&v360[12]);
LABEL_268:
        v310 = (float64x2_t *)*((_QWORD *)this + 32);
        v309 = *((_QWORD *)this + 33);
        if (*((_QWORD *)this + 39) != v309)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v10, v309, 1);
          v309 = *((_QWORD *)this + 39);
        }
        v311 = -v306;
        v312 = *v10;
        if (v309 >= 0)
          v313 = v309;
        else
          v313 = v309 + 1;
        v314 = v313 & 0xFFFFFFFFFFFFFFFELL;
        if (v309 >= 2)
        {
          v315 = 0;
          v316 = *v10;
          v317 = v310;
          do
          {
            v318 = *v317++;
            *v316++ = vmulq_n_f64(v318, v311);
            v315 += 2;
          }
          while (v315 < v314);
        }
        v34 = __OFSUB__(v309, v314);
        v319 = v309 - v314;
        if (!((v319 < 0) ^ v34 | (v319 == 0)))
        {
          v320 = v313 >> 1;
          v321 = v310[v313 >> 1].f64;
          v322 = v312[v320].f64;
          do
          {
            v323 = *v321++;
            *v322++ = v323 * v311;
            --v319;
          }
          while (v319);
        }
        v324 = *((_QWORD *)this + 38);
        v325 = *((_QWORD *)this + 3);
        v326 = *((_QWORD *)this + 4);
        if (v326 >= 0)
          v327 = *((_QWORD *)this + 4);
        else
          v327 = v326 + 1;
        v328 = v327 & 0xFFFFFFFFFFFFFFFELL;
        if (v326 >= 2)
        {
          v329 = 0;
          v330 = (float64x2_t *)*((_QWORD *)this + 3);
          v331 = (float64x2_t *)*((_QWORD *)this + 38);
          do
          {
            v332 = *v331++;
            *v330 = vaddq_f64(v332, *v330);
            ++v330;
            v329 += 2;
          }
          while (v329 < v328);
        }
        v58 = v326 <= v328;
        v333 = v326 - v328;
        if (!v58)
        {
          v334 = v327 >> 1;
          v335 = (double *)(v324 + 16 * v334);
          v336 = (double *)(v325 + 16 * v334);
          do
          {
            v337 = *v335++;
            *v336 = v337 + *v336;
            ++v336;
            --v333;
          }
          while (v333);
        }
LABEL_288:
        v366.tv_sec = (__darwin_time_t)v10;
        if (!*((_QWORD *)this + 39)
          || (*(_QWORD *)&v360[8] = *v10,
              v361 = &v366,
              Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v360) <= 1.0e-20))
        {
LABEL_296:
          v109 = 6;
          goto LABEL_297;
        }
        v338 = *((_QWORD *)this + 39);
        if (v338 < 1)
        {
LABEL_294:
          *((_DWORD *)this + 30) = 9;
          gettimeofday((timeval *)v360, 0);
          result = 0;
          *((double *)this + 2) = *((double *)this + 2)
                                + (double)(*(_DWORD *)&v360[8] - *((_DWORD *)this + 34)) / 1000000.0
                                + (double)(uint64_t)(*(_QWORD *)v360 - *((_QWORD *)this + 16));
          *((double *)this + 10) = v108;
          ++*((_QWORD *)this + 1);
          return result;
        }
        v339 = (_QWORD *)*((_QWORD *)this + 38);
        while ((*v339 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          ++v339;
          if (!--v338)
            goto LABEL_294;
        }
        goto LABEL_295;
      }
    }
    else
    {
      v161 = *((_QWORD *)this + 18);
      v162 = *((double *)this + 14);
      v163 = *((double *)this + 24);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v359, (uint64_t)v347);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v358, (uint64_t)this + 320);
      v356 = 0;
      v357 = 0;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v356, *((_QWORD *)this + 41), 1);
      v165 = (float64x2_t *)*((_QWORD *)this + 40);
      v164 = *((_QWORD *)this + 41);
      if (v357 != v164)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v356, v164, 1);
        v164 = v357;
      }
      v166 = (char *)v356;
      if (v164 >= 0)
        v167 = v164;
      else
        v167 = v164 + 1;
      v168 = v167 & 0xFFFFFFFFFFFFFFFELL;
      if (v164 >= 2)
      {
        v169 = 0;
        v170 = (float64x2_t *)v356;
        v171 = v165;
        do
        {
          v172 = *v171++;
          *v170++ = vnegq_f64(v172);
          v169 += 2;
        }
        while (v169 < v168);
      }
      v34 = __OFSUB__(v164, v168);
      v173 = v164 - v168;
      if (!((v173 < 0) ^ v34 | (v173 == 0)))
      {
        v174 = v167 >> 1;
        v175 = v165[v167 >> 1].f64;
        v176 = (double *)&v166[16 * v174];
        do
        {
          v177 = *v175++;
          *v176++ = -v177;
          --v173;
        }
        while (v173);
      }
      v178 = *((double *)this + 25);
      v179 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
      v354 = *((_QWORD *)this + 20);
      v355 = v179;
      if (v179)
      {
        v180 = (unint64_t *)&v179->__shared_owners_;
        do
          v181 = __ldxr(v180);
        while (__stxr(v181 + 1, v180));
      }
      turi::optimization::more_thuente<Eigen::Matrix<double,-1,1,0,-1,1>>(v161, (float64x2_t **)v359, v358, &v356, &v354, 20, (uint64_t)v360, v162, v163, v178);
      v182 = v355;
      if (v355)
      {
        v183 = (unint64_t *)&v355->__shared_owners_;
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (!v184)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
      free(v356);
      free(v358[0]);
      free(v359[0]);
      v185 = *(double *)v360;
      *((_QWORD *)this + 14) = *(_QWORD *)v360;
      *((int64x2_t *)this + 6) = vaddw_s32(*((int64x2_t *)this + 6), *(int32x2_t *)&v360[12]);
      if (v360[8])
      {
        v187 = (float64x2_t *)*((_QWORD *)this + 40);
        v186 = *((_QWORD *)this + 41);
        if (*((_QWORD *)this + 39) != v186)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v10, v186, 1);
          v186 = *((_QWORD *)this + 39);
        }
        v188 = -v185;
        v189 = *v10;
        if (v186 >= 0)
          v190 = v186;
        else
          v190 = v186 + 1;
        v191 = v190 & 0xFFFFFFFFFFFFFFFELL;
        if (v186 >= 2)
        {
          v192 = 0;
          v193 = *v10;
          v194 = v187;
          do
          {
            v195 = *v194++;
            *v193++ = vmulq_n_f64(v195, v188);
            v192 += 2;
          }
          while (v192 < v191);
        }
        v34 = __OFSUB__(v186, v191);
        v196 = v186 - v191;
        if (!((v196 < 0) ^ v34 | (v196 == 0)))
        {
          v197 = v190 >> 1;
          v198 = v187[v190 >> 1].f64;
          v199 = v189[v197].f64;
          do
          {
            v200 = *v198++;
            *v199++ = v200 * v188;
            --v196;
          }
          while (v196);
        }
        v201 = *((_QWORD *)this + 38);
        v202 = *((_QWORD *)this + 3);
        v203 = *((_QWORD *)this + 4);
        if (v203 >= 0)
          v204 = *((_QWORD *)this + 4);
        else
          v204 = v203 + 1;
        v205 = v204 & 0xFFFFFFFFFFFFFFFELL;
        if (v203 >= 2)
        {
          v206 = 0;
          v207 = (float64x2_t *)*((_QWORD *)this + 3);
          v208 = (float64x2_t *)*((_QWORD *)this + 38);
          do
          {
            v209 = *v208++;
            *v207 = vaddq_f64(v209, *v207);
            ++v207;
            v206 += 2;
          }
          while (v206 < v205);
        }
        v58 = v203 <= v205;
        v210 = v203 - v205;
        if (!v58)
        {
          v211 = v204 >> 1;
          v212 = (double *)(v201 + 16 * v211);
          v213 = (double *)(v202 + 16 * v211);
          do
          {
            v214 = *v212++;
            *v213 = v214 + *v213;
            ++v213;
            --v210;
          }
          while (v210);
        }
        goto LABEL_288;
      }
    }
    *((_DWORD *)this + 30) = 8;
    gettimeofday(&v366, 0);
    v307 = (double)(v366.tv_sec - *((_QWORD *)this + 16));
    tv_usec = v366.tv_usec;
    goto LABEL_298;
  }
  v109 = 2;
LABEL_297:
  *((_DWORD *)this + 30) = v109;
  gettimeofday((timeval *)v360, 0);
  v307 = (double)(uint64_t)(*(_QWORD *)v360 - *((_QWORD *)this + 16));
  tv_usec = *(_DWORD *)&v360[8];
LABEL_298:
  *((double *)this + 2) = *((double *)this + 2) + (double)(tv_usec - *((_DWORD *)this + 34)) / 1000000.0 + v307;
  return 1;
}

void sub_2184248F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,void *a33)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  free(a29);
  free(a31);
  free(a33);
  _Unwind_Resume(a1);
}

void turi::optimization::lbfgs_compat(std::shared_ptr<turi::optimization::first_order_opt_interface>,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&,std::shared_ptr<turi::optimization::smooth_regularizer_interface> const&)::$_0::operator()(turi::table_printer **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 *v8;
  _OWORD *v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  _OWORD *v13;
  __int128 *v14;
  __int128 v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  _OWORD *v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  BOOL v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  _OWORD *v48;
  __int128 *v49;
  __int128 v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  int32x2_t v57;
  std::bad_alloc *exception;
  std::bad_alloc *v59;
  _QWORD v60[38];

  v60[37] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a3 = -1;
  *(_QWORD *)(a3 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a3 + 16) = 0u;
  v6 = (_QWORD *)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  turi::sframe::sframe((turi::sframe *)(a3 + 104));
  *(_DWORD *)a3 = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
  v8 = *(__int128 **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a3 + 24) != v7)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a3 + 16), v7, 1);
    v7 = *(_QWORD *)(a3 + 24);
  }
  v9 = (_OWORD *)*v6;
  if (v7 >= 0)
    v10 = v7;
  else
    v10 = v7 + 1;
  v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if (v7 >= 2)
  {
    v12 = 0;
    v13 = (_OWORD *)*v6;
    v14 = v8;
    do
    {
      v15 = *v14++;
      *v13++ = v15;
      v12 += 2;
    }
    while (v12 < v11);
  }
  v16 = __OFSUB__(v7, v11);
  v17 = v7 - v11;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = v10 >> 1;
    v19 = (uint64_t *)&v8[v10 >> 1];
    v20 = &v9[v18];
    do
    {
      v21 = *v19++;
      *v20++ = v21;
      --v17;
    }
    while (v17);
  }
  v22 = (_QWORD *)(a3 + 32);
  v24 = *(__int128 **)(a2 + 32);
  v23 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a3 + 40) != v23)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a3 + 32), v23, 1);
    v23 = *(_QWORD *)(a3 + 40);
  }
  v25 = (_OWORD *)*v22;
  if (v23 >= 0)
    v26 = v23;
  else
    v26 = v23 + 1;
  v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
  if (v23 >= 2)
  {
    v28 = 0;
    v29 = (_OWORD *)*v22;
    v30 = v24;
    do
    {
      v31 = *v30++;
      *v29++ = v31;
      v28 += 2;
    }
    while (v28 < v27);
  }
  v16 = __OFSUB__(v23, v27);
  v32 = v23 - v27;
  if (!((v32 < 0) ^ v16 | (v32 == 0)))
  {
    v33 = v26 >> 1;
    v34 = (uint64_t *)&v24[v26 >> 1];
    v35 = &v25[v33];
    do
    {
      v36 = *v34++;
      *v35++ = v36;
      --v32;
    }
    while (v32);
  }
  v37 = (_QWORD *)(a3 + 48);
  v39 = *(__int128 **)(a2 + 48);
  v38 = *(_QWORD *)(a2 + 56);
  v40 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a3 + 56) != v38 || *(_QWORD *)(a3 + 64) != v40)
  {
    if (v38)
      v42 = v40 == 0;
    else
      v42 = 1;
    if (!v42 && 0x7FFFFFFFFFFFFFFFLL / v40 < v38)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v59 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v59, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize((_QWORD *)(a3 + 48), v40 * v38, v38, v40);
    v38 = *(_QWORD *)(a3 + 56);
    v40 = *(_QWORD *)(a3 + 64);
  }
  v43 = (_OWORD *)*v37;
  v44 = v38 * v40;
  if (v38 * v40 >= 0)
    v45 = v38 * v40;
  else
    v45 = v44 + 1;
  v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
  if (v44 >= 2)
  {
    v47 = 0;
    v48 = (_OWORD *)*v37;
    v49 = v39;
    do
    {
      v50 = *v49++;
      *v48++ = v50;
      v47 += 2;
    }
    while (v47 < v46);
  }
  v51 = v44 <= v46;
  v52 = v44 - v46;
  if (!v51)
  {
    v53 = v45 >> 1;
    v54 = (uint64_t *)&v39[v45 >> 1];
    v55 = &v43[v53];
    do
    {
      v56 = *v54++;
      *v55++ = v56;
      --v52;
    }
    while (v52);
  }
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a2 + 72);
  v57 = vmovn_s64(*(int64x2_t *)(a2 + 88));
  *(int32x2_t *)(a3 + 88) = v57;
  *(_DWORD *)(a3 + 96) = v57.i32[0];
  *(_DWORD *)(a3 + 100) = *(_DWORD *)(a2 + 112);
  turi::table_printer::get_tracked_table(*a1, (turi::sframe *)v60);
  turi::sframe::operator=(a3 + 104, (uint64_t)v60);
  turi::sframe::~sframe((turi::sframe *)v60);
}

void sub_218424C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  turi::sframe::~sframe((turi::sframe *)&a9);
  turi::optimization::_solver_return::~_solver_return(v9);
  _Unwind_Resume(a1);
}

void turi::optimization::solver_status::~solver_status(void **this)
{
  free(this[6]);
  free(this[4]);
  free(this[2]);
}

void turi::optimization::lbfgs_solver::~lbfgs_solver(void **this)
{
  *this = &off_24D9404B0;
  free(this[44]);
  free(this[42]);
  free(this[40]);
  free(this[38]);
  free(this[36]);
  free(this[34]);
  free(this[32]);
  free(this[29]);
  free(this[26]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 20));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  turi::optimization::iterative_optimization_solver::~iterative_optimization_solver(this);
}

{
  *this = &off_24D9404B0;
  free(this[44]);
  free(this[42]);
  free(this[40]);
  free(this[38]);
  free(this[36]);
  free(this[34]);
  free(this[32]);
  free(this[29]);
  free(this[26]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 20));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  turi::optimization::iterative_optimization_solver::~iterative_optimization_solver(this);
  JUMPOUT(0x219A19A08);
}

void turi::optimization::more_thuente<Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t a1@<X0>, float64x2_t **a2@<X1>, void **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  uint64_t v17;
  double v18;
  int *v19;
  file_logger *v20;
  file_logger *started;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *exception;
  int *v29;
  file_logger *v30;
  file_logger *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  double v40;
  int v41;
  double v42;
  int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int *v49;
  file_logger *v50;
  file_logger *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  const std::locale::facet *v59;
  float64x2_t *v60;
  uint64_t v61;
  float64x2_t *v62;
  float64x2_t *v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  double *f64;
  double *v77;
  double *v78;
  double v79;
  double v80;
  double v81;
  __int128 v82;
  double v83;
  uint64_t v84;
  char *v85;
  int64_t v86;
  uint64_t v87;
  int64_t v88;
  int64_t v89;
  float64x2_t *v90;
  float64x2_t *v91;
  float64x2_t v92;
  int64_t v93;
  uint64_t v94;
  double *v95;
  double *v96;
  double v97;
  char *v98;
  int64_t v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  float64x2_t *v103;
  int64_t v104;
  double *v105;
  uint64_t v106;
  double v107;
  BOOL v108;
  double v109;
  double v113;
  double v115;
  BOOL v116;
  char v117;
  int *v118;
  file_logger *v119;
  file_logger *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _BYTE *v128;
  int *v129;
  file_logger *v130;
  file_logger *v131;
  _QWORD *v132;
  _BYTE *v133;
  const std::locale::facet *v134;
  int *v135;
  file_logger *v136;
  file_logger *v137;
  _QWORD *v138;
  _QWORD *v139;
  char *v140;
  const std::locale::facet *v141;
  int *v142;
  file_logger *v143;
  _QWORD *v144;
  _QWORD *v145;
  const std::locale::facet *v146;
  std::bad_alloc *v147;
  std::bad_alloc *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  BOOL *v152;
  double v153;
  double v154;
  double v155;
  __int128 v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  _BYTE v165[9];
  unint64_t v166;
  void *v167;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  float64x2_t *v178;
  double v179;
  _QWORD *v180;
  std::locale v181;
  void *v182;
  uint64_t v183;
  double *v184;

  *(_QWORD *)a7 = 0x3FF0000000000000;
  *(_BYTE *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_DWORD *)(a7 + 12) = 0;
  if (a8 <= 0.000000001)
  {
    v19 = (int *)global_logger();
    if (v19[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v19))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v20 = (file_logger *)global_logger();
      started = file_logger::start_stream(v20, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 346, 1);
      v22 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v22 && *((_BYTE *)v22 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)" Error:", 7);
      v23 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v23 && *((_BYTE *)v23 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)" \nInitial step step less than ", 30);
      v24 = file_logger::operator<<<double>((uint64_t)started);
      v25 = pthread_getspecific(*(_QWORD *)(v24 + 592));
      if (v25 && *((_BYTE *)v25 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)".", 1);
      v26 = pthread_getspecific(*(_QWORD *)(v24 + 592));
      if (v26)
      {
        if (*((_BYTE *)v26 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(v26[2] - 24) + 16));
          v27 = std::locale::use_facet(&v181, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
          std::locale::~locale(&v181);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v24);
          if (*(_DWORD *)(v24 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    return;
  }
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v178, (uint64_t)a2);
  v179 = *(double *)&a3;
  v180 = a4;
  if (a4[1])
  {
    v17 = *a4;
    v182 = *a3;
    v183 = v17;
    v184 = &v179;
    v18 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v181);
  }
  else
  {
    v18 = 0.0;
  }
  if (a8 <= 0.0 || v18 >= 1.0e-10)
  {
    v29 = (int *)global_logger();
    if (v29[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v29))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v30 = (file_logger *)global_logger();
      v31 = file_logger::start_stream(v30, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 359, 1);
      v32 = pthread_getspecific(*((_QWORD *)v31 + 74));
      if (v32 && *((_BYTE *)v32 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32 + 2, (uint64_t)" Error: Search direction is not a descent direction.", 52);
      v33 = pthread_getspecific(*((_QWORD *)v31 + 74));
      if (v33 && *((_BYTE *)v33 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33 + 2, (uint64_t)" \nDetected numerical difficulties.", 34);
      v34 = pthread_getspecific(*((_QWORD *)v31 + 74));
      if (v34)
      {
        if (*((_BYTE *)v34 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(v34[2] - 24) + 16));
          v35 = std::locale::use_facet(&v181, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
          std::locale::~locale(&v181);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v31);
          if (*((_DWORD *)v31 + 150) == 7)
          {
            __print_back_trace();
            v151 = __cxa_allocate_exception(8uLL);
            *v151 = "LOG_FATAL encountered";
            __cxa_throw(v151, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
  }
  v177 = 0.000000001;
  v175 = v18;
  v176 = a9;
  v174 = 0.000000001;
  v172 = v18;
  v173 = a9;
  v170 = a9;
  v171 = a8;
  v169 = v18;
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v167, (uint64_t)a3);
  v36 = (unint64_t)a3[1];
  *(_QWORD *)&v165[1] = 0;
  v166 = 0;
  if (v36)
  {
    if (v36 >> 61 || (v37 = malloc_type_malloc(8 * v36, 0x1E76AA36uLL)) == 0)
    {
      v147 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v148 = std::bad_alloc::bad_alloc(v147);
      __cxa_throw(v148, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    *(_QWORD *)&v165[1] = v37;
  }
  v38 = 0;
  v39 = 0;
  v166 = v36;
  v165[0] = 0;
  v40 = v18 * 0.0001;
  v41 = 1;
  v154 = v18 * 0.7;
  v155 = -(v18 * 0.7);
  v159 = 0u;
  v153 = -50.0;
  v42 = -25.0;
  v43 = 1;
  while (1)
  {
    if (v39)
    {
      v44 = v177;
      if (v174 >= v177)
        v45 = v177;
      else
        v45 = v174;
      if (v177 >= v174)
        v46 = v177;
      else
        v46 = v174;
      v47 = v171;
    }
    else
    {
      v44 = v177;
      v47 = v171;
      v46 = v171 + (v171 - v177) * 4.0;
      v45 = v177;
    }
    if (v47 < 0.000000001)
      v47 = 0.000000001;
    if (v47 > 25.0)
      v47 = 25.0;
    v160 = v47;
    v171 = v47;
    v48 = v46 - v45;
    if ((v43 & 1) == 0 || v39 && v48 <= 0.000000001)
    {
      v49 = (int *)global_logger();
      if (v49[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v49))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v50 = (file_logger *)global_logger();
        v51 = file_logger::start_stream(v50, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 431, 1);
        v52 = pthread_getspecific(*((_QWORD *)v51 + 74));
        if (v52 && *((_BYTE *)v52 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52 + 2, (uint64_t)"Warning:", 8);
        v53 = pthread_getspecific(*((_QWORD *)v51 + 74));
        if (v53 && *((_BYTE *)v53 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)" Unusual termination criterion reached.", 39);
        v54 = pthread_getspecific(*((_QWORD *)v51 + 74));
        if (v54 && *((_BYTE *)v54 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54 + 2, (uint64_t)"\nReturning the best step found so far.", 38);
        v55 = pthread_getspecific(*((_QWORD *)v51 + 74));
        if (v55 && *((_BYTE *)v55 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55 + 2, (uint64_t)" This typically happens when the number of features is much", 59);
        v56 = pthread_getspecific(*((_QWORD *)v51 + 74));
        if (v56 && *((_BYTE *)v56 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56 + 2, (uint64_t)" larger than the number of training samples. Consider pruning", 61);
        v57 = pthread_getspecific(*((_QWORD *)v51 + 74));
        if (v57 && *((_BYTE *)v57 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57 + 2, (uint64_t)" features manually or increasing the regularization value.", 58);
        v58 = pthread_getspecific(*((_QWORD *)v51 + 74));
        if (v58)
        {
          if (*((_BYTE *)v58 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(v58[2] - 24) + 16));
            v59 = std::locale::use_facet(&v181, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
            std::locale::~locale(&v181);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v51);
            if (*((_DWORD *)v51 + 150) == 7)
            {
              __print_back_trace();
              v149 = __cxa_allocate_exception(8uLL);
              *v149 = "LOG_FATAL encountered";
              __cxa_throw(v149, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
      v171 = v177;
      v160 = v177;
      v44 = v177;
    }
    if (v38 == a6)
    {
LABEL_151:
      v117 = 1;
      goto LABEL_212;
    }
    v60 = v178;
    v62 = (float64x2_t *)*a4;
    v61 = a4[1];
    if (a2[1] != (float64x2_t *)v61)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a2, v61, 1);
      v61 = (uint64_t)a2[1];
    }
    v63 = *a2;
    if (v61 >= 0)
      v64 = v61;
    else
      v64 = v61 + 1;
    v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
    if (v61 >= 2)
    {
      v66 = 0;
      v67 = *a2;
      v68 = v60;
      v69 = v62;
      do
      {
        v70 = *v68++;
        v71 = v70;
        v72 = *v69++;
        *v67++ = vaddq_f64(v71, vmulq_n_f64(v72, v160));
        v66 += 2;
      }
      while (v66 < v65);
    }
    v73 = __OFSUB__(v61, v65);
    v74 = v61 - v65;
    if (!((v74 < 0) ^ v73 | (v74 == 0)))
    {
      v75 = v64 >> 1;
      f64 = v62[v64 >> 1].f64;
      v77 = v60[v75].f64;
      v78 = v63[v75].f64;
      do
      {
        v79 = *f64++;
        v80 = v160 * v79;
        v81 = *v77++;
        *v78++ = v81 + v80;
        --v74;
      }
      while (v74);
    }
    (*(void (**)(uint64_t, float64x2_t **, void **, double *, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, &v167, &v170, 0, -1);
    *((_QWORD *)&v82 + 1) = *((_QWORD *)&v159 + 1);
    *(int32x2_t *)&v82 = vadd_s32(*(int32x2_t *)&v159, (int32x2_t)0x100000001);
    *(_DWORD *)(a7 + 12) = ++v38;
    v159 = v82;
    *(_QWORD *)(a7 + 16) = v82;
    if (*a5)
    {
      (*(void (**)(_QWORD, float64x2_t **, _BYTE *))(*(_QWORD *)*a5 + 24))(*a5, a2, &v165[1]);
      v83 = (*(double (**)(_QWORD, float64x2_t **))(*(_QWORD *)*a5 + 16))(*a5, a2);
      v170 = v83 + v170;
      v84 = *(_QWORD *)&v165[1];
      v85 = (char *)v167;
      v86 = v168;
      if (v168 >= 0)
        v87 = v168;
      else
        v87 = v168 + 1;
      v88 = v87 & 0xFFFFFFFFFFFFFFFELL;
      if (v168 >= 2)
      {
        v89 = 0;
        v90 = (float64x2_t *)v167;
        v91 = *(float64x2_t **)&v165[1];
        do
        {
          v92 = *v91++;
          *v90 = vaddq_f64(v92, *v90);
          ++v90;
          v89 += 2;
        }
        while (v89 < v88);
      }
      v108 = v86 <= v88;
      v93 = v86 - v88;
      if (!v108)
      {
        v94 = v87 >> 1;
        v95 = (double *)(v84 + 16 * v94);
        v96 = (double *)&v85[16 * v94];
        do
        {
          v97 = *v95++;
          *v96 = v97 + *v96;
          ++v96;
          --v93;
        }
        while (v93);
      }
    }
    if (a10 != 1.0)
    {
      v170 = v170 * a10;
      v98 = (char *)v167;
      v99 = v168;
      if (v168 >= 0)
        v100 = v168;
      else
        v100 = v168 + 1;
      v101 = v100 & 0xFFFFFFFFFFFFFFFELL;
      if (v168 >= 2)
      {
        v102 = 0;
        v103 = (float64x2_t *)v167;
        do
        {
          *v103 = vmulq_n_f64(*v103, a10);
          ++v103;
          v102 += 2;
        }
        while (v102 < v101);
      }
      v108 = v99 <= v101;
      v104 = v99 - v101;
      if (!v108)
      {
        v105 = (double *)&v98[16 * (v100 >> 1)];
        do
        {
          *v105 = *v105 * a10;
          ++v105;
          --v104;
        }
        while (v104);
      }
    }
    v179 = COERCE_DOUBLE(&v167);
    v180 = a4;
    if (a4[1])
    {
      v106 = *a4;
      v182 = v167;
      v183 = v106;
      v184 = &v179;
      v107 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v181);
    }
    else
    {
      v107 = 0.0;
    }
    v169 = v107;
    v44 = v171;
    if (v165[0])
      break;
    if ((v43 & 1) == 0)
      goto LABEL_152;
LABEL_122:
    v109 = a9 + v171 * v40;
    if (v171 >= 25.0 && v170 <= v109 && v107 <= v40)
    {
      v129 = (int *)global_logger();
      if (v129[169] > 4)
        goto LABEL_186;
      if (cppipc::must_cancel((cppipc *)v129))
        goto LABEL_219;
      v130 = (file_logger *)global_logger();
      v131 = file_logger::start_stream(v130, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 491, 1);
      v132 = pthread_getspecific(*((_QWORD *)v131 + 74));
      if (v132 && *((_BYTE *)v132 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132 + 2, (uint64_t)"Warning: Reached max step size.", 31);
      v133 = pthread_getspecific(*((_QWORD *)v131 + 74));
      if (!v133
        || !v133[280]
        || (std::ios_base::getloc((const std::ios_base *)&v133[*(_QWORD *)(*((_QWORD *)v133 + 2) - 24) + 16]),
            v134 = std::locale::use_facet(&v181, MEMORY[0x24BEDB350]),
            ((void (*)(const std::locale::facet *, uint64_t))v134->__vftable[2].~facet_0)(v134, 10),
            std::locale::~locale(&v181),
            std::ostream::put(),
            std::ostream::flush(),
            file_logger::stream_flush(v131),
            *((_DWORD *)v131 + 150) != 7))
      {
LABEL_186:
        v117 = 1;
        goto LABEL_211;
      }
      goto LABEL_221;
    }
    if (v171 <= 0.000000001 && (v170 > v109 || v107 >= v40))
    {
      v142 = (int *)global_logger();
      if (v142[169] > 4)
        goto LABEL_210;
      if (cppipc::must_cancel((cppipc *)v142))
LABEL_219:
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v143 = (file_logger *)global_logger();
      v120 = file_logger::start_stream(v143, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 500, 1);
      v144 = pthread_getspecific(*((_QWORD *)v120 + 74));
      if (v144 && *((_BYTE *)v144 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144 + 2, (uint64_t)"Error: Reached min step size.", 29);
      v145 = pthread_getspecific(*((_QWORD *)v120 + 74));
      if (v145 && *((_BYTE *)v145 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145 + 2, (uint64_t)" Cannot proceed anymore.", 24);
      v128 = pthread_getspecific(*((_QWORD *)v120 + 74));
      if (!v128 || !v128[280])
        goto LABEL_210;
LABEL_209:
      std::ios_base::getloc((const std::ios_base *)&v128[*(_QWORD *)(*((_QWORD *)v128 + 2) - 24) + 16]);
      v146 = std::locale::use_facet(&v181, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v146->__vftable[2].~facet_0)(v146, 10);
      std::locale::~locale(&v181);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(v120);
      if (*((_DWORD *)v120 + 150) != 7)
        goto LABEL_210;
LABEL_221:
      __print_back_trace();
      v150 = __cxa_allocate_exception(8uLL);
      *v150 = "LOG_FATAL encountered";
      __cxa_throw(v150, MEMORY[0x24BEDB718], 0);
    }
    if (v165[0] && v48 <= 0.000000001)
    {
      v135 = (int *)global_logger();
      if (v135[169] > 4)
        goto LABEL_198;
      if (cppipc::must_cancel((cppipc *)v135))
        goto LABEL_219;
      v136 = (file_logger *)global_logger();
      v137 = file_logger::start_stream(v136, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 512, 1);
      v138 = pthread_getspecific(*((_QWORD *)v137 + 74));
      if (v138 && *((_BYTE *)v138 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138 + 2, (uint64_t)"Error: \nInterval of uncertainty", 31);
      v139 = pthread_getspecific(*((_QWORD *)v137 + 74));
      if (v139 && *((_BYTE *)v139 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139 + 2, (uint64_t)"lower than step size limit.", 27);
      v140 = (char *)pthread_getspecific(*((_QWORD *)v137 + 74));
      if (!v140)
        goto LABEL_198;
      v117 = v140[280];
      if (!v117)
        goto LABEL_213;
      std::ios_base::getloc((const std::ios_base *)&v140[*(_QWORD *)(*((_QWORD *)v140 + 2) - 24) + 16]);
      v141 = std::locale::use_facet(&v181, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v141->__vftable[2].~facet_0)(v141, 10);
      std::locale::~locale(&v181);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(v137);
      if (*((_DWORD *)v137 + 150) != 7)
      {
LABEL_198:
        v117 = 0;
        goto LABEL_213;
      }
      goto LABEL_221;
    }
    v113 = fabs(v107);
    if (v170 <= v109 && v113 <= v155)
      goto LABEL_151;
    v41 &= v41 ^ 1 | (v107 < v154) | (v170 > v109);
    if ((v41 & 1) != 0 && v170 <= v176 && v170 > v109)
    {
      *(double *)&v181.__locale_ = v170 - v171 * v40;
      v179 = v176 - v177 * v40;
      v163 = v107 - v40;
      v164 = v173 - v174 * v40;
      v161 = v172 - v40;
      v162 = v175 - v40;
      v43 = turi::optimization::cstep((turi::optimization *)&v177, &v179, &v162, &v174, &v164, &v161, &v171, (double *)&v181, v45, v46, &v163, (double *)v165, v152);
      v115 = v42;
      v175 = v40 + v162;
      v176 = v179 + v177 * v40;
      v172 = v40 + v161;
      v173 = v164 + v174 * v40;
    }
    else
    {
      v43 = turi::optimization::cstep((turi::optimization *)&v177, &v176, &v175, &v174, &v173, &v172, &v171, &v170, v45, v46, &v169, (double *)v165, v152);
      v115 = v42;
    }
    v39 = v165[0];
    if (v165[0])
    {
      v42 = vabdd_f64(v174, v177);
      v39 = 1;
      v116 = v42 < v153 * 0.66;
      v153 = v115;
      if (!v116)
      {
        v171 = v177 + (v174 - v177) * 0.5;
        v153 = v115;
      }
    }
  }
  v108 = v171 > v45 && v171 < v46;
  if (v108 && ((v43 ^ 1) & 1) == 0)
    goto LABEL_122;
LABEL_152:
  v118 = (int *)global_logger();
  if (v118[169] > 4)
    goto LABEL_210;
  if (cppipc::must_cancel((cppipc *)v118))
    goto LABEL_219;
  v119 = (file_logger *)global_logger();
  v120 = file_logger::start_stream(v119, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 476, 1);
  v121 = pthread_getspecific(*((_QWORD *)v120 + 74));
  if (v121 && *((_BYTE *)v121 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121 + 2, (uint64_t)"Warning: Rounding errors", 24);
  v122 = pthread_getspecific(*((_QWORD *)v120 + 74));
  if (v122 && *((_BYTE *)v122 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122 + 2, (uint64_t)" prevent further progress. \nThere may not be a step which", 57);
  v123 = pthread_getspecific(*((_QWORD *)v120 + 74));
  if (v123 && *((_BYTE *)v123 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123 + 2, (uint64_t)" satisfies the sufficient decrease and curvature conditions.", 60);
  v124 = pthread_getspecific(*((_QWORD *)v120 + 74));
  if (v124 && *((_BYTE *)v124 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124 + 2, (uint64_t)" \nTolerances may be too small or dataset may be poorly scaled.", 62);
  v125 = pthread_getspecific(*((_QWORD *)v120 + 74));
  if (v125 && *((_BYTE *)v125 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125 + 2, (uint64_t)" This typically happens when the number of features is much", 59);
  v126 = pthread_getspecific(*((_QWORD *)v120 + 74));
  if (v126 && *((_BYTE *)v126 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126 + 2, (uint64_t)" larger than the number of training samples. Consider pruning", 61);
  v127 = pthread_getspecific(*((_QWORD *)v120 + 74));
  if (v127 && *((_BYTE *)v127 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127 + 2, (uint64_t)" features manually or increasing the regularization value.", 58);
  v128 = pthread_getspecific(*((_QWORD *)v120 + 74));
  if (v128 && v128[280])
    goto LABEL_209;
LABEL_210:
  v117 = 0;
LABEL_211:
  v44 = v171;
LABEL_212:
  *(double *)a7 = v44;
LABEL_213:
  *(_BYTE *)(a7 + 8) = v117;
  free(*(void **)&v165[1]);
  free(v167);
  free(v178);
}

void sub_218425DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30)
{
  uint64_t v30;

  std::locale::~locale((std::locale *)(v30 - 200));
  free(a28);
  free(a30);
  free(*(void **)(v30 - 240));
  _Unwind_Resume(a1);
}

void turi::optimization::iterative_optimization_solver::~iterative_optimization_solver(void **this)
{
  *this = &unk_24D940508;
  free(this[7]);
  free(this[5]);
  free(this[3]);
}

void turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"cols.size()", 11);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", "operator()", 387, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2184260B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::table_printer::print_row<std::string>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  const turi::flexible_type *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v39;
  std::string __p;
  unint64_t *v41;
  uint64_t *v42;
  void *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v39 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v46 = (uint64_t)(a1[1] - *a1) >> 5;
  if (v39 != v46)
  {
    v41 = &v39;
    v42 = &v46;
    turi::table_printer::print_row<turi::flexible_type>(std::vector<turi::flexible_type> const&)const::{lambda(void)#1}::operator()();
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v41);
  LOBYTE(v39) = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)&v39, 1);
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    do
    {
      turi::flexible_type::flexible_type<std::string>((uint64_t)&v46, (const std::string *)(v4 + 24 * v5));
      turi::table_printer::os_log_value((turi::table_printer *)v5, (char *)&v46, v6);
      switch(v47)
      {
        case 2:
          v7 = (unint64_t *)v46;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            v10 = v46;
            if (v46)
            {
              if (*(char *)(v46 + 31) < 0)
                operator delete(*(void **)(v46 + 8));
              v11 = v10;
              v12 = 0x1012C404EF22A49;
              goto LABEL_45;
            }
          }
          break;
        case 3:
          v24 = (unint64_t *)v46;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            v27 = v46;
            if (v46)
            {
              v28 = *(void **)(v46 + 8);
              if (v28)
              {
                *(_QWORD *)(v46 + 16) = v28;
                operator delete(v28);
              }
              v11 = v27;
              v12 = 0x1080C409938AC02;
              goto LABEL_45;
            }
          }
          break;
        case 4:
          v13 = (unint64_t *)v46;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v16 = v46;
            if (v46)
            {
              v39 = v46 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
              goto LABEL_38;
            }
          }
          break;
        case 5:
          v29 = (unint64_t *)v46;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v16 = v46;
            if (v46)
            {
              v39 = v46 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
LABEL_38:
              v11 = v16;
              v12 = 0x1020C405E66F15BLL;
              goto LABEL_45;
            }
          }
          break;
        case 8:
          v32 = (unint64_t *)v46;
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            v35 = v46;
            if (v46)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
              v11 = v35;
              v23 = -235920773;
              goto LABEL_44;
            }
          }
          break;
        case 9:
          v17 = (unint64_t *)v46;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = v46;
            if (v46)
            {
              v21 = *(void **)(v46 + 48);
              if (v21)
              {
                *(_QWORD *)(v46 + 56) = v21;
                operator delete(v21);
              }
              v22 = *(void **)(v20 + 24);
              if (v22)
              {
                *(_QWORD *)(v20 + 32) = v22;
                operator delete(v22);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v20 + 8);
              v11 = v20;
              v23 = 2071181815;
LABEL_44:
              v12 = v23 | 0x1030C4000000000;
LABEL_45:
              MEMORY[0x219A19A08](v11, v12);
            }
          }
          break;
        default:
          break;
      }
      v36 = *a2 + 24 * v5;
      v39 = (unint64_t)&unk_24D940538;
      if (*(char *)(v36 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v36, *(_QWORD *)(v36 + 8));
      }
      else
      {
        v37 = *(_OWORD *)v36;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
      }
      turi::table_internal::_print_string(&v41, *(_QWORD *)(*a1 + 32 * v5 + 24), (uint64_t)&__p);
      v39 = (unint64_t)&unk_24D940538;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v5;
      v4 = *a2;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  turi::table_printer::_p((uint64_t)a1);
  v41 = (unint64_t *)*MEMORY[0x24BEDB800];
  *(unint64_t **)((char *)&v41 + *(v41 - 3)) = *(unint64_t **)(MEMORY[0x24BEDB800] + 24);
  v42 = (uint64_t *)(MEMORY[0x24BEDB848] + 16);
  if (v44 < 0)
    operator delete(v43);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v45);
}

void sub_218426520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *turi::table_internal::table_printer_element<std::string,void>::print(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  return turi::table_internal::_print_string(a2, a3, a1 + 8);
}

std::string *turi::table_internal::table_printer_element<std::string,void>::get_value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;

  *(_QWORD *)(a2 + 5) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 12) = 2;
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (void **)(v4 + 8);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)v4 = 1;
  if (*(_QWORD *)v4 != 1)
  {
    v6 = (_QWORD *)operator new();
    *v6 = *(_QWORD *)v4;
    v7 = (std::string *)(v6 + 1);
    if (*(char *)(v4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6[3] = *(_QWORD *)(v4 + 24);
    }
    *(_QWORD *)a2 = v6;
    *v6 = 1;
    do
    {
      v8 = __ldaxr((unint64_t *)v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unint64_t *)v4));
    if (!v9)
    {
      if (*(char *)(v4 + 31) < 0)
        operator delete(*v5);
      MEMORY[0x219A19A08](v4, 0x1012C404EF22A49);
    }
  }
  return std::string::operator=((std::string *)(*(_QWORD *)a2 + 8), (const std::string *)(a1 + 8));
}

void sub_2184267B0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  MEMORY[0x219A19A08](v3, 0x1012C404EF22A49);
  do
  {
    v5 = __ldaxr(v2);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v2));
  if (!v6)
  {
    v7 = *v1;
    if (*v1)
    {
      if (*(char *)(v7 + 31) < 0)
        operator delete(*(void **)(v7 + 8));
      MEMORY[0x219A19A08](v7, 0x1012C404EF22A49);
    }
    *v1 = 0;
  }
  *v1 = 0;
  *((_DWORD *)v1 + 2) = 0;
  *((_BYTE *)v1 + 12) = 0;
  _Unwind_Resume(a1);
}

void sub_218426B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::optimization::_solver_return::~_solver_return(void **this)
{
  turi::sframe::~sframe((turi::sframe *)(this + 13));
  free(this[6]);
  free(this[4]);
  free(this[2]);
}

_QWORD *Eigen::DenseStorage<double,-1,-1,-1,0>::DenseStorage(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 * v4;
  if (v5 * v4)
  {
    if (v6 >> 61 || (v7 = malloc_type_malloc(8 * v6, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v7 = 0;
  }
  *a1 = v7;
  a1[1] = v4;
  a1[2] = v5;
  v8 = *(_QWORD *)(a2 + 16) * *(_QWORD *)(a2 + 8);
  if (v8)
    memcpy(v7, *(const void **)a2, 8 * v8);
  return a1;
}

_QWORD *Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  std::bad_alloc *exception;
  std::bad_alloc *v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (v4 >> 61 || (v5 = malloc_type_malloc(8 * v4, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v9 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v9, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v4 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  a1[1] = v4;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    memcpy(v5, *(const void **)a2, 8 * v6);
  return a1;
}

uint64_t Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  int64_t v5;
  float64x2_t v6;
  int64_t v7;
  float64x2_t v8;
  float64x2_t *v9;
  uint64_t v10;
  float64x2_t v11;
  double v12;
  BOOL v13;
  uint64_t v14;
  double *f64;
  double v16;
  double v17;

  v1 = *(_QWORD *)(**(_QWORD **)(result + 24) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(**(_QWORD **)(result + 24) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(**(_QWORD **)(result + 24) + 8);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(result + 8);
  if ((unint64_t)(v1 + 1) >= 3)
  {
    v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
    v6 = vabsq_f64(*v4);
    if (v1 >= 4)
    {
      v7 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = vabsq_f64(v4[1]);
      if ((unint64_t)v1 >= 8)
      {
        v9 = v4 + 3;
        v10 = 4;
        do
        {
          v6 = vmaxq_f64(v6, vabsq_f64(v9[-1]));
          v11 = *v9;
          v9 += 2;
          v8 = vmaxq_f64(v8, vabsq_f64(v11));
          v10 += 4;
        }
        while (v10 < v7);
      }
      v6 = vmaxq_f64(v6, v8);
      if (v5 > v7)
        v6 = vmaxq_f64(v6, vabsq_f64(*(float64x2_t *)((char *)v4 + 8 * v7)));
    }
    *(_QWORD *)&v12 = *(_OWORD *)&vpmaxq_f64(v6, v6);
    v13 = v1 <= v5;
    v14 = v1 - v5;
    if (!v13)
    {
      f64 = v4[v3 >> 1].f64;
      do
      {
        v16 = *f64++;
        v17 = fabs(v16);
        if (v12 < v17)
          v12 = v17;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t turi::optimization::cstep(turi::optimization *this, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double a9, double a10, double *a11, double *a12, BOOL *a13)
{
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  BOOL v35;
  double v36;
  double v37;
  int v38;
  int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  _BOOL4 v65;

  v13 = *a7;
  v14 = *(double *)this;
  if (!*(_BYTE *)a12)
    goto LABEL_9;
  v15 = *a4;
  v16 = *a4 >= v14 ? *(double *)this : *a4;
  if (v13 <= v16)
    return 0;
  if (v14 >= v15)
    v15 = *(double *)this;
  if (v13 >= v15)
    return 0;
LABEL_9:
  v17 = 0;
  if (a10 >= a9)
  {
    v18 = *a3;
    v19 = v13 - v14;
    if (*a3 * (v13 - v14) < 0.000000001)
    {
      v20 = *a11;
      v21 = fabs(v18);
      v22 = *a8;
      v23 = *a2;
      if (*a8 <= *a2)
      {
        v40 = v18 / v21 * v20;
        if (v40 <= 0.0)
        {
          v39 = 0;
          v38 = 1;
          *(_BYTE *)a12 = 1;
          v47 = v20 + v18 + (v23 - v22) * 3.0 / v19;
          v48 = fabs(v47);
          v49 = fabs(v20);
          if (v21 < v49)
            v21 = v49;
          if (v48 >= v21)
            v21 = v48;
          v50 = v21 * sqrt(v47 / v21 * (v47 / v21) + -v18 / v21 * (v20 / v21));
          v51 = -v50;
          if (v13 <= v14)
            v51 = v50;
          v37 = v13 + (v47 + v51 - v20) / (v18 + v51 + v51 - v20) * (v14 - v13);
          v52 = v13 + v20 / (v20 - v18) * (v14 - v13);
          if (vabdd_f64(v37, v13) <= vabdd_f64(v52, v13))
            v37 = v52;
        }
        else
        {
          v41 = fabs(v20);
          if (v41 >= v21)
          {
            if (*(_BYTE *)a12)
            {
              v39 = 0;
              v53 = *a4 - v13;
              v54 = (v22 - *a5) * 3.0 / v53;
              v55 = *a6;
              v56 = v20 + *a6 + v54;
              v57 = fabs(v56);
              v58 = fabs(*a6);
              if (v58 >= v41)
                v41 = v58;
              if (v57 < v41)
                v57 = v41;
              v59 = v57 * sqrt(v56 / v57 * (v56 / v57) + -v55 / v57 * (v20 / v57));
              if (v13 <= *a4)
                v60 = v59;
              else
                v60 = -v59;
              v37 = v13 + (v56 + v60 - v20) / (v55 + v60 + v60 - v20) * v53;
              v38 = 1;
            }
            else
            {
              v38 = 0;
              v39 = 0;
              if (v13 <= v14)
                v37 = a9;
              else
                v37 = a10;
            }
          }
          else
          {
            v42 = v20 + v18 + (v23 - v22) * 3.0 / v19;
            v43 = fabs(v42);
            if (v21 < v41)
              v21 = v41;
            if (v43 >= v21)
              v21 = v43;
            v44 = v21 * sqrt(fmax(v42 / v21 * (v42 / v21) + -v18 / v21 * (v20 / v21), 0.0));
            v45 = -v44;
            if (v13 <= v14)
              v45 = v44;
            if (fabs(v44) > 1.0e-10 || (v46 = (v42 + v45 - v20) / (v45 + v18 - v20 + v45), v46 >= 0.0))
            {
              v37 = a10;
              if (v13 <= v14)
                v37 = a9;
            }
            else
            {
              v37 = v13 + v46 * (v14 - v13);
            }
            v61 = v13 + v20 / (v20 - v18) * (v14 - v13);
            v62 = vabdd_f64(v13, v37);
            v63 = vabdd_f64(v13, v61);
            if (*(_BYTE *)a12)
            {
              v38 = 1;
              if (v62 >= v63)
                v37 = v61;
              v39 = 1;
            }
            else
            {
              v38 = 0;
              v39 = 1;
              if (v62 <= v63)
                v37 = v61;
            }
          }
        }
        if (v40 < 0.0)
        {
          *a4 = v14;
          *a5 = *a2;
          *a6 = *a3;
          v13 = *a7;
        }
        *(double *)this = v13;
      }
      else
      {
        v24 = v23 - v22;
        v25 = v20 + v18 + (v23 - v22) * 3.0 / v19;
        v26 = fabs(v25);
        v27 = fabs(v20);
        if (v21 < v27)
          v21 = v27;
        if (v26 >= v21)
          v21 = v26;
        v28 = v21 * sqrt(v25 / v21 * (v25 / v21) + -v18 / v21 * (v20 / v21));
        v29 = -v28;
        if (v13 >= v14)
          v29 = v28;
        v30 = v14 + (v25 + v29 - v18) / (v20 + v29 + v29 - v18) * v19;
        v31 = v14 + v18 / (v18 + v24 / v19) * 0.5 * v19;
        v32 = vabdd_f64(v30, v14);
        v33 = vabdd_f64(v31, v14);
        v34 = (v31 - v30) * 0.5;
        v35 = v32 < v33;
        v36 = -0.0;
        if (!v35)
          v36 = v34;
        v37 = v30 + v36;
        v38 = 1;
        *(_BYTE *)a12 = 1;
        *a4 = v13;
        a2 = a5;
        a3 = a6;
        v39 = 1;
      }
      *a2 = *a8;
      *a3 = *a11;
      if (v37 < a10)
        a10 = v37;
      if (a10 > a9)
        a9 = a10;
      *a7 = a9;
      v17 = 1;
      if (v39 && v38)
      {
        v64 = *(double *)this + (*a4 - *(double *)this) * 0.66;
        v65 = a9 < v64;
        if (*a4 <= *(double *)this)
          v65 = v64 < a9;
        if (!v65)
          a9 = *(double *)this + (*a4 - *(double *)this) * 0.66;
        *a7 = a9;
        return 1;
      }
    }
  }
  return v17;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t *v7;
  float64x2_t v8;
  int64_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  double v22;
  double v23;
  double v24;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0] * **(double **)(a1 + 24);
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(float64x2_t **)(a1 + 24);
  v8 = vmulq_f64(*v4, *v7);
  if (v1 >= 4)
  {
    v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = vmulq_f64(v4[1], v7[1]);
    if ((unint64_t)v1 >= 8)
    {
      v11 = v7 + 3;
      v12 = v4 + 3;
      v13 = 4;
      do
      {
        v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        v14 = *v12;
        v12 += 2;
        v15 = v14;
        v16 = *v11;
        v11 += 2;
        v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    v8 = vaddq_f64(v10, v8);
    if (v6 > v9)
      v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9)));
  }
  result = vaddvq_f64(v8);
  v17 = v1 <= v6;
  v18 = v1 - v6;
  if (!v17)
  {
    v19 = v3 >> 1;
    f64 = v4[v19].f64;
    v21 = v7[v19].f64;
    do
    {
      v22 = *f64++;
      v23 = v22;
      v24 = *v21++;
      result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t *v7;
  float64x2_t v8;
  int64_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  double v22;
  double v23;
  double v24;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 8);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0] * **(double **)(a1 + 32);
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(float64x2_t **)(a1 + 32);
  v8 = vmulq_f64(*v4, *v7);
  if (v1 >= 4)
  {
    v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = vmulq_f64(v4[1], v7[1]);
    if ((unint64_t)v1 >= 8)
    {
      v11 = v7 + 3;
      v12 = v4 + 3;
      v13 = 4;
      do
      {
        v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        v14 = *v12;
        v12 += 2;
        v15 = v14;
        v16 = *v11;
        v11 += 2;
        v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    v8 = vaddq_f64(v10, v8);
    if (v6 > v9)
      v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9)));
  }
  result = vaddvq_f64(v8);
  v17 = v1 <= v6;
  v18 = v1 - v6;
  if (!v17)
  {
    v19 = v3 >> 1;
    f64 = v4[v19].f64;
    v21 = v7[v19].f64;
    do
    {
      v22 = *f64++;
      v23 = v22;
      v24 = *v21++;
      result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t v7;
  int64_t v8;
  float64x2_t v9;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t v12;
  BOOL v13;
  uint64_t v14;
  double *f64;
  double v16;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0] * v4->f64[0];
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = vmulq_f64(*v4, *v4);
  if (v1 >= 4)
  {
    v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v9 = vmulq_f64(v4[1], v4[1]);
    if ((unint64_t)v1 >= 8)
    {
      v10 = v4 + 3;
      v11 = 4;
      do
      {
        v7 = vaddq_f64(v7, vmulq_f64(v10[-1], v10[-1]));
        v12 = *v10;
        v10 += 2;
        v9 = vaddq_f64(v9, vmulq_f64(v12, v12));
        v11 += 4;
      }
      while (v11 < v8);
    }
    v7 = vaddq_f64(v9, v7);
    if (v6 > v8)
      v7 = vaddq_f64(v7, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v8), *(float64x2_t *)((char *)v4 + 8 * v8)));
  }
  result = vaddvq_f64(v7);
  v13 = v1 <= v6;
  v14 = v1 - v6;
  if (!v13)
  {
    f64 = v4[v3 >> 1].f64;
    do
    {
      v16 = *f64++;
      result = result + v16 * v16;
      --v14;
    }
    while (v14);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t v7;
  int64_t v8;
  float64x2_t v9;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t v12;
  BOOL v13;
  uint64_t v14;
  double *f64;
  double v16;

  v1 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0] * v4->f64[0];
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = vmulq_f64(*v4, *v4);
  if (v1 >= 4)
  {
    v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v9 = vmulq_f64(v4[1], v4[1]);
    if ((unint64_t)v1 >= 8)
    {
      v10 = v4 + 3;
      v11 = 4;
      do
      {
        v7 = vaddq_f64(v7, vmulq_f64(v10[-1], v10[-1]));
        v12 = *v10;
        v10 += 2;
        v9 = vaddq_f64(v9, vmulq_f64(v12, v12));
        v11 += 4;
      }
      while (v11 < v8);
    }
    v7 = vaddq_f64(v9, v7);
    if (v6 > v8)
      v7 = vaddq_f64(v7, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v8), *(float64x2_t *)((char *)v4 + 8 * v8)));
  }
  result = vaddvq_f64(v7);
  v13 = v1 <= v6;
  v14 = v1 - v6;
  if (!v13)
  {
    f64 = v4[v3 >> 1].f64;
    do
    {
      v16 = *f64++;
      result = result + v16 * v16;
      --v14;
    }
    while (v14);
  }
  return result;
}

void __cxx_global_var_init_21_2()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_lbfgs_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_21842793C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void CoreML::validate<(MLModelType)606>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const CoreML::Specification::ModelDescription *v4;
  _BOOL8 v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  int v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string v25;
  std::string v26;
  _BYTE v27[24];
  uint64_t v28;
  uint64_t v29;
  __int128 __p;
  uint64_t v31;
  _BYTE v32[16];
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(const CoreML::Specification::ModelDescription **)(a1 + 16);
  else
    v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v32, v4);
  CoreML::Result::Result((CoreML::Result *)&v29);
  CoreML::validateModelDescription((CoreML *)v32, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)v27);
  v29 = *(_QWORD *)v27;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v27[8];
  v31 = v28;
  v5 = CoreML::Result::good((CoreML::Result *)&v29);
  if (!v5)
    goto LABEL_44;
  if (*(_DWORD *)(a1 + 44) == 606)
  {
    v6 = *(uint64_t **)(a1 + 32);
    v7 = *((_DWORD *)v6 + 9);
  }
  else
  {
    v8 = CoreML::Specification::CategoricalMapping::default_instance((CoreML::Specification::CategoricalMapping *)v5);
    v7 = *((_DWORD *)v8 + 9);
    if (*(_DWORD *)(a1 + 44) == 606)
      v6 = *(uint64_t **)(a1 + 32);
    else
      v6 = CoreML::Specification::CategoricalMapping::default_instance((CoreML::Specification::CategoricalMapping *)v8);
  }
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "Mapping not set.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_20;
  }
  v9 = *((_DWORD *)v6 + 10);
  if (v7 == 1)
  {
    if (v9 == 101)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ValueOnUnknown set to string value while mapping produces int64.");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_20;
    }
    v12 = 1;
    v11 = 3;
  }
  else if (v7 == 2)
  {
    if (v9 == 102)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ValueOnUnknown set to Int64 value while mapping produces string.");
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_20:
      if ((v27[23] & 0x80000000) == 0)
        goto LABEL_45;
      v10 = *(void **)v27;
      goto LABEL_22;
    }
    v12 = 3;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = operator new(8uLL);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  *v13 = v11 | 0x700000000;
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)(v13 + 1);
  v26.__r_.__value_.__r.__words[2] = (std::string::size_type)(v13 + 1);
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v33, 1, (int **)&v26, (uint64_t)v27);
  v29 = *(_QWORD *)v27;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v27[8];
  v31 = v28;
  HIBYTE(v28) = 0;
  v27[8] = 0;
  if (v26.__r_.__value_.__r.__words[0])
  {
    v26.__r_.__value_.__l.__size_ = v26.__r_.__value_.__r.__words[0];
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v29))
    goto LABEL_44;
  v14 = operator new(8uLL);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  *v14 = v12 | 0x700000000;
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)(v14 + 1);
  v26.__r_.__value_.__r.__words[2] = (std::string::size_type)(v14 + 1);
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v34, 1, (int **)&v26, (uint64_t)v27);
  v29 = *(_QWORD *)v27;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v27[8];
  v31 = v28;
  HIBYTE(v28) = 0;
  v27[8] = 0;
  if (v26.__r_.__value_.__r.__words[0])
  {
    v26.__r_.__value_.__l.__size_ = v26.__r_.__value_.__r.__words[0];
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v29))
    goto LABEL_44;
  v15 = *(uint64_t **)(*(_QWORD *)(v33[2] + 8) + 32);
  v16 = &CoreML::Specification::_FeatureType_default_instance_;
  if (!v15)
    v15 = &CoreML::Specification::_FeatureType_default_instance_;
  if (*((_DWORD *)v15 + 9) != 7)
    goto LABEL_44;
  if (*(_DWORD *)(v15[3] + 36) == v11)
  {
    if (*(_QWORD *)(*(_QWORD *)(v35 + 8) + 32))
      v16 = *(uint64_t **)(*(_QWORD *)(v35 + 8) + 32);
    if (*((_DWORD *)v16 + 9) != 7)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "Output of a sequence categorical mapping must be a sequence");
      CoreML::Result::Result((_DWORD *)a2, 8);
      goto LABEL_20;
    }
    if (*(_DWORD *)(v16[3] + 36) == v12)
    {
LABEL_44:
      *(_QWORD *)a2 = v29;
      *(_OWORD *)(a2 + 8) = __p;
      *(_QWORD *)(a2 + 24) = v31;
      __p = 0uLL;
      v31 = 0;
      goto LABEL_45;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Output sequence type does not match input type ");
    v21 = std::string::append(&v25, off_24D940560[v12]);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v26, "of categorical mapping.");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(_QWORD *)&v27[16] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)v27 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a2, 8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Input sequence type does not match input type ");
    v17 = std::string::append(&v25, off_24D940560[v11]);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v26, "of categorical mapping.");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)&v27[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)v27 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a2, 8);
  }
  if ((v27[23] & 0x80000000) != 0)
    operator delete(*(void **)v27);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = (void *)v25.__r_.__value_.__r.__words[0];
LABEL_22:
    operator delete(v10);
  }
LABEL_45:
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)v32);
}

void sub_218427E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a37 < 0)
    operator delete(a32);
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)&a38);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_CategoricalMappingValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::optimization::first_order_opt_interface::compute_gradient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, &v4, 0, -1);
}

double turi::optimization::first_order_opt_interface::compute_function_value(uint64_t a1, uint64_t a2)
{
  double v4;
  void *v6[2];
  double v7;

  v7 = 0.0;
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v6, a2);
  (*(void (**)(uint64_t, uint64_t, void **, double *, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, v6, &v7, 0, -1);
  v4 = v7;
  free(v6[0]);
  return v4;
}

void sub_218428050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void turi::optimization::first_order_opt_interface::get_status_header(__int128 **a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  std::string __p;
  uint64_t v21;
  _QWORD v22[5];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
      }
      else
      {
        v6 = *v2;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      v21 = 8;
      v7 = a2[1];
      v8 = a2[2];
      if (v7 >= v8)
      {
        v10 = (uint64_t)(v7 - *a2) >> 5;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v12 = v8 - *a2;
        if (v12 >> 4 > v11)
          v11 = v12 >> 4;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
          v13 = 0x7FFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        v22[4] = v5;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v5, v13);
        v15 = &v14[32 * v10];
        v22[0] = v14;
        v22[1] = v15;
        v22[3] = &v14[32 * v16];
        v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v15 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v15 = v17;
        memset(&__p, 0, sizeof(__p));
        *((_QWORD *)v15 + 3) = v21;
        v22[2] = v15 + 32;
        std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(a2, v22);
        v18 = a2[1];
        std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)v22);
        v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a2[1] = v18;
        if (v19 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v7 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v7 = v9;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)(v7 + 24) = v21;
        a2[1] = v7 + 32;
      }
      v2 = (__int128 *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
}

void sub_2184281E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::string *turi::optimization::first_order_opt_interface::get_status@<X0>(__int128 **a1@<X2>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
}

void turi::optimization::second_order_opt_interface::compute_hessian(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7[2];

  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v7, a2);
  v6 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 80))(a1, a2, a3, v7, &v6);
  free(v7[0]);
}

void sub_2184282B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  free(a11);
  _Unwind_Resume(a1);
}

void sub_218428468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_11_4()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_optimization_interface_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_21842885C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

double CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v5;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/DataStructures.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v5);
  qword_254FFACC8 = 0;
  unk_254FFACD0 = 0;
  qword_254FFACC0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FFACD8 = 0;
  CoreML::Specification::_StringToInt64Map_MapEntry_default_instance_ = (uint64_t)&unk_24D940D48;
  qword_254FFACB8 = 0;
  byte_254FFACE0 = 1;
  *((_BYTE *)CoreML::Specification::StringToInt64Map::StringToInt64Map((CoreML::Specification::StringToInt64Map *)&CoreML::Specification::_StringToInt64Map_default_instance_)
  + 56) = 1;
  qword_254FFAD40 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFAD48 = 0;
  qword_254FFAD38 = 0;
  dword_254FFAD50 = 0;
  CoreML::Specification::_Int64ToStringMap_MapEntry_default_instance_ = (uint64_t)&unk_24D940EC8;
  qword_254FFAD30 = 0;
  byte_254FFAD58 = 1;
  *((_BYTE *)CoreML::Specification::Int64ToStringMap::Int64ToStringMap((CoreML::Specification::Int64ToStringMap *)&CoreML::Specification::_Int64ToStringMap_default_instance_)
  + 56) = 1;
  qword_254FFADB8 = 0;
  unk_254FFADC0 = 0;
  qword_254FFADB0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FFADC8 = 0;
  CoreML::Specification::_StringToDoubleMap_MapEntry_default_instance_ = (uint64_t)&unk_24D941048;
  qword_254FFADA8 = 0;
  byte_254FFADD0 = 1;
  *((_BYTE *)CoreML::Specification::StringToDoubleMap::StringToDoubleMap((CoreML::Specification::StringToDoubleMap *)&CoreML::Specification::_StringToDoubleMap_default_instance_)
  + 56) = 1;
  *(_OWORD *)&qword_254FFAE20 = 0u;
  *(_OWORD *)&algn_254FFAE28[8] = 0u;
  dword_254FFAE40 = 0;
  CoreML::Specification::_Int64ToDoubleMap_MapEntry_default_instance_ = (uint64_t)&unk_24D9411C8;
  byte_254FFAE48 = 1;
  *((_BYTE *)CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap((CoreML::Specification::Int64ToDoubleMap *)&CoreML::Specification::_Int64ToDoubleMap_default_instance_)
  + 56) = 1;
  CoreML::Specification::_StringVector_default_instance_ = (uint64_t)&off_24D940818;
  result = 0.0;
  unk_254FFAE98 = 0u;
  unk_254FFAEA8 = 0u;
  dword_254FFAEB8 = 0;
  byte_254FFAEC0 = 1;
  CoreML::Specification::_Int64Vector_default_instance_ = (uint64_t)&off_24D9408B0;
  unk_254FFAED0 = 0;
  qword_254FFAED8 = 0;
  unk_254FFAEE0 = 0;
  dword_254FFAEEC = 0;
  byte_254FFAEF0 = 1;
  CoreML::Specification::_FloatVector_default_instance_ = (uint64_t)&off_24D940948;
  unk_254FFAF00 = 0;
  qword_254FFAF08 = 0;
  unk_254FFAF10 = 0;
  dword_254FFAF1C = 0;
  byte_254FFAF20 = 1;
  CoreML::Specification::_DoubleVector_default_instance_ = (uint64_t)&off_24D9409E0;
  unk_254FFAF30 = 0;
  qword_254FFAF38 = 0;
  unk_254FFAF40 = 0;
  dword_254FFAF4C = 0;
  byte_254FFAF50 = 1;
  dword_254FFAF78 = 0;
  CoreML::Specification::_Int64Range_default_instance_ = (uint64_t)&off_24D940A78;
  unk_254FFAF60 = 0;
  qword_254FFAF68 = 0;
  unk_254FFAF70 = 0;
  byte_254FFAF80 = 1;
  CoreML::Specification::_Int64Set_default_instance_ = (uint64_t)&off_24D940B10;
  unk_254FFAF90 = 0;
  qword_254FFAF98 = 0;
  unk_254FFAFA0 = 0;
  dword_254FFAFAC = 0;
  byte_254FFAFB0 = 1;
  CoreML::Specification::_DoubleRange_default_instance_ = (uint64_t)&off_24D940BA8;
  unk_254FFAFC0 = 0;
  dword_254FFAFD8 = 0;
  qword_254FFAFC8 = 0;
  unk_254FFAFD0 = 0;
  byte_254FFAFE0 = 1;
  qword_254FFACB8 = (uint64_t)&CoreML::Specification::_StringToInt64Map_MapEntry_default_instance_;
  qword_254FFAD30 = (uint64_t)&CoreML::Specification::_Int64ToStringMap_MapEntry_default_instance_;
  qword_254FFADA8 = (uint64_t)&CoreML::Specification::_StringToDoubleMap_MapEntry_default_instance_;
  qword_254FFAE20 = (uint64_t)&CoreML::Specification::_Int64ToDoubleMap_MapEntry_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(CoreML::Specification::protobuf_DataStructures_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_218428BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::StringToInt64Map *CoreML::Specification::StringToInt64Map::StringToInt64Map(CoreML::Specification::StringToInt64Map *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D9405B8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (CoreML::Specification::protobuf_DataStructures_2eproto *)_tc_google::protobuf::Map<std::string,long long>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::StringToInt64Map *)&CoreML::Specification::_StringToInt64Map_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v2);
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_218428C3C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::Map<std::string,long long>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type v7;
  _QWORD v8[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v8);
  v4 = v8[0];
  if (v8[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(_QWORD *)(v4 + 24);
      v7 = *(_QWORD *)(v6 + 24);
      _tc_google::protobuf::Map<std::string,long long>::operator[](v5, v6)->__r_.__value_.__r.__words[0] = v7;
      result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v8);
      v4 = v8[0];
    }
    while (v8[0]);
  }
  return result;
}

void CoreML::Specification::StringToInt64Map::~StringToInt64Map(CoreML::Specification::StringToInt64Map *this)
{
  *(_QWORD *)this = &off_24D9405B8;
  _tc_google::protobuf::Map<std::string,long long>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D9405B8;
  _tc_google::protobuf::Map<std::string,long long>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

void *CoreML::Specification::StringToInt64Map::default_instance(CoreML::Specification::StringToInt64Map *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_StringToInt64Map_default_instance_;
}

CoreML::Specification::StringToInt64Map *CoreML::Specification::StringToInt64Map::New(CoreML::Specification::StringToInt64Map *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::StringToInt64Map *v3;

  v3 = (CoreML::Specification::StringToInt64Map *)operator new();
  CoreML::Specification::StringToInt64Map::StringToInt64Map(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::StringToInt64Map>(a2, v3);
  return v3;
}

void sub_218428DB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::StringToInt64Map>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToInt64Map>);
  return result;
}

double CoreML::Specification::StringToInt64Map::Clear(CoreML::Specification::StringToInt64Map *this)
{
  return _tc_google::protobuf::Map<std::string,long long>::clear((uint64_t)this + 24);
}

uint64_t CoreML::Specification::StringToInt64Map::MergePartialFromCodedStream(CoreML::Specification::StringToInt64Map *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int v12;
  char *v13;
  int VarintSizeAsIntFallback;
  unint64_t v15;
  int v16;
  _tc_google::protobuf::internal *p_p;
  unint64_t v18;
  _BOOL4 v19;
  BOOL v20;
  _QWORD v22[2];
  void *__p;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = (char *)this + 16;
  v5 = (char *)this + 24;
  while (1)
  {
    v6 = *a2;
    if (*a2 >= a2[1])
    {
      v7 = 0;
    }
    else
    {
      v7 = *v6;
      if (*v6 >= 1)
      {
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_12;
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v22[0] = v4;
      v22[1] = v5;
      v24 = 0;
      v25 = 0;
      __p = 0;
      v26 = 0;
      v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) == 0)
          goto LABEL_24;
      }
      else
      {
        VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
LABEL_24:
        v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        v16 = v15;
        if ((v15 & 0x8000000000000000) == 0
          && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::MergePartialFromCodedStream((uint64_t)v22, (_tc_google::protobuf::io::CodedInputStream *)a2)&& _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          if (v25 >= 0)
            p_p = (_tc_google::protobuf::internal *)&__p;
          else
            p_p = (_tc_google::protobuf::internal *)__p;
          if (v25 >= 0)
            v18 = HIBYTE(v25);
          else
            v18 = v24;
          v19 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v18, 0, (uint64_t)"CoreML.Specification.StringToInt64Map.MapEntry.key");
          v20 = v19;
          if (v19)
            v12 = 0;
          else
            v12 = 6;
LABEL_36:
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          if (SHIBYTE(v25) < 0)
            operator delete(__p);
          if (!v20)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
      v20 = 0;
      v12 = 6;
      goto LABEL_36;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3))return 0;
LABEL_17:
    v12 = 0;
LABEL_18:
    if (v12)
      return 0;
  }
}

void sub_218428FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::StringToInt64Map::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _tc_google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  const char *v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _tc_google::protobuf::io::CodedOutputStream *v20;
  uint64_t v21;
  _tc_google::protobuf::internal *v22;
  const char *v23;
  _QWORD v24[3];

  v2 = **(_QWORD **)(this + 40);
  if (!v2)
    return this;
  v4 = this;
  v5 = this + 24;
  if (*((_BYTE *)a2 + 26))
  {
    if (v2 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_24:
      v13 = operator new[]();
      _tc_google::protobuf::Map<std::string,std::string>::begin(v5, v24);
      v14 = v24[0];
      if (v24[0])
      {
        v15 = 0;
        do
        {
          *(_QWORD *)(v13 + 8 * v15) = *(_QWORD *)(v14 + 24);
          _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v24);
          ++v15;
          v14 = v24[0];
        }
        while (v24[0]);
      }
      else
      {
        v15 = 0;
      }
      v16 = 126 - 2 * __clz(v15);
      if (v15)
        v17 = v16;
      else
        v17 = 0;
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**,false>(v13, (const void ***)(v13 + 8 * v15), (uint64_t)v24, v17, 1);
      if (v15)
      {
        v18 = 0;
        v19 = (uint64_t *)v13;
        do
        {
          v21 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(*v19, *v19 + 24, *(_tc_google::protobuf::Arena **)(v4 + 16));
          if (v18 != v21)
          {
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            v18 = v21;
          }
          _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v18, a2, v20);
          v22 = (_tc_google::protobuf::internal *)*v19;
          if (*(char *)(*v19 + 23) < 0)
          {
            v22 = *(_tc_google::protobuf::internal **)v22;
            v23 = *(const char **)(*v19 + 8);
          }
          else
          {
            v23 = (const char *)*(unsigned __int8 *)(*v19 + 23);
          }
          _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v22, v23, 1, (uint64_t)"CoreML.Specification.StringToInt64Map.MapEntry.key");
          ++v19;
          --v15;
        }
        while (v15);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      return MEMORY[0x219A199F0](v13, 0x60C8044C4A2DFLL);
    }
  }
  else if (v2 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_24;
  }
  this = _tc_google::protobuf::Map<std::string,std::string>::begin(this + 24, v24);
  v7 = 0;
  while (v24[0])
  {
    v9 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(*(_QWORD *)(v24[0] + 24), *(_QWORD *)(v24[0] + 24) + 24, *(_tc_google::protobuf::Arena **)(v4 + 16));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v7, a2, v8);
    v10 = *(unsigned __int8 **)(v24[0] + 24);
    if ((char)v10[23] < 0)
    {
      v10 = *(unsigned __int8 **)v10;
      v11 = *(const char **)(*(_QWORD *)(v24[0] + 24) + 8);
    }
    else
    {
      v11 = (const char *)v10[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v10, v11, 1, (uint64_t)"CoreML.Specification.StringToInt64Map.MapEntry.key");
    this = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v24);
  }
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return this;
}

void sub_218429268(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringToInt64Map::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[3];

  v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v7);
  v3 = 0;
  while (v7[0])
  {
    v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(*(_QWORD *)(v7[0] + 24), *(_QWORD *)(v7[0] + 24) + 24, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v3 = (_DWORD *)v4;
    }
    v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v7);
  }
  if (v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  *((_DWORD *)this + 12) = v2;
  return v2;
}

void sub_21842939C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::StringToInt64Map::MergeFrom(CoreML::Specification::StringToInt64Map *this, const CoreML::Specification::StringToInt64Map *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  return _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t CoreML::Specification::StringToInt64Map::IsInitialized(CoreML::Specification::StringToInt64Map *this)
{
  return 1;
}

_QWORD *CoreML::Specification::StringToInt64Map::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringToInt64Map");
}

CoreML::Specification::Int64ToStringMap *CoreML::Specification::Int64ToStringMap::Int64ToStringMap(CoreML::Specification::Int64ToStringMap *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D940650;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (CoreML::Specification::protobuf_DataStructures_2eproto *)_tc_google::protobuf::Map<long long,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Int64ToStringMap *)&CoreML::Specification::_Int64ToStringMap_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v2);
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_218429484(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::Map<long long,std::string>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  const std::string *v7;
  std::string *v8;
  _QWORD v9[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v9);
  v4 = v9[0];
  if (v9[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(uint64_t **)(v4 + 8);
      v7 = (const std::string *)(v6 + 1);
      v8 = (std::string *)_tc_google::protobuf::Map<long long,std::string>::operator[](v5, v6);
      std::string::operator=(v8, v7);
      result = (uint64_t)_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v9);
      v4 = v9[0];
    }
    while (v9[0]);
  }
  return result;
}

void CoreML::Specification::Int64ToStringMap::~Int64ToStringMap(CoreML::Specification::Int64ToStringMap *this)
{
  *(_QWORD *)this = &off_24D940650;
  _tc_google::protobuf::Map<long long,std::string>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D940650;
  _tc_google::protobuf::Map<long long,std::string>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

void *CoreML::Specification::Int64ToStringMap::default_instance(CoreML::Specification::Int64ToStringMap *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Int64ToStringMap_default_instance_;
}

CoreML::Specification::Int64ToStringMap *CoreML::Specification::Int64ToStringMap::New(CoreML::Specification::Int64ToStringMap *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Int64ToStringMap *v3;

  v3 = (CoreML::Specification::Int64ToStringMap *)operator new();
  CoreML::Specification::Int64ToStringMap::Int64ToStringMap(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Int64ToStringMap>(a2, v3);
  return v3;
}

void sub_2184295FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64ToStringMap>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToStringMap>);
  return result;
}

double CoreML::Specification::Int64ToStringMap::Clear(CoreML::Specification::Int64ToStringMap *this)
{
  return _tc_google::protobuf::Map<long long,std::string>::clear((uint64_t)this + 24);
}

uint64_t CoreML::Specification::Int64ToStringMap::MergePartialFromCodedStream(CoreML::Specification::Int64ToStringMap *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int v12;
  char *v13;
  int VarintSizeAsIntFallback;
  unint64_t v15;
  int v16;
  _tc_google::protobuf::internal *v17;
  const char *v18;
  _BOOL4 v19;
  BOOL v20;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v4 = (char *)this + 16;
  v5 = (char *)this + 24;
  while (1)
  {
    v6 = *a2;
    if (*a2 >= a2[1])
    {
      v7 = 0;
    }
    else
    {
      v7 = *v6;
      if (*v6 >= 1)
      {
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_12;
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v22[0] = v4;
      v22[1] = v5;
      v24 = 0;
      v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) == 0)
          goto LABEL_24;
      }
      else
      {
        VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
LABEL_24:
        v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        v16 = v15;
        if ((v15 & 0x8000000000000000) == 0
          && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::MergePartialFromCodedStream((uint64_t)v22, (_tc_google::protobuf::io::CodedInputStream *)a2)&& _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          v17 = (_tc_google::protobuf::internal *)v23;
          if (*(char *)(v23 + 23) < 0)
          {
            v17 = *(_tc_google::protobuf::internal **)v23;
            v18 = *(const char **)(v23 + 8);
          }
          else
          {
            v18 = (const char *)*(unsigned __int8 *)(v23 + 23);
          }
          v19 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v17, v18, 0, (uint64_t)"CoreML.Specification.Int64ToStringMap.MapEntry.value");
          v20 = v19;
          if (v19)
            v12 = 0;
          else
            v12 = 6;
LABEL_33:
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          if (!v20)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
      v20 = 0;
      v12 = 6;
      goto LABEL_33;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3))return 0;
LABEL_17:
    v12 = 0;
LABEL_18:
    if (v12)
      return 0;
  }
}

void sub_2184297F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToStringMap::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _tc_google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  uint64_t v10;
  _tc_google::protobuf::internal *v11;
  const char *v12;
  __n128 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _tc_google::protobuf::io::CodedOutputStream *v23;
  uint64_t v24;
  uint64_t v25;
  _tc_google::protobuf::internal *v26;
  const char *v27;
  _QWORD v28[3];

  v2 = **(_QWORD **)(this + 40);
  if (!v2)
    return this;
  v4 = this;
  v5 = this + 24;
  if (*((_BYTE *)a2 + 26))
  {
    if (v2 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_24:
      v14 = (__n128 *)operator new[]();
      _tc_google::protobuf::Map<std::string,std::string>::begin(v5, v28);
      v15 = v28[0];
      if (v28[0])
      {
        v16 = 0;
        v17 = &v14->n128_u64[1];
        do
        {
          v18 = *(unint64_t **)(v15 + 8);
          *(v17 - 1) = *v18;
          *v17 = (unint64_t)v18;
          _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v28);
          ++v16;
          v15 = v28[0];
          v17 += 2;
        }
        while (v28[0]);
      }
      else
      {
        v16 = 0;
      }
      v19 = 126 - 2 * __clz(v16);
      if (v16)
        v20 = v19;
      else
        v20 = 0;
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,false>(v14, (char *)&v14[v16], (uint64_t)v28, v20, 1);
      if (v16)
      {
        v21 = 0;
        v22 = &v14->n128_i64[1];
        do
        {
          v24 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*v22, *v22 + 8, *(_tc_google::protobuf::Arena **)(v4 + 16));
          if (v21 != v24)
          {
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v21 = v24;
          }
          _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v21, a2, v23);
          v25 = *v22;
          if (*(char *)(*v22 + 31) < 0)
          {
            v26 = *(_tc_google::protobuf::internal **)(v25 + 8);
            v27 = *(const char **)(v25 + 16);
          }
          else
          {
            v26 = (_tc_google::protobuf::internal *)(v25 + 8);
            v27 = (const char *)*(unsigned __int8 *)(*v22 + 31);
          }
          _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v26, v27, 1, (uint64_t)"CoreML.Specification.Int64ToStringMap.MapEntry.value");
          v22 += 2;
          --v16;
        }
        while (v16);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      return MEMORY[0x219A199F0](v14, 0x1060C80832E3BDALL);
    }
  }
  else if (v2 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_24;
  }
  this = _tc_google::protobuf::Map<std::string,std::string>::begin(this + 24, v28);
  v7 = 0;
  while (v28[0])
  {
    v9 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(_QWORD *)(v28[0] + 8), *(_QWORD *)(v28[0] + 8) + 8, *(_tc_google::protobuf::Arena **)(v4 + 16));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v7, a2, v8);
    v10 = *(_QWORD *)(v28[0] + 8);
    if (*(char *)(v10 + 31) < 0)
    {
      v11 = *(_tc_google::protobuf::internal **)(v10 + 8);
      v12 = *(const char **)(v10 + 16);
    }
    else
    {
      v11 = (_tc_google::protobuf::internal *)(v10 + 8);
      v12 = (const char *)*(unsigned __int8 *)(v10 + 31);
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.Int64ToStringMap.MapEntry.value");
    this = (uint64_t)_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v28);
  }
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return this;
}

void sub_218429A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x1060C80832E3BDALL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64ToStringMap::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[3];

  v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v7);
  v3 = 0;
  while (v7[0])
  {
    v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(_QWORD *)(v7[0] + 8), *(_QWORD *)(v7[0] + 8) + 8, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v3 = (_DWORD *)v4;
    }
    v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v7);
  }
  if (v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  *((_DWORD *)this + 12) = v2;
  return v2;
}

void sub_218429BC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToStringMap::MergeFrom(CoreML::Specification::Int64ToStringMap *this, const CoreML::Specification::Int64ToStringMap *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  return _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t CoreML::Specification::Int64ToStringMap::IsInitialized(CoreML::Specification::Int64ToStringMap *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Int64ToStringMap::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64ToStringMap");
}

CoreML::Specification::StringToDoubleMap *CoreML::Specification::StringToDoubleMap::StringToDoubleMap(CoreML::Specification::StringToDoubleMap *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D9406E8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (CoreML::Specification::protobuf_DataStructures_2eproto *)_tc_google::protobuf::Map<std::string,double>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::StringToDoubleMap *)&CoreML::Specification::_StringToDoubleMap_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v2);
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_218429CB0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::Map<std::string,long long>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type v7;
  _QWORD v8[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v8);
  v4 = v8[0];
  if (v8[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(_QWORD *)(v4 + 24);
      v7 = *(_QWORD *)(v6 + 24);
      _tc_google::protobuf::Map<std::string,double>::operator[](v5, v6)->__r_.__value_.__r.__words[0] = v7;
      result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v8);
      v4 = v8[0];
    }
    while (v8[0]);
  }
  return result;
}

void CoreML::Specification::StringToDoubleMap::~StringToDoubleMap(CoreML::Specification::StringToDoubleMap *this)
{
  *(_QWORD *)this = &off_24D9406E8;
  _tc_google::protobuf::Map<std::string,long long>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D9406E8;
  _tc_google::protobuf::Map<std::string,long long>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

void *CoreML::Specification::StringToDoubleMap::default_instance(CoreML::Specification::StringToDoubleMap *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_StringToDoubleMap_default_instance_;
}

CoreML::Specification::StringToDoubleMap *CoreML::Specification::StringToDoubleMap::New(CoreML::Specification::StringToDoubleMap *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::StringToDoubleMap *v3;

  v3 = (CoreML::Specification::StringToDoubleMap *)operator new();
  CoreML::Specification::StringToDoubleMap::StringToDoubleMap(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::StringToDoubleMap>(a2, v3);
  return v3;
}

void sub_218429E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::StringToDoubleMap>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToDoubleMap>);
  return result;
}

double CoreML::Specification::StringToDoubleMap::Clear(CoreML::Specification::StringToDoubleMap *this)
{
  return _tc_google::protobuf::Map<std::string,long long>::clear((uint64_t)this + 24);
}

uint64_t CoreML::Specification::StringToDoubleMap::MergePartialFromCodedStream(CoreML::Specification::StringToDoubleMap *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int v12;
  char *v13;
  int VarintSizeAsIntFallback;
  unint64_t v15;
  int v16;
  _tc_google::protobuf::internal *p_p;
  unint64_t v18;
  _BOOL4 v19;
  BOOL v20;
  _QWORD v22[2];
  void *__p;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = (char *)this + 16;
  v5 = (char *)this + 24;
  while (1)
  {
    v6 = *a2;
    if (*a2 >= a2[1])
    {
      v7 = 0;
    }
    else
    {
      v7 = *v6;
      if (*v6 >= 1)
      {
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_12;
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v22[0] = v4;
      v22[1] = v5;
      v24 = 0;
      v25 = 0;
      __p = 0;
      v26 = 0;
      v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) == 0)
          goto LABEL_24;
      }
      else
      {
        VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
LABEL_24:
        v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        v16 = v15;
        if ((v15 & 0x8000000000000000) == 0
          && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::MergePartialFromCodedStream((uint64_t)v22, a2)&& _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          if (v25 >= 0)
            p_p = (_tc_google::protobuf::internal *)&__p;
          else
            p_p = (_tc_google::protobuf::internal *)__p;
          if (v25 >= 0)
            v18 = HIBYTE(v25);
          else
            v18 = v24;
          v19 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v18, 0, (uint64_t)"CoreML.Specification.StringToDoubleMap.MapEntry.key");
          v20 = v19;
          if (v19)
            v12 = 0;
          else
            v12 = 6;
LABEL_36:
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          if (SHIBYTE(v25) < 0)
            operator delete(__p);
          if (!v20)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
      v20 = 0;
      v12 = 6;
      goto LABEL_36;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3))return 0;
LABEL_17:
    v12 = 0;
LABEL_18:
    if (v12)
      return 0;
  }
}

void sub_21842A048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::StringToDoubleMap::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _tc_google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  const char *v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _tc_google::protobuf::io::CodedOutputStream *v20;
  uint64_t v21;
  _tc_google::protobuf::internal *v22;
  const char *v23;
  _QWORD v24[3];

  v2 = **(_QWORD **)(this + 40);
  if (!v2)
    return this;
  v4 = this;
  v5 = this + 24;
  if (*((_BYTE *)a2 + 26))
  {
    if (v2 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_24:
      v13 = operator new[]();
      _tc_google::protobuf::Map<std::string,std::string>::begin(v5, v24);
      v14 = v24[0];
      if (v24[0])
      {
        v15 = 0;
        do
        {
          *(_QWORD *)(v13 + 8 * v15) = *(_QWORD *)(v14 + 24);
          _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v24);
          ++v15;
          v14 = v24[0];
        }
        while (v24[0]);
      }
      else
      {
        v15 = 0;
      }
      v16 = 126 - 2 * __clz(v15);
      if (v15)
        v17 = v16;
      else
        v17 = 0;
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**,false>(v13, (const void ***)(v13 + 8 * v15), (uint64_t)v24, v17, 1);
      if (v15)
      {
        v18 = 0;
        v19 = (uint64_t *)v13;
        do
        {
          v21 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*v19, *v19 + 24, *(_tc_google::protobuf::Arena **)(v4 + 16));
          if (v18 != v21)
          {
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            v18 = v21;
          }
          _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v18, a2, v20);
          v22 = (_tc_google::protobuf::internal *)*v19;
          if (*(char *)(*v19 + 23) < 0)
          {
            v22 = *(_tc_google::protobuf::internal **)v22;
            v23 = *(const char **)(*v19 + 8);
          }
          else
          {
            v23 = (const char *)*(unsigned __int8 *)(*v19 + 23);
          }
          _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v22, v23, 1, (uint64_t)"CoreML.Specification.StringToDoubleMap.MapEntry.key");
          ++v19;
          --v15;
        }
        while (v15);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      return MEMORY[0x219A199F0](v13, 0x60C8044C4A2DFLL);
    }
  }
  else if (v2 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_24;
  }
  this = _tc_google::protobuf::Map<std::string,std::string>::begin(this + 24, v24);
  v7 = 0;
  while (v24[0])
  {
    v9 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(_QWORD *)(v24[0] + 24), *(_QWORD *)(v24[0] + 24) + 24, *(_tc_google::protobuf::Arena **)(v4 + 16));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v7, a2, v8);
    v10 = *(unsigned __int8 **)(v24[0] + 24);
    if ((char)v10[23] < 0)
    {
      v10 = *(unsigned __int8 **)v10;
      v11 = *(const char **)(*(_QWORD *)(v24[0] + 24) + 8);
    }
    else
    {
      v11 = (const char *)v10[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v10, v11, 1, (uint64_t)"CoreML.Specification.StringToDoubleMap.MapEntry.key");
    this = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v24);
  }
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return this;
}

void sub_21842A2E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringToDoubleMap::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v7);
  v3 = 0;
  while (v7[0])
  {
    v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(_QWORD *)(v7[0] + 24), *(_QWORD *)(v7[0] + 24) + 24, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v3 = (_DWORD *)v4;
    }
    v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v7);
  }
  if (v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  *((_DWORD *)this + 12) = v2;
  return v2;
}

void sub_21842A418(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::StringToDoubleMap::MergeFrom(CoreML::Specification::StringToDoubleMap *this, const CoreML::Specification::StringToDoubleMap *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  return _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t CoreML::Specification::StringToDoubleMap::IsInitialized(CoreML::Specification::StringToDoubleMap *this)
{
  return 1;
}

_QWORD *CoreML::Specification::StringToDoubleMap::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringToDoubleMap");
}

CoreML::Specification::Int64ToDoubleMap *CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(CoreML::Specification::Int64ToDoubleMap *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D940780;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (CoreML::Specification::protobuf_DataStructures_2eproto *)_tc_google::protobuf::Map<long long,double>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Int64ToDoubleMap *)&CoreML::Specification::_Int64ToDoubleMap_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v2);
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_21842A500(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::Map<long long,double>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v8[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v8);
  v4 = v8[0];
  if (v8[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(uint64_t **)(v4 + 8);
      v7 = v6[1];
      *_tc_google::protobuf::Map<long long,double>::operator[](v5, v6) = v7;
      result = (uint64_t)_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v8);
      v4 = v8[0];
    }
    while (v8[0]);
  }
  return result;
}

void CoreML::Specification::Int64ToDoubleMap::~Int64ToDoubleMap(CoreML::Specification::Int64ToDoubleMap *this)
{
  *(_QWORD *)this = &off_24D940780;
  _tc_google::protobuf::Map<long long,double>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D940780;
  _tc_google::protobuf::Map<long long,double>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

void *CoreML::Specification::Int64ToDoubleMap::default_instance(CoreML::Specification::Int64ToDoubleMap *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Int64ToDoubleMap_default_instance_;
}

CoreML::Specification::Int64ToDoubleMap *CoreML::Specification::Int64ToDoubleMap::New(CoreML::Specification::Int64ToDoubleMap *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Int64ToDoubleMap *v3;

  v3 = (CoreML::Specification::Int64ToDoubleMap *)operator new();
  CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Int64ToDoubleMap>(a2, v3);
  return v3;
}

void sub_21842A67C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64ToDoubleMap>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToDoubleMap>);
  return result;
}

double CoreML::Specification::Int64ToDoubleMap::Clear(CoreML::Specification::Int64ToDoubleMap *this)
{
  return _tc_google::protobuf::Map<long long,double>::clear((uint64_t)this + 24);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::MergePartialFromCodedStream(CoreML::Specification::Int64ToDoubleMap *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int v12;
  char *v13;
  int VarintSizeAsIntFallback;
  unint64_t v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  _QWORD v20[4];
  uint64_t v21;

  v4 = (char *)this + 16;
  v5 = (char *)this + 24;
  while (1)
  {
    v6 = *a2;
    if (*a2 >= a2[1])
    {
      v7 = 0;
    }
    else
    {
      v7 = *v6;
      if (*v6 >= 1)
      {
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_12;
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v20[0] = v4;
      v20[1] = v5;
      v21 = 0;
      v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) == 0)
          goto LABEL_24;
      }
      else
      {
        VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
LABEL_24:
        v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        v16 = v15;
        if ((v15 & 0x8000000000000000) == 0
          && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::MergePartialFromCodedStream((uint64_t)v20, (_tc_google::protobuf::io::CodedInputStream *)a2))
        {
          v17 = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16);
          v18 = v17;
          if (v17)
            v12 = 0;
          else
            v12 = 6;
LABEL_30:
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          if (!v18)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
      v18 = 0;
      v12 = 6;
      goto LABEL_30;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3))return 0;
LABEL_17:
    v12 = 0;
LABEL_18:
    if (v12)
      return 0;
  }
}

void sub_21842A83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _tc_google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  __n128 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _tc_google::protobuf::io::CodedOutputStream *v20;
  uint64_t v21;
  _QWORD v22[3];

  v2 = **(_QWORD **)(this + 40);
  if (!v2)
    return this;
  v4 = this;
  v5 = this + 24;
  if (*((_BYTE *)a2 + 26))
  {
    if (v2 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_21:
      v11 = (__n128 *)operator new[]();
      _tc_google::protobuf::Map<std::string,std::string>::begin(v5, v22);
      v12 = v22[0];
      if (v22[0])
      {
        v13 = 0;
        v14 = &v11->n128_u64[1];
        do
        {
          v15 = *(unint64_t **)(v12 + 8);
          *(v14 - 1) = *v15;
          *v14 = (unint64_t)v15;
          _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v22);
          ++v13;
          v12 = v22[0];
          v14 += 2;
        }
        while (v22[0]);
      }
      else
      {
        v13 = 0;
      }
      v16 = 126 - 2 * __clz(v13);
      if (v13)
        v17 = v16;
      else
        v17 = 0;
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*,false>(v11, (char *)&v11[v13], (uint64_t)v22, v17, 1);
      if (v13)
      {
        v18 = 0;
        v19 = &v11->n128_i64[1];
        do
        {
          v21 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*v19, *v19 + 8, *(_tc_google::protobuf::Arena **)(v4 + 16));
          if (v18 != v21)
          {
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            v18 = v21;
          }
          _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v18, a2, v20);
          v19 += 2;
          --v13;
        }
        while (v13);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      return MEMORY[0x219A199F0](v11, 0x1060C80832E3BDALL);
    }
  }
  else if (v2 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_21;
  }
  this = _tc_google::protobuf::Map<std::string,std::string>::begin(this + 24, v22);
  v7 = 0;
  while (v22[0])
  {
    v9 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(_QWORD *)(v22[0] + 8), *(_QWORD *)(v22[0] + 8) + 8, *(_tc_google::protobuf::Arena **)(v4 + 16));
    if (v7 != v9)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v7 = v9;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v7, a2, v8);
    this = (uint64_t)_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v22);
  }
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return this;
}

void sub_21842AA78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x1060C80832E3BDALL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[3];

  v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v7);
  v3 = 0;
  while (v7[0])
  {
    v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(_QWORD *)(v7[0] + 8), *(_QWORD *)(v7[0] + 8) + 8, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v3 = (_DWORD *)v4;
    }
    v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v7);
  }
  if (v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  *((_DWORD *)this + 12) = v2;
  return v2;
}

void sub_21842ABAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::MergeFrom(CoreML::Specification::Int64ToDoubleMap *this, const CoreML::Specification::Int64ToDoubleMap *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  return _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::IsInitialized(CoreML::Specification::Int64ToDoubleMap *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Int64ToDoubleMap::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64ToDoubleMap");
}

CoreML::Specification::StringVector *CoreML::Specification::StringVector::StringVector(CoreML::Specification::StringVector *this)
{
  *(_QWORD *)this = &off_24D940818;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::StringVector *)&CoreML::Specification::_StringVector_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_21842AC84(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::StringVector *CoreML::Specification::StringVector::StringVector(CoreML::Specification::StringVector *this, const CoreML::Specification::StringVector *a2)
{
  uint64_t *v4;
  std::string *v5;
  signed int v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int *v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24D940818;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (std::string *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::StringVector *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v5, (std::string **)v8, (const std::string **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    v10 = (int *)*((_QWORD *)this + 4);
    if (*v10 < v9)
      *v10 = v9;
  }
  *((_DWORD *)this + 10) = 0;
  v11 = *((_QWORD *)a2 + 1);
  if ((v11 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v11 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

void sub_21842AD70(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::StringVector::~StringVector(CoreML::Specification::StringVector *this)
{
  *(_QWORD *)this = &off_24D940818;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::StringVector::~StringVector(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::StringVector::default_instance(CoreML::Specification::StringVector *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_StringVector_default_instance_;
}

CoreML::Specification::StringVector *CoreML::Specification::StringVector::New(CoreML::Specification::StringVector *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::StringVector *v3;

  v3 = (CoreML::Specification::StringVector *)operator new();
  CoreML::Specification::StringVector::StringVector(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::StringVector>(a2, v3);
  return v3;
}

void sub_21842AE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::StringVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringVector>);
  return result;
}

uint64_t CoreML::Specification::StringVector::Clear(CoreML::Specification::StringVector *this)
{
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
}

BOOL CoreML::Specification::StringVector::MergePartialFromCodedStream(CoreML::Specification::StringVector *this, char **a2, unsigned int a3)
{
  _tc_google::protobuf::Arena **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  uint64_t v13;
  int v14;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  uint64_t v20;
  unsigned __int8 *v21;
  const char *v22;

  v5 = (_tc_google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        v7 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v14 = *((_DWORD *)this + 7);
        goto LABEL_23;
      }
      v13 = *((int *)this + 6);
      v14 = *v12;
      if ((int)v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_24:
          *v12 = v14 + 1;
          v16 = *v5;
          if (*v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            _tc_google::protobuf::Arena::AddListNode(v16, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v17 = *((_QWORD *)this + 4);
          v18 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v18 + 1;
          *(_QWORD *)(v17 + 8 * v18 + 8) = Aligned;
          goto LABEL_28;
        }
LABEL_23:
        _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v5, v14 + 1);
        v12 = (int *)*((_QWORD *)this + 4);
        v14 = *v12;
        goto LABEL_24;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(std::string **)&v12[2 * v13 + 2];
LABEL_28:
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, Aligned);
      if (!result)
        return result;
      v20 = *((_QWORD *)this + 4);
      v21 = *(unsigned __int8 **)(v20 + 8 * *((int *)this + 6));
      if ((char)v21[23] < 0)
      {
        v21 = *(unsigned __int8 **)v21;
        v22 = *(const char **)(*(_QWORD *)(v20 + 8 * *((int *)this + 6)) + 8);
      }
      else
      {
        v22 = (const char *)v21[23];
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v21, v22, 0, (uint64_t)"CoreML.Specification.StringVector.vector"))return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::StringVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  const char *v8;

  v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    v4 = this;
    v5 = -v2;
    v6 = 1;
    do
    {
      v7 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 32) + 8 * v6);
      if ((char)v7[23] < 0)
      {
        v7 = *(unsigned __int8 **)v7;
        v8 = *(const char **)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6) + 8);
      }
      else
      {
        v8 = (const char *)v7[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v7, v8, 1, (uint64_t)"CoreML.Specification.StringVector.vector");
      this = _tc_google::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6++), a2);
    }
    while (v5 + v6 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::StringVector::ByteSizeLong(CoreML::Specification::StringVector *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 6);
  if ((int)v1 < 1)
  {
    v3 = *((unsigned int *)this + 6);
  }
  else
  {
    v2 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    v3 = *((unsigned int *)this + 6);
    do
    {
      v4 = *v2++;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  *((_DWORD *)this + 10) = v3;
  return v3;
}

std::string *CoreML::Specification::StringVector::CopyFrom(std::string *this, std::string *a2)
{
  std::string *v3;

  if (a2 != this)
  {
    v3 = this;
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)&this->__r_.__value_.__r.__words[2]);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v3, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)a2);
  }
  return this;
}

uint64_t CoreML::Specification::StringVector::IsInitialized(CoreML::Specification::StringVector *this)
{
  return 1;
}

_QWORD *CoreML::Specification::StringVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringVector");
}

CoreML::Specification::Int64Vector *CoreML::Specification::Int64Vector::Int64Vector(CoreML::Specification::Int64Vector *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D9408B0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Int64Vector *)&CoreML::Specification::_Int64Vector_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_21842B258(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::Int64Vector *CoreML::Specification::Int64Vector::Int64Vector(CoreML::Specification::Int64Vector *this, const CoreML::Specification::Int64Vector *a2)
{
  uint64_t *v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_24D9408B0;
  *((_QWORD *)this + 2) = 0;
  v5 = (unsigned int *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v6);
    memcpy((void *)(*((_QWORD *)this + 3) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  }
  *((_DWORD *)this + 9) = 0;
  v7 = *((_QWORD *)a2 + 1);
  if ((v7 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v7 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

void sub_21842B314(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64Vector::~Int64Vector(CoreML::Specification::Int64Vector *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D9408B0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Int64Vector::~Int64Vector(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::Int64Vector::default_instance(CoreML::Specification::Int64Vector *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Int64Vector_default_instance_;
}

CoreML::Specification::Int64Vector *CoreML::Specification::Int64Vector::New(CoreML::Specification::Int64Vector *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Int64Vector *v3;

  v3 = (CoreML::Specification::Int64Vector *)operator new();
  CoreML::Specification::Int64Vector::Int64Vector(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Vector>(a2, v3);
  return v3;
}

void sub_21842B424(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Vector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Vector>);
  return result;
}

uint64_t CoreML::Specification::Int64Vector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Int64Vector::MergePartialFromCodedStream(CoreML::Specification::Int64Vector *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  char *v14;
  unint64_t v15;
  unint64_t Varint64Fallback;
  char v17;
  signed int v18;
  uint64_t v19;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        v7 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0)
                return 0;
              v15 = Varint64Fallback;
            }
            else
            {
              v15 = *v14;
              *a2 = v14 + 1;
            }
            v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              v18 = *v5;
            }
            v19 = *((_QWORD *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(_QWORD *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Int64Vector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::Int64Vector::ByteSizeLong(CoreML::Specification::Int64Vector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t *CoreML::Specification::Int64Vector::CopyFrom(uint64_t *this, const CoreML::Specification::GLMRegressor_DoubleArray *a2)
{
  if (a2 != (const CoreML::Specification::GLMRegressor_DoubleArray *)this)
  {
    *((_DWORD *)this + 4) = 0;
    return CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(this, a2);
  }
  return this;
}

uint64_t CoreML::Specification::Int64Vector::IsInitialized(CoreML::Specification::Int64Vector *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Int64Vector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Vector");
}

CoreML::Specification::FloatVector *CoreML::Specification::FloatVector::FloatVector(CoreML::Specification::FloatVector *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D940948;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::FloatVector *)&CoreML::Specification::_FloatVector_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_21842B8B4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FloatVector::~FloatVector(CoreML::Specification::FloatVector *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D940948;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::FloatVector::~FloatVector(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::FloatVector *CoreML::Specification::FloatVector::New(CoreML::Specification::FloatVector *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::FloatVector *v3;

  v3 = (CoreML::Specification::FloatVector *)operator new();
  CoreML::Specification::FloatVector::FloatVector(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::FloatVector>(a2, v3);
  return v3;
}

void sub_21842B9A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FloatVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FloatVector>);
  return result;
}

uint64_t CoreML::Specification::FloatVector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::FloatVector::MergePartialFromCodedStream(CoreML::Specification::FloatVector *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  signed int v21;
  uint64_t v22;
  _BOOL8 result;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 13)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(_tc_google::protobuf::internal::WireFormatLite::FieldType)2>(1, 0xAu, (unsigned int **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 3) != 0)
        return 0;
      v13 = *v5;
      v14 = VarintSizeAsIntFallback >> 2;
      v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v15 == -1)
        v17 = v16;
      if (v17 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 4)
      {
        if (v14 <= 1)
          v18 = 1;
        else
          v18 = VarintSizeAsIntFallback >> 2;
        do
        {
          v28 = 0;
          v19 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v28);
            if (!result)
              return result;
            v20 = v28;
          }
          else
          {
            v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<float>::Reserve(v5, v21 + 1);
            v21 = *v5;
          }
          v22 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_DWORD *)(v22 + 4 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      v25 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<float>::Reserve(v5, v13 + v14);
      v25 = *((_QWORD *)this + 3);
      v26 = 4 * v24 - 4 * *((int *)this + 4);
      if (v26 >= 1)
        bzero((void *)(v25 + 8 + 4 * *((int *)this + 4)), 4 * (((unint64_t)v26 >> 2) - ((unint64_t)v26 > 3)) + 4);
    }
    *v5 = v24;
    v27 = v25 + 8;
    if (!v25)
      v27 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 4 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::FloatVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloatArray(v14, (const float *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::FloatVector::ByteSizeLong(CoreML::Specification::FloatVector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 4 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::FloatVector::IsInitialized(CoreML::Specification::FloatVector *this)
{
  return 1;
}

_QWORD *CoreML::Specification::FloatVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FloatVector");
}

CoreML::Specification::DoubleVector *CoreML::Specification::DoubleVector::DoubleVector(CoreML::Specification::DoubleVector *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D9409E0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::DoubleVector *)&CoreML::Specification::_DoubleVector_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_21842BE44(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DoubleVector::~DoubleVector(CoreML::Specification::DoubleVector *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D9409E0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::DoubleVector::~DoubleVector(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::DoubleVector::default_instance(CoreML::Specification::DoubleVector *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_DoubleVector_default_instance_;
}

CoreML::Specification::DoubleVector *CoreML::Specification::DoubleVector::New(CoreML::Specification::DoubleVector *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::DoubleVector *v3;

  v3 = (CoreML::Specification::DoubleVector *)operator new();
  CoreML::Specification::DoubleVector::DoubleVector(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleVector>(a2, v3);
  return v3;
}

void sub_21842BF4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleVector>);
  return result;
}

uint64_t CoreML::Specification::DoubleVector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::DoubleVector::MergePartialFromCodedStream(CoreML::Specification::DoubleVector *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  signed int v21;
  uint64_t v22;
  _BOOL8 result;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *v5;
      v14 = VarintSizeAsIntFallback >> 3;
      v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v15 == -1)
        v17 = v16;
      if (v17 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1)
          v18 = 1;
        else
          v18 = VarintSizeAsIntFallback >> 3;
        do
        {
          v28 = 0;
          v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result)
              return result;
            v20 = v28;
          }
          else
          {
            v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            v21 = *v5;
          }
          v22 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_QWORD *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      v25 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      v25 = *((_QWORD *)this + 3);
      v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1)
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
    }
    *v5 = v24;
    v27 = v25 + 8;
    if (!v25)
      v27 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::DoubleVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, (const double *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::DoubleVector::ByteSizeLong(CoreML::Specification::DoubleVector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::DoubleVector::IsInitialized(CoreML::Specification::DoubleVector *this)
{
  return 1;
}

_QWORD *CoreML::Specification::DoubleVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleVector");
}

CoreML::Specification::Int64Range *CoreML::Specification::Int64Range::Int64Range(CoreML::Specification::Int64Range *this)
{
  *(_QWORD *)this = &off_24D940A78;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Int64Range *)&CoreML::Specification::_Int64Range_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_21842C3E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64Range::~Int64Range(CoreML::Specification::Int64Range *this)
{
  *(_QWORD *)this = &off_24D940A78;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D940A78;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::Int64Range::default_instance(CoreML::Specification::Int64Range *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Int64Range_default_instance_;
}

CoreML::Specification::Int64Range *CoreML::Specification::Int64Range::New(CoreML::Specification::Int64Range *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Int64Range *v3;

  v3 = (CoreML::Specification::Int64Range *)operator new();
  CoreML::Specification::Int64Range::Int64Range(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Range>(a2, v3);
  return v3;
}

void sub_21842C4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Range>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Range>);
  return result;
}

uint64_t CoreML::Specification::Int64Range::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::Int64Range::MergePartialFromCodedStream(CoreML::Specification::Int64Range *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t Varint64Fallback;
  BOOL v14;
  char v15;
  char v16;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          v6 = 0;
LABEL_6:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 16)
          goto LABEL_20;
        v12 = *a2;
        if (*a2 >= a2[1] || *v12 < 0)
        {
          Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v12;
          *a2 = v12 + 1;
        }
        *((_QWORD *)this + 3) = Varint64Fallback;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        v11 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v15 & 1) == 0)
          return 0;
      }
      else
      {
        v11 = *v10;
        *a2 = v10 + 1;
      }
      *((_QWORD *)this + 2) = v11;
    }
LABEL_20:
    if ((_DWORD)v7)
      v14 = (v7 & 7) == 4;
    else
      v14 = 1;
    if (v14)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Int64Range::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(_QWORD *)(v5 + 24);
  if (v7)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  return this;
}

unint64_t CoreML::Specification::Int64Range::ByteSizeLong(CoreML::Specification::Int64Range *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1)
    v4 = v3 + 1;
  else
    v4 = 0;
  v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2)
    v4 = v5 + 1;
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::Int64Range::IsInitialized(CoreML::Specification::Int64Range *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Int64Range::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Range");
}

CoreML::Specification::Int64Set *CoreML::Specification::Int64Set::Int64Set(CoreML::Specification::Int64Set *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D940B10;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Int64Set *)&CoreML::Specification::_Int64Set_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_21842C768(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64Set::~Int64Set(CoreML::Specification::Int64Set *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D940B10;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Int64Set::~Int64Set(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::Int64Set::default_instance(CoreML::Specification::Int64Set *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Int64Set_default_instance_;
}

CoreML::Specification::Int64Set *CoreML::Specification::Int64Set::New(CoreML::Specification::Int64Set *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Int64Set *v3;

  v3 = (CoreML::Specification::Int64Set *)operator new();
  CoreML::Specification::Int64Set::Int64Set(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Set>(a2, v3);
  return v3;
}

void sub_21842C870(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Set>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Set>);
  return result;
}

uint64_t CoreML::Specification::Int64Set::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Int64Set::MergePartialFromCodedStream(CoreML::Specification::Int64Set *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  char *v14;
  unint64_t v15;
  unint64_t Varint64Fallback;
  char v17;
  signed int v18;
  uint64_t v19;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        v7 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0)
                return 0;
              v15 = Varint64Fallback;
            }
            else
            {
              v15 = *v14;
              *a2 = v14 + 1;
            }
            v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              v18 = *v5;
            }
            v19 = *((_QWORD *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(_QWORD *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Int64Set::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::Int64Set::ByteSizeLong(CoreML::Specification::Int64Set *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::Int64Set::IsInitialized(CoreML::Specification::Int64Set *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Int64Set::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Set");
}

CoreML::Specification::DoubleRange *CoreML::Specification::DoubleRange::DoubleRange(CoreML::Specification::DoubleRange *this)
{
  *(_QWORD *)this = &off_24D940BA8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::DoubleRange *)&CoreML::Specification::_DoubleRange_default_instance_)
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_21842CCE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DoubleRange::~DoubleRange(CoreML::Specification::DoubleRange *this)
{
  *(_QWORD *)this = &off_24D940BA8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D940BA8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::DoubleRange::default_instance(CoreML::Specification::DoubleRange *this)
{
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  return &CoreML::Specification::_DoubleRange_default_instance_;
}

CoreML::Specification::DoubleRange *CoreML::Specification::DoubleRange::New(CoreML::Specification::DoubleRange *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::DoubleRange *v3;

  v3 = (CoreML::Specification::DoubleRange *)operator new();
  CoreML::Specification::DoubleRange::DoubleRange(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleRange>(a2, v3);
  return v3;
}

void sub_21842CDD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleRange>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleRange>);
  return result;
}

uint64_t CoreML::Specification::DoubleRange::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::DoubleRange::MergePartialFromCodedStream(CoreML::Specification::DoubleRange *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v17;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 < a2[1])
          break;
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0)
          goto LABEL_7;
LABEL_20:
        if ((_DWORD)v7)
          v14 = (v7 & 7) == 4;
        else
          v14 = 1;
        v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_20;
LABEL_7:
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 != 1 || v7 != 9)
        goto LABEL_20;
      v17 = 0;
      v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17))
          return 0;
        v11 = v17;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_QWORD *)this + 2) = v11;
    }
    if (v7 != 17)
      goto LABEL_20;
    v17 = 0;
    v12 = (unint64_t *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 8)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17))
      return 0;
    v13 = v17;
LABEL_19:
    *((_QWORD *)this + 3) = v13;
  }
}

uint64_t CoreML::Specification::DoubleRange::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  double v5;
  double v6;

  v4 = this;
  v5 = *(double *)(this + 16);
  if (v5 != 0.0)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  v6 = *(double *)(v4 + 24);
  if (v6 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  return this;
}

uint64_t CoreML::Specification::DoubleRange::ByteSizeLong(CoreML::Specification::DoubleRange *this)
{
  uint64_t v1;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((double *)this + 3) != 0.0)
    v1 += 9;
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CoreML::Specification::DoubleRange::IsInitialized(CoreML::Specification::DoubleRange *this)
{
  return 1;
}

_QWORD *CoreML::Specification::DoubleRange::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleRange");
}

CoreML::Specification::StringToInt64Map *CoreML::Specification::StringToInt64Map::New(CoreML::Specification::StringToInt64Map *this)
{
  return CoreML::Specification::StringToInt64Map::New(this, 0);
}

CoreML::Specification::Int64ToStringMap *CoreML::Specification::Int64ToStringMap::New(CoreML::Specification::Int64ToStringMap *this)
{
  return CoreML::Specification::Int64ToStringMap::New(this, 0);
}

CoreML::Specification::StringToDoubleMap *CoreML::Specification::StringToDoubleMap::New(CoreML::Specification::StringToDoubleMap *this)
{
  return CoreML::Specification::StringToDoubleMap::New(this, 0);
}

CoreML::Specification::Int64ToDoubleMap *CoreML::Specification::Int64ToDoubleMap::New(CoreML::Specification::Int64ToDoubleMap *this)
{
  return CoreML::Specification::Int64ToDoubleMap::New(this, 0);
}

CoreML::Specification::StringVector *CoreML::Specification::StringVector::New(CoreML::Specification::StringVector *this)
{
  return CoreML::Specification::StringVector::New(this, 0);
}

CoreML::Specification::Int64Vector *CoreML::Specification::Int64Vector::New(CoreML::Specification::Int64Vector *this)
{
  return CoreML::Specification::Int64Vector::New(this, 0);
}

CoreML::Specification::FloatVector *CoreML::Specification::FloatVector::New(CoreML::Specification::FloatVector *this)
{
  return CoreML::Specification::FloatVector::New(this, 0);
}

CoreML::Specification::DoubleVector *CoreML::Specification::DoubleVector::New(CoreML::Specification::DoubleVector *this)
{
  return CoreML::Specification::DoubleVector::New(this, 0);
}

CoreML::Specification::Int64Range *CoreML::Specification::Int64Range::New(CoreML::Specification::Int64Range *this)
{
  return CoreML::Specification::Int64Range::New(this, 0);
}

CoreML::Specification::Int64Set *CoreML::Specification::Int64Set::New(CoreML::Specification::Int64Set *this)
{
  return CoreML::Specification::Int64Set::New(this, 0);
}

CoreML::Specification::DoubleRange *CoreML::Specification::DoubleRange::New(CoreML::Specification::DoubleRange *this)
{
  return CoreML::Specification::DoubleRange::New(this, 0);
}

_QWORD *_tc_google::protobuf::Map<std::string,long long>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<std::string,long long>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x219A19A08](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,long long>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    _tc_google::protobuf::Map<std::string,long long>::erase(a1, &v5, (uint64_t)&v7);
    result = *(double *)&v7;
    v3 = v7;
    v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,long long>::erase@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;

  if (!*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6)
    {
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      MEMORY[0x219A19A08](v6, 0x1012C4092066FB6);
    }
  }
  v8 = *(_OWORD *)a2;
  v9 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(_QWORD **)(a1 + 16), (uint64_t)&v8);
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  return result;
}

_QWORD *_tc_google::protobuf::Map<long long,std::string>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<long long,std::string>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = _tc_google::protobuf::Map<long long,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x219A19A08](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<long long,std::string>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    _tc_google::protobuf::Map<long long,std::string>::erase(a1, &v5, (uint64_t)&v7);
    result = *(double *)&v7;
    v3 = v7;
    v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<long long,std::string>::erase@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;

  if (!*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v6)
    {
      if (*(char *)(v6 + 31) < 0)
        operator delete(*(void **)(v6 + 8));
      MEMORY[0x219A19A08](v6, 0x1012C404EF22A49);
    }
  }
  v8 = *(_OWORD *)a2;
  v9 = a2[2];
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::erase(*(_QWORD **)(a1 + 16), (uint64_t)&v8);
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  return result;
}

void _tc_google::protobuf::Map<long long,std::string>::InnerMap::erase(_QWORD *a1, uint64_t a2)
{
  _BOOL4 v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::revalidate_if_necessary(a2, &v12);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void **)a2;
  v7 = a1[4];
  v8 = *(_QWORD *)(v7 + 8 * v5);
  if (v4)
  {
    v9 = _tc_google::protobuf::Map<long long,std::string>::InnerMap::EraseFromLinkedList((uint64_t)a1, (uint64_t)v6, *(_QWORD *)(v7 + 8 * v5));
  }
  else
  {
    std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__erase_unique<long long *>(v8, (uint64_t **)(v12 + 32));
    if (*(_QWORD *)(v8 + 24))
      goto LABEL_6;
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, (_QWORD **)v8);
    v9 = 0;
    *(_QWORD *)(a1[4] + ((8 * v5) | 8)) = 0;
    v5 &= ~1uLL;
  }
  *(_QWORD *)(a1[4] + 8 * v5) = v9;
LABEL_6:
  if (!a1[5])
    operator delete(v6);
  --*a1;
  if (v5 == a1[3])
  {
    v10 = a1[1];
    if (v5 < v10)
    {
      v11 = a1[4];
      do
      {
        if (*(_QWORD *)(v11 + 8 * v5))
          break;
        a1[3] = ++v5;
      }
      while (v10 != v5);
    }
  }
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::EraseFromLinkedList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a3;
  v4 = *(_QWORD *)(a3 + 16);
  if (v3 == a2)
    return v4;
  *(_QWORD *)(v3 + 16) = _tc_google::protobuf::Map<long long,std::string>::InnerMap::EraseFromLinkedList();
  return v3;
}

uint64_t std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__erase_unique<long long *>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::find<long long *>(a1, a2);
  if ((uint64_t *)(a1 + 8) == v3)
    return 0;
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::erase(a1, v3);
  return 1;
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::~InnerMap(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
  {
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::clear((_QWORD *)a1);
    if (!*(_QWORD *)(a1 + 40))
      operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void _tc_google::protobuf::Map<long long,std::string>::InnerMap::clear(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v2 = a1[1];
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = a1[4];
      v5 = *(_QWORD *)(v4 + 8 * v3);
      if (v5)
      {
        if (v5 == *(_QWORD *)(v4 + 8 * (v3 ^ 1)))
        {
          v7 = v3 + 1;
          *(_QWORD *)(v4 + 8 * (v3 + 1)) = 0;
          *(_QWORD *)(a1[4] + 8 * v3) = 0;
          v8 = *(uint64_t **)v5;
          do
          {
            v9 = (void *)v8[4];
            v10 = (uint64_t *)v8[1];
            v11 = v8;
            if (v10)
            {
              do
              {
                v12 = v10;
                v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v12 = (uint64_t *)v11[2];
                v13 = *v12 == (_QWORD)v11;
                v11 = v12;
              }
              while (!v13);
            }
            std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::erase(v5, v8);
            if (!a1[5])
              operator delete(v9);
            v8 = v12;
          }
          while (v12 != (uint64_t *)(v5 + 8));
          _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, (_QWORD **)v5);
          goto LABEL_20;
        }
        *(_QWORD *)(v4 + 8 * v3) = 0;
        do
        {
          v6 = *(_QWORD *)(v5 + 16);
          if (!a1[5])
            operator delete((void *)v5);
          v5 = v6;
        }
        while (v6);
      }
      v7 = v3;
LABEL_20:
      v3 = v7 + 1;
      v2 = a1[1];
    }
    while (v7 + 1 < v2);
  }
  *a1 = 0;
  a1[3] = v2;
}

_QWORD *_tc_google::protobuf::Map<long long,double>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<long long,double>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = _tc_google::protobuf::Map<long long,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x219A19A08](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<long long,double>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    _tc_google::protobuf::Map<long long,double>::erase(a1, &v5, (uint64_t)&v7);
    result = *(double *)&v7;
    v3 = v7;
    v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<long long,double>::erase@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;

  if (!*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v6)
      MEMORY[0x219A19A08](v6, 0x1000C40451B5BE8);
  }
  v8 = *(_OWORD *)a2;
  v9 = a2[2];
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::erase(*(_QWORD **)(a1 + 16), (uint64_t)&v8);
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  return result;
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D940D48;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = this;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D940D48;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Clear(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  std::string **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  _BOOL8 result;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  unint64_t Varint64Fallback;
  unsigned __int8 *v16;
  char v17;

  v5 = (std::string **)(a1 + 16);
  do
  {
    while (1)
    {
      v6 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1))
      {
        TagFallback = 0;
      }
      else
      {
        TagFallback = *v6;
        if ((*v6 & 0x80000000) == 0)
        {
          *(_QWORD *)this = v6 + 1;
          goto LABEL_7;
        }
      }
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_7:
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 40) |= 1u;
      v8 = *(std::string **)(a1 + 16);
      if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v8 = *(std::string **)(a1 + 16);
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, v8);
      if (!result)
        return result;
      v10 = *(_DWORD *)(a1 + 40) | 1;
      *(_DWORD *)(a1 + 40) = v10;
      v12 = *(char **)this;
      v11 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this < v11 && *v12 == 16)
      {
        v13 = v12 + 1;
        *(_QWORD *)this = v13;
LABEL_20:
        v14 = v10 | 2;
        *(_DWORD *)(a1 + 40) = v14;
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
          if ((v17 & 1) == 0)
            return 0;
          v14 = *(_DWORD *)(a1 + 40);
          v16 = *(unsigned __int8 **)this;
          v11 = *((_QWORD *)this + 1);
        }
        else
        {
          Varint64Fallback = *v13;
          v16 = (unsigned __int8 *)(v13 + 1);
          *(_QWORD *)this = v16;
        }
        *(_QWORD *)(a1 + 24) = Varint64Fallback;
        *(_DWORD *)(a1 + 40) = v14 | 2;
        if (v16 == (unsigned __int8 *)v11
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if ((_DWORD)TagFallback == 16)
    {
      v10 = *(_DWORD *)(a1 + 40);
      v13 = *(char **)this;
      v11 = *((_QWORD *)this + 1);
      goto LABEL_20;
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField(this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

unint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_DWORD *)(v5 + 8);
    v3 = (int)(v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1) | 1) ^ 0x3F) + 73) >> 6)
     + 1;
  return v4 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  unint64_t *v5;
  _tc_google::protobuf::io::CodedOutputStream *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteString(1, v4, a2);
  v5 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, *v5, a2, v6);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_DWORD *)(v5 + 8);
    v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1) | 1) ^ 0x3F) + 73) >> 6)
     + 1;
  return v4 + v3;
}

_BYTE *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v5;
  char *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v6 = _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  v7 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v6 = 16;
  v8 = v6 + 1;
  if (v7 < 0x80)
  {
    LOBYTE(v9) = v7;
  }
  else
  {
    do
    {
      *v8++ = v7 | 0x80;
      v9 = v7 >> 7;
      v10 = v7 >> 14;
      v7 >>= 7;
    }
    while (v10);
  }
  *v8 = v9;
  return v8 + 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::value(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (!*(_QWORD *)(a1 + 8))
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/map_entry_lite.h", 162);
    v2 = _tc_google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: default_instance_ != NULL: ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, (_tc_google::protobuf::internal::LogMessage *)v2);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return a1 + 24;
}

void sub_21842DCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryImpl(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D940E20;
  if (*(_QWORD *)(a1 + 8) != a1 && !*(_QWORD *)(a1 + 32))
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
  return a1;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void _tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D940EC8;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  uint64_t result;
  uint64_t v5;

  if (this)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 32) = this;
  }
  else
  {
    result = operator new();
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_QWORD *)(result + 24) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D940EC8;
  *(_QWORD *)(result + 8) = v5;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = 0;
  v1 = *(_QWORD *)(result + 24);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  std::string **v5;
  char *v6;
  unint64_t TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  unint64_t Varint64Fallback;
  char *v12;
  int v13;
  char v14;
  std::string *v15;
  _BOOL8 result;

  v5 = (std::string **)(a1 + 24);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = *(char **)this;
        if (*(_QWORD *)this >= *((_QWORD *)this + 1))
        {
          TagFallback = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *(_QWORD *)this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 8)
          break;
        v8 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v8;
        v10 = *(char **)this;
        v9 = *((_QWORD *)this + 1);
        if (*(_QWORD *)this >= v9 || *v10 < 0)
        {
          Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
          if ((v14 & 1) == 0)
            return 0;
          v8 = *(_DWORD *)(a1 + 40);
          v12 = *(char **)this;
          v9 = *((_QWORD *)this + 1);
        }
        else
        {
          Varint64Fallback = *v10;
          v12 = v10 + 1;
          *(_QWORD *)this = v12;
        }
        *(_QWORD *)(a1 + 16) = Varint64Fallback;
        v13 = v8 | 1;
        *(_DWORD *)(a1 + 40) = v13;
        if ((unint64_t)v12 < v9 && *v12 == 18)
        {
          *(_QWORD *)this = v12 + 1;
          goto LABEL_22;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v13 = *(_DWORD *)(a1 + 40);
LABEL_22:
      *(_DWORD *)(a1 + 40) = v13 | 2;
      v15 = *(std::string **)(a1 + 24);
      if (v15 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v15 = *(std::string **)(a1 + 24);
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, v15);
      if (!result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(_QWORD *)this == *((_QWORD *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField(this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

unint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v3 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t *v4;
  _tc_google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;

  v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, *v4, a2, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteString(2, v6, a2);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v3 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

char *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;

  v5 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 8;
  v6 = a3 + 1;
  if (v5 < 0x80)
  {
    LOBYTE(v7) = v5;
  }
  else
  {
    do
    {
      *v6++ = v5 | 0x80;
      v7 = v5 >> 7;
      v8 = v5 >> 14;
      v5 >>= 7;
    }
    while (v8);
  }
  *v6 = v7;
  v9 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v6[1] = 18;
  return _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v9, v6 + 2);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D940FA0;
  if (*(_QWORD *)(a1 + 8) != a1 && !*(_QWORD *)(a1 + 32))
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 24));
  return a1;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      v5 = (std::string **)(a1 + 24);
      if (*(uint64_t **)(a1 + 24) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 24), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 24), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D941048;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = this;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D941048;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergePartialFromCodedStream(uint64_t a1, char **this, unsigned int a3)
{
  std::string **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  int v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  int v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL8 result;
  unint64_t v18;

  v5 = (std::string **)(a1 + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = *this;
        if (*this >= this[1])
        {
          TagFallback = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(this, v8);
        if (!result)
          return result;
        v9 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v9;
        v11 = *this;
        v10 = this[1];
        if (*this < v10 && *v11 == 17)
        {
          v12 = (unint64_t *)(v11 + 1);
          *this = (char *)v12;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback == 17)
        break;
      if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
        return 1;
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
    }
    v9 = *(_DWORD *)(a1 + 40);
    v12 = (unint64_t *)*this;
    v10 = this[1];
LABEL_20:
    v13 = v9 | 2;
    *(_DWORD *)(a1 + 40) = v13;
    v18 = 0;
    if ((int)v10 - (int)v12 < 8)
    {
      result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v18);
      if (!result)
        return result;
      v16 = v18;
      v13 = *(_DWORD *)(a1 + 40);
      v14 = *this;
      v10 = this[1];
    }
    else
    {
      v15 = *v12;
      v14 = (char *)(v12 + 1);
      v16 = v15;
      *this = v14;
    }
    *(_QWORD *)(a1 + 24) = v16;
    *(_DWORD *)(a1 + 40) = v13 | 2;
  }
  while (v14 != v10 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_DWORD *)(v5 + 8);
    v3 = (int)(v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v4 = 9;
  return v4 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  double *v5;
  _tc_google::protobuf::io::CodedOutputStream *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteString(1, v4, a2);
  v5 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, *v5, v6);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  int v6;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_DWORD *)(v5 + 8);
    v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v4 = 9;
  return v4 + v3;
}

char *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v5;
  char *v6;
  uint64_t v7;

  v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v6 = _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  v7 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v6 = 17;
  *(_QWORD *)(v6 + 1) = v7;
  return v6 + 9;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D941120;
  if (*(_QWORD *)(a1 + 8) != a1 && !*(_QWORD *)(a1 + 32))
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
  return a1;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  double result;
  double *v8;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      v8 = (double *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      result = *v8;
      *(double *)(a1 + 24) = *v8;
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
  return result;
}

_QWORD *_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(_QWORD *result)
{
  *result = &unk_24D9412A0;
  return result;
}

void _tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(_QWORD *a1)
{
  *a1 = &unk_24D9412A0;
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D9411C8;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  uint64_t result;
  uint64_t v5;

  if (this)
  {
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = this;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = operator new();
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_DWORD *)(result + 40) = 0;
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D9411C8;
  *(_QWORD *)(result + 8) = v5;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Clear(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  unint64_t TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unint64_t Varint64Fallback;
  char *v11;
  int v12;
  unint64_t *v13;
  char v14;
  int v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL8 result;
  unint64_t v20;

  while (1)
  {
    while (1)
    {
      v5 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1))
      {
        TagFallback = 0;
      }
      else
      {
        TagFallback = *v5;
        if ((*v5 & 0x80000000) == 0)
        {
          *(_QWORD *)this = v5 + 1;
          goto LABEL_6;
        }
      }
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_6:
      if ((_DWORD)TagFallback == 8)
        break;
      if ((_DWORD)TagFallback == 17)
      {
        v12 = *(_DWORD *)(a1 + 40);
        v13 = *(unint64_t **)this;
        v8 = *((_QWORD *)this + 1);
        goto LABEL_21;
      }
      if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
        return 1;
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
    }
    v7 = *(_DWORD *)(a1 + 40) | 1;
    *(_DWORD *)(a1 + 40) = v7;
    v9 = *(char **)this;
    v8 = *((_QWORD *)this + 1);
    if (*(_QWORD *)this >= v8 || *v9 < 0)
    {
      Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
      if ((v14 & 1) == 0)
        return 0;
      v7 = *(_DWORD *)(a1 + 40);
      v11 = *(char **)this;
      v8 = *((_QWORD *)this + 1);
    }
    else
    {
      Varint64Fallback = *v9;
      v11 = v9 + 1;
      *(_QWORD *)this = v11;
    }
    *(_QWORD *)(a1 + 16) = Varint64Fallback;
    v12 = v7 | 1;
    *(_DWORD *)(a1 + 40) = v7 | 1;
    if ((unint64_t)v11 < v8 && *v11 == 17)
    {
      v13 = (unint64_t *)(v11 + 1);
      *(_QWORD *)this = v11 + 1;
LABEL_21:
      v15 = v12 | 2;
      *(_DWORD *)(a1 + 40) = v12 | 2;
      v20 = 0;
      if ((int)v8 - (int)v13 < 8)
      {
        result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v20);
        if (!result)
          return result;
        v18 = v20;
        v15 = *(_DWORD *)(a1 + 40);
        v16 = *(char **)this;
        v8 = *((_QWORD *)this + 1);
      }
      else
      {
        v17 = *v13;
        v16 = (char *)(v13 + 1);
        v18 = v17;
        *(_QWORD *)this = v16;
      }
      *(_QWORD *)(a1 + 24) = v18;
      *(_DWORD *)(a1 + 40) = v15 | 2;
      if (v16 == (char *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        break;
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

unint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v3 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    return v4 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v4 = 9;
  return v4 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t *v4;
  _tc_google::protobuf::io::CodedOutputStream *v5;
  double *v6;
  _tc_google::protobuf::io::CodedOutputStream *v7;

  v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, *v4, a2, v5);
  v6 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, *v6, v7);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  int v3;
  int v4;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v3 = ((9 * (__clz(*(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    return (v4 + v3);
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v4 = 9;
  return (v4 + v3);
}

_BYTE *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 8;
  v6 = a3 + 1;
  if (v5 < 0x80)
  {
    LOBYTE(v7) = v5;
  }
  else
  {
    do
    {
      *v6++ = v5 | 0x80;
      v7 = v5 >> 7;
      v8 = v5 >> 14;
      v5 >>= 7;
    }
    while (v8);
  }
  *v6 = v7;
  v9 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v6[1] = 17;
  *(_QWORD *)(v6 + 2) = v9;
  return v6 + 10;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  double result;
  double *v6;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      v6 = (double *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      result = *v6;
      *(double *)(a1 + 24) = *v6;
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
  return result;
}

_QWORD *_tc_google::protobuf::Map<std::string,long long>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,long long>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_21842EF9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,long long>::operator[](uint64_t a1, uint64_t a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)_tc_google::protobuf::Map<std::string,long long>::InnerMap::operator[](*(uint64_t **)(a1 + 16), a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,long long>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,long long>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  _tc_google::protobuf::Map<std::string,long long>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_21842F090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,long long>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v6;
  std::string *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    Aligned[1].__r_.__value_.__r.__words[0] = 0;
    std::string::operator=(Aligned, (const std::string *)a2);
  }
  else
  {
    v7 = (std::string *)operator new();
    Aligned = v7;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    Aligned[1].__r_.__value_.__r.__words[0] = 0;
  }
  return Aligned;
}

void sub_21842F164(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C4092066FB6);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,long long>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<std::string,long long>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    _tc_google::protobuf::Map<std::string,long long>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,long long>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,long long>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,long long>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,long long>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,long long>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<std::string,long long>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<std::string,long long>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<std::string,long long>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = _tc_google::protobuf::Map<std::string,long long>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,long long>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,long long>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,long long>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,long long>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,long long>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_21842F6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,long long>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,long long>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_21842F730(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToInt64Map>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  char *v8;
  unsigned __int8 *v9;
  unint64_t Varint64Fallback;
  char *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  char v17;

  v4 = *(_BYTE **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v4 != 10)
  {
    v12 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v12);
    *v12 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)this = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, (std::string *)(a1 + 16)))
    return 0;
  if ((int)(*((_DWORD *)this + 2) - *(_QWORD *)this) < 1
    || **(_BYTE **)this != 16
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = **(_QWORD **)(v5 + 16),
        *(_QWORD *)(a1 + 40) = _tc_google::protobuf::Map<std::string,long long>::operator[](v5, a1 + 16),
        v6 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_13:
    v13 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    v14 = *(_QWORD *)(a1 + 48);
    if (v14 != v13)
    {
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      *(_QWORD *)(a1 + 48) = v13;
    }
    v15 = *(std::string **)(v13 + 16);
    *(_DWORD *)(v13 + 40) |= 1u;
    if (v15 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v13 + 16), *(_tc_google::protobuf::Arena **)(v13 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v15 = *(std::string **)(v13 + 16);
    }
    std::string::operator=(v15, (const std::string *)(a1 + 16));
    v16 = (*(uint64_t (**)(_QWORD, _tc_google::protobuf::io::CodedInputStream *))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), this);
    if ((_DWORD)v16)
      _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
      *(_QWORD *)(a1 + 48) = 0;
    return v16;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip(this, 1u);
  v7 = *(unint64_t **)(a1 + 40);
  v9 = *(unsigned __int8 **)this;
  v8 = (char *)*((_QWORD *)this + 1);
  if (*(_QWORD *)this >= (unint64_t)v8 || (char)*v9 < 0)
  {
    Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v17 & 1) != 0)
    {
      v11 = *(char **)this;
      v8 = (char *)*((_QWORD *)this + 1);
      goto LABEL_28;
    }
    _tc_google::protobuf::Map<std::string,long long>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
    return 0;
  }
  Varint64Fallback = *v9;
  v11 = (char *)(v9 + 1);
  *(_QWORD *)this = v11;
LABEL_28:
  *v7 = Varint64Fallback;
  if (v11 == v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
  {
    *((_DWORD *)this + 8) = 0;
    v16 = 1;
    *((_BYTE *)this + 36) = 1;
    return v16;
  }
  return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
}

uint64_t _tc_google::protobuf::Map<std::string,long long>::erase(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(_QWORD *)(a1 + 16), a2, 0, &v6);
  if (!(_QWORD)v6)
    return 0;
  v4 = v6;
  v5 = v7;
  _tc_google::protobuf::Map<std::string,long long>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(_QWORD **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  *(_QWORD *)(v4 + 24) = *v6;
  _tc_google::protobuf::Map<std::string,long long>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v7 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v7 + 40) |= 1u;
  v8 = *(_QWORD *)(v7 + 16);
  if ((uint64_t *)v8 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v7 + 16), *(_tc_google::protobuf::Arena **)(v7 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v8 = *(_QWORD *)(v7 + 16);
  }
  if (*(char *)(v8 + 23) < 0)
    operator delete(*(void **)v8);
  v9 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v10)
    _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v10;
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D940D48;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

std::string *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  std::string *result;
  uint64_t v4;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  result = _tc_google::protobuf::Map<std::string,long long>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = result;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  result->__r_.__value_.__r.__words[0] = *(_QWORD *)(v4 + 24);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  const void ***v8;
  const void ***v9;
  const void ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void ***v18;
  char v19;
  BOOL v20;
  const void **v21;

  v8 = (const void ***)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10 - 1, v10))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
            v10 = (const void ***)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  const void ***v8;
  const void **v9;
  const void ***v10;
  const void ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void ***v15;
  const void ***v16;
  const void **v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = this;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &unk_24D941370;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

_QWORD *_tc_google::protobuf::Map<long long,std::string>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<long long,std::string>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_218430220(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *_tc_google::protobuf::Map<long long,std::string>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *ValueTypeInternal;
  _QWORD v8[4];
  uint64_t v9[2];

  v4 = *(uint64_t **)(a1 + 16);
  v9[0] = *a2;
  v9[1] = 0;
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::insert(v4, v9, (uint64_t)v8);
  v5 = v8[0];
  ValueTypeInternal = *(_QWORD **)(v8[0] + 8);
  if (!ValueTypeInternal)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<long long,std::string>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *(_QWORD *)(v5 + 8) = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

_QWORD *_tc_google::protobuf::Map<long long,std::string>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, _QWORD *a2)
{
  _tc_google::protobuf::Arena *v4;
  _QWORD *Aligned;
  _tc_google::protobuf::Arena *v6;

  v4 = *a1;
  if (v4)
  {
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
    *Aligned = 0;
    v6 = *a1;
    Aligned[2] = 0;
    Aligned[3] = 0;
    Aligned[1] = 0;
    _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned + 1);
    *Aligned = *a2;
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    *Aligned = *a2;
    Aligned[1] = 0;
    Aligned[2] = 0;
    Aligned[3] = 0;
  }
  return Aligned;
}

double _tc_google::protobuf::Map<long long,std::string>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  uint64_t *Aligned;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(a1, a2, 0, &v15);
  if ((_QWORD)v15)
  {
    v7 = *((_QWORD *)&v15 + 1);
    v8 = v16;
    *(_QWORD *)a3 = v15;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<long long,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(a1, a2, 0, &v12);
      v15 = v12;
      v9 = v14;
      v16 = v13;
      v17 = v14;
    }
    else
    {
      v9 = v17;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = _tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 24);
    else
      Aligned = (uint64_t *)operator new(0x18uLL);
    *(_OWORD *)Aligned = *(_OWORD *)a2;
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(a1, v9, Aligned, (uint64_t **)&v12);
    ++*a1;
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<long long,std::string>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    a3[2] = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 16);
    }
    while (v11);
    if (v10 < 8)
    {
      a3[2] = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = v6;
      a4[2] = (uint64_t *)v5;
      return result;
    }
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::TreeConvert((uint64_t)result, a2);
    v4[2] = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = v4;
    result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = (uint64_t *)result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  a3[2] = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = a3;
  result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v13, &v15, (uint64_t *)&v15);
  *a4 = (uint64_t *)result[4];
  a4[1] = v6;
  a4[2] = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  return result;
}

void _tc_google::protobuf::Map<long long,std::string>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<long long,std::string>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<long long,std::string>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<long long,std::string>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;

  v4 = *(uint64_t **)(a2 + 8 * a3);
  do
  {
    v5 = (uint64_t *)v4[2];
    result = _tc_google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(a1, (a1[1] - 1) & (a1[2] + *v4), v4, &v7);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<long long,std::string>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(a1, (a1[1] - 1) & (a1[2] + *(_QWORD *)v5[4]), (uint64_t *)v5[4], &v9);
    v6 = (_QWORD *)v5[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v5[2];
        v8 = *v7 == (_QWORD)v5;
        v5 = v7;
      }
      while (!v8);
    }
    v5 = v7;
  }
  while (v7 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_21843084C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v8;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8 * a2);
  if (!v3)
    return 0;
  v5 = 0;
  do
  {
    v8 = v3;
    std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(a3, &v8, (uint64_t *)&v8);
    ++v5;
    v6 = (uint64_t *)v3[2];
    v3[2] = 0;
    v3 = v6;
  }
  while (v6);
  return v5;
}

uint64_t *std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::insert[abi:ne180100]<std::__tree_const_iterator<long long *,std::__tree_node<long long *,void *> *,long>>(a1, *(uint64_t ***)a2, (uint64_t **)(a2 + 8));
  return a1;
}

void sub_218430918(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::insert[abi:ne180100]<std::__tree_const_iterator<long long *,std::__tree_node<long long *,void *> *,long>>(uint64_t *result, uint64_t **a2, uint64_t **a3)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_hint_unique_key_args<long long *,long long * const&>(v5, v6, v4 + 4, (uint64_t *)v4 + 4);
      v7 = v4[1];
      if (v7)
      {
        do
        {
          v8 = (uint64_t **)v7;
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (uint64_t **)v4[2];
          v9 = *v8 == (uint64_t *)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_hint_unique_key_args<long long *,long long * const&>(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__find_equal<long long *>((_QWORD *)a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((_tc_google::protobuf::Arena **)(a1 + 16), 1, 0);
    v7[4] = *a4;
    std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__find_equal<long long *>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = **a5, v7 = *(_QWORD *)a2[4], v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = **a5;
    if (*(_QWORD *)v10[4] < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = **(_QWORD **)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *(_QWORD *)a4[4])
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = **(_QWORD **)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = **a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *(_QWORD *)v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    v10 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((_tc_google::protobuf::Arena **)(a1 + 16), 1, 0);
    v10[4] = *a3;
    std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToStringMap>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this)
{
  unint64_t v4;
  _BYTE *v5;
  unint64_t Varint64Fallback;
  _BYTE *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;

  v5 = *(_BYTE **)this;
  v4 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v4 || *v5 != 8)
  {
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_15;
  }
  *(_QWORD *)this = v5 + 1;
  if ((unint64_t)(v5 + 1) >= v4 || (char)v5[1] < 0)
  {
    Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v8 & 1) == 0)
      return 0;
    v7 = *(_BYTE **)this;
    v4 = *((_QWORD *)this + 1);
  }
  else
  {
    Varint64Fallback = v5[1];
    v7 = v5 + 2;
    *(_QWORD *)this = v7;
  }
  *(_QWORD *)(a1 + 16) = Varint64Fallback;
  if ((int)v4 - (int)v7 < 1
    || *v7 != 18
    || (v9 = *(_QWORD *)(a1 + 8),
        v10 = **(_QWORD **)(v9 + 16),
        *(_QWORD *)(a1 + 24) = _tc_google::protobuf::Map<long long,std::string>::operator[](v9, (uint64_t *)(a1 + 16)),
        v10 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_15:
    v12 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    v13 = *(_QWORD *)(a1 + 32);
    if (v13 != v12)
    {
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      *(_QWORD *)(a1 + 32) = v12;
    }
    v14 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v12 + 40) |= 1u;
    *(_QWORD *)(v12 + 16) = v14;
    v15 = (*(uint64_t (**)(uint64_t, _tc_google::protobuf::io::CodedInputStream *))(*(_QWORD *)v12 + 88))(v12, this);
    if ((_DWORD)v15)
      v16 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v16))
      *(_QWORD *)(a1 + 32) = 0;
    return v15;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip(this, 1u);
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, *(std::string **)(a1 + 24)))
  {
    _tc_google::protobuf::Map<long long,std::string>::erase(*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16));
    return 0;
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 1)
    || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
  {
    return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
  }
  *((_DWORD *)this + 8) = 0;
  v15 = 1;
  *((_BYTE *)this + 36) = 1;
  return v15;
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::erase(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(*(_QWORD **)(a1 + 16), a2, 0, &v6);
  if (!(_QWORD)v6)
    return 0;
  v4 = v6;
  v5 = v7;
  _tc_google::protobuf::Map<long long,std::string>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 32) = v4;
  }
  v6 = *(__int128 **)(a1 + 24);
  v7 = *(_QWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 40) |= 2u;
  if ((uint64_t *)v7 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v4 + 24), *(_tc_google::protobuf::Arena **)(v4 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v7 = *(_QWORD *)(v4 + 24);
  }
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v8 = *v6;
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)v6 + 23) = 0;
  *(_BYTE *)v6 = 0;
  _tc_google::protobuf::Map<long long,std::string>::erase(*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16));
  v9 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v9 + 40) |= 1u;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a1 + 16);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, a2);
  if ((_DWORD)v10)
    v11 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v11))
    *(_QWORD *)(a1 + 32) = 0;
  return v10;
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 32) = v1;
  }
  else
  {
    result = operator new();
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_QWORD *)(result + 24) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D940EC8;
  return result;
}

__n128 _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 136))(*(_QWORD *)(a1 + 32));
  v2 = (void **)_tc_google::protobuf::Map<long long,std::string>::operator[](*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16));
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 40) |= 2u;
  v4 = *(_QWORD *)(v3 + 24);
  if ((uint64_t *)v4 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v3 + 24), *(_tc_google::protobuf::Arena **)(v3 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v4 = *(_QWORD *)(v3 + 24);
    v2 = *(void ***)(a1 + 24);
  }
  if (*((char *)v2 + 23) < 0)
    operator delete(*v2);
  result = *(__n128 *)v4;
  v2[2] = *(void **)(v4 + 16);
  *(__n128 *)v2 = result;
  *(_BYTE *)(v4 + 23) = 0;
  *(_BYTE *)v4 = 0;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,false>(__n128 *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  int64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        if (v6 < *v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = *(_QWORD *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 >= v9)
            {
              v10 = (_QWORD *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(__int128 *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_QWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(_QWORD *)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

_QWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>(_QWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v2 = *a1;
  if (*a1 >= *((_QWORD *)a2 - 2))
  {
    v5 = a1 + 2;
    do
    {
      v3 = v5;
      if (v5 >= (_QWORD *)a2)
        break;
      v5 += 2;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[2];
      v3 += 2;
    }
    while (v2 >= v4);
  }
  if (v3 < (_QWORD *)a2)
  {
    do
      v6 = *((_QWORD *)a2-- - 2);
    while (v2 < v6);
  }
  v7 = a1[1];
  while (v3 < (_QWORD *)a2)
  {
    v11 = *(_OWORD *)v3;
    *(_OWORD *)v3 = *a2;
    *a2 = v11;
    do
    {
      v8 = v3[2];
      v3 += 2;
    }
    while (v2 >= v8);
    do
      v9 = *((_QWORD *)a2-- - 2);
    while (v2 < v9);
  }
  if (v3 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v3 - 1);
  *(v3 - 2) = v2;
  *(v3 - 1) = v7;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 2];
    v2 += 2;
  }
  while (v5 < v3);
  v6 = &a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v6 >= a2)
        break;
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= v3);
  }
  v9 = &a1[v2];
  if (v6 < a2)
  {
    v10 = a2;
    do
    {
      v11 = *(_OWORD *)v9;
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_OWORD *)v10 = v11;
      do
      {
        v12 = v9[2];
        v9 += 2;
      }
      while (v12 < v3);
      do
      {
        v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= v3);
    }
    while (v9 < v10);
  }
  if (v9 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v9 - 1);
  *(v9 - 2) = v3;
  *(v9 - 1) = v4;
  return v9 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (_QWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      v9 = (_QWORD *)(a1 + 48);
      if ((_QWORD *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (_QWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_QWORD *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(__int128 *a1, uint64_t *a2, uint64_t *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(__int128 *a1, uint64_t *a2, uint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(a1, a2, a3, a4).n128_u64[0];
  if ((int64_t)a5->n128_u64[0] < (int64_t)a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if ((int64_t)a4->n128_u64[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_QWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(char *a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v30;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_QWORD *)v14 < *(_QWORD *)a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v30 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[16 * v17 + 16];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && *(_QWORD *)v19 < *((_QWORD *)v19 + 2))
          {
            v19 += 16;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 16;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v30;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v30;
          v22 = v19 - a1 + 16;
          if (v22 >= 17)
          {
            v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            v24 = &a1[16 * v23];
            v25 = *(_QWORD *)v19;
            if (*(_QWORD *)v24 < *(_QWORD *)v19)
            {
              v26 = *((_QWORD *)v19 + 1);
              do
              {
                v27 = v19;
                v19 = v24;
                *(_OWORD *)v27 = *(_OWORD *)v24;
                if (!v23)
                  break;
                v23 = (v23 - 1) >> 1;
                v24 = &a1[16 * v23];
              }
              while (*(_QWORD *)v24 < v25);
              *(_QWORD *)v19 = v25;
              *((_QWORD *)v19 + 1) = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (_QWORD *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[2];
        if (*v8 <= v11)
          v10 = v8[2];
        if (*v8 < v11)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        v13 = a4[1];
        do
        {
          v14 = a4;
          a4 = v8;
          *v14 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v15 = (2 * v7) | 1;
          v8 = (_QWORD *)(result + 16 * v15);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v16 = *v8;
            v7 = v15;
          }
          else
          {
            v16 = *v8;
            v17 = v8[2];
            if (*v8 <= v17)
              v16 = v8[2];
            if (*v8 >= v17)
              v7 = v15;
            else
              v8 += 2;
          }
        }
        while (v16 >= v12);
        *a4 = v12;
        a4[1] = v13;
      }
    }
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 32) = this;
  }
  else
  {
    result = operator new();
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_QWORD *)(result + 24) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)result = &unk_24D9414B0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

_QWORD *_tc_google::protobuf::Map<std::string,double>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,double>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_218431ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,double>::operator[](uint64_t a1, uint64_t a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)_tc_google::protobuf::Map<std::string,double>::InnerMap::operator[](*(uint64_t **)(a1 + 16), a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,long long>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,double>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  _tc_google::protobuf::Map<std::string,double>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_218431FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double _tc_google::protobuf::Map<std::string,double>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<std::string,double>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    _tc_google::protobuf::Map<std::string,double>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,double>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,double>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,double>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,double>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,double>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<std::string,double>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<std::string,double>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<std::string,double>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = _tc_google::protobuf::Map<std::string,double>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,double>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,double>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,double>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,double>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,double>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_21843252C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,double>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,double>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_218432588(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToDoubleMap>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::MergePartialFromCodedStream(uint64_t a1, char **this)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  __n128 v18;
  unint64_t v20;

  v4 = *this;
  if (*this < this[1] && *v4 == 10)
  {
    *this = v4 + 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes(this, (std::string *)(a1 + 16)))
      return 0;
    if ((int)(*((_DWORD *)this + 2) - *this) >= 1 && **this == 17)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = **(_QWORD **)(v5 + 16);
      *(_QWORD *)(a1 + 40) = _tc_google::protobuf::Map<std::string,double>::operator[](v5, a1 + 16);
      if (v6 != **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16))
      {
        _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)this, 1u);
        v7 = *(unint64_t **)(a1 + 40);
        v20 = 0;
        v8 = *this;
        v9 = this[1];
        if ((int)((_DWORD)v9 - *this) >= 8)
        {
          v11 = *(_QWORD *)v8;
          v10 = v8 + 8;
          v12 = v11;
          *this = v10;
LABEL_9:
          *v7 = v12;
          if (v10 != v9 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
            return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
          *((_DWORD *)this + 8) = 0;
          v13 = 1;
          *((_BYTE *)this + 36) = 1;
          return v13;
        }
        if (_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v20))
        {
          v12 = v20;
          v10 = *this;
          v9 = this[1];
          goto LABEL_9;
        }
        _tc_google::protobuf::Map<std::string,long long>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
        return 0;
      }
    }
  }
  else
  {
    v14 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v14);
    *v14 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  v15 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v16 = *(_QWORD *)(a1 + 48);
  if (v16 != v15)
  {
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    *(_QWORD *)(a1 + 48) = v15;
  }
  v17 = *(std::string **)(v15 + 16);
  *(_DWORD *)(v15 + 40) |= 1u;
  if (v17 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v15 + 16), *(_tc_google::protobuf::Arena **)(v15 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v17 = *(std::string **)(v15 + 16);
  }
  std::string::operator=(v17, (const std::string *)(a1 + 16));
  v13 = (*(uint64_t (**)(_QWORD, char **))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), this);
  if ((_DWORD)v13)
    v18.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v18))
    *(_QWORD *)(a1 + 48) = 0;
  return v13;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __n128 v11;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(_QWORD **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  *(_QWORD *)(v4 + 24) = *v6;
  _tc_google::protobuf::Map<std::string,long long>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v7 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v7 + 40) |= 1u;
  v8 = *(_QWORD *)(v7 + 16);
  if ((uint64_t *)v8 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v7 + 16), *(_tc_google::protobuf::Arena **)(v7 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v8 = *(_QWORD *)(v7 + 16);
  }
  if (*(char *)(v8 + 23) < 0)
    operator delete(*(void **)v8);
  v9 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v10)
    v11.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v11))
    *(_QWORD *)(a1 + 48) = 0;
  return v10;
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D941048;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  std::string *v3;
  uint64_t v4;
  double result;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = _tc_google::protobuf::Map<std::string,double>::operator[](*(_QWORD *)(a1 + 8), a1 + 16);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  result = *(double *)(v4 + 24);
  *(double *)&v3->__r_.__value_.__l.__data_ = result;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  const void ***v8;
  const void ***v9;
  const void ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void ***v18;
  char v19;
  BOOL v20;
  const void **v21;

  v8 = (const void ***)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10 - 1, v10))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
            v10 = (const void ***)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  const void ***v8;
  const void **v9;
  const void ***v10;
  const void ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void ***v15;
  const void ***v16;
  const void **v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = this;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &unk_24D941598;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

_QWORD *_tc_google::protobuf::Map<long long,double>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<long long,double>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_218433018(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *_tc_google::protobuf::Map<long long,double>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *ValueTypeInternal;
  _QWORD v8[4];
  uint64_t v9[2];

  v4 = *(uint64_t **)(a1 + 16);
  v9[0] = *a2;
  v9[1] = 0;
  _tc_google::protobuf::Map<long long,double>::InnerMap::insert(v4, v9, (uint64_t)v8);
  v5 = v8[0];
  ValueTypeInternal = *(_QWORD **)(v8[0] + 8);
  if (!ValueTypeInternal)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<long long,double>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *(_QWORD *)(v5 + 8) = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

_QWORD *_tc_google::protobuf::Map<long long,double>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, _QWORD *a2)
{
  _tc_google::protobuf::Arena *v3;
  _QWORD *result;

  v3 = *a1;
  if (v3)
  {
    result = _tc_google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x24BEDB790], 16);
    *result = 0;
    result[1] = 0;
    *result = *a2;
  }
  else
  {
    result = (_QWORD *)operator new();
    *result = *a2;
    result[1] = 0;
  }
  return result;
}

double _tc_google::protobuf::Map<long long,double>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  uint64_t *Aligned;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(a1, a2, 0, &v15);
  if ((_QWORD)v15)
  {
    v7 = *((_QWORD *)&v15 + 1);
    v8 = v16;
    *(_QWORD *)a3 = v15;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<long long,double>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(a1, a2, 0, &v12);
      v15 = v12;
      v9 = v14;
      v16 = v13;
      v17 = v14;
    }
    else
    {
      v9 = v17;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = _tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 24);
    else
      Aligned = (uint64_t *)operator new(0x18uLL);
    *(_OWORD *)Aligned = *(_OWORD *)a2;
    _tc_google::protobuf::Map<long long,double>::InnerMap::InsertUnique(a1, v9, Aligned, (uint64_t **)&v12);
    ++*a1;
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<long long,double>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<long long,double>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<long long,double>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    a3[2] = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 16);
    }
    while (v11);
    if (v10 < 8)
    {
      a3[2] = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = v6;
      a4[2] = (uint64_t *)v5;
      return result;
    }
    _tc_google::protobuf::Map<long long,double>::InnerMap::TreeConvert((uint64_t)result, a2);
    v4[2] = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = v4;
    result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = (uint64_t *)result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  a3[2] = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = a3;
  result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v13, &v15, (uint64_t *)&v15);
  *a4 = (uint64_t *)result[4];
  a4[1] = v6;
  a4[2] = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  return result;
}

void _tc_google::protobuf::Map<long long,double>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<long long,double>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<long long,double>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<long long,double>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;

  v4 = *(uint64_t **)(a2 + 8 * a3);
  do
  {
    v5 = (uint64_t *)v4[2];
    result = _tc_google::protobuf::Map<long long,double>::InnerMap::InsertUnique(a1, (a1[1] - 1) & (a1[2] + *v4), v4, &v7);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<long long,double>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    _tc_google::protobuf::Map<long long,double>::InnerMap::InsertUnique(a1, (a1[1] - 1) & (a1[2] + *(_QWORD *)v5[4]), (uint64_t *)v5[4], &v9);
    v6 = (_QWORD *)v5[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v5[2];
        v8 = *v7 == (_QWORD)v5;
        v5 = v7;
      }
      while (!v8);
    }
    v5 = v7;
  }
  while (v7 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<long long,double>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<long long *,_tc_google::protobuf::Map<long long,double>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,double>::MapAllocator<long long *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_218433614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<long long *,_tc_google::protobuf::Map<long long,double>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,double>::MapAllocator<long long *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::insert[abi:ne180100]<std::__tree_const_iterator<long long *,std::__tree_node<long long *,void *> *,long>>(a1, *(uint64_t ***)a2, (uint64_t **)(a2 + 8));
  return a1;
}

void sub_218433670(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToDoubleMap>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this)
{
  unint64_t v4;
  _BYTE *v5;
  unint64_t Varint64Fallback;
  _BYTE *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  unint64_t *v23;
  unint64_t v24;

  v5 = *(_BYTE **)this;
  v4 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this < v4 && *v5 == 8)
  {
    *(_QWORD *)this = v5 + 1;
    if ((unint64_t)(v5 + 1) >= v4 || (char)v5[1] < 0)
    {
      Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
      if ((v8 & 1) == 0)
        return 0;
      v7 = *(_BYTE **)this;
      v4 = *((_QWORD *)this + 1);
    }
    else
    {
      Varint64Fallback = v5[1];
      v7 = v5 + 2;
      *(_QWORD *)this = v7;
    }
    *(_QWORD *)(a1 + 16) = Varint64Fallback;
    if ((int)v4 - (int)v7 >= 1 && *v7 == 17)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = **(_QWORD **)(v10 + 16);
      *(_QWORD *)(a1 + 24) = _tc_google::protobuf::Map<long long,double>::operator[](v10, (uint64_t *)(a1 + 16));
      if (v11 != **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16))
      {
        _tc_google::protobuf::io::CodedInputStream::Skip(this, 1u);
        v12 = *(unint64_t **)(a1 + 24);
        v24 = 0;
        v13 = *(unint64_t **)this;
        v14 = (_QWORD *)*((_QWORD *)this + 1);
        if ((int)((_DWORD)v14 - *(_QWORD *)this) >= 8)
        {
          v16 = *v13;
          v15 = v13 + 1;
          v17 = v16;
          *(_QWORD *)this = v15;
LABEL_15:
          *v12 = v17;
          if (v15 != v14 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
            return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
          *((_DWORD *)this + 8) = 0;
          v9 = 1;
          *((_BYTE *)this + 36) = 1;
          return v9;
        }
        v23 = v12;
        if (_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v24))
        {
          v17 = v24;
          v15 = *(_QWORD **)this;
          v14 = (_QWORD *)*((_QWORD *)this + 1);
          v12 = v23;
          goto LABEL_15;
        }
        _tc_google::protobuf::Map<long long,double>::erase(*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16));
        return 0;
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  v18 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v19 = *(_QWORD *)(a1 + 32);
  if (v19 != v18)
  {
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    *(_QWORD *)(a1 + 32) = v18;
  }
  v20 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v18 + 40) |= 1u;
  *(_QWORD *)(v18 + 16) = v20;
  v9 = (*(uint64_t (**)(uint64_t, _tc_google::protobuf::io::CodedInputStream *))(*(_QWORD *)v18 + 88))(v18, this);
  if ((_DWORD)v9)
    v21.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v21))
    *(_QWORD *)(a1 + 32) = 0;
  return v9;
}

uint64_t _tc_google::protobuf::Map<long long,double>::erase(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(*(_QWORD **)(a1 + 16), a2, 0, &v6);
  if (!(_QWORD)v6)
    return 0;
  v4 = v6;
  v5 = v7;
  _tc_google::protobuf::Map<long long,double>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 32) = v4;
  }
  v6 = *(_QWORD **)(a1 + 24);
  *(_DWORD *)(v4 + 40) |= 2u;
  *(_QWORD *)(v4 + 24) = *v6;
  _tc_google::protobuf::Map<long long,double>::erase(*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16));
  v7 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v7 + 40) |= 1u;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 16);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(v7, a2);
  if ((_DWORD)v8)
    v9.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v9))
    *(_QWORD *)(a1 + 32) = 0;
  return v8;
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  {
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = v1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = operator new();
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_DWORD *)(result + 40) = 0;
  }
  *(_QWORD *)result = &unk_24D9411C8;
  return result;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 136))(*(_QWORD *)(a1 + 32));
  v2 = (double *)_tc_google::protobuf::Map<long long,double>::operator[](*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16));
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 40) |= 2u;
  result = *(double *)(v3 + 24);
  *v2 = result;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*,false>(__n128 *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  int64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (_QWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      v9 = (_QWORD *)(a1 + 48);
      if ((_QWORD *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (_QWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_QWORD *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = this;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = operator new();
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
  }
  *(_QWORD *)result = &unk_24D941680;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::~MapEntryWrapper(_QWORD *a1)
{
  *a1 = &unk_24D9412A0;
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Vector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FloatVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Range>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Set>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleRange>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_DataStructures_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double turi::optimization::compute_residual(_QWORD *a1)
{
  double result;
  _QWORD *v2;
  _BYTE v3[8];
  uint64_t v4;
  _QWORD *v5;

  if (!a1[1])
    return 0.0;
  v2 = a1;
  v4 = *a1;
  v5 = &v2;
  Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v3);
  return result;
}

int *turi::optimization::translate_solver_status@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *result;
  if (v3 < 0xA)
    return (int *)MEMORY[0x219A19390](a2, off_24D941730[v3]);
  return result;
}

void sub_2184341C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *turi::optimization::get_recourse_actions@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v3;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  switch(LODWORD(result->__r_.__value_.__l.__data_))
  {
    case 0:
    case 2:
    case 5:
      return (std::string *)MEMORY[0x219A19390](a2, "");
    case 1:
    case 4:
      MEMORY[0x219A19390](a2, "Internal error.");
      goto LABEL_5;
    case 3:
    case 9:
LABEL_5:
      std::string::append(a2, "This model may not be optimal. To improve it, consider ");
      goto LABEL_6;
    case 6:
    case 7:
    case 8:
      std::string::append(a2, "This model may not be ideal. To improve it, consider doing one of the following:\n");
      std::string::append(a2, "(a) Increasing the regularization.\n");
      std::string::append(a2, "(b) Standardizing the input data.\n");
      std::string::append(a2, "(c) Removing highly correlated features.\n");
LABEL_6:
      result = std::string::append(a2, v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_2184342B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t turi::optimization::log_solver_summary_stats(turi::optimization *this, const turi::optimization::_solver_return *a2)
{
  char v2;
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  std::string::size_type *v12;
  uint64_t v13;
  __int128 v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type size;
  const std::locale::facet *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  _QWORD *v25;
  int *v26;
  std::string *v27;
  std::string::size_type v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  int *v31;
  file_logger *v32;
  file_logger *started;
  uint64_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  int *v37;
  file_logger *v38;
  file_logger *v39;
  uint64_t v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  int *v43;
  file_logger *v44;
  file_logger *v45;
  uint64_t v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  std::string::size_type v49;
  uint64_t result;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  unsigned int v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *exception;
  _QWORD *v81;
  _QWORD *v82;
  std::string v83;
  void *v84[2];
  char v85;
  void *v86;
  char v87;
  _QWORD v88[2];
  std::string::size_type v89;
  uint64_t v90[8];
  std::string v91;
  uint64_t v92;
  std::string v93;
  std::string v94;
  uint64_t v95;
  void *__p;
  char v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char v101;
  uint64_t v102;

  v2 = (char)a2;
  v102 = *MEMORY[0x24BDAC8D0];
  v99 = 0;
  v100 = 0;
  v101 = 0;
  if (*((double *)this + 9) == 1.0e20)
    turi::flexible_type::operator=(&v99, "Not computed.");
  else
    turi::flexible_type::operator=<double>((uint64_t)&v99, (_QWORD *)this + 9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Solution time     = ", 20);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" sec", 4);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale((std::locale *)&v94);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Loss              = ", 20);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)&v94);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Iterations        = ", 20);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)&v94);
  std::ostream::put();
  std::ostream::flush();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Solution Accuracy = ", 20);
  v12 = (std::string::size_type *)MEMORY[0x24BEDB7F0];
  v13 = MEMORY[0x24BEDB848];
  switch(v101)
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v94);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_13;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v94);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_13:
      v94.__r_.__value_.__r.__words[0] = *v12;
      v15 = v12[9];
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words
                                + *(_QWORD *)(v94.__r_.__value_.__r.__words[0] - 24)) = v12[8];
      v94.__r_.__value_.__r.__words[2] = v15;
      v95 = v13 + 16;
      if (v97 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v98);
      goto LABEL_20;
    case 2:
      if (*(char *)(v99 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(v99 + 8), *(_QWORD *)(v99 + 16));
      }
      else
      {
        v14 = *(_OWORD *)(v99 + 8);
        v93.__r_.__value_.__r.__words[2] = *(_QWORD *)(v99 + 24);
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v14;
      }
      goto LABEL_20;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v94, (_QWORD *)(v99 + 8));
      goto LABEL_20;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v94, (uint64_t *)(v99 + 8));
      goto LABEL_20;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v94, (_QWORD *)(v99 + 8));
      goto LABEL_20;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v99, &v93);
      goto LABEL_20;
    case 7:
      memset(&v93, 0, sizeof(v93));
      goto LABEL_20;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_20;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v94, (_QWORD *)(v99 + 8));
LABEL_20:
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v93;
      else
        v16 = (std::string *)v93.__r_.__value_.__r.__words[0];
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      else
        size = v93.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v16, size);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
      v18 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale((std::locale *)&v94);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Number of Passes  = ", 20);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
      v20 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale((std::locale *)&v94);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Function evals    = ", 20);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
      v22 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale((std::locale *)&v94);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Gradient evals    = ", 20);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
      v24 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale((std::locale *)&v94);
      std::ostream::put();
      std::ostream::flush();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Solver Status     = ", 20);
      v26 = (int *)((char *)this + 100);
      turi::optimization::translate_solver_status(v26, &v94);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v94;
      else
        v27 = (std::string *)v94.__r_.__value_.__r.__words[0];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      else
        v28 = v94.__r_.__value_.__l.__size_;
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
      v30 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
      std::locale::~locale((std::locale *)&v93);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      v31 = (int *)global_logger();
      if (v31[169] > 2)
        goto LABEL_43;
      if (cppipc::must_cancel((cppipc *)v31))
        goto LABEL_105;
      v32 = (file_logger *)global_logger();
      started = file_logger::start_stream(v32, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/utils.cpp", "log_solver_summary_stats", 426, 1);
      std::stringbuf::str();
      v34 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v86);
      v35 = pthread_getspecific(*(_QWORD *)(v34 + 592));
      if (v35)
      {
        if (*((_BYTE *)v35 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(v35[2] - 24) + 16));
          v36 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
          std::locale::~locale((std::locale *)&v94);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v34);
          if (*(_DWORD *)(v34 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (v87 < 0)
        operator delete(v86);
LABEL_43:
      std::string::basic_string[abi:ne180100]<0>(&v94, "");
      std::string::operator=(&v91, &v94);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v90);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      v37 = (int *)global_logger();
      if (v37[169] > 4)
        goto LABEL_51;
      if (cppipc::must_cancel((cppipc *)v37))
        goto LABEL_105;
      v38 = (file_logger *)global_logger();
      v39 = file_logger::start_stream(v38, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/utils.cpp", "log_solver_summary_stats", 430, 1);
      turi::optimization::translate_solver_status(v26, v84);
      v40 = file_logger::operator<<<std::string>((uint64_t)v39, (uint64_t)v84);
      v41 = pthread_getspecific(*(_QWORD *)(v40 + 592));
      if (v41)
      {
        if (*((_BYTE *)v41 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(v41[2] - 24) + 16));
          v42 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
          std::locale::~locale((std::locale *)&v94);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v40);
          if (*(_DWORD *)(v40 + 600) == 7)
          {
            __print_back_trace();
            v81 = __cxa_allocate_exception(8uLL);
            *v81 = "LOG_FATAL encountered";
            __cxa_throw(v81, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (v85 < 0)
      {
        operator delete(v84[0]);
        if ((v2 & 1) != 0)
          goto LABEL_60;
      }
      else
      {
LABEL_51:
        if ((v2 & 1) != 0)
          goto LABEL_60;
      }
      v43 = (int *)global_logger();
      if (v43[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v43))
LABEL_105:
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v44 = (file_logger *)global_logger();
        v45 = file_logger::start_stream(v44, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/utils.cpp", "log_solver_summary_stats", 432, 1);
        turi::optimization::get_recourse_actions((std::string *)v26, &v83);
        v46 = file_logger::operator<<<std::string>((uint64_t)v45, (uint64_t)&v83);
        v47 = pthread_getspecific(*(_QWORD *)(v46 + 592));
        if (v47)
        {
          if (*((_BYTE *)v47 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(_QWORD *)(v47[2] - 24) + 16));
            v48 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
            std::locale::~locale((std::locale *)&v94);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v46);
            if (*(_DWORD *)(v46 + 600) == 7)
            {
              __print_back_trace();
              v82 = __cxa_allocate_exception(8uLL);
              *v82 = "LOG_FATAL encountered";
              __cxa_throw(v82, MEMORY[0x24BEDB718], 0);
            }
          }
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
      }
LABEL_60:
      v88[0] = *v12;
      v49 = v12[9];
      *(_QWORD *)((char *)v88 + *(_QWORD *)(v88[0] - 24)) = v12[8];
      v89 = v49;
      v90[0] = v13 + 16;
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = MEMORY[0x219A198F4](&v92);
      switch(v101)
      {
        case 2:
          v51 = (unint64_t *)v99;
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
          {
            v54 = v99;
            if (v99)
            {
              if (*(char *)(v99 + 31) < 0)
                operator delete(*(void **)(v99 + 8));
              v55 = v54;
              v56 = 0x1012C404EF22A49;
              goto LABEL_103;
            }
          }
          break;
        case 3:
          v68 = (unint64_t *)v99;
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            v71 = v99;
            if (v99)
            {
              v72 = *(void **)(v99 + 8);
              if (v72)
              {
                *(_QWORD *)(v99 + 16) = v72;
                operator delete(v72);
              }
              v55 = v71;
              v56 = 0x1080C409938AC02;
              goto LABEL_103;
            }
          }
          break;
        case 4:
          v57 = (unint64_t *)v99;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = v99;
            if (v99)
            {
              v94.__r_.__value_.__r.__words[0] = v99 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
              goto LABEL_96;
            }
          }
          break;
        case 5:
          v73 = (unint64_t *)v99;
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
          {
            v60 = v99;
            if (v99)
            {
              v94.__r_.__value_.__r.__words[0] = v99 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
LABEL_96:
              v55 = v60;
              v56 = 0x1020C405E66F15BLL;
              goto LABEL_103;
            }
          }
          break;
        case 8:
          v76 = (unint64_t *)v99;
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
          {
            v79 = v99;
            if (v99)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v99 + 16));
              v55 = v79;
              v67 = -235920773;
              goto LABEL_102;
            }
          }
          break;
        case 9:
          v61 = (unint64_t *)v99;
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            v64 = v99;
            if (v99)
            {
              v65 = *(void **)(v99 + 48);
              if (v65)
              {
                *(_QWORD *)(v99 + 56) = v65;
                operator delete(v65);
              }
              v66 = *(void **)(v64 + 24);
              if (v66)
              {
                *(_QWORD *)(v64 + 32) = v66;
                operator delete(v66);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v64 + 8);
              v55 = v64;
              v67 = 2071181815;
LABEL_102:
              v56 = v67 | 0x1030C4000000000;
LABEL_103:
              result = MEMORY[0x219A19A08](v55, v56);
            }
          }
          break;
        default:
          return result;
      }
      return result;
    default:
      result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
}

void sub_218434F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::locale a56,uint64_t a57,uint64_t a58,uint64_t a59,std::locale a60)
{
  uint64_t v60;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unsigned int v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  void *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;

  std::locale::~locale(&a60);
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  switch(*(_BYTE *)(v60 - 108))
  {
    case 2:
      v62 = *(unint64_t **)(v60 - 120);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        goto LABEL_41;
      v65 = *(_QWORD *)(v60 - 120);
      if (!v65)
        goto LABEL_41;
      if (*(char *)(v65 + 31) < 0)
        operator delete(*(void **)(v65 + 8));
      v66 = (_QWORD *)v65;
      v67 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v77 = *(unint64_t **)(v60 - 120);
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (v79)
        goto LABEL_41;
      v80 = *(_QWORD **)(v60 - 120);
      if (!v80)
        goto LABEL_41;
      v81 = (void *)v80[1];
      if (v81)
      {
        v80[2] = v81;
        operator delete(v81);
      }
      v66 = v80;
      v67 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v68 = *(unint64_t **)(v60 - 120);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (v70)
        goto LABEL_41;
      v71 = *(_QWORD **)(v60 - 120);
      if (!v71)
        goto LABEL_41;
      a21 = (uint64_t)(v71 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
      goto LABEL_33;
    case 5:
      v82 = *(unint64_t **)(v60 - 120);
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (v84)
        goto LABEL_41;
      v71 = *(_QWORD **)(v60 - 120);
      if (!v71)
        goto LABEL_41;
      a21 = (uint64_t)(v71 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
LABEL_33:
      v66 = v71;
      v67 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v85 = *(unint64_t **)(v60 - 120);
      do
      {
        v86 = __ldaxr(v85);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v85));
      if (v87)
        goto LABEL_41;
      v88 = *(_QWORD *)(v60 - 120);
      if (!v88)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v88 + 16));
      v66 = (_QWORD *)v88;
      v76 = -235920773;
      goto LABEL_39;
    case 9:
      v72 = *(unint64_t **)(v60 - 120);
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (v74)
        goto LABEL_41;
      v75 = *(_QWORD **)(v60 - 120);
      if (!v75)
        goto LABEL_41;
      v66 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v75);
      v76 = 2071181815;
LABEL_39:
      v67 = v76 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v66, v67);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

double turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  double *v3;
  int *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double result;

  v2 = a2[3];
  if (v2 >= 1)
  {
    v3 = (double *)a2[1];
    v4 = (int *)a2[2];
    v5 = *a1;
    do
    {
      v6 = *v3++;
      v7 = v6;
      v8 = *v4++;
      result = v7 + *(double *)(v5 + 8 * v8);
      *(double *)(v5 + 8 * v8) = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_2184353B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_21843553C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::SparseVector<double,0,int>::insert(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *result;

  v4 = a1 + 1;
  v5 = a1[3];
  Eigen::internal::CompressedStorage<double,int>::resize((uint64_t)(a1 + 1), v5 + 1, 1.0);
  v6 = a1[2];
  if (v5 >= 1)
  {
    v7 = 8 * v5 - 8;
    v8 = (_DWORD *)(v6 + 4 * v5);
    while (1)
    {
      v9 = (int)*(v8 - 1);
      if (v9 <= a2)
        break;
      --v5;
      *v8-- = v9;
      *(_QWORD *)(*v4 + v7 + 8) = *(_QWORD *)(*v4 + v7);
      v7 -= 8;
      if ((unint64_t)(v5 + 1) <= 1)
      {
        v5 = 0;
        break;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = a2;
  result = (_QWORD *)(*v4 + 8 * v5);
  *result = 0;
  return result;
}

uint64_t Eigen::internal::CompressedStorage<double,int>::resize(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  std::bad_alloc *exception;
  std::bad_alloc *v13;

  v4 = result;
  if (*(_QWORD *)(result + 24) < a2)
  {
    v5 = (double)a2 * a3;
    if ((uint64_t)v5 + a2 >= 0x7FFFFFFF)
      v6 = 0x7FFFFFFFLL;
    else
      v6 = (uint64_t)v5 + a2;
    if (v6 < a2)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v13 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v13, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v7 = (void *)operator new[]();
    result = operator new[]();
    v8 = (void *)result;
    if (*(_QWORD *)(v4 + 16) >= v6)
      v9 = v6;
    else
      v9 = *(_QWORD *)(v4 + 16);
    v10 = *(const void **)v4;
    if (v9 <= 0)
    {
      v11 = *(const void **)(v4 + 8);
    }
    else
    {
      memcpy(v7, *(const void **)v4, 8 * v9);
      v11 = *(const void **)(v4 + 8);
      result = (uint64_t)memcpy(v8, v11, 4 * v9);
    }
    *(_QWORD *)v4 = v7;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 24) = v6;
    if (v11)
      result = MEMORY[0x219A199F0](v11, 0x1000C8052888210);
    if (v10)
      result = MEMORY[0x219A199F0](v10, 0x1000C8000313F17);
  }
  *(_QWORD *)(v4 + 16) = a2;
  return result;
}

void sub_218435754(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_80()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_utils_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_218435AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void sub_218435D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<turi::flexible_type>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_218435E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_218436118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  unint64_t **v9;
  _QWORD *v10;
  unint64_t *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unint64_t *v16;
  unint64_t v17;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  result[2] = 0;
  v9 = (unint64_t **)(result + 2);
  v10 = *a3;
  *((_DWORD *)result + 6) = 0;
  *((_BYTE *)result + 28) = 0;
  if (v10 != result + 2)
  {
    v11 = (unint64_t *)*v10;
    *(_QWORD *)((char *)result + 21) = *(_QWORD *)((char *)v10 + 5);
    *v9 = v11;
    v12 = *((unsigned __int8 *)v10 + 12);
    *((_BYTE *)result + 28) = v12;
    v13 = v12 > 9;
    v14 = (1 << v12) & 0x33C;
    if (!v13 && v14 != 0)
    {
      v16 = *v9;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
  }
  result[4] = 0;
  *((_DWORD *)result + 10) = 0;
  *((_BYTE *)result + 44) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x219A19684]();
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void __cxx_global_var_init_8_5()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_sketch_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_additional_sframe_utilities_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184363B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2184363D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double turi::variant_converter<double,void>::get(uint64_t a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  double v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  double v39[3];
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((_QWORD *)v2 != v41)
  {
    v4 = *(_QWORD *)v2;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v2 + 5);
    v41[0] = v4;
    BYTE4(v41[1]) = *(_BYTE *)(v2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v41[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v39[0] = 0.0;
  turi::flexible_type_internals::ft_converter<1>::get(v39, (turi::flexible_type_internals *)v41, v3);
  v8 = v39[0];
  switch(BYTE4(v41[1]))
  {
    case 2:
      v9 = (unint64_t *)v41[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          v30 = *(void **)(v41[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v41[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v41[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v41[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v23 = *(void **)(v41[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v41[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_218436694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 44))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 56);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 56);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 56);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 56);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 56);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 56);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 56);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 56);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 56);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 56);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 56);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 56);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

double *turi::flexible_type_internals::ft_converter<1>::get(double *result, turi::flexible_type_internals *this, const char *a3)
{
  double v3;

  if (*((_BYTE *)this + 12))
  {
    if (*((_BYTE *)this + 12) != 1)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"numeric value", a3);
    v3 = *(double *)this;
  }
  else
  {
    v3 = (double)*(uint64_t *)this;
  }
  *result = v3;
  return result;
}

void sub_218436998()
{
  turi::flexible_type_internals::ft_converter<1>::get(double &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void turi::flexible_type_internals::ft_converter<1>::get(double &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 138, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_internals::ft_converter<1>::get(double &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218436A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_internal_demo_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  std::string *v13;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v13 = (std::string *)(a7 + v11 - 72);
      boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(a3 + v11 - 80), *(_DWORD *)(a3 + v11 - 80) ^ (*(int *)(a3 + v11 - 80) >> 31), &v13, a3 + v11 - 72);
      *(_DWORD *)(a7 + v11 - 80) = *(_DWORD *)(a3 + v11 - 80) ^ (*(int *)(a3 + v11 - 80) >> 31);
      v11 -= 80;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_218436C7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 80)
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<turi::flexible_type>>(uint64_t a1, __n128 *a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __n128 result;
  void **v12;

  v4 = (void **)operator new();
  v5 = v4;
  *v4 = 0;
  v4[1] = 0;
  v6 = v4 + 1;
  v4[2] = 0;
  v4[3] = 0;
  *v4 = (void *)1;
  if (*v4 == (void *)1)
  {
    v7 = v4;
  }
  else
  {
    v7 = (void **)operator new();
    v8 = (uint64_t *)v5[1];
    *v7 = *v5;
    v7[2] = 0;
    v7[3] = 0;
    v7[1] = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v7 + 1, v8, (uint64_t *)v5[2], ((_BYTE *)v5[2] - (_BYTE *)v8) >> 4);
    *v7 = (void *)1;
    do
    {
      v9 = __ldaxr((unint64_t *)v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unint64_t *)v5));
    if (!v10)
    {
      v12 = v6;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v12);
      MEMORY[0x219A19A08](v5, 0x1020C405E66F15BLL);
    }
  }
  std::vector<turi::flexible_type>::__vdeallocate(v7 + 1);
  result = *a2;
  *(__n128 *)(v7 + 1) = *a2;
  v7[3] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 4;
  *(_DWORD *)a1 = 0;
  return result;
}

void sub_218436E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  MEMORY[0x219A19A08](v11, 0x1020C405E66F15BLL);
  do
    v13 = __ldaxr((unint64_t *)v10);
  while (__stlxr(v13 - 1, (unint64_t *)v10));
  if (v10)
  {
    if (v13 == 1)
    {
      a10 = (void **)(v10 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      MEMORY[0x219A19A08](v10, 0x1020C405E66F15BLL);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_decoder_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::INTEGER, "integer");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::JSON::types::INTEGER, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::FLOAT, "float");
  __cxa_atexit(v0, turi::JSON::types::FLOAT, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::STRING, "string");
  __cxa_atexit(v0, turi::JSON::types::STRING, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::VECTOR, "array");
  __cxa_atexit(v0, turi::JSON::types::VECTOR, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::LIST, "list");
  __cxa_atexit(v0, turi::JSON::types::LIST, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::DICT, "dictionary");
  __cxa_atexit(v0, turi::JSON::types::DICT, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::DATETIME, "datetime");
  __cxa_atexit(v0, turi::JSON::types::DATETIME, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::UNDEFINED, "undefined");
  __cxa_atexit(v0, turi::JSON::types::UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::IMAGE, "image");
  __cxa_atexit(v0, turi::JSON::types::IMAGE, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SARRAY, "SArray");
  __cxa_atexit(v0, turi::JSON::types::SARRAY, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SFRAME, "SFrame");
  __cxa_atexit(v0, turi::JSON::types::SFRAME, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SGRAPH, "SGraph");
  return __cxa_atexit(v0, turi::JSON::types::SGRAPH, &dword_217E69000);
}

double std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,std::ostream_iterator<char,char,std::char_traits<char>>,0>@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int16 v6;
  char v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  int v12;
  __int16 v13;
  char v14;
  int v15;
  double result;
  uint64_t v17;
  __int16 v18;
  char v19;
  int v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  int v25;
  char v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  int v30;
  __int128 v31;

  v6 = *((_WORD *)a1 + 4);
  v7 = *((_BYTE *)a1 + 10);
  v8 = *((_DWORD *)a1 + 3);
  v9 = *a2;
  v10 = *((_WORD *)a2 + 4);
  v11 = *((_BYTE *)a2 + 10);
  v12 = *((_DWORD *)a2 + 3);
  v22 = *a1;
  v23 = v6;
  v24 = v7;
  v25 = v8;
  v26 = 0;
  v17 = v9;
  v18 = v10;
  v19 = v11;
  v20 = v12;
  v21 = 0;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,std::ostream_iterator<char,char,std::char_traits<char>>>((uint64_t)&v22, &v17, a3, a4, (uint64_t)&v27);
  v13 = v28;
  v14 = v29;
  v15 = v30;
  *(_QWORD *)a5 = v27;
  *(_WORD *)(a5 + 8) = v13;
  *(_BYTE *)(a5 + 10) = v14;
  *(_DWORD *)(a5 + 12) = v15;
  *(_BYTE *)(a5 + 16) = 0;
  result = *(double *)&v31;
  *(_OWORD *)(a5 + 32) = v31;
  return result;
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,std::ostream_iterator<char,char,std::char_traits<char>>>@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  int v9;
  __int16 v10;
  double result;
  char v12;
  __int128 v13;

  *(_QWORD *)&v13 = a3;
  *((_QWORD *)&v13 + 1) = a4;
  while (1)
  {
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 != *a2)
    {
      v9 = *(unsigned __int8 *)(a1 + 8);
      goto LABEL_5;
    }
    *(_BYTE *)(a1 + 16) = 1;
    v9 = *(unsigned __int8 *)(a1 + 8);
    if (!*(_DWORD *)(a1 + 12))
      break;
LABEL_5:
    if (!v9)
      boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>::fill(a1);
    v12 = boost::archive::iterators::detail::from_6_bit<unsigned char>::operator()(unsigned char)const::lookup_table[*(unsigned __int8 *)(a1 + 9)];
    std::ostream_iterator<char,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v13, &v12);
    *(_BYTE *)(a1 + 8) = 0;
  }
  v10 = *(_WORD *)(a1 + 9);
  *(_QWORD *)a5 = v8;
  *(_BYTE *)(a5 + 8) = v9;
  *(_WORD *)(a5 + 9) = v10;
  *(_DWORD *)(a5 + 12) = 0;
  *(_BYTE *)(a5 + 16) = 0;
  result = *(double *)&v13;
  *(_OWORD *)(a5 + 32) = v13;
  return result;
}

uint64_t std::ostream_iterator<char,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1, char *a2)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  char v7;

  v3 = *(_QWORD **)a1;
  v7 = *a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v7, 1);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)a1, v4, v5);
  }
  return a1;
}

uint64_t boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>::fill(uint64_t result)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;

  LOBYTE(v1) = 0;
  *(_BYTE *)(result + 9) = 0;
  v2 = *(_DWORD *)(result + 12);
  v3 = *(unsigned __int8 *)(result + 10);
  v4 = 6;
  do
  {
    if (!v2)
    {
      if (*(_BYTE *)(result + 16))
      {
        v3 = 0;
        v2 = v4;
      }
      else
      {
        v5 = (unsigned __int8 *)(*(_QWORD *)result)++;
        v3 = *v5;
        v2 = 8;
      }
      *(_BYTE *)(result + 10) = v3;
    }
    if (v2 >= v4)
      v6 = v4;
    else
      v6 = v2;
    v1 = (v1 << v6) | (v3 >> (v2 - v6)) & ~(-1 << v6);
    *(_BYTE *)(result + 9) = v1;
    *(_DWORD *)(result + 12) = v2 - v6;
    v7 = v4 > v2;
    v2 -= v6;
    v4 -= v6;
  }
  while (v7);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t _GLOBAL__sub_I_encoder_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::INTEGER, "integer");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::JSON::types::INTEGER, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::FLOAT, "float");
  __cxa_atexit(v0, turi::JSON::types::FLOAT, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::STRING, "string");
  __cxa_atexit(v0, turi::JSON::types::STRING, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::VECTOR, "array");
  __cxa_atexit(v0, turi::JSON::types::VECTOR, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::LIST, "list");
  __cxa_atexit(v0, turi::JSON::types::LIST, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::DICT, "dictionary");
  __cxa_atexit(v0, turi::JSON::types::DICT, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::DATETIME, "datetime");
  __cxa_atexit(v0, turi::JSON::types::DATETIME, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::UNDEFINED, "undefined");
  __cxa_atexit(v0, turi::JSON::types::UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::IMAGE, "image");
  __cxa_atexit(v0, turi::JSON::types::IMAGE, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SARRAY, "SArray");
  __cxa_atexit(v0, turi::JSON::types::SARRAY, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SFRAME, "SFrame");
  __cxa_atexit(v0, turi::JSON::types::SFRAME, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SGRAPH, "SGraph");
  return __cxa_atexit(v0, turi::JSON::types::SGRAPH, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_json_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_function_closure_info_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::ml_model_base::list_fields(turi::ml_model_base *this@<X0>, uint64_t *a2@<X8>)
{
  char *v2;
  char *v3;
  unint64_t v5;
  __int128 *v6;
  char *v7;
  char *v8;
  BOOL v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (char *)*((_QWORD *)this + 37);
  v3 = (char *)this + 304;
  if (v2 != (char *)this + 304)
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)(v2 + 32);
      if (v5 >= a2[2])
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      v7 = (char *)*((_QWORD *)v2 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v2 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_21843769C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_model_base::get_option_value(uint64_t a1, const void **a2)
{
  return turi::option_manager::value(a1 + 224, a2);
}

uint64_t *turi::ml_model_base::get_default_options@<X0>(turi::ml_model_base *this@<X0>, uint64_t a2@<X8>)
{
  return turi::option_manager::get_default_options((uint64_t *)this + 28, a2);
}

void turi::ml_model_base::set_options(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  BOOL v10;
  _QWORD v11[3];
  std::string __p;
  unsigned int v13[20];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 224;
  if (!*(_QWORD *)(turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224)) + 16))
    turi::ml_model_base::set_options(std::map<std::string,turi::flexible_type> const&)::$_0::operator()();
  v7 = (__int128 *)*a2;
  v5 = (__int128 *)(a2 + 1);
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      turi::option_manager::set_option(v4, (uint64_t)(v6 + 2), (uint64_t)v6 + 56);
      std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>(&__p, v6 + 2, (uint64_t)v6 + 56);
      std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v11, (const void **)&__p.__r_.__value_.__l.__data_, 1);
      turi::ml_model_base::add_or_update_state(a1, v11);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v11, (char *)v11[1]);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = (__int128 *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(__int128 **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (__int128 *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v5);
  }
}

void sub_218437800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

void turi::ml_model_base::add_or_update_state(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  __int128 *v9;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = (uint64_t **)(a1 + 296);
    do
    {
      v9 = (__int128 *)(v3 + 4);
      v5 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v9);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v5 + 14, v3 + 7);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v2);
  }
}

uint64_t turi::ml_model_base::get_state(turi::ml_model_base *this)
{
  return (uint64_t)this + 296;
}

uint64_t *turi::ml_model_base::get_value_from_state(uint64_t a1, const void **a2)
{
  uint64_t **v3;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 *v12[2];
  _QWORD v13[33];

  v3 = (uint64_t **)(a1 + 296);
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1 + 296, a2))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Field '", 7);
    v6 = *((char *)a2 + 23);
    if (v6 >= 0)
      v7 = (uint64_t)a2;
    else
      v7 = (uint64_t)*a2;
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (uint64_t)a2[1];
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' does not exist. Use list_fields() for a ", 42);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"list of fields that can be queried.", 35);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
    turi::ml_model_base::get_value_from_state(std::string)::$_0::operator()();
  }
  v12[0] = (__int128 *)a2;
  return std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, a2, (uint64_t)&std::piecewise_construct, v12)+ 7;
}

void sub_2184379BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_model_base::is_trained(turi::ml_model_base *this)
{
  return 1;
}

void sub_218437B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  unint64_t **p_size;
  unint64_t *v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__l.__size_ = 0;
  p_size = (unint64_t **)&this[1].__r_.__value_.__l.__size_;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
  this[1].__r_.__value_.__s.__data_[20] = 0;
  if (&this[1].__r_.__value_.__r.__words[1] != (std::string::size_type *)a3)
  {
    v7 = *(unint64_t **)a3;
    *(std::string::size_type *)((char *)&this[1].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)(a3 + 5);
    *p_size = v7;
    v8 = *(unsigned __int8 *)(a3 + 12);
    this[1].__r_.__value_.__s.__data_[20] = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0)
    {
      v9 = *p_size;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  return this;
}

_QWORD *std::vector<turi::option_handling::option_info>::__init_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::option_handling::option_info>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::option_handling::option_info>,turi::option_handling::option_info*,turi::option_handling::option_info*,turi::option_handling::option_info*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_218437D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::option_handling::option_info>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 57)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::option_handling::option_info>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::option_handling::option_info>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 7);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::option_handling::option_info>,turi::option_handling::option_info*,turi::option_handling::option_info*,turi::option_handling::option_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      turi::option_handling::option_info::option_info((std::string *)(a4 + v7), (std::string *)(a2 + v7));
      v7 += 128;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_218437E14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 128;
    do
    {
      turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(v4 + v2));
      v2 -= 128;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *turi::option_handling::option_info::option_info(std::string *this, std::string *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  std::string::pointer data;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  std::string::size_type v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t **v16;
  std::string::size_type v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (SHIBYTE(a2[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&a2[1].__r_.__value_.__l.__data_;
    this[1].__r_.__value_.__r.__words[2] = a2[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  v6 = this + 2;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[2].__r_.__value_.__s.__data_[12] = 0;
  if (a2 == this)
  {
    v20 = a2[2].__r_.__value_.__r.__words[2];
    this[3].__r_.__value_.__r.__words[0] = 0;
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = v20;
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = 0;
    this[3].__r_.__value_.__s.__data_[12] = 0;
    this[3].__r_.__value_.__r.__words[2] = 0;
    LODWORD(this[4].__r_.__value_.__l.__data_) = 0;
    this[4].__r_.__value_.__s.__data_[4] = 0;
  }
  else
  {
    data = a2[2].__r_.__value_.__l.__data_;
    *(std::string::size_type *)((char *)this[2].__r_.__value_.__r.__words + 5) = *(std::string::size_type *)((char *)a2[2].__r_.__value_.__r.__words + 5);
    v6->__r_.__value_.__r.__words[0] = (std::string::size_type)data;
    v8 = a2[2].__r_.__value_.__s.__data_[12];
    this[2].__r_.__value_.__s.__data_[12] = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0)
    {
      v9 = (unint64_t *)v6->__r_.__value_.__r.__words[0];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v11 = a2[2].__r_.__value_.__r.__words[2];
    this[3].__r_.__value_.__r.__words[0] = 0;
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = v11;
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = 0;
    this[3].__r_.__value_.__s.__data_[12] = 0;
    v12 = a2[3].__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)this[3].__r_.__value_.__r.__words + 5) = *(std::string::size_type *)((char *)a2[3].__r_.__value_.__r.__words + 5);
    this[3].__r_.__value_.__r.__words[0] = v12;
    v13 = a2[3].__r_.__value_.__s.__data_[12];
    this[3].__r_.__value_.__s.__data_[12] = v13;
    if (v13 <= 9 && ((1 << v13) & 0x33C) != 0)
    {
      v14 = (unint64_t *)this[3].__r_.__value_.__l.__data_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    this[3].__r_.__value_.__r.__words[2] = 0;
    v16 = (unint64_t **)&this[3].__r_.__value_.__r.__words[2];
    LODWORD(this[4].__r_.__value_.__l.__data_) = 0;
    this[4].__r_.__value_.__s.__data_[4] = 0;
    v17 = a2[3].__r_.__value_.__r.__words[2];
    *(std::string::size_type *)((char *)&this[3].__r_.__value_.__r.__words[2] + 5) = *(std::string::size_type *)((char *)&a2[3].__r_.__value_.__r.__words[2] + 5);
    this[3].__r_.__value_.__r.__words[2] = v17;
    LODWORD(v17) = a2[4].__r_.__value_.__s.__data_[4];
    this[4].__r_.__value_.__s.__data_[4] = v17;
    switch((int)v17)
    {
      case 2:
        v18 = *v16;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        break;
      case 3:
        v26 = *v16;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 + 1, v26));
        break;
      case 4:
        v22 = *v16;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
        break;
      case 5:
        v28 = *v16;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
        break;
      case 8:
        v30 = *v16;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        break;
      case 9:
        v24 = *v16;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
        break;
      default:
        break;
    }
  }
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&this[4].__r_.__value_.__l.__size_, (uint64_t *)a2[4].__r_.__value_.__l.__size_, (uint64_t *)a2[4].__r_.__value_.__r.__words[2], (uint64_t)(a2[4].__r_.__value_.__r.__words[2] - a2[4].__r_.__value_.__l.__size_) >> 4);
  return this;
}

void sub_2184380D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::flexible_type>(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t **v5;
  _BYTE v6[13];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = (uint64_t **)&v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), &v5, (uint64_t)(a1 + 2)) & 1) == 0)
  {
    *(_QWORD *)&v6[5] = *(_QWORD *)(a2 + 5);
    *(_QWORD *)v6 = *(_QWORD *)a2;
    v6[12] = *(_BYTE *)(a2 + 12);
    *(_BYTE *)(a2 + 12) = 0;
    LODWORD(v5) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_2184385B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t ***a3, uint64_t a4)
{
  if ((a2 - 1) < 8)
    return 0;
  if (a2)
    boost::detail::variant::forced_return<void>(a1);
  return boost::detail::variant::direct_mover<turi::flexible_type>::operator()(*a3, a4);
}

uint64_t boost::detail::variant::direct_mover<turi::flexible_type>::operator()(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void **v35;

  v2 = *a1;
  if (*a1 != (uint64_t *)a2)
  {
    switch(*(_BYTE *)(a2 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v35);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v35);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a2;
          if (*(_QWORD *)a2)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a2 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *v2;
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)v2 + 5);
    *(_QWORD *)a2 = v33;
    *(_BYTE *)(a2 + 12) = *((_BYTE *)v2 + 12);
    *((_BYTE *)v2 + 12) = 0;
  }
  return 1;
}

void __cxx_global_var_init_8_6()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::model_base::~model_base(turi::model_base *this)
{
  void **v2;

  *(_QWORD *)this = off_24D941790;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  v2 = (void **)((char *)this + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  v2 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  cppipc::ipc_object_base::~ipc_object_base(this);
}

uint64_t turi::model_base::list_functions(turi::model_base *this)
{
  if (!*((_BYTE *)this + 24))
    (*(void (**)(turi::model_base *))(*(_QWORD *)this + 56))(this);
  return (uint64_t)this + 32;
}

uint64_t turi::model_base::list_get_properties(turi::model_base *this)
{
  turi::model_base *v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t *v5;
  turi::model_base *v6;
  turi::model_base *v7;
  BOOL v8;

  if (!*((_BYTE *)this + 24))
    (*(void (**)(turi::model_base *))(*(_QWORD *)this + 56))(this);
  if (*((_QWORD *)this + 22) == *((_QWORD *)this + 23))
  {
    std::vector<std::string>::reserve((std::vector<std::string> *)((char *)this + 176), *((_QWORD *)this + 21));
    v2 = (turi::model_base *)*((_QWORD *)this + 19);
    if (v2 != (turi::model_base *)((char *)this + 160))
    {
      v3 = *((_QWORD *)this + 23);
      do
      {
        v4 = (__int128 *)((char *)v2 + 32);
        v5 = (uint64_t *)((char *)this + 176);
        if (v3 >= *((_QWORD *)this + 24))
        {
          v3 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v4);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v4);
          v3 += 24;
        }
        *((_QWORD *)this + 23) = v3;
        v6 = (turi::model_base *)*((_QWORD *)v2 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(turi::model_base **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (turi::model_base *)*((_QWORD *)v2 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v2;
            v2 = v7;
          }
          while (!v8);
        }
        v2 = v7;
      }
      while (v7 != (turi::model_base *)((char *)this + 160));
    }
  }
  return (uint64_t)this + 176;
}

uint64_t turi::model_base::list_set_properties(turi::model_base *this)
{
  turi::model_base *v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t *v5;
  turi::model_base *v6;
  turi::model_base *v7;
  BOOL v8;

  if (!*((_BYTE *)this + 24))
    (*(void (**)(turi::model_base *))(*(_QWORD *)this + 56))(this);
  if (*((_QWORD *)this + 16) == *((_QWORD *)this + 17))
  {
    std::vector<std::string>::reserve((std::vector<std::string> *)((char *)this + 128), *((_QWORD *)this + 15));
    v2 = (turi::model_base *)*((_QWORD *)this + 13);
    if (v2 != (turi::model_base *)((char *)this + 112))
    {
      v3 = *((_QWORD *)this + 17);
      do
      {
        v4 = (__int128 *)((char *)v2 + 32);
        v5 = (uint64_t *)((char *)this + 128);
        if (v3 >= *((_QWORD *)this + 18))
        {
          v3 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v4);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v4);
          v3 += 24;
        }
        *((_QWORD *)this + 17) = v3;
        v6 = (turi::model_base *)*((_QWORD *)v2 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(turi::model_base **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (turi::model_base *)*((_QWORD *)v2 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v2;
            v2 = v7;
          }
          while (!v8);
        }
        v2 = v7;
      }
      while (v7 != (turi::model_base *)((char *)this + 112));
    }
  }
  return (uint64_t)this + 128;
}

uint64_t turi::model_base::_make_method_name(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  v3 = (uint64_t *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 32, (const void **)a2);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const void *)a2;
  else
    v5 = *(const void **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
  v10 = v3;
  v8 = *v3;
  v9 = v10[1];
  if (v8 != v9)
  {
    v11 = (v9 - v8) / 24 - 1;
    do
    {
      v12 = *(char *)(v8 + 23);
      if (v12 >= 0)
        v13 = v8;
      else
        v13 = *(_QWORD *)v8;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v8 + 23);
      else
        v14 = *(_QWORD *)(v8 + 8);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v13, v14);
      if (v11)
        v16 = ", ";
      else
        v16 = "";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, 2 * (v11 != 0));
      v8 += 24;
      --v11;
    }
    while (v8 != v9);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v18[1] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v20);
}

void sub_218438D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::model_base::call_function(_BYTE *a1, const void **a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  _QWORD *v21;
  void *p_p;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  const char *v26;
  size_t v27;
  _QWORD *v28;
  std::string *v29;
  std::string *i;
  int v31;
  uint64_t v32;
  uint64_t size;
  _QWORD *v34;
  uint64_t *v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  const char *v47;
  size_t v48;
  _QWORD *v49;
  std::string *v50;
  std::string *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  void *v70;
  uint64_t v71;
  unsigned __int8 v72;
  char v73[8];
  char *v74;
  void *__p;
  std::string *v76;
  int64_t v77;
  void **v78[11];
  char v79;
  uint64_t v80;
  std::string *v81;
  std::string *v82;
  unint64_t v83;
  std::locale v84;

  v5 = a1;
  if (!a1[24])
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 56))(a1);
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)(v5 + 4), a2);
  if (v5 + 5 == (_QWORD *)v6)
    turi::model_base::_raise_not_found_error<std::vector<std::string>>((uint64_t)v5, (uint64_t)a2, v5 + 4);
  v7 = v6;
  v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)(v5 + 7), a2);
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v10 = *(__int128 **)(v7 + 56);
  v9 = *(__int128 **)(v7 + 64);
  if (v10 == v9)
  {
    v12 = 0;
    goto LABEL_38;
  }
  v11 = v8;
  v65 = v7;
  v12 = 0;
  v66 = (uint64_t)v5;
  v13 = v5 + 8;
  v14 = v8 + 56;
  v15 = v8 + 64;
  do
  {
    if (a3 + 8 != std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, (const void **)v10))goto LABEL_7;
    if (v13 != (_QWORD *)v11)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v14, (const void **)v10);
      if (v15 != v16)
      {
        __p = v10;
        v17 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)v10, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v17 + 14, (uint64_t *)(v16 + 56));
LABEL_7:
        ++v12;
        goto LABEL_18;
      }
    }
    v18 = v82;
    if ((unint64_t)v82 >= v83)
    {
      v20 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v81, v10);
    }
    else
    {
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v82, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v19 = *v10;
        v82->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      }
      v20 = v18 + 1;
    }
    v82 = v20;
LABEL_18:
    v10 = (__int128 *)((char *)v10 + 24);
  }
  while (v10 != v9);
  v5 = (_QWORD *)v66;
  v7 = v65;
  if (v81 != v82)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v78);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Error: missing arguments for method ", 36);
    turi::model_base::_make_method_name(v66, (uint64_t)a2);
    if (v77 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v77 >= 0)
      v23 = HIBYTE(v77);
    else
      v23 = (uint64_t)v76;
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)p_p, v23);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" in model ", 10);
    v26 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
    v27 = strlen(v26);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    if (SHIBYTE(v77) < 0)
      operator delete(__p);
    v29 = v81;
    for (i = v82; v29 != i; ++v29)
    {
      v31 = SHIBYTE(v29->__r_.__value_.__r.__words[2]);
      if (v31 >= 0)
        v32 = (uint64_t)v29;
      else
        v32 = v29->__r_.__value_.__r.__words[0];
      if (v31 >= 0)
        size = HIBYTE(v29->__r_.__value_.__r.__words[2]);
      else
        size = v29->__r_.__value_.__l.__size_;
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, v32, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" ", 1);
    }
    __p = v78;
    turi::model_base::call_function(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::$_0::operator()();
  }
LABEL_38:
  if (v12 != *(_QWORD *)(a3 + 16))
  {
    __p = 0;
    v76 = 0;
    v77 = 0;
    std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v73, *(const void ***)(v7 + 56), *(const void ***)(v7 + 64));
    v35 = *(uint64_t **)a3;
    if (*(_QWORD *)a3 != a3 + 8)
    {
      do
      {
        if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v73, (const void **)v35 + 4))
        {
          v36 = v76;
          if ((unint64_t)v76 >= v77)
          {
            v38 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)v35 + 2);
          }
          else
          {
            if (*((char *)v35 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(v76, (const std::string::value_type *)v35[4], v35[5]);
            }
            else
            {
              v37 = *((_OWORD *)v35 + 2);
              v76->__r_.__value_.__r.__words[2] = v35[6];
              *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
            }
            v38 = v36 + 1;
          }
          v76 = v38;
        }
        v39 = (uint64_t *)v35[1];
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (uint64_t *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (uint64_t *)v35[2];
            v41 = *v40 == (_QWORD)v35;
            v35 = v40;
          }
          while (!v41);
        }
        v35 = v40;
      }
      while (v40 != (uint64_t *)(a3 + 8));
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v78);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Error: extra parameters given for method ", 41);
    turi::model_base::_make_method_name((uint64_t)v5, (uint64_t)a2);
    if ((v72 & 0x80u) == 0)
      v43 = &v70;
    else
      v43 = v70;
    if ((v72 & 0x80u) == 0)
      v44 = v72;
    else
      v44 = v71;
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" in model ", 10);
    v47 = (const char *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    v48 = strlen(v47);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
    if ((char)v72 < 0)
      operator delete(v70);
    v50 = (std::string *)__p;
    v51 = v76;
    if (__p != v76)
    {
      do
      {
        v52 = SHIBYTE(v50->__r_.__value_.__r.__words[2]);
        if (v52 >= 0)
          v53 = (uint64_t)v50;
        else
          v53 = v50->__r_.__value_.__r.__words[0];
        if (v52 >= 0)
          v54 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
        else
          v54 = v50->__r_.__value_.__l.__size_;
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, v53, v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" ", 1);
        ++v50;
      }
      while (v50 != v51);
    }
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"WARNING: ", 9);
    std::stringbuf::str();
    if ((v72 & 0x80u) == 0)
      v57 = &v70;
    else
      v57 = v70;
    if ((v72 & 0x80u) == 0)
      v58 = v72;
    else
      v58 = v71;
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
    std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
    v60 = std::locale::use_facet(&v84, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
    std::locale::~locale(&v84);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v72 < 0)
      operator delete(v70);
    v78[0] = *(void ***)MEMORY[0x24BEDB800];
    *(void ***)((char *)v78 + (unint64_t)*(v78[0] - 3)) = *(void ***)(MEMORY[0x24BEDB800] + 24);
    v78[1] = (void **)(MEMORY[0x24BEDB848] + 16);
    if (v79 < 0)
      operator delete(v78[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](&v80);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v73, v74);
    v78[0] = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v78);
  }
  v61 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v5 + 10), a2);
  v62 = (_QWORD *)(a3 + 8);
  v63 = *(_QWORD *)(a3 + 8);
  v67 = *(uint64_t **)a3;
  v68 = (char *)v63;
  if (*(_QWORD *)(a3 + 16))
  {
    *(_QWORD *)(v63 + 16) = &v68;
    *(_QWORD *)a3 = v62;
    *v62 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v67 = (uint64_t *)&v68;
  }
  __p = v5;
  v64 = *(_QWORD *)(v61 + 24);
  if (!v64)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **, uint64_t **))(*(_QWORD *)v64 + 48))(v64, &__p, &v67);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v67, v68);
  v78[0] = (void **)&v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v78);
}

void sub_2184393B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  uint64_t v31;

  std::ostringstream::~ostringstream((uint64_t)&a31);
  a31 = v31 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

_QWORD *turi::model_base::register_function(uint64_t a1, std::string *__str, uint64_t a3, uint64_t a4)
{
  std::string::size_type size;
  std::string *v9;
  char *v10;
  int v11;
  std::vector<std::string> *v12;
  uint64_t *v13;
  std::string v15;
  char v16;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (std::string *)__str->__r_.__value_.__r.__words[0];
    size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v9 = __str;
  }
  v10 = (char *)&v9[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    v11 = v10[size--];
    if (v11 == 58)
    {
      if (size != -1)
      {
        std::string::basic_string(&v15, __str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
        if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str->__r_.__value_.__l.__data_);
        *__str = v15;
      }
      break;
    }
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v12 = (std::vector<std::string> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)&__str->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 7);
  if (v12 != (std::vector<std::string> *)a3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v12, *(std::string **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  v13 = std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 80), (const void **)&__str->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v15);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](v13 + 7, a4);
}

uint64_t **turi::model_base::register_defaults(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t **result;
  __int128 *v5;

  v5 = a2;
  result = (uint64_t **)(std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 56), (const void **)a2, (uint64_t)&std::piecewise_construct, &v5)+ 7);
  if (result != (uint64_t **)a3)
    return std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>(result, *(__int128 **)a3, (__int128 *)(a3 + 8));
  return result;
}

void turi::model_base::register_docstring(uint64_t a1, const std::string *a2)
{
  std::string *p_str;
  std::string::size_type size;
  char *v6;
  int v7;
  uint64_t *v8;
  std::string v9;
  std::string v10;
  std::string __str;
  char v12;

  memset(&__str, 0, sizeof(__str));
  memset(&v10, 0, sizeof(v10));
  std::string::operator=(&__str, a2);
  std::string::operator=(&v10, a2 + 1);
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  v6 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    v7 = v6[size--];
    if (v7 == 58)
    {
      if (size != -1)
      {
        std::string::basic_string(&v9, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v9;
      }
      break;
    }
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 200), (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v9);
  std::string::operator=((std::string *)(v8 + 7), &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_218439738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void turi::model_base::save_to_url(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  void *lpsrc;
  std::__shared_weak_count *v32;
  void *v33;
  std::__shared_weak_count *v34;

  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v33 = v11;
    v34 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  v14 = v32;
  if (v32)
  {
    v15 = (unint64_t *)&v32->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  turi::get_unity_global_singleton(v5, v6, v7, v8, v9, v10, (uint64_t *)&lpsrc);
  v17 = lpsrc;
  v29 = v33;
  v30 = v34;
  if (v34)
  {
    v18 = (unint64_t *)&v34->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v17 + 112))(v17, &v29, a3, a2);
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v34;
  if (v34)
  {
    v27 = (unint64_t *)&v34->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_218439918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void turi::model_base::perform_registration(turi::model_base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  char **v5;
  char *v6[2];
  void **v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  std::string __p;
  void *v12[2];
  char v13;
  _QWORD v14[3];
  __int128 v15[3];
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "save");
  std::string::basic_string[abi:ne180100]<0>(v12, "url");
  std::string::basic_string[abi:ne180100]<0>(v14, "side_data");
  v9 = 0uLL;
  v10 = 0;
  v7 = (void **)&v9;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = operator new(0x30uLL);
  *((_QWORD *)&v9 + 1) = v9;
  v10 = v9 + 48;
  *((_QWORD *)&v9 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v10, (__int128 *)v12, v15, (std::string *)v9);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>("url", (std::string::size_type)turi::model_base::save_to_url, 0, "side_data", (uint64_t)v16);
  turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v9, (uint64_t)v16);
  v2 = v17;
  if (v17 == v16)
  {
    v3 = 4;
    v2 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v7 = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v14[i + 2]) < 0)
      operator delete((void *)v14[i]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "save");
  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[8],std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,0>((uint64_t)v12, "side_data", &v5);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v7, (const void **)v12, 1);
  turi::model_base::register_defaults((uint64_t)this, &v9, (uint64_t)&v7);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v14);
  if (v13 < 0)
    operator delete(v12[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v5, v6[0]);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  *((_BYTE *)this + 24) = 1;
}

void sub_218439B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, char *a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a14, a15);
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair((uint64_t)&a29);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a11, a12);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 *result;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string **v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  __int128 *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v23, __s);
  std::string::basic_string[abi:ne180100]<0>(v24, a4);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = &v16;
  v20 = 0;
  v16 = (std::string *)operator new(0x30uLL);
  v17 = v16;
  v18 = v16 + 2;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v23, &v25, v16);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(a2, a3, (uint64_t)&v16, (uint64_t)&v25);
  v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v24[i + 2]) < 0)
      operator delete((void *)v24[i]);
  }
  v10 = (uint64_t)v26;
  if (!v26)
    goto LABEL_8;
  if (v26 != &v25)
  {
    v10 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v26 + 16))(v26);
LABEL_8:
    v22 = (_BYTE *)v10;
    goto LABEL_10;
  }
  v22 = v21;
  (*(void (**)(__int128 *, _BYTE *))(v25 + 24))(&v25, v21);
LABEL_10:
  *(_QWORD *)(a5 + 24) = 0;
  v11 = operator new(0x28uLL);
  *v11 = &unk_24D941878;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v21);
  *(_QWORD *)(a5 + 24) = v11;
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  result = v26;
  if (v26 == &v25)
  {
    v15 = 4;
    result = &v25;
  }
  else
  {
    if (!v26)
      return result;
    v15 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
}

void sub_218439E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 64);
  if (v25 == (_QWORD *)(v23 - 88))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 88);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_21843A1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_21843A3AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 10) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_21843A528(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_21843A664(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D9417F8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_21843A8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D9417F8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D9417F8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D9417F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_21843AA38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D9417F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_21843ABB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void (*v8)(_QWORD *, void **, char ***);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  std::string v12;
  uint64_t v13;
  uint64_t *v14;
  std::vector<std::string> v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  char **v20;
  char *v21[2];
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char *v27[2];
  void **v28[3];

  v28[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v22 = 1;
  v23 = 0;
  v24 = 0;
  v27[0] = 0;
  v27[1] = 0;
  v25 = 0;
  v26 = v27;
  v21[0] = 0;
  v21[1] = 0;
  __p[1] = 0;
  v19 = 0;
  v20 = v21;
  v17 = a2;
  __p[0] = 0;
  memset(&v15, 0, sizeof(v15));
  v16 = a3;
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v15.__begin_;
    end = (__int128 *)v15.__end_;
  }
  v14 = &v17;
  v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v11);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::model_base *,std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::operator()<2>((uint64_t *)&v11);
  v28[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
  v8 = *(void (**)(_QWORD *, void **, char ***))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)(v17 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(void (**)(_QWORD *, void **, char ***))(*v10 + v8);
  v8(v10, __p, &v20);
  memset(v28, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v28, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v28 + 5);
  *(void ***)(a4 + 8) = v28[0];
  *(_BYTE *)(a4 + 20) = BYTE4(v28[1]);
  *(_DWORD *)a4 = 0;
  v28[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v26, v27[0]);
  if (SHIBYTE(v25) < 0)
    operator delete(v23);
}

void sub_21843ADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 88) = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 88));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a20);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a27);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::model_base *,std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::operator()<2>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    turi::toolkit_function_wrapper_impl::read_arg<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t *)(v3 + 56), (uint64_t)&v8);
    v4 = *a1 + 40;
    v5 = (uint64_t *)(*a1 + 32);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v5, *(char **)v4);
    v6 = v9;
    *(_QWORD *)(v4 - 8) = v8;
    *(_QWORD *)v4 = v6;
    v7 = v10;
    *(_QWORD *)(v4 + 8) = v10;
    if (v7)
    {
      *(_QWORD *)(v6 + 16) = v4;
      v8 = &v9;
      v9 = 0;
      v10 = 0;
      v6 = 0;
    }
    else
    {
      *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v8, (char *)v6);
  }
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D941878;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D941878;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D941878;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21843AFE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D941878;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, std::string **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, std::string **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = (_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(char ***)a3;
  v8 = (char *)v6;
  if (*(_QWORD *)(a3 + 16))
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *(_QWORD *)a3 = v5;
    *v5 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_21843B1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, std::string *a2@<X1>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8[3];
  std::string *v9;
  uint64_t v10;
  _QWORD v11[10];

  v11[9] = *MEMORY[0x24BDAC8D0];
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v8, a3);
  v9 = a2;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string **, uint64_t *))(*(_QWORD *)v7 + 48))(&v10, v7, &v9, v8);
  v9 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v10, v10 ^ ((int)v10 >> 31), &v9, (uint64_t)v11);
  *(_DWORD *)a4 = v10 ^ ((int)v10 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v10);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v8, (char *)v8[1]);
}

void sub_21843B2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_17_2()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_model_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::neural_net::Image::CreateFromPath@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = std::make_unique<turi::neural_net::CoreImageImage,std::string const&>(a1, &v4);
  *a2 = v4;
  return result;
}

uint64_t std::make_unique<turi::neural_net::CoreImageImage,std::string const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = turi::neural_net::CoreImageImage::CoreImageImage(v4, a1);
  *a2 = v4;
  return result;
}

void sub_21843B448(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x81C40803F642BLL);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_Image_Apple_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void turi::option_handling::option_info::interpret_value(turi::option_handling::option_info *this@<X0>, const turi::flexible_type *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  double v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  double v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  size_t v59;
  unsigned int v60;
  double *v61;
  double *v62;
  unint64_t v63;
  double *v64;
  unsigned int v65;
  double v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  _QWORD *v77;
  int v78;
  turi::option_handling::option_info *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  turi::flexible_type_impl *v88;
  int v89;
  unint64_t *v90;
  unint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  std::string::size_type v101;
  std::string::size_type v102;
  std::string::size_type v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  std::string::size_type v114;
  std::string::size_type v115;
  std::string::size_type v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t *v130;
  unint64_t v131;
  double v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char **v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  __int128 v164;
  __int128 v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  void *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  int v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  _QWORD *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  unsigned int v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  unsigned int v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  void *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  void *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  double v241;
  uint64_t v242;
  uint64_t v243;
  char **v244;
  char *v245;
  double v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  __int128 v254;
  __int128 v255;
  float v256;
  __n128 v257;
  char *v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unint64_t *v262;
  double *v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _BOOL4 v268;
  BOOL v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  uint64_t v273;
  _QWORD *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t *v283;
  uint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  double v295;
  unsigned int v296;
  uint64_t v298;
  size_t v299;
  unsigned int v300;
  unint64_t *v301;
  _QWORD *v302;
  unint64_t v303;
  double *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  double v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  unsigned int v312;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t v326;
  unsigned int v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t v330;
  _QWORD *v331;
  void *v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t v338;
  _QWORD *v339;
  double v340;
  uint64_t v341;
  uint64_t v342;
  char **v343;
  char *v344;
  double v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int *v351;
  unsigned int v352;
  __int128 v353;
  __int128 v354;
  float v355;
  __n128 v356;
  unsigned int v357;
  BOOL v358;
  unsigned int v359;
  unsigned int v360;
  unint64_t *v361;
  double *v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  BOOL v367;
  BOOL v368;
  unsigned int v369;
  char v370;
  unsigned int v371;
  uint64_t v372;
  _QWORD *v373;
  char *v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t *v382;
  uint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  double v394;
  unsigned int v395;
  uint64_t v396;
  size_t v397;
  unsigned int v398;
  unint64_t *v399;
  _QWORD *v400;
  unint64_t v401;
  double *v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  double v406;
  unsigned int v407;
  uint64_t v408;
  unsigned int v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t v412;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  unint64_t v418;
  _QWORD *v419;
  unint64_t *v420;
  unint64_t v421;
  unint64_t v422;
  unsigned int v423;
  unint64_t *v424;
  unint64_t v425;
  unint64_t v426;
  _QWORD *v427;
  void *v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t *v432;
  unint64_t v433;
  unint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  int v437;
  turi::option_handling::option_info *v438;
  uint64_t v439;
  _QWORD *v440;
  _QWORD *v441;
  unsigned int v442;
  unint64_t *v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  char *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  char **v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int *v458;
  unsigned int v459;
  __int128 v460;
  __int128 v461;
  _QWORD *v462;
  int v463;
  turi::option_handling::option_info *v464;
  uint64_t v465;
  _QWORD *v466;
  _QWORD *v467;
  std::runtime_error *v468;
  std::string *v469;
  __int128 v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t *v473;
  unint64_t v474;
  unint64_t *v475;
  unint64_t v476;
  unint64_t *v477;
  unint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t *v481;
  unint64_t v482;
  unint64_t v483;
  _QWORD *v484;
  unint64_t *v485;
  unint64_t v486;
  unint64_t v487;
  unsigned int v488;
  unint64_t *v489;
  unint64_t v490;
  unint64_t v491;
  _QWORD *v492;
  void *v493;
  unint64_t *v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  uint64_t v506;
  unint64_t *v507;
  unint64_t v508;
  unint64_t v509;
  _QWORD *v510;
  unint64_t *v511;
  unint64_t v512;
  unint64_t v513;
  unsigned int v514;
  unint64_t *v515;
  unint64_t v516;
  unint64_t v517;
  _QWORD *v518;
  void *v519;
  unint64_t *v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t *v523;
  unint64_t v524;
  unint64_t v525;
  uint64_t v526;
  int v527;
  unint64_t *v528;
  unint64_t v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t *v532;
  unint64_t v533;
  unint64_t *v534;
  unint64_t v535;
  unint64_t *v536;
  unint64_t v537;
  unint64_t *v538;
  unint64_t v539;
  std::runtime_error *v540;
  std::string *v541;
  __int128 v542;
  double v543;
  uint64_t v544;
  double v545;
  uint64_t v546;
  double v547;
  double v548;
  double v549;
  double v550;
  uint64_t v551;
  _QWORD *v552;
  _QWORD *v553;
  size_t v554;
  int v555;
  int v556;
  int v557;
  int v558;
  char v559;
  uint64_t v560;
  _QWORD *v561;
  _QWORD *v562;
  size_t v563;
  int v564;
  int v565;
  int v566;
  int v567;
  char v568;
  uint64_t v569;
  unint64_t v570;
  void *v571;
  uint64_t v572;
  _QWORD *v573;
  turi::flexible_type_impl *v574;
  _QWORD *v575;
  uint64_t v576;
  __int128 v577;
  std::string *v578;
  std::string::size_type v579;
  void *v580;
  uint64_t v581;
  _QWORD *v582;
  _QWORD *v583;
  int v584;
  turi::option_handling::option_info *v585;
  uint64_t v586;
  _QWORD *v587;
  void *v588;
  uint64_t v589;
  _QWORD *v590;
  _QWORD *v591;
  void *v592;
  uint64_t v593;
  _QWORD *v594;
  uint64_t v595;
  std::runtime_error *exception;
  std::string *v597;
  __int128 v598;
  std::runtime_error *v599;
  std::string *v600;
  __int128 v601;
  uint64_t v602;
  __int128 v603;
  std::string *v604;
  std::string::size_type v605;
  void *v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  __int128 v610;
  std::string *v611;
  std::string::size_type v612;
  _QWORD *v613;
  turi::flexible_type_impl *v614;
  uint64_t v615;
  __int128 v616;
  std::string *v617;
  std::string::size_type v618;
  _QWORD *v619;
  turi::flexible_type_impl *v620;
  uint64_t v621;
  __int128 v622;
  std::string *v623;
  std::string::size_type v624;
  uint64_t v625;
  uint64_t v626;
  __int128 v627;
  std::string *v628;
  std::string::size_type v629;
  __int128 v630;
  std::string *v631;
  std::string::size_type v632;
  void *v633;
  uint64_t v634;
  _QWORD *v635;
  _QWORD *v636;
  int v637;
  turi::option_handling::option_info *v638;
  uint64_t v639;
  _QWORD *v640;
  _QWORD *v641;
  void *v642;
  uint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  __int128 v646;
  std::string *v647;
  std::string::size_type v648;
  void *v649;
  uint64_t v650;
  _QWORD *v651;
  _QWORD *v652;
  int v653;
  turi::option_handling::option_info *v654;
  uint64_t v655;
  _QWORD *v656;
  _QWORD *v657;
  void *v658;
  uint64_t v659;
  _QWORD *v660;
  uint64_t v661;
  __int128 v662;
  std::string *p_str;
  std::string::size_type size;
  void *v665;
  uint64_t v666;
  _QWORD *v667;
  turi::option_handling::option_info *v668;
  void *v669;
  uint64_t v670;
  unsigned __int8 v671;
  _QWORD v672[3];
  _QWORD v673[3];
  void *__p;
  void *v675;
  uint64_t v676;
  std::string v677;
  std::string __str;
  size_t __idx;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  uint64_t v684[3];
  char v685;
  uint64_t v686[3];
  char v687;
  uint64_t v688[3];
  char v689;
  uint64_t v690[3];
  char v691;
  uint64_t v692[3];
  char v693;
  uint64_t v694[3];
  char v695;
  uint64_t v696[3];
  char v697;
  uint64_t v698[3];
  char v699;
  uint64_t v700[3];
  char v701;
  uint64_t v702[3];
  char v703;
  uint64_t v704[3];
  char v705;
  uint64_t v706[3];
  char v707;
  _BYTE v708[32];
  __int128 v709;
  __int128 v710;
  uint64_t v711;

  v711 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 12) == 2)
    v6 = "'";
  else
    v6 = "";
  std::string::basic_string[abi:ne180100]<0>(&v669, v6);
  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  switch(*((_DWORD *)this + 16))
  {
    case 0:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v7 = (double)*(uint64_t *)a2;
          *((_DWORD *)a3 + 2) = 0;
          *((_BYTE *)a3 + 12) = 1;
          *(double *)a3 = v7;
          break;
        case 1:
          if (a2 != (const turi::flexible_type *)a3)
          {
            *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)((char *)a2 + 5);
            *a3 = *(_QWORD *)a2;
            *((_BYTE *)a3 + 12) = 1;
          }
          break;
        case 2:
          v100 = *(_QWORD *)a2;
          __p = 0;
          v103 = *(_QWORD *)(v100 + 8);
          v101 = v100 + 8;
          v102 = v103;
          v104 = *(unsigned __int8 *)(v101 + 23);
          if ((v104 & 0x80u) == 0)
            v102 = v101;
          v105 = *(_QWORD *)(v101 + 8);
          if ((v104 & 0x80u) == 0)
            v105 = v104;
          v677.__r_.__value_.__r.__words[0] = v102;
          v677.__r_.__value_.__l.__size_ = v102 + v105;
          if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::float_types_converter_internal<double>((unsigned __int8 **)&v677, (double *)&__p) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v680);
            *(_QWORD *)&v680 = &unk_24D91BD80;
            *(_QWORD *)&v681 = MEMORY[0x24BEDB780];
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v680);
          }
          v106 = __p;
          switch(*((_BYTE *)a3 + 12))
          {
            case 2:
              v107 = (unint64_t *)*a3;
              do
              {
                v108 = __ldaxr(v107);
                v109 = v108 - 1;
              }
              while (__stlxr(v109, v107));
              if (!v109)
              {
                v110 = *a3;
                if (!*a3)
                  goto LABEL_371;
                if (*(char *)(v110 + 31) < 0)
                  operator delete(*(void **)(v110 + 8));
                v111 = (_QWORD *)v110;
                v112 = 0x1012C404EF22A49;
                goto LABEL_370;
              }
              break;
            case 3:
              v221 = (unint64_t *)*a3;
              do
              {
                v222 = __ldaxr(v221);
                v223 = v222 - 1;
              }
              while (__stlxr(v223, v221));
              if (!v223)
              {
                v224 = (_QWORD *)*a3;
                if (!*a3)
                  goto LABEL_371;
                v225 = (void *)v224[1];
                if (v225)
                {
                  v224[2] = v225;
                  operator delete(v225);
                }
                v111 = v224;
                v112 = 0x1080C409938AC02;
                goto LABEL_370;
              }
              break;
            case 4:
              v205 = (unint64_t *)*a3;
              do
              {
                v206 = __ldaxr(v205);
                v207 = v206 - 1;
              }
              while (__stlxr(v207, v205));
              if (!v207)
              {
                v208 = (_QWORD *)*a3;
                if (!*a3)
                  goto LABEL_371;
                *(_QWORD *)&v680 = v208 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
                goto LABEL_357;
              }
              break;
            case 5:
              v231 = (unint64_t *)*a3;
              do
              {
                v232 = __ldaxr(v231);
                v233 = v232 - 1;
              }
              while (__stlxr(v233, v231));
              if (!v233)
              {
                v208 = (_QWORD *)*a3;
                if (!*a3)
                  goto LABEL_371;
                *(_QWORD *)&v680 = v208 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
LABEL_357:
                v111 = v208;
                v112 = 0x1020C405E66F15BLL;
                goto LABEL_370;
              }
              break;
            case 8:
              v237 = (unint64_t *)*a3;
              do
              {
                v238 = __ldaxr(v237);
                v239 = v238 - 1;
              }
              while (__stlxr(v239, v237));
              if (!v239)
              {
                v240 = *a3;
                if (!*a3)
                  goto LABEL_371;
                boost::detail::shared_count::~shared_count((unsigned int **)(v240 + 16));
                v111 = (_QWORD *)v240;
                v216 = -235920773;
                goto LABEL_369;
              }
              break;
            case 9:
              v213 = (unint64_t *)*a3;
              do
              {
                v214 = __ldaxr(v213);
                v215 = v214 - 1;
              }
              while (__stlxr(v215, v213));
              if (!v215)
              {
                if (*a3)
                {
                  v111 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*a3);
                  v216 = 2071181815;
LABEL_369:
                  v112 = v216 | 0x1030C4000000000;
LABEL_370:
                  MEMORY[0x219A19A08](v111, v112);
                }
LABEL_371:
                *a3 = 0;
              }
              break;
            default:
              break;
          }
          *((_DWORD *)a3 + 2) = 0;
          *((_BYTE *)a3 + 12) = 1;
          *a3 = (uint64_t)v106;
          break;
        case 7:
          if ((uint64_t *)((char *)this + 48) != a3)
          {
            *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)((char *)this + 53);
            *a3 = *((_QWORD *)this + 6);
            v126 = *((unsigned __int8 *)this + 60);
            *((_BYTE *)a3 + 12) = v126;
            switch(v126)
            {
              case 2:
                v127 = (unint64_t *)*a3;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 + 1, v127));
                break;
              case 3:
                v475 = (unint64_t *)*a3;
                do
                  v476 = __ldaxr(v475);
                while (__stlxr(v476 + 1, v475));
                break;
              case 4:
                v471 = (unint64_t *)*a3;
                do
                  v472 = __ldaxr(v471);
                while (__stlxr(v472 + 1, v471));
                break;
              case 5:
                v477 = (unint64_t *)*a3;
                do
                  v478 = __ldaxr(v477);
                while (__stlxr(v478 + 1, v477));
                break;
              case 8:
                v479 = (unint64_t *)*a3;
                do
                  v480 = __ldaxr(v479);
                while (__stlxr(v480 + 1, v479));
                break;
              case 9:
                v473 = (unint64_t *)*a3;
                do
                  v474 = __ldaxr(v473);
                while (__stlxr(v474 + 1, v473));
                break;
              default:
                goto LABEL_373;
            }
          }
          break;
        default:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v708);
          v652 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v708, (uint64_t)"Expected numeric value for option '", 35);
          v653 = *((char *)this + 23);
          if (v653 >= 0)
            v654 = this;
          else
            v654 = *(turi::option_handling::option_info **)this;
          if (v653 >= 0)
            v655 = *((unsigned __int8 *)this + 23);
          else
            v655 = *((_QWORD *)this + 1);
          v656 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v652, (uint64_t)v654, v655);
          v657 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v656, (uint64_t)"'. Cannot cast ", 15);
          if ((v671 & 0x80u) == 0)
            v658 = &v669;
          else
            v658 = v669;
          if ((v671 & 0x80u) == 0)
            v659 = v671;
          else
            v659 = v670;
          v660 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v657, (uint64_t)v658, v659);
          switch(*((_BYTE *)a2 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_1254;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_1254:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v680);
              goto LABEL_1265;
            case 2:
              v661 = *(_QWORD *)a2;
              if (*(char *)(*(_QWORD *)a2 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v661 + 8), *(_QWORD *)(v661 + 16));
              }
              else
              {
                v662 = *(_OWORD *)(v661 + 8);
                __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v661 + 24);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v662;
              }
              goto LABEL_1265;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)a2 + 8));
              goto LABEL_1265;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)a2 + 8));
              goto LABEL_1265;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)a2 + 8));
              goto LABEL_1265;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(a2, &__str);
              goto LABEL_1265;
            case 7:
              memset(&__str, 0, sizeof(__str));
              goto LABEL_1265;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_1265;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)a2 + 8));
LABEL_1265:
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_str = &__str;
              else
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                size = __str.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v660, (uint64_t)p_str, size);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if ((v671 & 0x80u) == 0)
                v665 = &v669;
              else
                v665 = v669;
              if ((v671 & 0x80u) == 0)
                v666 = v671;
              else
                v666 = v670;
              v667 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v660, (uint64_t)v665, v666);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v667, (uint64_t)" to a numeric value.", 20);
              *(_QWORD *)&v680 = v708;
              turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_0::operator()();
            default:
              goto LABEL_1047;
          }
          goto LABEL_1047;
      }
LABEL_373:
      v241 = 0.0;
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v241 = (double)*a3;
          break;
        case 1:
          v241 = *(double *)a3;
          break;
        case 2:
          v243 = *a3;
          v244 = (char **)(*a3 + 8);
          __str.__r_.__value_.__r.__words[0] = 0;
          v245 = (char *)v244;
          if (*(char *)(v243 + 31) < 0)
            v245 = *v244;
          std::string::basic_string[abi:ne180100]<0>(&v680, v245);
          v246 = std::stod((const std::string *)&v680, (size_t *)&__str);
          if (SBYTE7(v681) < 0)
            operator delete((void *)v680);
          if (*(char *)(v243 + 31) < 0)
            v247 = *(_QWORD *)(v243 + 16);
          else
            v247 = *(unsigned __int8 *)(v243 + 31);
          if (__str.__r_.__value_.__r.__words[0] != v247)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v597 = std::string::append((std::string *)v708, " cannot be interpreted as a float");
            v598 = *(_OWORD *)&v597->__r_.__value_.__l.__data_;
            *(_QWORD *)&v681 = *((_QWORD *)&v597->__r_.__value_.__l + 2);
            v680 = v598;
            v597->__r_.__value_.__l.__size_ = 0;
            v597->__r_.__value_.__r.__words[2] = 0;
            v597->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)&v680);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v256 = v246;
          v241 = v256;
          break;
        case 3:
          v242 = *a3;
          *(_QWORD *)&v681 = 0;
          v680 = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v680, *(const void **)(v242 + 8), *(_QWORD *)(v242 + 16), (uint64_t)(*(_QWORD *)(v242 + 16) - *(_QWORD *)(v242 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)v680)
          {
            *((_QWORD *)&v680 + 1) = v680;
            operator delete((void *)v680);
          }
          break;
        case 4:
          v248 = *a3;
          *(_QWORD *)&v681 = 0;
          v680 = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v680, *(uint64_t **)(v248 + 8), *(uint64_t **)(v248 + 16), (uint64_t)(*(_QWORD *)(v248 + 16) - *(_QWORD *)(v248 + 8)) >> 4);
          turi::flexible_type_fail(0);
          *(_QWORD *)v708 = &v680;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v708);
          break;
        case 5:
          v249 = *a3;
          *(_QWORD *)&v681 = 0;
          v680 = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v680, *(uint64_t **)(v249 + 8), *(uint64_t **)(v249 + 16), (uint64_t)(*(_QWORD *)(v249 + 16) - *(_QWORD *)(v249 + 8)) >> 5);
          turi::flexible_type_fail(0);
          *(_QWORD *)v708 = &v680;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v708);
          break;
        case 6:
          v241 = (double)*((int *)a3 + 2) / 1000000.0 + (double)(*a3 << 8 >> 8);
          break;
        case 7:
          break;
        case 8:
          v250 = *a3;
          v251 = *(_QWORD *)(*a3 + 16);
          *(_QWORD *)&v680 = *(_QWORD *)(*a3 + 8);
          *((_QWORD *)&v680 + 1) = v251;
          if (v251)
          {
            v252 = (unsigned int *)(v251 + 8);
            do
              v253 = __ldxr(v252);
            while (__stxr(v253 + 1, v252));
          }
          v254 = *(_OWORD *)(v250 + 24);
          v255 = *(_OWORD *)(v250 + 56);
          v682 = *(_OWORD *)(v250 + 40);
          v683 = v255;
          v681 = v254;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&v680 + 1);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&v680, *a3 + 8);
          turi::flexible_type_fail(0);
          turi::flexible_type_impl::ndarray<double>::~ndarray(&v680);
          break;
        default:
          goto LABEL_1047;
      }
      __p = *(void **)&v241;
      *(_QWORD *)v708 = 0;
      *(_DWORD *)&v708[8] = 0;
      v708[12] = 0;
      turi::flexible_type::operator=<double>((uint64_t)v708, &__p);
      v258 = (char *)this + 72;
      switch(v708[12])
      {
        case 0:
          switch(*((_BYTE *)this + 84))
          {
            case 0:
              if (*(_QWORD *)v258 < *(uint64_t *)v708)
                goto LABEL_904;
              goto LABEL_431;
            case 1:
              v257.n128_u64[0] = *(_QWORD *)v258;
              v543 = (double)*(uint64_t *)v708;
              goto LABEL_901;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_430;
            case 6:
              if (*(uint64_t *)v708 > (uint64_t)(*(_QWORD *)v258 << 8) >> 8)
                goto LABEL_904;
              goto LABEL_431;
            default:
              goto LABEL_1047;
          }
        case 1:
          switch(*((_BYTE *)this + 84))
          {
            case 0:
              v257.n128_u64[0] = *(_QWORD *)v708;
              if (*(double *)v708 > (double)*(uint64_t *)v258)
                goto LABEL_904;
              goto LABEL_431;
            case 1:
              v257.n128_u64[0] = *(_QWORD *)v258;
              v543 = *(double *)v708;
LABEL_901:
              if (v257.n128_f64[0] < v543)
                goto LABEL_904;
              goto LABEL_431;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_430;
            case 6:
              v257.n128_f64[0] = (double)*((int *)this + 20) / 1000000.0
                               + (double)((uint64_t)(*((_QWORD *)this + 9) << 8) >> 8);
              if (v257.n128_f64[0] < *(double *)v708)
                goto LABEL_904;
              goto LABEL_431;
            default:
              goto LABEL_1047;
          }
        case 2:
          v260 = *((unsigned __int8 *)this + 84);
          if (v260 - 3 < 7 || v260 < 2)
            goto LABEL_430;
          if (v260 != 2)
            goto LABEL_1047;
          if ((std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)v258 + 8), (_BYTE *)(*(_QWORD *)v708 + 8)) & 0x80000000) != 0)goto LABEL_904;
          goto LABEL_431;
        case 3:
          v261 = *((unsigned __int8 *)this + 84);
          if (v261 > 9)
            goto LABEL_1047;
          if (v261 != 3)
            goto LABEL_430;
          v262 = *(unint64_t **)(*(_QWORD *)v258 + 8);
          v263 = *(double **)(*(_QWORD *)v708 + 8);
          v264 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v708 + 16) - (_QWORD)v263) >> 3;
          v265 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v258 + 16) - (_QWORD)v262) >> 3;
          if (*(unint64_t **)(*(_QWORD *)v258 + 16) == v262)
            goto LABEL_418;
          if (v265 <= 1)
            v266 = 1;
          else
            v266 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v258 + 16) - (_QWORD)v262) >> 3;
          v267 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v708 + 16) - (_QWORD)v263) >> 3;
          break;
        case 4:
          v259 = *((unsigned __int8 *)this + 84);
          if (v259 > 9)
            goto LABEL_1047;
          if (v259 != 4)
          {
LABEL_430:
            turi::flexible_type_fail(0);
            goto LABEL_431;
          }
          if (!turi::flexible_type_impl::lt_operator::operator()(v257, (uint64_t)&v680, (uint64_t *)(*(_QWORD *)v258 + 8), (_QWORD *)(*(_QWORD *)v708 + 8)))goto LABEL_431;
          goto LABEL_904;
        case 5:
        case 8:
        case 9:
          if (*((unsigned __int8 *)this + 84) >= 0xAu)
            goto LABEL_1047;
          goto LABEL_430;
        case 6:
          switch(*((_BYTE *)this + 84))
          {
            case 0:
              if (*(_QWORD *)v258 < (uint64_t)(*(_QWORD *)v708 << 8) >> 8)
                goto LABEL_904;
              goto LABEL_431;
            case 1:
              v257.n128_f64[0] = (double)*(int *)&v708[8] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v708 << 8) >> 8);
              if (v257.n128_f64[0] > *(double *)v258)
                goto LABEL_904;
              goto LABEL_431;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_430;
            case 6:
              v544 = (uint64_t)(*(_QWORD *)v258 << 8) >> 8;
              if (v544 < (uint64_t)(*(_QWORD *)v708 << 8) >> 8
                || v544 == (uint64_t)(*(_QWORD *)v708 << 8) >> 8 && *((_DWORD *)this + 20) < *(int *)&v708[8])
              {
                goto LABEL_904;
              }
              goto LABEL_431;
            default:
              goto LABEL_1047;
          }
        case 7:
          if (*((unsigned __int8 *)this + 84) <= 9u)
            goto LABEL_430;
          goto LABEL_1047;
        default:
          goto LABEL_1047;
      }
      while (v267)
      {
        v257.n128_u64[0] = *v262;
        if (*(double *)v262 > *v263)
          break;
        if (*(double *)v262 < *v263)
          goto LABEL_904;
        --v267;
        ++v262;
        ++v263;
        if (!--v266)
        {
LABEL_418:
          if (v265 < v264)
          {
LABEL_904:
            v268 = 1;
            goto LABEL_502;
          }
          break;
        }
      }
LABEL_431:
      switch(v708[12])
      {
        case 0:
          v268 = 0;
          switch(*((_BYTE *)this + 84))
          {
            case 0:
              v269 = *(_QWORD *)v258 == *(_QWORD *)v708;
              goto LABEL_484;
            case 1:
              v257.n128_u64[0] = *(_QWORD *)v258;
              v310 = *(_QWORD *)v708;
              goto LABEL_930;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_502;
            case 6:
              v269 = *(_QWORD *)v708 == (uint64_t)(*((_QWORD *)this + 9) << 8) >> 8 && *((_DWORD *)this + 20) == 0;
              goto LABEL_484;
            default:
              goto LABEL_1047;
          }
        case 1:
          v268 = 0;
          switch(*((_BYTE *)this + 84))
          {
            case 0:
              v257.n128_u64[0] = *(_QWORD *)v708;
              v310 = *(_QWORD *)v258;
LABEL_930:
              v269 = v257.n128_f64[0] == (double)v310;
              goto LABEL_484;
            case 1:
              v257.n128_u64[0] = *(_QWORD *)v258;
              v268 = *(double *)v258 == *(double *)v708;
              goto LABEL_502;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_502;
            case 6:
              v547 = *(double *)v708;
              v548 = (double)*((int *)this + 20) / 1000000.0 + (double)((uint64_t)(*((_QWORD *)this + 9) << 8) >> 8);
              goto LABEL_933;
            default:
              goto LABEL_1047;
          }
        case 2:
          v296 = *((unsigned __int8 *)this + 84);
          if (v296 - 3 < 7 || v296 < 2)
            goto LABEL_501;
          if (v296 != 2)
            goto LABEL_1047;
          v298 = *(_QWORD *)v258;
          if (*(char *)(*(_QWORD *)v258 + 31) < 0)
            v299 = *(_QWORD *)(v298 + 16);
          else
            v299 = *(unsigned __int8 *)(*(_QWORD *)v258 + 31);
          if (*(char *)(*(_QWORD *)v708 + 31) < 0)
            v551 = *(_QWORD *)(*(_QWORD *)v708 + 16);
          else
            v551 = *(unsigned __int8 *)(*(_QWORD *)v708 + 31);
          if (v299 != v551)
            goto LABEL_501;
          v552 = (_QWORD *)(v298 + 8);
          if ((*(_BYTE *)(*(_QWORD *)v258 + 31) & 0x80) != 0)
            v552 = (_QWORD *)*v552;
          v553 = (_QWORD *)(*(_QWORD *)v708 + 8);
          if ((*(_BYTE *)(*(_QWORD *)v708 + 31) & 0x80) != 0)
            v553 = (_QWORD *)*v553;
          if ((*(_BYTE *)(*(_QWORD *)v258 + 31) & 0x80) != 0)
          {
            v269 = memcmp(v552, v553, v299) == 0;
LABEL_484:
            v268 = v269;
          }
          else
          {
            if (!v299)
              goto LABEL_904;
            v554 = v299 - 1;
            do
            {
              v556 = *(unsigned __int8 *)v552;
              v552 = (_QWORD *)((char *)v552 + 1);
              v555 = v556;
              v558 = *(unsigned __int8 *)v553;
              v553 = (_QWORD *)((char *)v553 + 1);
              v557 = v558;
              v57 = v554-- != 0;
              v559 = v57;
              v268 = v555 == v557;
            }
            while (v555 == v557 && (v559 & 1) != 0);
          }
          goto LABEL_502;
        case 3:
          v300 = *((unsigned __int8 *)this + 84);
          if (v300 > 9)
            goto LABEL_1047;
          if (v300 != 3)
            goto LABEL_501;
          v301 = *(unint64_t **)(*(_QWORD *)v258 + 8);
          v302 = *(_QWORD **)(*(_QWORD *)v258 + 16);
          v303 = v302 - v301;
          v304 = *(double **)(*(_QWORD *)v708 + 8);
          if (v303 != (uint64_t)(*(_QWORD *)(*(_QWORD *)v708 + 16) - (_QWORD)v304) >> 3)
            goto LABEL_501;
          if (v302 == v301)
            goto LABEL_904;
          if (v303 <= 1)
            v305 = 1;
          else
            v305 = v302 - v301;
          v257.n128_u64[0] = *v301;
          if (*(double *)v301 != *v304)
            goto LABEL_501;
          v306 = 1;
          do
          {
            v307 = v306;
            if (v305 == v306)
              break;
            v257.n128_u64[0] = v301[v306];
            v308 = v304[v306++];
          }
          while (v257.n128_f64[0] == v308);
          v268 = v307 >= v303;
          goto LABEL_502;
        case 4:
          v270 = *((unsigned __int8 *)this + 84);
          if (v270 > 9)
            goto LABEL_1047;
          if (v270 != 4)
            goto LABEL_501;
          v271 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)v258 + 8), (_QWORD *)(*(_QWORD *)v708 + 8));
          goto LABEL_921;
        case 5:
          v311 = *((unsigned __int8 *)this + 84);
          if (v311 > 9)
            goto LABEL_1047;
          if (v311 != 5)
            goto LABEL_501;
          v271 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v680, (uint64_t **)(*(_QWORD *)v258 + 8), (uint64_t **)(*(_QWORD *)v708 + 8));
          goto LABEL_921;
        case 6:
          v268 = 0;
          switch(*((_BYTE *)this + 84))
          {
            case 0:
              v269 = *(_QWORD *)v258 == (uint64_t)(*(_QWORD *)v708 << 8) >> 8 && *(_DWORD *)&v708[8] == 0;
              goto LABEL_484;
            case 1:
              v548 = *(double *)v258;
              v547 = (double)*(int *)&v708[8] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v708 << 8) >> 8);
LABEL_933:
              v257.n128_f64[0] = vabdd_f64(v548, v547);
              v268 = v257.n128_f64[0] < 0.0000005;
              goto LABEL_502;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_502;
            case 6:
              v269 = ((*(_QWORD *)v708 ^ *((_QWORD *)this + 9)) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)this + 20) == *(_DWORD *)&v708[8];
              goto LABEL_484;
            default:
              goto LABEL_1047;
          }
        case 7:
          v309 = *((unsigned __int8 *)this + 84);
          if (v309 > 9)
            goto LABEL_1047;
          v269 = v309 == 7;
          goto LABEL_484;
        case 8:
          v312 = *((unsigned __int8 *)this + 84);
          if (v312 < 8 || v312 == 9)
            goto LABEL_501;
          if (v312 != 8)
            goto LABEL_1047;
          v271 = turi::image_type::operator==(*(_QWORD *)v258 + 8, *(_QWORD *)v708 + 8);
LABEL_921:
          v268 = v271;
          goto LABEL_502;
        case 9:
          v272 = *((unsigned __int8 *)this + 84);
          if (v272 < 9)
            goto LABEL_501;
          if (v272 != 9)
            goto LABEL_1047;
          v273 = *(_QWORD *)v708;
          v274 = *(_QWORD **)v258;
          if (*(_QWORD *)v708 == *(_QWORD *)v258)
            goto LABEL_904;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v274 + 1), *(_QWORD *)v708 + 8))
          {
LABEL_501:
            v268 = 0;
            goto LABEL_502;
          }
          v276 = (char *)v274[3];
          v275 = (char *)v274[4];
          v277 = v275 - v276;
          if (v275 == v276)
            goto LABEL_904;
          if (!v274[1])
            goto LABEL_904;
          v278 = 1;
          do
          {
            v279 = *(_QWORD *)v276;
            v276 += 8;
            v278 *= v279;
          }
          while (v276 != v275);
          if (!v278)
            goto LABEL_904;
          v677.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v680, v277 >> 3, &v677);
          break;
        default:
          goto LABEL_1047;
      }
      while (1)
      {
        v280 = (void *)v680;
        if (*((_QWORD *)&v680 + 1) == (_QWORD)v680)
        {
          v289 = 0;
          v257.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v274[1] + 8 * v274[9]);
        }
        else
        {
          v281 = 0;
          v282 = (uint64_t)(*((_QWORD *)&v680 + 1) - v680) >> 3;
          v283 = (uint64_t *)v274[6];
          if (v282 <= 1)
            v282 = 1;
          v284 = (uint64_t *)v680;
          v285 = v282;
          do
          {
            v287 = *v284++;
            v286 = v287;
            v288 = *v283++;
            v281 += v288 * v286;
            --v285;
          }
          while (v285);
          v289 = 0;
          v257.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v274[1] + 8 * (v274[9] + v281));
          v290 = *(uint64_t **)(v273 + 48);
          v291 = (uint64_t *)v680;
          do
          {
            v293 = *v291++;
            v292 = v293;
            v294 = *v290++;
            v289 += v294 * v292;
            --v282;
          }
          while (v282);
        }
        v295 = *(double *)(**(_QWORD **)(v273 + 8) + 8 * (*(_QWORD *)(v273 + 72) + v289));
        v268 = v257.n128_f64[0] == v295;
        if (v257.n128_f64[0] != v295)
          break;
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v274 + 1), (uint64_t *)&v680))
        {
          v280 = (void *)v680;
          break;
        }
      }
      if (v280)
      {
        *((_QWORD *)&v680 + 1) = v280;
        operator delete(v280);
      }
LABEL_502:
      switch(v708[12])
      {
        case 2:
          v314 = *(unint64_t **)v708;
          do
          {
            v315 = __ldaxr(v314);
            v316 = v315 - 1;
          }
          while (__stlxr(v316, v314));
          if (!v316)
          {
            v317 = *(_QWORD **)v708;
            if (*(_QWORD *)v708)
            {
              if (*(char *)(*(_QWORD *)v708 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)v708 + 8));
              v318 = v317;
              v319 = 0x1012C404EF22A49;
              goto LABEL_539;
            }
          }
          break;
        case 3:
          v328 = *(unint64_t **)v708;
          do
          {
            v329 = __ldaxr(v328);
            v330 = v329 - 1;
          }
          while (__stlxr(v330, v328));
          if (!v330)
          {
            v331 = *(_QWORD **)v708;
            if (*(_QWORD *)v708)
            {
              v332 = *(void **)(*(_QWORD *)v708 + 8);
              if (v332)
              {
                *(_QWORD *)(*(_QWORD *)v708 + 16) = v332;
                operator delete(v332);
              }
              v318 = v331;
              v319 = 0x1080C409938AC02;
              goto LABEL_539;
            }
          }
          break;
        case 4:
          v320 = *(unint64_t **)v708;
          do
          {
            v321 = __ldaxr(v320);
            v322 = v321 - 1;
          }
          while (__stlxr(v322, v320));
          if (!v322)
          {
            v323 = *(_QWORD **)v708;
            if (*(_QWORD *)v708)
            {
              *(_QWORD *)&v680 = *(_QWORD *)v708 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
              goto LABEL_532;
            }
          }
          break;
        case 5:
          v333 = *(unint64_t **)v708;
          do
          {
            v334 = __ldaxr(v333);
            v335 = v334 - 1;
          }
          while (__stlxr(v335, v333));
          if (!v335)
          {
            v323 = *(_QWORD **)v708;
            if (*(_QWORD *)v708)
            {
              *(_QWORD *)&v680 = *(_QWORD *)v708 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
LABEL_532:
              v318 = v323;
              v319 = 0x1020C405E66F15BLL;
              goto LABEL_539;
            }
          }
          break;
        case 8:
          v336 = *(unint64_t **)v708;
          do
          {
            v337 = __ldaxr(v336);
            v338 = v337 - 1;
          }
          while (__stlxr(v338, v336));
          if (!v338)
          {
            v339 = *(_QWORD **)v708;
            if (*(_QWORD *)v708)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v708 + 16));
              v318 = v339;
              v327 = -235920773;
              goto LABEL_538;
            }
          }
          break;
        case 9:
          v324 = *(unint64_t **)v708;
          do
          {
            v325 = __ldaxr(v324);
            v326 = v325 - 1;
          }
          while (__stlxr(v326, v324));
          if (!v326 && *(_QWORD *)v708)
          {
            v318 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v708);
            v327 = 2071181815;
LABEL_538:
            v319 = v327 | 0x1030C4000000000;
LABEL_539:
            MEMORY[0x219A19A08](v318, v319, v257);
          }
          break;
        default:
          break;
      }
      if (v268)
      {
        v340 = 0.0;
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
            v340 = (double)*a3;
            break;
          case 1:
            v340 = *(double *)a3;
            break;
          case 2:
            v342 = *a3;
            v343 = (char **)(*a3 + 8);
            __str.__r_.__value_.__r.__words[0] = 0;
            v344 = (char *)v343;
            if (*(char *)(v342 + 31) < 0)
              v344 = *v343;
            std::string::basic_string[abi:ne180100]<0>(&v680, v344);
            v345 = std::stod((const std::string *)&v680, (size_t *)&__str);
            if (SBYTE7(v681) < 0)
              operator delete((void *)v680);
            if (*(char *)(v342 + 31) < 0)
              v346 = *(_QWORD *)(v342 + 16);
            else
              v346 = *(unsigned __int8 *)(v342 + 31);
            if (__str.__r_.__value_.__r.__words[0] != v346)
            {
              v599 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v600 = std::string::append((std::string *)v708, " cannot be interpreted as a float");
              v601 = *(_OWORD *)&v600->__r_.__value_.__l.__data_;
              *(_QWORD *)&v681 = *((_QWORD *)&v600->__r_.__value_.__l + 2);
              v680 = v601;
              v600->__r_.__value_.__l.__size_ = 0;
              v600->__r_.__value_.__r.__words[2] = 0;
              v600->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v599, (const std::string *)&v680);
              __cxa_throw(v599, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            v355 = v345;
            v340 = v355;
            break;
          case 3:
            v341 = *a3;
            *(_QWORD *)&v681 = 0;
            v680 = 0uLL;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v680, *(const void **)(v341 + 8), *(_QWORD *)(v341 + 16), (uint64_t)(*(_QWORD *)(v341 + 16) - *(_QWORD *)(v341 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if ((_QWORD)v680)
            {
              *((_QWORD *)&v680 + 1) = v680;
              operator delete((void *)v680);
            }
            break;
          case 4:
            v347 = *a3;
            *(_QWORD *)&v681 = 0;
            v680 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v680, *(uint64_t **)(v347 + 8), *(uint64_t **)(v347 + 16), (uint64_t)(*(_QWORD *)(v347 + 16) - *(_QWORD *)(v347 + 8)) >> 4);
            turi::flexible_type_fail(0);
            *(_QWORD *)v708 = &v680;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v708);
            break;
          case 5:
            v348 = *a3;
            *(_QWORD *)&v681 = 0;
            v680 = 0uLL;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v680, *(uint64_t **)(v348 + 8), *(uint64_t **)(v348 + 16), (uint64_t)(*(_QWORD *)(v348 + 16) - *(_QWORD *)(v348 + 8)) >> 5);
            turi::flexible_type_fail(0);
            *(_QWORD *)v708 = &v680;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v708);
            break;
          case 6:
            v340 = (double)*((int *)a3 + 2) / 1000000.0 + (double)(*a3 << 8 >> 8);
            break;
          case 7:
            break;
          case 8:
            v349 = *a3;
            v350 = *(_QWORD *)(*a3 + 16);
            *(_QWORD *)&v680 = *(_QWORD *)(*a3 + 8);
            *((_QWORD *)&v680 + 1) = v350;
            if (v350)
            {
              v351 = (unsigned int *)(v350 + 8);
              do
                v352 = __ldxr(v351);
              while (__stxr(v352 + 1, v351));
            }
            v353 = *(_OWORD *)(v349 + 24);
            v354 = *(_OWORD *)(v349 + 56);
            v682 = *(_OWORD *)(v349 + 40);
            v683 = v354;
            v681 = v353;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&v680 + 1);
            break;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&v680, *a3 + 8);
            turi::flexible_type_fail(0);
            turi::flexible_type_impl::ndarray<double>::~ndarray(&v680);
            break;
          default:
            goto LABEL_1047;
        }
        *(double *)v673 = v340;
        *(_QWORD *)v708 = 0;
        *(_DWORD *)&v708[8] = 0;
        v708[12] = 0;
        turi::flexible_type::operator=<double>((uint64_t)v708, v673);
        switch(v708[12])
        {
          case 0:
            switch(*((_BYTE *)this + 100))
            {
              case 0:
                if (*((_QWORD *)this + 11) > *(uint64_t *)v708)
                  goto LABEL_918;
                goto LABEL_599;
              case 1:
                v356.n128_u64[0] = *((_QWORD *)this + 11);
                v545 = (double)*(uint64_t *)v708;
                goto LABEL_915;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_598;
              case 6:
                if (*(uint64_t *)v708 < (uint64_t)(*((_QWORD *)this + 11) << 8) >> 8)
                  goto LABEL_918;
                goto LABEL_599;
              default:
                goto LABEL_1047;
            }
          case 1:
            switch(*((_BYTE *)this + 100))
            {
              case 0:
                v356.n128_u64[0] = *(_QWORD *)v708;
                if (*(double *)v708 < (double)*((uint64_t *)this + 11))
                  goto LABEL_918;
                goto LABEL_599;
              case 1:
                v356.n128_u64[0] = *((_QWORD *)this + 11);
                v545 = *(double *)v708;
LABEL_915:
                if (v356.n128_f64[0] > v545)
                  goto LABEL_918;
                goto LABEL_599;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_598;
              case 6:
                v356.n128_f64[0] = (double)*((int *)this + 24) / 1000000.0
                                 + (double)((uint64_t)(*((_QWORD *)this + 11) << 8) >> 8);
                if (v356.n128_f64[0] > *(double *)v708)
                  goto LABEL_918;
                goto LABEL_599;
              default:
                goto LABEL_1047;
            }
          case 2:
            v359 = *((unsigned __int8 *)this + 100);
            if (v359 - 3 < 7 || v359 < 2)
              goto LABEL_598;
            if (v359 != 2)
              goto LABEL_1047;
            v358 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)v708 + 8), (_QWORD *)(*((_QWORD *)this + 11) + 8));
            goto LABEL_573;
          case 3:
            v360 = *((unsigned __int8 *)this + 100);
            if (v360 > 9)
              goto LABEL_1047;
            if (v360 != 3)
              goto LABEL_598;
            v361 = *(unint64_t **)(*((_QWORD *)this + 11) + 8);
            v362 = *(double **)(*(_QWORD *)v708 + 8);
            v363 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v708 + 16) - (_QWORD)v362) >> 3;
            v364 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) - (_QWORD)v361) >> 3;
            if (*(unint64_t **)(*((_QWORD *)this + 11) + 16) == v361)
              goto LABEL_586;
            if (v364 <= 1)
              v365 = 1;
            else
              v365 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) - (_QWORD)v361) >> 3;
            v366 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v708 + 16) - (_QWORD)v362) >> 3;
            break;
          case 4:
            v357 = *((unsigned __int8 *)this + 100);
            if (v357 > 9)
              goto LABEL_1047;
            if (v357 != 4)
            {
LABEL_598:
              turi::flexible_type_fail(0);
              goto LABEL_599;
            }
            v358 = turi::flexible_type_impl::gt_operator::operator()(v356, (uint64_t)&v680, (uint64_t *)(*((_QWORD *)this + 11) + 8), (_QWORD *)(*(_QWORD *)v708 + 8));
LABEL_573:
            if (v358)
              goto LABEL_918;
            goto LABEL_599;
          case 5:
          case 8:
          case 9:
            if (*((unsigned __int8 *)this + 100) >= 0xAu)
              goto LABEL_1047;
            goto LABEL_598;
          case 6:
            switch(*((_BYTE *)this + 100))
            {
              case 0:
                if (*((_QWORD *)this + 11) > (uint64_t)(*(_QWORD *)v708 << 8) >> 8)
                  goto LABEL_918;
                goto LABEL_599;
              case 1:
                v356.n128_f64[0] = (double)*(int *)&v708[8] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v708 << 8) >> 8);
                if (v356.n128_f64[0] < *((double *)this + 11))
                  goto LABEL_918;
                goto LABEL_599;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_598;
              case 6:
                v546 = (uint64_t)(*((_QWORD *)this + 11) << 8) >> 8;
                if (v546 > (uint64_t)(*(_QWORD *)v708 << 8) >> 8
                  || v546 == (uint64_t)(*(_QWORD *)v708 << 8) >> 8 && *((_DWORD *)this + 24) > *(int *)&v708[8])
                {
                  goto LABEL_918;
                }
                goto LABEL_599;
              default:
                goto LABEL_1047;
            }
          case 7:
            if (*((unsigned __int8 *)this + 100) <= 9u)
              goto LABEL_598;
            goto LABEL_1047;
          default:
            goto LABEL_1047;
        }
        do
        {
          if (!v366)
            goto LABEL_918;
          v356.n128_u64[0] = *v361;
          if (*(double *)v361 > *v362)
            goto LABEL_918;
          if (*(double *)v361 < *v362)
            goto LABEL_599;
          --v366;
          ++v361;
          ++v362;
          --v365;
        }
        while (v365);
LABEL_586:
        if (v364 > v363)
        {
LABEL_918:
          v367 = 1;
          goto LABEL_657;
        }
LABEL_599:
        switch(v708[12])
        {
          case 0:
            v367 = 0;
            switch(*((_BYTE *)this + 100))
            {
              case 0:
                v368 = *((_QWORD *)this + 11) == *(_QWORD *)v708;
                goto LABEL_649;
              case 1:
                v356.n128_u64[0] = *((_QWORD *)this + 11);
                v408 = *(_QWORD *)v708;
                goto LABEL_944;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_657;
              case 6:
                v368 = *(_QWORD *)v708 == (uint64_t)(*((_QWORD *)this + 11) << 8) >> 8 && *((_DWORD *)this + 24) == 0;
                goto LABEL_649;
              default:
                goto LABEL_1047;
            }
          case 1:
            v367 = 0;
            switch(*((_BYTE *)this + 100))
            {
              case 0:
                v356.n128_u64[0] = *(_QWORD *)v708;
                v408 = *((_QWORD *)this + 11);
LABEL_944:
                v368 = v356.n128_f64[0] == (double)v408;
                goto LABEL_649;
              case 1:
                v356.n128_u64[0] = *((_QWORD *)this + 11);
                v367 = v356.n128_f64[0] == *(double *)v708;
                goto LABEL_657;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_657;
              case 6:
                v549 = *(double *)v708;
                v550 = (double)*((int *)this + 24) / 1000000.0 + (double)((uint64_t)(*((_QWORD *)this + 11) << 8) >> 8);
                goto LABEL_947;
              default:
                goto LABEL_1047;
            }
          case 2:
            v367 = 0;
            v395 = *((unsigned __int8 *)this + 100);
            if (v395 - 3 < 7 || v395 < 2)
              goto LABEL_657;
            if (v395 != 2)
              goto LABEL_1047;
            v396 = *((_QWORD *)this + 11);
            if (*(char *)(v396 + 31) < 0)
              v397 = *(_QWORD *)(v396 + 16);
            else
              v397 = *(unsigned __int8 *)(v396 + 31);
            if (*(char *)(*(_QWORD *)v708 + 31) < 0)
              v560 = *(_QWORD *)(*(_QWORD *)v708 + 16);
            else
              v560 = *(unsigned __int8 *)(*(_QWORD *)v708 + 31);
            if (v397 != v560)
              goto LABEL_656;
            v561 = (_QWORD *)(v396 + 8);
            if ((*(_BYTE *)(v396 + 31) & 0x80) != 0)
              v561 = (_QWORD *)*v561;
            v562 = (_QWORD *)(*(_QWORD *)v708 + 8);
            if ((*(_BYTE *)(*(_QWORD *)v708 + 31) & 0x80) != 0)
              v562 = (_QWORD *)*v562;
            if ((*(_BYTE *)(v396 + 31) & 0x80) != 0)
            {
              v368 = memcmp(v561, v562, v397) == 0;
LABEL_649:
              v367 = v368;
            }
            else
            {
              if (!v397)
                goto LABEL_918;
              v563 = v397 - 1;
              do
              {
                v565 = *(unsigned __int8 *)v561;
                v561 = (_QWORD *)((char *)v561 + 1);
                v564 = v565;
                v567 = *(unsigned __int8 *)v562;
                v562 = (_QWORD *)((char *)v562 + 1);
                v566 = v567;
                v57 = v563-- != 0;
                v568 = v57;
                v367 = v564 == v566;
              }
              while (v564 == v566 && (v568 & 1) != 0);
            }
            goto LABEL_657;
          case 3:
            v398 = *((unsigned __int8 *)this + 100);
            if (v398 > 9)
              goto LABEL_1047;
            if (v398 != 3)
              goto LABEL_656;
            v399 = *(unint64_t **)(*((_QWORD *)this + 11) + 8);
            v400 = *(_QWORD **)(*((_QWORD *)this + 11) + 16);
            v401 = v400 - v399;
            v402 = *(double **)(*(_QWORD *)v708 + 8);
            if (v401 != (uint64_t)(*(_QWORD *)(*(_QWORD *)v708 + 16) - (_QWORD)v402) >> 3)
              goto LABEL_656;
            if (v400 == v399)
              goto LABEL_918;
            if (v401 <= 1)
              v403 = 1;
            else
              v403 = v400 - v399;
            v356.n128_u64[0] = *v399;
            if (*(double *)v399 != *v402)
              goto LABEL_656;
            v404 = 1;
            do
            {
              v405 = v404;
              if (v403 == v404)
                break;
              v356.n128_u64[0] = v399[v404];
              v406 = v402[v404++];
            }
            while (v356.n128_f64[0] == v406);
            v367 = v405 >= v401;
            goto LABEL_657;
          case 4:
            v369 = *((unsigned __int8 *)this + 100);
            if (v369 > 9)
              goto LABEL_1047;
            if (v369 != 4)
              goto LABEL_656;
            v370 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v680, (uint64_t *)(*((_QWORD *)this + 11) + 8), (_QWORD *)(*(_QWORD *)v708 + 8));
            goto LABEL_939;
          case 5:
            v409 = *((unsigned __int8 *)this + 100);
            if (v409 > 9)
              goto LABEL_1047;
            if (v409 != 5)
              goto LABEL_656;
            v370 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v680, (uint64_t **)(*((_QWORD *)this + 11) + 8), (uint64_t **)(*(_QWORD *)v708 + 8));
            goto LABEL_939;
          case 6:
            v367 = 0;
            switch(*((_BYTE *)this + 100))
            {
              case 0:
                v368 = *((_QWORD *)this + 11) == (uint64_t)(*(_QWORD *)v708 << 8) >> 8 && *(_DWORD *)&v708[8] == 0;
                goto LABEL_649;
              case 1:
                v550 = *((double *)this + 11);
                v549 = (double)*(int *)&v708[8] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v708 << 8) >> 8);
LABEL_947:
                v356.n128_f64[0] = vabdd_f64(v550, v549);
                v367 = v356.n128_f64[0] < 0.0000005;
                goto LABEL_657;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_657;
              case 6:
                v368 = ((*(_QWORD *)v708 ^ *((_QWORD *)this + 11)) & 0xFFFFFFFFFFFFFFLL) == 0
                    && *((_DWORD *)this + 24) == *(_DWORD *)&v708[8];
                goto LABEL_649;
              default:
                goto LABEL_1047;
            }
          case 7:
            v407 = *((unsigned __int8 *)this + 100);
            if (v407 >= 0xA)
              goto LABEL_1047;
            v368 = v407 == 7;
            goto LABEL_649;
          case 8:
            v367 = 0;
            v442 = *((unsigned __int8 *)this + 100);
            if (v442 < 8 || v442 == 9)
              goto LABEL_657;
            if (v442 != 8)
              goto LABEL_1047;
            v370 = turi::image_type::operator==(*((_QWORD *)this + 11) + 8, *(_QWORD *)v708 + 8);
LABEL_939:
            v367 = v370;
            goto LABEL_657;
          case 9:
            v371 = *((unsigned __int8 *)this + 100);
            if (v371 < 9)
              goto LABEL_656;
            if (v371 != 9)
              goto LABEL_1047;
            v372 = *(_QWORD *)v708;
            v373 = (_QWORD *)*((_QWORD *)this + 11);
            if (*(_QWORD **)v708 == v373)
              goto LABEL_918;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v373 + 1), *(_QWORD *)v708 + 8))
            {
LABEL_656:
              v367 = 0;
              goto LABEL_657;
            }
            v375 = (char *)v373[3];
            v374 = (char *)v373[4];
            v376 = v374 - v375;
            if (v374 == v375)
              goto LABEL_918;
            if (!v373[1])
              goto LABEL_918;
            v377 = 1;
            do
            {
              v378 = *(_QWORD *)v375;
              v375 += 8;
              v377 *= v378;
            }
            while (v375 != v374);
            if (!v377)
              goto LABEL_918;
            v677.__r_.__value_.__r.__words[0] = 0;
            std::vector<unsigned long>::vector(&v680, v376 >> 3, &v677);
            break;
          default:
            goto LABEL_1047;
        }
        while (1)
        {
          v379 = (void *)v680;
          if (*((_QWORD *)&v680 + 1) == (_QWORD)v680)
          {
            v388 = 0;
            v356.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v373[1] + 8 * v373[9]);
          }
          else
          {
            v380 = 0;
            v381 = (uint64_t)(*((_QWORD *)&v680 + 1) - v680) >> 3;
            v382 = (uint64_t *)v373[6];
            if (v381 <= 1)
              v381 = 1;
            v383 = (uint64_t *)v680;
            v384 = v381;
            do
            {
              v386 = *v383++;
              v385 = v386;
              v387 = *v382++;
              v380 += v387 * v385;
              --v384;
            }
            while (v384);
            v388 = 0;
            v356.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v373[1] + 8 * (v373[9] + v380));
            v389 = *(uint64_t **)(v372 + 48);
            v390 = (uint64_t *)v680;
            do
            {
              v392 = *v390++;
              v391 = v392;
              v393 = *v389++;
              v388 += v393 * v391;
              --v381;
            }
            while (v381);
          }
          v394 = *(double *)(**(_QWORD **)(v372 + 8) + 8 * (*(_QWORD *)(v372 + 72) + v388));
          v367 = v356.n128_f64[0] == v394;
          if (v356.n128_f64[0] != v394)
            break;
          if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v373 + 1), (uint64_t *)&v680))
          {
            v379 = (void *)v680;
            break;
          }
        }
        if (v379)
        {
          *((_QWORD *)&v680 + 1) = v379;
          operator delete(v379);
        }
LABEL_657:
        switch(v708[12])
        {
          case 2:
            v410 = *(unint64_t **)v708;
            do
            {
              v411 = __ldaxr(v410);
              v412 = v411 - 1;
            }
            while (__stlxr(v412, v410));
            if (!v412)
            {
              v413 = *(_QWORD **)v708;
              if (*(_QWORD *)v708)
              {
                if (*(char *)(*(_QWORD *)v708 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)v708 + 8));
                v414 = v413;
                v415 = 0x1012C404EF22A49;
                goto LABEL_694;
              }
            }
            break;
          case 3:
            v424 = *(unint64_t **)v708;
            do
            {
              v425 = __ldaxr(v424);
              v426 = v425 - 1;
            }
            while (__stlxr(v426, v424));
            if (!v426)
            {
              v427 = *(_QWORD **)v708;
              if (*(_QWORD *)v708)
              {
                v428 = *(void **)(*(_QWORD *)v708 + 8);
                if (v428)
                {
                  *(_QWORD *)(*(_QWORD *)v708 + 16) = v428;
                  operator delete(v428);
                }
                v414 = v427;
                v415 = 0x1080C409938AC02;
                goto LABEL_694;
              }
            }
            break;
          case 4:
            v416 = *(unint64_t **)v708;
            do
            {
              v417 = __ldaxr(v416);
              v418 = v417 - 1;
            }
            while (__stlxr(v418, v416));
            if (!v418)
            {
              v419 = *(_QWORD **)v708;
              if (*(_QWORD *)v708)
              {
                *(_QWORD *)&v680 = *(_QWORD *)v708 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
                goto LABEL_687;
              }
            }
            break;
          case 5:
            v429 = *(unint64_t **)v708;
            do
            {
              v430 = __ldaxr(v429);
              v431 = v430 - 1;
            }
            while (__stlxr(v431, v429));
            if (!v431)
            {
              v419 = *(_QWORD **)v708;
              if (*(_QWORD *)v708)
              {
                *(_QWORD *)&v680 = *(_QWORD *)v708 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
LABEL_687:
                v414 = v419;
                v415 = 0x1020C405E66F15BLL;
                goto LABEL_694;
              }
            }
            break;
          case 8:
            v432 = *(unint64_t **)v708;
            do
            {
              v433 = __ldaxr(v432);
              v434 = v433 - 1;
            }
            while (__stlxr(v434, v432));
            if (!v434)
            {
              v435 = *(_QWORD **)v708;
              if (*(_QWORD *)v708)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v708 + 16));
                v414 = v435;
                v423 = -235920773;
                goto LABEL_693;
              }
            }
            break;
          case 9:
            v420 = *(unint64_t **)v708;
            do
            {
              v421 = __ldaxr(v420);
              v422 = v421 - 1;
            }
            while (__stlxr(v422, v420));
            if (!v422 && *(_QWORD *)v708)
            {
              v414 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v708);
              v423 = 2071181815;
LABEL_693:
              v415 = v423 | 0x1030C4000000000;
LABEL_694:
              MEMORY[0x219A19A08](v414, v415, v356);
            }
            break;
          default:
            break;
        }
        if (v367)
          goto LABEL_885;
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v708);
      v436 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v708, (uint64_t)"Option '", 8);
      v437 = *((char *)this + 23);
      if (v437 >= 0)
        v438 = this;
      else
        v438 = *(turi::option_handling::option_info **)this;
      if (v437 >= 0)
        v439 = *((unsigned __int8 *)this + 23);
      else
        v439 = *((_QWORD *)this + 1);
      v440 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v436, (uint64_t)v438, v439);
      v441 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v440, (uint64_t)"' must be in the range [", 24);
      switch(*((_BYTE *)this + 84))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_1108;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_1108:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v680);
          goto LABEL_1119;
        case 2:
          v615 = *(_QWORD *)v258;
          if (*(char *)(*(_QWORD *)v258 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v615 + 8), *(_QWORD *)(v615 + 16));
          }
          else
          {
            v616 = *(_OWORD *)(v615 + 8);
            __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v615 + 24);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v616;
          }
          goto LABEL_1119;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v258 + 8));
          goto LABEL_1119;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)v258 + 8));
          goto LABEL_1119;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v258 + 8));
          goto LABEL_1119;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::option_handling::option_info *)((char *)this + 72), &__str);
          goto LABEL_1119;
        case 7:
          memset(&__str, 0, sizeof(__str));
          goto LABEL_1119;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_1119;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v258 + 8));
LABEL_1119:
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v617 = &__str;
          else
            v617 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v618 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v618 = __str.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v441, (uint64_t)v617, v618);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v619 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v441, (uint64_t)", ", 2);
          v620 = (turi::option_handling::option_info *)((char *)this + 88);
          switch(*((_BYTE *)this + 100))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_1151;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_1151:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v680);
              goto LABEL_1173;
            case 2:
              v625 = *(_QWORD *)v620;
              if (*(char *)(*(_QWORD *)v620 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v625 + 8), *(_QWORD *)(v625 + 16));
              }
              else
              {
                v627 = *(_OWORD *)(v625 + 8);
                __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v625 + 24);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v627;
              }
              goto LABEL_1173;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v620 + 8));
              goto LABEL_1173;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)v620 + 8));
              goto LABEL_1173;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v620 + 8));
              goto LABEL_1173;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v620, &__str);
              goto LABEL_1173;
            case 7:
              memset(&__str, 0, sizeof(__str));
              goto LABEL_1173;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_1173;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v620 + 8));
LABEL_1173:
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v628 = &__str;
              else
                v628 = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v629 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v629 = __str.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v619, (uint64_t)v628, v629);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v619, (uint64_t)"].", 2);
              *(_QWORD *)&v680 = v708;
              turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_1::operator()();
            default:
              goto LABEL_1047;
          }
        default:
          goto LABEL_1047;
      }
      goto LABEL_1047;
    case 1:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (a2 == (const turi::flexible_type *)a3)
            goto LABEL_203;
          *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)((char *)a2 + 5);
          *a3 = *(_QWORD *)a2;
          *((_BYTE *)a3 + 12) = 0;
LABEL_205:
          v119 = *a3;
LABEL_721:
          v447 = (char *)this + 72;
          switch(*((_BYTE *)this + 84))
          {
            case 0:
              if (*(_QWORD *)v447 < v119)
                goto LABEL_733;
LABEL_724:
              if (*(_QWORD *)v447 == v119)
                goto LABEL_733;
              goto LABEL_767;
            case 1:
              if (*(double *)v447 < (double)v119)
                goto LABEL_733;
LABEL_732:
              if (*(double *)v447 == (double)v119)
              {
LABEL_733:
                v448 = 0;
                switch(*((_BYTE *)a3 + 12))
                {
                  case 0:
                    v448 = *a3;
                    goto LABEL_755;
                  case 1:
                    v448 = (uint64_t)*(double *)a3;
                    goto LABEL_755;
                  case 2:
                    v450 = *a3;
                    v451 = (char **)(*a3 + 8);
                    __str.__r_.__value_.__r.__words[0] = 0;
                    v452 = (char *)v451;
                    if (*(char *)(v450 + 31) < 0)
                      v452 = *v451;
                    std::string::basic_string[abi:ne180100]<0>(&v680, v452);
                    v448 = std::stoll((const std::string *)&v680, (size_t *)&__str, 10);
                    if (SBYTE7(v681) < 0)
                      operator delete((void *)v680);
                    if (*(char *)(v450 + 31) < 0)
                      v453 = *(_QWORD *)(v450 + 16);
                    else
                      v453 = *(unsigned __int8 *)(v450 + 31);
                    if (__str.__r_.__value_.__r.__words[0] != v453)
                    {
                      v468 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::operator+<char>();
                      v469 = std::string::append((std::string *)v708, " cannot be interpreted as an integer");
                      v470 = *(_OWORD *)&v469->__r_.__value_.__l.__data_;
                      *(_QWORD *)&v681 = *((_QWORD *)&v469->__r_.__value_.__l + 2);
                      v680 = v470;
                      v469->__r_.__value_.__l.__size_ = 0;
                      v469->__r_.__value_.__r.__words[2] = 0;
                      v469->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(v468, (const std::string *)&v680);
                      __cxa_throw(v468, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                    }
                    goto LABEL_755;
                  case 3:
                    v449 = *a3;
                    *(_QWORD *)&v681 = 0;
                    v680 = 0uLL;
                    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v680, *(const void **)(v449 + 8), *(_QWORD *)(v449 + 16), (uint64_t)(*(_QWORD *)(v449 + 16) - *(_QWORD *)(v449 + 8)) >> 3);
                    turi::flexible_type_fail(0);
                    if ((_QWORD)v680)
                    {
                      *((_QWORD *)&v680 + 1) = v680;
                      operator delete((void *)v680);
                    }
                    goto LABEL_754;
                  case 4:
                    v454 = *a3;
                    *(_QWORD *)&v681 = 0;
                    v680 = 0uLL;
                    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v680, *(uint64_t **)(v454 + 8), *(uint64_t **)(v454 + 16), (uint64_t)(*(_QWORD *)(v454 + 16) - *(_QWORD *)(v454 + 8)) >> 4);
                    turi::flexible_type_fail(0);
                    *(_QWORD *)v708 = &v680;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v708);
                    goto LABEL_754;
                  case 5:
                    v455 = *a3;
                    *(_QWORD *)&v681 = 0;
                    v680 = 0uLL;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v680, *(uint64_t **)(v455 + 8), *(uint64_t **)(v455 + 16), (uint64_t)(*(_QWORD *)(v455 + 16) - *(_QWORD *)(v455 + 8)) >> 5);
                    turi::flexible_type_fail(0);
                    *(_QWORD *)v708 = &v680;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v708);
                    goto LABEL_754;
                  case 6:
                    v448 = *a3 << 8 >> 8;
                    goto LABEL_755;
                  case 7:
                    goto LABEL_755;
                  case 8:
                    v456 = *a3;
                    v457 = *(_QWORD *)(*a3 + 16);
                    *(_QWORD *)&v680 = *(_QWORD *)(*a3 + 8);
                    *((_QWORD *)&v680 + 1) = v457;
                    if (v457)
                    {
                      v458 = (unsigned int *)(v457 + 8);
                      do
                        v459 = __ldxr(v458);
                      while (__stxr(v459 + 1, v458));
                    }
                    v460 = *(_OWORD *)(v456 + 24);
                    v461 = *(_OWORD *)(v456 + 56);
                    v682 = *(_OWORD *)(v456 + 40);
                    v683 = v461;
                    v681 = v460;
                    turi::flexible_type_fail(0);
                    boost::detail::shared_count::~shared_count((unsigned int **)&v680 + 1);
                    goto LABEL_754;
                  case 9:
                    turi::flexible_type_impl::ndarray<double>::ndarray(&v680, *a3 + 8);
                    turi::flexible_type_fail(0);
                    turi::flexible_type_impl::ndarray<double>::~ndarray(&v680);
LABEL_754:
                    v448 = 0;
LABEL_755:
                    switch(*((_BYTE *)this + 100))
                    {
                      case 0:
                        if (*((_QWORD *)this + 11) > v448)
                          goto LABEL_885;
LABEL_758:
                        if (*((_QWORD *)this + 11) != v448)
                          goto LABEL_767;
                        goto LABEL_885;
                      case 1:
                        if (*((double *)this + 11) > (double)v448)
                          goto LABEL_885;
LABEL_766:
                        if (*((double *)this + 11) != (double)v448)
                          goto LABEL_767;
                        goto LABEL_885;
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 7:
                      case 8:
                      case 9:
                        turi::flexible_type_fail(0);
                        goto LABEL_757;
                      case 6:
                        if (v448 < (uint64_t)(*((_QWORD *)this + 11) << 8) >> 8)
                          goto LABEL_885;
LABEL_757:
                        switch(*((_BYTE *)this + 100))
                        {
                          case 0:
                            goto LABEL_758;
                          case 1:
                            goto LABEL_766;
                          case 2:
                          case 3:
                          case 4:
                          case 5:
                          case 7:
                          case 8:
                          case 9:
                            goto LABEL_767;
                          case 6:
                            if (v448 != (uint64_t)(*((_QWORD *)this + 11) << 8) >> 8 || *((_DWORD *)this + 24))
                              goto LABEL_767;
                            goto LABEL_885;
                          default:
                            goto LABEL_1047;
                        }
                      default:
                        goto LABEL_1047;
                    }
                  default:
                    goto LABEL_1047;
                }
              }
              else
              {
LABEL_767:
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v708);
                v462 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v708, (uint64_t)"Option '", 8);
                v463 = *((char *)this + 23);
                if (v463 >= 0)
                  v464 = this;
                else
                  v464 = *(turi::option_handling::option_info **)this;
                if (v463 >= 0)
                  v465 = *((unsigned __int8 *)this + 23);
                else
                  v465 = *((_QWORD *)this + 1);
                v466 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v462, (uint64_t)v464, v465);
                v467 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v466, (uint64_t)"' must be in the range [", 24);
                switch(*((_BYTE *)this + 84))
                {
                  case 0:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    goto LABEL_1086;
                  case 1:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
                    std::ostream::operator<<();
                    std::stringbuf::str();
LABEL_1086:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v680);
                    goto LABEL_1097;
                  case 2:
                    v609 = *(_QWORD *)v447;
                    if (*(char *)(*(_QWORD *)v447 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v609 + 8), *(_QWORD *)(v609 + 16));
                    }
                    else
                    {
                      v610 = *(_OWORD *)(v609 + 8);
                      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v609 + 24);
                      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v610;
                    }
                    goto LABEL_1097;
                  case 3:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v447 + 8));
                    goto LABEL_1097;
                  case 4:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)v447 + 8));
                    goto LABEL_1097;
                  case 5:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v447 + 8));
                    goto LABEL_1097;
                  case 6:
                    turi::flexible_type_impl::get_string_visitor::operator()((turi::option_handling::option_info *)((char *)this + 72), &__str);
                    goto LABEL_1097;
                  case 7:
                    memset(&__str, 0, sizeof(__str));
                    goto LABEL_1097;
                  case 8:
                    turi::flexible_type_impl::get_string_visitor::operator()();
                    goto LABEL_1097;
                  case 9:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v447 + 8));
LABEL_1097:
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v611 = &__str;
                    else
                      v611 = (std::string *)__str.__r_.__value_.__r.__words[0];
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v612 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                    else
                      v612 = __str.__r_.__value_.__l.__size_;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)v611, v612);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__str.__r_.__value_.__l.__data_);
                    v613 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)", ", 2);
                    v614 = (turi::option_handling::option_info *)((char *)this + 88);
                    switch(*((_BYTE *)this + 100))
                    {
                      case 0:
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
                        std::ostream::operator<<();
                        std::stringbuf::str();
                        goto LABEL_1130;
                      case 1:
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
                        std::ostream::operator<<();
                        std::stringbuf::str();
LABEL_1130:
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v680);
                        goto LABEL_1141;
                      case 2:
                        v621 = *(_QWORD *)v614;
                        if (*(char *)(*(_QWORD *)v614 + 31) < 0)
                        {
                          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v621 + 8), *(_QWORD *)(v621 + 16));
                        }
                        else
                        {
                          v622 = *(_OWORD *)(v621 + 8);
                          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v621 + 24);
                          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v622;
                        }
                        goto LABEL_1141;
                      case 3:
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v614 + 8));
                        goto LABEL_1141;
                      case 4:
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)v614 + 8));
                        goto LABEL_1141;
                      case 5:
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v614 + 8));
                        goto LABEL_1141;
                      case 6:
                        turi::flexible_type_impl::get_string_visitor::operator()(v614, &__str);
                        goto LABEL_1141;
                      case 7:
                        memset(&__str, 0, sizeof(__str));
                        goto LABEL_1141;
                      case 8:
                        turi::flexible_type_impl::get_string_visitor::operator()();
                        goto LABEL_1141;
                      case 9:
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v614 + 8));
LABEL_1141:
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v623 = &__str;
                        else
                          v623 = (std::string *)__str.__r_.__value_.__r.__words[0];
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v624 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                        else
                          v624 = __str.__r_.__value_.__l.__size_;
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v613, (uint64_t)v623, v624);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__str.__r_.__value_.__l.__data_);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v613, (uint64_t)"].", 2);
                        *(_QWORD *)&v680 = v708;
                        turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_3::operator()();
                      default:
                        goto LABEL_1047;
                    }
                  default:
                    goto LABEL_1047;
                }
              }
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              turi::flexible_type_fail(0);
              goto LABEL_723;
            case 6:
              if (v119 > (uint64_t)(*(_QWORD *)v447 << 8) >> 8)
                goto LABEL_733;
LABEL_723:
              switch(*((_BYTE *)this + 84))
              {
                case 0:
                  goto LABEL_724;
                case 1:
                  goto LABEL_732;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_767;
                case 6:
                  if (v119 != (uint64_t)(*((_QWORD *)this + 9) << 8) >> 8 || *((_DWORD *)this + 20))
                    goto LABEL_767;
                  goto LABEL_733;
                default:
                  goto LABEL_1047;
              }
            default:
              goto LABEL_1047;
          }
        case 1:
          v132 = *(double *)a2;
          *((_DWORD *)a3 + 2) = 0;
          *((_BYTE *)a3 + 12) = 0;
          *a3 = (uint64_t)v132;
          if (v132 == (double)(uint64_t)v132)
            goto LABEL_203;
          goto LABEL_1198;
        case 2:
          v113 = *(_QWORD *)a2;
          __p = 0;
          v116 = *(_QWORD *)(v113 + 8);
          v114 = v113 + 8;
          v115 = v116;
          v117 = *(unsigned __int8 *)(v114 + 23);
          if ((v117 & 0x80u) == 0)
            v115 = v114;
          v118 = *(_QWORD *)(v114 + 8);
          if ((v117 & 0x80u) == 0)
            v118 = v117;
          v677.__r_.__value_.__r.__words[0] = v115;
          v677.__r_.__value_.__l.__size_ = v115 + v118;
          if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v677, (uint64_t *)&__p) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v680);
            *(_QWORD *)&v680 = &unk_24D91BD80;
            *(_QWORD *)&v681 = MEMORY[0x24BEDB7D0];
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v680);
          }
          v119 = (uint64_t)__p;
          switch(*((_BYTE *)a3 + 12))
          {
            case 2:
              v120 = (unint64_t *)*a3;
              do
              {
                v121 = __ldaxr(v120);
                v122 = v121 - 1;
              }
              while (__stlxr(v122, v120));
              if (!v122)
              {
                v123 = *a3;
                if (!*a3)
                  goto LABEL_719;
                if (*(char *)(v123 + 31) < 0)
                  operator delete(*(void **)(v123 + 8));
                v124 = (_QWORD *)v123;
                v125 = 0x1012C404EF22A49;
                goto LABEL_718;
              }
              break;
            case 3:
              v226 = (unint64_t *)*a3;
              do
              {
                v227 = __ldaxr(v226);
                v228 = v227 - 1;
              }
              while (__stlxr(v228, v226));
              if (!v228)
              {
                v229 = (_QWORD *)*a3;
                if (!*a3)
                  goto LABEL_719;
                v230 = (void *)v229[1];
                if (v230)
                {
                  v229[2] = v230;
                  operator delete(v230);
                }
                v124 = v229;
                v125 = 0x1080C409938AC02;
                goto LABEL_718;
              }
              break;
            case 4:
              v209 = (unint64_t *)*a3;
              do
              {
                v210 = __ldaxr(v209);
                v211 = v210 - 1;
              }
              while (__stlxr(v211, v209));
              if (!v211)
              {
                v212 = (_QWORD *)*a3;
                if (!*a3)
                  goto LABEL_719;
                *(_QWORD *)&v680 = v212 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
                goto LABEL_363;
              }
              break;
            case 5:
              v234 = (unint64_t *)*a3;
              do
              {
                v235 = __ldaxr(v234);
                v236 = v235 - 1;
              }
              while (__stlxr(v236, v234));
              if (!v236)
              {
                v212 = (_QWORD *)*a3;
                if (!*a3)
                  goto LABEL_719;
                *(_QWORD *)&v680 = v212 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
LABEL_363:
                v124 = v212;
                v125 = 0x1020C405E66F15BLL;
                goto LABEL_718;
              }
              break;
            case 8:
              v443 = (unint64_t *)*a3;
              do
              {
                v444 = __ldaxr(v443);
                v445 = v444 - 1;
              }
              while (__stlxr(v445, v443));
              if (!v445)
              {
                v446 = *a3;
                if (!*a3)
                  goto LABEL_719;
                boost::detail::shared_count::~shared_count((unsigned int **)(v446 + 16));
                v124 = (_QWORD *)v446;
                v220 = -235920773;
                goto LABEL_717;
              }
              break;
            case 9:
              v217 = (unint64_t *)*a3;
              do
              {
                v218 = __ldaxr(v217);
                v219 = v218 - 1;
              }
              while (__stlxr(v219, v217));
              if (!v219)
              {
                if (*a3)
                {
                  v124 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*a3);
                  v220 = 2071181815;
LABEL_717:
                  v125 = v220 | 0x1030C4000000000;
LABEL_718:
                  MEMORY[0x219A19A08](v124, v125);
                }
LABEL_719:
                *a3 = 0;
              }
              break;
            default:
              break;
          }
          *((_DWORD *)a3 + 2) = 0;
          *((_BYTE *)a3 + 12) = 0;
          *a3 = v119;
          goto LABEL_721;
        case 7:
          if ((uint64_t *)((char *)this + 48) == a3)
            goto LABEL_203;
          *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)((char *)this + 53);
          *a3 = *((_QWORD *)this + 6);
          v129 = *((unsigned __int8 *)this + 60);
          *((_BYTE *)a3 + 12) = v129;
          if (v129 <= 9 && ((1 << v129) & 0x33C) != 0)
          {
            v130 = (unint64_t *)*a3;
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 + 1, v130));
LABEL_203:
            v129 = *((unsigned __int8 *)a3 + 12);
          }
          v119 = 0;
          switch(v129)
          {
            case 0u:
              goto LABEL_205;
            case 1u:
              v119 = (uint64_t)*(double *)a3;
              goto LABEL_721;
            case 2u:
              v154 = *a3;
              v155 = (char **)(*a3 + 8);
              __idx = 0;
              v156 = (char *)v155;
              if (*(char *)(v154 + 31) < 0)
                v156 = *v155;
              std::string::basic_string[abi:ne180100]<0>(&__str, v156);
              v119 = std::stoll(&__str, &__idx, 10);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (*(char *)(v154 + 31) < 0)
                v157 = *(_QWORD *)(v154 + 16);
              else
                v157 = *(unsigned __int8 *)(v154 + 31);
              if (__idx != v157)
              {
                v540 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v541 = std::string::append(&v677, " cannot be interpreted as an integer");
                v542 = *(_OWORD *)&v541->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v541->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v542;
                v541->__r_.__value_.__l.__size_ = 0;
                v541->__r_.__value_.__r.__words[2] = 0;
                v541->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v540, &__str);
                __cxa_throw(v540, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_721;
            case 3u:
              v153 = *a3;
              v675 = 0;
              v676 = 0;
              __p = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v153 + 8), *(_QWORD *)(v153 + 16), (uint64_t)(*(_QWORD *)(v153 + 16) - *(_QWORD *)(v153 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p)
              {
                v675 = __p;
                operator delete(__p);
              }
              goto LABEL_257;
            case 4u:
              v158 = *a3;
              memset(v673, 0, sizeof(v673));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v673, *(uint64_t **)(v158 + 8), *(uint64_t **)(v158 + 16), (uint64_t)(*(_QWORD *)(v158 + 16) - *(_QWORD *)(v158 + 8)) >> 4);
              turi::flexible_type_fail(0);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v673;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_257;
            case 5u:
              v159 = *a3;
              memset(v672, 0, sizeof(v672));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v672, *(uint64_t **)(v159 + 8), *(uint64_t **)(v159 + 16), (uint64_t)(*(_QWORD *)(v159 + 16) - *(_QWORD *)(v159 + 8)) >> 5);
              turi::flexible_type_fail(0);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v672;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_257;
            case 6u:
              v119 = *a3 << 8 >> 8;
              goto LABEL_721;
            case 7u:
              goto LABEL_721;
            case 8u:
              v160 = *a3;
              v161 = *(_QWORD *)(*a3 + 16);
              *(_QWORD *)v708 = *(_QWORD *)(*a3 + 8);
              *(_QWORD *)&v708[8] = v161;
              if (v161)
              {
                v162 = (unsigned int *)(v161 + 8);
                do
                  v163 = __ldxr(v162);
                while (__stxr(v163 + 1, v162));
              }
              v164 = *(_OWORD *)(v160 + 24);
              v165 = *(_OWORD *)(v160 + 56);
              v709 = *(_OWORD *)(v160 + 40);
              v710 = v165;
              *(_OWORD *)&v708[16] = v164;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&v708[8]);
              goto LABEL_257;
            case 9u:
              turi::flexible_type_impl::ndarray<double>::ndarray(&v680, *a3 + 8);
              turi::flexible_type_fail(0);
              turi::flexible_type_impl::ndarray<double>::~ndarray(&v680);
LABEL_257:
              v119 = 0;
              goto LABEL_721;
            default:
              goto LABEL_1047;
          }
        default:
LABEL_1198:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v708);
          v636 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v708, (uint64_t)"Expected integer value for option '", 35);
          v637 = *((char *)this + 23);
          if (v637 >= 0)
            v638 = this;
          else
            v638 = *(turi::option_handling::option_info **)this;
          if (v637 >= 0)
            v639 = *((unsigned __int8 *)this + 23);
          else
            v639 = *((_QWORD *)this + 1);
          v640 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v636, (uint64_t)v638, v639);
          v641 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v640, (uint64_t)"'. Cannot cast ", 15);
          if ((v671 & 0x80u) == 0)
            v642 = &v669;
          else
            v642 = v669;
          if ((v671 & 0x80u) == 0)
            v643 = v671;
          else
            v643 = v670;
          v644 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v641, (uint64_t)v642, v643);
          switch(*((_BYTE *)a2 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_1213;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_1213:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v680);
              goto LABEL_1224;
            case 2:
              v645 = *(_QWORD *)a2;
              if (*(char *)(*(_QWORD *)a2 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v645 + 8), *(_QWORD *)(v645 + 16));
              }
              else
              {
                v646 = *(_OWORD *)(v645 + 8);
                __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v645 + 24);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v646;
              }
              goto LABEL_1224;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)a2 + 8));
              goto LABEL_1224;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)a2 + 8));
              goto LABEL_1224;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)a2 + 8));
              goto LABEL_1224;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(a2, &__str);
              goto LABEL_1224;
            case 7:
              memset(&__str, 0, sizeof(__str));
              goto LABEL_1224;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_1224;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)a2 + 8));
LABEL_1224:
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v647 = &__str;
              else
                v647 = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v648 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v648 = __str.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v644, (uint64_t)v647, v648);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if ((v671 & 0x80u) == 0)
                v649 = &v669;
              else
                v649 = v669;
              if ((v671 & 0x80u) == 0)
                v650 = v671;
              else
                v650 = v670;
              v651 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v644, (uint64_t)v649, v650);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v651, (uint64_t)" to an integer value.", 21);
              *(_QWORD *)&v680 = v708;
              turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_2::operator()();
            default:
              goto LABEL_1047;
          }
      }
      goto LABEL_1047;
    case 2:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (*(_QWORD *)a2 == 1)
          {
            *((_DWORD *)a3 + 2) = 0;
            *((_BYTE *)a3 + 12) = 0;
            goto LABEL_209;
          }
          if (!*(_QWORD *)a2)
            goto LABEL_162;
          goto LABEL_1027;
        case 1:
          if (*(double *)a2 == 0.0)
          {
LABEL_162:
            *(uint64_t *)((char *)a3 + 5) = 0;
            *a3 = 0;
            goto LABEL_885;
          }
          if (*(double *)a2 != 1.0)
          {
LABEL_1027:
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v708);
            v583 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v708, (uint64_t)"Expected BOOLean value for option '", 35);
            v584 = *((char *)this + 23);
            if (v584 >= 0)
              v585 = this;
            else
              v585 = *(turi::option_handling::option_info **)this;
            if (v584 >= 0)
              v586 = *((unsigned __int8 *)this + 23);
            else
              v586 = *((_QWORD *)this + 1);
            v587 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v583, (uint64_t)v585, v586);
            if ((v671 & 0x80u) == 0)
              v588 = &v669;
            else
              v588 = v669;
            if ((v671 & 0x80u) == 0)
              v589 = v671;
            else
              v589 = v670;
            v590 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v587, (uint64_t)v588, v589);
            v591 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v590, (uint64_t)"'. Cannot interpret ", 20);
            if ((v671 & 0x80u) == 0)
              v592 = &v669;
            else
              v592 = v669;
            if ((v671 & 0x80u) == 0)
              v593 = v671;
            else
              v593 = v670;
            v594 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v591, (uint64_t)v592, v593);
            switch(*((_BYTE *)a2 + 12))
            {
              case 0:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
                std::ostream::operator<<();
                std::stringbuf::str();
                goto LABEL_1162;
              case 1:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
                std::ostream::operator<<();
                std::stringbuf::str();
LABEL_1162:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v680);
                goto LABEL_1183;
              case 2:
                v626 = *(_QWORD *)a2;
                if (*(char *)(*(_QWORD *)a2 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v626 + 8), *(_QWORD *)(v626 + 16));
                }
                else
                {
                  v630 = *(_OWORD *)(v626 + 8);
                  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v626 + 24);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v630;
                }
                goto LABEL_1183;
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)a2 + 8));
                goto LABEL_1183;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)a2 + 8));
                goto LABEL_1183;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)a2 + 8));
                goto LABEL_1183;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()(a2, &__str);
                goto LABEL_1183;
              case 7:
                memset(&__str, 0, sizeof(__str));
                goto LABEL_1183;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_1183;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)a2 + 8));
LABEL_1183:
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v631 = &__str;
                else
                  v631 = (std::string *)__str.__r_.__value_.__r.__words[0];
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v632 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                else
                  v632 = __str.__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v594, (uint64_t)v631, v632);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if ((v671 & 0x80u) == 0)
                  v633 = &v669;
                else
                  v633 = v669;
                if ((v671 & 0x80u) == 0)
                  v634 = v671;
                else
                  v634 = v670;
                v635 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v594, (uint64_t)v633, v634);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v635, (uint64_t)" as True or False.", 18);
                *(_QWORD *)&v680 = v708;
                turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_4::operator()();
              default:
                goto LABEL_1047;
            }
            goto LABEL_1047;
          }
          *((_DWORD *)a3 + 2) = 0;
          *((_BYTE *)a3 + 12) = 0;
LABEL_209:
          *a3 = 1;
          break;
        case 2:
          if ((v92 & 1) == 0
          {
            std::string::basic_string[abi:ne180100]<0>(&v680, "1");
            BYTE8(v681) = 1;
            std::string::basic_string[abi:ne180100]<0>(&v682, "True");
            BYTE8(v683) = 1;
            std::string::basic_string[abi:ne180100]<0>(v684, "T");
            v685 = 1;
            std::string::basic_string[abi:ne180100]<0>(v686, "true");
            v687 = 1;
            std::string::basic_string[abi:ne180100]<0>(v688, "Y");
            v689 = 1;
            std::string::basic_string[abi:ne180100]<0>(v690, "y");
            v691 = 1;
            std::string::basic_string[abi:ne180100]<0>(v692, "yes");
            v693 = 1;
            std::string::basic_string[abi:ne180100]<0>(v694, "0");
            v695 = 0;
            std::string::basic_string[abi:ne180100]<0>(v696, "False");
            v697 = 0;
            std::string::basic_string[abi:ne180100]<0>(v698, "F");
            v699 = 0;
            std::string::basic_string[abi:ne180100]<0>(v700, "false");
            v701 = 0;
            std::string::basic_string[abi:ne180100]<0>(v702, "N");
            v703 = 0;
            std::string::basic_string[abi:ne180100]<0>(v704, "n");
            v705 = 0;
            std::string::basic_string[abi:ne180100]<0>(v706, "no");
            v707 = 0;
            std::map<std::string,BOOL>::map[abi:ne180100]((uint64_t)&turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::okay_values, (const void **)&v680, 14);
            v595 = 56;
            do
            {
              if (*((char *)&__idx + v595 * 8 + 7) < 0)
                operator delete((void *)__str.__r_.__value_.__r.__words[v595 + 2]);
              v595 -= 4;
            }
            while (v595 * 8);
            __cxa_atexit((void (*)(void *))std::map<std::string,BOOL>::~map[abi:ne180100], &turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::okay_values, &dword_217E69000);
          }
          v93 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::okay_values, (const void **)(*(_QWORD *)a2 + 8));
          if ((_UNKNOWN *)v93 != &unk_254FF4418)
          {
            switch(*((_BYTE *)a3 + 12))
            {
              case 2:
                v94 = (unint64_t *)*a3;
                do
                {
                  v95 = __ldaxr(v94);
                  v96 = v95 - 1;
                }
                while (__stlxr(v96, v94));
                if (!v96)
                {
                  v97 = *a3;
                  if (!*a3)
                    goto LABEL_825;
                  if (*(char *)(v97 + 31) < 0)
                    operator delete(*(void **)(v97 + 8));
                  v98 = (_QWORD *)v97;
                  v99 = 0x1012C404EF22A49;
                  goto LABEL_824;
                }
                break;
              case 3:
                v489 = (unint64_t *)*a3;
                do
                {
                  v490 = __ldaxr(v489);
                  v491 = v490 - 1;
                }
                while (__stlxr(v491, v489));
                if (!v491)
                {
                  v492 = (_QWORD *)*a3;
                  if (!*a3)
                    goto LABEL_825;
                  v493 = (void *)v492[1];
                  if (v493)
                  {
                    v492[2] = v493;
                    operator delete(v493);
                  }
                  v98 = v492;
                  v99 = 0x1080C409938AC02;
                  goto LABEL_824;
                }
                break;
              case 4:
                v481 = (unint64_t *)*a3;
                do
                {
                  v482 = __ldaxr(v481);
                  v483 = v482 - 1;
                }
                while (__stlxr(v483, v481));
                if (!v483)
                {
                  v484 = (_QWORD *)*a3;
                  if (!*a3)
                    goto LABEL_825;
                  *(_QWORD *)&v680 = v484 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
                  goto LABEL_817;
                }
                break;
              case 5:
                v494 = (unint64_t *)*a3;
                do
                {
                  v495 = __ldaxr(v494);
                  v496 = v495 - 1;
                }
                while (__stlxr(v496, v494));
                if (!v496)
                {
                  v484 = (_QWORD *)*a3;
                  if (!*a3)
                    goto LABEL_825;
                  *(_QWORD *)&v680 = v484 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
LABEL_817:
                  v98 = v484;
                  v99 = 0x1020C405E66F15BLL;
                  goto LABEL_824;
                }
                break;
              case 8:
                v497 = (unint64_t *)*a3;
                do
                {
                  v498 = __ldaxr(v497);
                  v499 = v498 - 1;
                }
                while (__stlxr(v499, v497));
                if (!v499)
                {
                  v500 = *a3;
                  if (!*a3)
                    goto LABEL_825;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v500 + 16));
                  v98 = (_QWORD *)v500;
                  v488 = -235920773;
                  goto LABEL_823;
                }
                break;
              case 9:
                v485 = (unint64_t *)*a3;
                do
                {
                  v486 = __ldaxr(v485);
                  v487 = v486 - 1;
                }
                while (__stlxr(v487, v485));
                if (!v487)
                {
                  if (*a3)
                  {
                    v98 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*a3);
                    v488 = 2071181815;
LABEL_823:
                    v99 = v488 | 0x1030C4000000000;
LABEL_824:
                    MEMORY[0x219A19A08](v98, v99);
                  }
LABEL_825:
                  *a3 = 0;
                }
                break;
              default:
                break;
            }
            *a3 = 0;
            *((_DWORD *)a3 + 2) = 0;
            *((_BYTE *)a3 + 12) = 0;
            *a3 = *(unsigned __int8 *)(v93 + 56);
          }
          goto LABEL_827;
        case 7:
LABEL_827:
          if ((uint64_t *)((char *)this + 48) != a3)
          {
            switch(*((_BYTE *)a3 + 12))
            {
              case 2:
                v501 = (unint64_t *)*a3;
                do
                {
                  v502 = __ldaxr(v501);
                  v503 = v502 - 1;
                }
                while (__stlxr(v503, v501));
                if (!v503)
                {
                  v504 = *a3;
                  if (!*a3)
                    goto LABEL_866;
                  if (*(char *)(v504 + 31) < 0)
                    operator delete(*(void **)(v504 + 8));
                  v505 = (_QWORD *)v504;
                  v506 = 0x1012C404EF22A49;
                  goto LABEL_865;
                }
                break;
              case 3:
                v515 = (unint64_t *)*a3;
                do
                {
                  v516 = __ldaxr(v515);
                  v517 = v516 - 1;
                }
                while (__stlxr(v517, v515));
                if (!v517)
                {
                  v518 = (_QWORD *)*a3;
                  if (!*a3)
                    goto LABEL_866;
                  v519 = (void *)v518[1];
                  if (v519)
                  {
                    v518[2] = v519;
                    operator delete(v519);
                  }
                  v505 = v518;
                  v506 = 0x1080C409938AC02;
                  goto LABEL_865;
                }
                break;
              case 4:
                v507 = (unint64_t *)*a3;
                do
                {
                  v508 = __ldaxr(v507);
                  v509 = v508 - 1;
                }
                while (__stlxr(v509, v507));
                if (!v509)
                {
                  v510 = (_QWORD *)*a3;
                  if (!*a3)
                    goto LABEL_866;
                  *(_QWORD *)&v680 = v510 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
                  goto LABEL_858;
                }
                break;
              case 5:
                v520 = (unint64_t *)*a3;
                do
                {
                  v521 = __ldaxr(v520);
                  v522 = v521 - 1;
                }
                while (__stlxr(v522, v520));
                if (!v522)
                {
                  v510 = (_QWORD *)*a3;
                  if (!*a3)
                    goto LABEL_866;
                  *(_QWORD *)&v680 = v510 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
LABEL_858:
                  v505 = v510;
                  v506 = 0x1020C405E66F15BLL;
                  goto LABEL_865;
                }
                break;
              case 8:
                v523 = (unint64_t *)*a3;
                do
                {
                  v524 = __ldaxr(v523);
                  v525 = v524 - 1;
                }
                while (__stlxr(v525, v523));
                if (!v525)
                {
                  v526 = *a3;
                  if (!*a3)
                    goto LABEL_866;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v526 + 16));
                  v505 = (_QWORD *)v526;
                  v514 = -235920773;
                  goto LABEL_864;
                }
                break;
              case 9:
                v511 = (unint64_t *)*a3;
                do
                {
                  v512 = __ldaxr(v511);
                  v513 = v512 - 1;
                }
                while (__stlxr(v513, v511));
                if (!v513)
                {
                  if (*a3)
                  {
                    v505 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*a3);
                    v514 = 2071181815;
LABEL_864:
                    v506 = v514 | 0x1030C4000000000;
LABEL_865:
                    MEMORY[0x219A19A08](v505, v506);
                  }
LABEL_866:
                  *a3 = 0;
                }
                break;
              default:
                break;
            }
            *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)((char *)this + 53);
            *a3 = *((_QWORD *)this + 6);
            v527 = *((unsigned __int8 *)this + 60);
            *((_BYTE *)a3 + 12) = v527;
            switch(v527)
            {
              case 2:
                v528 = (unint64_t *)*a3;
                do
                  v529 = __ldaxr(v528);
                while (__stlxr(v529 + 1, v528));
                break;
              case 3:
                v534 = (unint64_t *)*a3;
                do
                  v535 = __ldaxr(v534);
                while (__stlxr(v535 + 1, v534));
                break;
              case 4:
                v530 = (unint64_t *)*a3;
                do
                  v531 = __ldaxr(v530);
                while (__stlxr(v531 + 1, v530));
                break;
              case 5:
                v536 = (unint64_t *)*a3;
                do
                  v537 = __ldaxr(v536);
                while (__stlxr(v537 + 1, v536));
                break;
              case 8:
                v538 = (unint64_t *)*a3;
                do
                  v539 = __ldaxr(v538);
                while (__stlxr(v539 + 1, v538));
                break;
              case 9:
                v532 = (unint64_t *)*a3;
                do
                  v533 = __ldaxr(v532);
                while (__stlxr(v533 + 1, v532));
                break;
              default:
                goto LABEL_885;
            }
          }
          goto LABEL_885;
        default:
          goto LABEL_1027;
      }
      goto LABEL_885;
    case 3:
      v668 = this;
      v11 = *((_QWORD *)this + 13);
      v12 = *((_QWORD *)this + 14);
      if (v11 == v12)
        goto LABEL_128;
      break;
    case 4:
      if (a2 != (const turi::flexible_type *)a3)
      {
        *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)((char *)a2 + 5);
        *a3 = *(_QWORD *)a2;
        v8 = *((unsigned __int8 *)a2 + 12);
        *((_BYTE *)a3 + 12) = v8;
        switch(v8)
        {
          case 2:
            v9 = (unint64_t *)*a3;
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 + 1, v9));
            break;
          case 3:
            v137 = (unint64_t *)*a3;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 + 1, v137));
            break;
          case 4:
            v133 = (unint64_t *)*a3;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 + 1, v133));
            break;
          case 5:
            v139 = (unint64_t *)*a3;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 + 1, v139));
            break;
          case 8:
            v143 = (unint64_t *)*a3;
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 + 1, v143));
            break;
          case 9:
            v135 = (unint64_t *)*a3;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 + 1, v135));
            break;
          default:
            goto LABEL_885;
        }
      }
      goto LABEL_885;
    case 5:
      if (a2 != (const turi::flexible_type *)a3)
      {
        *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)((char *)a2 + 5);
        *a3 = *(_QWORD *)a2;
        v89 = *((unsigned __int8 *)a2 + 12);
        *((_BYTE *)a3 + 12) = v89;
        switch(v89)
        {
          case 2:
            v90 = (unint64_t *)*a3;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 + 1, v90));
            break;
          case 3:
            v147 = (unint64_t *)*a3;
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 + 1, v147));
            break;
          case 4:
            v141 = (unint64_t *)*a3;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 + 1, v141));
            break;
          case 5:
            v149 = (unint64_t *)*a3;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 + 1, v149));
            break;
          case 8:
            v151 = (unint64_t *)*a3;
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 + 1, v151));
            break;
          case 9:
            v145 = (unint64_t *)*a3;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 + 1, v145));
            break;
          default:
            goto LABEL_885;
        }
      }
      goto LABEL_885;
    default:
      turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_6::operator()();
  }
  while (2)
  {
    switch(*(_BYTE *)(v11 + 12))
    {
      case 0:
        switch(*((_BYTE *)a2 + 12))
        {
          case 0:
            if (*(_QWORD *)a2 == *(_QWORD *)v11)
              goto LABEL_259;
            goto LABEL_127;
          case 1:
            v66 = *(double *)a2;
            v67 = *(_QWORD *)v11;
            goto LABEL_100;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_127;
          case 6:
            if (*(_QWORD *)v11 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2))
              goto LABEL_259;
            goto LABEL_127;
          default:
            goto LABEL_1047;
        }
      case 1:
        switch(*((_BYTE *)a2 + 12))
        {
          case 0:
            v66 = *(double *)v11;
            v67 = *(_QWORD *)a2;
LABEL_100:
            v72 = (double)v67;
            goto LABEL_102;
          case 1:
            v66 = *(double *)a2;
            v72 = *(double *)v11;
LABEL_102:
            if (v66 == v72)
              goto LABEL_259;
            goto LABEL_127;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_127;
          case 6:
            v71 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8), *(double *)v11);
            goto LABEL_105;
          default:
            goto LABEL_1047;
        }
      case 2:
        v56 = *((unsigned __int8 *)a2 + 12);
        v57 = v56 - 3 >= 7 && v56 >= 2;
        if (!v57)
          goto LABEL_127;
        if (v56 != 2)
          goto LABEL_1047;
        v58 = *(_QWORD *)a2;
        if (*(char *)(*(_QWORD *)a2 + 31) < 0)
          v59 = *(_QWORD *)(v58 + 16);
        else
          v59 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
        v73 = *(double *)v11;
        if (*(char *)(*(_QWORD *)v11 + 31) < 0)
          v74 = *(_QWORD *)(*(_QWORD *)&v73 + 16);
        else
          v74 = *(unsigned __int8 *)(*(_QWORD *)v11 + 31);
        if (v59 != v74)
          goto LABEL_127;
        v75 = (unsigned __int8 *)(v58 + 8);
        if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
          v75 = *(unsigned __int8 **)v75;
        v76 = (unsigned __int8 *)(*(_QWORD *)&v73 + 8);
        if ((*(_BYTE *)(*(_QWORD *)v11 + 31) & 0x80) != 0)
          v76 = *(unsigned __int8 **)v76;
        if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        {
          if (!memcmp(v75, v76, v59))
          {
LABEL_259:
            if (a2 != (const turi::flexible_type *)a3)
            {
              switch(*((_BYTE *)a3 + 12))
              {
                case 2:
                  v166 = (unint64_t *)*a3;
                  do
                  {
                    v167 = __ldaxr(v166);
                    v168 = v167 - 1;
                  }
                  while (__stlxr(v168, v166));
                  if (!v168)
                  {
                    v169 = *a3;
                    if (!*a3)
                      goto LABEL_298;
                    if (*(char *)(v169 + 31) < 0)
                      operator delete(*(void **)(v169 + 8));
                    v170 = (_QWORD *)v169;
                    v171 = 0x1012C404EF22A49;
                    goto LABEL_297;
                  }
                  break;
                case 3:
                  v180 = (unint64_t *)*a3;
                  do
                  {
                    v181 = __ldaxr(v180);
                    v182 = v181 - 1;
                  }
                  while (__stlxr(v182, v180));
                  if (!v182)
                  {
                    v183 = (_QWORD *)*a3;
                    if (!*a3)
                      goto LABEL_298;
                    v184 = (void *)v183[1];
                    if (v184)
                    {
                      v183[2] = v184;
                      operator delete(v184);
                    }
                    v170 = v183;
                    v171 = 0x1080C409938AC02;
                    goto LABEL_297;
                  }
                  break;
                case 4:
                  v172 = (unint64_t *)*a3;
                  do
                  {
                    v173 = __ldaxr(v172);
                    v174 = v173 - 1;
                  }
                  while (__stlxr(v174, v172));
                  if (!v174)
                  {
                    v175 = (_QWORD *)*a3;
                    if (!*a3)
                      goto LABEL_298;
                    *(_QWORD *)&v680 = v175 + 1;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
                    goto LABEL_290;
                  }
                  break;
                case 5:
                  v185 = (unint64_t *)*a3;
                  do
                  {
                    v186 = __ldaxr(v185);
                    v187 = v186 - 1;
                  }
                  while (__stlxr(v187, v185));
                  if (!v187)
                  {
                    v175 = (_QWORD *)*a3;
                    if (!*a3)
                      goto LABEL_298;
                    *(_QWORD *)&v680 = v175 + 1;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v680);
LABEL_290:
                    v170 = v175;
                    v171 = 0x1020C405E66F15BLL;
                    goto LABEL_297;
                  }
                  break;
                case 8:
                  v188 = (unint64_t *)*a3;
                  do
                  {
                    v189 = __ldaxr(v188);
                    v190 = v189 - 1;
                  }
                  while (__stlxr(v190, v188));
                  if (!v190)
                  {
                    v191 = *a3;
                    if (!*a3)
                      goto LABEL_298;
                    boost::detail::shared_count::~shared_count((unsigned int **)(v191 + 16));
                    v170 = (_QWORD *)v191;
                    v179 = -235920773;
                    goto LABEL_296;
                  }
                  break;
                case 9:
                  v176 = (unint64_t *)*a3;
                  do
                  {
                    v177 = __ldaxr(v176);
                    v178 = v177 - 1;
                  }
                  while (__stlxr(v178, v176));
                  if (!v178)
                  {
                    if (*a3)
                    {
                      v170 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*a3);
                      v179 = 2071181815;
LABEL_296:
                      v171 = v179 | 0x1030C4000000000;
LABEL_297:
                      MEMORY[0x219A19A08](v170, v171);
                    }
LABEL_298:
                    *a3 = 0;
                  }
                  break;
                default:
                  break;
              }
              *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)((char *)a2 + 5);
              *a3 = *(_QWORD *)a2;
              v192 = *((unsigned __int8 *)a2 + 12);
              *((_BYTE *)a3 + 12) = v192;
              switch(v192)
              {
                case 2:
                  v193 = (unint64_t *)*a3;
                  do
                    v194 = __ldaxr(v193);
                  while (__stlxr(v194 + 1, v193));
                  break;
                case 3:
                  v199 = (unint64_t *)*a3;
                  do
                    v200 = __ldaxr(v199);
                  while (__stlxr(v200 + 1, v199));
                  break;
                case 4:
                  v195 = (unint64_t *)*a3;
                  do
                    v196 = __ldaxr(v195);
                  while (__stlxr(v196 + 1, v195));
                  break;
                case 5:
                  v201 = (unint64_t *)*a3;
                  do
                    v202 = __ldaxr(v201);
                  while (__stlxr(v202 + 1, v201));
                  break;
                case 8:
                  v203 = (unint64_t *)*a3;
                  do
                    v204 = __ldaxr(v203);
                  while (__stlxr(v204 + 1, v203));
                  break;
                case 9:
                  v197 = (unint64_t *)*a3;
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 + 1, v197));
                  break;
                default:
                  break;
              }
            }
LABEL_885:
            if ((char)v671 < 0)
              operator delete(v669);
            return;
          }
        }
        else
        {
          if (!v59)
            goto LABEL_259;
          while (*v75 == *v76)
          {
            ++v75;
            ++v76;
            if (!--v59)
              goto LABEL_259;
          }
        }
LABEL_127:
        v11 += 16;
        if (v11 != v12)
          continue;
LABEL_128:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v708);
        v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v708, (uint64_t)"Option '", 8);
        v78 = *((char *)this + 23);
        if (v78 >= 0)
          v79 = this;
        else
          v79 = *(turi::option_handling::option_info **)this;
        if (v78 >= 0)
          v80 = *((unsigned __int8 *)this + 23);
        else
          v80 = *((_QWORD *)this + 1);
        v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v79, v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' must be one of (", 18);
        if (*((_QWORD *)this + 14) - *((_QWORD *)this + 13) != 16)
        {
          v569 = 0;
          v570 = 0;
          while (2)
          {
            if ((v671 & 0x80u) == 0)
              v571 = &v669;
            else
              v571 = v669;
            if ((v671 & 0x80u) == 0)
              v572 = v671;
            else
              v572 = v670;
            v573 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v708, (uint64_t)v571, v572);
            v574 = (turi::flexible_type_impl *)(*((_QWORD *)v668 + 13) + v569);
            v575 = v573;
            switch(*((_BYTE *)v574 + 12))
            {
              case 0:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
                std::ostream::operator<<();
                std::stringbuf::str();
                goto LABEL_1003;
              case 1:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
                std::ostream::operator<<();
                std::stringbuf::str();
LABEL_1003:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v680);
                goto LABEL_1008;
              case 2:
                v576 = *(_QWORD *)v574;
                if (*(char *)(*(_QWORD *)v574 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v576 + 8), *(_QWORD *)(v576 + 16));
                }
                else
                {
                  v577 = *(_OWORD *)(v576 + 8);
                  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v576 + 24);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v577;
                }
                goto LABEL_1008;
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v574 + 8));
                goto LABEL_1008;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)v574 + 8));
                goto LABEL_1008;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v574 + 8));
                goto LABEL_1008;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()(v574, &__str);
                goto LABEL_1008;
              case 7:
                memset(&__str, 0, sizeof(__str));
                goto LABEL_1008;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_1008;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v574 + 8));
LABEL_1008:
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v578 = &__str;
                else
                  v578 = (std::string *)__str.__r_.__value_.__r.__words[0];
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v579 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                else
                  v579 = __str.__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v575, (uint64_t)v578, v579);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if ((v671 & 0x80u) == 0)
                  v580 = &v669;
                else
                  v580 = v669;
                if ((v671 & 0x80u) == 0)
                  v581 = v671;
                else
                  v581 = v670;
                v582 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v575, (uint64_t)v580, v581);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v582, (uint64_t)", ", 2);
                ++v570;
                v569 += 16;
                if (v570 >= ((uint64_t)(*((_QWORD *)v668 + 14) - *((_QWORD *)v668 + 13)) >> 4) - 1)
                  break;
                continue;
              default:
                goto LABEL_1047;
            }
            break;
          }
        }
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v708, (uint64_t)"or ", 3);
        if ((v671 & 0x80u) == 0)
          v83 = &v669;
        else
          v83 = v669;
        if ((v671 & 0x80u) == 0)
          v84 = v671;
        else
          v84 = v670;
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
        v86 = *((_QWORD *)v668 + 14);
        v87 = v85;
        v88 = (turi::flexible_type_impl *)(v86 - 16);
        switch(*(_BYTE *)(v86 - 4))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_1059;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v680);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_1059:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v680);
            goto LABEL_1070;
          case 2:
            v602 = *(_QWORD *)v88;
            if (*(char *)(*(_QWORD *)v88 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v602 + 8), *(_QWORD *)(v602 + 16));
            }
            else
            {
              v603 = *(_OWORD *)(v602 + 8);
              __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v602 + 24);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v603;
            }
            goto LABEL_1070;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v88 + 8));
            goto LABEL_1070;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (uint64_t *)(*(_QWORD *)v88 + 8));
            goto LABEL_1070;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v88 + 8));
            goto LABEL_1070;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(v88, &__str);
            goto LABEL_1070;
          case 7:
            memset(&__str, 0, sizeof(__str));
            goto LABEL_1070;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_1070;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v680, (_QWORD *)(*(_QWORD *)v88 + 8));
LABEL_1070:
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v604 = &__str;
            else
              v604 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v605 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v605 = __str.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v604, v605);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if ((v671 & 0x80u) == 0)
              v606 = &v669;
            else
              v606 = v669;
            if ((v671 & 0x80u) == 0)
              v607 = v671;
            else
              v607 = v670;
            v608 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v606, v607);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v608, (uint64_t)").", 2);
            *(_QWORD *)&v680 = v708;
            turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_5::operator()();
          default:
            break;
        }
LABEL_1047:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
      case 3:
        v60 = *((unsigned __int8 *)a2 + 12);
        if (v60 > 9)
          goto LABEL_1047;
        if (v60 != 3)
          goto LABEL_127;
        v61 = *(double **)(*(_QWORD *)a2 + 8);
        v62 = *(double **)(*(_QWORD *)a2 + 16);
        v63 = v62 - v61;
        v64 = *(double **)(*(_QWORD *)v11 + 8);
        if (v63 != (uint64_t)(*(_QWORD *)(*(_QWORD *)v11 + 16) - (_QWORD)v64) >> 3)
          goto LABEL_127;
        if (v62 == v61)
          goto LABEL_259;
        if (v63 <= 1)
          v63 = 1;
        while (*v61 == *v64)
        {
          ++v64;
          ++v61;
          if (!--v63)
            goto LABEL_259;
        }
        goto LABEL_127;
      case 4:
        v13 = *((unsigned __int8 *)a2 + 12);
        if (v13 > 9)
          goto LABEL_1047;
        if (v13 != 4)
          goto LABEL_127;
        v14 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__str, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)v11 + 8));
        goto LABEL_90;
      case 5:
        v68 = *((unsigned __int8 *)a2 + 12);
        if (v68 > 9)
          goto LABEL_1047;
        if (v68 != 5)
          goto LABEL_127;
        v14 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__str, (uint64_t **)(*(_QWORD *)a2 + 8), (uint64_t **)(*(_QWORD *)v11 + 8));
        goto LABEL_90;
      case 6:
        switch(*((_BYTE *)a2 + 12))
        {
          case 0:
            if (*(_QWORD *)a2 == (uint64_t)(*(_QWORD *)v11 << 8) >> 8 && !*(_DWORD *)(v11 + 8))
              goto LABEL_259;
            goto LABEL_127;
          case 1:
            v71 = vabdd_f64(*(double *)a2, (double)*(int *)(v11 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v11 << 8) >> 8));
LABEL_105:
            if (v71 < 0.0000005)
              goto LABEL_259;
            goto LABEL_127;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_127;
          case 6:
            if (((*(_QWORD *)v11 ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a2 + 2) == *(_DWORD *)(v11 + 8))
            {
              goto LABEL_259;
            }
            goto LABEL_127;
          default:
            goto LABEL_1047;
        }
      case 7:
        v65 = *((unsigned __int8 *)a2 + 12);
        if (v65 < 7 || v65 - 8 < 2)
          goto LABEL_127;
        if (v65 == 7)
          goto LABEL_259;
        goto LABEL_1047;
      case 8:
        v69 = *((unsigned __int8 *)a2 + 12);
        if (v69 < 8 || v69 == 9)
          goto LABEL_127;
        if (v69 != 8)
          goto LABEL_1047;
        v14 = turi::image_type::operator==(*(_QWORD *)a2 + 8, *(_QWORD *)v11 + 8);
LABEL_90:
        if ((v14 & 1) != 0)
          goto LABEL_259;
        goto LABEL_127;
      case 9:
        v15 = *((unsigned __int8 *)a2 + 12);
        if (v15 < 9)
          goto LABEL_127;
        if (v15 != 9)
          goto LABEL_1047;
        v16 = *(double *)v11;
        v17 = *(_QWORD **)a2;
        if (*(_QWORD *)v11 == *(_QWORD *)a2)
          goto LABEL_259;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v17 + 1), *(_QWORD *)&v16 + 8))
          goto LABEL_127;
        v19 = (char *)v17[3];
        v18 = (char *)v17[4];
        v20 = v18 - v19;
        if (v18 == v19)
          goto LABEL_259;
        if (!v17[1])
          goto LABEL_259;
        v21 = 1;
        do
        {
          v22 = *(_QWORD *)v19;
          v19 += 8;
          v21 *= v22;
        }
        while (v19 != v18);
        if (!v21)
          goto LABEL_259;
        *(_QWORD *)v708 = 0;
        std::vector<unsigned long>::vector(&v680, v20 >> 3, v708);
        v23 = v680;
        v24 = **(_QWORD **)(*(_QWORD *)&v16 + 8);
        v25 = *((_QWORD *)&v680 + 1) - v680;
        v26 = (uint64_t)(*((_QWORD *)&v680 + 1) - v680) >> 3;
        v27 = v26 - 1;
        if (v26 <= 1)
          v28 = 1;
        else
          v28 = (uint64_t)(*((_QWORD *)&v680 + 1) - v680) >> 3;
        while (2)
        {
          if (*((_QWORD *)&v23 + 1) == (_QWORD)v23)
          {
            v36 = 0;
            v37 = *(double *)(*(_QWORD *)v17[1] + 8 * v17[9]);
          }
          else
          {
            v29 = 0;
            v30 = (uint64_t *)v17[6];
            v31 = (uint64_t *)v23;
            v32 = v28;
            do
            {
              v34 = *v31++;
              v33 = v34;
              v35 = *v30++;
              v29 += v35 * v33;
              --v32;
            }
            while (v32);
            v36 = 0;
            v37 = *(double *)(*(_QWORD *)v17[1] + 8 * (v17[9] + v29));
            v38 = *(uint64_t **)(*(_QWORD *)&v16 + 48);
            v39 = (uint64_t *)v23;
            v40 = v28;
            do
            {
              v42 = *v39++;
              v41 = v42;
              v43 = *v38++;
              v36 += v43 * v41;
              --v40;
            }
            while (v40);
          }
          v44 = *(double *)(v24 + 8 * (*(_QWORD *)(*(_QWORD *)&v16 + 72) + v36));
          v45 = v37 == v44;
          if (v37 != v44)
            goto LABEL_122;
          v46 = v26;
          v47 = v26 - 1;
          if (v25 < 1)
            goto LABEL_47;
          v48 = v17[3];
          v49 = *(_QWORD *)(v23 + 8 * v27) + 1;
          *(_QWORD *)(v23 + 8 * v27) = v49;
          if (v49 < *(_QWORD *)(v48 + 8 * v27))
          {
            v46 = 1;
            v47 = v26 - 1;
LABEL_47:
            if ((v47 & 0x8000000000000000) != 0)
              goto LABEL_122;
LABEL_48:
            if (!v46)
              goto LABEL_122;
            continue;
          }
          break;
        }
        v50 = v48 - 16;
        v51 = v26;
        v52 = (unint64_t *)(v23 + (v25 & 0xFFFFFFFFFFFFFFF8) - 16);
        do
        {
          v53 = v51 - 1;
          v52[1] = 0;
          if ((uint64_t)(v51 - 1) <= 0)
          {
            v45 = 1;
            goto LABEL_122;
          }
          v54 = *v52 + 1;
          *v52-- = v54;
          v55 = *(_QWORD *)(v50 + 8 * v51--);
        }
        while (v54 >= v55);
        v46 = 1;
        if (((v53 - 1) & 0x8000000000000000) == 0)
          goto LABEL_48;
LABEL_122:
        if ((_QWORD)v23)
        {
          *((_QWORD *)&v680 + 1) = v23;
          operator delete((void *)v23);
        }
        if (v45)
          goto LABEL_259;
        goto LABEL_127;
      default:
        goto LABEL_1047;
    }
  }
}

void sub_218440198(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  JUMPOUT(0x218440560);
}

void sub_2184401C8()
{
  switch(LOBYTE(STACK[0x28C]))
  {
    case 2:
      turi::gl_sarray::clip((unint64_t **)&STACK[0x280]);
      break;
    case 3:
      turi::gl_sarray::clip((unint64_t **)&STACK[0x280]);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4((unint64_t **)&STACK[0x280]);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5((unint64_t **)&STACK[0x280]);
      break;
    case 8:
      turi::gl_sarray::clip((unint64_t **)&STACK[0x280]);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&STACK[0x280]);
      break;
    default:
      break;
  }
  STACK[0x280] = 0;
  LODWORD(STACK[0x288]) = 0;
  LOBYTE(STACK[0x28C]) = 0;
  JUMPOUT(0x218440570);
}

void sub_2184402C8()
{
  JUMPOUT(0x21844056CLL);
}

void sub_2184402D0()
{
  JUMPOUT(0x2184402D8);
}

void sub_218440390()
{
  JUMPOUT(0x218440398);
}

void sub_218440550()
{
  JUMPOUT(0x218440770);
}

void sub_21844055C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;

  std::ostringstream::~ostringstream((uint64_t)&STACK[0x280]);
  switch(*(_BYTE *)(a10 + 12))
  {
    case 2:
      v36 = *(unint64_t **)a10;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v39 = *(unint64_t **)a10;
      if (!*(_QWORD *)a10)
        goto LABEL_39;
      if (*((char *)v39 + 31) < 0)
        operator delete((void *)v39[1]);
      v40 = v39;
      v41 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v50 = *(unint64_t **)a10;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_40;
      v53 = *(unint64_t **)a10;
      if (!*(_QWORD *)a10)
        goto LABEL_39;
      v54 = (void *)v53[1];
      if (v54)
      {
        v53[2] = (unint64_t)v54;
        operator delete(v54);
      }
      v40 = v53;
      v41 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v42 = *(unint64_t **)a10;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_40;
      v45 = *(unint64_t **)a10;
      if (!*(_QWORD *)a10)
        goto LABEL_39;
      a35 = (uint64_t)(v45 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
      goto LABEL_31;
    case 5:
      v55 = *(unint64_t **)a10;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (v57)
        goto LABEL_40;
      v45 = *(unint64_t **)a10;
      if (!*(_QWORD *)a10)
        goto LABEL_39;
      a35 = (uint64_t)(v45 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
LABEL_31:
      v40 = v45;
      v41 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v58 = *(unint64_t **)a10;
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (v60)
        goto LABEL_40;
      v61 = *(unint64_t **)a10;
      if (!*(_QWORD *)a10)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v61 + 2);
      v40 = v61;
      v49 = -235920773;
      goto LABEL_37;
    case 9:
      v46 = *(unint64_t **)a10;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (v48)
        goto LABEL_40;
      if (!*(_QWORD *)a10)
        goto LABEL_39;
      v40 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a10);
      v49 = 2071181815;
LABEL_37:
      v41 = v49 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v40, v41);
LABEL_39:
      *(_QWORD *)a10 = 0;
LABEL_40:
      *(_QWORD *)a10 = 0;
      *(_DWORD *)(a10 + 8) = 0;
      *(_BYTE *)(a10 + 12) = 0;
      if (a17 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t std::map<std::string,BOOL>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t turi::option_handling::option_info::save(turi::option_handling::option_info *this, turi::oarchive *a2)
{
  unint64_t v4;
  char *v5;
  size_t v7;
  char **v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this);
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this + 3);
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 6);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 4 > v4)
    {
      v7 = 2 * v4 + 8;
      *((_QWORD *)a2 + 5) = v7;
      v8 = (char **)*((_QWORD *)a2 + 2);
      if (v8)
      {
        v5 = *v8;
        v9 = v8[1] - *v8;
        v10 = v7 >= v9;
        v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
          v5 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v10)
        {
          v8[1] = &v5[v7];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_DWORD *)&v5[*((_QWORD *)a2 + 4)] = *((_DWORD *)this + 16);
    *((_QWORD *)a2 + 4) += 4;
  }
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 9);
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 11);
  return turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 13);
}

void turi::option_handling::option_info::load(std::string *this, turi::iarchive *a2)
{
  uint64_t v4;

  turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, this);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, this + 1);
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, &this[2]);
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v4 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 4;
  }
  else
  {
    std::istream::read();
  }
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, &this[3]);
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (_QWORD **)&this[3].__r_.__value_.__r.__words[2]);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)&this[4].__r_.__value_.__l.__size_);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::float_types_converter_internal<double>(unsigned __int8 **a1, double *a2)
{
  uint64_t result;
  unsigned int v5;

  if ((boost::detail::parse_inf_nan<char,double>(*a1, a1[1], a2) & 1) != 0)
    return 1;
  result = boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_using_base_class<double>((uint64_t *)a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    v5 = *(a1[1] - 1) - 43;
    if (v5 <= 0x3A)
    {
      if (((0x400000004000005uLL >> v5) & 1) != 0)
        return 0;
      else
        return result;
    }
  }
  return result;
}

uint64_t boost::detail::parse_inf_nan<char,double>(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v8;
  BOOL v9;
  int v10;
  unsigned __int8 *v11;
  BOOL v12;
  double v13;
  double v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  int v19;

  if (a1 == a2)
    return 0;
  v3 = *a1;
  v4 = v3 == 45 || v3 == 43;
  v5 = (uint64_t)(v4 ? a1 + 1 : a1);
  v6 = &a2[-v5];
  if ((uint64_t)&a2[-v5] < 3)
    return 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *(unsigned __int8 *)(v5 + v8);
    if (v10 != aNan[v8] && v10 != aNan_0[v8])
      break;
    v9 = v8++ > 1;
  }
  while (v8 != 3);
  if (!v9)
  {
    if (v6 == (unsigned __int8 *)3)
    {
      v18 = 0;
      v16 = 0;
      do
      {
        v19 = *(unsigned __int8 *)(v5 + v18);
        if (v19 != aInfinity_2[v18] && v19 != aInfinity_1[v18])
          break;
        v16 = v18++ > 1;
      }
      while (v18 != 3);
    }
    else
    {
      if (v6 != (unsigned __int8 *)8)
        return 0;
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *(unsigned __int8 *)(v5 + v15);
        if (v17 != aInfinity_2[v15] && v17 != aInfinity_1[v15])
          break;
        v16 = v15++ > 6;
      }
      while (v15 != 8);
    }
    if (v16)
    {
      v12 = v3 == 45;
      v13 = INFINITY;
      v14 = -INFINITY;
      goto LABEL_33;
    }
    return 0;
  }
  v11 = (unsigned __int8 *)(v5 + 3);
  if (v11 != a2 && (a2 - v11 < 2 || *v11 != 40 || *(a2 - 1) != 41))
    return 0;
  v12 = v3 == 45;
  v13 = NAN;
  v14 = NAN;
LABEL_33:
  if (v12)
    v13 = v14;
  *a3 = v13;
  return 1;
}

BOOL boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_using_base_class<double>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;
  _QWORD v11[2];
  std::ios_base v12;
  uint64_t v13;
  int v14;
  _QWORD __sb[8];

  std::streambuf::basic_streambuf();
  v4 = *a1;
  v5 = a1[1];
  __sb[0] = &unk_24D941908;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[1] = 0;
  v12.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v11[0] = MEMORY[0x24BEDB820] + 24;
  std::ios_base::init(&v12, __sb);
  v13 = 0;
  v14 = -1;
  v6 = (std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) &= ~0x1000u;
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v7 - 24)) = 17;
  v8 = (_QWORD *)MEMORY[0x219A19504](v11, a2);
  v9 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v9;
}

void sub_218440C84(_Unwind_Exception *a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,BOOL>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_218440D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_option_info_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::option_manager::create_real_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, int a5, double a6, double a7)
{
  unint64_t *v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  double v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  double v67;
  unsigned int v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  double v72;
  void *v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  double v84;
  void *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  double v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  double v96;
  unsigned int v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  double v101;
  void *v102;
  void *v103;
  void **v104;
  _BYTE v105[61];
  int v106;
  double v107;
  int v108;
  char v109;
  double v110;
  int v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v107 = 0.0;
  v108 = 0;
  v109 = 0;
  v110 = 0.0;
  v111 = 0;
  v112 = 0;
  v114 = 0;
  v115 = 0;
  v113 = 0;
  memset(v105, 0, sizeof(v105));
  v106 = 0;
  std::string::operator=((std::string *)v105, a2);
  std::string::operator=((std::string *)&v105[24], a3);
  v13 = *(unint64_t **)a4;
  v14 = *(_DWORD *)(a4 + 8);
  v15 = *(unsigned __int8 *)(a4 + 12);
  if (v15 <= 9 && ((1 << v15) & 0x33C) != 0)
  {
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 + 1, v13));
  }
  switch(v105[60])
  {
    case 2:
      v17 = *(unint64_t **)&v105[48];
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = *(_QWORD *)&v105[48];
        if (*(_QWORD *)&v105[48])
        {
          if (*(char *)(*(_QWORD *)&v105[48] + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v105[48] + 8));
          v21 = v20;
          v22 = 0x1012C404EF22A49;
          goto LABEL_45;
        }
      }
      break;
    case 3:
      v23 = *(unint64_t **)&v105[48];
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = *(_QWORD *)&v105[48];
        if (*(_QWORD *)&v105[48])
        {
          v27 = *(void **)(*(_QWORD *)&v105[48] + 8);
          if (v27)
          {
            *(_QWORD *)(*(_QWORD *)&v105[48] + 16) = v27;
            operator delete(v27);
          }
          v21 = v26;
          v22 = 0x1080C409938AC02;
          goto LABEL_45;
        }
      }
      break;
    case 4:
      v28 = *(unint64_t **)&v105[48];
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = *(_QWORD *)&v105[48];
        if (*(_QWORD *)&v105[48])
        {
          v104 = (void **)(*(_QWORD *)&v105[48] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v104);
          goto LABEL_29;
        }
      }
      break;
    case 5:
      v32 = *(unint64_t **)&v105[48];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v31 = *(_QWORD *)&v105[48];
        if (*(_QWORD *)&v105[48])
        {
          v104 = (void **)(*(_QWORD *)&v105[48] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v104);
LABEL_29:
          v21 = v31;
          v22 = 0x1020C405E66F15BLL;
          goto LABEL_45;
        }
      }
      break;
    case 8:
      v35 = *(unint64_t **)&v105[48];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = *(_QWORD *)&v105[48];
        if (*(_QWORD *)&v105[48])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v105[48] + 16));
          v21 = v38;
          v39 = -235920773;
          goto LABEL_44;
        }
      }
      break;
    case 9:
      v40 = *(unint64_t **)&v105[48];
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        v43 = *(_QWORD *)&v105[48];
        if (*(_QWORD *)&v105[48])
        {
          v44 = *(void **)(*(_QWORD *)&v105[48] + 48);
          if (v44)
          {
            *(_QWORD *)(*(_QWORD *)&v105[48] + 56) = v44;
            operator delete(v44);
          }
          v45 = *(void **)(v43 + 24);
          if (v45)
          {
            *(_QWORD *)(v43 + 32) = v45;
            operator delete(v45);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v43 + 8);
          v21 = v43;
          v39 = 2071181815;
LABEL_44:
          v22 = v39 | 0x1030C4000000000;
LABEL_45:
          MEMORY[0x219A19A08](v21, v22);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)&v105[48] = v13;
  *(_DWORD *)&v105[56] = v14;
  v105[60] = v15;
  switch(v109)
  {
    case 2:
      v46 = *(unint64_t **)&v107;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = v107;
        if (v107 != 0.0)
        {
          if (*(char *)(*(_QWORD *)&v107 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v107 + 8));
          v50 = v49;
          v51 = 0x1012C404EF22A49;
          goto LABEL_87;
        }
      }
      break;
    case 3:
      v52 = *(unint64_t **)&v107;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = v107;
        if (v107 != 0.0)
        {
          v56 = *(void **)(*(_QWORD *)&v107 + 8);
          if (v56)
          {
            *(_QWORD *)(*(_QWORD *)&v107 + 16) = v56;
            operator delete(v56);
          }
          v50 = v55;
          v51 = 0x1080C409938AC02;
          goto LABEL_87;
        }
      }
      break;
    case 4:
      v57 = *(unint64_t **)&v107;
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        v60 = v107;
        if (v107 != 0.0)
        {
          v104 = (void **)(*(_QWORD *)&v107 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v104);
          goto LABEL_71;
        }
      }
      break;
    case 5:
      v61 = *(unint64_t **)&v107;
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v60 = v107;
        if (v107 != 0.0)
        {
          v104 = (void **)(*(_QWORD *)&v107 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v104);
LABEL_71:
          v50 = v60;
          v51 = 0x1020C405E66F15BLL;
          goto LABEL_87;
        }
      }
      break;
    case 8:
      v64 = *(unint64_t **)&v107;
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        v67 = v107;
        if (v107 != 0.0)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v107 + 16));
          v50 = v67;
          v68 = -235920773;
          goto LABEL_86;
        }
      }
      break;
    case 9:
      v69 = *(unint64_t **)&v107;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        v72 = v107;
        if (v107 != 0.0)
        {
          v73 = *(void **)(*(_QWORD *)&v107 + 48);
          if (v73)
          {
            *(_QWORD *)(*(_QWORD *)&v107 + 56) = v73;
            operator delete(v73);
          }
          v74 = *(void **)(*(_QWORD *)&v72 + 24);
          if (v74)
          {
            *(_QWORD *)(*(_QWORD *)&v72 + 32) = v74;
            operator delete(v74);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v72 + 8);
          v50 = v72;
          v68 = 2071181815;
LABEL_86:
          v51 = v68 | 0x1030C4000000000;
LABEL_87:
          MEMORY[0x219A19A08](*(_QWORD *)&v50, v51);
        }
      }
      break;
    default:
      break;
  }
  v108 = 0;
  v109 = 1;
  v107 = a6;
  switch(v112)
  {
    case 2:
      v75 = *(unint64_t **)&v110;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        v78 = v110;
        if (v110 != 0.0)
        {
          if (*(char *)(*(_QWORD *)&v110 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v110 + 8));
          v79 = v78;
          v80 = 0x1012C404EF22A49;
          goto LABEL_129;
        }
      }
      break;
    case 3:
      v81 = *(unint64_t **)&v110;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
      {
        v84 = v110;
        if (v110 != 0.0)
        {
          v85 = *(void **)(*(_QWORD *)&v110 + 8);
          if (v85)
          {
            *(_QWORD *)(*(_QWORD *)&v110 + 16) = v85;
            operator delete(v85);
          }
          v79 = v84;
          v80 = 0x1080C409938AC02;
          goto LABEL_129;
        }
      }
      break;
    case 4:
      v86 = *(unint64_t **)&v110;
      do
      {
        v87 = __ldaxr(v86);
        v88 = v87 - 1;
      }
      while (__stlxr(v88, v86));
      if (!v88)
      {
        v89 = v110;
        if (v110 != 0.0)
        {
          v104 = (void **)(*(_QWORD *)&v110 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v104);
          goto LABEL_113;
        }
      }
      break;
    case 5:
      v90 = *(unint64_t **)&v110;
      do
      {
        v91 = __ldaxr(v90);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, v90));
      if (!v92)
      {
        v89 = v110;
        if (v110 != 0.0)
        {
          v104 = (void **)(*(_QWORD *)&v110 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v104);
LABEL_113:
          v79 = v89;
          v80 = 0x1020C405E66F15BLL;
          goto LABEL_129;
        }
      }
      break;
    case 8:
      v93 = *(unint64_t **)&v110;
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
      {
        v96 = v110;
        if (v110 != 0.0)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v110 + 16));
          v79 = v96;
          v97 = -235920773;
          goto LABEL_128;
        }
      }
      break;
    case 9:
      v98 = *(unint64_t **)&v110;
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        v101 = v110;
        if (v110 != 0.0)
        {
          v102 = *(void **)(*(_QWORD *)&v110 + 48);
          if (v102)
          {
            *(_QWORD *)(*(_QWORD *)&v110 + 56) = v102;
            operator delete(v102);
          }
          v103 = *(void **)(*(_QWORD *)&v101 + 24);
          if (v103)
          {
            *(_QWORD *)(*(_QWORD *)&v101 + 32) = v103;
            operator delete(v103);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v101 + 8);
          v79 = v101;
          v97 = 2071181815;
LABEL_128:
          v80 = v97 | 0x1030C4000000000;
LABEL_129:
          MEMORY[0x219A19A08](*(_QWORD *)&v79, v80);
        }
      }
      break;
    default:
      break;
  }
  v111 = 0;
  v112 = 1;
  v110 = a7;
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v105, a5);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v105);
}

void sub_21844142C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_option(turi::option_manager *this, const turi::option_handling::option_info *a2, int a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  int *v26;
  file_logger *v27;
  file_logger *started;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unsigned int v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::string __p;
  __int128 *v99;

  v6 = (_QWORD *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this, (const void **)a2);
  if ((_QWORD *)((char *)this + 8) == v6)
  {
    std::vector<turi::option_handling::option_info>::push_back[abi:ne180100]((uint64_t *)this + 3, (std::string *)a2);
    v16 = ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 7) - 1;
    v99 = (__int128 *)a2;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)a2, (uint64_t)&std::piecewise_construct, &v99)[7] = v16;
    v99 = (__int128 *)a2;
    v17 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v99);
    v18 = v17 + 7;
    if ((uint64_t *)((char *)a2 + 48) != v17 + 7)
    {
      v19 = v17;
      switch(*((_BYTE *)v17 + 68))
      {
        case 2:
          v20 = (unint64_t *)*v18;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            v23 = (unint64_t *)*v18;
            if (!*v18)
              goto LABEL_64;
            if (*((char *)v23 + 31) < 0)
              operator delete((void *)v23[1]);
            v24 = v23;
            v25 = 0x1012C404EF22A49;
            goto LABEL_63;
          }
          break;
        case 3:
          v32 = (unint64_t *)*v18;
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            v35 = (unint64_t *)*v18;
            if (!*v18)
              goto LABEL_64;
            v36 = (void *)v35[1];
            if (v36)
            {
              v35[2] = (unint64_t)v36;
              operator delete(v36);
            }
            v24 = v35;
            v25 = 0x1080C409938AC02;
            goto LABEL_63;
          }
          break;
        case 4:
          v37 = (unint64_t *)*v18;
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            v40 = (unint64_t *)*v18;
            if (!*v18)
              goto LABEL_64;
            v99 = (__int128 *)(v40 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
            goto LABEL_51;
          }
          break;
        case 5:
          v41 = (unint64_t *)*v18;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            v40 = (unint64_t *)*v18;
            if (!*v18)
              goto LABEL_64;
            v99 = (__int128 *)(v40 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
LABEL_51:
            v24 = v40;
            v25 = 0x1020C405E66F15BLL;
            goto LABEL_63;
          }
          break;
        case 8:
          v44 = (unint64_t *)*v18;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            v47 = (unint64_t *)*v18;
            if (!*v18)
              goto LABEL_64;
            boost::detail::shared_count::~shared_count((unsigned int **)v47 + 2);
            v24 = v47;
            v48 = -235920773;
            goto LABEL_62;
          }
          break;
        case 9:
          v49 = (unint64_t *)*v18;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
          {
            if (*v18)
            {
              v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*v18);
              v48 = 2071181815;
LABEL_62:
              v25 = v48 | 0x1030C4000000000;
LABEL_63:
              MEMORY[0x219A19A08](v24, v25);
            }
LABEL_64:
            *v18 = 0;
          }
          break;
        default:
          break;
      }
      v52 = *((_QWORD *)a2 + 6);
      *(uint64_t *)((char *)v18 + 5) = *(_QWORD *)((char *)a2 + 53);
      *v18 = v52;
      LODWORD(v52) = *((unsigned __int8 *)a2 + 60);
      *((_BYTE *)v19 + 68) = v52;
      switch((int)v52)
      {
        case 2:
          v53 = (unint64_t *)*v18;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
          break;
        case 3:
          v55 = (unint64_t *)*v18;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 + 1, v55));
          break;
        case 4:
          v57 = (unint64_t *)*v18;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 + 1, v57));
          break;
        case 5:
          v59 = (unint64_t *)*v18;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 + 1, v59));
          break;
        case 8:
          v61 = (unint64_t *)*v18;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 + 1, v61));
          break;
        case 9:
          v63 = (unint64_t *)*v18;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 + 1, v63));
          break;
        default:
          return;
      }
    }
  }
  else if (a3)
  {
    turi::option_handling::option_info::operator=(*((_QWORD *)this + 3) + (v6[7] << 7), (uint64_t)a2);
    v99 = (__int128 *)a2;
    v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v99);
    v8 = v7 + 7;
    if ((uint64_t *)((char *)a2 + 48) != v7 + 7)
    {
      v9 = v7;
      switch(*((_BYTE *)v7 + 68))
      {
        case 2:
          v10 = (unint64_t *)*v8;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            v13 = (unint64_t *)*v8;
            if (!*v8)
              goto LABEL_114;
            if (*((char *)v13 + 31) < 0)
              operator delete((void *)v13[1]);
            v14 = v13;
            v15 = 0x1012C404EF22A49;
            goto LABEL_113;
          }
          break;
        case 3:
          v65 = (unint64_t *)*v8;
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = (unint64_t *)*v8;
            if (!*v8)
              goto LABEL_114;
            v69 = (void *)v68[1];
            if (v69)
            {
              v68[2] = (unint64_t)v69;
              operator delete(v69);
            }
            v14 = v68;
            v15 = 0x1080C409938AC02;
            goto LABEL_113;
          }
          break;
        case 4:
          v70 = (unint64_t *)*v8;
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (!v72)
          {
            v73 = (unint64_t *)*v8;
            if (!*v8)
              goto LABEL_114;
            v99 = (__int128 *)(v73 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
            goto LABEL_101;
          }
          break;
        case 5:
          v74 = (unint64_t *)*v8;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            v73 = (unint64_t *)*v8;
            if (!*v8)
              goto LABEL_114;
            v99 = (__int128 *)(v73 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
LABEL_101:
            v14 = v73;
            v15 = 0x1020C405E66F15BLL;
            goto LABEL_113;
          }
          break;
        case 8:
          v77 = (unint64_t *)*v8;
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (!v79)
          {
            v80 = (unint64_t *)*v8;
            if (!*v8)
              goto LABEL_114;
            boost::detail::shared_count::~shared_count((unsigned int **)v80 + 2);
            v14 = v80;
            v81 = -235920773;
            goto LABEL_112;
          }
          break;
        case 9:
          v82 = (unint64_t *)*v8;
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (!v84)
          {
            if (*v8)
            {
              v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*v8);
              v81 = 2071181815;
LABEL_112:
              v15 = v81 | 0x1030C4000000000;
LABEL_113:
              MEMORY[0x219A19A08](v14, v15);
            }
LABEL_114:
            *v8 = 0;
          }
          break;
        default:
          break;
      }
      v85 = *((_QWORD *)a2 + 6);
      *(uint64_t *)((char *)v8 + 5) = *(_QWORD *)((char *)a2 + 53);
      *v8 = v85;
      LODWORD(v85) = *((unsigned __int8 *)a2 + 60);
      *((_BYTE *)v9 + 68) = v85;
      switch((int)v85)
      {
        case 2:
          v86 = (unint64_t *)*v8;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 + 1, v86));
          break;
        case 3:
          v88 = (unint64_t *)*v8;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 + 1, v88));
          break;
        case 4:
          v90 = (unint64_t *)*v8;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 + 1, v90));
          break;
        case 5:
          v92 = (unint64_t *)*v8;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 + 1, v92));
          break;
        case 8:
          v94 = (unint64_t *)*v8;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 + 1, v94));
          break;
        case 9:
          v96 = (unint64_t *)*v8;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 + 1, v96));
          break;
        default:
          return;
      }
    }
  }
  else
  {
    v26 = (int *)global_logger();
    if (v26[169] <= 1)
    {
      if (cppipc::must_cancel((cppipc *)v26))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v27 = (file_logger *)global_logger();
      started = file_logger::start_stream(v27, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/extensions/option_manager.cpp", "create_option", 129, 1);
      v29 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v29 && *((_BYTE *)v29 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)"Option ", 7);
      if (*((char *)a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      else
        __p = *(std::string *)a2;
      v30 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      v31 = pthread_getspecific(*(_QWORD *)(v30 + 592));
      if (v31 && *((_BYTE *)v31 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)" defined a second time.", 23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_218441B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::option_manager::create_integer_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void **v103;
  _BYTE v104[61];
  int v105;
  uint64_t v106;
  int v107;
  char v108;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v113 = 0;
  v114 = 0;
  v112 = 0;
  memset(v104, 0, sizeof(v104));
  v105 = 1;
  std::string::operator=((std::string *)v104, a2);
  std::string::operator=((std::string *)&v104[24], a3);
  if (&v104[48] != (_BYTE *)a4)
  {
    switch(v104[60])
    {
      case 2:
        v13 = *(unint64_t **)&v104[48];
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *(_QWORD *)&v104[48];
          if (*(_QWORD *)&v104[48])
          {
            if (*(char *)(*(_QWORD *)&v104[48] + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v104[48] + 8));
            v17 = v16;
            v18 = 0x1012C404EF22A49;
            goto LABEL_43;
          }
        }
        break;
      case 3:
        v19 = *(unint64_t **)&v104[48];
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = *(_QWORD *)&v104[48];
          if (*(_QWORD *)&v104[48])
          {
            v23 = *(void **)(*(_QWORD *)&v104[48] + 8);
            if (v23)
            {
              *(_QWORD *)(*(_QWORD *)&v104[48] + 16) = v23;
              operator delete(v23);
            }
            v17 = v22;
            v18 = 0x1080C409938AC02;
            goto LABEL_43;
          }
        }
        break;
      case 4:
        v24 = *(unint64_t **)&v104[48];
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(_QWORD *)&v104[48];
          if (*(_QWORD *)&v104[48])
          {
            v103 = (void **)(*(_QWORD *)&v104[48] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v103);
            goto LABEL_27;
          }
        }
        break;
      case 5:
        v28 = *(unint64_t **)&v104[48];
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v27 = *(_QWORD *)&v104[48];
          if (*(_QWORD *)&v104[48])
          {
            v103 = (void **)(*(_QWORD *)&v104[48] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v103);
LABEL_27:
            v17 = v27;
            v18 = 0x1020C405E66F15BLL;
            goto LABEL_43;
          }
        }
        break;
      case 8:
        v31 = *(unint64_t **)&v104[48];
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v34 = *(_QWORD *)&v104[48];
          if (*(_QWORD *)&v104[48])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v104[48] + 16));
            v17 = v34;
            v35 = -235920773;
            goto LABEL_42;
          }
        }
        break;
      case 9:
        v36 = *(unint64_t **)&v104[48];
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          v39 = *(_QWORD *)&v104[48];
          if (*(_QWORD *)&v104[48])
          {
            v40 = *(void **)(*(_QWORD *)&v104[48] + 48);
            if (v40)
            {
              *(_QWORD *)(*(_QWORD *)&v104[48] + 56) = v40;
              operator delete(v40);
            }
            v41 = *(void **)(v39 + 24);
            if (v41)
            {
              *(_QWORD *)(v39 + 32) = v41;
              operator delete(v41);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v39 + 8);
            v17 = v39;
            v35 = 2071181815;
LABEL_42:
            v18 = v35 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v17, v18);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)&v104[53] = *(_QWORD *)(a4 + 5);
    *(_QWORD *)&v104[48] = *(_QWORD *)a4;
    v104[60] = *(_BYTE *)(a4 + 12);
    if (v104[60] <= 9u && ((1 << v104[60]) & 0x33C) != 0)
    {
      v43 = *(unint64_t **)&v104[48];
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
    }
  }
  switch(v108)
  {
    case 2:
      v45 = (unint64_t *)v106;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        v48 = v106;
        if (v106)
        {
          if (*(char *)(v106 + 31) < 0)
            operator delete(*(void **)(v106 + 8));
          v49 = v48;
          v50 = 0x1012C404EF22A49;
          goto LABEL_91;
        }
      }
      break;
    case 3:
      v51 = (unint64_t *)v106;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        v54 = v106;
        if (v106)
        {
          v55 = *(void **)(v106 + 8);
          if (v55)
          {
            *(_QWORD *)(v106 + 16) = v55;
            operator delete(v55);
          }
          v49 = v54;
          v50 = 0x1080C409938AC02;
          goto LABEL_91;
        }
      }
      break;
    case 4:
      v56 = (unint64_t *)v106;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        v59 = v106;
        if (v106)
        {
          v103 = (void **)(v106 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v103);
          goto LABEL_75;
        }
      }
      break;
    case 5:
      v60 = (unint64_t *)v106;
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        v59 = v106;
        if (v106)
        {
          v103 = (void **)(v106 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v103);
LABEL_75:
          v49 = v59;
          v50 = 0x1020C405E66F15BLL;
          goto LABEL_91;
        }
      }
      break;
    case 8:
      v63 = (unint64_t *)v106;
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        v66 = v106;
        if (v106)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v106 + 16));
          v49 = v66;
          v67 = -235920773;
          goto LABEL_90;
        }
      }
      break;
    case 9:
      v68 = (unint64_t *)v106;
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        v71 = v106;
        if (v106)
        {
          v72 = *(void **)(v106 + 48);
          if (v72)
          {
            *(_QWORD *)(v106 + 56) = v72;
            operator delete(v72);
          }
          v73 = *(void **)(v71 + 24);
          if (v73)
          {
            *(_QWORD *)(v71 + 32) = v73;
            operator delete(v73);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v71 + 8);
          v49 = v71;
          v67 = 2071181815;
LABEL_90:
          v50 = v67 | 0x1030C4000000000;
LABEL_91:
          MEMORY[0x219A19A08](v49, v50);
        }
      }
      break;
    default:
      break;
  }
  v107 = 0;
  v108 = 0;
  v106 = a5;
  switch(v111)
  {
    case 2:
      v74 = (unint64_t *)v109;
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        v77 = v109;
        if (v109)
        {
          if (*(char *)(v109 + 31) < 0)
            operator delete(*(void **)(v109 + 8));
          v78 = v77;
          v79 = 0x1012C404EF22A49;
          goto LABEL_133;
        }
      }
      break;
    case 3:
      v80 = (unint64_t *)v109;
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (!v82)
      {
        v83 = v109;
        if (v109)
        {
          v84 = *(void **)(v109 + 8);
          if (v84)
          {
            *(_QWORD *)(v109 + 16) = v84;
            operator delete(v84);
          }
          v78 = v83;
          v79 = 0x1080C409938AC02;
          goto LABEL_133;
        }
      }
      break;
    case 4:
      v85 = (unint64_t *)v109;
      do
      {
        v86 = __ldaxr(v85);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v85));
      if (!v87)
      {
        v88 = v109;
        if (v109)
        {
          v103 = (void **)(v109 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v103);
          goto LABEL_117;
        }
      }
      break;
    case 5:
      v89 = (unint64_t *)v109;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v88 = v109;
        if (v109)
        {
          v103 = (void **)(v109 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v103);
LABEL_117:
          v78 = v88;
          v79 = 0x1020C405E66F15BLL;
          goto LABEL_133;
        }
      }
      break;
    case 8:
      v92 = (unint64_t *)v109;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = v109;
        if (v109)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v109 + 16));
          v78 = v95;
          v96 = -235920773;
          goto LABEL_132;
        }
      }
      break;
    case 9:
      v97 = (unint64_t *)v109;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        v100 = v109;
        if (v109)
        {
          v101 = *(void **)(v109 + 48);
          if (v101)
          {
            *(_QWORD *)(v109 + 56) = v101;
            operator delete(v101);
          }
          v102 = *(void **)(v100 + 24);
          if (v102)
          {
            *(_QWORD *)(v100 + 32) = v102;
            operator delete(v102);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v100 + 8);
          v78 = v100;
          v96 = 2071181815;
LABEL_132:
          v79 = v96 | 0x1030C4000000000;
LABEL_133:
          MEMORY[0x219A19A08](v78, v79);
        }
      }
      break;
    default:
      break;
  }
  v110 = 0;
  v111 = 0;
  v109 = a6;
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v104, a7);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v104);
}

void sub_2184421E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_categorical_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, uint64_t **a5, int a6)
{
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  unint64_t *v41;
  unint64_t v42;
  void **v43;
  _BYTE v44[61];
  int v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  _QWORD v52[5];

  v52[4] = *MEMORY[0x24BDAC8D0];
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  memset(v52, 0, 24);
  memset(v44, 0, sizeof(v44));
  v45 = 3;
  std::string::operator=((std::string *)v44, a2);
  std::string::operator=((std::string *)&v44[24], a3);
  if (&v44[48] != (_BYTE *)a4)
  {
    switch(v44[60])
    {
      case 2:
        v11 = *(unint64_t **)&v44[48];
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = *(_QWORD *)&v44[48];
          if (*(_QWORD *)&v44[48])
          {
            if (*(char *)(*(_QWORD *)&v44[48] + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v44[48] + 8));
            v15 = v14;
            v16 = 0x1012C404EF22A49;
            goto LABEL_43;
          }
        }
        break;
      case 3:
        v17 = *(unint64_t **)&v44[48];
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(_QWORD *)&v44[48];
          if (*(_QWORD *)&v44[48])
          {
            v21 = *(void **)(*(_QWORD *)&v44[48] + 8);
            if (v21)
            {
              *(_QWORD *)(*(_QWORD *)&v44[48] + 16) = v21;
              operator delete(v21);
            }
            v15 = v20;
            v16 = 0x1080C409938AC02;
            goto LABEL_43;
          }
        }
        break;
      case 4:
        v22 = *(unint64_t **)&v44[48];
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(_QWORD *)&v44[48];
          if (*(_QWORD *)&v44[48])
          {
            v43 = (void **)(*(_QWORD *)&v44[48] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
            goto LABEL_27;
          }
        }
        break;
      case 5:
        v26 = *(unint64_t **)&v44[48];
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v25 = *(_QWORD *)&v44[48];
          if (*(_QWORD *)&v44[48])
          {
            v43 = (void **)(*(_QWORD *)&v44[48] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_27:
            v15 = v25;
            v16 = 0x1020C405E66F15BLL;
            goto LABEL_43;
          }
        }
        break;
      case 8:
        v29 = *(unint64_t **)&v44[48];
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *(_QWORD *)&v44[48];
          if (*(_QWORD *)&v44[48])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v44[48] + 16));
            v15 = v32;
            v33 = -235920773;
            goto LABEL_42;
          }
        }
        break;
      case 9:
        v34 = *(unint64_t **)&v44[48];
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v37 = *(_QWORD *)&v44[48];
          if (*(_QWORD *)&v44[48])
          {
            v38 = *(void **)(*(_QWORD *)&v44[48] + 48);
            if (v38)
            {
              *(_QWORD *)(*(_QWORD *)&v44[48] + 56) = v38;
              operator delete(v38);
            }
            v39 = *(void **)(v37 + 24);
            if (v39)
            {
              *(_QWORD *)(v37 + 32) = v39;
              operator delete(v39);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v37 + 8);
            v15 = v37;
            v33 = 2071181815;
LABEL_42:
            v16 = v33 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v15, v16);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)&v44[53] = *(_QWORD *)(a4 + 5);
    *(_QWORD *)&v44[48] = *(_QWORD *)a4;
    v44[60] = *(_BYTE *)(a4 + 12);
    if (v44[60] <= 9u && ((1 << v44[60]) & 0x33C) != 0)
    {
      v41 = *(unint64_t **)&v44[48];
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
    }
  }
  if (v52 != a5)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v52, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v44, a6);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v44);
}

void sub_21844251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_string_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, int a5)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unint64_t *v39;
  unint64_t v40;
  void **v41;
  _BYTE v42[61];
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  memset(v42, 0, sizeof(v42));
  v43 = 4;
  std::string::operator=((std::string *)v42, a2);
  std::string::operator=((std::string *)&v42[24], a3);
  if (&v42[48] != (_BYTE *)a4)
  {
    switch(v42[60])
    {
      case 2:
        v9 = *(unint64_t **)&v42[48];
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            if (*(char *)(*(_QWORD *)&v42[48] + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v42[48] + 8));
            v13 = v12;
            v14 = 0x1012C404EF22A49;
            goto LABEL_43;
          }
        }
        break;
      case 3:
        v15 = *(unint64_t **)&v42[48];
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            v19 = *(void **)(*(_QWORD *)&v42[48] + 8);
            if (v19)
            {
              *(_QWORD *)(*(_QWORD *)&v42[48] + 16) = v19;
              operator delete(v19);
            }
            v13 = v18;
            v14 = 0x1080C409938AC02;
            goto LABEL_43;
          }
        }
        break;
      case 4:
        v20 = *(unint64_t **)&v42[48];
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v23 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            v41 = (void **)(*(_QWORD *)&v42[48] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
            goto LABEL_27;
          }
        }
        break;
      case 5:
        v24 = *(unint64_t **)&v42[48];
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v23 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            v41 = (void **)(*(_QWORD *)&v42[48] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_27:
            v13 = v23;
            v14 = 0x1020C405E66F15BLL;
            goto LABEL_43;
          }
        }
        break;
      case 8:
        v27 = *(unint64_t **)&v42[48];
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v42[48] + 16));
            v13 = v30;
            v31 = -235920773;
            goto LABEL_42;
          }
        }
        break;
      case 9:
        v32 = *(unint64_t **)&v42[48];
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            v36 = *(void **)(*(_QWORD *)&v42[48] + 48);
            if (v36)
            {
              *(_QWORD *)(*(_QWORD *)&v42[48] + 56) = v36;
              operator delete(v36);
            }
            v37 = *(void **)(v35 + 24);
            if (v37)
            {
              *(_QWORD *)(v35 + 32) = v37;
              operator delete(v37);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35 + 8);
            v13 = v35;
            v31 = 2071181815;
LABEL_42:
            v14 = v31 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v13, v14);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)&v42[53] = *(_QWORD *)(a4 + 5);
    *(_QWORD *)&v42[48] = *(_QWORD *)a4;
    v42[60] = *(_BYTE *)(a4 + 12);
    if (v42[60] <= 9u && ((1 << v42[60]) & 0x33C) != 0)
    {
      v39 = *(unint64_t **)&v42[48];
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v42, a5);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v42);
}

void sub_218442828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_BOOLean_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, unsigned int a4, int a5)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void **v38;
  _BYTE v39[61];
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  memset(v39, 0, sizeof(v39));
  v40 = 2;
  std::string::operator=((std::string *)v39, a2);
  std::string::operator=((std::string *)&v39[24], a3);
  switch(v39[60])
  {
    case 2:
      v9 = *(unint64_t **)&v39[48];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = *(_QWORD *)&v39[48];
        if (*(_QWORD *)&v39[48])
        {
          if (*(char *)(*(_QWORD *)&v39[48] + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v39[48] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v15 = *(unint64_t **)&v39[48];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(_QWORD *)&v39[48];
        if (*(_QWORD *)&v39[48])
        {
          v19 = *(void **)(*(_QWORD *)&v39[48] + 8);
          if (v19)
          {
            *(_QWORD *)(*(_QWORD *)&v39[48] + 16) = v19;
            operator delete(v19);
          }
          v13 = v18;
          v14 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v20 = *(unint64_t **)&v39[48];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)&v39[48];
        if (*(_QWORD *)&v39[48])
        {
          v38 = (void **)(*(_QWORD *)&v39[48] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v38);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v24 = *(unint64_t **)&v39[48];
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v23 = *(_QWORD *)&v39[48];
        if (*(_QWORD *)&v39[48])
        {
          v38 = (void **)(*(_QWORD *)&v39[48] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v38);
LABEL_26:
          v13 = v23;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v27 = *(unint64_t **)&v39[48];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(_QWORD *)&v39[48];
        if (*(_QWORD *)&v39[48])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v39[48] + 16));
          v13 = v30;
          v31 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v32 = *(unint64_t **)&v39[48];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = *(_QWORD *)&v39[48];
        if (*(_QWORD *)&v39[48])
        {
          v36 = *(void **)(*(_QWORD *)&v39[48] + 48);
          if (v36)
          {
            *(_QWORD *)(*(_QWORD *)&v39[48] + 56) = v36;
            operator delete(v36);
          }
          v37 = *(void **)(v35 + 24);
          if (v37)
          {
            *(_QWORD *)(v35 + 32) = v37;
            operator delete(v37);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35 + 8);
          v13 = v35;
          v31 = 2071181815;
LABEL_41:
          v14 = v31 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      break;
  }
  *(_DWORD *)&v39[56] = 0;
  v39[60] = 0;
  *(_QWORD *)&v39[48] = a4;
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v39, a5);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v39);
}

void sub_218442AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_flexible_type_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, int a5)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unint64_t *v39;
  unint64_t v40;
  void **v41;
  _BYTE v42[61];
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  memset(v42, 0, sizeof(v42));
  v43 = 5;
  std::string::operator=((std::string *)v42, a2);
  std::string::operator=((std::string *)&v42[24], a3);
  if (&v42[48] != (_BYTE *)a4)
  {
    switch(v42[60])
    {
      case 2:
        v9 = *(unint64_t **)&v42[48];
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            if (*(char *)(*(_QWORD *)&v42[48] + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v42[48] + 8));
            v13 = v12;
            v14 = 0x1012C404EF22A49;
            goto LABEL_43;
          }
        }
        break;
      case 3:
        v15 = *(unint64_t **)&v42[48];
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            v19 = *(void **)(*(_QWORD *)&v42[48] + 8);
            if (v19)
            {
              *(_QWORD *)(*(_QWORD *)&v42[48] + 16) = v19;
              operator delete(v19);
            }
            v13 = v18;
            v14 = 0x1080C409938AC02;
            goto LABEL_43;
          }
        }
        break;
      case 4:
        v20 = *(unint64_t **)&v42[48];
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v23 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            v41 = (void **)(*(_QWORD *)&v42[48] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
            goto LABEL_27;
          }
        }
        break;
      case 5:
        v24 = *(unint64_t **)&v42[48];
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v23 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            v41 = (void **)(*(_QWORD *)&v42[48] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_27:
            v13 = v23;
            v14 = 0x1020C405E66F15BLL;
            goto LABEL_43;
          }
        }
        break;
      case 8:
        v27 = *(unint64_t **)&v42[48];
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v42[48] + 16));
            v13 = v30;
            v31 = -235920773;
            goto LABEL_42;
          }
        }
        break;
      case 9:
        v32 = *(unint64_t **)&v42[48];
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = *(_QWORD *)&v42[48];
          if (*(_QWORD *)&v42[48])
          {
            v36 = *(void **)(*(_QWORD *)&v42[48] + 48);
            if (v36)
            {
              *(_QWORD *)(*(_QWORD *)&v42[48] + 56) = v36;
              operator delete(v36);
            }
            v37 = *(void **)(v35 + 24);
            if (v37)
            {
              *(_QWORD *)(v35 + 32) = v37;
              operator delete(v37);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35 + 8);
            v13 = v35;
            v31 = 2071181815;
LABEL_42:
            v14 = v31 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v13, v14);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)&v42[53] = *(_QWORD *)(a4 + 5);
    *(_QWORD *)&v42[48] = *(_QWORD *)a4;
    v42[60] = *(_BYTE *)(a4 + 12);
    if (v42[60] <= 9u && ((1 << v42[60]) & 0x33C) != 0)
    {
      v39 = *(unint64_t **)&v42[48];
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v42, a5);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v42);
}

void sub_218442DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::option_handling::option_info::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  unint64_t *v34;
  BOOL v35;
  int v36;
  unint64_t *v38;
  unint64_t v39;
  unint64_t **v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  void *v68;
  void *v69;
  unint64_t *v70;
  unsigned int v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t **v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  void *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unsigned int v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  void *v102;
  void *v103;
  unint64_t *v104;
  int v105;
  unint64_t *v107;
  unint64_t v108;
  void **v110;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  if (a2 == a1)
  {
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  }
  else
  {
    v4 = (unint64_t **)(a1 + 48);
    switch(*(_BYTE *)(a1 + 60))
    {
      case 2:
        v5 = *v4;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = *v4;
          if (!*v4)
            goto LABEL_45;
          if (*((char *)v8 + 31) < 0)
            operator delete((void *)v8[1]);
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
        break;
      case 3:
        v11 = *v4;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = *v4;
          if (!*v4)
            goto LABEL_45;
          v15 = (void *)v14[1];
          if (v15)
          {
            v14[2] = (unint64_t)v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_44;
        }
        break;
      case 4:
        v16 = *v4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = *v4;
          if (!*v4)
            goto LABEL_45;
          v110 = (void **)(v19 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v110);
          goto LABEL_28;
        }
        break;
      case 5:
        v20 = *v4;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v19 = *v4;
          if (!*v4)
            goto LABEL_45;
          v110 = (void **)(v19 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v110);
LABEL_28:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
        break;
      case 8:
        v23 = *v4;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *v4;
          if (!*v4)
            goto LABEL_45;
          boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
          v9 = v26;
          v27 = -235920773;
          goto LABEL_43;
        }
        break;
      case 9:
        v28 = *v4;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *v4;
          if (*v4)
          {
            v32 = (void *)v31[6];
            if (v32)
            {
              v31[7] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (void *)v31[3];
            if (v33)
            {
              v31[4] = (unint64_t)v33;
              operator delete(v33);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
            v9 = v31;
            v27 = 2071181815;
LABEL_43:
            v10 = v27 | 0x1030C4000000000;
LABEL_44:
            MEMORY[0x219A19A08](v9, v10);
          }
LABEL_45:
          *v4 = 0;
        }
        break;
      default:
        break;
    }
    v34 = *(unint64_t **)(a2 + 48);
    *(_QWORD *)(a1 + 53) = *(_QWORD *)(a2 + 53);
    *v4 = v34;
    LODWORD(v34) = *(unsigned __int8 *)(a2 + 60);
    *(_BYTE *)(a1 + 60) = (_BYTE)v34;
    v35 = v34 > 9;
    v36 = (1 << (char)v34) & 0x33C;
    if (!v35 && v36 != 0)
    {
      v38 = *v4;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
    }
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    v40 = (unint64_t **)(a1 + 72);
    switch(*(_BYTE *)(a1 + 84))
    {
      case 2:
        v41 = *v40;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          v44 = *v40;
          if (!*v40)
            goto LABEL_94;
          if (*((char *)v44 + 31) < 0)
            operator delete((void *)v44[1]);
          v45 = v44;
          v46 = 0x1012C404EF22A49;
          goto LABEL_93;
        }
        break;
      case 3:
        v47 = *v40;
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          v50 = *v40;
          if (!*v40)
            goto LABEL_94;
          v51 = (void *)v50[1];
          if (v51)
          {
            v50[2] = (unint64_t)v51;
            operator delete(v51);
          }
          v45 = v50;
          v46 = 0x1080C409938AC02;
          goto LABEL_93;
        }
        break;
      case 4:
        v52 = *v40;
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          v55 = *v40;
          if (!*v40)
            goto LABEL_94;
          v110 = (void **)(v55 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v110);
          goto LABEL_77;
        }
        break;
      case 5:
        v56 = *v40;
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          v55 = *v40;
          if (!*v40)
            goto LABEL_94;
          v110 = (void **)(v55 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v110);
LABEL_77:
          v45 = v55;
          v46 = 0x1020C405E66F15BLL;
          goto LABEL_93;
        }
        break;
      case 8:
        v59 = *v40;
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          v62 = *v40;
          if (!*v40)
            goto LABEL_94;
          boost::detail::shared_count::~shared_count((unsigned int **)v62 + 2);
          v45 = v62;
          v63 = -235920773;
          goto LABEL_92;
        }
        break;
      case 9:
        v64 = *v40;
        do
        {
          v65 = __ldaxr(v64);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v64));
        if (!v66)
        {
          v67 = *v40;
          if (*v40)
          {
            v68 = (void *)v67[6];
            if (v68)
            {
              v67[7] = (unint64_t)v68;
              operator delete(v68);
            }
            v69 = (void *)v67[3];
            if (v69)
            {
              v67[4] = (unint64_t)v69;
              operator delete(v69);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v67 + 1));
            v45 = v67;
            v63 = 2071181815;
LABEL_92:
            v46 = v63 | 0x1030C4000000000;
LABEL_93:
            MEMORY[0x219A19A08](v45, v46);
          }
LABEL_94:
          *v40 = 0;
        }
        break;
      default:
        break;
    }
    v70 = *(unint64_t **)(a2 + 72);
    *(_QWORD *)(a1 + 77) = *(_QWORD *)(a2 + 77);
    *v40 = v70;
    v71 = *(unsigned __int8 *)(a2 + 84);
    *(_BYTE *)(a1 + 84) = v71;
    if (v71 <= 9 && ((1 << v71) & 0x33C) != 0)
    {
      v72 = *v40;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 + 1, v72));
    }
    v74 = (unint64_t **)(a1 + 88);
    switch(*(_BYTE *)(a1 + 100))
    {
      case 2:
        v75 = *v74;
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          v78 = *v74;
          if (!*v74)
            goto LABEL_141;
          if (*((char *)v78 + 31) < 0)
            operator delete((void *)v78[1]);
          v79 = v78;
          v80 = 0x1012C404EF22A49;
          goto LABEL_140;
        }
        break;
      case 3:
        v81 = *v74;
        do
        {
          v82 = __ldaxr(v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v81));
        if (!v83)
        {
          v84 = *v74;
          if (!*v74)
            goto LABEL_141;
          v85 = (void *)v84[1];
          if (v85)
          {
            v84[2] = (unint64_t)v85;
            operator delete(v85);
          }
          v79 = v84;
          v80 = 0x1080C409938AC02;
          goto LABEL_140;
        }
        break;
      case 4:
        v86 = *v74;
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          v89 = *v74;
          if (!*v74)
            goto LABEL_141;
          v110 = (void **)(v89 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v110);
          goto LABEL_124;
        }
        break;
      case 5:
        v90 = *v74;
        do
        {
          v91 = __ldaxr(v90);
          v92 = v91 - 1;
        }
        while (__stlxr(v92, v90));
        if (!v92)
        {
          v89 = *v74;
          if (!*v74)
            goto LABEL_141;
          v110 = (void **)(v89 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v110);
LABEL_124:
          v79 = v89;
          v80 = 0x1020C405E66F15BLL;
          goto LABEL_140;
        }
        break;
      case 8:
        v93 = *v74;
        do
        {
          v94 = __ldaxr(v93);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, v93));
        if (!v95)
        {
          v96 = *v74;
          if (!*v74)
            goto LABEL_141;
          boost::detail::shared_count::~shared_count((unsigned int **)v96 + 2);
          v79 = v96;
          v97 = -235920773;
          goto LABEL_139;
        }
        break;
      case 9:
        v98 = *v74;
        do
        {
          v99 = __ldaxr(v98);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v98));
        if (!v100)
        {
          v101 = *v74;
          if (*v74)
          {
            v102 = (void *)v101[6];
            if (v102)
            {
              v101[7] = (unint64_t)v102;
              operator delete(v102);
            }
            v103 = (void *)v101[3];
            if (v103)
            {
              v101[4] = (unint64_t)v103;
              operator delete(v103);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v101 + 1));
            v79 = v101;
            v97 = 2071181815;
LABEL_139:
            v80 = v97 | 0x1030C4000000000;
LABEL_140:
            MEMORY[0x219A19A08](v79, v80);
          }
LABEL_141:
          *v74 = 0;
        }
        break;
      default:
        break;
    }
    v104 = *(unint64_t **)(a2 + 88);
    *(_QWORD *)(a1 + 93) = *(_QWORD *)(a2 + 93);
    *v74 = v104;
    LODWORD(v104) = *(unsigned __int8 *)(a2 + 100);
    *(_BYTE *)(a1 + 100) = (_BYTE)v104;
    v35 = v104 > 9;
    v105 = (1 << (char)v104) & 0x33C;
    if (!v35 && v105 != 0)
    {
      v107 = *v74;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 + 1, v107));
    }
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 104, *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
  }
  return a1;
}

uint64_t std::vector<turi::option_handling::option_info>::push_back[abi:ne180100](uint64_t *a1, std::string *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  std::string *v16;
  std::string::value_type *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 7;
    if ((unint64_t)(v10 + 1) >> 57)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 6;
    if (v11 >> 6 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80)
      v13 = 0x1FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::option_handling::option_info>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = (std::string *)&v14[128 * v10];
    v18 = &v14[128 * v13];
    turi::option_handling::option_info::option_info(v16, a2);
    v17 = &v16[5].__r_.__value_.__s.__data_[8];
    std::vector<turi::option_handling::option_info>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<turi::option_handling::option_info>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)turi::option_handling::option_info::option_info(*(std::string **)(v4 - 8), a2);
    v9 = v7 + 128;
    a1[1] = v7 + 128;
  }
  a1[1] = v9;
  return result;
}

void sub_2184435D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void turi::option_manager::set_option(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;
  int *v9;
  file_logger *v10;
  file_logger *started;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  void *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *exception;
  std::string __p;
  __int128 *v104;
  _BYTE v105[13];
  _QWORD *v106[3];

  v106[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    goto LABEL_14;
  v8 = *(const std::string::value_type **)a2;
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a2;
  if (*v8 == 95)
  {
    v9 = (int *)global_logger();
    if (v9[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v9))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v10 = (file_logger *)global_logger();
      started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/extensions/option_manager.cpp", "set_option", 146, 1);
      v12 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v12 && *((_BYTE *)v12 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Ignore internal option ", 23);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      v43 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      v44 = pthread_getspecific(*(_QWORD *)(v43 + 592));
      if (v44 && *((_BYTE *)v44 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44 + 2, (uint64_t)": ", 2);
      memset(v106, 0, 13);
      if (v106 != (_QWORD **)a3)
      {
        *(_QWORD **)((char *)v106 + 5) = *(_QWORD **)(a3 + 5);
        v106[0] = *(_QWORD **)a3;
        BYTE4(v106[1]) = *(_BYTE *)(a3 + 12);
        if (BYTE4(v106[1]) <= 9u && ((1 << SBYTE4(v106[1])) & 0x33C) != 0)
        {
          v45 = v106[0];
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 + 1, v45));
        }
      }
      v47 = file_logger::operator<<<turi::flexible_type>(v43, (turi::flexible_type_impl *)v106);
      v48 = pthread_getspecific(*(_QWORD *)(v47 + 592));
      if (v48)
      {
        if (*((_BYTE *)v48 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(v48[2] - 24) + 16));
          v49 = std::locale::use_facet((const std::locale *)v105, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
          std::locale::~locale((std::locale *)v105);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v47);
          if (*(_DWORD *)(v47 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      switch(BYTE4(v106[1]))
      {
        case 2:
          v50 = v106[0];
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = v106[0];
            if (v106[0])
            {
              if (*((char *)v106[0] + 31) < 0)
                operator delete(*((void **)v106[0] + 1));
              v54 = v53;
              v55 = 0x1012C404EF22A49;
              goto LABEL_106;
            }
          }
          break;
        case 3:
          v64 = v106[0];
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
          {
            v67 = v106[0];
            if (v106[0])
            {
              v68 = (void *)v106[0][1];
              if (v68)
              {
                v106[0][2] = v68;
                operator delete(v68);
              }
              v54 = v67;
              v55 = 0x1080C409938AC02;
              goto LABEL_106;
            }
          }
          break;
        case 4:
          v56 = v106[0];
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            v59 = v106[0];
            if (v106[0])
            {
              *(_QWORD *)v105 = v106[0] + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
              goto LABEL_99;
            }
          }
          break;
        case 5:
          v69 = v106[0];
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            v59 = v106[0];
            if (v106[0])
            {
              *(_QWORD *)v105 = v106[0] + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
LABEL_99:
              v54 = v59;
              v55 = 0x1020C405E66F15BLL;
              goto LABEL_106;
            }
          }
          break;
        case 8:
          v72 = v106[0];
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            v75 = v106[0];
            if (v106[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v106[0] + 2);
              v54 = v75;
              v63 = -235920773;
              goto LABEL_105;
            }
          }
          break;
        case 9:
          v60 = v106[0];
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62 && v106[0])
          {
            v54 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v106[0]);
            v63 = 2071181815;
LABEL_105:
            v55 = v63 | 0x1030C4000000000;
LABEL_106:
            MEMORY[0x219A19A08](v54, v55);
          }
          break;
        default:
          break;
      }
      memset(v106, 0, 13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
LABEL_14:
    v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)a2);
    if (a1 + 8 == v13)
    {
      *(_QWORD *)v105 = a2;
      turi::option_manager::set_option(std::string const&,turi::flexible_type const&)::$_0::operator()();
    }
    turi::option_handling::option_info::interpret_value((turi::option_handling::option_info *)(*(_QWORD *)(a1 + 24) + (*(_QWORD *)(v13 + 56) << 7)), (const turi::flexible_type *)a3, (uint64_t *)v105);
    v104 = (__int128 *)a2;
    v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)a2, (uint64_t)&std::piecewise_construct, &v104);
    v15 = v14;
    v16 = v14 + 7;
    if (v105 == (_BYTE *)(v14 + 7))
    {
      switch(v105[12])
      {
        case 2:
          v76 = *(unint64_t **)v105;
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
          {
            v79 = *(_QWORD **)v105;
            if (*(_QWORD *)v105)
            {
              if (*(char *)(*(_QWORD *)v105 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)v105 + 8));
              v80 = v79;
              v81 = 0x1012C404EF22A49;
              goto LABEL_146;
            }
          }
          break;
        case 3:
          v90 = *(unint64_t **)v105;
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
          {
            v93 = *(_QWORD **)v105;
            if (*(_QWORD *)v105)
            {
              v94 = *(void **)(*(_QWORD *)v105 + 8);
              if (v94)
              {
                *(_QWORD *)(*(_QWORD *)v105 + 16) = v94;
                operator delete(v94);
              }
              v80 = v93;
              v81 = 0x1080C409938AC02;
              goto LABEL_146;
            }
          }
          break;
        case 4:
          v82 = *(unint64_t **)v105;
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (!v84)
          {
            v85 = *(_QWORD **)v105;
            if (*(_QWORD *)v105)
            {
              v104 = (__int128 *)(*(_QWORD *)v105 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
              goto LABEL_139;
            }
          }
          break;
        case 5:
          v95 = *(unint64_t **)v105;
          do
          {
            v96 = __ldaxr(v95);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, v95));
          if (!v97)
          {
            v85 = *(_QWORD **)v105;
            if (*(_QWORD *)v105)
            {
              v104 = (__int128 *)(*(_QWORD *)v105 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
LABEL_139:
              v80 = v85;
              v81 = 0x1020C405E66F15BLL;
              goto LABEL_146;
            }
          }
          break;
        case 8:
          v98 = *(unint64_t **)v105;
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (!v100)
          {
            v101 = *(_QWORD **)v105;
            if (*(_QWORD *)v105)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v105 + 16));
              v80 = v101;
              v89 = -235920773;
              goto LABEL_145;
            }
          }
          break;
        case 9:
          v86 = *(unint64_t **)v105;
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (!v88 && *(_QWORD *)v105)
          {
            v80 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v105);
            v89 = 2071181815;
LABEL_145:
            v81 = v89 | 0x1030C4000000000;
LABEL_146:
            MEMORY[0x219A19A08](v80, v81);
          }
          break;
        default:
          return;
      }
    }
    else
    {
      switch(*((_BYTE *)v14 + 68))
      {
        case 2:
          v17 = (unint64_t *)*v16;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = (unint64_t *)*v16;
            if (!*v16)
              goto LABEL_54;
            if (*((char *)v20 + 31) < 0)
              operator delete((void *)v20[1]);
            v21 = v20;
            v22 = 0x1012C404EF22A49;
            goto LABEL_53;
          }
          break;
        case 3:
          v31 = (unint64_t *)*v16;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = (unint64_t *)*v16;
            if (!*v16)
              goto LABEL_54;
            v35 = (void *)v34[1];
            if (v35)
            {
              v34[2] = (unint64_t)v35;
              operator delete(v35);
            }
            v21 = v34;
            v22 = 0x1080C409938AC02;
            goto LABEL_53;
          }
          break;
        case 4:
          v23 = (unint64_t *)*v16;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = (unint64_t *)*v16;
            if (!*v16)
              goto LABEL_54;
            v104 = (__int128 *)(v26 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
            goto LABEL_46;
          }
          break;
        case 5:
          v36 = (unint64_t *)*v16;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v26 = (unint64_t *)*v16;
            if (!*v16)
              goto LABEL_54;
            v104 = (__int128 *)(v26 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
LABEL_46:
            v21 = v26;
            v22 = 0x1020C405E66F15BLL;
            goto LABEL_53;
          }
          break;
        case 8:
          v39 = (unint64_t *)*v16;
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            v42 = (unint64_t *)*v16;
            if (!*v16)
              goto LABEL_54;
            boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
            v21 = v42;
            v30 = -235920773;
            goto LABEL_52;
          }
          break;
        case 9:
          v27 = (unint64_t *)*v16;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            if (*v16)
            {
              v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*v16);
              v30 = 2071181815;
LABEL_52:
              v22 = v30 | 0x1030C4000000000;
LABEL_53:
              MEMORY[0x219A19A08](v21, v22);
            }
LABEL_54:
            *v16 = 0;
          }
          break;
        default:
          break;
      }
      *v16 = *(_QWORD *)v105;
      *(uint64_t *)((char *)v16 + 5) = *(_QWORD *)&v105[5];
      *((_BYTE *)v15 + 68) = v105[12];
    }
  }
}

void sub_218443E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::locale a17, int a18, char a19, uint64_t a20,int a21,char a22)
{
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;

  std::locale::~locale(&a17);
  switch(a22)
  {
    case 2:
      v23 = (unint64_t *)a20;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_39;
      v26 = a20;
      if (!a20)
        goto LABEL_39;
      if (*(char *)(a20 + 31) < 0)
        operator delete(*(void **)(a20 + 8));
      v27 = (_QWORD *)v26;
      v28 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v37 = (unint64_t *)a20;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_39;
      v40 = a20;
      if (!a20)
        goto LABEL_39;
      v41 = *(void **)(a20 + 8);
      if (v41)
      {
        *(_QWORD *)(a20 + 16) = v41;
        operator delete(v41);
      }
      v27 = (_QWORD *)v40;
      v28 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v29 = (unint64_t *)a20;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_39;
      v32 = a20;
      if (!a20)
        goto LABEL_39;
      a16 = a20 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
      goto LABEL_31;
    case 5:
      v42 = (unint64_t *)a20;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_39;
      v32 = a20;
      if (!a20)
        goto LABEL_39;
      a16 = a20 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_31:
      v27 = (_QWORD *)v32;
      v28 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v45 = (unint64_t *)a20;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_39;
      v48 = a20;
      if (!a20)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a20 + 16));
      v27 = (_QWORD *)v48;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v33 = (unint64_t *)a20;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35 || !a20)
        goto LABEL_39;
      v27 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a20);
      v36 = 2071181815;
LABEL_37:
      v28 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v27, v28);
LABEL_39:
      a20 = 0;
      a21 = 0;
      a22 = 0;
      if (a14 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::option_manager::set_options(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      turi::option_manager::set_option(a1, (uint64_t)(v3 + 4), (uint64_t)(v3 + 7));
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
}

uint64_t turi::option_manager::value(uint64_t a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1 + 48, a2);
  if (a1 + 56 == v3)
    turi::option_manager::value(std::string const&)const::$_0::operator()();
  return v3 + 56;
}

uint64_t turi::option_manager::current_option_values(turi::option_manager *this)
{
  return (uint64_t)this + 48;
}

uint64_t *turi::option_manager::get_default_options@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  unint64_t *v40;
  unint64_t v41;
  __int128 *v42;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = this[3];
  for (i = this[4]; v3 != i; v3 += 128)
  {
    v42 = (__int128 *)v3;
    this = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v3, (uint64_t)&std::piecewise_construct, &v42);
    v5 = this;
    v6 = this + 7;
    if ((uint64_t *)(v3 + 48) != this + 7)
    {
      switch(*((_BYTE *)this + 68))
      {
        case 2:
          v7 = (unint64_t *)*v6;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            v10 = (unint64_t *)*v6;
            if (!*v6)
              goto LABEL_45;
            if (*((char *)v10 + 31) < 0)
              operator delete((void *)v10[1]);
            v11 = v10;
            v12 = 0x1012C404EF22A49;
            goto LABEL_44;
          }
          break;
        case 3:
          v13 = (unint64_t *)*v6;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v16 = (unint64_t *)*v6;
            if (!*v6)
              goto LABEL_45;
            v17 = (void *)v16[1];
            if (v17)
            {
              v16[2] = (unint64_t)v17;
              operator delete(v17);
            }
            v11 = v16;
            v12 = 0x1080C409938AC02;
            goto LABEL_44;
          }
          break;
        case 4:
          v18 = (unint64_t *)*v6;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            v21 = (unint64_t *)*v6;
            if (!*v6)
              goto LABEL_45;
            v42 = (__int128 *)(v21 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
            goto LABEL_28;
          }
          break;
        case 5:
          v22 = (unint64_t *)*v6;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            v21 = (unint64_t *)*v6;
            if (!*v6)
              goto LABEL_45;
            v42 = (__int128 *)(v21 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
LABEL_28:
            v11 = v21;
            v12 = 0x1020C405E66F15BLL;
            goto LABEL_44;
          }
          break;
        case 8:
          v25 = (unint64_t *)*v6;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            v28 = (unint64_t *)*v6;
            if (!*v6)
              goto LABEL_45;
            boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
            v11 = v28;
            v29 = -235920773;
            goto LABEL_43;
          }
          break;
        case 9:
          v30 = (unint64_t *)*v6;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v33 = (unint64_t *)*v6;
            if (*v6)
            {
              v34 = (void *)v33[6];
              if (v34)
              {
                v33[7] = (unint64_t)v34;
                operator delete(v34);
              }
              v35 = (void *)v33[3];
              if (v35)
              {
                v33[4] = (unint64_t)v35;
                operator delete(v35);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
              v11 = v33;
              v29 = 2071181815;
LABEL_43:
              v12 = v29 | 0x1030C4000000000;
LABEL_44:
              this = (uint64_t *)MEMORY[0x219A19A08](v11, v12);
            }
LABEL_45:
            *v6 = 0;
          }
          break;
        default:
          break;
      }
      v36 = *(_QWORD *)(v3 + 48);
      *(uint64_t *)((char *)v6 + 5) = *(_QWORD *)(v3 + 53);
      *v6 = v36;
      LODWORD(v36) = *(unsigned __int8 *)(v3 + 60);
      *((_BYTE *)v5 + 68) = v36;
      v37 = v36 > 9;
      v38 = (1 << v36) & 0x33C;
      if (!v37 && v38 != 0)
      {
        v40 = (unint64_t *)*v6;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 + 1, v40));
      }
    }
  }
  return this;
}

void sub_218444404(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL turi::option_manager::is_option(uint64_t a1, const void **a2)
{
  return std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2) != 0;
}

void turi::option_manager::save(turi::option_manager *this, turi::oarchive *a2)
{
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned long>,std::__tree_node<std::__value_type<std::string,unsigned long>,void *> *,long>>>((uint64_t)a2, *(const void ***)this, (const void **)this + 1, *((_QWORD *)this + 2));
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::option_handling::option_info,false>::exec((uint64_t)a2, (uint64_t *)this + 3);
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>>((uint64_t)a2, *((_QWORD **)this + 6), (_QWORD *)this + 7, *((_QWORD *)this + 8));
}

turi::iarchive *turi::option_manager::load(char **this, turi::iarchive *a2)
{
  turi::option_manager *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = (turi::option_manager *)this;
  v4 = this + 1;
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this, this[1]);
  *(_QWORD *)v3 = v4;
  *((_QWORD *)v3 + 2) = 0;
  *v4 = 0;
  turi::deserialize_iterator<turi::iarchive,std::pair<std::string,unsigned long>,std::insert_iterator<std::map<std::string,unsigned long>>>((uint64_t)a2, (uint64_t)v3, (uint64_t)v4);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::option_handling::option_info,false>::exec(a2, (uint64_t *)v3 + 3);
  v5 = (_QWORD *)*((_QWORD *)v3 + 7);
  v3 = (turi::option_manager *)((char *)v3 + 56);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v3 - 8, v5);
  *((_QWORD *)v3 - 1) = v3;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  return turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flexible_type>,std::insert_iterator<std::map<std::string,turi::flexible_type>>>(a2, (uint64_t)v3 - 8, (uint64_t)v3);
}

void std::vector<turi::option_handling::option_info>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  if (v4 != (__int128 *)*a1)
  {
    do
    {
      v6 -= 128;
      v4 -= 8;
      std::allocator<turi::option_handling::option_info>::construct[abi:ne180100]<turi::option_handling::option_info,turi::option_handling::option_info>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::allocator<turi::option_handling::option_info>::construct[abi:ne180100]<turi::option_handling::option_info,turi::option_handling::option_info>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  v5 = *((_QWORD *)a3 + 6);
  *(_QWORD *)(a2 + 53) = *(_QWORD *)((char *)a3 + 53);
  *(_QWORD *)(a2 + 48) = v5;
  *(_BYTE *)(a2 + 60) = *((_BYTE *)a3 + 60);
  *((_BYTE *)a3 + 60) = 0;
  *(_DWORD *)(a2 + 64) = *((_DWORD *)a3 + 16);
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 84) = 0;
  v6 = *((_QWORD *)a3 + 9);
  *(_QWORD *)(a2 + 77) = *(_QWORD *)((char *)a3 + 77);
  *(_QWORD *)(a2 + 72) = v6;
  *(_BYTE *)(a2 + 84) = *((_BYTE *)a3 + 84);
  *((_BYTE *)a3 + 84) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 100) = 0;
  v7 = *((_QWORD *)a3 + 11);
  *(_QWORD *)(a2 + 93) = *(_QWORD *)((char *)a3 + 93);
  *(_QWORD *)(a2 + 88) = v7;
  *(_BYTE *)(a2 + 100) = *((_BYTE *)a3 + 100);
  *((_BYTE *)a3 + 100) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  result = *(__n128 *)((char *)a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(_QWORD *)(a2 + 120) = *((_QWORD *)a3 + 15);
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  return result;
}

uint64_t std::__split_buffer<turi::option_handling::option_info>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 128;
    turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(i - 128));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned long>,std::__tree_node<std::__value_type<std::string,unsigned long>,void *> *,long>>>(uint64_t a1, const void **a2, const void **a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  BOOL v13;
  size_t v14;
  uint64_t *v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v9)
    {
      v14 = 2 * v9 + 16;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        result = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::pair<std::string const,unsigned long>,false,void>::exec(a1, a2 + 4);
      v11 = (const void **)a2[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void **)a2[2];
          v13 = *v12 == a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  return result;
}

char *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<std::string const,unsigned long>,false,void>::exec(uint64_t a1, const void **a2)
{
  _QWORD *v4;
  char *result;
  unint64_t v6;
  size_t v7;
  char **v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, a2);
  v4 = a2 + 3;
  if (*(_QWORD *)a1)
    return (char *)std::ostream::write();
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + 8 > v6)
  {
    v7 = 2 * v6 + 16;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(char ***)(a1 + 16);
    if (v8)
    {
      result = *v8;
      v9 = v8[1] - *v8;
      v10 = v7 >= v9;
      v11 = v7 - v9;
      if (v11 != 0 && v10)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v11);
        result = **(char ***)(a1 + 16);
      }
      else if (!v10)
      {
        v8[1] = &result[v7];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v7, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = *(char **)(a1 + 24);
  }
  *(_QWORD *)&result[*(_QWORD *)(a1 + 32)] = *v4;
  *(_QWORD *)(a1 + 32) += 8;
  return result;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::option_handling::option_info,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t *v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;

  v4 = (a2[1] - *a2) >> 7;
  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v6)
    {
      v10 = 2 * v6 + 16;
      *(_QWORD *)(a1 + 40) = v10;
      v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        result = *v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = turi::option_handling::option_info::save((turi::option_handling::option_info *)(v7 + v8), (turi::oarchive *)a1);
      ++v9;
      v7 = *a2;
      v8 += 128;
    }
    while (v9 < (a2[1] - *a2) >> 7);
  }
  return result;
}

void turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  size_t v14;
  char **v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v8)
    {
      v14 = 2 * v8 + 16;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = *(char ***)(a1 + 16);
      if (v15)
      {
        v9 = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          v9 = **(char ***)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = &v9[v14];
        }
      }
      else
      {
        v9 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v9;
    }
    else
    {
      v9 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v9[*(_QWORD *)(a1 + 32)] = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, (const void **)a2 + 4);
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2 + 7);
      v11 = (_QWORD *)a2[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a2[2];
          v13 = *v12 == (_QWORD)a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
}

void turi::deserialize_iterator<turi::iarchive,std::pair<std::string,unsigned long>,std::insert_iterator<std::map<std::string,unsigned long>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string __p;
  uint64_t v9;
  void *v10[2];
  __int128 v11;
  unint64_t v12;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v12 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v4 + v5);
    v12 = v6;
    *(_QWORD *)(a1 + 24) = v5 + 8;
    if (v6)
    {
      v7 = 0;
      do
      {
        *(_OWORD *)v10 = 0u;
        v11 = 0u;
        turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<std::string,unsigned long>,false,void>::exec(a1, (std::string *)v10);
        if (SBYTE7(v11) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
        }
        else
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
          __p.__r_.__value_.__r.__words[2] = v11;
        }
        v9 = *((_QWORD *)&v11 + 1);
        std::insert_iterator<std::map<std::string,unsigned long>>::operator=[abi:ne180100]((uint64_t)v13, (const void **)&__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SBYTE7(v11) < 0)
          operator delete(v10[0]);
        ++v7;
      }
      while (v7 < v12);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_218444C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<std::string,unsigned long>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MPSRNNMatrixId> const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void *turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<std::string,unsigned long>,false,void>::exec(uint64_t a1, std::string *a2)
{
  void *result;
  uint64_t v5;

  result = turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec(a1, a2);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return (void *)std::istream::read();
  a2[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(v5 + *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 24) += 8;
  return result;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::option_handling::option_info,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t j;
  unint64_t v10;

  v10 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v10 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *a2;
  for (i = a2[1];
        i != v7;
  a2[1] = v7;
  std::vector<turi::option_handling::option_info>::resize(a2, v10);
  if (v10)
  {
    v8 = 0;
    for (j = 0; j < v10; ++j)
    {
      turi::option_handling::option_info::load((std::string *)(*a2 + v8), a1);
      v8 += 128;
    }
  }
}

void std::vector<turi::option_handling::option_info>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 7;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + (a2 << 7);
      while (v3 != v5)
        turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(v3 - 128));
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<turi::option_handling::option_info>::__append(a1, a2 - v4);
  }
}

void std::vector<turi::option_handling::option_info>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 7);
      v7 += a2 << 7;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 7);
    if (v9 >> 57)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 7;
    v11 = v5 - *a1;
    if (v11 >> 6 > v9)
      v9 = v11 >> 6;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80)
      v12 = 0x1FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::option_handling::option_info>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[128 * v10];
    v17 = &v13[128 * v12];
    bzero(v15, a2 << 7);
    v16 = &v15[128 * a2];
    std::vector<turi::option_handling::option_info>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<turi::option_handling::option_info>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_218444F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::option_handling::option_info>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

turi::iarchive *turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flexible_type>,std::insert_iterator<std::map<std::string,turi::flexible_type>>>(turi::iarchive *result, uint64_t a2, uint64_t a3)
{
  turi::iarchive *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  unint64_t v7;
  _QWORD v8[2];
  std::string v9;
  _BYTE v10[37];
  uint64_t v11;

  v3 = result;
  v11 = *MEMORY[0x24BDAC8D0];
  v8[0] = a2;
  v8[1] = a3;
  v4 = *((_QWORD *)result + 2);
  if (!v4)
    return (turi::iarchive *)std::istream::read();
  v5 = *((_QWORD *)result + 3);
  v7 = *(_QWORD *)(v4 + v5);
  *((_QWORD *)result + 3) = v5 + 8;
  if (v7)
  {
    for (i = 0; i < v7; ++i)
    {
      memset(v10, 0, sizeof(v10));
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)v3, (std::string *)v10);
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(v3, (_QWORD **)&v10[24]);
      std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string,turi::flexible_type,0>(&v9, (std::string *)v10);
      std::insert_iterator<std::map<std::string,turi::flexible_type>>::operator=[abi:ne180100]((uint64_t)v8, (const void **)&v9.__r_.__value_.__l.__data_);
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v9);
      result = (turi::iarchive *)std::pair<std::string,turi::flexible_type>::~pair((uint64_t)v10);
    }
  }
  return result;
}

void sub_2184450A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<std::string,turi::flexible_type>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (__int128 *)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

std::string *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string,turi::flexible_type,0>(std::string *this, std::string *a2)
{
  __int128 v4;
  std::string *v5;
  std::string::size_type v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;

  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  v5 = this + 1;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  if (a2 != this)
  {
    v6 = a2[1].__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(std::string::size_type *)((char *)a2[1].__r_.__value_.__r.__words + 5);
    v5->__r_.__value_.__r.__words[0] = v6;
    v7 = a2[1].__r_.__value_.__s.__data_[12];
    this[1].__r_.__value_.__s.__data_[12] = v7;
    if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
    {
      v8 = (unint64_t *)v5->__r_.__value_.__r.__words[0];
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  return this;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t OUTLINED_FUNCTION_14_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  return file_logger::operator<<<std::string>(v8, (uint64_t)va);
}

uint64_t _GLOBAL__sub_I_option_manager_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::flex_dict_view::flex_dict_view(uint64_t this, const turi::flexible_type *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  if (*((_BYTE *)a2 + 12) != 5)
    turi::flex_dict_view::flex_dict_view(turi::flexible_type const&)::$_0::operator()();
  *(_QWORD *)this = *(_QWORD *)a2 + 8;
  return this;
}

void sub_218445320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 32);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

unsigned __int8 *turi::flex_dict_view::operator[](unsigned __int8 ***a1, turi::flexible_type_impl *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  double v47;
  size_t v48;
  unsigned int v49;
  double *v50;
  double *v51;
  unint64_t v52;
  double *v53;
  unsigned int v54;
  double v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  _QWORD *v65;
  uint64_t v67;
  __int128 v68;
  std::string *v69;
  std::string::size_type size;
  _QWORD v71[2];
  uint64_t v72[33];
  std::string v73;
  uint64_t *v74;
  uint64_t *v75;

  v3 = **a1;
  v4 = (*a1)[1];
  if (v3 == v4)
  {
LABEL_111:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Cannot find key ", 16);
    switch(*((_BYTE *)a2 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v74);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_125;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v74);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_125:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v74);
        goto LABEL_131;
      case 2:
        v67 = *(_QWORD *)a2;
        if (*(char *)(*(_QWORD *)a2 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(v67 + 8), *(_QWORD *)(v67 + 16));
        }
        else
        {
          v68 = *(_OWORD *)(v67 + 8);
          v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(v67 + 24);
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v68;
        }
        goto LABEL_131;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v74, (_QWORD *)(*(_QWORD *)a2 + 8));
        goto LABEL_131;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v74, (uint64_t *)(*(_QWORD *)a2 + 8));
        goto LABEL_131;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v74, (_QWORD *)(*(_QWORD *)a2 + 8));
        goto LABEL_131;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(a2, &v73);
        goto LABEL_131;
      case 7:
        memset(&v73, 0, sizeof(v73));
        goto LABEL_131;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_131;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v74, (_QWORD *)(*(_QWORD *)a2 + 8));
LABEL_131:
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = &v73;
        else
          v69 = (std::string *)v73.__r_.__value_.__r.__words[0];
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
        else
          size = v73.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v69, size);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" in flex_dict.", 14);
        v74 = v71;
        turi::flex_dict_view::operator[](turi::flexible_type const&)const::$_0::operator()();
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
LABEL_140:
    turi::apply_binary_op_ff();
  }
  while (2)
  {
    switch(*((_BYTE *)a2 + 12))
    {
      case 0:
        switch(v3[12])
        {
          case 0u:
            if (*(_QWORD *)v3 == *(_QWORD *)a2)
              return v3 + 16;
            goto LABEL_110;
          case 1u:
            v55 = *(double *)v3;
            v56 = *(_QWORD *)a2;
            goto LABEL_88;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            if (*(_QWORD *)a2 == (uint64_t)(*(_QWORD *)v3 << 8) >> 8 && !*((_DWORD *)v3 + 2))
              return v3 + 16;
            goto LABEL_110;
          default:
            turi::apply_binary_op_ff();
        }
      case 1:
        switch(v3[12])
        {
          case 0u:
            v55 = *(double *)a2;
            v56 = *(_QWORD *)v3;
LABEL_88:
            v60 = (double)v56;
            goto LABEL_90;
          case 1u:
            v55 = *(double *)v3;
            v60 = *(double *)a2;
LABEL_90:
            if (v55 == v60)
              return v3 + 16;
            goto LABEL_110;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            v59 = vabdd_f64((double)*((int *)v3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v3 << 8) >> 8), *(double *)a2);
            goto LABEL_93;
          default:
            turi::apply_binary_op_ff();
        }
      case 2:
        v45 = v3[12];
        if (v45 - 3 < 7 || v45 < 2)
          goto LABEL_110;
        if (v45 != 2)
          turi::apply_binary_op_ff();
        v47 = *(double *)v3;
        v48 = *(char *)(*(_QWORD *)v3 + 31) < 0
            ? *(_QWORD *)(*(_QWORD *)&v47 + 16)
            : *(unsigned __int8 *)(*(_QWORD *)v3 + 31);
        v61 = *(_QWORD *)a2;
        v62 = *(char *)(*(_QWORD *)a2 + 31) < 0 ? *(_QWORD *)(v61 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
        if (v48 != v62)
          goto LABEL_110;
        v63 = (unsigned __int8 *)(*(_QWORD *)&v47 + 8);
        if ((*(_BYTE *)(*(_QWORD *)v3 + 31) & 0x80) != 0)
          v63 = *(unsigned __int8 **)v63;
        v64 = (unsigned __int8 *)(v61 + 8);
        if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        {
          v64 = *(unsigned __int8 **)v64;
          if ((*(_BYTE *)(*(_QWORD *)v3 + 31) & 0x80) == 0)
          {
LABEL_104:
            if (!v48)
              return v3 + 16;
            while (*v63 == *v64)
            {
              ++v63;
              ++v64;
              if (!--v48)
                return v3 + 16;
            }
            goto LABEL_110;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)v3 + 31) & 0x80) == 0)
        {
          goto LABEL_104;
        }
        if (memcmp(v63, v64, v48))
        {
LABEL_110:
          v3 += 32;
          if (v3 == v4)
            goto LABEL_111;
          continue;
        }
        return v3 + 16;
      case 3:
        v49 = v3[12];
        if (v49 > 9)
          turi::apply_binary_op_ff();
        if (v49 != 3)
          goto LABEL_110;
        v50 = *(double **)(*(_QWORD *)v3 + 8);
        v51 = *(double **)(*(_QWORD *)v3 + 16);
        v52 = v51 - v50;
        v53 = *(double **)(*(_QWORD *)a2 + 8);
        if (v52 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v53) >> 3)
          goto LABEL_110;
        if (v51 == v50)
          return v3 + 16;
        if (v52 <= 1)
          v52 = 1;
        while (*v50 == *v53)
        {
          ++v53;
          ++v50;
          if (!--v52)
            return v3 + 16;
        }
        goto LABEL_110;
      case 4:
        v5 = v3[12];
        if (v5 > 9)
          turi::apply_binary_op_ff();
        if (v5 == 4
          && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v73, (uint64_t *)(*(_QWORD *)v3 + 8), (_QWORD *)(*(_QWORD *)a2 + 8)) & 1) != 0)
        {
          return v3 + 16;
        }
        goto LABEL_110;
      case 5:
        v57 = v3[12];
        if (v57 > 9)
          turi::apply_binary_op_ff();
        if (v57 == 5
          && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v73, (uint64_t **)(*(_QWORD *)v3 + 8), (uint64_t **)(*(_QWORD *)a2 + 8)))
        {
          return v3 + 16;
        }
        goto LABEL_110;
      case 6:
        switch(v3[12])
        {
          case 0u:
            if (*(_QWORD *)v3 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2))
              return v3 + 16;
            goto LABEL_110;
          case 1u:
            v59 = vabdd_f64(*(double *)v3, (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8));
LABEL_93:
            if (v59 < 0.0000005)
              return v3 + 16;
            goto LABEL_110;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            if (((*(_QWORD *)a2 ^ *(_QWORD *)v3) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v3 + 2) == *((_DWORD *)a2 + 2))
            {
              return v3 + 16;
            }
            goto LABEL_110;
          default:
            goto LABEL_140;
        }
      case 7:
        v54 = v3[12];
        if (v54 < 7 || v54 - 8 < 2)
          goto LABEL_110;
        if (v54 != 7)
          turi::apply_binary_op_ff();
        return v3 + 16;
      case 8:
        v58 = v3[12];
        if (v58 < 8)
          goto LABEL_110;
        if (v58 == 8)
        {
          if (turi::image_type::operator==(*(_QWORD *)v3 + 8, *(_QWORD *)a2 + 8))
            return v3 + 16;
        }
        else if (v58 != 9)
        {
          turi::apply_binary_op_ff();
        }
        goto LABEL_110;
      case 9:
        v6 = v3[12];
        if (v6 < 9)
          goto LABEL_110;
        if (v6 != 9)
          turi::apply_binary_op_ff();
        v7 = *(_QWORD *)a2;
        v8 = *(_QWORD **)v3;
        if (*(_QWORD *)a2 == *(_QWORD *)v3)
          return v3 + 16;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v8 + 1), v7 + 8))
          goto LABEL_110;
        v10 = (char *)v8[3];
        v9 = (char *)v8[4];
        v11 = v9 - v10;
        if (v9 == v10)
          return v3 + 16;
        if (!v8[1])
          return v3 + 16;
        v12 = 1;
        do
        {
          v13 = *(_QWORD *)v10;
          v10 += 8;
          v12 *= v13;
        }
        while (v10 != v9);
        if (!v12)
          return v3 + 16;
        v71[0] = 0;
        std::vector<unsigned long>::vector(&v74, v11 >> 3, v71);
        v14 = v74;
        v15 = v75;
        v16 = **(_QWORD **)(v7 + 8);
        v17 = (char *)v75 - (char *)v74;
        v18 = v75 - v74;
        v19 = v18 - 1;
        if (v18 <= 1)
          v20 = 1;
        else
          v20 = v75 - v74;
        do
        {
          if (v15 == v14)
          {
            v28 = 0;
            v29 = *(double *)(*(_QWORD *)v8[1] + 8 * v8[9]);
          }
          else
          {
            v21 = 0;
            v22 = (uint64_t *)v8[6];
            v23 = v14;
            v24 = v20;
            do
            {
              v26 = *v23++;
              v25 = v26;
              v27 = *v22++;
              v21 += v27 * v25;
              --v24;
            }
            while (v24);
            v28 = 0;
            v29 = *(double *)(*(_QWORD *)v8[1] + 8 * (v8[9] + v21));
            v30 = *(uint64_t **)(v7 + 48);
            v31 = v14;
            v32 = v20;
            do
            {
              v34 = *v31++;
              v33 = v34;
              v35 = *v30++;
              v28 += v35 * v33;
              --v32;
            }
            while (v32);
          }
          v36 = *(double *)(v16 + 8 * (*(_QWORD *)(v7 + 72) + v28));
          if (v29 != v36)
            break;
          v37 = v18;
          v38 = v18 - 1;
          if (v17 < 1)
            goto LABEL_34;
          v39 = v8[3];
          v40 = v14[v19] + 1;
          v14[v19] = v40;
          v41 = (v17 & 0xFFFFFFFFFFFFFFF8) - 16;
          v42 = v18 - 1;
          if (v40 < *(_QWORD *)(v39 + 8 * v19))
          {
            v37 = 1;
            v38 = v18 - 1;
LABEL_34:
            if ((v38 & 0x8000000000000000) != 0)
              break;
            continue;
          }
          do
          {
            *(uint64_t *)((char *)v14 + v41 + 8) = 0;
            if (v42 <= 0)
            {
              v75 = v14;
              operator delete(v14);
              return v3 + 16;
            }
            --v42;
            v43 = *(uint64_t *)((char *)v14 + v41) + 1;
            *(uint64_t *)((char *)v14 + v41) = v43;
            v44 = *(_QWORD *)(v39 + v41);
            v41 -= 8;
          }
          while (v43 >= v44);
          v37 = 1;
          if (v42 < 0)
            break;
        }
        while (v37);
        if (v14)
        {
          v75 = v14;
          operator delete(v14);
        }
        if (v29 == v36)
          return v3 + 16;
        goto LABEL_110;
      default:
        turi::apply_binary_op_ff();
    }
  }
}

void sub_218445B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,char a52)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a52);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::flex_dict_view::has_key(unsigned __int8 ***this, const turi::flexible_type *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  double v5;
  uint64_t v6;
  unsigned int v7;
  double v9;
  size_t v10;
  unsigned int v11;
  double *v12;
  double *v13;
  unint64_t v14;
  double *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  double v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  char v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;

  v2 = **this;
  v3 = (*this)[1];
  if (v2 == v3)
    return 0;
  while (2)
  {
    switch(*((_BYTE *)a2 + 12))
    {
      case 0:
        switch(v2[12])
        {
          case 0u:
            if (*(_QWORD *)v2 == *(_QWORD *)a2)
              return 1;
            goto LABEL_110;
          case 1u:
            v5 = *(double *)v2;
            v6 = *(_QWORD *)a2;
            goto LABEL_79;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            if (*(_QWORD *)a2 == (uint64_t)(*(_QWORD *)v2 << 8) >> 8 && !*((_DWORD *)v2 + 2))
              return 1;
            goto LABEL_110;
          default:
            turi::apply_binary_op_ff();
        }
      case 1:
        switch(v2[12])
        {
          case 0u:
            v5 = *(double *)a2;
            v6 = *(_QWORD *)v2;
LABEL_79:
            v59 = (double)v6;
            goto LABEL_84;
          case 1u:
            v5 = *(double *)v2;
            v59 = *(double *)a2;
LABEL_84:
            if (v5 == v59)
              return 1;
            goto LABEL_110;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            v60 = vabdd_f64((double)*((int *)v2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v2 << 8) >> 8), *(double *)a2);
            goto LABEL_88;
          default:
            turi::apply_binary_op_ff();
        }
      case 2:
        v7 = v2[12];
        if (v7 - 3 < 7 || v7 < 2)
          goto LABEL_110;
        if (v7 != 2)
          turi::apply_binary_op_ff();
        v9 = *(double *)v2;
        v10 = *(char *)(*(_QWORD *)v2 + 31) < 0
            ? *(_QWORD *)(*(_QWORD *)&v9 + 16)
            : *(unsigned __int8 *)(*(_QWORD *)v2 + 31);
        v61 = *(double *)a2;
        v62 = *(char *)(*(_QWORD *)a2 + 31) < 0
            ? *(_QWORD *)(*(_QWORD *)&v61 + 16)
            : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
        if (v10 != v62)
          goto LABEL_110;
        v63 = (unsigned __int8 *)(*(_QWORD *)&v9 + 8);
        if ((*(_BYTE *)(*(_QWORD *)v2 + 31) & 0x80) != 0)
          v63 = *(unsigned __int8 **)v63;
        v64 = (unsigned __int8 *)(*(_QWORD *)&v61 + 8);
        if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
          v64 = *(unsigned __int8 **)v64;
        if ((*(_BYTE *)(*(_QWORD *)v2 + 31) & 0x80) != 0)
        {
          if (!memcmp(v63, v64, v10))
            return 1;
        }
        else
        {
          if (!v10)
            return 1;
          while (*v63 == *v64)
          {
            ++v63;
            ++v64;
            if (!--v10)
              return 1;
          }
        }
        goto LABEL_110;
      case 3:
        v11 = v2[12];
        if (v11 > 9)
          turi::apply_binary_op_ff();
        if (v11 != 3)
          goto LABEL_110;
        v12 = *(double **)(*(_QWORD *)v2 + 8);
        v13 = *(double **)(*(_QWORD *)v2 + 16);
        v14 = v13 - v12;
        v15 = *(double **)(*(_QWORD *)a2 + 8);
        if (v14 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v15) >> 3)
          goto LABEL_110;
        if (v13 == v12)
          return 1;
        if (v14 <= 1)
          v14 = 1;
        while (*v12 == *v15)
        {
          ++v15;
          ++v12;
          if (!--v14)
            return 1;
        }
        goto LABEL_110;
      case 4:
        v16 = v2[12];
        if (v16 > 9)
          turi::apply_binary_op_ff();
        if (v16 == 4
          && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v66, (uint64_t *)(*(_QWORD *)v2 + 8), (_QWORD *)(*(_QWORD *)a2 + 8)) & 1) != 0)
        {
          return 1;
        }
        goto LABEL_110;
      case 5:
        v17 = v2[12];
        if (v17 > 9)
          turi::apply_binary_op_ff();
        if (v17 == 5
          && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v66, (uint64_t **)(*(_QWORD *)v2 + 8), (uint64_t **)(*(_QWORD *)a2 + 8)))
        {
          return 1;
        }
        goto LABEL_110;
      case 6:
        switch(v2[12])
        {
          case 0u:
            if (*(_QWORD *)v2 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2))
              return 1;
            goto LABEL_110;
          case 1u:
            v60 = vabdd_f64(*(double *)v2, (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8));
LABEL_88:
            if (v60 < 0.0000005)
              return 1;
            goto LABEL_110;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            if (((*(_QWORD *)a2 ^ *(_QWORD *)v2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v2 + 2) == *((_DWORD *)a2 + 2))
            {
              return 1;
            }
            goto LABEL_110;
          default:
            turi::apply_binary_op_ff();
        }
      case 7:
        v18 = v2[12];
        if (v18 < 7 || v18 - 8 < 2)
          goto LABEL_110;
        if (v18 != 7)
          turi::apply_binary_op_ff();
        return 1;
      case 8:
        v19 = v2[12];
        if (v19 < 8)
          goto LABEL_110;
        if (v19 != 8)
        {
          if (v19 != 9)
            turi::apply_binary_op_ff();
          goto LABEL_110;
        }
        if (!turi::image_type::operator==(*(_QWORD *)v2 + 8, *(_QWORD *)a2 + 8))
        {
LABEL_110:
          v2 += 32;
          if (v2 == v3)
            return 0;
          continue;
        }
        return 1;
      case 9:
        v20 = v2[12];
        if (v20 < 9)
          goto LABEL_110;
        if (v20 != 9)
          turi::apply_binary_op_ff();
        v21 = *(double *)a2;
        v22 = *(_QWORD **)v2;
        if (*(_QWORD *)a2 == *(_QWORD *)v2)
          return 1;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v22 + 1), *(_QWORD *)&v21 + 8))
          goto LABEL_110;
        v24 = (char *)v22[3];
        v23 = (char *)v22[4];
        v25 = v23 - v24;
        if (v23 == v24)
          return 1;
        if (!v22[1])
          return 1;
        v26 = 1;
        do
        {
          v27 = *(_QWORD *)v24;
          v24 += 8;
          v26 *= v27;
        }
        while (v24 != v23);
        if (!v26)
          return 1;
        v67 = 0;
        std::vector<unsigned long>::vector(&v68, v25 >> 3, &v67);
        v28 = v68;
        v29 = v69;
        v30 = **(_QWORD **)(*(_QWORD *)&v21 + 8);
        v31 = (char *)v69 - (char *)v68;
        v32 = v69 - v68;
        v33 = v32 - 1;
        if (v32 <= 1)
          v34 = 1;
        else
          v34 = v69 - v68;
        do
        {
          if (v29 == v28)
          {
            v42 = 0;
            v43 = *(double *)(*(_QWORD *)v22[1] + 8 * v22[9]);
          }
          else
          {
            v35 = 0;
            v36 = (uint64_t *)v22[6];
            v37 = v28;
            v38 = v34;
            do
            {
              v40 = *v37++;
              v39 = v40;
              v41 = *v36++;
              v35 += v41 * v39;
              --v38;
            }
            while (v38);
            v42 = 0;
            v43 = *(double *)(*(_QWORD *)v22[1] + 8 * (v22[9] + v35));
            v44 = *(uint64_t **)(*(_QWORD *)&v21 + 48);
            v45 = v28;
            v46 = v34;
            do
            {
              v48 = *v45++;
              v47 = v48;
              v49 = *v44++;
              v42 += v49 * v47;
              --v46;
            }
            while (v46);
          }
          v50 = *(double *)(v30 + 8 * (*(_QWORD *)(*(_QWORD *)&v21 + 72) + v42));
          if (v43 != v50)
            break;
          v51 = v32;
          v52 = v32 - 1;
          if (v31 < 1)
            goto LABEL_68;
          v53 = v22[3];
          v54 = v28[v33] + 1;
          v28[v33] = v54;
          v55 = (v31 & 0xFFFFFFFFFFFFFFF8) - 16;
          v56 = v32 - 1;
          if (v54 < *(_QWORD *)(v53 + 8 * v33))
          {
            v51 = 1;
            v52 = v32 - 1;
LABEL_68:
            if ((v52 & 0x8000000000000000) != 0)
              break;
            continue;
          }
          do
          {
            *(uint64_t *)((char *)v28 + v55 + 8) = 0;
            if (v56 <= 0)
            {
              v69 = v28;
              operator delete(v28);
              return 1;
            }
            --v56;
            v57 = *(uint64_t *)((char *)v28 + v55) + 1;
            *(uint64_t *)((char *)v28 + v55) = v57;
            v58 = *(_QWORD *)(v53 + v55);
            v55 -= 8;
          }
          while (v57 >= v58);
          v51 = 1;
          if (v56 < 0)
            break;
        }
        while (v51);
        if (v28)
        {
          v69 = v28;
          operator delete(v28);
        }
        if (v43 == v50)
          return 1;
        goto LABEL_110;
      default:
        turi::apply_binary_op_ff();
    }
  }
}

uint64_t *turi::flex_dict_view::keys(turi::flex_dict_view *this)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  unint64_t *v11;
  unint64_t v12;

  v1 = (uint64_t *)((char *)this + 8);
  v2 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 5;
  if (v2 != (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4)
  {
    std::vector<turi::flexible_type>::reserve((uint64_t *)this + 1, v2);
    v4 = **(uint64_t ***)this;
    v5 = *(uint64_t **)(*(_QWORD *)this + 8);
    if (v4 != v5)
    {
      v6 = *((_QWORD *)this + 2);
      do
      {
        if (v6 >= *((_QWORD *)this + 3))
        {
          v6 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(v1, (char *)v4);
        }
        else
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
          *(_BYTE *)(v6 + 12) = 0;
          if ((uint64_t *)v6 != v4)
          {
            v7 = *v4;
            *(_QWORD *)(v6 + 5) = *(uint64_t *)((char *)v4 + 5);
            *(_QWORD *)v6 = v7;
            LODWORD(v7) = *((unsigned __int8 *)v4 + 12);
            *(_BYTE *)(v6 + 12) = v7;
            v8 = v7 > 9;
            v9 = (1 << v7) & 0x33C;
            if (!v8 && v9 != 0)
            {
              v11 = *(unint64_t **)v6;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 + 1, v11));
            }
          }
          v6 += 16;
        }
        *((_QWORD *)this + 2) = v6;
        v4 += 4;
      }
      while (v4 != v5);
    }
  }
  return v1;
}

uint64_t *turi::flex_dict_view::values(uint64_t **this)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;

  v1 = (uint64_t *)(this + 4);
  v2 = ((*this)[1] - **this) >> 5;
  if (v2 != ((char *)this[5] - (char *)this[4]) >> 4)
  {
    std::vector<turi::flexible_type>::reserve((uint64_t *)this + 4, v2);
    v4 = **this;
    v5 = (*this)[1];
    if (v4 != v5)
    {
      v6 = (unint64_t)this[5];
      do
      {
        v7 = (char *)(v4 + 16);
        if (v6 >= (unint64_t)this[6])
        {
          v6 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(v1, v7);
        }
        else
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
          *(_BYTE *)(v6 + 12) = 0;
          if ((char *)v6 != v7)
          {
            v8 = *(_QWORD *)v7;
            *(_QWORD *)(v6 + 5) = *(_QWORD *)(v4 + 21);
            *(_QWORD *)v6 = v8;
            LODWORD(v8) = *(unsigned __int8 *)(v4 + 28);
            *(_BYTE *)(v6 + 12) = v8;
            v9 = v8 > 9;
            v10 = (1 << v8) & 0x33C;
            if (!v9 && v10 != 0)
            {
              v12 = *(unint64_t **)v6;
              do
                v13 = __ldaxr(v12);
              while (__stlxr(v13 + 1, v12));
            }
          }
          v6 += 16;
        }
        this[5] = (uint64_t *)v6;
        v4 += 32;
      }
      while (v4 != v5);
    }
  }
  return v1;
}

uint64_t _GLOBAL__sub_I_flex_dict_view_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_218446534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_20()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_get_toolkit_function_from_closure_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

__n128 turi::image_util::load_image@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  _OWORD v24[4];
  __int128 v25;

  *(uint64_t *)((char *)a3 + 5) = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 12) = 8;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 3;
  *a3 = v6;
  *(_QWORD *)v6 = 1;
  turi::read_image(a1, a2, (uint64_t)v24);
  do
  {
    v7 = __ldaxr((unint64_t *)v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, (unint64_t *)v6));
  if (!v8)
  {
    v9 = *a3;
    if (*a3)
    {
      boost::detail::shared_count::~shared_count((unsigned int **)(v9 + 16));
      MEMORY[0x219A19A08](v9, 0x1030C40F1F0227BLL);
    }
    *a3 = 0;
  }
  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 8;
  v10 = operator new();
  *(_QWORD *)v10 = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 3;
  *a3 = v10;
  *(_QWORD *)v10 = 1;
  if (*(_QWORD *)v10 != 1)
  {
    v11 = operator new();
    v12 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)v11 = *(_QWORD *)v10;
    *(_QWORD *)(v11 + 8) = v12;
    v13 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v11 + 16) = v13;
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *(_OWORD *)(v11 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(v10 + 40);
    *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 56);
    *a3 = v11;
    *(_QWORD *)v11 = 1;
    do
    {
      v16 = __ldaxr((unint64_t *)v10);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unint64_t *)v10));
    if (!v17)
    {
      boost::detail::shared_count::~shared_count((unsigned int **)(v10 + 16));
      MEMORY[0x219A19A08](v10, 0x1030C40F1F0227BLL);
    }
  }
  v18 = *a3;
  v19 = v24[0];
  v24[0] = 0uLL;
  v20 = *(_OWORD *)(v18 + 8);
  *(_OWORD *)(v18 + 8) = v19;
  v25 = v20;
  boost::detail::shared_count::~shared_count((unsigned int **)&v25 + 1);
  v21 = v24[1];
  v22 = v24[2];
  *(_OWORD *)(v18 + 56) = v24[3];
  *(_OWORD *)(v18 + 40) = v22;
  *(_OWORD *)(v18 + 24) = v21;
  boost::detail::shared_count::~shared_count((unsigned int **)v24 + 1);
  return result;
}

void sub_2184468CC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    v6 = *v1;
    if (*v1)
    {
      boost::detail::shared_count::~shared_count((unsigned int **)(v6 + 16));
      MEMORY[0x219A19A08](v6, 0x1030C40F1F0227BLL);
    }
    *v1 = 0;
  }
  *v1 = 0;
  *((_DWORD *)v1 + 2) = 0;
  *((_BYTE *)v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  std::string *v5;
  std::string *v6;
  std::vector<std::string>::pointer end;
  char v9;

  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (__int128 *)__last.__i_, (__int128 *)this->__end_, (uint64_t)__first.__i_);
    v6 = v5;
    end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

uint64_t turi::image_util::encode_image@<X0>(uint64_t this@<X0>, const turi::flexible_type *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void **v51;

  v4 = *(_QWORD *)(*(_QWORD *)this + 64);
  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if (v4 == 2)
  {
    if ((uint64_t *)this != a3)
    {
      *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(this + 5);
      *a3 = *(_QWORD *)this;
      v5 = *(unsigned __int8 *)(this + 12);
      *((_BYTE *)a3 + 12) = v5;
      if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
      {
        v6 = (unint64_t *)*a3;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v5 = *((unsigned __int8 *)a3 + 12);
      }
      switch(v5)
      {
        case 2u:
          v8 = *a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v9 = (_QWORD *)operator new();
            v10 = *a3;
            *v9 = *(_QWORD *)*a3;
            v11 = (std::string *)(v9 + 1);
            if (*(char *)(v10 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v10 + 8), *(_QWORD *)(v10 + 16));
            }
            else
            {
              v12 = *(_OWORD *)(v10 + 8);
              v9[3] = *(_QWORD *)(v10 + 24);
              *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
            }
            *a3 = (uint64_t)v9;
            *v9 = 1;
            do
            {
              v49 = __ldaxr((unint64_t *)v8);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, (unint64_t *)v8));
            if (!v50)
            {
              if (*(char *)(v8 + 31) < 0)
                operator delete(*(void **)(v8 + 8));
              v22 = (unint64_t *)v8;
              v23 = 0x1012C404EF22A49;
              goto LABEL_57;
            }
          }
          break;
        case 3u:
          v16 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v17 = (_QWORD *)operator new();
            v18 = (_QWORD *)*a3;
            *v17 = *(_QWORD *)*a3;
            v17[2] = 0;
            v17[3] = 0;
            v17[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v17 + 1, (const void *)v18[1], v18[2], (uint64_t)(v18[2] - v18[1]) >> 3);
            *a3 = (uint64_t)v17;
            *v17 = 1;
            do
            {
              v19 = __ldaxr(v16);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v16));
            if (!v20)
            {
              v21 = (void *)v16[1];
              if (v21)
              {
                v16[2] = (unint64_t)v21;
                operator delete(v21);
              }
              v22 = v16;
              v23 = 0x1080C409938AC02;
              goto LABEL_57;
            }
          }
          break;
        case 4u:
          v24 = (_QWORD *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v25 = (_QWORD *)operator new();
            v26 = (_QWORD *)*a3;
            *v25 = *(_QWORD *)*a3;
            v25[2] = 0;
            v25[3] = 0;
            v25[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 4);
            *a3 = (uint64_t)v25;
            *v25 = 1;
            do
            {
              v27 = __ldaxr(v24);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v24));
            if (!v28)
            {
              v51 = (void **)(v24 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v51);
              goto LABEL_35;
            }
          }
          break;
        case 5u:
          v24 = (_QWORD *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v29 = (_QWORD *)operator new();
            v30 = (_QWORD *)*a3;
            *v29 = *(_QWORD *)*a3;
            v29[2] = 0;
            v29[3] = 0;
            v29[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v29 + 1, (uint64_t *)v30[1], (uint64_t *)v30[2], (uint64_t)(v30[2] - v30[1]) >> 5);
            *a3 = (uint64_t)v29;
            *v29 = 1;
            do
            {
              v31 = __ldaxr(v24);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v24));
            if (!v32)
            {
              v51 = (void **)(v24 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v51);
LABEL_35:
              v22 = v24;
              v23 = 0x1020C405E66F15BLL;
              goto LABEL_57;
            }
          }
          break;
        case 8u:
          v33 = (_QWORD *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v34 = operator new();
            v35 = (_QWORD *)*a3;
            *(_QWORD *)v34 = *(_QWORD *)*a3;
            *(_QWORD *)(v34 + 8) = v35[1];
            v36 = v35[2];
            *(_QWORD *)(v34 + 16) = v36;
            if (v36)
            {
              v37 = (unsigned int *)(v36 + 8);
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            v39 = *(_OWORD *)(v35 + 3);
            v40 = *(_OWORD *)(v35 + 5);
            *(_OWORD *)(v34 + 56) = *(_OWORD *)(v35 + 7);
            *(_OWORD *)(v34 + 40) = v40;
            *(_OWORD *)(v34 + 24) = v39;
            *a3 = v34;
            *(_QWORD *)v34 = 1;
            do
            {
              v41 = __ldaxr(v33);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, v33));
            if (!v42)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v33 + 2);
              v22 = v33;
              v43 = -235920773;
              goto LABEL_49;
            }
          }
          break;
        case 9u:
          v44 = (unint64_t *)*a3;
          if (*(_QWORD *)*a3 != 1)
          {
            v45 = (_QWORD *)operator new();
            v46 = *a3 + 8;
            *v45 = *(_QWORD *)*a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v45 + 1, v46);
            *a3 = (uint64_t)v45;
            *v45 = 1;
            do
            {
              v47 = __ldaxr(v44);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v44));
            if (!v48)
            {
              v22 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v44);
              v43 = 2071181815;
LABEL_49:
              v23 = v43 | 0x1030C4000000000;
LABEL_57:
              MEMORY[0x219A19A08](v22, v23);
            }
          }
          break;
        default:
          return turi::encode_image_inplace((turi *)(*a3 + 8), a2);
      }
    }
    return turi::encode_image_inplace((turi *)(*a3 + 8), a2);
  }
  else if ((uint64_t *)this != a3)
  {
    *(uint64_t *)((char *)a3 + 5) = *(_QWORD *)(this + 5);
    *a3 = *(_QWORD *)this;
    v13 = *(unsigned __int8 *)(this + 12);
    *((_BYTE *)a3 + 12) = v13;
    if (v13 <= 9 && ((1 << v13) & 0x33C) != 0)
    {
      v14 = (unint64_t *)*a3;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  return this;
}

void sub_218446E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t **v10;
  uint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*((_BYTE *)v10 + 12))
  {
    case 2:
      v13 = *v10;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (v15)
        goto LABEL_40;
      v16 = *v10;
      if (!*v10)
        goto LABEL_39;
      if (*((char *)v16 + 31) < 0)
        operator delete((void *)v16[1]);
      v17 = v16;
      v18 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v19 = *v10;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_40;
      v22 = *v10;
      if (!*v10)
        goto LABEL_39;
      v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (unint64_t)v23;
        operator delete(v23);
      }
      v17 = v22;
      v18 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v24 = *v10;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_40;
      v27 = *v10;
      if (!*v10)
        goto LABEL_39;
      a10 = (void **)(v27 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v28 = *v10;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (v30)
        goto LABEL_40;
      v27 = *v10;
      if (!*v10)
        goto LABEL_39;
      a10 = (void **)(v27 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v17 = v27;
      v18 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v31 = *v10;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v10;
      if (!*v10)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v34 + 2);
      v17 = v34;
      v35 = -235920773;
      goto LABEL_37;
    case 9:
      v36 = *v10;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      if (!*v10)
        goto LABEL_39;
      v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v10);
      v35 = 2071181815;
LABEL_37:
      v18 = v35 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v17, v18);
LABEL_39:
      *v10 = 0;
LABEL_40:
      *v10 = 0;
      *((_DWORD *)v10 + 2) = 0;
      *((_BYTE *)v10 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void turi::image_util::resize_image(turi::image_util *this@<X0>, const turi::flexible_type *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  char v9;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  const turi::flexible_type *v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  const void *image_data;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  char **v50;
  int v51[2];
  __int128 v52;
  __int128 v53;
  unint64_t v54[2];
  __int128 v55;
  __int128 v56;

  if (*((_BYTE *)this + 12) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "Cannot resize non-image type");
    *(_QWORD *)&v56 = &v52;
    turi::image_util::resize_image(turi::flexible_type const&,unsigned long,unsigned long,unsigned long,BOOL,int)::$_0::operator()();
  }
  v9 = a5;
  v13 = *(_QWORD *)this;
  v14 = *(_QWORD *)(*(_QWORD *)this + 16);
  *(_QWORD *)&v52 = *(_QWORD *)(*(_QWORD *)this + 8);
  *((_QWORD *)&v52 + 1) = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(_OWORD *)(v13 + 56);
  v18 = *(_OWORD *)(v13 + 40);
  v53 = *(_OWORD *)(v13 + 24);
  *(_OWORD *)v54 = v18;
  v55 = v17;
  v20 = (const turi::flexible_type *)*((_QWORD *)&v53 + 1);
  v19 = v53;
  v21 = v18;
  if (v53 == __PAIR128__((unint64_t)a2, a3)
    && (_QWORD)v18 == a4
    && (((*((_QWORD *)&v17 + 1) == 2) ^ a5) & 1) == 0)
  {
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    *(_BYTE *)(a7 + 12) = 0;
    if (this != (turi::image_util *)a7)
    {
      *(_QWORD *)(a7 + 5) = *(_QWORD *)((char *)this + 5);
      *(_QWORD *)a7 = *(_QWORD *)this;
      v22 = *((unsigned __int8 *)this + 12);
      *(_BYTE *)(a7 + 12) = v22;
      switch(v22)
      {
        case 2:
          v23 = *(unint64_t **)a7;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
          break;
        case 3:
          v44 = *(unint64_t **)a7;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 + 1, v44));
          break;
        case 4:
          v40 = *(unint64_t **)a7;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
          break;
        case 5:
          v46 = *(unint64_t **)a7;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 + 1, v46));
          break;
        case 8:
          v48 = *(unint64_t **)a7;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 + 1, v48));
          break;
        case 9:
          v42 = *(unint64_t **)a7;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
          break;
        default:
          goto LABEL_31;
      }
    }
    goto LABEL_31;
  }
  if (*((_QWORD *)&v17 + 1) != 2)
  {
    turi::image_util_detail::decode_image_impl((turi::image_util_detail *)&v52, a2);
    v20 = (const turi::flexible_type *)*((_QWORD *)&v53 + 1);
    v19 = v53;
    v21 = v54[0];
  }
  if (v20 == a2 && v19 == a3 && v21 == a4)
  {
    if ((v9 & 1) != 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  image_data = (const void *)turi::image_type::get_image_data((turi::image_type *)&v52);
  LODWORD(v50) = a6;
  turi::image_util_detail::resize_image_impl(image_data, *((const char **)&v53 + 1), v53, v54[0], (uint64_t)a2, a3, a4, v51, v50, 0);
  *(_QWORD *)&v53 = a3;
  *((_QWORD *)&v53 + 1) = a2;
  *((_QWORD *)&v55 + 1) = 2;
  v54[0] = a4;
  v54[1] = a3 * (_QWORD)a2 * a4;
  boost::shared_ptr<char []>::shared_ptr<char>((uint64_t *)&v56, *(uint64_t *)v51);
  v26 = v52;
  v52 = v56;
  v56 = v26;
  boost::detail::shared_count::~shared_count((unsigned int **)&v56 + 1);
  if ((v9 & 1) == 0)
LABEL_21:
    turi::image_util_detail::encode_image_impl((turi::image_util_detail *)&v52, a2);
LABEL_22:
  *(_QWORD *)(a7 + 5) = 0;
  *(_QWORD *)a7 = 0;
  *(_BYTE *)(a7 + 12) = 8;
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_OWORD *)(v27 + 8) = 0u;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_QWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 64) = 3;
  *(_QWORD *)a7 = v27;
  *(_QWORD *)v27 = 1;
  if (*(_QWORD *)v27 != 1)
  {
    v28 = operator new();
    v29 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)v28 = *(_QWORD *)v27;
    *(_QWORD *)(v28 + 8) = v29;
    v30 = *(_QWORD *)(v27 + 16);
    *(_QWORD *)(v28 + 16) = v30;
    if (v30)
    {
      v31 = (unsigned int *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    *(_OWORD *)(v28 + 24) = *(_OWORD *)(v27 + 24);
    *(_OWORD *)(v28 + 40) = *(_OWORD *)(v27 + 40);
    *(_OWORD *)(v28 + 56) = *(_OWORD *)(v27 + 56);
    *(_QWORD *)a7 = v28;
    *(_QWORD *)v28 = 1;
    do
    {
      v33 = __ldaxr((unint64_t *)v27);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unint64_t *)v27));
    if (!v34)
    {
      boost::detail::shared_count::~shared_count((unsigned int **)(v27 + 16));
      MEMORY[0x219A19A08](v27, 0x1030C40F1F0227BLL);
    }
  }
  v35 = *(unint64_t **)a7;
  v36 = v52;
  v52 = 0uLL;
  v37 = *(_OWORD *)(v35 + 1);
  *(_OWORD *)(v35 + 1) = v36;
  v56 = v37;
  boost::detail::shared_count::~shared_count((unsigned int **)&v56 + 1);
  v38 = v53;
  v39 = *(_OWORD *)v54;
  *(_OWORD *)(v35 + 7) = v55;
  *(_OWORD *)(v35 + 5) = v39;
  *(_OWORD *)(v35 + 3) = v38;
LABEL_31:
  boost::detail::shared_count::~shared_count((unsigned int **)&v52 + 1);
}

void sub_218447460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  unsigned int **v16;

  boost::detail::shared_count::~shared_count(v16);
  _Unwind_Resume(a1);
}

void turi::image_util::image_sarray_to_vector_sarray(uint64_t *a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *exception;
  __int128 v22;
  uint64_t (**v23)();
  char v24;
  uint64_t (***v25)();
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/image_util.cpp", "image_sarray_to_vector_sarray", 526, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet((const std::locale *)&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = *a1;
  v23 = &off_24D9419B8;
  v24 = a2;
  v25 = &v23;
  turi::unity_sarray::transform_lambda(v12, (uint64_t)&v23, 3, 1, 0, &v22);
  v13 = v25;
  if (v25 == &v23)
  {
    v14 = 4;
    v13 = &v23;
    goto LABEL_13;
  }
  if (v25)
  {
    v14 = 5;
LABEL_13:
    (*v13)[v14]();
  }
  v15 = *((_QWORD *)&v22 + 1);
  *a3 = v22;
  a3[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_218447700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t assert_msg(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  v10 = &a9;
  v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  v10 = &a9;
  v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

void sub_2184478E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_BYTE *std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24D9419B8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24D9419B8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  turi::image_type *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  _QWORD *v50;
  uint64_t v51;
  std::string *v52;
  __int128 v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  __int128 v86;
  unsigned int *v87;
  unsigned int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  std::string v96;
  std::string *v97;

  *(uint64_t *)((char *)a2 + 5) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 12) = 3;
  v4 = (_QWORD *)operator new();
  *v4 = 0;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  *a2 = (uint64_t)v4;
  *v4 = 1;
  switch(a1[12])
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_8;
    case 2:
      v8 = *(_QWORD *)a1;
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v96.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v9;
      }
      turi::flexible_type_fail(0);
      v93 = 0u;
      v94 = 0u;
      v92 = 0u;
      *(_QWORD *)&v95 = 0;
      *((_QWORD *)&v95 + 1) = 3;
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
      v7 = (void *)v96.__r_.__value_.__r.__words[0];
      break;
    case 3:
      v6 = *(_QWORD *)a1;
      memset(&v96, 0, sizeof(v96));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v96, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v93 = 0u;
      v94 = 0u;
      v92 = 0u;
      *(_QWORD *)&v95 = 0;
      *((_QWORD *)&v95 + 1) = 3;
      v7 = (void *)v96.__r_.__value_.__r.__words[0];
      if (!v96.__r_.__value_.__r.__words[0])
        goto LABEL_19;
      v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
      break;
    case 4:
      v10 = *(_QWORD *)a1;
      memset(&v96, 0, sizeof(v96));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v96, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v93 = 0u;
      v94 = 0u;
      v92 = 0u;
      *(_QWORD *)&v95 = 0;
      *((_QWORD *)&v95 + 1) = 3;
      v97 = &v96;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      goto LABEL_19;
    case 5:
      v11 = *(_QWORD *)a1;
      memset(&v96, 0, sizeof(v96));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v96, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v93 = 0u;
      v94 = 0u;
      v92 = 0u;
      *(_QWORD *)&v95 = 0;
      *((_QWORD *)&v95 + 1) = 3;
      v97 = &v96;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      goto LABEL_19;
    case 7:
LABEL_8:
      v93 = 0u;
      v94 = 0u;
      v92 = 0u;
      *(_QWORD *)&v95 = 0;
      *((_QWORD *)&v95 + 1) = 3;
      goto LABEL_19;
    case 8:
      v12 = *(_QWORD *)a1;
      v13 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      *(_QWORD *)&v92 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      *((_QWORD *)&v92 + 1) = v13;
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = *(_OWORD *)(v12 + 24);
      v17 = *(_OWORD *)(v12 + 56);
      v94 = *(_OWORD *)(v12 + 40);
      v95 = v17;
      v93 = v16;
      goto LABEL_19;
    case 9:
      turi::flexible_type_impl::get_img_visitor::operator()(*(_QWORD *)a1 + 8, (turi::image_type *)&v92);
      goto LABEL_19;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  operator delete(v7);
LABEL_19:
  turi::image_util_detail::decode_image_impl((turi::image_util_detail *)&v92, v5);
  switch(*((_BYTE *)a2 + 12))
  {
    case 2:
      v18 = (unint64_t *)*a2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = *a2;
        if (!*a2)
          goto LABEL_61;
        if (*(char *)(v21 + 31) < 0)
          operator delete(*(void **)(v21 + 8));
        v22 = (_QWORD *)v21;
        v23 = 0x1012C404EF22A49;
        goto LABEL_60;
      }
      break;
    case 3:
      v35 = (unint64_t *)*a2;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = (_QWORD *)*a2;
        if (!*a2)
          goto LABEL_61;
        v39 = (void *)v38[1];
        if (v39)
        {
          v38[2] = v39;
          operator delete(v39);
        }
        v22 = v38;
        v23 = 0x1080C409938AC02;
        goto LABEL_60;
      }
      break;
    case 4:
      v24 = (unint64_t *)*a2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = (_QWORD *)*a2;
        if (!*a2)
          goto LABEL_61;
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)(v27 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        goto LABEL_53;
      }
      break;
    case 5:
      v40 = (unint64_t *)*a2;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        v27 = (_QWORD *)*a2;
        if (!*a2)
          goto LABEL_61;
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)(v27 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
LABEL_53:
        v22 = v27;
        v23 = 0x1020C405E66F15BLL;
        goto LABEL_60;
      }
      break;
    case 8:
      v43 = (unint64_t *)*a2;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        v46 = *a2;
        if (!*a2)
          goto LABEL_61;
        boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
        v22 = (_QWORD *)v46;
        v34 = -235920773;
        goto LABEL_59;
      }
      break;
    case 9:
      v28 = (unint64_t *)*a2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = (_QWORD *)*a2;
        if (*a2)
        {
          v32 = (void *)v31[6];
          if (v32)
          {
            v31[7] = v32;
            operator delete(v32);
          }
          v33 = (void *)v31[3];
          if (v33)
          {
            v31[4] = v33;
            operator delete(v33);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
          v22 = v31;
          v34 = 2071181815;
LABEL_59:
          v23 = v34 | 0x1030C4000000000;
LABEL_60:
          MEMORY[0x219A19A08](v22, v23);
        }
LABEL_61:
        *a2 = 0;
      }
      break;
    default:
      break;
  }
  *a2 = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((_BYTE *)a2 + 12) = 8;
  v47 = operator new();
  v48 = v47;
  *(_QWORD *)v47 = 0;
  *(_OWORD *)(v47 + 8) = 0u;
  v49 = (void **)(v47 + 8);
  *(_OWORD *)(v47 + 24) = 0u;
  *(_OWORD *)(v47 + 40) = 0u;
  *(_QWORD *)(v47 + 56) = 0;
  *(_QWORD *)(v47 + 64) = 3;
  *a2 = v47;
  *(_QWORD *)v47 = 1;
  switch(*((_BYTE *)a2 + 12))
  {
    case 2:
      if (*(_QWORD *)v47 != 1)
      {
        v50 = (_QWORD *)operator new();
        v51 = *a2;
        *v50 = *(_QWORD *)*a2;
        v52 = (std::string *)(v50 + 1);
        if (*(char *)(v51 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)(v51 + 8), *(_QWORD *)(v51 + 16));
        }
        else
        {
          v53 = *(_OWORD *)(v51 + 8);
          v50[3] = *(_QWORD *)(v51 + 24);
          *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
        }
        *a2 = (uint64_t)v50;
        *v50 = 1;
        do
        {
          v83 = __ldaxr((unint64_t *)v48);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, (unint64_t *)v48));
        if (!v84)
        {
          v58 = 0x1012C404EF22A49;
          if ((*(char *)(v48 + 31) & 0x80000000) == 0)
            goto LABEL_106;
          v69 = *v49;
          goto LABEL_105;
        }
      }
      break;
    case 3:
      if (*(_QWORD *)v47 != 1)
      {
        v65 = (_QWORD *)operator new();
        v66 = (_QWORD *)*a2;
        *v65 = *(_QWORD *)*a2;
        v65[2] = 0;
        v65[3] = 0;
        v65[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v65 + 1, (const void *)v66[1], v66[2], (uint64_t)(v66[2] - v66[1]) >> 3);
        *a2 = (uint64_t)v65;
        *v65 = 1;
        do
        {
          v67 = __ldaxr((unint64_t *)v48);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, (unint64_t *)v48));
        if (!v68)
        {
          v58 = 0x1080C409938AC02;
          v69 = *v49;
          if (*v49)
          {
            *(_QWORD *)(v48 + 16) = v69;
LABEL_105:
            operator delete(v69);
          }
          goto LABEL_106;
        }
      }
      break;
    case 4:
      if (*(_QWORD *)v47 != 1)
      {
        v54 = (_QWORD *)operator new();
        v55 = (_QWORD *)*a2;
        *v54 = *(_QWORD *)*a2;
        v54[2] = 0;
        v54[3] = 0;
        v54[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v54 + 1, (uint64_t *)v55[1], (uint64_t *)v55[2], (uint64_t)(v55[2] - v55[1]) >> 4);
        *a2 = (uint64_t)v54;
        *v54 = 1;
        do
        {
          v56 = __ldaxr((unint64_t *)v48);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, (unint64_t *)v48));
        if (!v57)
        {
          v58 = 0x1020C405E66F15BLL;
          v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
          goto LABEL_106;
        }
      }
      break;
    case 5:
      if (*(_QWORD *)v47 != 1)
      {
        v70 = (_QWORD *)operator new();
        v71 = (_QWORD *)*a2;
        *v70 = *(_QWORD *)*a2;
        v70[2] = 0;
        v70[3] = 0;
        v70[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v70 + 1, (uint64_t *)v71[1], (uint64_t *)v71[2], (uint64_t)(v71[2] - v71[1]) >> 5);
        *a2 = (uint64_t)v70;
        *v70 = 1;
        do
        {
          v72 = __ldaxr((unint64_t *)v48);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, (unint64_t *)v48));
        if (!v73)
        {
          v58 = 0x1020C405E66F15BLL;
          v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
          goto LABEL_106;
        }
      }
      break;
    case 8:
      if (*(_QWORD *)v47 != 1)
      {
        v74 = operator new();
        v75 = (_QWORD *)*a2;
        *(_QWORD *)v74 = *(_QWORD *)*a2;
        *(_QWORD *)(v74 + 8) = v75[1];
        v76 = v75[2];
        *(_QWORD *)(v74 + 16) = v76;
        if (v76)
        {
          v77 = (unsigned int *)(v76 + 8);
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        v79 = *(_OWORD *)(v75 + 3);
        v80 = *(_OWORD *)(v75 + 5);
        *(_OWORD *)(v74 + 56) = *(_OWORD *)(v75 + 7);
        *(_OWORD *)(v74 + 40) = v80;
        *(_OWORD *)(v74 + 24) = v79;
        *a2 = v74;
        *(_QWORD *)v74 = 1;
        do
        {
          v81 = __ldaxr((unint64_t *)v48);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, (unint64_t *)v48));
        if (!v82)
        {
          v58 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)(v48 + 16));
          goto LABEL_106;
        }
      }
      break;
    case 9:
      if (*(_QWORD *)v47 != 1)
      {
        v59 = (_QWORD *)operator new();
        v60 = *a2 + 8;
        *v59 = *(_QWORD *)*a2;
        turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
        *a2 = (uint64_t)v59;
        *v59 = 1;
        do
        {
          v61 = __ldaxr((unint64_t *)v48);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, (unint64_t *)v48));
        if (!v62)
        {
          v63 = *(void **)(v48 + 48);
          if (v63)
          {
            *(_QWORD *)(v48 + 56) = v63;
            operator delete(v63);
          }
          v64 = *(void **)(v48 + 24);
          if (v64)
          {
            *(_QWORD *)(v48 + 32) = v64;
            operator delete(v64);
          }
          v58 = 0x1030C407B73B9F7;
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v49);
LABEL_106:
          MEMORY[0x219A19A08](v48, v58);
        }
      }
      break;
    default:
      break;
  }
  v85 = (_QWORD *)*a2;
  v86 = v92;
  if (*((_QWORD *)&v92 + 1))
  {
    v87 = (unsigned int *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v89 = *(_OWORD *)(v85 + 1);
  *(_OWORD *)(v85 + 1) = v86;
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v89;
  boost::detail::shared_count::~shared_count((unsigned int **)&v96.__r_.__value_.__l.__size_);
  v90 = v93;
  v91 = v94;
  *(_OWORD *)(v85 + 7) = v95;
  *(_OWORD *)(v85 + 5) = v91;
  *(_OWORD *)(v85 + 3) = v90;
  boost::detail::shared_count::~shared_count((unsigned int **)&v92 + 1);
}

void sub_2184485C8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  __cxa_end_catch();
  boost::detail::shared_count::~shared_count((unsigned int **)va);
  JUMPOUT(0x2184485E8);
}

uint64_t std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void __cxx_global_var_init_19_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t *__cxx_global_var_init_20_0()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_image_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Scaler_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Scaler.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  qword_254FFB010 = 0;
  unk_254FFB018 = 0;
  CoreML::Specification::_Scaler_default_instance_ = (uint64_t)&off_24D941A38;
  unk_254FFAFF0 = 0;
  qword_254FFAFF8 = 0;
  unk_254FFB000 = 0;
  dword_254FFB024 = 0;
  byte_254FFB028 = 1;
}

void CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(CoreML::Specification::protobuf_Scaler_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184489E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::Scaler(CoreML::Specification::Scaler *this)
{
  *(_QWORD *)this = &off_24D941A38;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Scaler *)&CoreML::Specification::_Scaler_default_instance_)
    CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(this);
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_218448A54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v1 + 48);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  CoreML::Specification::LinearQuantizationParams::LinearQuantizationParams(v1);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Scaler::~Scaler(CoreML::Specification::Scaler *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24D941A38;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 && !*v2)
    operator delete(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v3 && !*v3)
    operator delete(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Scaler::~Scaler(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::Scaler::default_instance(CoreML::Specification::Scaler *this)
{
  CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Scaler_default_instance_;
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Scaler *v3;

  v3 = (CoreML::Specification::Scaler *)operator new();
  CoreML::Specification::Scaler::Scaler(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Scaler>(a2, v3);
  return v3;
}

void sub_218448B78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403FC4B5CDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Scaler>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>);
  return result;
}

uint64_t CoreML::Specification::Scaler::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

BOOL CoreML::Specification::Scaler::MergePartialFromCodedStream(CoreML::Specification::Scaler *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  char *v11;
  unsigned int v12;
  char *v13;
  unsigned int VarintSizeAsIntFallback;
  BOOL v15;
  unsigned int v16;
  unint64_t **v17;
  uint64_t v18;
  signed int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  signed int v27;
  uint64_t v28;
  _BOOL8 result;
  signed int v30;
  uint64_t v31;
  uint64_t v32;
  signed int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  signed int v41;
  uint64_t v42;
  signed int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v5 = (unsigned int *)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v7 = *a2;
            if (*a2 < a2[1])
              break;
            v8 = 0;
LABEL_7:
            TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
            v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) != 0)
              goto LABEL_8;
LABEL_20:
            if ((_DWORD)v9)
              v15 = (v9 & 7) == 4;
            else
              v15 = 1;
            if (v15)
              return 1;
            if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
          }
          v8 = *v7;
          if (*v7 < 1)
            goto LABEL_7;
          *a2 = v7 + 1;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_20;
LABEL_8:
          if (v9 >> 3 != 2)
            break;
          if (v9 == 17)
          {
            v16 = 18;
            v17 = (unint64_t **)a2;
            v18 = (uint64_t)v5;
            goto LABEL_28;
          }
          if (v9 != 18)
            goto LABEL_20;
          v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((VarintSizeAsIntFallback & 0x80000000) != 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v13;
            *a2 = v13 + 1;
          }
          if ((VarintSizeAsIntFallback & 7) != 0)
            return 0;
          v33 = *v5;
          v34 = VarintSizeAsIntFallback >> 3;
          v35 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
          v36 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v36 >= v35)
            v37 = v35;
          else
            v37 = v36;
          if (v35 == -1)
            v37 = v36;
          if (v37 >= (uint64_t)VarintSizeAsIntFallback)
          {
            v43 = v33 + v34;
            if ((int)*v5 >= (int)(v33 + v34))
            {
              v44 = *((_QWORD *)this + 6);
            }
            else
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v33 + v34);
              v44 = *((_QWORD *)this + 6);
              v45 = 8 * v43 - 8 * *((int *)this + 10);
              if (v45 >= 1)
                bzero((void *)(v44 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v45 >> 3) - ((unint64_t)v45 > 7)) + 8);
            }
            *v5 = v43;
            v47 = v44 + 8;
            if (!v44)
              v47 = 0;
            if (!_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v47 + 8 * v33), VarintSizeAsIntFallback))
            {
              if ((int)*v5 >= 1)
              {
                result = 0;
                *v5 = v33;
                return result;
              }
              return 0;
            }
          }
          else if (VarintSizeAsIntFallback >= 8)
          {
            if (v34 <= 1)
              v38 = 1;
            else
              v38 = VarintSizeAsIntFallback >> 3;
            do
            {
              v48 = 0;
              v39 = (unint64_t *)*a2;
              if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
              {
                result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v48);
                if (!result)
                  return result;
                v40 = v48;
              }
              else
              {
                v40 = *v39;
                *a2 = (char *)(v39 + 1);
              }
              v41 = *((_DWORD *)this + 10);
              if (v41 == *((_DWORD *)this + 11))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v41 + 1);
                v41 = *v5;
              }
              v42 = *((_QWORD *)this + 6);
              *((_DWORD *)this + 10) = v41 + 1;
              *(_QWORD *)(v42 + 8 * v41 + 8) = v40;
              --v38;
            }
            while (v38);
          }
        }
        if (v9 >> 3 != 1)
          goto LABEL_20;
        if (v9 != 9)
          break;
        v16 = 10;
        v17 = (unint64_t **)a2;
        v18 = (uint64_t)v6;
LABEL_28:
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, v16, v17, v18))return 0;
      }
      if (v9 != 10)
        goto LABEL_20;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        v12 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v12 & 0x80000000) != 0)
          return 0;
      }
      else
      {
        v12 = *v11;
        *a2 = v11 + 1;
      }
      if ((v12 & 7) != 0)
        return 0;
      v19 = *v6;
      v20 = v12 >> 3;
      v21 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v22 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v22 >= v21)
        v23 = v21;
      else
        v23 = v22;
      if (v21 == -1)
        v23 = v22;
      if (v23 >= (uint64_t)v12)
        break;
      if (v12 >= 8)
      {
        if (v20 <= 1)
          v24 = 1;
        else
          v24 = v12 >> 3;
        do
        {
          v48 = 0;
          v25 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v48);
            if (!result)
              return result;
            v26 = v48;
          }
          else
          {
            v26 = *v25;
            *a2 = (char *)(v25 + 1);
          }
          v27 = *((_DWORD *)this + 4);
          if (v27 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v27 + 1);
            v27 = *v6;
          }
          v28 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v27 + 1;
          *(_QWORD *)(v28 + 8 * v27 + 8) = v26;
          --v24;
        }
        while (v24);
      }
    }
    v30 = v19 + v20;
    if ((int)*v6 >= (int)(v19 + v20))
    {
      v31 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v19 + v20);
      v31 = *((_QWORD *)this + 3);
      v32 = 8 * v30 - 8 * *((int *)this + 4);
      if (v32 >= 1)
        bzero((void *)(v31 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v32 >> 3) - ((unint64_t)v32 > 7)) + 8);
    }
    *v6 = v30;
    v46 = v31 + 8;
    if (!v31)
      v46 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v46 + 8 * v19), v12));
  if ((int)*v6 >= 1)
  {
    result = 0;
    *v6 = v19;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::Scaler::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  _tc_google::protobuf::internal::WireFormatLite *v23;

  v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, (const double *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      v15 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v15 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v15;
    }
    v16 = *(_DWORD *)(v5 + 56);
    if (v15 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v16);
    }
    else
    {
      v17 = *((_QWORD *)a2 + 1);
      if (v16 < 0x80)
      {
        v19 = *(_DWORD *)(v5 + 56);
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v18++ = v16 | 0x80;
          v19 = v16 >> 7;
          v20 = v16 >> 14;
          v16 >>= 7;
        }
        while (v20);
      }
      *v18 = v19;
      v21 = (_DWORD)v18 - v17 + 1;
      *((_QWORD *)a2 + 1) += v21;
      *((_DWORD *)a2 + 4) -= v21;
    }
    v22 = *(_QWORD *)(v5 + 48);
    if (v22)
      v23 = (_tc_google::protobuf::internal::WireFormatLite *)(v22 + 8);
    else
      v23 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v23, (const double *)*(unsigned int *)(v5 + 40), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::Scaler::ByteSizeLong(CoreML::Specification::Scaler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  *((_DWORD *)this + 8) = v2;
  v4 = v3 + v2;
  v5 = *((unsigned int *)this + 10);
  v6 = 8 * v5;
  if ((_DWORD)v5)
  {
    if ((v6 & 0x80000000) != 0)
      v7 = 11;
    else
      v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v4 += v7;
  }
  v8 = v4 + v6;
  *((_DWORD *)this + 14) = v6;
  *((_DWORD *)this + 15) = v8;
  return v8;
}

uint64_t *CoreML::Specification::Scaler::MergeFrom(uint64_t *this, const CoreML::Specification::Scaler *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int *v7;
  int v8;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    v8 = v3[10];
    v7 = v3 + 10;
    _tc_google::protobuf::RepeatedField<double>::Reserve(v7, v8 + v6);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v7 + 1) + 8 * (int)*v7 + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *v7 += *((_DWORD *)a2 + 10);
  }
  return this;
}

uint64_t CoreML::Specification::Scaler::IsInitialized(CoreML::Specification::Scaler *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Scaler::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Scaler");
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this)
{
  return CoreML::Specification::Scaler::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_Scaler_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_simple_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

BOOL turi::toolkit_class_registry::register_toolkit_class(uint64_t **a1, std::string *a2, uint64_t a3, uint64_t **a4)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  _QWORD *exception;
  std::locale v20;
  char v21;
  std::locale *v22;

  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/toolkit_class_registry.cpp", "register_toolkit_class", 15, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v20, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v20);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v14 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a1, (const void **)&a2->__r_.__value_.__l.__data_);
  if (!v14)
  {
    v20.__locale_ = (std::locale::__imp *)a2;
    v15 = std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v20);
    std::function<turi::model_base * ()(void)>::operator=(v15 + 7, a3);
    std::string::basic_string[abi:ne180100]<0>(&v20, "name");
    v22 = &v20;
    v16 = (uint64_t *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v20.__locale_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22);
    turi::flexible_type::operator=<std::string>(v16 + 7, a2);
    if (v21 < 0)
      operator delete(v20.__locale_);
    v20.__locale_ = (std::locale::__imp *)a2;
    v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
    if (v17 != a4)
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>(v17, *a4, a4 + 1);
  }
  return v14 == 0;
}

void sub_218449650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::function<turi::model_base * ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<turi::model_base * ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t turi::toolkit_class_registry::register_toolkit_class(uint64_t **a1, uint64_t *a2, const void **a3)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::string *v26;
  uint64_t v27;
  _BOOL4 v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v32[3];
  std::string v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  if (*((char *)a3 + 23) < 0)
    v6 = a3[1];
  else
    v6 = (const void *)*((unsigned __int8 *)a3 + 23);
  v7 = *a2;
  v8 = a2[1];
  if (v6)
  {
    if (v8 == v7)
      return 1;
    v9 = 0;
    v10 = 0;
    do
    {
      if (*((char *)a3 + 23) >= 0)
        v11 = *((unsigned __int8 *)a3 + 23);
      else
        v11 = (size_t)a3[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v33, v11 + 1);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v33;
      else
        v12 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (*((char *)a3 + 23) >= 0)
          v13 = a3;
        else
          v13 = *a3;
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 46;
      v14 = *a2 + v9;
      v15 = *(char *)(v14 + 23);
      if (v15 >= 0)
        v16 = (const std::string::value_type *)(*a2 + v9);
      else
        v16 = *(const std::string::value_type **)v14;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(v14 + 23);
      else
        v17 = *(_QWORD *)(v14 + 8);
      v18 = std::string::append(&v33, v16, v17);
      v19 = v18->__r_.__value_.__r.__words[0];
      v36[0] = v18->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
      v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v21 = *a2 + v9;
      if (*(char *)(v21 + 23) < 0)
        operator delete(*(void **)v21);
      v22 = v36[0];
      *(_QWORD *)v21 = v19;
      *(_QWORD *)(v21 + 8) = v22;
      *(_QWORD *)(v21 + 15) = *(_QWORD *)((char *)v36 + 7);
      *(_BYTE *)(v21 + 23) = v20;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      ++v10;
      v7 = *a2;
      v8 = a2[1];
      v9 += 56;
    }
    while (v10 < 0x6DB6DB6DB6DB6DB7 * ((v8 - *a2) >> 3));
  }
  if (v8 != v7)
  {
    v23 = 0;
    v24 = 0;
    LODWORD(v25) = 1;
    while (1)
    {
      v26 = (std::string *)(v7 + v23);
      v27 = *(_QWORD *)(v7 + v23 + 48);
      v35 = 0;
      if (v27)
      {
        v34[0] = &unk_24D941AE8;
        v34[1] = v27;
        v35 = v34;
      }
      std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)v32, (uint64_t)&v26[1]);
      v28 = turi::toolkit_class_registry::register_toolkit_class(a1, v26, (uint64_t)v34, v32);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v32, v32[1]);
      v29 = v35;
      if (v35 == v34)
        break;
      if (v35)
      {
        v30 = 5;
LABEL_37:
        (*(void (**)(void))(*v29 + 8 * v30))();
      }
      v25 = v25 & v28;
      ++v24;
      v7 = *a2;
      v23 += 56;
      if (v24 >= 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
        return v25;
    }
    v29 = v34;
    v30 = 4;
    goto LABEL_37;
  }
  return 1;
}

void sub_2184499A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *turi::toolkit_class_registry::get_toolkit_class@<X0>(uint64_t **a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;

  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a1, (const void **)a2))
  {
    v9 = a2;
    turi::toolkit_class_registry::get_toolkit_class(std::string const&)::$_0::operator()();
  }
  v9 = a2;
  v6 = std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v9)[10];
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  return std::shared_ptr<turi::model_base>::shared_ptr[abi:ne180100]<turi::model_base,void>(a3, v7);
}

uint64_t *turi::toolkit_class_registry::get_toolkit_class_description@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t **v5;
  uint64_t *v6;
  __int128 *v8;

  v5 = (uint64_t **)(a1 + 24);
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1 + 24, (const void **)a2))
  {
    v8 = a2;
    turi::toolkit_class_registry::get_toolkit_class_description(std::string const&)::$_0::operator()();
  }
  v8 = a2;
  v6 = std::__tree<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  return std::map<std::string,turi::flexible_type>::map[abi:ne180100](a3, (uint64_t)(v6 + 7));
}

void turi::toolkit_class_registry::available_toolkit_classes(turi::toolkit_class_registry **this@<X0>, uint64_t *a2@<X8>)
{
  turi::toolkit_class_registry **v2;
  turi::toolkit_class_registry *v3;
  unint64_t v5;
  __int128 *v6;
  turi::toolkit_class_registry *v7;
  turi::toolkit_class_registry **v8;
  BOOL v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this + 1;
  v3 = *this;
  if (*this != (turi::toolkit_class_registry *)(this + 1))
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)((char *)v3 + 32);
      if (v5 >= a2[2])
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      v7 = (turi::toolkit_class_registry *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = (turi::toolkit_class_registry **)v7;
          v7 = *(turi::toolkit_class_registry **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (turi::toolkit_class_registry **)*((_QWORD *)v3 + 2);
          v9 = *v8 == v3;
          v3 = (turi::toolkit_class_registry *)v8;
        }
        while (!v9);
      }
      v3 = (turi::toolkit_class_registry *)v8;
    }
    while (v8 != v2);
  }
}

void sub_218449BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<turi::model_base * ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_218449D48(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218449E78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,turi::flexible_type>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,turi::flexible_type>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D941AE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D941AE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::target_type()
{
}

uint64_t *std::shared_ptr<turi::model_base>::shared_ptr[abi:ne180100]<turi::model_base,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D941B98;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_21844A02C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::model_base *,std::shared_ptr<turi::model_base>::__shared_ptr_default_delete<turi::model_base,turi::model_base>,std::allocator<turi::model_base>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::model_base *,std::shared_ptr<turi::model_base>::__shared_ptr_default_delete<turi::model_base,turi::model_base>,std::allocator<turi::model_base>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_toolkit_class_registry_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::toolkit_function_registry::register_toolkit_function(uint64_t **a1, std::string::size_type *a2, const void **a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  size_t v14;
  std::string *v15;
  const void *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *exception;
  std::string v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/toolkit_function_registry.cpp", "register_toolkit_function", 30, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = *a2;
  v13 = a2[1];
  if (*a2 == v13)
    return 1;
  do
  {
    if (*((char *)a3 + 23) < 0)
    {
      if (!a3[1])
        goto LABEL_35;
    }
    else if (!*((_BYTE *)a3 + 23))
    {
      goto LABEL_35;
    }
    if (*((char *)a3 + 23) >= 0)
      v14 = *((unsigned __int8 *)a3 + 23);
    else
      v14 = (size_t)a3[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v30, v14 + 1);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v30;
    else
      v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if (v14)
    {
      if (*((char *)a3 + 23) >= 0)
        v16 = a3;
      else
        v16 = *a3;
      memmove(v15, v16, v14);
    }
    *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 46;
    v17 = *(char *)(v12 + 23);
    if (v17 >= 0)
      v18 = (const std::string::value_type *)v12;
    else
      v18 = *(const std::string::value_type **)v12;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v12 + 23);
    else
      v19 = *(_QWORD *)(v12 + 8);
    v20 = std::string::append(&v30, v18, v19);
    v21 = v20->__r_.__value_.__r.__words[0];
    v31[0] = v20->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    *(_QWORD *)v12 = v21;
    *(_QWORD *)(v12 + 8) = v31[0];
    *(_QWORD *)(v12 + 15) = *(_QWORD *)((char *)v31 + 7);
    *(_BYTE *)(v12 + 23) = v22;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
LABEL_35:
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a1, (const void **)v12))
    {
      return 0;
    }
    v12 += 136;
  }
  while (v12 != v13);
  v23 = *a2;
  v24 = a2[1];
  if (*a2 != v24)
  {
    v25 = v23 + 32;
    do
    {
      v30.__r_.__value_.__r.__words[0] = v23;
      v26 = std::__tree<std::__value_type<std::string,turi::toolkit_function_specification>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::toolkit_function_specification>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::toolkit_function_specification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)v23, (uint64_t)&std::piecewise_construct, (__int128 **)&v30);
      std::string::operator=((std::string *)(v26 + 7), (const std::string *)v23);
      if (v26 + 7 != (uint64_t *)v23)
      {
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>((uint64_t **)v26 + 10, *(__int128 **)(v23 + 24), (__int128 *)v25);
        std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>((uint64_t **)v26 + 13, *(_QWORD **)(v23 + 48), (_QWORD *)(v25 + 24));
      }
      v27 = v23 + 72;
      std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=(v26 + 16, v27);
      v27 += 32;
      std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=(v26 + 20, v27);
      v25 += 136;
      v23 = v27 + 32;
    }
    while (v23 != v24);
  }
  return 1;
}

void sub_21844A444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::toolkit_function_registry::get_toolkit_function_info(uint64_t a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, a2);
  if (a1 + 8 == v3)
    return 0;
  else
    return v3 + 56;
}

_QWORD *turi::toolkit_function_registry::get_native_function@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *result;
  std::string::size_type *p_size;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *exception;
  std::string *v41;
  __int128 v42;
  _QWORD *v43;
  std::string *v44;
  __int128 v45;
  void *v46;
  std::string __p;
  void **v48;
  int data;
  _BYTE v50[24];
  _BYTE *v51;
  std::string v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  std::string v56;
  std::string *v57;
  std::string v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD v62[3];
  _QWORD *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = a1 + 8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 == v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    v41 = std::string::append(&v56, " not found");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    exception[2] = *((_QWORD *)&v41->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
  }
  if (!*(_QWORD *)(v6 + 184))
  {
    v43 = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    v44 = std::string::append(&v56, " cannot be run as a native lambda since it was not compiled and registered using the SDK registration scheme.");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v43[2] = *((_QWORD *)&v44->__r_.__value_.__l + 2);
    *(_OWORD *)v43 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  std::string::basic_string[abi:ne180100]<0>(&v56, "arguments");
  v10 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(v6 + 104, (const void **)&v56.__r_.__value_.__l.__data_);
  v11 = (v8 - v9) >> 3;
  v12 = 1;
  switch(v10[12])
  {
    case 3:
      v13 = (_QWORD *)(*(_QWORD *)v10 + 8);
      v14 = (_QWORD *)(*(_QWORD *)v10 + 16);
      v15 = 3;
      goto LABEL_12;
    case 4:
      v13 = (_QWORD *)(*(_QWORD *)v10 + 8);
      v14 = (_QWORD *)(*(_QWORD *)v10 + 16);
      v15 = 4;
      goto LABEL_12;
    case 5:
      v13 = (_QWORD *)(*(_QWORD *)v10 + 8);
      v14 = (_QWORD *)(*(_QWORD *)v10 + 16);
      v15 = 5;
LABEL_12:
      v12 = (uint64_t)(*v14 - *v13) >> v15;
      break;
    case 9:
      v33 = *(uint64_t **)(*(_QWORD *)v10 + 24);
      v32 = *(uint64_t **)(*(_QWORD *)v10 + 32);
      if (v32 == v33 || !*(_QWORD *)(*(_QWORD *)v10 + 8))
      {
        v12 = 0;
      }
      else
      {
        v12 = 1;
        do
        {
          v34 = *v33++;
          v12 *= v34;
        }
        while (v33 != v32);
      }
      break;
    default:
      break;
  }
  v16 = 0xAAAAAAAAAAAAAAABLL * v11;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (v16 != v12)
  {
    v46 = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
  }
  v17 = v6 + 160;
  v19 = *(_QWORD **)(a2 + 24);
  v18 = *(_QWORD **)(a2 + 32);
  if (v18 == v19)
    return (_QWORD *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a3, v17);
  if (!*v19)
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = (int *)v19[v24 + 1];
      if (*v26 != *v26 >> 31)
        break;
      v27 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v56, v26);
      v19 = *(_QWORD **)(a2 + 24);
      v18 = *(_QWORD **)(a2 + 32);
      if (v25 != v27)
        break;
      if (++v25 >= 0xAAAAAAAAAAAAAAABLL * (v18 - v19))
        return (_QWORD *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a3, v17);
      v28 = &v19[v24];
      v24 += 3;
    }
    while (!v28[3]);
  }
  if (v18 == v19)
  {
    v22 = -1;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = -1;
    do
    {
      if (!v19[v20])
      {
        v23 = turi::variant_converter<int,void>::get((uint64_t)&v56, (int *)v19[v20 + 1]);
        if (v22 <= v23)
          v22 = v23;
        v19 = *(_QWORD **)(a2 + 24);
        v18 = *(_QWORD **)(a2 + 32);
      }
      ++v21;
      v20 += 3;
    }
    while (v21 < 0xAAAAAAAAAAAAAAABLL * (v18 - v19));
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v62, v17);
  LODWORD(v56.__r_.__value_.__l.__data_) = v22 + 1;
  p_size = &v56.__r_.__value_.__l.__size_;
  v31 = (uint64_t)v63;
  if (!v63)
    goto LABEL_37;
  if (v63 != v62)
  {
    v31 = (*(uint64_t (**)(void))(*v63 + 16))();
LABEL_37:
    v57 = (std::string *)v31;
    goto LABEL_44;
  }
  v57 = (std::string *)&v56.__r_.__value_.__r.__words[1];
  (*(void (**)(_QWORD *, std::string::size_type *))(v62[0] + 24))(v62, &v56.__r_.__value_.__l.__size_);
LABEL_44:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v58 = *(std::string *)a2;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((char *)&v59, *(_QWORD **)(a2 + 24), *(_QWORD **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  data = (int)v56.__r_.__value_.__l.__data_;
  v35 = v50;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)v50, (uint64_t)&v56.__r_.__value_.__l.__size_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v52, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  else
    v52 = v58;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((char *)&v53, v59, v60, 0xAAAAAAAAAAAAAAABLL * (v60 - v59));
  *(_QWORD *)(a3 + 24) = 0;
  v36 = operator new(0x60uLL);
  *(_QWORD *)v36 = off_24D941C10;
  *((_DWORD *)v36 + 2) = data;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)v36 + 16, (uint64_t)v50);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v36 + 2, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  else
    *((std::string *)v36 + 2) = v52;
  *((_QWORD *)v36 + 9) = 0;
  *((_QWORD *)v36 + 10) = 0;
  *((_QWORD *)v36 + 11) = 0;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((char *)v36 + 72, v53, v54, 0xAAAAAAAAAAAAAAABLL * (v54 - v53));
  *(_QWORD *)(a3 + 24) = v36;
  v48 = (void **)&v53;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v48);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (v51 == v50)
  {
    v37 = 4;
  }
  else
  {
    if (!v51)
      goto LABEL_60;
    v37 = 5;
    v35 = v51;
  }
  (*(void (**)(_QWORD *))(*v35 + 8 * v37))(v35);
LABEL_60:
  v48 = (void **)&v59;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v48);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (v57 == (std::string *)&v56.__r_.__value_.__r.__words[1])
  {
    v38 = 4;
  }
  else
  {
    if (!v57)
      goto LABEL_67;
    v38 = 5;
    p_size = (std::string::size_type *)v57;
  }
  (*(void (**)(std::string::size_type *))(*p_size + 8 * v38))(p_size);
LABEL_67:
  result = v63;
  if (v63 == v62)
  {
    v39 = 4;
    result = v62;
  }
  else
  {
    if (!v63)
      return result;
    v39 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v39))();
}

void sub_21844AB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  v48 = (_QWORD *)v44[5];
  if (v48 == v45)
  {
    v49 = 4;
    v48 = v45;
  }
  else
  {
    if (!v48)
      goto LABEL_6;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_6:
  operator delete(v44);
  turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0::~$_0((uint64_t)&a17);
  turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0::~$_0((uint64_t)&__p);
  v50 = *(_QWORD **)(v46 - 96);
  if (v50 == (_QWORD *)(v46 - 120))
  {
    v51 = 4;
    v50 = (_QWORD *)(v46 - 120);
  }
  else
  {
    if (!v50)
      goto LABEL_11;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0::~$_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v5;

  v5 = (void **)(a1 + 64);
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void turi::toolkit_function_registry::available_toolkit_functions(turi::toolkit_function_registry **this@<X0>, uint64_t *a2@<X8>)
{
  turi::toolkit_function_registry **v3;
  turi::toolkit_function_registry *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  turi::toolkit_function_registry *v12;
  turi::toolkit_function_registry **v13;
  BOOL v14;
  std::string v15;
  void *__p;
  char v17;
  char *v18[3];
  _QWORD *v19[3];
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = this + 1;
  v4 = *this;
  if (*this != (turi::toolkit_function_registry *)(this + 1))
  {
    do
    {
      std::pair<std::string const,turi::toolkit_function_specification>::pair[abi:ne180100](&v15, (__int128 *)v4 + 2);
      v5 = a2[1];
      if (v5 >= a2[2])
      {
        v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v15);
      }
      else
      {
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a2[1], v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
        }
        else
        {
          v6 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
          *(_QWORD *)(v5 + 16) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
          *(_OWORD *)v5 = v6;
        }
        v7 = v5 + 24;
        a2[1] = v5 + 24;
      }
      a2[1] = v7;
      v8 = v23;
      if (v23 == v22)
      {
        v8 = v22;
        v9 = 4;
      }
      else
      {
        if (!v23)
          goto LABEL_13;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_17;
      }
      if (v21)
      {
        v11 = 5;
LABEL_17:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v19, v19[1]);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v18, v18[1]);
      if (v17 < 0)
        operator delete(__p);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      v12 = (turi::toolkit_function_registry *)*((_QWORD *)v4 + 1);
      if (v12)
      {
        do
        {
          v13 = (turi::toolkit_function_registry **)v12;
          v12 = *(turi::toolkit_function_registry **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (turi::toolkit_function_registry **)*((_QWORD *)v4 + 2);
          v14 = *v13 == v4;
          v4 = (turi::toolkit_function_registry *)v13;
        }
        while (!v14);
      }
      v4 = (turi::toolkit_function_registry *)v13;
    }
    while (v13 != v3);
  }
}

void sub_21844AEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  std::pair<std::string const,turi::toolkit_function_specification>::~pair((uint64_t)&a10);
  a10 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,turi::toolkit_function_specification>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 120);
  if (v5 == (_QWORD *)(a1 + 96))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1 + 48, *(char **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

std::string *std::pair<std::string const,turi::toolkit_function_specification>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  turi::toolkit_function_specification::toolkit_function_specification(this + 1, (const turi::toolkit_function_specification *)((char *)a2 + 24));
  return this;
}

void sub_21844B0D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *turi::toolkit_function_specification::toolkit_function_specification(std::string *this, const turi::toolkit_function_specification *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)&this[2], (uint64_t)a2 + 48);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)&this[3], (uint64_t)a2 + 72);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)&this[4].__r_.__value_.__l.__size_, (uint64_t)a2 + 104);
  return this;
}

void sub_21844B184(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v6 = *(_QWORD **)(v1 + 96);
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = *(_QWORD **)(v1 + 96);
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v3, *(_QWORD **)(v1 + 56));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v2, *(char **)(v1 + 32));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_21844B39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::toolkit_function_specification>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::toolkit_function_specification>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::toolkit_function_specification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,turi::toolkit_function_specification>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::toolkit_function_specification>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::toolkit_function_specification>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::toolkit_function_specification>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::toolkit_function_specification>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::toolkit_function_specification>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xC0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::toolkit_function_specification>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_21844B528(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::toolkit_function_specification>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[2].__r_.__value_.__l.__size_;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[3].__r_.__value_.__l.__size_;
  this[6].__r_.__value_.__l.__size_ = 0;
  return this;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::toolkit_function_specification>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::toolkit_function_specification>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 120);
  if (v5 == (_QWORD *)(a1 + 96))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1 + 48, *(char **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v5;

  *(_QWORD *)a1 = off_24D941C10;
  v5 = (void **)(a1 + 72);
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 40);
  if (v2 == (_QWORD *)(a1 + 16))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 16);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v5;

  *(_QWORD *)a1 = off_24D941C10;
  v5 = (void **)(a1 + 72);
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 40);
  if (v2 == (_QWORD *)(a1 + 16))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 16);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return MEMORY[0x219A19A08](a1, 0x10B3C4088211CA2);
}

_QWORD *std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = off_24D941C10;
  std::__compressed_pair_elem<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21844B828(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24D941C10;
  return std::__compressed_pair_elem<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  void *exception;
  _QWORD v13[3];
  char v14;
  void **v15;

  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 4) < *(int *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Wrong number of arguments");
  }
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::vector(v13, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3));
  v4 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(v4 + v5);
      v9 = (uint64_t *)v8[1];
      if (*v8 == 1)
      {
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v13[0] + v6), v9);
      }
      else
      {
        v10 = turi::variant_converter<int,void>::get((uint64_t)&v14, (int *)v9);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v13[0] + v6), (uint64_t *)(*a2 + 80 * v10));
      }
      ++v7;
      v4 = *(_QWORD *)(a1 + 72);
      v6 += 80;
      v5 += 24;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v4) >> 3));
  }
  v11 = *(_QWORD *)(a1 + 40);
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v13);
  v15 = (void **)v13;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_21844B9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 40);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 8, a2 + 8);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((char *)(a1 + 64), *(_QWORD **)(a2 + 64), *(_QWORD **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
  return a1;
}

void sub_21844BB04(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = v1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__alloc_func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy[abi:ne180100](uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  void **v4;

  v4 = (void **)(a1 + 64);
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  result = *(_QWORD **)(a1 + 32);
  if (result == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    result = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void __cxx_global_var_init_11_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_toolkit_function_registry_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::neural_net::GrandCentralDispatchQueue::GetGlobalConcurrentQueue(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  dispatch_queue_global_t global_queue;

  if ((v3 & 1) == 0
  {
    v7 = (_QWORD *)operator new();
    global_queue = dispatch_get_global_queue(21, 0);
    std::make_shared[abi:ne180100]<turi::neural_net::GrandCentralDispatchQueue,dispatch_queue_global_s *,void>(&global_queue, v7);
    turi::neural_net::GrandCentralDispatchQueue::GetGlobalConcurrentQueue(void)::singleton = (uint64_t)v7;
  }
  v4 = *(_QWORD *)(turi::neural_net::GrandCentralDispatchQueue::GetGlobalConcurrentQueue(void)::singleton + 8);
  *a1 = *(_QWORD *)turi::neural_net::GrandCentralDispatchQueue::GetGlobalConcurrentQueue(void)::singleton;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_21844BD68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void std::make_shared[abi:ne180100]<turi::neural_net::GrandCentralDispatchQueue,dispatch_queue_global_s *,void>(NSObject **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  NSObject *v5;

  v4 = operator new(0x28uLL);
  v4[2] = 0;
  *v4 = &unk_24D941D78;
  v4[1] = 0;
  v5 = *a1;
  v4[3] = &off_24D941C90;
  v4[4] = v5;
  dispatch_retain(v5);
  *a2 = v4 + 3;
  a2[1] = v4;
}

void turi::neural_net::GrandCentralDispatchQueue::~GrandCentralDispatchQueue(dispatch_object_t *this)
{
  *this = (dispatch_object_t)&off_24D941C90;
  dispatch_release(this[1]);
}

{
  *this = (dispatch_object_t)&off_24D941C90;
  dispatch_release(this[1]);
  JUMPOUT(0x219A19A08);
}

_QWORD *turi::neural_net::GrandCentralDispatchQueue::DispatchAsync(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD block[4];
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchAsyncENSt3__18functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  dispatch_async(v2, block);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchAsyncENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t __copy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *turi::neural_net::GrandCentralDispatchQueue::DispatchSync(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD block[4];
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4turi10neural_net25GrandCentralDispatchQueue12DispatchSyncENSt3__18functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  dispatch_sync(v2, block);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t ___ZN4turi10neural_net25GrandCentralDispatchQueue12DispatchSyncENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void turi::neural_net::GrandCentralDispatchQueue::DispatchApply(uint64_t a1, size_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  const std::exception_ptr *v6;
  uint64_t v7;
  std::exception_ptr v8;
  std::exception_ptr v9;
  uint64_t v10;
  const std::exception_ptr *v11;
  uint64_t v12;
  std::exception_ptr *(*v13)(std::exception_ptr *, const std::exception_ptr *);
  void (*v14)(std::exception_ptr *);
  std::exception_ptr v15;
  _QWORD block[5];
  _BYTE v17[24];
  _BYTE *v18;
  std::mutex *v19;
  std::mutex v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  memset(v20.__m_.__opaque, 0, sizeof(v20.__m_.__opaque));
  v20.__m_.__sig = 850045863;
  v10 = 0;
  v11 = (const std::exception_ptr *)&v10;
  v12 = 0x3002000000;
  v13 = __Block_byref_object_copy__4;
  v14 = __Block_byref_object_dispose__4;
  v15.__ptr_ = 0;
  block[0] = MEMORY[0x24BDAC760];
  v4 = *(NSObject **)(a1 + 8);
  block[2] = ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchApplyEmNSt3__18functionIFvmEEE_block_invoke;
  block[3] = &unk_24D941D20;
  v5 = v17;
  block[1] = 1174405120;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v17, a3);
  v19 = &v20;
  block[4] = &v10;
  dispatch_apply(a2, v4, block);
  v6 = v11 + 5;
  if (v11[5].__ptr_)
  {
    std::exception_ptr::exception_ptr(&v9, v6);
    v8.__ptr_ = &v9;
    std::rethrow_exception(v8);
    __break(1u);
  }
  if (v18 == v17)
  {
    v7 = 4;
    goto LABEL_6;
  }
  if (v18)
  {
    v7 = 5;
    v5 = v18;
LABEL_6:
    (*(void (**)(_QWORD *, const std::exception_ptr *))(*v5 + 8 * v7))(v5, v6);
  }
  _Block_object_dispose(&v10, 8);
  std::exception_ptr::~exception_ptr(&v15);
  std::mutex::~mutex(&v20);
}

void sub_21844C214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,std::mutex *a26)
{
  std::exception_ptr *v26;
  _QWORD *v27;
  uint64_t v29;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a24 == v27)
  {
    v29 = 4;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v29 = 5;
    v27 = a24;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v29))(v27);
LABEL_6:
  _Block_object_dispose(&a10, 8);
  std::exception_ptr::~exception_ptr(v26);
  std::mutex::~mutex((std::mutex *)&a26);
  _Unwind_Resume(a1);
}

std::exception_ptr *__Block_byref_object_copy__4(std::exception_ptr *a1, const std::exception_ptr *a2)
{
  return std::exception_ptr::exception_ptr(a1 + 5, a2 + 5);
}

void __Block_byref_object_dispose__4(std::exception_ptr *a1)
{
  std::exception_ptr::~exception_ptr(a1 + 5);
}

uint64_t ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchApplyEmNSt3__18functionIFvmEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2;
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

void sub_21844C2D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  uint64_t v9;
  std::mutex *v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  v10 = *(std::mutex **)(v9 + 72);
  std::mutex::lock(v10);
  ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchApplyEmNSt3__18functionIFvmEEE_block_invoke_cold_1(v9, &a9, v10);
  JUMPOUT(0x21844C2C0);
}

void sub_21844C304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvmEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvmEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__shared_ptr_emplace<turi::neural_net::GrandCentralDispatchQueue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D941D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::GrandCentralDispatchQueue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D941D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::GrandCentralDispatchQueue>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t _GLOBAL__sub_I_GrandCentralDispatchQueue_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::unity_global::unity_global(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *exception;
  std::locale v12;

  *a1 = &off_24D941DC8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = a3;
  a1[6] = 0;
  a1[5] = a1 + 6;
  a1[7] = 0;
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "unity_global", 41, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  return a1;
}

void sub_21844C574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  cppipc::ipc_object_base *v10;
  uint64_t v11;

  std::locale::~locale(&a10);
  std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy(v11, *((_QWORD **)v10 + 6));
  cppipc::ipc_object_base::~ipc_object_base(v10);
  _Unwind_Resume(a1);
}

void turi::unity_global::~unity_global(turi::unity_global *this)
{
  *(_QWORD *)this = &off_24D941DC8;
  std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  cppipc::ipc_object_base::~ipc_object_base(this);
}

{
  *(_QWORD *)this = &off_24D941DC8;
  std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  cppipc::ipc_object_base::~ipc_object_base(this);
  JUMPOUT(0x219A19A08);
}

_QWORD *turi::unity_global::get_version@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "6.1");
}

uint64_t turi::unity_global::get_graph_dag(turi::unity_global *this)
{
  turi::unity_sgraph *v1;
  uint64_t dag;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  v1 = (turi::unity_sgraph *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  dag = turi::unity_sgraph::get_dag(v1);
  turi::lazy_eval_operation_dag<turi::sgraph>::print(dag, v6);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v8);
}

void sub_21844C6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::lazy_eval_operation_dag<turi::sgraph>::print(uint64_t a1, _QWORD *a2)
{
  _QWORD *i;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *__p[2];
  unsigned __int8 v24;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"digraph G {\n", 12);
  for (i = *(_QWORD **)(a1 + 24); i; i = (_QWORD *)*i)
  {
    v5 = i[3];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t\"", 2);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\" ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[label=\"", 8);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)":", 1);
    v8 = *(_QWORD *)(v5 + 32);
    if (v8)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v8 + 8))(__p);
      if ((v24 & 0x80u) == 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if ((v24 & 0x80u) == 0)
        v10 = v24;
      else
        v10 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, v10);
      if ((char)v24 < 0)
        operator delete(__p[0]);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"NULL", 4);
    }
    v11 = *(std::__shared_weak_count **)(v5 + 8);
    if (v11 && v11->__shared_owners_ != -1)
    {
      v12 = std::__shared_weak_count::lock(v11);
      if (v12)
      {
        v13 = v12;
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\\nptr=", 6);
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\"", 1);
    v16 = *(_QWORD *)(v5 + 8);
    if (v16 && *(_QWORD *)(v16 + 8) != -1)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)",style=bold", 11);
    if (*(_BYTE *)(v5 + 88))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)",color=red", 10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
    v17 = *(_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v5 + 72);
    while (v17 != v18)
    {
      v17 += 8;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t\"", 2);
      v19 = (_QWORD *)std::ostream::operator<<();
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\" -> ", 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\"", 1);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"\n", 2);
    }
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"}\n", 2);
}

void sub_21844C990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double turi::unity_global::load_graph@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  turi::unity_sgraph *v10;
  std::locale::__imp *locale;
  double result;
  _QWORD *exception;
  std::string __p;
  std::locale v15[2];

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_graph", 57, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(v15, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v10, turi::SGRAPH_DEFAULT_NUM_PARTITIONS);
  std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)v15, (uint64_t)v10);
  locale = v15[0].__locale_;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  (*(void (**)(std::locale::__imp *, std::string *))(*(_QWORD *)locale + 96))(locale, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result = *(double *)&v15[0].__locale_;
  *a2 = *(_OWORD *)&v15[0].__locale_;
  return result;
}

void sub_21844CB8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_21844CBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400727145BLL);
  _Unwind_Resume(a1);
}

void sub_21844CBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __cxa_end_catch();
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x21844CBF8);
}

void turi::unity_global::get_turicreate_object_type(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *exception;
  std::locale v12;
  char v13;
  std::string v14;
  std::string v15;
  __n128 v16;
  char v17;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "get_turicreate_object_type", 68, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Getting turicreate object type stored at: ", 42);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v15 = *(std::string *)a1;
    turi::sanitize_url((__n128 *)&v15, &v16);
    v8 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v16);
    v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v17 < 0)
      operator delete((void *)v16.n128_u64[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v14 = *(std::string *)a1;
  std::string::basic_string[abi:ne180100]<0>(&v12, "contents");
  turi::dir_archive::get_directory_metadata((uint64_t)&v14, (const void **)&v12.__locale_, a2);
  if (v13 < 0)
    operator delete(v12.__locale_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_21844CE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::locale::~locale(&a10);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void turi::unity_global::list_toolkit_classes(turi::toolkit_class_registry ***this@<X0>, uint64_t *a2@<X8>)
{
  turi::toolkit_class_registry::available_toolkit_classes(this[4], a2);
}

void turi::unity_global::model_variant_deep_save(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *has_fallback_type;
  void **v11;
  void **v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  turi::model_base *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  void **v35;
  void **v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  const void ***v41;
  const void **v42;
  unint64_t v43;
  char *v44;
  const void ***v45;
  const void **v46;
  const void **v47;
  const void **v48;
  const void ***v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  char **v56;
  size_t v57;
  BOOL v58;
  std::vector<char>::size_type v59;
  size_t v60;
  char **v61;
  size_t v62;
  BOOL v63;
  std::vector<char>::size_type v64;
  size_t v65;
  char **v66;
  size_t v67;
  BOOL v68;
  std::vector<char>::size_type v69;
  void *__p;
  std::__shared_weak_count *v71;
  char v72;
  _QWORD v73[2];
  char v74;

  v6 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  LODWORD(__p) = v6;
  if (*(_QWORD *)a3)
  {
    std::ostream::write();
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 40);
    if (*(_QWORD *)(a3 + 32) + 4 > v7)
    {
      v55 = 2 * v7 + 8;
      *(_QWORD *)(a3 + 40) = v55;
      v56 = *(char ***)(a3 + 16);
      if (v56)
      {
        v8 = *v56;
        v57 = v56[1] - *v56;
        v58 = v55 >= v57;
        v59 = v55 - v57;
        if (v59 != 0 && v58)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v59);
          v8 = **(char ***)(a3 + 16);
        }
        else if (!v58)
        {
          v56[1] = &v8[v55];
        }
      }
      else
      {
        v8 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v55, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a3 + 24) = v8;
    }
    else
    {
      v8 = *(char **)(a3 + 24);
    }
    *(_DWORD *)&v8[*(_QWORD *)(a3 + 32)] = v6;
    *(_QWORD *)(a3 + 32) += 4;
  }
  v9 = *(unsigned int *)a2;
  switch(v9 ^ ((int)v9 >> 31))
  {
    case 0u:
      __p = v73;
      has_fallback_type = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v9, 0, (uint64_t)&__p, (uint64_t)(a2 + 1));
      if (!has_fallback_type)
      {
        __p = &unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a3, has_fallback_type);
      break;
    case 1u:
      v73[0] = &v74;
      v29 = (void **)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sgraph_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 1, (uint64_t)v73, (uint64_t)(a2 + 1));
      v30 = v29;
      if (!v29)
      {
        v73[0] = &unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v31 = *v29;
      v14 = (std::__shared_weak_count *)v30[1];
      __p = *v30;
      v71 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v31 + 16))(v31, a3);
      if (v14)
      {
        v34 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v34);
        while (__stlxr(v18 - 1, v34));
        goto LABEL_47;
      }
      break;
    case 2u:
      __p = v73;
      v19 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 2, (uint64_t)&__p, (uint64_t)(a2 + 1));
      if (!v19)
      {
        __p = &unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::serialize_impl<turi::oarchive,turi::dataframe_t,false,void>::exec(a3, v19);
      break;
    case 3u:
      __p = &v74;
      v20 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::model_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 3, (uint64_t)&__p, (uint64_t)(a2 + 1));
      if (!v20)
      {
        __p = &unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v21 = *(turi::model_base **)v20;
      v14 = *(std::__shared_weak_count **)(v20 + 8);
      v73[0] = *(_QWORD *)v20;
      v73[1] = v14;
      if (v14)
      {
        v22 = (unint64_t *)&v14->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (char *)(*(uint64_t (**)(turi::model_base *))(*(_QWORD *)v21 + 16))(v21);
      std::string::basic_string[abi:ne180100]<0>(&__p, v24);
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a3, (const void **)&__p);
      if (v72 < 0)
        operator delete(__p);
      turi::model_base::save(v21, (turi::oarchive *)a3);
      if (v14)
      {
        v25 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v25);
        while (__stlxr(v18 - 1, v25));
        goto LABEL_47;
      }
      break;
    case 4u:
      v73[0] = &v74;
      v11 = (void **)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 4, (uint64_t)v73, (uint64_t)(a2 + 1));
      v12 = v11;
      if (!v11)
      {
        v73[0] = &unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v13 = *v11;
      v14 = (std::__shared_weak_count *)v12[1];
      __p = *v12;
      v71 = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v13 + 16))(v13, a3);
      if (v14)
      {
        v17 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        goto LABEL_47;
      }
      break;
    case 5u:
      v73[0] = &v74;
      v35 = (void **)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 5, (uint64_t)v73, (uint64_t)(a2 + 1));
      v36 = v35;
      if (!v35)
      {
        v73[0] = &unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v37 = *v35;
      v14 = (std::__shared_weak_count *)v36[1];
      __p = *v36;
      v71 = v14;
      if (v14)
      {
        v38 = (unint64_t *)&v14->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v37 + 16))(v37, a3);
      if (v14)
      {
        v40 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v40);
        while (__stlxr(v18 - 1, v40));
LABEL_47:
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      break;
    case 6u:
      v41 = (const void ***)turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a2);
      v42 = v41[2];
      __p = v42;
      if (*(_QWORD *)a3)
      {
        std::ostream::write();
      }
      else
      {
        v43 = *(_QWORD *)(a3 + 40);
        if (*(_QWORD *)(a3 + 32) + 8 > v43)
        {
          v60 = 2 * v43 + 16;
          *(_QWORD *)(a3 + 40) = v60;
          v61 = *(char ***)(a3 + 16);
          if (v61)
          {
            v44 = *v61;
            v62 = v61[1] - *v61;
            v63 = v60 >= v62;
            v64 = v60 - v62;
            if (v64 != 0 && v63)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v64);
              v44 = **(char ***)(a3 + 16);
            }
            else if (!v63)
            {
              v61[1] = &v44[v60];
            }
          }
          else
          {
            v44 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v60, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(a3 + 24) = v44;
        }
        else
        {
          v44 = *(char **)(a3 + 24);
        }
        *(_QWORD *)&v44[*(_QWORD *)(a3 + 32)] = v42;
        *(_QWORD *)(a3 + 32) += 8;
      }
      v47 = *v41;
      v45 = v41 + 1;
      v46 = v47;
      if (v47 != (const void **)v45)
      {
        do
        {
          turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a3, v46 + 4);
          turi::unity_global::model_variant_deep_save(a1, v46 + 7, a3);
          v48 = (const void **)v46[1];
          if (v48)
          {
            do
            {
              v49 = (const void ***)v48;
              v48 = (const void **)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v49 = (const void ***)v46[2];
              v50 = *v49 == v46;
              v46 = (const void **)v49;
            }
            while (!v50);
          }
          v46 = (const void **)v49;
        }
        while (v49 != v45);
      }
      break;
    case 7u:
      __p = v73;
      v26 = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 7u, (uint64_t)&__p, a2 + 1);
      v27 = v26;
      if (!v26)
      {
        __p = &unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v28 = 0xCCCCCCCCCCCCCCCDLL * ((v26[1] - *v26) >> 4);
      __p = (void *)v28;
      if (*(_QWORD *)a3)
      {
        std::ostream::write();
      }
      else
      {
        v51 = *(_QWORD *)(a3 + 40);
        if (*(_QWORD *)(a3 + 32) + 8 > v51)
        {
          v65 = 2 * v51 + 16;
          *(_QWORD *)(a3 + 40) = v65;
          v66 = *(char ***)(a3 + 16);
          if (v66)
          {
            v52 = *v66;
            v67 = v66[1] - *v66;
            v68 = v65 >= v67;
            v69 = v65 - v67;
            if (v69 != 0 && v68)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v69);
              v52 = **(char ***)(a3 + 16);
            }
            else if (!v68)
            {
              v66[1] = &v52[v65];
            }
          }
          else
          {
            v52 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v65, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(a3 + 24) = v52;
        }
        else
        {
          v52 = *(char **)(a3 + 24);
        }
        *(_QWORD *)&v52[*(_QWORD *)(a3 + 32)] = v28;
        *(_QWORD *)(a3 + 32) += 8;
      }
      v53 = *v27;
      v54 = v27[1];
      while (v53 != v54)
      {
        turi::unity_global::model_variant_deep_save(a1, v53, a3);
        v53 += 80;
      }
      break;
    default:
      return;
  }
}

void sub_21844D518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_21844D6D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v10);
}

void sub_21844D6FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void turi::unity_global::model_variant_deep_load(uint64_t a1, unsigned int *a2, turi::iarchive *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::string::size_type v12;
  _QWORD *v13;
  uint64_t v14;
  turi::unity_sframe *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  turi::unity_sgraph *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  turi::unity_sarray *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t i;
  unint64_t v52;
  uint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::string::size_type v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::string::size_type v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::string::size_type v73;
  _QWORD **has_fallback_type;
  std::string v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  std::string *v80;
  std::string __p;
  __int128 *v82;
  __int128 v83;
  _QWORD **v84;
  _QWORD *v85[5];

  v85[4] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v79 = 0;
  v6 = *((_QWORD *)a3 + 2);
  if (v6)
  {
    v7 = *((_QWORD *)a3 + 3);
    v8 = *(_DWORD *)(v6 + v7);
    v79 = v8;
    *((_QWORD *)a3 + 3) = v7 + 4;
  }
  else
  {
    std::istream::read();
    v8 = v79;
  }
  switch(v8)
  {
    case 0:
      __p.__r_.__value_.__r.__words[0] = 0;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
      __p.__r_.__value_.__s.__data_[12] = 0;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::flexible_type>(a2, (uint64_t)&__p);
      switch(__p.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v9 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            v12 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(__p.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(__p.__r_.__value_.__r.__words[0] + 8));
              v13 = (_QWORD *)v12;
              v14 = 0x1012C404EF22A49;
              goto LABEL_104;
            }
          }
          break;
        case 3:
          v62 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              v66 = *(void **)(__p.__r_.__value_.__r.__words[0] + 8);
              if (v66)
              {
                *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) = v66;
                operator delete(v66);
              }
              v13 = (_QWORD *)v65;
              v14 = 0x1080C409938AC02;
              goto LABEL_104;
            }
          }
          break;
        case 4:
          v54 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            v57 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              *(_QWORD *)&v76 = __p.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
              goto LABEL_97;
            }
          }
          break;
        case 5:
          v67 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            v57 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              *(_QWORD *)&v76 = __p.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
LABEL_97:
              v13 = (_QWORD *)v57;
              v14 = 0x1020C405E66F15BLL;
              goto LABEL_104;
            }
          }
          break;
        case 8:
          v70 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (!v72)
          {
            v73 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(__p.__r_.__value_.__r.__words[0] + 16));
              v13 = (_QWORD *)v73;
              v61 = -235920773;
              goto LABEL_103;
            }
          }
          break;
        case 9:
          v58 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (!v60 && __p.__r_.__value_.__r.__words[0])
          {
            v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(__p.__r_.__value_.__l.__data_);
            v61 = 2071181815;
LABEL_103:
            v14 = v61 | 0x1030C4000000000;
LABEL_104:
            MEMORY[0x219A19A08](v13, v14);
          }
          break;
        default:
          break;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
      has_fallback_type = (_QWORD **)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a2, *a2 ^ ((int)*a2 >> 31), (uint64_t)&__p, (uint64_t)(a2 + 2));
      if (!has_fallback_type)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a3, has_fallback_type);
      break;
    case 1:
      v33 = (turi::unity_sgraph *)operator new();
      turi::unity_sgraph::unity_sgraph(v33, turi::SGRAPH_DEFAULT_NUM_PARTITIONS);
      std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v75, (uint64_t)v33);
      (*(void (**)(std::string::size_type, turi::iarchive *))(*(_QWORD *)v75.__r_.__value_.__l.__data_ + 24))(v75.__r_.__value_.__r.__words[0], a3);
      v76 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      if (v75.__r_.__value_.__l.__size_)
      {
        v34 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sgraph>,void>::set((uint64_t *)&v76, (uint64_t)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a2, (unsigned int *)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
      if (v75.__r_.__value_.__l.__size_)
      {
        v39 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldaxr(v39);
        while (__stlxr(v23 - 1, v39));
        goto LABEL_59;
      }
      break;
    case 2:
      v83 = 0u;
      memset(&__p, 0, sizeof(__p));
      v82 = &v83;
      v85[0] = 0;
      v85[1] = 0;
      v84 = v85;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::dataframe_t>(a2, (uint64_t)&__p);
      std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)&v84, v85[0]);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v82, (char *)v83);
      *(_QWORD *)&v76 = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
      v24 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a2, *a2 ^ ((int)*a2 >> 31), (uint64_t)&__p, (uint64_t)(a2 + 2));
      if (!v24)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a3, (uint64_t *)v24);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v24 + 24, *(char **)(v24 + 32));
      *(_QWORD *)(v24 + 24) = v24 + 32;
      *(_QWORD *)(v24 + 32) = 0;
      *(_QWORD *)(v24 + 40) = 0;
      turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,std::insert_iterator<std::map<std::string,turi::flex_type_enum>>>((uint64_t)a3, v24 + 24, v24 + 32);
      v26 = *(_QWORD **)(v24 + 56);
      v25 = (_QWORD *)(v24 + 56);
      std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)(v25 - 1), v26);
      *(v25 - 1) = v25;
      *v25 = 0;
      v25[1] = 0;
      turi::deserialize_iterator<turi::iarchive,std::pair<std::string,std::vector<turi::flexible_type>>,std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>>(a3, (uint64_t)(v25 - 1), (uint64_t)v25);
      break;
    case 3:
      memset(&__p, 0, sizeof(__p));
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a3, &__p);
      turi::toolkit_class_registry::get_toolkit_class(*(uint64_t ***)(a1 + 32), (__int128 *)&__p, (uint64_t *)&v76);
      turi::model_base::load((turi::model_base *)v76, a3);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<std::shared_ptr<turi::model_base>>(a2, (uint64_t ***)&v76);
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      break;
    case 4:
      v15 = (turi::unity_sframe *)operator new();
      turi::unity_sframe::unity_sframe(v15);
      std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)&v75, (uint64_t)v15);
      (*(void (**)(std::string::size_type, turi::iarchive *))(*(_QWORD *)v75.__r_.__value_.__l.__data_ + 24))(v75.__r_.__value_.__r.__words[0], a3);
      v76 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      if (v75.__r_.__value_.__l.__size_)
      {
        v16 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&v76, (uint64_t)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a2, (unsigned int *)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
      if (v75.__r_.__value_.__l.__size_)
      {
        v22 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        goto LABEL_59;
      }
      break;
    case 5:
      v40 = (turi::unity_sarray *)operator new();
      turi::unity_sarray::unity_sarray(v40);
      std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)&v75, (uint64_t)v40);
      (*(void (**)(std::string::size_type, turi::iarchive *))(*(_QWORD *)v75.__r_.__value_.__l.__data_ + 24))(v75.__r_.__value_.__r.__words[0], a3);
      v76 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      if (v75.__r_.__value_.__l.__size_)
      {
        v41 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::set((uint64_t *)&v76, (uint64_t)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a2, (unsigned int *)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
      if (v75.__r_.__value_.__l.__size_)
      {
        v46 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldaxr(v46);
        while (__stlxr(v23 - 1, v46));
LABEL_59:
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      break;
    case 6:
      v78 = 0;
      v47 = *((_QWORD *)a3 + 2);
      if (v47)
      {
        v48 = *((_QWORD *)a3 + 3);
        v49 = *(_QWORD *)(v47 + v48);
        v78 = v49;
        *((_QWORD *)a3 + 3) = v48 + 8;
      }
      else
      {
        std::istream::read();
        v49 = v78;
      }
      *((_QWORD *)&v76 + 1) = 0;
      v77 = 0;
      *(_QWORD *)&v76 = (char *)&v76 + 8;
      if (v49)
      {
        v52 = 0;
        do
        {
          memset(&v75, 0, sizeof(v75));
          __p.__r_.__value_.__l.__size_ = 0;
          LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
          __p.__r_.__value_.__s.__data_[20] = 0;
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a3, &v75);
          turi::unity_global::model_variant_deep_load(a1, &__p, a3);
          v80 = &v75;
          v53 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v76, (const void **)&v75.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v53 + 14, (unsigned int *)&__p);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v75.__r_.__value_.__l.__data_);
          ++v52;
        }
        while (v52 < v78);
      }
      boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)&__p.__r_.__value_.__l.__size_, (const void ***)&v76);
      LODWORD(__p.__r_.__value_.__l.__data_) = 6;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a2, (unsigned int *)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v76, *((char **)&v76 + 1));
      break;
    case 7:
      v80 = 0;
      v30 = *((_QWORD *)a3 + 2);
      if (v30)
      {
        v31 = *((_QWORD *)a3 + 3);
        v32 = *(__int128 **)(v30 + v31);
        v80 = (std::string *)v32;
        *((_QWORD *)a3 + 3) = v31 + 8;
      }
      else
      {
        std::istream::read();
        v32 = (__int128 *)v80;
      }
      v76 = 0uLL;
      v77 = 0;
      std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::resize((uint64_t *)&v76, (unint64_t)v32);
      if (v80)
      {
        v50 = 0;
        for (i = 0; i < (unint64_t)v80; ++i)
        {
          __p.__r_.__value_.__l.__size_ = 0;
          LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
          __p.__r_.__value_.__s.__data_[20] = 0;
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          turi::unity_global::model_variant_deep_load(a1, &__p, a3);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v76 + v50), (unsigned int *)&__p);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
          v50 += 80;
        }
      }
      boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(&__p.__r_.__value_.__l.__size_, (uint64_t *)&v76);
      LODWORD(__p.__r_.__value_.__l.__data_) = 7;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a2, (unsigned int *)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
      std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      break;
    default:
      return;
  }
}

void sub_21844E02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::exception a22,int a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a22);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::resize(uint64_t *a1, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (unsigned int *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 80 * a2;
    while (v3 != (unsigned int *)v7)
    {
      v3 -= 20;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v3);
    }
    a1[1] = v7;
  }
}

void turi::unity_global::load_model_impl(uint64_t ***this@<X0>, turi::iarchive *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void ***v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  file_logger *v15;
  file_logger *started;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  _QWORD *v50;
  _QWORD *v51;
  std::locale::__imp *v52;
  _QWORD *v53;
  uint64_t v54;
  std::string *v55;
  __int128 v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  const std::locale::facet *v86;
  unsigned int *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  std::locale::__imp *v119;
  _QWORD *v120;
  uint64_t v121;
  std::string *v122;
  __int128 v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  void *v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  __int128 v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  unsigned int v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  void *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void *v182;
  unint64_t v183;
  unint64_t v184;
  unsigned int *v185;
  unsigned int *v186;
  _QWORD *v187;
  _QWORD *v188;
  std::locale::__imp *v189;
  _QWORD *v190;
  uint64_t v191;
  std::string *v192;
  __int128 v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  void *v207;
  _QWORD *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  unsigned int v216;
  __int128 v217;
  __int128 v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  _QWORD *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  unsigned int v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  _QWORD *v240;
  void *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t v261;
  unsigned int v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  void *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  _QWORD *exception;
  void *__p[2];
  char v280;
  std::string v281;
  std::string __str;
  std::string v283;
  _BYTE v284[13];
  uint64_t v285[2];
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  std::locale v303;
  __int128 v304;
  _OWORD *v305[3];

  v305[2] = *(_OWORD **)MEMORY[0x24BDAC8D0];
  v301 = 0u;
  v302 = 0u;
  v299 = 0u;
  v300 = 0u;
  v297 = 0u;
  v298 = 0u;
  v295 = 0u;
  v296 = 0u;
  v293 = 0u;
  v294 = 0u;
  v291 = 0u;
  v292 = 0u;
  v289 = 0u;
  v290 = 0u;
  v287 = 0u;
  v288 = 0u;
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    v9 = *((_QWORD *)a2 + 3);
    *(_QWORD *)&v287 = *(_QWORD *)(v8 + v9);
    *((_QWORD *)a2 + 3) = v9 + 8;
  }
  else
  {
    std::istream::read();
  }
  if ((unint64_t)v287 ^ 0x584C45444F4D4C47 | BYTE8(v287))
  {
    if ((unint64_t)v287 ^ 0x304C45444F4D4354 | BYTE8(v287))
      turi::unity_global::load_model_impl(turi::iarchive &,BOOL)::$_2::operator()();
    memset(&__str, 0, sizeof(__str));
    turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, &__str);
    v283.__r_.__value_.__l.__size_ = 0;
    LODWORD(v283.__r_.__value_.__r.__words[2]) = 0;
    v283.__r_.__value_.__s.__data_[20] = 0;
    LODWORD(v283.__r_.__value_.__l.__data_) = 0;
    turi::unity_global::model_variant_deep_load((uint64_t)this, (unsigned int *)&v283, a2);
    *(_QWORD *)(a4 + 8) = 0;
    v10 = a4 + 8;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = a4 + 8;
    if (a3)
    {
      v11 = (const void ***)turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t *)&v283);
      std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)&v303, v11);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a4, *(char **)(a4 + 8));
      v12 = v304;
      *(std::locale *)a4 = v303;
      *(_QWORD *)(a4 + 8) = v12;
      v13 = *((_QWORD *)&v304 + 1);
      *(_QWORD *)(a4 + 16) = *((_QWORD *)&v304 + 1);
      if (v13)
      {
        *(_QWORD *)(v12 + 16) = v10;
        v303.__locale_ = (std::locale::__imp *)&v304;
        v304 = 0uLL;
        v12 = 0;
      }
      else
      {
        *(_QWORD *)a4 = v10;
      }
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v303, (char *)v12);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v303, "model");
      __p[0] = &v303;
      v18 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)&v303.__locale_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v18 + 14, (uint64_t *)&v283);
      if (SHIBYTE(v304) < 0)
        operator delete(v303.__locale_);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "archive_version");
    v303.__locale_ = (std::locale::__imp *)__p;
    v19 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v303)+ 14;
    BYTE12(v286) = 0;
    DWORD2(v286) = 0;
    *(_QWORD *)&v286 = 1;
    memset(v305, 0, 13);
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v305, (uint64_t *)&v286);
    *(_OWORD **)((char *)&v304 + 5) = *(_OWORD **)((char *)v305 + 5);
    *(_OWORD **)&v304 = v305[0];
    BYTE12(v304) = BYTE4(v305[1]);
    LODWORD(v303.__locale_) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v19, (unsigned int *)&v303);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v303);
    switch(BYTE12(v286))
    {
      case 2:
        v20 = (unint64_t *)v286;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v23 = v286;
          if ((_QWORD)v286)
          {
            if (*(char *)(v286 + 31) < 0)
              operator delete(*(void **)(v286 + 8));
            v24 = v23;
            v25 = 0x1012C404EF22A49;
            goto LABEL_61;
          }
        }
        break;
      case 3:
        v37 = (unint64_t *)v286;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          v40 = v286;
          if ((_QWORD)v286)
          {
            v41 = *(void **)(v286 + 8);
            if (v41)
            {
              *(_QWORD *)(v286 + 16) = v41;
              operator delete(v41);
            }
            v24 = v40;
            v25 = 0x1080C409938AC02;
            goto LABEL_61;
          }
        }
        break;
      case 4:
        v26 = (unint64_t *)v286;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = v286;
          if ((_QWORD)v286)
          {
            v303.__locale_ = (std::locale::__imp *)(v286 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
            goto LABEL_54;
          }
        }
        break;
      case 5:
        v42 = (unint64_t *)v286;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          v29 = v286;
          if ((_QWORD)v286)
          {
            v303.__locale_ = (std::locale::__imp *)(v286 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
LABEL_54:
            v24 = v29;
            v25 = 0x1020C405E66F15BLL;
            goto LABEL_61;
          }
        }
        break;
      case 8:
        v45 = (unint64_t *)v286;
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          v48 = v286;
          if ((_QWORD)v286)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v286 + 16));
            v24 = v48;
            v36 = -235920773;
            goto LABEL_60;
          }
        }
        break;
      case 9:
        v30 = (unint64_t *)v286;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = v286;
          if ((_QWORD)v286)
          {
            v34 = *(void **)(v286 + 48);
            if (v34)
            {
              *(_QWORD *)(v286 + 56) = v34;
              operator delete(v34);
            }
            v35 = *(void **)(v33 + 24);
            if (v35)
            {
              *(_QWORD *)(v33 + 32) = v35;
              operator delete(v35);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v33 + 8);
            v24 = v33;
            v36 = 2071181815;
LABEL_60:
            v25 = v36 | 0x1030C4000000000;
LABEL_61:
            MEMORY[0x219A19A08](v24, v25);
          }
        }
        break;
      default:
        break;
    }
    if (v280 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "model_name");
    v303.__locale_ = (std::locale::__imp *)__p;
    v49 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v303);
    *(_QWORD *)((char *)&v286 + 5) = 0x200000000000000;
    *(_QWORD *)&v286 = 0;
    v50 = (_QWORD *)operator new();
    v51 = v50;
    *v50 = 0;
    v50[1] = 0;
    v52 = (std::locale::__imp *)(v50 + 1);
    v50[2] = 0;
    v50[3] = 0;
    *(_QWORD *)&v286 = v50;
    *v50 = 1;
    switch(BYTE12(v286))
    {
      case 2:
        if (*v50 != 1)
        {
          v53 = (_QWORD *)operator new();
          v54 = v286;
          *v53 = *(_QWORD *)v286;
          v55 = (std::string *)(v53 + 1);
          if (*(char *)(v54 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v55, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
          }
          else
          {
            v56 = *(_OWORD *)(v54 + 8);
            v53[3] = *(_QWORD *)(v54 + 24);
            *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
          }
          *(_QWORD *)&v286 = v53;
          *v53 = 1;
          do
          {
            v151 = __ldaxr(v51);
            v152 = v151 - 1;
          }
          while (__stlxr(v152, v51));
          if (!v152)
          {
            v61 = 0x1012C404EF22A49;
            if ((*((char *)v51 + 31) & 0x80000000) == 0)
              goto LABEL_192;
            v70 = *(void **)v52;
            goto LABEL_191;
          }
        }
        break;
      case 3:
        if (*v50 != 1)
        {
          v66 = (_QWORD *)operator new();
          v67 = v286;
          *v66 = *(_QWORD *)v286;
          v66[2] = 0;
          v66[3] = 0;
          v66[1] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v66 + 1, *(const void **)(v67 + 8), *(_QWORD *)(v67 + 16), (uint64_t)(*(_QWORD *)(v67 + 16) - *(_QWORD *)(v67 + 8)) >> 3);
          *(_QWORD *)&v286 = v66;
          *v66 = 1;
          do
          {
            v68 = __ldaxr(v51);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v51));
          if (!v69)
          {
            v61 = 0x1080C409938AC02;
            v70 = *(void **)v52;
            if (*(_QWORD *)v52)
            {
              v51[2] = v70;
LABEL_191:
              operator delete(v70);
            }
            goto LABEL_192;
          }
        }
        break;
      case 4:
        if (*v50 != 1)
        {
          v57 = (_QWORD *)operator new();
          v58 = v286;
          *v57 = *(_QWORD *)v286;
          v57[2] = 0;
          v57[3] = 0;
          v57[1] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v57 + 1, *(uint64_t **)(v58 + 8), *(uint64_t **)(v58 + 16), (uint64_t)(*(_QWORD *)(v58 + 16) - *(_QWORD *)(v58 + 8)) >> 4);
          *(_QWORD *)&v286 = v57;
          *v57 = 1;
          do
          {
            v59 = __ldaxr(v51);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v51));
          if (!v60)
          {
            v61 = 0x1020C405E66F15BLL;
            v303.__locale_ = v52;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
            goto LABEL_192;
          }
        }
        break;
      case 5:
        if (*v50 != 1)
        {
          v71 = (_QWORD *)operator new();
          v72 = v286;
          *v71 = *(_QWORD *)v286;
          v71[2] = 0;
          v71[3] = 0;
          v71[1] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v71 + 1, *(uint64_t **)(v72 + 8), *(uint64_t **)(v72 + 16), (uint64_t)(*(_QWORD *)(v72 + 16) - *(_QWORD *)(v72 + 8)) >> 5);
          *(_QWORD *)&v286 = v71;
          *v71 = 1;
          do
          {
            v73 = __ldaxr(v51);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v51));
          if (!v74)
          {
            v61 = 0x1020C405E66F15BLL;
            v303.__locale_ = v52;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
            goto LABEL_192;
          }
        }
        break;
      case 8:
        if (*v50 != 1)
        {
          v75 = operator new();
          v76 = v286;
          *(_QWORD *)v75 = *(_QWORD *)v286;
          *(_QWORD *)(v75 + 8) = *(_QWORD *)(v76 + 8);
          v77 = *(_QWORD *)(v76 + 16);
          *(_QWORD *)(v75 + 16) = v77;
          if (v77)
          {
            v78 = (unsigned int *)(v77 + 8);
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          v80 = *(_OWORD *)(v76 + 24);
          v81 = *(_OWORD *)(v76 + 40);
          *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
          *(_OWORD *)(v75 + 40) = v81;
          *(_OWORD *)(v75 + 24) = v80;
          *(_QWORD *)&v286 = v75;
          *(_QWORD *)v75 = 1;
          do
          {
            v82 = __ldaxr(v51);
            v83 = v82 - 1;
          }
          while (__stlxr(v83, v51));
          if (!v83)
          {
            v61 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)v51 + 2);
            goto LABEL_192;
          }
        }
        break;
      case 9:
        if (*v50 != 1)
        {
          v62 = (_QWORD *)operator new();
          v63 = v286 + 8;
          *v62 = *(_QWORD *)v286;
          turi::flexible_type_impl::ndarray<double>::ndarray(v62 + 1, v63);
          *(_QWORD *)&v286 = v62;
          *v62 = 1;
          do
          {
            v64 = __ldaxr(v51);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v51));
          if (!v65)
          {
            v61 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v51);
LABEL_192:
            MEMORY[0x219A19A08](v51, v61);
          }
        }
        break;
      default:
        break;
    }
    std::string::operator=((std::string *)(v286 + 8), &__str);
    memset(v305, 0, 13);
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v305, (uint64_t *)&v286);
    *(_OWORD **)((char *)&v304 + 5) = *(_OWORD **)((char *)v305 + 5);
    *(_OWORD **)&v304 = v305[0];
    BYTE12(v304) = BYTE4(v305[1]);
    LODWORD(v303.__locale_) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v49 + 14, (unsigned int *)&v303);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v303);
    switch(BYTE12(v286))
    {
      case 2:
        v153 = (unint64_t *)v286;
        do
        {
          v154 = __ldaxr(v153);
          v155 = v154 - 1;
        }
        while (__stlxr(v155, v153));
        if (!v155)
        {
          v156 = v286;
          if ((_QWORD)v286)
          {
            if (*(char *)(v286 + 31) < 0)
              operator delete(*(void **)(v286 + 8));
            v157 = v156;
            v158 = 0x1012C404EF22A49;
            goto LABEL_234;
          }
        }
        break;
      case 3:
        v170 = (unint64_t *)v286;
        do
        {
          v171 = __ldaxr(v170);
          v172 = v171 - 1;
        }
        while (__stlxr(v172, v170));
        if (!v172)
        {
          v173 = v286;
          if ((_QWORD)v286)
          {
            v174 = *(void **)(v286 + 8);
            if (v174)
            {
              *(_QWORD *)(v286 + 16) = v174;
              operator delete(v174);
            }
            v157 = v173;
            v158 = 0x1080C409938AC02;
            goto LABEL_234;
          }
        }
        break;
      case 4:
        v159 = (unint64_t *)v286;
        do
        {
          v160 = __ldaxr(v159);
          v161 = v160 - 1;
        }
        while (__stlxr(v161, v159));
        if (!v161)
        {
          v162 = v286;
          if ((_QWORD)v286)
          {
            v303.__locale_ = (std::locale::__imp *)(v286 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
            goto LABEL_227;
          }
        }
        break;
      case 5:
        v175 = (unint64_t *)v286;
        do
        {
          v176 = __ldaxr(v175);
          v177 = v176 - 1;
        }
        while (__stlxr(v177, v175));
        if (!v177)
        {
          v162 = v286;
          if ((_QWORD)v286)
          {
            v303.__locale_ = (std::locale::__imp *)(v286 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
LABEL_227:
            v157 = v162;
            v158 = 0x1020C405E66F15BLL;
            goto LABEL_234;
          }
        }
        break;
      case 8:
        v178 = (unint64_t *)v286;
        do
        {
          v179 = __ldaxr(v178);
          v180 = v179 - 1;
        }
        while (__stlxr(v180, v178));
        if (!v180)
        {
          v181 = v286;
          if ((_QWORD)v286)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v286 + 16));
            v157 = v181;
            v169 = -235920773;
            goto LABEL_233;
          }
        }
        break;
      case 9:
        v163 = (unint64_t *)v286;
        do
        {
          v164 = __ldaxr(v163);
          v165 = v164 - 1;
        }
        while (__stlxr(v165, v163));
        if (!v165)
        {
          v166 = v286;
          if ((_QWORD)v286)
          {
            v167 = *(void **)(v286 + 48);
            if (v167)
            {
              *(_QWORD *)(v286 + 56) = v167;
              operator delete(v167);
            }
            v168 = *(void **)(v166 + 24);
            if (v168)
            {
              *(_QWORD *)(v166 + 32) = v168;
              operator delete(v168);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v166 + 8);
            v157 = v166;
            v169 = 2071181815;
LABEL_233:
            v158 = v169 | 0x1030C4000000000;
LABEL_234:
            MEMORY[0x219A19A08](v157, v158);
          }
        }
        break;
      default:
        break;
    }
    if (v280 < 0)
      operator delete(__p[0]);
    if (*(_QWORD *)a2)
    {
      if ((*(_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(**(_QWORD **)a2 - 24) + 32) & 5) == 0)
      {
LABEL_239:
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v283);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v182 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_381;
      }
    }
    else if (*((_QWORD *)a2 + 3) <= *((_QWORD *)a2 + 4))
    {
      goto LABEL_239;
    }
    std::string::basic_string[abi:ne180100]<0>(&v303, "Fail to read.");
    __p[0] = &v303;
    turi::unity_global::load_model_impl(turi::iarchive &,BOOL)::$_1::operator()();
  }
  memset(&v283, 0, sizeof(v283));
  memset(&__str, 0, sizeof(__str));
  turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, &v283);
  v14 = (int *)global_logger();
  if (v14[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v14))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v15 = (file_logger *)global_logger();
    started = file_logger::start_stream(v15, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_model_impl", 229, 1);
    v17 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v17 && *((_BYTE *)v17 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"Model name: ", 12);
    if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v281, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
    else
      v281 = v283;
    v84 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v281);
    v85 = pthread_getspecific(*(_QWORD *)(v84 + 592));
    if (v85)
    {
      if (*((_BYTE *)v85 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v85 + *(_QWORD *)(v85[2] - 24) + 16));
        v86 = std::locale::use_facet(&v303, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v86->__vftable[2].~facet_0)(v86, 10);
        std::locale::~locale(&v303);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v84);
        if (*(_DWORD *)(v84 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v281.__r_.__value_.__l.__data_);
  }
  turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, &__str);
  turi::toolkit_class_registry::get_toolkit_class(this[4], (__int128 *)&v283, (uint64_t *)&v286);
  turi::model_base::load((turi::model_base *)v286, a2);
  if (*(_QWORD *)a2)
  {
    if ((*(_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(**(_QWORD **)a2 - 24) + 32) & 5) == 0)
      goto LABEL_105;
LABEL_114:
    std::string::basic_string[abi:ne180100]<0>(&v303, "Fail to read.");
    __p[0] = &v303;
    turi::unity_global::load_model_impl(turi::iarchive &,BOOL)::$_0::operator()();
  }
  if (*((_QWORD *)a2 + 3) > *((_QWORD *)a2 + 4))
    goto LABEL_114;
LABEL_105:
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "archive_version");
  v303.__locale_ = (std::locale::__imp *)__p;
  v87 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v303)+ 14;
  memset(v285, 0, 13);
  memset(v305, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v305, v285);
  *(_OWORD **)((char *)&v304 + 5) = *(_OWORD **)((char *)v305 + 5);
  *(_OWORD **)&v304 = v305[0];
  BYTE12(v304) = BYTE4(v305[1]);
  LODWORD(v303.__locale_) = 0;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v87, (unsigned int *)&v303);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v303);
  switch(BYTE4(v285[1]))
  {
    case 2:
      v88 = (unint64_t *)v285[0];
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        v91 = v285[0];
        if (v285[0])
        {
          if (*(char *)(v285[0] + 31) < 0)
            operator delete(*(void **)(v285[0] + 8));
          v92 = (_QWORD *)v91;
          v93 = 0x1012C404EF22A49;
          goto LABEL_144;
        }
      }
      break;
    case 3:
      v102 = (unint64_t *)v285[0];
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        v105 = v285[0];
        if (v285[0])
        {
          v106 = *(void **)(v285[0] + 8);
          if (v106)
          {
            *(_QWORD *)(v285[0] + 16) = v106;
            operator delete(v106);
          }
          v92 = (_QWORD *)v105;
          v93 = 0x1080C409938AC02;
          goto LABEL_144;
        }
      }
      break;
    case 4:
      v94 = (unint64_t *)v285[0];
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        v97 = v285[0];
        if (v285[0])
        {
          v303.__locale_ = (std::locale::__imp *)(v285[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
          goto LABEL_137;
        }
      }
      break;
    case 5:
      v107 = (unint64_t *)v285[0];
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109)
      {
        v97 = v285[0];
        if (v285[0])
        {
          v303.__locale_ = (std::locale::__imp *)(v285[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
LABEL_137:
          v92 = (_QWORD *)v97;
          v93 = 0x1020C405E66F15BLL;
          goto LABEL_144;
        }
      }
      break;
    case 8:
      v110 = (unint64_t *)v285[0];
      do
      {
        v111 = __ldaxr(v110);
        v112 = v111 - 1;
      }
      while (__stlxr(v112, v110));
      if (!v112)
      {
        v113 = v285[0];
        if (v285[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v285[0] + 16));
          v92 = (_QWORD *)v113;
          v101 = -235920773;
          goto LABEL_143;
        }
      }
      break;
    case 9:
      v98 = (unint64_t *)v285[0];
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100 && v285[0])
      {
        v92 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v285[0]);
        v101 = 2071181815;
LABEL_143:
        v93 = v101 | 0x1030C4000000000;
LABEL_144:
        MEMORY[0x219A19A08](v92, v93);
      }
      break;
    default:
      break;
  }
  if (v280 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model_base");
  v303.__locale_ = (std::locale::__imp *)__p;
  v114 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v303)+ 14;
  v304 = v286;
  if (*((_QWORD *)&v286 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  LODWORD(v303.__locale_) = 3;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v114, (unsigned int *)&v303);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v303);
  if (v280 < 0)
    operator delete(__p[0]);
  *(uint64_t *)((char *)v285 + 5) = 0x200000000000000;
  v285[0] = 0;
  v117 = (_QWORD *)operator new();
  v118 = v117;
  *v117 = 0;
  v117[1] = 0;
  v119 = (std::locale::__imp *)(v117 + 1);
  v117[2] = 0;
  v117[3] = 0;
  v285[0] = (uint64_t)v117;
  *v117 = 1;
  switch(BYTE4(v285[1]))
  {
    case 2:
      if (*v117 != 1)
      {
        v120 = (_QWORD *)operator new();
        v121 = v285[0];
        *v120 = *(_QWORD *)v285[0];
        v122 = (std::string *)(v120 + 1);
        if (*(char *)(v121 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v122, *(const std::string::value_type **)(v121 + 8), *(_QWORD *)(v121 + 16));
        }
        else
        {
          v123 = *(_OWORD *)(v121 + 8);
          v120[3] = *(_QWORD *)(v121 + 24);
          *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
        }
        v285[0] = (uint64_t)v120;
        *v120 = 1;
        do
        {
          v183 = __ldaxr(v118);
          v184 = v183 - 1;
        }
        while (__stlxr(v184, v118));
        if (!v184)
        {
          v128 = 0x1012C404EF22A49;
          if ((*((char *)v118 + 31) & 0x80000000) == 0)
            goto LABEL_250;
          v137 = *(void **)v119;
          goto LABEL_249;
        }
      }
      break;
    case 3:
      if (*v117 != 1)
      {
        v133 = (_QWORD *)operator new();
        v134 = v285[0];
        *v133 = *(_QWORD *)v285[0];
        v133[2] = 0;
        v133[3] = 0;
        v133[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v133 + 1, *(const void **)(v134 + 8), *(_QWORD *)(v134 + 16), (uint64_t)(*(_QWORD *)(v134 + 16) - *(_QWORD *)(v134 + 8)) >> 3);
        v285[0] = (uint64_t)v133;
        *v133 = 1;
        do
        {
          v135 = __ldaxr(v118);
          v136 = v135 - 1;
        }
        while (__stlxr(v136, v118));
        if (!v136)
        {
          v128 = 0x1080C409938AC02;
          v137 = *(void **)v119;
          if (*(_QWORD *)v119)
          {
            v118[2] = v137;
LABEL_249:
            operator delete(v137);
          }
          goto LABEL_250;
        }
      }
      break;
    case 4:
      if (*v117 != 1)
      {
        v124 = (_QWORD *)operator new();
        v125 = v285[0];
        *v124 = *(_QWORD *)v285[0];
        v124[2] = 0;
        v124[3] = 0;
        v124[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v124 + 1, *(uint64_t **)(v125 + 8), *(uint64_t **)(v125 + 16), (uint64_t)(*(_QWORD *)(v125 + 16) - *(_QWORD *)(v125 + 8)) >> 4);
        v285[0] = (uint64_t)v124;
        *v124 = 1;
        do
        {
          v126 = __ldaxr(v118);
          v127 = v126 - 1;
        }
        while (__stlxr(v127, v118));
        if (!v127)
        {
          v128 = 0x1020C405E66F15BLL;
          v303.__locale_ = v119;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
          goto LABEL_250;
        }
      }
      break;
    case 5:
      if (*v117 != 1)
      {
        v138 = (_QWORD *)operator new();
        v139 = v285[0];
        *v138 = *(_QWORD *)v285[0];
        v138[2] = 0;
        v138[3] = 0;
        v138[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v138 + 1, *(uint64_t **)(v139 + 8), *(uint64_t **)(v139 + 16), (uint64_t)(*(_QWORD *)(v139 + 16) - *(_QWORD *)(v139 + 8)) >> 5);
        v285[0] = (uint64_t)v138;
        *v138 = 1;
        do
        {
          v140 = __ldaxr(v118);
          v141 = v140 - 1;
        }
        while (__stlxr(v141, v118));
        if (!v141)
        {
          v128 = 0x1020C405E66F15BLL;
          v303.__locale_ = v119;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
          goto LABEL_250;
        }
      }
      break;
    case 8:
      if (*v117 != 1)
      {
        v142 = operator new();
        v143 = v285[0];
        *(_QWORD *)v142 = *(_QWORD *)v285[0];
        *(_QWORD *)(v142 + 8) = *(_QWORD *)(v143 + 8);
        v144 = *(_QWORD *)(v143 + 16);
        *(_QWORD *)(v142 + 16) = v144;
        if (v144)
        {
          v145 = (unsigned int *)(v144 + 8);
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
        v147 = *(_OWORD *)(v143 + 24);
        v148 = *(_OWORD *)(v143 + 40);
        *(_OWORD *)(v142 + 56) = *(_OWORD *)(v143 + 56);
        *(_OWORD *)(v142 + 40) = v148;
        *(_OWORD *)(v142 + 24) = v147;
        v285[0] = v142;
        *(_QWORD *)v142 = 1;
        do
        {
          v149 = __ldaxr(v118);
          v150 = v149 - 1;
        }
        while (__stlxr(v150, v118));
        if (!v150)
        {
          v128 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v118 + 2);
          goto LABEL_250;
        }
      }
      break;
    case 9:
      if (*v117 != 1)
      {
        v129 = (_QWORD *)operator new();
        v130 = v285[0] + 8;
        *v129 = *(_QWORD *)v285[0];
        turi::flexible_type_impl::ndarray<double>::ndarray(v129 + 1, v130);
        v285[0] = (uint64_t)v129;
        *v129 = 1;
        do
        {
          v131 = __ldaxr(v118);
          v132 = v131 - 1;
        }
        while (__stlxr(v132, v118));
        if (!v132)
        {
          v128 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v118);
LABEL_250:
          MEMORY[0x219A19A08](v118, v128);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(v285[0] + 8), &__str);
  std::string::basic_string[abi:ne180100]<0>(__p, "model_wrapper");
  v305[0] = __p;
  v185 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)&std::piecewise_construct, v305)+ 14;
  memset(v305, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v305, v285);
  *(_OWORD **)((char *)&v304 + 5) = *(_OWORD **)((char *)v305 + 5);
  *(_OWORD **)&v304 = v305[0];
  BYTE12(v304) = BYTE4(v305[1]);
  LODWORD(v303.__locale_) = 0;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v185, (unsigned int *)&v303);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v303);
  if (v280 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model_name");
  v305[0] = __p;
  v186 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)&std::piecewise_construct, v305);
  *(_QWORD *)&v284[5] = 0x200000000000000;
  *(_QWORD *)v284 = 0;
  v187 = (_QWORD *)operator new();
  v188 = v187;
  *v187 = 0;
  v187[1] = 0;
  v189 = (std::locale::__imp *)(v187 + 1);
  v187[2] = 0;
  v187[3] = 0;
  *(_QWORD *)v284 = v187;
  *v187 = 1;
  switch(v284[12])
  {
    case 2:
      if (*v187 != 1)
      {
        v190 = (_QWORD *)operator new();
        v191 = *(_QWORD *)v284;
        *v190 = **(_QWORD **)v284;
        v192 = (std::string *)(v190 + 1);
        if (*(char *)(v191 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v192, *(const std::string::value_type **)(v191 + 8), *(_QWORD *)(v191 + 16));
        }
        else
        {
          v193 = *(_OWORD *)(v191 + 8);
          v190[3] = *(_QWORD *)(v191 + 24);
          *(_OWORD *)&v192->__r_.__value_.__l.__data_ = v193;
        }
        *(_QWORD *)v284 = v190;
        *v190 = 1;
        do
        {
          v221 = __ldaxr(v188);
          v222 = v221 - 1;
        }
        while (__stlxr(v222, v188));
        if (!v222)
        {
          v198 = 0x1012C404EF22A49;
          if ((*((char *)v188 + 31) & 0x80000000) == 0)
            goto LABEL_293;
          v207 = *(void **)v189;
          goto LABEL_292;
        }
      }
      break;
    case 3:
      if (*v187 != 1)
      {
        v203 = (_QWORD *)operator new();
        v204 = *(_QWORD *)v284;
        *v203 = **(_QWORD **)v284;
        v203[2] = 0;
        v203[3] = 0;
        v203[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v203 + 1, *(const void **)(v204 + 8), *(_QWORD *)(v204 + 16), (uint64_t)(*(_QWORD *)(v204 + 16) - *(_QWORD *)(v204 + 8)) >> 3);
        *(_QWORD *)v284 = v203;
        *v203 = 1;
        do
        {
          v205 = __ldaxr(v188);
          v206 = v205 - 1;
        }
        while (__stlxr(v206, v188));
        if (!v206)
        {
          v198 = 0x1080C409938AC02;
          v207 = *(void **)v189;
          if (*(_QWORD *)v189)
          {
            v188[2] = v207;
LABEL_292:
            operator delete(v207);
          }
          goto LABEL_293;
        }
      }
      break;
    case 4:
      if (*v187 != 1)
      {
        v194 = (_QWORD *)operator new();
        v195 = *(_QWORD *)v284;
        *v194 = **(_QWORD **)v284;
        v194[2] = 0;
        v194[3] = 0;
        v194[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v194 + 1, *(uint64_t **)(v195 + 8), *(uint64_t **)(v195 + 16), (uint64_t)(*(_QWORD *)(v195 + 16) - *(_QWORD *)(v195 + 8)) >> 4);
        *(_QWORD *)v284 = v194;
        *v194 = 1;
        do
        {
          v196 = __ldaxr(v188);
          v197 = v196 - 1;
        }
        while (__stlxr(v197, v188));
        if (!v197)
        {
          v198 = 0x1020C405E66F15BLL;
          v303.__locale_ = v189;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
          goto LABEL_293;
        }
      }
      break;
    case 5:
      if (*v187 != 1)
      {
        v208 = (_QWORD *)operator new();
        v209 = *(_QWORD *)v284;
        *v208 = **(_QWORD **)v284;
        v208[2] = 0;
        v208[3] = 0;
        v208[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v208 + 1, *(uint64_t **)(v209 + 8), *(uint64_t **)(v209 + 16), (uint64_t)(*(_QWORD *)(v209 + 16) - *(_QWORD *)(v209 + 8)) >> 5);
        *(_QWORD *)v284 = v208;
        *v208 = 1;
        do
        {
          v210 = __ldaxr(v188);
          v211 = v210 - 1;
        }
        while (__stlxr(v211, v188));
        if (!v211)
        {
          v198 = 0x1020C405E66F15BLL;
          v303.__locale_ = v189;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
          goto LABEL_293;
        }
      }
      break;
    case 8:
      if (*v187 != 1)
      {
        v212 = operator new();
        v213 = *(_QWORD *)v284;
        *(_QWORD *)v212 = **(_QWORD **)v284;
        *(_QWORD *)(v212 + 8) = *(_QWORD *)(v213 + 8);
        v214 = *(_QWORD *)(v213 + 16);
        *(_QWORD *)(v212 + 16) = v214;
        if (v214)
        {
          v215 = (unsigned int *)(v214 + 8);
          do
            v216 = __ldxr(v215);
          while (__stxr(v216 + 1, v215));
        }
        v217 = *(_OWORD *)(v213 + 24);
        v218 = *(_OWORD *)(v213 + 40);
        *(_OWORD *)(v212 + 56) = *(_OWORD *)(v213 + 56);
        *(_OWORD *)(v212 + 40) = v218;
        *(_OWORD *)(v212 + 24) = v217;
        *(_QWORD *)v284 = v212;
        *(_QWORD *)v212 = 1;
        do
        {
          v219 = __ldaxr(v188);
          v220 = v219 - 1;
        }
        while (__stlxr(v220, v188));
        if (!v220)
        {
          v198 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v188 + 2);
          goto LABEL_293;
        }
      }
      break;
    case 9:
      if (*v187 != 1)
      {
        v199 = (_QWORD *)operator new();
        v200 = *(_QWORD *)v284 + 8;
        *v199 = **(_QWORD **)v284;
        turi::flexible_type_impl::ndarray<double>::ndarray(v199 + 1, v200);
        *(_QWORD *)v284 = v199;
        *v199 = 1;
        do
        {
          v201 = __ldaxr(v188);
          v202 = v201 - 1;
        }
        while (__stlxr(v202, v188));
        if (!v202)
        {
          v198 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v188);
LABEL_293:
          MEMORY[0x219A19A08](v188, v198);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*(_QWORD *)v284 + 8), &v283);
  memset(v305, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v305, (uint64_t *)v284);
  *(_OWORD **)((char *)&v304 + 5) = *(_OWORD **)((char *)v305 + 5);
  *(_OWORD **)&v304 = v305[0];
  BYTE12(v304) = BYTE4(v305[1]);
  LODWORD(v303.__locale_) = 0;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v186 + 14, (unsigned int *)&v303);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v303);
  switch(v284[12])
  {
    case 2:
      v223 = *(unint64_t **)v284;
      do
      {
        v224 = __ldaxr(v223);
        v225 = v224 - 1;
      }
      while (__stlxr(v225, v223));
      if (!v225)
      {
        v226 = *(_QWORD **)v284;
        if (*(_QWORD *)v284)
        {
          if (*(char *)(*(_QWORD *)v284 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v284 + 8));
          v227 = v226;
          v228 = 0x1012C404EF22A49;
          goto LABEL_331;
        }
      }
      break;
    case 3:
      v237 = *(unint64_t **)v284;
      do
      {
        v238 = __ldaxr(v237);
        v239 = v238 - 1;
      }
      while (__stlxr(v239, v237));
      if (!v239)
      {
        v240 = *(_QWORD **)v284;
        if (*(_QWORD *)v284)
        {
          v241 = *(void **)(*(_QWORD *)v284 + 8);
          if (v241)
          {
            *(_QWORD *)(*(_QWORD *)v284 + 16) = v241;
            operator delete(v241);
          }
          v227 = v240;
          v228 = 0x1080C409938AC02;
          goto LABEL_331;
        }
      }
      break;
    case 4:
      v229 = *(unint64_t **)v284;
      do
      {
        v230 = __ldaxr(v229);
        v231 = v230 - 1;
      }
      while (__stlxr(v231, v229));
      if (!v231)
      {
        v232 = *(_QWORD **)v284;
        if (*(_QWORD *)v284)
        {
          v303.__locale_ = (std::locale::__imp *)(*(_QWORD *)v284 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
          goto LABEL_324;
        }
      }
      break;
    case 5:
      v242 = *(unint64_t **)v284;
      do
      {
        v243 = __ldaxr(v242);
        v244 = v243 - 1;
      }
      while (__stlxr(v244, v242));
      if (!v244)
      {
        v232 = *(_QWORD **)v284;
        if (*(_QWORD *)v284)
        {
          v303.__locale_ = (std::locale::__imp *)(*(_QWORD *)v284 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
LABEL_324:
          v227 = v232;
          v228 = 0x1020C405E66F15BLL;
          goto LABEL_331;
        }
      }
      break;
    case 8:
      v245 = *(unint64_t **)v284;
      do
      {
        v246 = __ldaxr(v245);
        v247 = v246 - 1;
      }
      while (__stlxr(v247, v245));
      if (!v247)
      {
        v248 = *(_QWORD **)v284;
        if (*(_QWORD *)v284)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v284 + 16));
          v227 = v248;
          v236 = -235920773;
          goto LABEL_330;
        }
      }
      break;
    case 9:
      v233 = *(unint64_t **)v284;
      do
      {
        v234 = __ldaxr(v233);
        v235 = v234 - 1;
      }
      while (__stlxr(v235, v233));
      if (!v235 && *(_QWORD *)v284)
      {
        v227 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v284);
        v236 = 2071181815;
LABEL_330:
        v228 = v236 | 0x1030C4000000000;
LABEL_331:
        MEMORY[0x219A19A08](v227, v228);
      }
      break;
    default:
      break;
  }
  if (v280 < 0)
    operator delete(__p[0]);
  switch(BYTE4(v285[1]))
  {
    case 2:
      v249 = (unint64_t *)v285[0];
      do
      {
        v250 = __ldaxr(v249);
        v251 = v250 - 1;
      }
      while (__stlxr(v251, v249));
      if (!v251)
      {
        v252 = v285[0];
        if (v285[0])
        {
          if (*(char *)(v285[0] + 31) < 0)
            operator delete(*(void **)(v285[0] + 8));
          v253 = (_QWORD *)v252;
          v254 = 0x1012C404EF22A49;
          goto LABEL_371;
        }
      }
      break;
    case 3:
      v263 = (unint64_t *)v285[0];
      do
      {
        v264 = __ldaxr(v263);
        v265 = v264 - 1;
      }
      while (__stlxr(v265, v263));
      if (!v265)
      {
        v266 = v285[0];
        if (v285[0])
        {
          v267 = *(void **)(v285[0] + 8);
          if (v267)
          {
            *(_QWORD *)(v285[0] + 16) = v267;
            operator delete(v267);
          }
          v253 = (_QWORD *)v266;
          v254 = 0x1080C409938AC02;
          goto LABEL_371;
        }
      }
      break;
    case 4:
      v255 = (unint64_t *)v285[0];
      do
      {
        v256 = __ldaxr(v255);
        v257 = v256 - 1;
      }
      while (__stlxr(v257, v255));
      if (!v257)
      {
        v258 = v285[0];
        if (v285[0])
        {
          v303.__locale_ = (std::locale::__imp *)(v285[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
          goto LABEL_364;
        }
      }
      break;
    case 5:
      v268 = (unint64_t *)v285[0];
      do
      {
        v269 = __ldaxr(v268);
        v270 = v269 - 1;
      }
      while (__stlxr(v270, v268));
      if (!v270)
      {
        v258 = v285[0];
        if (v285[0])
        {
          v303.__locale_ = (std::locale::__imp *)(v285[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
LABEL_364:
          v253 = (_QWORD *)v258;
          v254 = 0x1020C405E66F15BLL;
          goto LABEL_371;
        }
      }
      break;
    case 8:
      v271 = (unint64_t *)v285[0];
      do
      {
        v272 = __ldaxr(v271);
        v273 = v272 - 1;
      }
      while (__stlxr(v273, v271));
      if (!v273)
      {
        v274 = v285[0];
        if (v285[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v285[0] + 16));
          v253 = (_QWORD *)v274;
          v262 = -235920773;
          goto LABEL_370;
        }
      }
      break;
    case 9:
      v259 = (unint64_t *)v285[0];
      do
      {
        v260 = __ldaxr(v259);
        v261 = v260 - 1;
      }
      while (__stlxr(v261, v259));
      if (!v261 && v285[0])
      {
        v253 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v285[0]);
        v262 = 2071181815;
LABEL_370:
        v254 = v262 | 0x1030C4000000000;
LABEL_371:
        MEMORY[0x219A19A08](v253, v254);
      }
      break;
    default:
      break;
  }
  v275 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
  if (*((_QWORD *)&v286 + 1))
  {
    v276 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
  {
    v182 = (void *)v283.__r_.__value_.__r.__words[0];
LABEL_381:
    operator delete(v182);
  }
}

void sub_21844FF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,char a43,uint64_t a44,int a45,char a46,uint64_t a47,int a48,char a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;

  MEMORY[0x219A19A08](v50, 0x1012C404EF22A49);
  switch(a43)
  {
    case 2:
      do
      {
        v53 = __ldaxr((unint64_t *)a41);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, (unint64_t *)a41));
      if (!v54 && a41)
      {
        if (*(char *)(a41 + 31) < 0)
          operator delete(*(void **)(a41 + 8));
        MEMORY[0x219A19A08](a41, 0x1012C404EF22A49);
      }
      goto LABEL_33;
    case 3:
      do
      {
        v62 = __ldaxr((unint64_t *)a41);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, (unint64_t *)a41));
      if (v63 || !a41)
        goto LABEL_33;
      v64 = *(void **)(a41 + 8);
      if (v64)
      {
        *(_QWORD *)(a41 + 16) = v64;
        operator delete(v64);
      }
      v60 = (_QWORD *)a41;
      v65 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      do
      {
        v55 = __ldaxr((unint64_t *)a41);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, (unint64_t *)a41));
      if (v56)
        goto LABEL_33;
      v57 = a41;
      if (!a41)
        goto LABEL_33;
      *(_QWORD *)(v51 - 184) = a41 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 184));
      goto LABEL_26;
    case 5:
      do
      {
        v66 = __ldaxr((unint64_t *)a41);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, (unint64_t *)a41));
      if (v67)
        goto LABEL_33;
      v57 = a41;
      if (!a41)
        goto LABEL_33;
      *(_QWORD *)(v51 - 184) = a41 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 184));
LABEL_26:
      v60 = (_QWORD *)v57;
      v65 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      do
      {
        v68 = __ldaxr((unint64_t *)a41);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, (unint64_t *)a41));
      if (v69 || !a41)
        goto LABEL_33;
      boost::detail::shared_count::~shared_count((unsigned int **)(a41 + 16));
      v60 = (_QWORD *)a41;
      v61 = -235920773;
      goto LABEL_31;
    case 9:
      do
      {
        v58 = __ldaxr((unint64_t *)a41);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, (unint64_t *)a41));
      if (v59 || !a41)
        goto LABEL_33;
      v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a41);
      v61 = 2071181815;
LABEL_31:
      v65 = v61 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x219A19A08](v60, v65);
LABEL_33:
      if (a15 < 0)
        operator delete(__p);
      switch(a46)
      {
        case 2:
          do
          {
            v70 = __ldaxr((unint64_t *)a44);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, (unint64_t *)a44));
          if (v71 || !a44)
            goto LABEL_68;
          if (*(char *)(a44 + 31) < 0)
            operator delete(*(void **)(a44 + 8));
          v77 = (_QWORD *)a44;
          v82 = 0x1012C404EF22A49;
          goto LABEL_67;
        case 3:
          do
          {
            v79 = __ldaxr((unint64_t *)a44);
            v80 = v79 - 1;
          }
          while (__stlxr(v80, (unint64_t *)a44));
          if (v80 || !a44)
            goto LABEL_68;
          v81 = *(void **)(a44 + 8);
          if (v81)
          {
            *(_QWORD *)(a44 + 16) = v81;
            operator delete(v81);
          }
          v77 = (_QWORD *)a44;
          v82 = 0x1080C409938AC02;
          goto LABEL_67;
        case 4:
          do
          {
            v72 = __ldaxr((unint64_t *)a44);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, (unint64_t *)a44));
          if (v73)
            goto LABEL_68;
          v74 = a44;
          if (!a44)
            goto LABEL_68;
          *(_QWORD *)(v51 - 184) = a44 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 184));
          goto LABEL_56;
        case 5:
          do
          {
            v83 = __ldaxr((unint64_t *)a44);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, (unint64_t *)a44));
          if (v84)
            goto LABEL_68;
          v74 = a44;
          if (!a44)
            goto LABEL_68;
          *(_QWORD *)(v51 - 184) = a44 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 184));
LABEL_56:
          v77 = (_QWORD *)v74;
          v82 = 0x1020C405E66F15BLL;
          goto LABEL_67;
        case 8:
          do
          {
            v85 = __ldaxr((unint64_t *)a44);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, (unint64_t *)a44));
          if (v86 || !a44)
            goto LABEL_68;
          boost::detail::shared_count::~shared_count((unsigned int **)(a44 + 16));
          v77 = (_QWORD *)a44;
          v78 = -235920773;
          goto LABEL_61;
        case 9:
          do
          {
            v75 = __ldaxr((unint64_t *)a44);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, (unint64_t *)a44));
          if (v76 || !a44)
            goto LABEL_68;
          v77 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a44);
          v78 = 2071181815;
LABEL_61:
          v82 = v78 | 0x1030C4000000000;
LABEL_67:
          MEMORY[0x219A19A08](v77, v82);
LABEL_68:
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v49, *(char **)(v49 + 8));
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
          if (a27 < 0)
            operator delete(a22);
          if (a33 < 0)
            operator delete(a28);
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_68;
      }
    default:
      goto LABEL_33;
  }
}

void turi::unity_global::load_model(uint64_t ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  std::string *v13;
  int data;
  int v15;
  BOOL v17;
  _QWORD *exception;
  std::string v19;
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __n128 __p;
  char v28;
  std::locale v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_model", 274, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Load model from ", 16);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v26 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v26, &__p);
    v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet(&v29, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v29);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v28 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  v29.__locale_ = (std::locale::__imp *)-1;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v34;
  v34[0] = 0;
  v34[1] = 0;
  v39 = 0;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  turi::dir_archive::open_directory_for_read((uint64_t)&v29, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  memset(&v24, 0, sizeof(v24));
  std::string::basic_string[abi:ne180100]<0>(v22, "contents");
  if (!turi::dir_archive::get_metadata((uint64_t)&v29, (uint64_t)v22, &v24))
  {
    turi::unity_sarray::construct_from_sarray_index((uint64_t)v22);
    goto LABEL_41;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v24.__r_.__value_.__l.__size_ == 5)
    {
      v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
      goto LABEL_27;
    }
LABEL_33:
    v17 = 1;
    goto LABEL_34;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) != 5)
    goto LABEL_33;
  v13 = &v24;
LABEL_27:
  data = (int)v13->__r_.__value_.__l.__data_;
  v15 = v13->__r_.__value_.__s.__data_[4];
  v17 = data != 1701080941 || v15 != 108;
LABEL_34:
  if (v23 < 0)
    operator delete(v22[0]);
  if (v17)
LABEL_41:
    turi::unity_global::load_model(std::string const&)::$_0::operator()();
  v19.__r_.__value_.__r.__words[0] = turi::dir_archive::get_input_stream((turi::dir_archive *)&v29);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = (unint64_t)&v29;
  v20 = 0;
  v21 = 0;
  turi::unity_global::load_model_impl(a1, (turi::iarchive *)&v19, 1, a3);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  turi::dir_archive::~dir_archive((turi::dir_archive *)&v29);
}

void sub_21845117C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x218451254);
}

void sub_218451214()
{
  __cxa_end_catch();
  JUMPOUT(0x218451254);
}

void sub_218451220(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x218451254);
}

void turi::unity_global::load_model_from_data(uint64_t ***a1@<X0>, std::locale::__imp *a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *exception;
  std::locale v13;
  __int128 v14;
  __int128 v15;

  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_model_from_data", 297, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Load model from data", 20);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v13.__locale_ = a2;
  v14 = 0u;
  v15 = 0u;
  turi::unity_global::load_model_impl(a1, (turi::iarchive *)&v13, 0, a3);
}

void sub_2184513D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_global::save_model(uint64_t a1, _QWORD *a2, const void ***a3, uint64_t a4)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  int *v15;
  file_logger *v16;
  file_logger *v17;
  _QWORD *v18;
  const char *v19;
  char *v20;
  _QWORD *v21;
  size_t v22;
  size_t v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  turi::general_ofstream *output_stream;
  _QWORD *exception;
  _QWORD *v34;
  const void *v35[2];
  __int128 v36;
  __int128 v37;
  std::string v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  std::string v43;
  std::string v44;
  __n128 __p;
  char v46;
  std::locale v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  const void **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model", 319, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Save model to ", 14);
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v44 = *(std::string *)a4;
    turi::sanitize_url((__n128 *)&v44, &__p);
    v12 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v13 = pthread_getspecific(*(_QWORD *)(v12 + 592));
    if (v13)
    {
      if (*((_BYTE *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(v13[2] - 24) + 16));
        v14 = std::locale::use_facet(&v47, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v12);
        if (*(_DWORD *)(v12 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v46 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }
  v15 = (int *)global_logger();
  if (v15[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v15))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v16 = (file_logger *)global_logger();
    v17 = file_logger::start_stream(v16, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model", 320, 1);
    v18 = pthread_getspecific(*((_QWORD *)v17 + 74));
    if (v18 && *((_BYTE *)v18 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Model name: ", 12);
    v19 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    v20 = (char *)pthread_getspecific(*((_QWORD *)v17 + 74));
    if (v20)
    {
      if (v20[280])
      {
        v21 = v20 + 16;
        v22 = strlen(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v19, v22);
        v23 = strlen(v19);
        if (v23)
        {
          if (v19[v23 - 1] == 10)
            file_logger::stream_flush(v17);
        }
      }
    }
    v24 = pthread_getspecific(*((_QWORD *)v17 + 74));
    if (v24)
    {
      if (*((_BYTE *)v24 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(v24[2] - 24) + 16));
        v25 = std::locale::use_facet(&v47, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v17);
        if (*((_DWORD *)v17 + 150) == 7)
        {
          __print_back_trace();
          v34 = __cxa_allocate_exception(8uLL);
          *v34 = "LOG_FATAL encountered";
          __cxa_throw(v34, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v47.__locale_ = (std::locale::__imp *)-1;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = v52;
  v52[0] = 0;
  v52[1] = 0;
  v57 = 0;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v43 = *(std::string *)a4;
  turi::dir_archive::open_directory_for_write((uint64_t)&v47, (uint64_t)&v43, 0);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v41, "contents");
  std::string::basic_string[abi:ne180100]<0>(v39, "model");
  turi::dir_archive::set_metadata((uint64_t)&v47, (uint64_t)v41, (uint64_t)v39);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = 0uLL;
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]<0>(v35, "side_data");
  v58 = v35;
  v26 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v38, v35, (uint64_t)&std::piecewise_construct, (_OWORD **)&v58);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(&v59, a3);
  LODWORD(v58) = 6;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v26 + 14, (unsigned int *)&v58);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v58);
  if (SBYTE7(v36) < 0)
    operator delete((void *)v35[0]);
  std::string::basic_string[abi:ne180100]<0>(v35, "model");
  v58 = v35;
  v27 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v38, v35, (uint64_t)&std::piecewise_construct, (_OWORD **)&v58)+ 14;
  v28 = a2[1];
  v59 = (uint64_t *)*a2;
  v60 = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  LODWORD(v58) = 3;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v27, (unsigned int *)&v58);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v58);
  if (SBYTE7(v36) < 0)
    operator delete((void *)v35[0]);
  v35[0] = (const void *)turi::dir_archive::get_output_stream((turi::dir_archive *)&v47);
  v35[1] = &v47;
  v36 = 0u;
  v37 = 0u;
  if (v35[0])
  {
    std::ostream::write();
  }
  else
  {
    *((_QWORD *)&v37 + 1) = 16;
    *((_QWORD *)&v36 + 1) = malloc_type_realloc(0, 0x10uLL, 0xF6EA6B1uLL);
    *(_QWORD *)(*((_QWORD *)&v36 + 1) + v37) = 0x304C45444F4D4354;
    *(_QWORD *)&v37 = v37 + 8;
  }
  v31 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  std::string::basic_string[abi:ne180100]<0>(&v58, v31);
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)v35, (const void **)&v58);
  if (SHIBYTE(v60) < 0)
    operator delete(v58);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(&v59, (const void ***)&v38);
  LODWORD(v58) = 6;
  turi::unity_global::model_variant_deep_save(a1, (uint64_t *)&v58, (uint64_t)v35);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v58);
  output_stream = (turi::general_ofstream *)turi::dir_archive::get_output_stream((turi::dir_archive *)&v47);
  if (turi::general_ofstream::fail(output_stream))
  {
    std::string::basic_string[abi:ne180100]<0>(&v58, "Fail to write.");
    turi::unity_global::save_model(std::shared_ptr<turi::model_base>,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,std::string const&)::$_0::operator()();
  }
  turi::dir_archive::close((turi::dir_archive *)&v47);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v38, (char *)v38.__r_.__value_.__l.__size_);
  turi::dir_archive::~dir_archive((turi::dir_archive *)&v47);
}

void sub_218451E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218451F00(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218451F0C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218451F18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218451F24(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void turi::unity_global::save_model_to_data(uint64_t a1, _QWORD *a2, std::string::size_type a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  int *v12;
  file_logger *v13;
  file_logger *v14;
  _QWORD *v15;
  const char *v16;
  char *v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  char *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *exception;
  _QWORD *v28;
  std::string v29;
  __int128 v30;
  uint64_t v31;
  std::locale v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model_to_data", 354, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Save model to data", 18);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v32, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v32);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v13 = (file_logger *)global_logger();
    v14 = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model_to_data", 355, 1);
    v15 = pthread_getspecific(*((_QWORD *)v14 + 74));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Model name: ", 12);
    v16 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    v17 = (char *)pthread_getspecific(*((_QWORD *)v14 + 74));
    if (v17)
    {
      if (v17[280])
      {
        v18 = v17 + 16;
        v19 = strlen(v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v16, v19);
        v20 = strlen(v16);
        if (v20)
        {
          if (v16[v20 - 1] == 10)
            file_logger::stream_flush(v14);
        }
      }
    }
    v21 = pthread_getspecific(*((_QWORD *)v14 + 74));
    if (v21)
    {
      if (*((_BYTE *)v21 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(v21[2] - 24) + 16));
        v22 = std::locale::use_facet(&v32, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(&v32);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v14);
        if (*((_DWORD *)v14 + 150) == 7)
        {
          __print_back_trace();
          v28 = __cxa_allocate_exception(8uLL);
          *v28 = "LOG_FATAL encountered";
          __cxa_throw(v28, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v29.__r_.__value_.__r.__words[0] = a3;
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0u;
  v30 = 0u;
  v31 = 0;
  std::ostream::write();
  v23 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  std::string::basic_string[abi:ne180100]<0>(&v32, v23);
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)&v29, (const void **)&v32.__locale_);
  if (SHIBYTE(v34) < 0)
    operator delete(v32.__locale_);
  v24 = a2[1];
  v33 = *a2;
  v34 = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  LODWORD(v32.__locale_) = 3;
  turi::unity_global::model_variant_deep_save(a1, (uint64_t *)&v32, (uint64_t)&v29);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v32);
  if (v29.__r_.__value_.__r.__words[0])
  {
    if ((*(_BYTE *)(v29.__r_.__value_.__r.__words[0] + *(_QWORD *)(*(_QWORD *)v29.__r_.__value_.__l.__data_ - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "Fail to write.");
      turi::unity_global::save_model_to_data(std::shared_ptr<turi::model_base>,std::ostream &)::$_0::operator()();
    }
  }
}

void sub_218452440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218452490(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_21845249C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void turi::unity_global::save_model2(uint64_t a1, uint64_t a2, const void ***a3, uint64_t a4)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  int *v15;
  file_logger *v16;
  file_logger *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  unsigned int *v22;
  turi::general_ofstream *output_stream;
  _QWORD *exception;
  _QWORD *v25;
  const void *v26[2];
  __int128 v27;
  __int128 v28;
  std::string v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  std::string v34;
  std::string v35;
  std::string v36;
  __n128 __p;
  char v38;
  std::locale v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  const void **v50;
  uint64_t *v51[10];

  v51[9] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model2", 383, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Save model to ", 14);
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v36 = *(std::string *)a4;
    turi::sanitize_url((__n128 *)&v36, &__p);
    v12 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v13 = pthread_getspecific(*(_QWORD *)(v12 + 592));
    if (v13)
    {
      if (*((_BYTE *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(v13[2] - 24) + 16));
        v14 = std::locale::use_facet(&v39, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v39);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v12);
        if (*(_DWORD *)(v12 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v38 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  v15 = (int *)global_logger();
  if (v15[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v15))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v16 = (file_logger *)global_logger();
    v17 = file_logger::start_stream(v16, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model2", 384, 1);
    v18 = pthread_getspecific(*((_QWORD *)v17 + 74));
    if (v18 && *((_BYTE *)v18 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Model name: ", 12);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v35 = *(std::string *)a2;
    v19 = file_logger::operator<<<std::string>((uint64_t)v17, (uint64_t)&v35);
    v20 = pthread_getspecific(*(_QWORD *)(v19 + 592));
    if (v20)
    {
      if (*((_BYTE *)v20 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(v20[2] - 24) + 16));
        v21 = std::locale::use_facet(&v39, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v39);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v19);
        if (*(_DWORD *)(v19 + 600) == 7)
        {
          __print_back_trace();
          v25 = __cxa_allocate_exception(8uLL);
          *v25 = "LOG_FATAL encountered";
          __cxa_throw(v25, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  v39.__locale_ = (std::locale::__imp *)-1;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = v44;
  v44[0] = 0;
  v44[1] = 0;
  v49 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v34 = *(std::string *)a4;
  turi::dir_archive::open_directory_for_write((uint64_t)&v39, (uint64_t)&v34, 0);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v32, "contents");
  std::string::basic_string[abi:ne180100]<0>(v30, "model");
  turi::dir_archive::set_metadata((uint64_t)&v39, (uint64_t)v32, (uint64_t)v30);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0uLL;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]<0>(v26, "side_data");
  v50 = v26;
  v22 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v29, v26, (uint64_t)&std::piecewise_construct, (_OWORD **)&v50);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(v51, a3);
  LODWORD(v50) = 6;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v22 + 14, (unsigned int *)&v50);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v50);
  if (SBYTE7(v27) < 0)
    operator delete((void *)v26[0]);
  v26[0] = (const void *)turi::dir_archive::get_output_stream((turi::dir_archive *)&v39);
  v26[1] = &v39;
  v27 = 0u;
  v28 = 0u;
  if (v26[0])
  {
    std::ostream::write();
  }
  else
  {
    *((_QWORD *)&v28 + 1) = 16;
    *((_QWORD *)&v27 + 1) = malloc_type_realloc(0, 0x10uLL, 0xF6EA6B1uLL);
    *(_QWORD *)(*((_QWORD *)&v27 + 1) + v28) = 0x304C45444F4D4354;
    *(_QWORD *)&v28 = v28 + 8;
  }
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)v26, (const void **)a2);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(v51, (const void ***)&v29);
  LODWORD(v50) = 6;
  turi::unity_global::model_variant_deep_save(a1, (uint64_t *)&v50, (uint64_t)v26);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v50);
  output_stream = (turi::general_ofstream *)turi::dir_archive::get_output_stream((turi::dir_archive *)&v39);
  if (turi::general_ofstream::fail(output_stream))
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "Fail to write.");
    turi::unity_global::save_model2(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,std::string const&)::$_0::operator()();
  }
  turi::dir_archive::close((turi::dir_archive *)&v39);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v29, (char *)v29.__r_.__value_.__l.__size_);
  turi::dir_archive::~dir_archive((turi::dir_archive *)&v39);
}

void sub_218452D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218452DEC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218452DF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218452E04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218452E10(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x218452E18);
  __clang_call_terminate(a1);
}

void turi::unity_global::list_toolkit_functions(turi::toolkit_function_registry ***this@<X0>, uint64_t *a2@<X8>)
{
  turi::toolkit_function_registry::available_toolkit_functions(this[3], a2);
}

uint64_t *turi::unity_global::describe_toolkit_function@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t toolkit_function_info;
  std::string __p;

  v4 = *(_QWORD *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  toolkit_function_info = turi::toolkit_function_registry::get_toolkit_function_info(v4, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!toolkit_function_info)
    turi::unity_global::describe_toolkit_function(std::string)::$_0::operator()();
  return std::map<std::string,turi::flexible_type>::map[abi:ne180100](a3, toolkit_function_info + 48);
}

uint64_t *turi::unity_global::describe_toolkit_class@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  return turi::toolkit_class_registry::get_toolkit_class_description(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t *turi::unity_global::create_toolkit_class@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  return turi::toolkit_class_registry::get_toolkit_class(*(uint64_t ***)(a1 + 32), a2, a3);
}

void turi::unity_global::run_toolkit(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  uint64_t toolkit_function_info;
  __int128 **v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD *exception;
  std::string __p;
  std::string v28;
  std::locale v29;
  char *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;
  __int128 *v34[3];
  __int128 **v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "run_toolkit", 441, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Running toolkit: ", 17);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v28 = *(std::string *)a2;
    v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v28);
    v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet(&v29, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v29);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  toolkit_function_info = turi::toolkit_function_registry::get_toolkit_function_info(v13, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!toolkit_function_info)
  {
    v25 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v25, "Toolkit not found");
  }
  turi::toolkit_function_invocation::toolkit_function_invocation((turi::toolkit_function_invocation *)&v29);
  v33 = *(_QWORD *)(a1 + 32);
  v34[0] = (__int128 *)&off_24D941FA8;
  v35 = v34;
  std::__function::__value_func<void ()(std::string)>::swap[abi:ne180100](v34, v31);
  v15 = v35;
  if (v35 == v34)
  {
    v16 = 4;
    v15 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_25;
    v16 = 5;
  }
  (*((void (**)(void))*v15 + v16))();
LABEL_25:
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__move_assign((uint64_t)&v29, a3);
  v17 = *(_QWORD **)(toolkit_function_info + 24);
  if (v17 != (_QWORD *)(toolkit_function_info + 32))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v29, (const void **)v17 + 4))
      {
        v34[0] = (__int128 *)(v17 + 4);
        v18 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v29, (const void **)v17 + 4, (uint64_t)&std::piecewise_construct, v34);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v18 + 14, v17 + 7);
      }
      v19 = (_QWORD *)v17[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v17[2];
          v21 = *v20 == (_QWORD)v17;
          v17 = v20;
        }
        while (!v21);
      }
      v17 = v20;
    }
    while (v20 != (_QWORD *)(toolkit_function_info + 32));
  }
  v22 = *(_QWORD *)(toolkit_function_info + 96);
  if (!v22)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)v22 + 48))(v22, &v29);
  v23 = v32;
  if (v32 == v31)
  {
    v24 = 4;
    v23 = v31;
    goto LABEL_39;
  }
  if (v32)
  {
    v24 = 5;
LABEL_39:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v29, v30);
}

void sub_21845329C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23)
{
  std::locale::~locale(&a23);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_invocation::~toolkit_function_invocation(turi::toolkit_function_invocation *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this, *((char **)this + 1));
}

void turi::unity_global::eval_lambda()
{
  int *v0;
  file_logger *v1;
  file_logger *started;
  _QWORD *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *exception;
  std::locale v7;

  v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "eval_lambda", 481, 1);
    v3 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v3 && *((_BYTE *)v3 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    v4 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v4 && *((_BYTE *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(v4[2] - 24) + 16));
      v5 = std::locale::use_facet(&v7, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  turi::unity_global::eval_lambda(std::string const&,turi::flexible_type const&)::$_0::operator()();
}

void sub_2184535A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_global::eval_dict_lambda()
{
  int *v0;
  file_logger *v1;
  file_logger *started;
  _QWORD *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *exception;
  std::locale v7;

  v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "eval_dict_lambda", 497, 1);
    v3 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v3 && *((_BYTE *)v3 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    v4 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v4 && *((_BYTE *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(v4[2] - 24) + 16));
      v5 = std::locale::use_facet(&v7, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  turi::unity_global::eval_dict_lambda(std::string const&,std::vector<std::string> const&,std::vector<turi::flexible_type> const&)::$_0::operator()();
}

void sub_2184536E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_global::parallel_eval_lambda()
{
  int *v0;
  file_logger *v1;
  file_logger *started;
  _QWORD *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *exception;
  std::locale v7;

  v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "parallel_eval_lambda", 511, 1);
    v3 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v3 && *((_BYTE *)v3 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    v4 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v4 && *((_BYTE *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(v4[2] - 24) + 16));
      v5 = std::locale::use_facet(&v7, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  turi::unity_global::parallel_eval_lambda(std::string const&,std::vector<turi::flexible_type> const&)::$_0::operator()();
}

void sub_218453828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_global::__read__(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[13];
  char v7;
  uint64_t v8;
  std::string v9;
  std::string v10[3];
  _BYTE v11[96];
  int v12;
  void *v13;
  char v14;
  _QWORD v15[20];

  v15[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  turi::general_ifstream::general_ifstream(v10, (uint64_t)&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (*(_DWORD *)((char *)&v10[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(v10[0].__r_.__value_.__r.__words[0] - 24)))
  {
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v10[0].__r_.__value_.__r.__words[2], 8, &v10[0].__r_.__value_.__r.__words[2], 16, (turi::fileio_impl::general_fstream_source *)v11, &v12);
    v6[0] = a2;
    turi::unity_global::__read__(std::string const&)::$_0::operator()();
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  v3 = operator new[]();
  while (!*(_DWORD *)((char *)&v10[1].__r_.__value_.__r.__words[1]
                     + *(_QWORD *)(v10[0].__r_.__value_.__r.__words[0] - 24)))
  {
    std::istream::read();
    std::ostream::write();
  }
  MEMORY[0x219A199F0](v3, 0x1000C8077774924);
  if ((v10[1].__r_.__value_.__s.__data_[*(_QWORD *)(v10[0].__r_.__value_.__r.__words[0] - 24) + 8] & 2) == 0)
  {
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v10[0].__r_.__value_.__r.__words[2], 8, &v10[0].__r_.__value_.__r.__words[2], 16, (turi::fileio_impl::general_fstream_source *)v11, &v12);
    turi::unity_global::__read__(std::string const&)::$_1::operator()();
  }
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v10[0].__r_.__value_.__r.__words[2], 8, &v10[0].__r_.__value_.__r.__words[2], 16, (turi::fileio_impl::general_fstream_source *)v11, &v12);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[2] = v4;
  v6[3] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v8);
  v10[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  v15[0] = &unk_24D91DA80;
  if (v14 < 0)
    operator delete(v13);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v10[0].__r_.__value_.__r.__words[2]);
  return MEMORY[0x219A198F4](v15);
}

void sub_218453AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_global::__write__(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  std::string v8;
  void *v9;
  _DWORD v10[18];
  _BYTE v11[120];
  int v12;
  void *__p;
  char v14;
  _QWORD v15[20];

  v15[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v8 = *(std::string *)a2;
  turi::general_ofstream::general_ofstream(&v9, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v9))
  {
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(v10, 8, v10, 16, (turi::fileio_impl::general_fstream_sink *)v11, &v12);
    turi::unity_global::__write__(std::string const&,std::string const&)::$_0::operator()();
  }
  v4 = *(char *)(a3 + 23);
  if (v4 >= 0)
    v5 = a3;
  else
    v5 = *(_QWORD *)a3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, v5, v6);
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(v10, 8, v10, 16, (turi::fileio_impl::general_fstream_sink *)v11, &v12);
  v9 = &unk_24D920F98;
  v15[0] = &unk_24D920FC0;
  if (v14 < 0)
    operator delete(__p);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)v10);
  return MEMORY[0x219A198F4](v15);
}

void sub_218453C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_global::__mkdir__(uint64_t a1, uint64_t a2)
{
  return turi::fileio::create_directory(a2);
}

BOOL turi::unity_global::__chmod__(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  _BOOL8 v5;
  std::string __p;
  std::locale v8;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"The mode: ", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  std::ostream::put();
  std::ostream::flush();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v5 = turi::fileio::change_file_mode((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_218453DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::memory_info::heap_bytes(turi::memory_info *this)
{
  int *v1;
  file_logger *v2;
  file_logger *started;
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  _QWORD *exception;
  std::locale v9;

  v1 = (int *)global_logger();
  if (v1[169] <= 5)
  {
    if (cppipc::must_cancel((cppipc *)v1))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v2 = (file_logger *)global_logger();
    started = file_logger::start_stream(v2, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/perf/memory_info.hpp", "heap_bytes", 57, 1);
    v4 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v4 && *((_BYTE *)v4 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4 + 2, (uint64_t)"memory_info::heap_bytes() requires tcmalloc", 43);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5)
    {
      if (*((_BYTE *)v5 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(v5[2] - 24) + 16));
        v6 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
        std::locale::~locale(&v9);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  return 0;
}

void sub_218453F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::memory_info::allocated_bytes(turi::memory_info *this)
{
  int v1;
  file_logger *v2;
  file_logger *started;
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  _QWORD *exception;
  std::locale v9;

  v1 = turi::memory_info::allocated_bytes(void)::__printed__;
  if (!turi::memory_info::allocated_bytes(void)::__printed__)
    turi::memory_info::allocated_bytes(void)::__printed__ = 1;
  if (cppipc::must_cancel(this))
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v2 = (file_logger *)global_logger();
  started = file_logger::start_stream(v2, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/perf/memory_info.hpp", "allocated_bytes", 78, v1 == 0);
  v4 = pthread_getspecific(*((_QWORD *)started + 74));
  if (v4 && *((_BYTE *)v4 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4 + 2, (uint64_t)"memory_info::allocated_bytes() requires tcmalloc", 48);
  v5 = pthread_getspecific(*((_QWORD *)started + 74));
  if (v5)
  {
    if (*((_BYTE *)v5 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(v5[2] - 24) + 16));
      v6 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
      std::locale::~locale(&v9);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  return 0;
}

void sub_2184540A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_global::set_log_level(turi::unity_global *this, unint64_t a2)
{
  if (a2 <= 8)
    *((_DWORD *)global_logger() + 169) = a2;
}

void turi::unity_global::list_globals(turi::globals *a1@<X1>, uint64_t a2@<X8>)
{
  std::string *v4[3];
  std::string **v5;

  turi::globals::list_globals(a1, (uint64_t)v4);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,turi::flexible_type> *>>(a2, v4[0], v4[1]);
  v5 = v4;
  std::vector<std::pair<std::string,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_218454138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::pair<std::string,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::unity_global::set_global(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  unint64_t *v5;
  unint64_t v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  std::string v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v40 = *(std::string *)a1;
  memset(v41, 0, 13);
  if (v41 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(a2 + 5);
    v41[0] = *(_QWORD *)a2;
    BYTE4(v41[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v5 = (unint64_t *)v41[0];
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  v7 = turi::globals::set_global((uint64_t)&v40, (uint64_t)v41);
  switch(BYTE4(v41[1]))
  {
    case 2:
      v8 = (unint64_t *)v41[0];
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v12 = v11;
          v13 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v14 = (unint64_t *)v41[0];
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = v41[0];
        if (v41[0])
        {
          v18 = *(void **)(v41[0] + 8);
          if (v18)
          {
            *(_QWORD *)(v41[0] + 16) = v18;
            operator delete(v18);
          }
          v12 = v17;
          v13 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v39.__r_.__value_.__r.__words[0] = v41[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
          goto LABEL_34;
        }
      }
      break;
    case 5:
      v23 = (unint64_t *)v41[0];
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v39.__r_.__value_.__r.__words[0] = v41[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
LABEL_34:
          v12 = v22;
          v13 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 8:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v12 = v29;
          v30 = -235920773;
          goto LABEL_49;
        }
      }
      break;
    case 9:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = v41[0];
        if (v41[0])
        {
          v35 = *(void **)(v41[0] + 48);
          if (v35)
          {
            *(_QWORD *)(v41[0] + 56) = v35;
            operator delete(v35);
          }
          v36 = *(void **)(v34 + 24);
          if (v36)
          {
            *(_QWORD *)(v34 + 32) = v36;
            operator delete(v36);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v34 + 8);
          v12 = v34;
          v30 = 2071181815;
LABEL_49:
          v13 = v30 | 0x1030C4000000000;
LABEL_50:
          MEMORY[0x219A19A08](v12, v13);
        }
      }
      break;
    default:
      break;
  }
  memset(v41, 0, 13);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  switch(v7)
  {
    case 0:
      std::string::basic_string[abi:ne180100]<0>(a3, "");
      break;
    case 1:
      std::string::basic_string[abi:ne180100]<0>(a3, "No such configuration variable");
      break;
    case 2:
      std::operator+<char>();
      v37 = std::string::append(&v39, " is not modifiable at runtime.It can only be modified at start up by an environment variable");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      a3[2] = *((_QWORD *)&v37->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      break;
    case 3:
      std::string::basic_string[abi:ne180100]<0>(a3, "Invalid value");
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(a3, "Unexpected failure");
      break;
  }
}

void sub_2184544F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,int a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::unity_global::create_sequential_sarray(turi::unity_sarray *a1@<X1>, _QWORD *a2@<X2>, char a3@<W3>, _OWORD *a4@<X8>)
{
  turi::unity_sarray::create_sequential_sarray((uint64_t)a1, a2, a3, a4);
}

void turi::unity_global::load_toolkit(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD **a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v7;
  int v8;
  int v9;
  int *v11;
  file_logger *v12;
  file_logger *started;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  BOOL v18;
  BOOL v19;
  std::string *v20;
  __int128 v21;
  void *v22;
  _BOOL4 v23;
  size_t v24;
  const void *v25;
  int v26;
  _WORD *v27;
  _WORD *v28;
  size_t v29;
  std::string *v30;
  _WORD *v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  char v37;
  const char *v38;
  void *v39;
  int *v40;
  file_logger *v41;
  file_logger *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  const std::locale::facet *v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  __int128 v50;
  std::string *v51;
  void (*v52)(std::string *__return_ptr);
  char *v53;
  int *v54;
  file_logger *v55;
  file_logger *v56;
  _QWORD *v57;
  std::string::size_type size;
  std::string::size_type v59;
  size_t v60;
  std::string *v61;
  _BYTE *v62;
  int v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  char v68;
  _OWORD *v69;
  _OWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  void *v85;
  void *v86;
  unsigned int v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  void *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  std::string *v104;
  __int128 v105;
  unint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  void *v117;
  unint64_t *v118;
  unsigned int v119;
  unint64_t *v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  __int128 v137;
  __int128 v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  int *v143;
  file_logger *v144;
  file_logger *v145;
  _QWORD *v146;
  __int128 v147;
  uint64_t v148;
  _QWORD *v149;
  const std::locale::facet *v150;
  _OWORD *v151;
  __int128 v152;
  uint64_t v153;
  turi::toolkit_function_specification *v154;
  uint64_t **v155;
  uint64_t v156;
  std::string::size_type v157;
  std::string::size_type v158;
  __int128 v159;
  std::string *v160;
  void (*v161)(std::string *__return_ptr);
  std::string::size_type v162;
  std::string::size_type v163;
  size_t v164;
  std::string *v165;
  _BYTE *v166;
  int v167;
  const std::string::value_type *v168;
  std::string::size_type v169;
  std::string *v170;
  std::string::size_type v171;
  char v172;
  _OWORD *v173;
  _OWORD *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  void *v189;
  void *v190;
  unsigned int v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  void *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  std::string *v208;
  __int128 v209;
  unint64_t *v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t *v215;
  _QWORD *v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t v219;
  void *v220;
  void *v221;
  unint64_t *v222;
  unsigned int v223;
  unint64_t *v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  __int128 v241;
  __int128 v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  int *v247;
  file_logger *v248;
  file_logger *v249;
  _QWORD *v250;
  __int128 v251;
  uint64_t v252;
  _QWORD *v253;
  const std::locale::facet *v254;
  _OWORD *v255;
  __int128 v256;
  uint64_t v257;
  __int128 *v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  std::string *v265;
  __int128 v266;
  _QWORD *exception;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  _QWORD *v271;
  std::string v273;
  void *v274[2];
  char v275;
  std::string v276;
  std::string v277;
  void *v278[2];
  char v279;
  std::string v280;
  std::string v281;
  std::string v282;
  std::string v283;
  std::string v284;
  __n128 v285;
  char v286;
  std::string v287;
  __n128 v288;
  char v289;
  __int128 v290;
  uint64_t v291;
  std::string v292;
  void *v293[2];
  char v294;
  std::string v295;
  void *v296[2];
  char v297;
  std::string v298;
  std::string v299;
  std::string v300;
  std::string v301;
  std::string v302;
  std::string v303;
  std::string v304;
  __n128 __p;
  char v306;
  _BYTE v307[56];
  __int128 v308;
  __int128 v309;
  __int128 v310;
  std::string *v311[3];
  std::string v312;
  std::string v313;
  void *v314;
  uint64_t v315;
  char v316;
  std::string *v317;
  std::string v318;
  _BYTE v319[15];
  std::string v320;
  _QWORD v321[3];
  _QWORD v322[3];
  __int128 v323;
  uint64_t v324;
  _QWORD __dst[6];

  __dst[3] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v313, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v313 = *(std::string *)a2;
  turi::fileio::get_protocol(&v313, (std::string::size_type)&v314);
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v313.__r_.__value_.__l.__data_);
  if (v316 < 0)
  {
    if (v315 != 5)
      goto LABEL_23;
    v7 = (unsigned __int8 *)v314;
  }
  else
  {
    if (v316 != 5)
      goto LABEL_23;
    v7 = (unsigned __int8 *)&v314;
  }
  v8 = *(_DWORD *)v7;
  v9 = v7[4];
  if (v8 == 1633906540 && v9 == 108)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v312 = *(std::string *)a2;
    turi::fileio::remove_protocol(&v312, (std::string *)v307);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)v307;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&v307[16];
    v307[23] = 0;
    v307[0] = 0;
    if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v312.__r_.__value_.__l.__data_);
  }
LABEL_23:
  memset(v311, 0, sizeof(v311));
  v310 = 0u;
  v309 = 0u;
  v308 = 0u;
  memset(&v307[8], 0, 48);
  std::string::operator=((std::string *)&v307[32], (const std::string *)a2);
  v11 = (int *)global_logger();
  if (v11[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_toolkit", 649, 1);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Attempt loading of ", 19);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v304 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v304, &__p);
    v15 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v16 = pthread_getspecific(*(_QWORD *)(v15 + 592));
    if (v16)
    {
      if (*((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet((const std::locale *)&v320, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale((std::locale *)&v320);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v15);
        if (*(_DWORD *)(v15 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v306 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v303 = *(std::string *)a2;
  v18 = turi::fileio::try_to_open_file((uint64_t)&v303);
  v19 = v18;
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v303.__r_.__value_.__l.__data_);
    if (v19)
    {
LABEL_43:
      if (v316 < 0)
      {
        if (!v315)
          goto LABEL_69;
      }
      else if (!v316)
      {
        goto LABEL_69;
      }
      std::string::basic_string[abi:ne180100]<0>(&v301, "");
      turi::get_temp_name((uint64_t)&v301, &v320);
      if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v301.__r_.__value_.__l.__data_);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v300 = *(std::string *)a2;
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v299, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
      else
        v299 = v320;
      turi::fileio::copy((char *)&v300, (char *)&v299);
      if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v299.__r_.__value_.__l.__data_);
      if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v300.__r_.__value_.__l.__data_);
      std::string::operator=((std::string *)a2, &v320);
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v320.__r_.__value_.__l.__data_);
LABEL_69:
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v298 = *(std::string *)a2;
      std::string::basic_string[abi:ne180100]<0>(v296, "get_toolkit_function_registration");
      if (turi::file_contains_substring((uint64_t)&v298, (uint64_t)v296))
      {
        v23 = 0;
      }
      else
      {
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v295 = *(std::string *)a2;
        std::string::basic_string[abi:ne180100]<0>(v293, "get_toolkit_class_registration");
        v23 = !turi::file_contains_substring((uint64_t)&v295, (uint64_t)v293);
        if (v294 < 0)
          operator delete(v293[0]);
        if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v295.__r_.__value_.__l.__data_);
      }
      if (v297 < 0)
        operator delete(v296[0]);
      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v298.__r_.__value_.__l.__data_);
        if (v23)
          goto LABEL_85;
      }
      else if (v23)
      {
LABEL_85:
        if (*(char *)(a2 + 23) >= 0)
          v24 = *(unsigned __int8 *)(a2 + 23);
        else
          v24 = *(_QWORD *)(a2 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)a4, v24 + 25);
        if (*((char *)a4 + 23) < 0)
          a4 = (_QWORD *)*a4;
        if (v24)
        {
          if (*(char *)(a2 + 23) >= 0)
            v25 = (const void *)a2;
          else
            v25 = *(const void **)a2;
          memmove(a4, v25, v24);
        }
        strcpy((char *)a4 + v24, " is not a valid extension");
        goto LABEL_504;
      }
      if ((v307[55] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)&v307[32], *(std::string::size_type *)&v307[40]);
      else
        v292 = *(std::string *)&v307[32];
      turi::fileio::get_filename((uint64_t)&v292, &v301);
      if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v292.__r_.__value_.__l.__data_);
      v290 = 0uLL;
      v291 = 0;
      v320.__r_.__value_.__r.__words[0] = (std::string::size_type)".";
      v320.__r_.__value_.__l.__size_ = (std::string::size_type)"";
      boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)&v320);
      boost::algorithm::split<std::vector<std::string>,std::string,boost::algorithm::detail::is_any_ofF<char>>(&v290, (uint64_t)&v301, __dst, 1);
      if (__dst[2] >= 0x11uLL && __dst[0])
        MEMORY[0x219A199F0](__dst[0], 0x1000C8077774924);
      if (*((_QWORD *)&v290 + 1) == (_QWORD)v290)
      {
        std::string::basic_string[abi:ne180100]<0>(a4, "Invalid filename");
LABEL_501:
        v320.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v320);
        if ((SHIBYTE(v301.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_504;
        v22 = (void *)v301.__r_.__value_.__r.__words[0];
        goto LABEL_503;
      }
      v26 = *((unsigned __int8 *)a3 + 23);
      if (*((char *)a3 + 23) < 0)
      {
        v28 = a3[1];
        if (!v28)
          goto LABEL_136;
        if (v28 != (_WORD *)2)
        {
LABEL_115:
          if ((v26 & 0x80u) == 0)
            v29 = *((unsigned __int8 *)a3 + 23);
          else
            v29 = (size_t)a3[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&v320, v29 + 1);
          if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = &v320;
          else
            v30 = (std::string *)v320.__r_.__value_.__r.__words[0];
          if (v29)
          {
            if (*((char *)a3 + 23) >= 0)
              v31 = a3;
            else
              v31 = *a3;
            memmove(v30, v31, v29);
          }
          *(_WORD *)((char *)&v30->__r_.__value_.__l.__data_ + v29) = 46;
          v32 = *(char *)(v290 + 23);
          if (v32 >= 0)
            v33 = (const std::string::value_type *)v290;
          else
            v33 = *(const std::string::value_type **)v290;
          if (v32 >= 0)
            v34 = *(unsigned __int8 *)(v290 + 23);
          else
            v34 = *(_QWORD *)(v290 + 8);
          v35 = std::string::append(&v320, v33, v34);
          v36 = v35->__r_.__value_.__r.__words[0];
          *(_QWORD *)&v323 = v35->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)&v323 + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
          v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          if ((v307[31] & 0x80000000) != 0)
            operator delete(*(void **)&v307[8]);
          *(_QWORD *)&v307[8] = v36;
          *(_QWORD *)&v307[16] = v323;
          *(_QWORD *)&v307[23] = *(_QWORD *)((char *)&v323 + 7);
          v307[31] = v37;
          if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v320.__r_.__value_.__l.__data_);
LABEL_138:
          v38 = (const char *)a2;
          if (*(char *)(a2 + 23) < 0)
            v38 = *(const char **)a2;
          v39 = dlopen(v38, 6);
          v40 = (int *)global_logger();
          if (v40[169] <= 2)
          {
            if (cppipc::must_cancel((cppipc *)v40))
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            v41 = (file_logger *)global_logger();
            v42 = file_logger::start_stream(v41, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_toolkit", 689, 1);
            v43 = pthread_getspecific(*((_QWORD *)v42 + 74));
            if (v43 && *((_BYTE *)v43 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)"Library load of ", 16);
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v287, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v287 = *(std::string *)a2;
            turi::sanitize_url((__n128 *)&v287, &v288);
            v44 = file_logger::operator<<<std::string>((uint64_t)v42, (uint64_t)&v288);
            v45 = pthread_getspecific(*(_QWORD *)(v44 + 592));
            if (v45)
            {
              if (*((_BYTE *)v45 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(_QWORD *)(v45[2] - 24) + 16));
                v46 = std::locale::use_facet((const std::locale *)&v320, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
                std::locale::~locale((std::locale *)&v320);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v44);
                if (*(_DWORD *)(v44 + 600) == 7)
                {
                  __print_back_trace();
                  v270 = __cxa_allocate_exception(8uLL);
                  *v270 = "LOG_FATAL encountered";
                  __cxa_throw(v270, MEMORY[0x24BEDB718], 0);
                }
              }
            }
            if (v289 < 0)
              operator delete((void *)v288.n128_u64[0]);
            if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v287.__r_.__value_.__l.__data_);
          }
          std::string::operator=((std::string *)&v308, (const std::string *)a2);
          *(_QWORD *)v307 = v39;
          if (v39)
          {
            std::string::basic_string[abi:ne180100]<0>(&v320, "get_toolkit_function_registration");
            std::string::basic_string[abi:ne180100]<0>(v321, "_Z33get_toolkit_function_registrationv");
            std::string::basic_string[abi:ne180100]<0>(v322, "__Z33get_toolkit_function_registrationv");
            v323 = 0uLL;
            v324 = 0;
            v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v323;
            v282.__r_.__value_.__s.__data_[8] = 0;
            *(_QWORD *)&v323 = operator new(0x48uLL);
            *((_QWORD *)&v323 + 1) = v323;
            v324 = v323 + 72;
            v47 = 0;
            *((_QWORD *)&v323 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v324, (__int128 *)&v320, &v323, (std::string *)v323);
            do
            {
              if (SHIBYTE(v322[v47 + 2]) < 0)
                operator delete((void *)v322[v47]);
              v47 -= 3;
            }
            while (v47 != -9);
            v49 = (__int128 *)*((_QWORD *)&v323 + 1);
            v48 = (__int128 *)v323;
            if ((_QWORD)v323 != *((_QWORD *)&v323 + 1))
            {
              while (1)
              {
                if (*((char *)v48 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)v48, *((_QWORD *)v48 + 1));
                }
                else
                {
                  v50 = *v48;
                  v320.__r_.__value_.__r.__words[2] = *((_QWORD *)v48 + 2);
                  *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v50;
                }
                if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v51 = &v320;
                else
                  v51 = (std::string *)v320.__r_.__value_.__r.__words[0];
                v52 = (void (*)(std::string *__return_ptr))dlsym(v39, (const char *)v51);
                if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v320.__r_.__value_.__l.__data_);
                if (v52)
                  break;
                v48 = (__int128 *)((char *)v48 + 24);
                if (v48 == v49)
                  goto LABEL_318;
              }
              v52(&v320);
              size = v320.__r_.__value_.__l.__size_;
              v59 = v320.__r_.__value_.__r.__words[0];
              if (v320.__r_.__value_.__r.__words[0] == v320.__r_.__value_.__l.__size_)
              {
                v154 = (turi::toolkit_function_specification *)v320.__r_.__value_.__r.__words[0];
              }
              else
              {
                do
                {
                  if (v307[31] >= 0)
                    v60 = v307[31];
                  else
                    v60 = *(_QWORD *)&v307[16];
                  if (v60)
                  {
                    std::string::basic_string[abi:ne180100]((uint64_t)&v282, v60 + 1);
                    if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v61 = &v282;
                    else
                      v61 = (std::string *)v282.__r_.__value_.__r.__words[0];
                    if (v307[31] >= 0)
                      v62 = &v307[8];
                    else
                      v62 = *(_BYTE **)&v307[8];
                    memmove(v61, v62, v60);
                    *(_WORD *)((char *)&v61->__r_.__value_.__l.__data_ + v60) = 46;
                    v63 = *(char *)(v59 + 23);
                    if (v63 >= 0)
                      v64 = (const std::string::value_type *)v59;
                    else
                      v64 = *(const std::string::value_type **)v59;
                    if (v63 >= 0)
                      v65 = *(unsigned __int8 *)(v59 + 23);
                    else
                      v65 = *(_QWORD *)(v59 + 8);
                    v66 = std::string::append(&v282, v64, v65);
                    v67 = v66->__r_.__value_.__r.__words[0];
                    v318.__r_.__value_.__r.__words[0] = v66->__r_.__value_.__l.__size_;
                    *(std::string::size_type *)((char *)v318.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
                    v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
                    v66->__r_.__value_.__l.__size_ = 0;
                    v66->__r_.__value_.__r.__words[2] = 0;
                    v66->__r_.__value_.__r.__words[0] = 0;
                    if (*(char *)(v59 + 23) < 0)
                      operator delete(*(void **)v59);
                    *(_QWORD *)v59 = v67;
                    *(_QWORD *)(v59 + 8) = v318.__r_.__value_.__r.__words[0];
                    *(_QWORD *)(v59 + 15) = *(std::string::size_type *)((char *)v318.__r_.__value_.__r.__words + 7);
                    *(_BYTE *)(v59 + 23) = v68;
                    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v282.__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v282, "file");
                  *(_QWORD *)v319 = &v282;
                  v69 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v59 + 48), (const void **)&v282.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v319);
                  v70 = v69;
                  switch(*((_BYTE *)v69 + 68))
                  {
                    case 2:
                      v71 = (unint64_t *)*((_QWORD *)v69 + 7);
                      do
                      {
                        v72 = __ldaxr(v71);
                        v73 = v72 - 1;
                      }
                      while (__stlxr(v73, v71));
                      if (!v73)
                      {
                        v74 = *((_QWORD *)v69 + 7);
                        if (!v74)
                          goto LABEL_242;
                        if (*(char *)(v74 + 31) < 0)
                          operator delete(*(void **)(v74 + 8));
                        v75 = (_QWORD *)v74;
                        v76 = 0x1012C404EF22A49;
                        goto LABEL_241;
                      }
                      break;
                    case 3:
                      v88 = (unint64_t *)*((_QWORD *)v69 + 7);
                      do
                      {
                        v89 = __ldaxr(v88);
                        v90 = v89 - 1;
                      }
                      while (__stlxr(v90, v88));
                      if (!v90)
                      {
                        v91 = (_QWORD *)*((_QWORD *)v69 + 7);
                        if (!v91)
                          goto LABEL_242;
                        v92 = (void *)v91[1];
                        if (v92)
                        {
                          v91[2] = v92;
                          operator delete(v92);
                        }
                        v75 = v91;
                        v76 = 0x1080C409938AC02;
                        goto LABEL_241;
                      }
                      break;
                    case 4:
                      v77 = (unint64_t *)*((_QWORD *)v69 + 7);
                      do
                      {
                        v78 = __ldaxr(v77);
                        v79 = v78 - 1;
                      }
                      while (__stlxr(v79, v77));
                      if (!v79)
                      {
                        v80 = (_QWORD *)*((_QWORD *)v69 + 7);
                        if (!v80)
                          goto LABEL_242;
                        v318.__r_.__value_.__r.__words[0] = (std::string::size_type)(v80 + 1);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
                        goto LABEL_234;
                      }
                      break;
                    case 5:
                      v93 = (unint64_t *)*((_QWORD *)v69 + 7);
                      do
                      {
                        v94 = __ldaxr(v93);
                        v95 = v94 - 1;
                      }
                      while (__stlxr(v95, v93));
                      if (!v95)
                      {
                        v80 = (_QWORD *)*((_QWORD *)v69 + 7);
                        if (!v80)
                          goto LABEL_242;
                        v318.__r_.__value_.__r.__words[0] = (std::string::size_type)(v80 + 1);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
LABEL_234:
                        v75 = v80;
                        v76 = 0x1020C405E66F15BLL;
                        goto LABEL_241;
                      }
                      break;
                    case 8:
                      v96 = (unint64_t *)*((_QWORD *)v69 + 7);
                      do
                      {
                        v97 = __ldaxr(v96);
                        v98 = v97 - 1;
                      }
                      while (__stlxr(v98, v96));
                      if (!v98)
                      {
                        v99 = *((_QWORD *)v69 + 7);
                        if (!v99)
                          goto LABEL_242;
                        boost::detail::shared_count::~shared_count((unsigned int **)(v99 + 16));
                        v75 = (_QWORD *)v99;
                        v87 = -235920773;
                        goto LABEL_240;
                      }
                      break;
                    case 9:
                      v81 = (unint64_t *)*((_QWORD *)v69 + 7);
                      do
                      {
                        v82 = __ldaxr(v81);
                        v83 = v82 - 1;
                      }
                      while (__stlxr(v83, v81));
                      if (!v83)
                      {
                        v84 = (_QWORD *)*((_QWORD *)v69 + 7);
                        if (v84)
                        {
                          v85 = (void *)v84[6];
                          if (v85)
                          {
                            v84[7] = v85;
                            operator delete(v85);
                          }
                          v86 = (void *)v84[3];
                          if (v86)
                          {
                            v84[4] = v86;
                            operator delete(v86);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v84 + 1));
                          v75 = v84;
                          v87 = 2071181815;
LABEL_240:
                          v76 = v87 | 0x1030C4000000000;
LABEL_241:
                          MEMORY[0x219A19A08](v75, v76);
                        }
LABEL_242:
                        *((_QWORD *)v70 + 7) = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  *((_QWORD *)v70 + 7) = 0;
                  *((_DWORD *)v70 + 16) = 0;
                  *((_BYTE *)v70 + 68) = 2;
                  v100 = (_QWORD *)operator new();
                  *v100 = 0;
                  v100[2] = 0;
                  v100[3] = 0;
                  v100[1] = 0;
                  *((_QWORD *)v70 + 7) = v100;
                  *v100 = 1;
                  switch(*((_BYTE *)v70 + 68))
                  {
                    case 2:
                      v101 = *((_QWORD *)v70 + 7);
                      if (*(_QWORD *)v101 != 1)
                      {
                        v102 = (_QWORD *)operator new();
                        v103 = *((_QWORD *)v70 + 7);
                        *v102 = *(_QWORD *)v103;
                        v104 = (std::string *)(v102 + 1);
                        if (*(char *)(v103 + 31) < 0)
                        {
                          std::string::__init_copy_ctor_external(v104, *(const std::string::value_type **)(v103 + 8), *(_QWORD *)(v103 + 16));
                        }
                        else
                        {
                          v105 = *(_OWORD *)(v103 + 8);
                          v102[3] = *(_QWORD *)(v103 + 24);
                          *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v105;
                        }
                        *((_QWORD *)v70 + 7) = v102;
                        *v102 = 1;
                        do
                        {
                          v141 = __ldaxr((unint64_t *)v101);
                          v142 = v141 - 1;
                        }
                        while (__stlxr(v142, (unint64_t *)v101));
                        if (!v142)
                        {
                          if (*(char *)(v101 + 31) < 0)
                            operator delete(*(void **)(v101 + 8));
                          v118 = (unint64_t *)v101;
                          v126 = 0x1012C404EF22A49;
                          goto LABEL_290;
                        }
                      }
                      break;
                    case 3:
                      v120 = (unint64_t *)*((_QWORD *)v70 + 7);
                      if (*v120 != 1)
                      {
                        v121 = (_QWORD *)operator new();
                        v122 = *((_QWORD *)v70 + 7);
                        *v121 = *(_QWORD *)v122;
                        v121[2] = 0;
                        v121[3] = 0;
                        v121[1] = 0;
                        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v121 + 1, *(const void **)(v122 + 8), *(_QWORD *)(v122 + 16), (uint64_t)(*(_QWORD *)(v122 + 16) - *(_QWORD *)(v122 + 8)) >> 3);
                        *((_QWORD *)v70 + 7) = v121;
                        *v121 = 1;
                        do
                        {
                          v123 = __ldaxr(v120);
                          v124 = v123 - 1;
                        }
                        while (__stlxr(v124, v120));
                        if (!v124)
                        {
                          v125 = (void *)v120[1];
                          if (v125)
                          {
                            v120[2] = (unint64_t)v125;
                            operator delete(v125);
                          }
                          v118 = v120;
                          v126 = 0x1080C409938AC02;
                          goto LABEL_290;
                        }
                      }
                      break;
                    case 4:
                      v106 = (unint64_t *)*((_QWORD *)v70 + 7);
                      if (*v106 != 1)
                      {
                        v107 = (_QWORD *)operator new();
                        v108 = *((_QWORD *)v70 + 7);
                        *v107 = *(_QWORD *)v108;
                        v107[2] = 0;
                        v107[3] = 0;
                        v107[1] = 0;
                        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v107 + 1, *(uint64_t **)(v108 + 8), *(uint64_t **)(v108 + 16), (uint64_t)(*(_QWORD *)(v108 + 16) - *(_QWORD *)(v108 + 8)) >> 4);
                        *((_QWORD *)v70 + 7) = v107;
                        *v107 = 1;
                        do
                        {
                          v109 = __ldaxr(v106);
                          v110 = v109 - 1;
                        }
                        while (__stlxr(v110, v106));
                        if (!v110)
                        {
                          v318.__r_.__value_.__r.__words[0] = (std::string::size_type)(v106 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
                          goto LABEL_273;
                        }
                      }
                      break;
                    case 5:
                      v106 = (unint64_t *)*((_QWORD *)v70 + 7);
                      if (*v106 != 1)
                      {
                        v127 = (_QWORD *)operator new();
                        v128 = *((_QWORD *)v70 + 7);
                        *v127 = *(_QWORD *)v128;
                        v127[2] = 0;
                        v127[3] = 0;
                        v127[1] = 0;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v127 + 1, *(uint64_t **)(v128 + 8), *(uint64_t **)(v128 + 16), (uint64_t)(*(_QWORD *)(v128 + 16) - *(_QWORD *)(v128 + 8)) >> 5);
                        *((_QWORD *)v70 + 7) = v127;
                        *v127 = 1;
                        do
                        {
                          v129 = __ldaxr(v106);
                          v130 = v129 - 1;
                        }
                        while (__stlxr(v130, v106));
                        if (!v130)
                        {
                          v318.__r_.__value_.__r.__words[0] = (std::string::size_type)(v106 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
LABEL_273:
                          v118 = v106;
                          v126 = 0x1020C405E66F15BLL;
                          goto LABEL_290;
                        }
                      }
                      break;
                    case 8:
                      v131 = *((_QWORD *)v70 + 7);
                      if (*(_QWORD *)v131 != 1)
                      {
                        v132 = operator new();
                        v133 = *((_QWORD *)v70 + 7);
                        *(_QWORD *)v132 = *(_QWORD *)v133;
                        *(_QWORD *)(v132 + 8) = *(_QWORD *)(v133 + 8);
                        v134 = *(_QWORD *)(v133 + 16);
                        *(_QWORD *)(v132 + 16) = v134;
                        if (v134)
                        {
                          v135 = (unsigned int *)(v134 + 8);
                          do
                            v136 = __ldxr(v135);
                          while (__stxr(v136 + 1, v135));
                        }
                        v137 = *(_OWORD *)(v133 + 24);
                        v138 = *(_OWORD *)(v133 + 40);
                        *(_OWORD *)(v132 + 56) = *(_OWORD *)(v133 + 56);
                        *(_OWORD *)(v132 + 40) = v138;
                        *(_OWORD *)(v132 + 24) = v137;
                        *((_QWORD *)v70 + 7) = v132;
                        *(_QWORD *)v132 = 1;
                        do
                        {
                          v139 = __ldaxr((unint64_t *)v131);
                          v140 = v139 - 1;
                        }
                        while (__stlxr(v140, (unint64_t *)v131));
                        if (!v140)
                        {
                          boost::detail::shared_count::~shared_count((unsigned int **)(v131 + 16));
                          v118 = (unint64_t *)v131;
                          v119 = -235920773;
                          goto LABEL_282;
                        }
                      }
                      break;
                    case 9:
                      v111 = (unint64_t *)*((_QWORD *)v70 + 7);
                      if (*v111 != 1)
                      {
                        v112 = (_QWORD *)operator new();
                        v113 = (_QWORD *)*((_QWORD *)v70 + 7);
                        *v112 = *v113;
                        turi::flexible_type_impl::ndarray<double>::ndarray(v112 + 1, (uint64_t)(v113 + 1));
                        *((_QWORD *)v70 + 7) = v112;
                        *v112 = 1;
                        do
                        {
                          v114 = __ldaxr(v111);
                          v115 = v114 - 1;
                        }
                        while (__stlxr(v115, v111));
                        if (!v115)
                        {
                          v116 = (void *)v111[6];
                          if (v116)
                          {
                            v111[7] = (unint64_t)v116;
                            operator delete(v116);
                          }
                          v117 = (void *)v111[3];
                          if (v117)
                          {
                            v111[4] = (unint64_t)v117;
                            operator delete(v117);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v111 + 1));
                          v118 = v111;
                          v119 = 2071181815;
LABEL_282:
                          v126 = v119 | 0x1030C4000000000;
LABEL_290:
                          MEMORY[0x219A19A08](v118, v126);
                        }
                      }
                      break;
                    default:
                      break;
                  }
                  std::string::operator=((std::string *)(*((_QWORD *)v70 + 7) + 8), (const std::string *)&v307[32]);
                  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v282.__r_.__value_.__l.__data_);
                  v143 = (int *)global_logger();
                  if (v143[169] <= 2)
                  {
                    if (cppipc::must_cancel((cppipc *)v143))
                      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
                    v144 = (file_logger *)global_logger();
                    v145 = file_logger::start_stream(v144, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_toolkit", 742, 1);
                    v146 = pthread_getspecific(*((_QWORD *)v145 + 74));
                    if (v146 && *((_BYTE *)v146 + 280))
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146 + 2, (uint64_t)"Adding function: ", 17);
                    if (*(char *)(v59 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)v59, *(_QWORD *)(v59 + 8));
                    }
                    else
                    {
                      v147 = *(_OWORD *)v59;
                      v281.__r_.__value_.__r.__words[2] = *(_QWORD *)(v59 + 16);
                      *(_OWORD *)&v281.__r_.__value_.__l.__data_ = v147;
                    }
                    v148 = file_logger::operator<<<std::string>((uint64_t)v145, (uint64_t)&v281);
                    v149 = pthread_getspecific(*(_QWORD *)(v148 + 592));
                    if (v149)
                    {
                      if (*((_BYTE *)v149 + 280))
                      {
                        std::ios_base::getloc((const std::ios_base *)((char *)v149 + *(_QWORD *)(v149[2] - 24) + 16));
                        v150 = std::locale::use_facet((const std::locale *)&v282, MEMORY[0x24BEDB350]);
                        ((void (*)(const std::locale::facet *, uint64_t))v150->__vftable[2].~facet_0)(v150, 10);
                        std::locale::~locale((std::locale *)&v282);
                        std::ostream::put();
                        std::ostream::flush();
                        file_logger::stream_flush((file_logger *)v148);
                        if (*(_DWORD *)(v148 + 600) == 7)
                        {
                          __print_back_trace();
                          v268 = __cxa_allocate_exception(8uLL);
                          *v268 = "LOG_FATAL encountered";
                          __cxa_throw(v268, MEMORY[0x24BEDB718], 0);
                        }
                      }
                    }
                    if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v281.__r_.__value_.__l.__data_);
                  }
                  v151 = (_OWORD *)v310;
                  if ((unint64_t)v310 >= *((_QWORD *)&v310 + 1))
                  {
                    v153 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v309 + 1, (__int128 *)v59);
                  }
                  else
                  {
                    if (*(char *)(v59 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v310, *(const std::string::value_type **)v59, *(_QWORD *)(v59 + 8));
                    }
                    else
                    {
                      v152 = *(_OWORD *)v59;
                      *(_QWORD *)(v310 + 16) = *(_QWORD *)(v59 + 16);
                      *v151 = v152;
                    }
                    v153 = (uint64_t)v151 + 24;
                  }
                  *(_QWORD *)&v310 = v153;
                  v59 += 136;
                }
                while (v59 != size);
                v59 = v320.__r_.__value_.__l.__size_;
                v154 = (turi::toolkit_function_specification *)v320.__r_.__value_.__r.__words[0];
              }
              v155 = *(uint64_t ***)(a1 + 24);
              memset(&v280, 0, sizeof(v280));
              std::vector<turi::toolkit_function_specification>::__init_with_size[abi:ne180100]<turi::toolkit_function_specification*,turi::toolkit_function_specification*>(&v280, v154, (turi::toolkit_function_specification *)v59, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v59 - (_QWORD)v154) >> 3));
              std::string::basic_string[abi:ne180100]<0>(v278, "");
              turi::toolkit_function_registry::register_toolkit_function(v155, (std::string::size_type *)&v280, (const void **)v278);
              if (v279 < 0)
                operator delete(v278[0]);
              v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v280;
              std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
              v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
              std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
            }
LABEL_318:
            std::string::basic_string[abi:ne180100]<0>(&v320, "get_toolkit_class_registration");
            std::string::basic_string[abi:ne180100]<0>(v321, "_Z30get_toolkit_class_registrationv");
            std::string::basic_string[abi:ne180100]<0>(v322, "__Z30get_toolkit_class_registrationv");
            memset(&v282, 0, sizeof(v282));
            v318.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
            v318.__r_.__value_.__s.__data_[8] = 0;
            v282.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
            v282.__r_.__value_.__l.__size_ = v282.__r_.__value_.__r.__words[0];
            v282.__r_.__value_.__r.__words[2] = v282.__r_.__value_.__r.__words[0] + 72;
            v156 = 0;
            v282.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v282.__r_.__value_.__r.__words[2], (__int128 *)&v320, &v323, (std::string *)v282.__r_.__value_.__l.__data_);
            do
            {
              if (SHIBYTE(v322[v156 + 2]) < 0)
                operator delete((void *)v322[v156]);
              v156 -= 3;
            }
            while (v156 != -9);
            v158 = v282.__r_.__value_.__l.__size_;
            v157 = v282.__r_.__value_.__r.__words[0];
            if (v282.__r_.__value_.__r.__words[0] != v282.__r_.__value_.__l.__size_)
            {
              while (1)
              {
                if (*(char *)(v157 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)v157, *(_QWORD *)(v157 + 8));
                }
                else
                {
                  v159 = *(_OWORD *)v157;
                  v320.__r_.__value_.__r.__words[2] = *(_QWORD *)(v157 + 16);
                  *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v159;
                }
                if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v160 = &v320;
                else
                  v160 = (std::string *)v320.__r_.__value_.__r.__words[0];
                v161 = (void (*)(std::string *__return_ptr))dlsym(v39, (const char *)v160);
                if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v320.__r_.__value_.__l.__data_);
                if (v161)
                  break;
                v157 += 24;
                if (v157 == v158)
                  goto LABEL_473;
              }
              v161(&v320);
              v162 = v320.__r_.__value_.__l.__size_;
              v163 = v320.__r_.__value_.__r.__words[0];
              if (v320.__r_.__value_.__r.__words[0] == v320.__r_.__value_.__l.__size_)
              {
                v258 = (__int128 *)v320.__r_.__value_.__r.__words[0];
              }
              else
              {
                do
                {
                  if (v307[31] >= 0)
                    v164 = v307[31];
                  else
                    v164 = *(_QWORD *)&v307[16];
                  if (v164)
                  {
                    std::string::basic_string[abi:ne180100]((uint64_t)&v318, v164 + 1);
                    if ((v318.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v165 = &v318;
                    else
                      v165 = (std::string *)v318.__r_.__value_.__r.__words[0];
                    if (v307[31] >= 0)
                      v166 = &v307[8];
                    else
                      v166 = *(_BYTE **)&v307[8];
                    memmove(v165, v166, v164);
                    *(_WORD *)((char *)&v165->__r_.__value_.__l.__data_ + v164) = 46;
                    v167 = *(char *)(v163 + 23);
                    if (v167 >= 0)
                      v168 = (const std::string::value_type *)v163;
                    else
                      v168 = *(const std::string::value_type **)v163;
                    if (v167 >= 0)
                      v169 = *(unsigned __int8 *)(v163 + 23);
                    else
                      v169 = *(_QWORD *)(v163 + 8);
                    v170 = std::string::append(&v318, v168, v169);
                    v171 = v170->__r_.__value_.__r.__words[0];
                    *(_QWORD *)v319 = v170->__r_.__value_.__l.__size_;
                    *(_QWORD *)&v319[7] = *(std::string::size_type *)((char *)&v170->__r_.__value_.__r.__words[1] + 7);
                    v172 = HIBYTE(v170->__r_.__value_.__r.__words[2]);
                    v170->__r_.__value_.__l.__size_ = 0;
                    v170->__r_.__value_.__r.__words[2] = 0;
                    v170->__r_.__value_.__r.__words[0] = 0;
                    if (*(char *)(v163 + 23) < 0)
                      operator delete(*(void **)v163);
                    *(_QWORD *)v163 = v171;
                    *(_QWORD *)(v163 + 8) = *(_QWORD *)v319;
                    *(_QWORD *)(v163 + 15) = *(_QWORD *)&v319[7];
                    *(_BYTE *)(v163 + 23) = v172;
                    if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v318.__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v318, "file");
                  v317 = &v318;
                  v173 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v163 + 24), (const void **)&v318.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v317);
                  v174 = v173;
                  switch(*((_BYTE *)v173 + 68))
                  {
                    case 2:
                      v175 = (unint64_t *)*((_QWORD *)v173 + 7);
                      do
                      {
                        v176 = __ldaxr(v175);
                        v177 = v176 - 1;
                      }
                      while (__stlxr(v177, v175));
                      if (!v177)
                      {
                        v178 = *((_QWORD *)v173 + 7);
                        if (!v178)
                          goto LABEL_397;
                        if (*(char *)(v178 + 31) < 0)
                          operator delete(*(void **)(v178 + 8));
                        v179 = (_QWORD *)v178;
                        v180 = 0x1012C404EF22A49;
                        goto LABEL_396;
                      }
                      break;
                    case 3:
                      v192 = (unint64_t *)*((_QWORD *)v173 + 7);
                      do
                      {
                        v193 = __ldaxr(v192);
                        v194 = v193 - 1;
                      }
                      while (__stlxr(v194, v192));
                      if (!v194)
                      {
                        v195 = (_QWORD *)*((_QWORD *)v173 + 7);
                        if (!v195)
                          goto LABEL_397;
                        v196 = (void *)v195[1];
                        if (v196)
                        {
                          v195[2] = v196;
                          operator delete(v196);
                        }
                        v179 = v195;
                        v180 = 0x1080C409938AC02;
                        goto LABEL_396;
                      }
                      break;
                    case 4:
                      v181 = (unint64_t *)*((_QWORD *)v173 + 7);
                      do
                      {
                        v182 = __ldaxr(v181);
                        v183 = v182 - 1;
                      }
                      while (__stlxr(v183, v181));
                      if (!v183)
                      {
                        v184 = (_QWORD *)*((_QWORD *)v173 + 7);
                        if (!v184)
                          goto LABEL_397;
                        *(_QWORD *)v319 = v184 + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
                        goto LABEL_389;
                      }
                      break;
                    case 5:
                      v197 = (unint64_t *)*((_QWORD *)v173 + 7);
                      do
                      {
                        v198 = __ldaxr(v197);
                        v199 = v198 - 1;
                      }
                      while (__stlxr(v199, v197));
                      if (!v199)
                      {
                        v184 = (_QWORD *)*((_QWORD *)v173 + 7);
                        if (!v184)
                          goto LABEL_397;
                        *(_QWORD *)v319 = v184 + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
LABEL_389:
                        v179 = v184;
                        v180 = 0x1020C405E66F15BLL;
                        goto LABEL_396;
                      }
                      break;
                    case 8:
                      v200 = (unint64_t *)*((_QWORD *)v173 + 7);
                      do
                      {
                        v201 = __ldaxr(v200);
                        v202 = v201 - 1;
                      }
                      while (__stlxr(v202, v200));
                      if (!v202)
                      {
                        v203 = *((_QWORD *)v173 + 7);
                        if (!v203)
                          goto LABEL_397;
                        boost::detail::shared_count::~shared_count((unsigned int **)(v203 + 16));
                        v179 = (_QWORD *)v203;
                        v191 = -235920773;
                        goto LABEL_395;
                      }
                      break;
                    case 9:
                      v185 = (unint64_t *)*((_QWORD *)v173 + 7);
                      do
                      {
                        v186 = __ldaxr(v185);
                        v187 = v186 - 1;
                      }
                      while (__stlxr(v187, v185));
                      if (!v187)
                      {
                        v188 = (_QWORD *)*((_QWORD *)v173 + 7);
                        if (v188)
                        {
                          v189 = (void *)v188[6];
                          if (v189)
                          {
                            v188[7] = v189;
                            operator delete(v189);
                          }
                          v190 = (void *)v188[3];
                          if (v190)
                          {
                            v188[4] = v190;
                            operator delete(v190);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v188 + 1));
                          v179 = v188;
                          v191 = 2071181815;
LABEL_395:
                          v180 = v191 | 0x1030C4000000000;
LABEL_396:
                          MEMORY[0x219A19A08](v179, v180);
                        }
LABEL_397:
                        *((_QWORD *)v174 + 7) = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  *((_QWORD *)v174 + 7) = 0;
                  *((_DWORD *)v174 + 16) = 0;
                  *((_BYTE *)v174 + 68) = 2;
                  v204 = (_QWORD *)operator new();
                  *v204 = 0;
                  v204[2] = 0;
                  v204[3] = 0;
                  v204[1] = 0;
                  *((_QWORD *)v174 + 7) = v204;
                  *v204 = 1;
                  switch(*((_BYTE *)v174 + 68))
                  {
                    case 2:
                      v205 = *((_QWORD *)v174 + 7);
                      if (*(_QWORD *)v205 != 1)
                      {
                        v206 = (_QWORD *)operator new();
                        v207 = *((_QWORD *)v174 + 7);
                        *v206 = *(_QWORD *)v207;
                        v208 = (std::string *)(v206 + 1);
                        if (*(char *)(v207 + 31) < 0)
                        {
                          std::string::__init_copy_ctor_external(v208, *(const std::string::value_type **)(v207 + 8), *(_QWORD *)(v207 + 16));
                        }
                        else
                        {
                          v209 = *(_OWORD *)(v207 + 8);
                          v206[3] = *(_QWORD *)(v207 + 24);
                          *(_OWORD *)&v208->__r_.__value_.__l.__data_ = v209;
                        }
                        *((_QWORD *)v174 + 7) = v206;
                        *v206 = 1;
                        do
                        {
                          v245 = __ldaxr((unint64_t *)v205);
                          v246 = v245 - 1;
                        }
                        while (__stlxr(v246, (unint64_t *)v205));
                        if (!v246)
                        {
                          if (*(char *)(v205 + 31) < 0)
                            operator delete(*(void **)(v205 + 8));
                          v222 = (unint64_t *)v205;
                          v230 = 0x1012C404EF22A49;
                          goto LABEL_445;
                        }
                      }
                      break;
                    case 3:
                      v224 = (unint64_t *)*((_QWORD *)v174 + 7);
                      if (*v224 != 1)
                      {
                        v225 = (_QWORD *)operator new();
                        v226 = *((_QWORD *)v174 + 7);
                        *v225 = *(_QWORD *)v226;
                        v225[2] = 0;
                        v225[3] = 0;
                        v225[1] = 0;
                        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v225 + 1, *(const void **)(v226 + 8), *(_QWORD *)(v226 + 16), (uint64_t)(*(_QWORD *)(v226 + 16) - *(_QWORD *)(v226 + 8)) >> 3);
                        *((_QWORD *)v174 + 7) = v225;
                        *v225 = 1;
                        do
                        {
                          v227 = __ldaxr(v224);
                          v228 = v227 - 1;
                        }
                        while (__stlxr(v228, v224));
                        if (!v228)
                        {
                          v229 = (void *)v224[1];
                          if (v229)
                          {
                            v224[2] = (unint64_t)v229;
                            operator delete(v229);
                          }
                          v222 = v224;
                          v230 = 0x1080C409938AC02;
                          goto LABEL_445;
                        }
                      }
                      break;
                    case 4:
                      v210 = (unint64_t *)*((_QWORD *)v174 + 7);
                      if (*v210 != 1)
                      {
                        v211 = (_QWORD *)operator new();
                        v212 = *((_QWORD *)v174 + 7);
                        *v211 = *(_QWORD *)v212;
                        v211[2] = 0;
                        v211[3] = 0;
                        v211[1] = 0;
                        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v211 + 1, *(uint64_t **)(v212 + 8), *(uint64_t **)(v212 + 16), (uint64_t)(*(_QWORD *)(v212 + 16) - *(_QWORD *)(v212 + 8)) >> 4);
                        *((_QWORD *)v174 + 7) = v211;
                        *v211 = 1;
                        do
                        {
                          v213 = __ldaxr(v210);
                          v214 = v213 - 1;
                        }
                        while (__stlxr(v214, v210));
                        if (!v214)
                        {
                          *(_QWORD *)v319 = v210 + 1;
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
                          goto LABEL_428;
                        }
                      }
                      break;
                    case 5:
                      v210 = (unint64_t *)*((_QWORD *)v174 + 7);
                      if (*v210 != 1)
                      {
                        v231 = (_QWORD *)operator new();
                        v232 = *((_QWORD *)v174 + 7);
                        *v231 = *(_QWORD *)v232;
                        v231[2] = 0;
                        v231[3] = 0;
                        v231[1] = 0;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v231 + 1, *(uint64_t **)(v232 + 8), *(uint64_t **)(v232 + 16), (uint64_t)(*(_QWORD *)(v232 + 16) - *(_QWORD *)(v232 + 8)) >> 5);
                        *((_QWORD *)v174 + 7) = v231;
                        *v231 = 1;
                        do
                        {
                          v233 = __ldaxr(v210);
                          v234 = v233 - 1;
                        }
                        while (__stlxr(v234, v210));
                        if (!v234)
                        {
                          *(_QWORD *)v319 = v210 + 1;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
LABEL_428:
                          v222 = v210;
                          v230 = 0x1020C405E66F15BLL;
                          goto LABEL_445;
                        }
                      }
                      break;
                    case 8:
                      v235 = *((_QWORD *)v174 + 7);
                      if (*(_QWORD *)v235 != 1)
                      {
                        v236 = operator new();
                        v237 = *((_QWORD *)v174 + 7);
                        *(_QWORD *)v236 = *(_QWORD *)v237;
                        *(_QWORD *)(v236 + 8) = *(_QWORD *)(v237 + 8);
                        v238 = *(_QWORD *)(v237 + 16);
                        *(_QWORD *)(v236 + 16) = v238;
                        if (v238)
                        {
                          v239 = (unsigned int *)(v238 + 8);
                          do
                            v240 = __ldxr(v239);
                          while (__stxr(v240 + 1, v239));
                        }
                        v241 = *(_OWORD *)(v237 + 24);
                        v242 = *(_OWORD *)(v237 + 40);
                        *(_OWORD *)(v236 + 56) = *(_OWORD *)(v237 + 56);
                        *(_OWORD *)(v236 + 40) = v242;
                        *(_OWORD *)(v236 + 24) = v241;
                        *((_QWORD *)v174 + 7) = v236;
                        *(_QWORD *)v236 = 1;
                        do
                        {
                          v243 = __ldaxr((unint64_t *)v235);
                          v244 = v243 - 1;
                        }
                        while (__stlxr(v244, (unint64_t *)v235));
                        if (!v244)
                        {
                          boost::detail::shared_count::~shared_count((unsigned int **)(v235 + 16));
                          v222 = (unint64_t *)v235;
                          v223 = -235920773;
                          goto LABEL_437;
                        }
                      }
                      break;
                    case 9:
                      v215 = (unint64_t *)*((_QWORD *)v174 + 7);
                      if (*v215 != 1)
                      {
                        v216 = (_QWORD *)operator new();
                        v217 = (_QWORD *)*((_QWORD *)v174 + 7);
                        *v216 = *v217;
                        turi::flexible_type_impl::ndarray<double>::ndarray(v216 + 1, (uint64_t)(v217 + 1));
                        *((_QWORD *)v174 + 7) = v216;
                        *v216 = 1;
                        do
                        {
                          v218 = __ldaxr(v215);
                          v219 = v218 - 1;
                        }
                        while (__stlxr(v219, v215));
                        if (!v219)
                        {
                          v220 = (void *)v215[6];
                          if (v220)
                          {
                            v215[7] = (unint64_t)v220;
                            operator delete(v220);
                          }
                          v221 = (void *)v215[3];
                          if (v221)
                          {
                            v215[4] = (unint64_t)v221;
                            operator delete(v221);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v215 + 1));
                          v222 = v215;
                          v223 = 2071181815;
LABEL_437:
                          v230 = v223 | 0x1030C4000000000;
LABEL_445:
                          MEMORY[0x219A19A08](v222, v230);
                        }
                      }
                      break;
                    default:
                      break;
                  }
                  std::string::operator=((std::string *)(*((_QWORD *)v174 + 7) + 8), (const std::string *)&v307[32]);
                  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v318.__r_.__value_.__l.__data_);
                  v247 = (int *)global_logger();
                  if (v247[169] <= 2)
                  {
                    if (cppipc::must_cancel((cppipc *)v247))
                      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
                    v248 = (file_logger *)global_logger();
                    v249 = file_logger::start_stream(v248, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_toolkit", 780, 1);
                    v250 = pthread_getspecific(*((_QWORD *)v249 + 74));
                    if (v250 && *((_BYTE *)v250 + 280))
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250 + 2, (uint64_t)"Adding class : ", 15);
                    if (*(char *)(v163 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)v163, *(_QWORD *)(v163 + 8));
                    }
                    else
                    {
                      v251 = *(_OWORD *)v163;
                      v277.__r_.__value_.__r.__words[2] = *(_QWORD *)(v163 + 16);
                      *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v251;
                    }
                    v252 = file_logger::operator<<<std::string>((uint64_t)v249, (uint64_t)&v277);
                    v253 = pthread_getspecific(*(_QWORD *)(v252 + 592));
                    if (v253)
                    {
                      if (*((_BYTE *)v253 + 280))
                      {
                        std::ios_base::getloc((const std::ios_base *)((char *)v253 + *(_QWORD *)(v253[2] - 24) + 16));
                        v254 = std::locale::use_facet((const std::locale *)&v318, MEMORY[0x24BEDB350]);
                        ((void (*)(const std::locale::facet *, uint64_t))v254->__vftable[2].~facet_0)(v254, 10);
                        std::locale::~locale((std::locale *)&v318);
                        std::ostream::put();
                        std::ostream::flush();
                        file_logger::stream_flush((file_logger *)v252);
                        if (*(_DWORD *)(v252 + 600) == 7)
                        {
                          __print_back_trace();
                          v269 = __cxa_allocate_exception(8uLL);
                          *v269 = "LOG_FATAL encountered";
                          __cxa_throw(v269, MEMORY[0x24BEDB718], 0);
                        }
                      }
                    }
                    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v277.__r_.__value_.__l.__data_);
                  }
                  v255 = (_OWORD *)v310;
                  if ((unint64_t)v310 >= *((_QWORD *)&v310 + 1))
                  {
                    v257 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v309 + 1, (__int128 *)v163);
                  }
                  else
                  {
                    if (*(char *)(v163 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v310, *(const std::string::value_type **)v163, *(_QWORD *)(v163 + 8));
                    }
                    else
                    {
                      v256 = *(_OWORD *)v163;
                      *(_QWORD *)(v310 + 16) = *(_QWORD *)(v163 + 16);
                      *v255 = v256;
                    }
                    v257 = (uint64_t)v255 + 24;
                  }
                  *(_QWORD *)&v310 = v257;
                  v163 += 56;
                }
                while (v163 != v162);
                v163 = v320.__r_.__value_.__l.__size_;
                v258 = (__int128 *)v320.__r_.__value_.__r.__words[0];
              }
              v259 = *(uint64_t ***)(a1 + 32);
              memset(&v276, 0, sizeof(v276));
              std::vector<turi::toolkit_class_specification>::__init_with_size[abi:ne180100]<turi::toolkit_class_specification*,turi::toolkit_class_specification*>(&v276, v258, (__int128 *)v163, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v163 - (_QWORD)v258) >> 3));
              std::string::basic_string[abi:ne180100]<0>(v274, "");
              turi::toolkit_class_registry::register_toolkit_class(v259, (uint64_t *)&v276, (const void **)v274);
              if (v275 < 0)
                operator delete(v274[0]);
              v318.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
              std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
              v318.__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
              std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
            }
LABEL_473:
            if (*((_QWORD *)&v309 + 1) == (_QWORD)v310 && v311[0] == v311[1])
            {
              dlclose(v39);
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v273 = *(std::string *)a2;
              turi::sanitize_url((__n128 *)&v273, (__n128 *)&v320);
              v265 = std::string::insert(&v320, 0, "No functions or classes registered by ");
              v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
              a4[2] = *((_QWORD *)&v265->__r_.__value_.__l + 2);
              *(_OWORD *)a4 = v266;
              v265->__r_.__value_.__l.__size_ = 0;
              v265->__r_.__value_.__r.__words[2] = 0;
              v265->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v320.__r_.__value_.__l.__data_);
              if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v273.__r_.__value_.__l.__data_);
            }
            else
            {
              v318.__r_.__value_.__r.__words[0] = (std::string::size_type)&v307[32];
              v260 = std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)&v307[32], (uint64_t)&std::piecewise_construct, (__int128 **)&v318);
              v260[7] = *(_QWORD *)v307;
              std::string::operator=((std::string *)(v260 + 8), (const std::string *)&v307[8]);
              std::string::operator=((std::string *)(v260 + 11), (const std::string *)&v307[32]);
              std::string::operator=((std::string *)(v260 + 14), (const std::string *)&v308);
              if (v260 + 7 != (uint64_t *)v307)
              {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v260 + 17), *((std::string **)&v309 + 1), (__int128 *)v310, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v310 - *((_QWORD *)&v309 + 1)) >> 3));
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v260 + 20), v311[0], (__int128 *)v311[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v311[1] - (char *)v311[0]) >> 3));
              }
              *a4 = 0;
              a4[1] = 0;
              a4[2] = 0;
            }
            v320.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v320);
            v320.__r_.__value_.__r.__words[0] = (std::string::size_type)&v323;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v320);
          }
          else
          {
            v53 = dlerror();
            std::string::basic_string[abi:ne180100]<0>(&v320, v53);
            v54 = (int *)global_logger();
            if (v54[169] <= 6)
            {
              if (cppipc::must_cancel((cppipc *)v54))
                log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
              v55 = (file_logger *)global_logger();
              v56 = file_logger::start_stream(v55, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_toolkit", 698, 1);
              v57 = pthread_getspecific(*((_QWORD *)v56 + 74));
              if (v57 && *((_BYTE *)v57 + 280))
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57 + 2, (uint64_t)"Unable to load ", 15);
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v284, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v284 = *(std::string *)a2;
              turi::sanitize_url((__n128 *)&v284, &v285);
              v261 = file_logger::operator<<<std::string>((uint64_t)v56, (uint64_t)&v285);
              v262 = pthread_getspecific(*(_QWORD *)(v261 + 592));
              if (v262 && *((_BYTE *)v262 + 280))
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v262 + 2, (uint64_t)": ", 2);
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v283, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
              else
                v283 = v320;
              v263 = file_logger::operator<<<std::string>(v261, (uint64_t)&v283);
              v264 = pthread_getspecific(*(_QWORD *)(v263 + 592));
              if (v264)
              {
                if (*((_BYTE *)v264 + 280))
                {
                  std::endl[abi:ne180100]<char,std::char_traits<char>>(v264 + 2);
                  file_logger::stream_flush((file_logger *)v263);
                  if (*(_DWORD *)(v263 + 600) == 7)
                  {
                    __print_back_trace();
                    v271 = __cxa_allocate_exception(8uLL);
                    *v271 = "LOG_FATAL encountered";
                    __cxa_throw(v271, MEMORY[0x24BEDB718], 0);
                  }
                }
              }
              if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v283.__r_.__value_.__l.__data_);
              if (v286 < 0)
                operator delete((void *)v285.n128_u64[0]);
              if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v284.__r_.__value_.__l.__data_);
            }
            if (v53)
            {
              *(std::string *)a4 = v320;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(a4, "dlopen failed due to an unknown error");
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v320.__r_.__value_.__l.__data_);
            }
          }
          goto LABEL_501;
        }
        v27 = *a3;
      }
      else
      {
        v27 = a3;
        if (v26 != 2)
        {
          if (*((_BYTE *)a3 + 23))
            goto LABEL_115;
LABEL_136:
          std::string::operator=((std::string *)&v307[8], (const std::string *)v290);
          goto LABEL_138;
        }
      }
      if (*v27 == 11822)
      {
        MEMORY[0x219A19390](&v307[8], "");
        goto LABEL_138;
      }
      goto LABEL_115;
    }
  }
  else if (v18)
  {
    goto LABEL_43;
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v302, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v302 = *(std::string *)a2;
  turi::sanitize_url((__n128 *)&v302, (__n128 *)&v320);
  v20 = std::string::insert(&v320, 0, "Unable to open file ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  a4[2] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)a4 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v320.__r_.__value_.__l.__data_);
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
  {
    v22 = (void *)v302.__r_.__value_.__r.__words[0];
LABEL_503:
    operator delete(v22);
  }
LABEL_504:
  v320.__r_.__value_.__r.__words[0] = (std::string::size_type)v311;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v320);
  v320.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v320);
  if (SBYTE7(v309) < 0)
    operator delete((void *)v308);
  if ((v307[55] & 0x80000000) != 0)
    operator delete(*(void **)&v307[32]);
  if ((v307[31] & 0x80000000) != 0)
    operator delete(*(void **)&v307[8]);
  if (v316 < 0)
    operator delete(v314);
}

void sub_2184568F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::locale a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  *(_QWORD *)(v56 - 224) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 224));
  *(_QWORD *)(v56 - 224) = v56 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 224));
  *(_QWORD *)(v56 - 152) = &a56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 152));
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  turi::unity_global::so_registration_list::~so_registration_list((void **)&STACK[0x2D0]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  _Unwind_Resume(a1);
}

BOOL turi::file_contains_substring(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::string v10;
  std::string v11[8];
  void *__p;
  char v13;
  _QWORD v14[20];

  v14[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  turi::general_ifstream::general_ifstream(v11, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if ((v11[1].__r_.__value_.__s.__data_[*(_QWORD *)(v11[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
    turi::file_contains_substring(std::string,std::string)::$_0::operator()();
  v3 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)v11);
  if (v3 == -1)
    turi::file_contains_substring(std::string,std::string)::$_1::operator()();
  v4 = operator new[]();
  std::istream::read();
  v5 = v4 + v3;
  if (*(char *)(a2 + 23) < 0)
  {
    v7 = a2;
    a2 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(v7 + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(a2 + 23);
  }
  v8 = boost::algorithm::boyer_moore_search<std::__wrap_iter<char *>,char *>(v4, v4 + v3, a2, a2 + v6);
  MEMORY[0x219A199F0](v4, 0x1000C8077774924);
  v11[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  v14[0] = &unk_24D91DA80;
  if (v13 < 0)
    operator delete(__p);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v11[0].__r_.__value_.__r.__words[2]);
  MEMORY[0x219A198F4](v14);
  return v5 != v8;
}

void sub_218457134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void turi::unity_global::so_registration_list::~so_registration_list(void **this)
{
  void **v2;

  v2 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

std::string *turi::unity_global::list_toolkit_functions_in_dynamic_module@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  _QWORD *exception;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1 + 40, (const void **)a2);
  if (a1 + 48 == v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v13 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v13, (__n128 *)&v14);
    v9 = std::string::insert(&v14, 0, "Toolkit name ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v15, " not found");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    exception[2] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, *(__int128 **)(v6 + 136), *(__int128 **)(v6 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 144) - *(_QWORD *)(v6 + 136)) >> 3));
}

void sub_218457314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v27 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v26);
  goto LABEL_10;
}

std::string *turi::unity_global::list_toolkit_classes_in_dynamic_module@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  _QWORD *exception;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1 + 40, (const void **)a2);
  if (a1 + 48 == v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v13 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v13, (__n128 *)&v14);
    v9 = std::string::insert(&v14, 0, "Toolkit name ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v15, " not found");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    exception[2] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, *(__int128 **)(v6 + 160), *(__int128 **)(v6 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 168) - *(_QWORD *)(v6 + 160)) >> 3));
}

void sub_2184574B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v27 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v26);
  goto LABEL_10;
}

void turi::unity_global::get_current_cache_file_location(std::string *a1@<X8>)
{
  std::string v3;
  std::string v4;
  std::string __p;
  std::string v6;

  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::get_temp_name((uint64_t)&__p, &v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  if (boost::filesystem::path::has_parent_path((boost::filesystem::path *)&__p))
  {
    boost::filesystem::path::parent_path((boost::filesystem::path *)&__p, &v4);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v3, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
    else
      v3 = v6;
    turi::delete_temp_file((uint64_t)&v3);
    if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v3.__r_.__value_.__l.__data_);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a1, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
      if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v4.__r_.__value_.__l.__data_);
    }
    else
    {
      *a1 = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_218457670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

BOOL boost::filesystem::path::has_parent_path(boost::filesystem::path *this)
{
  _BOOL8 v1;
  std::string v3;

  boost::filesystem::path::parent_path(this, &v3);
  if ((SHIBYTE(v3.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return SHIBYTE(v3.__r_.__value_.__r.__words[2]) != 0;
  v1 = v3.__r_.__value_.__l.__size_ != 0;
  operator delete(v3.__r_.__value_.__l.__data_);
  return v1;
}

uint64_t std::pair<std::string const,std::vector<turi::flexible_type>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

turi::toolkit_function_invocation *turi::toolkit_function_invocation::toolkit_function_invocation(turi::toolkit_function_invocation *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 6) = 0;
  std::function<void ()(std::string)>::operator=<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},void>((_QWORD *)this + 3);
  return this;
}

void sub_2184577D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = v2;
  v5 = *(_QWORD **)(v1 + 48);
  if (v5 == v3)
  {
    v6 = v3;
    v7 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v7 = 5;
    v6 = *(_QWORD **)(v1 + 48);
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(std::string)>::operator=<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &unk_24D941F18;
  v6 = v5;
  std::__function::__value_func<void ()(std::string)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24D941F18;
  return result;
}

void std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D941F18;
}

void std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1} &,std::string>(a1 + 8, a2);
}

uint64_t std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1} &,std::string>(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  uint64_t v3;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}::operator()(a1, (uint64_t)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
}

void sub_2184579A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}::operator()(uint64_t a1, uint64_t a2)
{
  int *v3;
  file_logger *v4;
  file_logger *started;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *exception;
  std::string __p;
  std::locale v12;

  v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/toolkit_function_invocation.hpp", "operator()", 22, 1);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"PROGRESS: ", 10);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    v7 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v8 = pthread_getspecific(*(_QWORD *)(v7 + 592));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v7);
        if (*(_DWORD *)(v7 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_218457B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t boost::algorithm::boyer_moore_search<std::__wrap_iter<char *>,char *>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8[260];
  void *__p;
  void *v10;

  boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::boyer_moore(v8, a3, a4);
  v6 = boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::operator()<char *>(v8, a1, a2);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_218457BEC(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x828];
  if (STACK[0x828])
  {
    STACK[0x830] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

unint64_t boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::operator()<char *>(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  if (a2 == a3 || *a1 == a1[1])
    return a2;
  if ((int64_t)(a3 - a2) < a1[2])
    return a3;
  return boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::do_search<char *>(a1, a2, a3);
}

uint64_t *boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::boyer_moore(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a3 - a2;
  v6 = a1 + 3;
  v7 = a1 + 260;
  v8 = a3 - a2 + 1;
  memset(a1 + 3, 255, 0x808uLL);
  std::vector<long>::vector(v7, v8);
  if (a3 != a2)
  {
    v9 = 0;
    do
    {
      v6[*(unsigned __int8 *)(a2 + v9)] = v9;
      ++v9;
    }
    while (a2 + v9 != a3);
  }
  boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::build_suffix_table((uint64_t)a1, a2, a3);
  return a1;
}

void sub_218457CDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 2088) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::build_suffix_table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  std::vector<char>::pointer begin;
  uint64_t v8;
  char v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[3];
  void *v20[3];
  std::vector<char> v21;

  v3 = a3 - a2;
  if (a3 != a2)
  {
    std::vector<char>::vector(&v21, a3 - a2);
    if (a3 != a2)
    {
      begin = v21.__begin_;
      v8 = a3;
      do
      {
        v9 = *(_BYTE *)--v8;
        *begin++ = v9;
      }
      while (v8 != a2);
    }
    std::vector<long>::vector(v20, v3);
    boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::compute_bm_prefix<std::__wrap_iter<char *>,std::vector<long>>(a1, a2, a3, v20);
    std::vector<long>::vector(__p, v3);
    boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::compute_bm_prefix<std::__wrap_iter<char *>,std::vector<long>>(a1, (uint64_t)v21.__begin_, (uint64_t)v21.__end_, __p);
    v10 = 0;
    v11 = v20[0];
    v12 = *(_QWORD *)(a1 + 2080);
    do
      *(_QWORD *)(v12 + 8 * v10) = v3 - v11[v3 - 1];
    while (v10++ < v3);
    v14 = 0;
    v15 = __p[0];
    do
    {
      v16 = v15[v14];
      v17 = v3 - v16;
      v18 = v14 - v16 + 1;
      if (*(_QWORD *)(v12 + 8 * v17) > v18)
        *(_QWORD *)(v12 + 8 * v17) = v18;
      ++v14;
    }
    while (v3 != v14);
    __p[1] = v15;
    operator delete(v15);
    if (v20[0])
    {
      v20[1] = v20[0];
      operator delete(v20[0]);
    }
    if (v21.__begin_)
    {
      v21.__end_ = v21.__begin_;
      operator delete(v21.__begin_);
    }
  }
}

void sub_218457E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_218457ECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::compute_bm_prefix<std::__wrap_iter<char *>,std::vector<long>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int i;

  v4 = (_QWORD *)*a4;
  *(_QWORD *)*a4 = 0;
  if ((unint64_t)(a3 - a2) >= 2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      for (i = *(unsigned __int8 *)(a2 + v6); v5; v5 = v4[v5 - 1])
      {
        if (*(unsigned __int8 *)(a2 + v5) == i)
          break;
      }
      if (*(unsigned __int8 *)(a2 + v5) == i)
        ++v5;
      v4[v6++] = v5;
    }
    while (v6 != a3 - a2);
  }
}

unint64_t boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::do_search<char *>(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  for (i = a1[2]; a2 <= a3 - i; a2 += v8)
  {
    v4 = a1[2];
    while (1)
    {
      v5 = *(unsigned __int8 *)(a2 - 1 + v4);
      if (*(unsigned __int8 *)(*a1 - 1 + v4) != (_DWORD)v5)
        break;
      if (!--v4)
        return a2;
    }
    v6 = a1[v5 + 3];
    v7 = a1[260];
    if (v6 >= v4)
    {
      v9 = *(_QWORD *)(v7 + 8 * v4);
    }
    else
    {
      v8 = ~v6 + v4;
      v9 = *(_QWORD *)(v7 + 8 * v4);
      if (v8 > v9)
        continue;
    }
    v8 = v9;
  }
  return a3;
}

void sub_21845817C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::unity_global::so_registration_list>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::unity_global::so_registration_list>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sgraph_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 0;
  if ((a2 - 2) >= 7)
  {
    switch(a2)
    {
      case 0:
        return result;
      case 1:
        result = a4;
        break;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

void turi::full_type_name<std::shared_ptr<turi::unity_sgraph_base>>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v8 = *a1;
  v9 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(a2, "SGraph");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v7);
}

void sub_2184583BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 0;
  if ((a2 - 3) >= 6)
  {
    switch(a2)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = a4;
        break;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

uint64_t turi::archive_detail::serialize_impl<turi::oarchive,turi::dataframe_t,false,void>::exec(uint64_t a1, uint64_t a2)
{
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec(a1, (uint64_t *)a2);
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>>(a1, *(const void ***)(a2 + 24), (const void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  return turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>>(a1, *(_QWORD **)(a2 + 48), (_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  size_t v14;
  uint64_t *v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v9)
    {
      v14 = 2 * v9 + 16;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        result = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, (const void **)a2 + 4);
      result = turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a1, a2 + 7);
      v11 = (_QWORD *)a2[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a2[2];
          v13 = *v12 == (_QWORD)a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  return result;
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>>(uint64_t a1, const void **a2, const void **a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  BOOL v13;
  size_t v14;
  uint64_t *v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v9)
    {
      v14 = 2 * v9 + 16;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        result = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::pair<std::string const,turi::flex_type_enum>,false,void>::exec(a1, a2 + 4);
      v11 = (const void **)a2[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void **)a2[2];
          v13 = *v12 == a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  return result;
}

_BYTE *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<std::string const,turi::flex_type_enum>,false,void>::exec(uint64_t a1, const void **a2)
{
  _BYTE *v4;
  _BYTE *result;
  unint64_t v6;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, a2);
  v4 = a2 + 3;
  if (*(_QWORD *)a1)
    return (_BYTE *)std::ostream::write();
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + 1 > v6)
  {
    v7 = 2 * v6 + 2;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(_QWORD **)(a1 + 16);
    if (v8)
    {
      result = (_BYTE *)*v8;
      v9 = v8[1] - *v8;
      v10 = v7 >= v9;
      v11 = v7 - v9;
      if (v11 != 0 && v10)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v11);
        result = **(_BYTE ***)(a1 + 16);
      }
      else if (!v10)
      {
        v8[1] = &result[v7];
      }
    }
    else
    {
      result = malloc_type_realloc(*(void **)(a1 + 24), v7, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = *(_BYTE **)(a1 + 24);
  }
  result[(*(_QWORD *)(a1 + 32))++] = *v4;
  return result;
}

uint64_t turi::model_base::save(turi::model_base *this, turi::oarchive *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  size_t v8;
  char **v9;
  size_t v10;
  BOOL v11;
  std::vector<char>::size_type v12;

  v4 = (*(uint64_t (**)(turi::model_base *))(*(_QWORD *)this + 48))(this);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v5)
    {
      v8 = 2 * v5 + 16;
      *((_QWORD *)a2 + 5) = v8;
      v9 = (char **)*((_QWORD *)a2 + 2);
      if (v9)
      {
        v6 = *v9;
        v10 = v9[1] - *v9;
        v11 = v8 >= v10;
        v12 = v8 - v10;
        if (v12 != 0 && v11)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v12);
          v6 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v11)
        {
          v9[1] = &v6[v8];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v8, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v6;
    }
    else
    {
      v6 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v6[*((_QWORD *)a2 + 4)] = v4;
    *((_QWORD *)a2 + 4) += 8;
  }
  return (*(uint64_t (**)(turi::model_base *, turi::oarchive *))(*(_QWORD *)this + 32))(this, a2);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::dataframe_t>(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  std::vector<std::string> **v5;
  _QWORD v6[10];

  v6[9] = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = (std::vector<std::string> **)&v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), &v5, (std::vector<std::string> *)(a1 + 2)) & 1) == 0)
  {
    LODWORD(v5) = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>::initializer_node::initialize(v6, a2);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_2184589AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, std::vector<std::string> ***a3, std::vector<std::string> *a4)
{
  if ((a2 - 3) >= 6)
  {
    switch(a2)
    {
      case 0:
      case 1:
        return 0;
      case 2:
        return boost::detail::variant::direct_mover<turi::dataframe_t>::operator()(*a3, a4);
      default:
        boost::detail::variant::forced_return<void>(a1);
    }
  }
  return 0;
}

uint64_t boost::detail::variant::direct_mover<turi::dataframe_t>::operator()(std::vector<std::string> **a1, std::vector<std::string> *this)
{
  std::vector<std::string> *v3;

  v3 = *a1;
  std::vector<std::string>::__vdeallocate(this);
  *this = *v3;
  v3->__begin_ = 0;
  v3->__end_ = 0;
  v3->__end_cap_.__value_ = 0;
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__move_assign((uint64_t)&this[1], &v3[1].__begin_);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__move_assign((uint64_t)&this[2], &v3[2].__begin_);
  return 1;
}

uint64_t boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>::initializer_node::initialize(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = *(_QWORD *)(a2 + 24);
  v2 = (_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 32);
  a1[4] = v3;
  v4 = a1 + 4;
  v5 = *(_QWORD *)(a2 + 40);
  a1[5] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 24) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    a1[3] = v4;
  }
  a1[6] = *(_QWORD *)(a2 + 48);
  v6 = (_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  a1[7] = v7;
  v8 = a1 + 7;
  v9 = *(_QWORD *)(a2 + 64);
  a1[8] = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 48) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v8;
  }
  return 2;
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 0;
  if ((a2 - 3) >= 6)
  {
    switch(a2)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = a4;
        break;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

void turi::deserialize_iterator<turi::iarchive,std::pair<std::string,std::vector<turi::flexible_type>>,std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>>(turi::iarchive *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string __p;
  uint64_t v9;
  std::string v10[2];
  unint64_t v11;
  _QWORD v12[2];
  void **v13;

  v12[0] = a2;
  v12[1] = a3;
  v11 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v6 = *(_QWORD *)(v4 + v5);
    v11 = v6;
    *((_QWORD *)a1 + 3) = v5 + 8;
    if (v6)
    {
      v7 = 0;
      do
      {
        memset(v10, 0, sizeof(v10));
        turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a1, v10);
        turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a1, (uint64_t *)&v10[1]);
        std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100]<std::string,std::vector<turi::flexible_type>,0>(&__p, (__int128 *)v10);
        std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>::operator=[abi:ne180100]((uint64_t)v12, (const void **)&__p.__r_.__value_.__l.__data_);
        v13 = (void **)&v9;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v13);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10[1];
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (SHIBYTE(v10[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10[0].__r_.__value_.__l.__data_);
        ++v7;
      }
      while (v7 < v11);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_218458C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::pair<std::string const,std::vector<turi::flexible_type>>::~pair((uint64_t)&a9);
  std::pair<std::string const,std::vector<turi::flexible_type>>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<turi::flexible_type>>>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (__int128 *)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

std::string *std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100]<std::string,std::vector<turi::flexible_type>,0>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(this[1].__r_.__value_.__r.__words, *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4);
  return this;
}

void sub_218458D60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<turi::flexible_type>>>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_218458E60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,std::insert_iterator<std::map<std::string,turi::flex_type_enum>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string __p;
  char v9;
  std::string v10;
  char v11;
  unint64_t v12;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v12 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v4 + v5);
    v12 = v6;
    *(_QWORD *)(a1 + 24) = v5 + 8;
    if (v6)
    {
      v7 = 0;
      do
      {
        memset(&v10, 0, sizeof(v10));
        v11 = 0;
        turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,false,void>::exec(a1, &v10);
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
        else
          __p = v10;
        v9 = v11;
        std::insert_iterator<std::map<std::string,turi::flex_type_enum>>::operator=[abi:ne180100]((uint64_t)v13, (const void **)&__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
        ++v7;
      }
      while (v7 < v12);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_218458FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<std::string,turi::flex_type_enum>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void *turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,false,void>::exec(uint64_t a1, std::string *a2)
{
  void *result;
  uint64_t v5;

  result = turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec(a1, a2);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return (void *)std::istream::read();
  a2[1].__r_.__value_.__s.__data_[0] = *(_BYTE *)(v5 + (*(_QWORD *)(a1 + 24))++);
  return result;
}

uint64_t turi::model_base::load(turi::model_base *this, turi::iarchive *a2)
{
  if (*((_QWORD *)a2 + 2))
    *((_QWORD *)a2 + 3) += 8;
  else
    std::istream::read();
  return (*(uint64_t (**)(turi::model_base *, turi::iarchive *))(*(_QWORD *)this + 40))(this, a2);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<std::shared_ptr<turi::model_base>>(unsigned int *a1, uint64_t ***a2)
{
  uint64_t **v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t ***v7;
  uint64_t **v8[11];

  v8[10] = *(uint64_t ***)MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8[0] = (uint64_t **)&v7;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<std::shared_ptr<turi::model_base>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ ((int)*a1 >> 31), v8, (_QWORD *)a1 + 1) & 1) == 0)
  {
    v4 = a2[1];
    v8[1] = *a2;
    v8[2] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    LODWORD(v8[0]) = 3;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v8);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v8);
  }
}

void sub_2184591FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<std::shared_ptr<turi::model_base>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t ***a3, _QWORD *a4)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return result;
    case 3:
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a4, **a3);
      result = 1;
      break;
    default:
      boost::detail::variant::forced_return<void>(0);
  }
  return result;
}

uint64_t std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 80 * a2;
      v14 = 80 * a2;
      v15 = v7 + 16;
      do
      {
        *(_QWORD *)(v15 - 8) = 0;
        *(_DWORD *)v15 = 0;
        *(_BYTE *)(v15 + 4) = 0;
        *(_DWORD *)(v15 - 16) = 0;
        v15 += 80;
        v14 -= 80;
      }
      while (v14);
    }
    else
    {
      v13 = *(_QWORD *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x333333333333333)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x199999999999999)
      v11 = 0x333333333333333;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[80 * v8];
    v22 = &v12[80 * v11];
    v16 = &v20[80 * a2];
    v17 = 80 * a2;
    v18 = v20 + 16;
    do
    {
      *((_QWORD *)v18 - 1) = 0;
      *(_DWORD *)v18 = 0;
      v18[4] = 0;
      *((_DWORD *)v18 - 4) = 0;
      v18 += 80;
      v17 -= 80;
    }
    while (v17);
    v21 = v16;
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_2184593C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D941FA8;
  return result;
}

void std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D941FA8;
}

void std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v2;
  int v3;

  v2 = *(void **)a2;
  v3 = *(char *)(a2 + 23);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  logger(a1, (const char *)a2);
  if (v3 < 0)
    operator delete(v2);
}

void sub_2184594D4(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;
  int v3;

  v3 = v2;
  if (v3 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::target_type()
{
}

uint64_t logger(uint64_t a1, const char *a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  v2 = global_logger();
  return file_logger::_log((uint64_t)v2, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, "Invoke.progress deprecated", va);
}

uint64_t std::map<std::string,turi::flexible_type>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,turi::flexible_type> *>>(uint64_t a1, std::string *a2, std::string *a3)
{
  uint64_t *v4;
  std::string *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string,turi::flexible_type> &>((uint64_t **)a1, v4, (const void **)&v6->__r_.__value_.__l.__data_, v6);
      v6 = (std::string *)((char *)v6 + 40);
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2184595EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string,turi::flexible_type> &>(uint64_t **a1, uint64_t *a2, const void **a3, std::string *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string,turi::flexible_type> &>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string,turi::flexible_type> &>@<X0>(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string,turi::flexible_type,0>((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2184596E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::vector<turi::toolkit_function_specification>::__init_with_size[abi:ne180100]<turi::toolkit_function_specification*,turi::toolkit_function_specification*>(std::string *result, turi::toolkit_function_specification *a2, turi::toolkit_function_specification *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::style_transfer::st_example>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*,turi::toolkit_function_specification*,turi::toolkit_function_specification*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_218459764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*,turi::toolkit_function_specification*,turi::toolkit_function_specification*>(uint64_t a1, turi::toolkit_function_specification *a2, turi::toolkit_function_specification *a3, std::string *this)
{
  std::string *v4;
  const turi::toolkit_function_specification *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      turi::toolkit_function_specification::toolkit_function_specification(v4, v6);
      v6 = (const turi::toolkit_function_specification *)((char *)v6 + 136);
      v4 = (std::string *)((char *)v11 + 136);
      v11 = (std::string *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_218459810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 136;
      std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *std::vector<turi::toolkit_class_specification>::__init_with_size[abi:ne180100]<turi::toolkit_class_specification*,turi::toolkit_class_specification*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*,turi::toolkit_class_specification*,turi::toolkit_class_specification*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_21845990C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*,turi::toolkit_class_specification*,turi::toolkit_class_specification*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<turi::toolkit_class_specification>::construct[abi:ne180100]<turi::toolkit_class_specification,turi::toolkit_class_specification const&>(v7, v4, v6);
      v6 = (__int128 *)((char *)v6 + 56);
      v4 = (std::string *)((char *)v12 + 56);
      v12 = (std::string *)((char *)v12 + 56);
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2184599C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 56;
      std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xB8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  result = 0.0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_218459B98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::unity_global::so_registration_list>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

__n128 OUTLINED_FUNCTION_1_4(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *a1;
  *(_QWORD *)(v1 - 80) = a1[1].n128_u64[0];
  *(__n128 *)(v1 - 96) = result;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void OUTLINED_FUNCTION_13_4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  operator delete(__p);
}

double OUTLINED_FUNCTION_33_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __n128 a13, uint64_t a14, uint64_t a15, __n128 a16)
{
  double result;

  *(_QWORD *)&result = turi::sanitize_url(&a13, &a16).n128_u64[0];
  return result;
}

std::string *OUTLINED_FUNCTION_42_2(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::string *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return std::string::append((std::string *)&a20, a2, a3);
}

_QWORD *OUTLINED_FUNCTION_43_2(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return std::string::basic_string[abi:ne180100]<0>((uint64_t *)va, a2);
}

double OUTLINED_FUNCTION_45_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __n128 a16)
{
  double result;

  *(_QWORD *)&result = turi::sanitize_url(&a9, &a16).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_49(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v3 = *a1;
  *(_QWORD *)(v2 - 80) = *((_QWORD *)a1 + 2);
  *(_OWORD *)(v2 - 96) = v3;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 16))(*(_QWORD *)(v1 + 8));
}

double OUTLINED_FUNCTION_50_0@<D0>(__n128 *a1@<X8>, __n128 a2)
{
  double result;

  *(_QWORD *)&result = turi::sanitize_url(&a2, a1).n128_u64[0];
  return result;
}

void OUTLINED_FUNCTION_60_0(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3, uint64_t a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::string::__init_copy_ctor_external((std::string *)&a13, a2, a3);
}

uint64_t OUTLINED_FUNCTION_61_0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t OUTLINED_FUNCTION_70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  return turi::error::io_error::io_error(v10, va);
}

__n128 OUTLINED_FUNCTION_80_1@<Q0>(uint64_t a1@<X8>)
{
  return *(__n128 *)a1;
}

void OUTLINED_FUNCTION_84_0()
{
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

_QWORD *OUTLINED_FUNCTION_87_0(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 28);
}

void __cxx_global_var_init_59()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_global_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::create_unity_global_singleton(turi::toolkit_function_registry *a1, turi::toolkit_class_registry *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;
  turi::toolkit_class_registry *v6;
  turi::toolkit_function_registry *v7;

  v6 = a2;
  v7 = a1;
  std::allocate_shared[abi:ne180100]<turi::unity_global,std::allocator<turi::unity_global>,turi::toolkit_function_registry *&,turi::toolkit_class_registry *&,void>(&v7, &v6, &v5);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&turi::unity_global_ptr, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t turi::get_unity_global_singleton@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v9 = turi::unity_global_ptr;
  if (!turi::unity_global_ptr)
  {
    result = assert_msg(0, (uint64_t)"Unity Global has not been created", a1, a2, a3, a4, a5, a6, v14);
    v9 = turi::unity_global_ptr;
  }
  v11 = qword_254FFB038;
  *a7 = v9;
  a7[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return result;
}

void sub_21845A058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::unity_global,std::allocator<turi::unity_global>,turi::toolkit_function_registry *&,turi::toolkit_class_registry *&,void>(turi::toolkit_function_registry **a1@<X1>, turi::toolkit_class_registry **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x58uLL);
  std::__shared_ptr_emplace<turi::unity_global>::__shared_ptr_emplace[abi:ne180100]<turi::toolkit_function_registry *&,turi::toolkit_class_registry *&,std::allocator<turi::unity_global>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21845A140(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::unity_global>::__shared_ptr_emplace[abi:ne180100]<turi::toolkit_function_registry *&,turi::toolkit_class_registry *&,std::allocator<turi::unity_global>,0>(_QWORD *a1, turi::toolkit_function_registry **a2, turi::toolkit_class_registry **a3)
{
  a1[2] = 0;
  *a1 = &unk_24D942078;
  a1[1] = 0;
  turi::unity_global::unity_global((turi::unity_global *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_21845A194(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::unity_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::unity_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::unity_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void __cxx_global_var_init_5_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_global_singleton_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  return __cxa_atexit((void (*)(void *))std::shared_ptr<turi::unity_global>::~shared_ptr[abi:ne180100], &turi::unity_global_ptr, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_variant_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)200>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  const CoreML::Specification::Model *v5;

  if (*(_DWORD *)(a1 + 44) == 200)
    v4 = *(uint64_t **)(a1 + 32);
  else
    v4 = CoreML::Specification::PipelineClassifier::default_instance((CoreML::Specification::PipelineClassifier *)a1);
  if (v4[2])
    v5 = (const CoreML::Specification::Model *)v4[2];
  else
    v5 = (const CoreML::Specification::Model *)&CoreML::Specification::_Pipeline_default_instance_;
  CoreML::validate((CoreML *)a1, v5, a2);
}

void CoreML::validate(CoreML *this@<X0>, const CoreML::Specification::Model *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const CoreML::Specification::Model *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  CoreML::Model **v17;
  CoreML::Model **v18;
  uint64_t v19;
  CoreML::Model *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CoreML::Specification *v26;
  unsigned __int8 *v27;
  const CoreML::Specification::FeatureDescription *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  CoreML::Specification **v37;
  uint64_t v38;
  CoreML::Result *v39;
  uint64_t v40;
  CoreML::Specification *v41;
  unsigned __int8 *v42;
  const CoreML::Specification::FeatureDescription *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 *v69;
  __int128 v70;
  void **v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type size;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  char *v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  const CoreML::Specification::Model *v103;
  int v104;
  std::string v106;
  void *__p[2];
  std::string::size_type v108;
  char v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string v114;
  _QWORD v115[4];
  int v116;

  v5 = *((int *)a2 + 6);
  if ((_DWORD)v5)
  {
    v6 = a2;
    memset(v115, 0, sizeof(v115));
    v116 = 1065353216;
    v8 = (uint64_t *)*((_QWORD *)this + 2);
    if (!v8)
      v8 = &CoreML::Specification::_ModelDescription_default_instance_;
    v9 = v8[4];
    if (v9)
      v10 = v9 + 8;
    else
      v10 = 0;
    v11 = *((int *)v8 + 6);
    v104 = v5;
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      do
      {
        v13 = *(_QWORD *)v10;
        __p[0] = *(void **)(*(_QWORD *)v10 + 16);
        *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v115, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 5) = v13;
        v10 += 8;
        v12 -= 8;
      }
      while (v12);
      v15 = (_QWORD *)((char *)v6 + 32);
      v14 = *((_QWORD *)v6 + 4);
      v16 = *((int *)v6 + 6);
      if (v14)
        v17 = (CoreML::Model **)(v14 + 8);
      else
        v17 = 0;
      if ((_DWORD)v16)
      {
        v103 = v6;
        v18 = &v17[v16];
        goto LABEL_21;
      }
LABEL_44:
      v35 = (uint64_t *)*((_QWORD *)this + 2);
      if (!v35)
        v35 = &CoreML::Specification::_ModelDescription_default_instance_;
      v36 = v35[7];
      if (v36)
        v37 = (CoreML::Specification **)(v36 + 8);
      else
        v37 = 0;
      v38 = *((int *)v35 + 12);
      v39 = (CoreML::Result *)a3;
      if ((_DWORD)v38)
      {
        v40 = 8 * v38;
        while (1)
        {
          v41 = *v37;
          v42 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v115, *((unsigned __int8 **)*v37 + 2));
          if (!v42)
          {
            std::operator+<char>();
            v81 = std::string::append(&v114, "' not present in pipeline input or a contained model.");
            v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
            v108 = v81->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v82;
            v81->__r_.__value_.__l.__size_ = 0;
            v81->__r_.__value_.__r.__words[2] = 0;
            v81->__r_.__value_.__r.__words[0] = 0;
            CoreML::Result::Result((_DWORD *)a3, 13);
            goto LABEL_133;
          }
          if (!CoreML::Specification::isEquivalent(v41, *((const CoreML::Specification::FeatureDescription **)v42 + 5), v43))break;
          ++v37;
          v40 -= 8;
          if (!v40)
            goto LABEL_54;
        }
        std::operator+<char>();
        v83 = std::string::append(&v114, "' does not match type produced in pipeline input.");
        v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        v108 = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result((_DWORD *)a3, 1);
LABEL_133:
        if (SHIBYTE(v108) < 0)
          operator delete(__p[0]);
        if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_138;
        v46 = (void *)v114.__r_.__value_.__r.__words[0];
        goto LABEL_137;
      }
LABEL_54:
      if (*((_BYTE *)this + 28))
      {
        v44 = (v104 - 1);
        if (v104 >= 2)
        {
          v45 = 0;
          while (1)
          {
            CoreML::Specification::Model::Model((CoreML::Specification::Model *)__p, *(const CoreML::Specification::Model **)(*v15 + 8 * v45 + 8));
            if (v109)
              break;
            CoreML::Specification::Model::~Model((CoreML::Specification::Model *)__p);
            if (v44 == ++v45)
              goto LABEL_59;
          }
          std::to_string(&v112, v45);
          v95 = std::string::insert(&v112, 0, "Only the last model in the pipeline can be updatable. Model at position '");
          v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          v113.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          v97 = std::string::append(&v113, "' is marked as updatable.");
          v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          v114.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result((_DWORD *)a3, 15);
LABEL_156:
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v113.__r_.__value_.__l.__data_);
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
          CoreML::Specification::Model::~Model((CoreML::Specification::Model *)__p);
          goto LABEL_138;
        }
LABEL_59:
        if (!*(_BYTE *)(*(_QWORD *)(*v15 + 8 * (int)v44 + 8) + 28))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "Last model in an updatable pipeline model should be marked as updatable.");
          CoreML::Result::Result((_DWORD *)a3, 15);
          if ((SHIBYTE(v108) & 0x80000000) == 0)
          {
LABEL_138:
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v115);
            return;
          }
          v46 = __p[0];
LABEL_137:
          operator delete(v46);
          goto LABEL_138;
        }
      }
      else if (v104 >= 1)
      {
        v66 = 0;
        while (1)
        {
          CoreML::Specification::Model::Model((CoreML::Specification::Model *)__p, *(const CoreML::Specification::Model **)(*v15 + 8 * v66 + 8));
          if (v109)
            break;
          CoreML::Specification::Model::~Model((CoreML::Specification::Model *)__p);
          if (v104 == ++v66)
            goto LABEL_101;
        }
        std::to_string(&v112, v66);
        v99 = std::string::insert(&v112, 0, "Found an updatable model at '");
        v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v100;
        v99->__r_.__value_.__l.__size_ = 0;
        v99->__r_.__value_.__r.__words[2] = 0;
        v99->__r_.__value_.__r.__words[0] = 0;
        v101 = std::string::append(&v113, "' inside a non-updatable pipeline.");
        v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
        v114.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v102;
        v101->__r_.__value_.__l.__size_ = 0;
        v101->__r_.__value_.__r.__words[2] = 0;
        v101->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result((_DWORD *)a3, 15);
        goto LABEL_156;
      }
LABEL_101:
      v67 = *((_DWORD *)v6 + 12);
      if (v67 < 1)
      {
LABEL_165:
        CoreML::Result::Result(v39);
        goto LABEL_138;
      }
      if (v67 == v104)
      {
        __p[1] = 0;
        v108 = 0;
        __p[0] = &__p[1];
        if (v104 >= 1)
        {
          v68 = 0;
          while (1)
          {
            v69 = *(__int128 **)(*((_QWORD *)v6 + 7) + 8 * v68 + 8);
            if (*((char *)v69 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)v69, *((_QWORD *)v69 + 1));
            }
            else
            {
              v70 = *v69;
              v114.__r_.__value_.__r.__words[2] = *((_QWORD *)v69 + 2);
              *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v70;
            }
            v71 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)__p, (const void **)&v114.__r_.__value_.__l.__data_);
            if (&__p[1] == v71)
            {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)__p, (const void **)&v114.__r_.__value_.__l.__data_, (uint64_t)&v114);
            }
            else
            {
              std::operator+<char>();
              v72 = std::string::append(&v110, "' at index '");
              v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
              v111.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v73;
              v72->__r_.__value_.__l.__size_ = 0;
              v72->__r_.__value_.__r.__words[2] = 0;
              v72->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v106, v68);
              if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v74 = &v106;
              else
                v74 = (std::string *)v106.__r_.__value_.__r.__words[0];
              if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
              else
                size = v106.__r_.__value_.__l.__size_;
              v76 = std::string::append(&v111, (const std::string::value_type *)v74, size);
              v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
              v112.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v77;
              v76->__r_.__value_.__l.__size_ = 0;
              v76->__r_.__value_.__r.__words[2] = 0;
              v76->__r_.__value_.__r.__words[0] = 0;
              v78 = std::string::append(&v112, " has already been used for previous models");
              v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
              v113.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v79;
              v78->__r_.__value_.__l.__size_ = 0;
              v78->__r_.__value_.__r.__words[2] = 0;
              v78->__r_.__value_.__r.__words[0] = 0;
              CoreML::Result::Result((_DWORD *)a3, 13);
              if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v113.__r_.__value_.__l.__data_);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v112.__r_.__value_.__l.__data_);
              if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v106.__r_.__value_.__l.__data_);
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v111.__r_.__value_.__l.__data_);
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v110.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v114.__r_.__value_.__l.__data_);
            if (&__p[1] != v71)
              break;
            if (v104 == ++v68)
            {
              v80 = (char *)__p[1];
              v39 = (CoreML::Result *)a3;
              goto LABEL_164;
            }
          }
          std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)__p, (char *)__p[1]);
          goto LABEL_138;
        }
        v80 = 0;
LABEL_164:
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)__p, v80);
        goto LABEL_165;
      }
      std::to_string(&v111, v67);
      v85 = std::string::insert(&v111, 0, "The number of pipeline model names '");
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      v87 = std::string::append(&v112, "' doesn't match the number of models '");
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v110, v104);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = &v110;
      else
        v89 = (std::string *)v110.__r_.__value_.__r.__words[0];
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      else
        v90 = v110.__r_.__value_.__l.__size_;
      v91 = std::string::append(&v113, (const std::string::value_type *)v89, v90);
      v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      v93 = std::string::append(&v114, "'");
      v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      v108 = v93->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result((_DWORD *)a3, 13);
      if (SHIBYTE(v108) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      {
        v65 = (void *)v113.__r_.__value_.__r.__words[0];
LABEL_92:
        operator delete(v65);
      }
    }
    else
    {
      v103 = a2;
      v15 = (_QWORD *)((char *)a2 + 32);
      v19 = *((_QWORD *)a2 + 4);
      if (v19)
        v17 = (CoreML::Model **)(v19 + 8);
      else
        v17 = 0;
      v18 = &v17[v5];
      while (1)
      {
LABEL_21:
        v20 = *v17;
        v21 = (uint64_t *)*((_QWORD *)*v17 + 2);
        if (!v21)
          v21 = &CoreML::Specification::_ModelDescription_default_instance_;
        v22 = v21[4];
        v23 = v22 ? v22 + 8 : 0;
        v24 = *((int *)v21 + 6);
        if ((_DWORD)v24)
          break;
LABEL_31:
        CoreML::Model::validate(v20, a2);
        if (!CoreML::Result::good((CoreML::Result *)a3))
          goto LABEL_138;
        v29 = (uint64_t *)*((_QWORD *)v20 + 2);
        if (!v29)
          v29 = &CoreML::Specification::_ModelDescription_default_instance_;
        v30 = v29[7];
        if (v30)
          v31 = v30 + 8;
        else
          v31 = 0;
        v32 = *((int *)v29 + 12);
        if ((_DWORD)v32)
        {
          v33 = 8 * v32;
          do
          {
            v34 = *(_QWORD *)v31;
            __p[0] = *(void **)(*(_QWORD *)v31 + 16);
            *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v115, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 5) = v34;
            v31 += 8;
            v33 -= 8;
          }
          while (v33);
        }
        if (*(char *)(a3 + 31) < 0)
          operator delete(*(void **)(a3 + 8));
        if (++v17 == v18)
        {
          v6 = v103;
          goto LABEL_44;
        }
      }
      v25 = 8 * v24;
      while (1)
      {
        v26 = *(CoreML::Specification **)v23;
        v27 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v115, *(unsigned __int8 **)(*(_QWORD *)v23 + 16));
        if (!v27)
        {
          std::operator+<char>();
          v47 = std::string::append(&v112, "' of model '");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v113.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          CoreML::Specification::ModelDescription::GetTypeName(&v111);
          if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &v111;
          else
            v49 = (std::string *)v111.__r_.__value_.__r.__words[0];
          if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
          else
            v50 = v111.__r_.__value_.__l.__size_;
          v51 = std::string::append(&v113, (const std::string::value_type *)v49, v50);
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v114.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          v53 = std::string::append(&v114, "' does not present in pipeline input or previous model.");
          v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v108 = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result((_DWORD *)a3, 13);
          if (SHIBYTE(v108) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v113.__r_.__value_.__l.__data_);
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          {
            v46 = (void *)v112.__r_.__value_.__r.__words[0];
            goto LABEL_137;
          }
          goto LABEL_138;
        }
        if (!CoreML::Specification::isEquivalent(v26, *((const CoreML::Specification::FeatureDescription **)v27 + 5), v28))break;
        v23 += 8;
        v25 -= 8;
        if (!v25)
          goto LABEL_31;
      }
      std::operator+<char>();
      v55 = std::string::append(&v111, "' of model '");
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      CoreML::Specification::ModelDescription::GetTypeName(&v110);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v110;
      else
        v57 = (std::string *)v110.__r_.__value_.__r.__words[0];
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      else
        v58 = v110.__r_.__value_.__l.__size_;
      v59 = std::string::append(&v112, (const std::string::value_type *)v57, v58);
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      v61 = std::string::append(&v113, "' does not match the type previously specified by the pipeline input or the output of a previous model.");
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      v63 = std::string::append(&v114, " For the second case, make sure the input and previous model's output has the matching name and shapes.");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v108 = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result((_DWORD *)a3, 1);
      if (SHIBYTE(v108) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      {
        v65 = (void *)v110.__r_.__value_.__r.__words[0];
        goto LABEL_92;
      }
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_138;
    v46 = (void *)v111.__r_.__value_.__r.__words[0];
    goto LABEL_137;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Pipeline must contain one or more models.");
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v108) < 0)
    operator delete(__p[0]);
}

void sub_21845AE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (*(char *)(v53 - 153) < 0)
    operator delete(*(void **)(v53 - 176));
  if (a53 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v53 - 144);
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)201>(CoreML *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  const CoreML::Specification::Model *v5;

  if (*((_DWORD *)this + 11) == 201)
    v4 = (uint64_t *)*((_QWORD *)this + 4);
  else
    v4 = CoreML::Specification::PipelineRegressor::default_instance(this);
  if (v4[2])
    v5 = (const CoreML::Specification::Model *)v4[2];
  else
    v5 = (const CoreML::Specification::Model *)&CoreML::Specification::_Pipeline_default_instance_;
  CoreML::validate(this, v5, a2);
}

void CoreML::validate<(MLModelType)202>(CoreML *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;

  if (*((_DWORD *)this + 11) == 202)
    v4 = (uint64_t *)*((_QWORD *)this + 4);
  else
    v4 = CoreML::Specification::Pipeline::default_instance(this);
  CoreML::validate(this, (const CoreML::Specification::Model *)v4, a2);
}

uint64_t _GLOBAL__sub_I_PipelineValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::get@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (_QWORD *)turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(a1);
  v4 = result[1];
  *a2 = *result;
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_21845B348(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::unity_sarray_base>>(v10);
}

void sub_21845B36C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::set(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  *(_DWORD *)a2 = 5;
}

_QWORD *turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::get@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (_QWORD *)turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(a1);
  v4 = result[1];
  *a2 = *result;
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_21845B45C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::unity_sframe_base>>(v10);
}

void sub_21845B480(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  *(_DWORD *)a2 = 4;
}

void turi::variant_converter<std::shared_ptr<turi::unity_sgraph>,void>::set(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  *(_DWORD *)a2 = 1;
}

void turi::variant_converter<turi::gl_sarray,void>::get(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (uint64_t *)turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(a1);
  v4 = (std::__shared_weak_count *)v3[1];
  v10 = *v3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  turi::gl_sarray::gl_sarray(a2, &v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21845B580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::variant_converter<turi::gl_sarray,void>::set(const turi::gl_sarray *a1@<X1>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc[2];

  if (turi::USE_GL_DATATYPE)
  {
    std::allocate_shared[abi:ne180100]<turi::gl_sarray,std::allocator<turi::gl_sarray>,turi::gl_sarray&,void>(a1, lpsrc);
    v3 = lpsrc[0];
    if (lpsrc[0]
    {
      v4 = lpsrc[1];
      if (lpsrc[1])
      {
        v5 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
    }
    else
    {
      v4 = 0;
    }
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a2 + 16) = v4;
    *(_DWORD *)a2 = 3;
    v7 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      v8 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>((uint64_t)a1, lpsrc);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)lpsrc;
    *(_DWORD *)a2 = 5;
  }
}

void turi::variant_converter<turi::gl_sframe,void>::get(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (uint64_t *)turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(a1);
  v4 = (std::__shared_weak_count *)v3[1];
  v10 = *v3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  turi::gl_sframe::gl_sframe(a2, &v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21845B70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double turi::variant_converter<turi::gl_sframe,void>::set@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;

  turi::gl_sframe::operator std::shared_ptr<turi::unity_sframe_base>(a1, &v4);
  result = *(double *)&v4;
  *(_OWORD *)(a2 + 8) = v4;
  *(_DWORD *)a2 = 4;
  return result;
}

void sub_21845B8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::gl_sarray,std::allocator<turi::gl_sarray>,turi::gl_sarray&,void>@<X0>(const turi::gl_sarray *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<turi::gl_sarray>::__shared_ptr_emplace[abi:ne180100]<turi::gl_sarray&,std::allocator<turi::gl_sarray>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21845B9D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::gl_sarray>::__shared_ptr_emplace[abi:ne180100]<turi::gl_sarray&,std::allocator<turi::gl_sarray>,0>(_QWORD *a1, const turi::gl_sarray *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D9420C8;
  a1[1] = 0;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 3), a2);
  return a1;
}

void sub_21845BA20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::gl_sarray>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9420C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::gl_sarray>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9420C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::gl_sarray>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void __cxx_global_var_init_6_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_variant_converter_cpp()
{
  _QWORD *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_USE_GL_DATATYPE");
  v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::__USE_GL_DATATYPE__register__instance, __p, &turi::USE_GL_DATATYPE, 1, v4);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_21845BC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _GLOBAL__sub_I_variant_converter_cpp_cold_1((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::variant_deep_save(uint64_t *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *has_fallback_type;
  char ***v9;
  char ***v10;
  char **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char ***v17;
  char ***v18;
  char **v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  char ***v24;
  char ***v25;
  char **v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  const void ***v31;
  char **v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  const void **v38;
  const void ***v39;
  const void **v40;
  const void **v41;
  const void ***v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  char **v49;
  size_t v50;
  BOOL v51;
  std::vector<char>::size_type v52;
  size_t v53;
  char **v54;
  size_t v55;
  BOOL v56;
  std::vector<char>::size_type v57;
  size_t v58;
  char **v59;
  size_t v60;
  BOOL v61;
  std::vector<char>::size_type v62;
  char **v63;
  std::__shared_weak_count *v64;
  char v65;
  char *v66;

  v4 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  LODWORD(v63) = v4;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 4 > v5)
    {
      v48 = 2 * v5 + 8;
      *(_QWORD *)(a2 + 40) = v48;
      v49 = *(char ***)(a2 + 16);
      if (v49)
      {
        v6 = *v49;
        v50 = v49[1] - *v49;
        v51 = v48 >= v50;
        v52 = v48 - v50;
        if (v52 != 0 && v51)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v52);
          v6 = **(char ***)(a2 + 16);
        }
        else if (!v51)
        {
          v49[1] = &v6[v48];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v48, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a2 + 24);
    }
    *(_DWORD *)&v6[*(_QWORD *)(a2 + 32)] = v4;
    *(_QWORD *)(a2 + 32) += 4;
  }
  v7 = *(unsigned int *)a1;
  switch(v7 ^ ((int)v7 >> 31))
  {
    case 0u:
      v63 = &v66;
      has_fallback_type = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v7, 0, (uint64_t)&v63, (uint64_t)(a1 + 1));
      if (!has_fallback_type)
      {
        v63 = (char **)&unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a2, has_fallback_type);
      return;
    case 1u:
      v66 = &v65;
      v24 = (char ***)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sgraph_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 1, (uint64_t)&v66, (uint64_t)(a1 + 1));
      v25 = v24;
      if (!v24)
      {
        v66 = (char *)&unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v26 = *v24;
      v12 = (std::__shared_weak_count *)v25[1];
      v63 = *v25;
      v64 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      (*((void (**)(char **, uint64_t))*v26 + 2))(v26, a2);
      if (!v12)
        return;
      v29 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v29);
      while (__stlxr(v16 - 1, v29));
      break;
    case 2u:
      v63 = &v66;
      v23 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 2, (uint64_t)&v63, (uint64_t)(a1 + 1));
      if (!v23)
      {
        v63 = (char **)&unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::serialize_impl<turi::oarchive,turi::dataframe_t,false,void>::exec(a2, v23);
      return;
    case 3u:
      turi::variant_deep_save(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,turi::oarchive &)::$_0::operator()();
    case 4u:
      v66 = &v65;
      v17 = (char ***)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 4, (uint64_t)&v66, (uint64_t)(a1 + 1));
      v18 = v17;
      if (!v17)
      {
        v66 = (char *)&unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v19 = *v17;
      v12 = (std::__shared_weak_count *)v18[1];
      v63 = *v18;
      v64 = v12;
      if (v12)
      {
        v20 = (unint64_t *)&v12->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      (*((void (**)(char **, uint64_t))*v19 + 2))(v19, a2);
      if (!v12)
        return;
      v22 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v22);
      while (__stlxr(v16 - 1, v22));
      break;
    case 5u:
      v66 = &v65;
      v9 = (char ***)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 5, (uint64_t)&v66, (uint64_t)(a1 + 1));
      v10 = v9;
      if (!v9)
      {
        v66 = (char *)&unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v11 = *v9;
      v12 = (std::__shared_weak_count *)v10[1];
      v63 = *v10;
      v64 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      (*((void (**)(char **, uint64_t))*v11 + 2))(v11, a2);
      if (!v12)
        return;
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      break;
    case 6u:
      v63 = &v66;
      v30 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 6u, (uint64_t)&v63, a1 + 1);
      v31 = (const void ***)v30;
      if (!v30)
      {
        v63 = (char **)&unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v32 = *(char ***)(v30 + 16);
      v63 = v32;
      if (*(_QWORD *)a2)
      {
        std::ostream::write();
      }
      else
      {
        v36 = *(_QWORD *)(a2 + 40);
        if (*(_QWORD *)(a2 + 32) + 8 > v36)
        {
          v53 = 2 * v36 + 16;
          *(_QWORD *)(a2 + 40) = v53;
          v54 = *(char ***)(a2 + 16);
          if (v54)
          {
            v37 = *v54;
            v55 = v54[1] - *v54;
            v56 = v53 >= v55;
            v57 = v53 - v55;
            if (v57 != 0 && v56)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v57);
              v37 = **(char ***)(a2 + 16);
            }
            else if (!v56)
            {
              v54[1] = &v37[v53];
            }
          }
          else
          {
            v37 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v53, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(a2 + 24) = v37;
        }
        else
        {
          v37 = *(char **)(a2 + 24);
        }
        *(_QWORD *)&v37[*(_QWORD *)(a2 + 32)] = v32;
        *(_QWORD *)(a2 + 32) += 8;
      }
      v40 = *v31;
      v39 = v31 + 1;
      v38 = v40;
      if (v40 != (const void **)v39)
      {
        do
        {
          turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a2, v38 + 4);
          turi::variant_deep_save(v38 + 7, a2);
          v41 = (const void **)v38[1];
          if (v41)
          {
            do
            {
              v42 = (const void ***)v41;
              v41 = (const void **)*v41;
            }
            while (v41);
          }
          else
          {
            do
            {
              v42 = (const void ***)v38[2];
              v43 = *v42 == v38;
              v38 = (const void **)v42;
            }
            while (!v43);
          }
          v38 = (const void **)v42;
        }
        while (v42 != v39);
      }
      return;
    case 7u:
      v63 = &v66;
      v33 = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 7u, (uint64_t)&v63, a1 + 1);
      v34 = v33;
      if (!v33)
      {
        v63 = (char **)&unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      v35 = 0xCCCCCCCCCCCCCCCDLL * ((v33[1] - *v33) >> 4);
      v63 = (char **)v35;
      if (*(_QWORD *)a2)
      {
        std::ostream::write();
      }
      else
      {
        v44 = *(_QWORD *)(a2 + 40);
        if (*(_QWORD *)(a2 + 32) + 8 > v44)
        {
          v58 = 2 * v44 + 16;
          *(_QWORD *)(a2 + 40) = v58;
          v59 = *(char ***)(a2 + 16);
          if (v59)
          {
            v45 = *v59;
            v60 = v59[1] - *v59;
            v61 = v58 >= v60;
            v62 = v58 - v60;
            if (v62 != 0 && v61)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v62);
              v45 = **(char ***)(a2 + 16);
            }
            else if (!v61)
            {
              v59[1] = &v45[v58];
            }
          }
          else
          {
            v45 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v58, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(a2 + 24) = v45;
        }
        else
        {
          v45 = *(char **)(a2 + 24);
        }
        *(_QWORD *)&v45[*(_QWORD *)(a2 + 32)] = v35;
        *(_QWORD *)(a2 + 32) += 8;
      }
      v46 = *v34;
      v47 = v34[1];
      while (v46 != v47)
      {
        turi::variant_deep_save(v46, a2);
        v46 += 80;
      }
      return;
    default:
      return;
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_21845C250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::variant_deep_load(unsigned int *a1, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  turi::unity_sarray *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  turi::unity_sframe *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  turi::unity_sgraph *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t i;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD **has_fallback_type;
  std::string __p;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  std::string *p_p;
  __int128 v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  _QWORD **v80;
  _QWORD *v81[5];

  v81[4] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v74 = 0;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 3);
    v6 = *(_DWORD *)(v4 + v5);
    v74 = v6;
    *((_QWORD *)a2 + 3) = v5 + 4;
  }
  else
  {
    std::istream::read();
    v6 = v74;
  }
  switch(v6)
  {
    case 0:
      *(_QWORD *)&v76 = 0;
      DWORD2(v76) = 0;
      BYTE12(v76) = 0;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::flexible_type>(a1, (uint64_t)&v76);
      switch(BYTE12(v76))
      {
        case 2:
          v7 = (unint64_t *)v76;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            v10 = (_QWORD *)v76;
            if ((_QWORD)v76)
            {
              if (*(char *)(v76 + 31) < 0)
                operator delete(*(void **)(v76 + 8));
              v11 = v10;
              v12 = 0x1012C404EF22A49;
              goto LABEL_97;
            }
          }
          break;
        case 3:
          v57 = (unint64_t *)v76;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = (_QWORD *)v76;
            if ((_QWORD)v76)
            {
              v61 = *(void **)(v76 + 8);
              if (v61)
              {
                *(_QWORD *)(v76 + 16) = v61;
                operator delete(v61);
              }
              v11 = v60;
              v12 = 0x1080C409938AC02;
              goto LABEL_97;
            }
          }
          break;
        case 4:
          v49 = (unint64_t *)v76;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
          {
            v52 = (_QWORD *)v76;
            if ((_QWORD)v76)
            {
              *(_QWORD *)&v71 = v76 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
              goto LABEL_90;
            }
          }
          break;
        case 5:
          v62 = (unint64_t *)v76;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v52 = (_QWORD *)v76;
            if ((_QWORD)v76)
            {
              *(_QWORD *)&v71 = v76 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
LABEL_90:
              v11 = v52;
              v12 = 0x1020C405E66F15BLL;
              goto LABEL_97;
            }
          }
          break;
        case 8:
          v65 = (unint64_t *)v76;
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = (_QWORD *)v76;
            if ((_QWORD)v76)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v76 + 16));
              v11 = v68;
              v56 = -235920773;
              goto LABEL_96;
            }
          }
          break;
        case 9:
          v53 = (unint64_t *)v76;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55 && (_QWORD)v76)
          {
            v11 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v76);
            v56 = 2071181815;
LABEL_96:
            v12 = v56 | 0x1030C4000000000;
LABEL_97:
            MEMORY[0x219A19A08](v11, v12);
          }
          break;
        default:
          break;
      }
      *(_QWORD *)&v76 = &v71;
      has_fallback_type = (_QWORD **)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), (uint64_t)&v76, (uint64_t)(a1 + 2));
      if (!has_fallback_type)
      {
        *(_QWORD *)&v76 = &unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, has_fallback_type);
      return;
    case 1:
      v32 = (turi::unity_sgraph *)operator new();
      turi::unity_sgraph::unity_sgraph(v32, turi::SGRAPH_DEFAULT_NUM_PARTITIONS);
      std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&__p, (uint64_t)v32);
      (*(void (**)(std::string::size_type, turi::iarchive *))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0], a2);
      v71 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sgraph>,void>::set((uint64_t *)&v71, (uint64_t)&v76);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v76);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v76);
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        return;
      v38 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v38);
      while (__stlxr(v21 - 1, v38));
      break;
    case 2:
      v77 = 0;
      v79 = 0u;
      v76 = 0u;
      v78 = &v79;
      v81[0] = 0;
      v81[1] = 0;
      v80 = v81;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::dataframe_t>(a1, (uint64_t)&v76);
      std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)&v80, v81[0]);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v78, (char *)v79);
      *(_QWORD *)&v71 = &v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      *(_QWORD *)&v76 = &v71;
      v29 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ ((int)*a1 >> 31), (uint64_t)&v76, (uint64_t)(a1 + 2));
      if (!v29)
      {
        *(_QWORD *)&v76 = &unk_24D918C20;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)v29);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v29 + 24, *(char **)(v29 + 32));
      *(_QWORD *)(v29 + 24) = v29 + 32;
      *(_QWORD *)(v29 + 32) = 0;
      *(_QWORD *)(v29 + 40) = 0;
      turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,std::insert_iterator<std::map<std::string,turi::flex_type_enum>>>((uint64_t)a2, v29 + 24, v29 + 32);
      v31 = *(_QWORD **)(v29 + 56);
      v30 = (_QWORD *)(v29 + 56);
      std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)(v30 - 1), v31);
      *(v30 - 1) = v30;
      *v30 = 0;
      v30[1] = 0;
      turi::deserialize_iterator<turi::iarchive,std::pair<std::string,std::vector<turi::flexible_type>>,std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>>(a2, (uint64_t)(v30 - 1), (uint64_t)v30);
      return;
    case 3:
      turi::variant_deep_load(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> &,turi::iarchive &)::$_0::operator()();
    case 4:
      v22 = (turi::unity_sframe *)operator new();
      turi::unity_sframe::unity_sframe(v22);
      std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)&__p, (uint64_t)v22);
      (*(void (**)(std::string::size_type, turi::iarchive *))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0], a2);
      v71 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v23 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&v71, (uint64_t)&v76);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v76);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v76);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        return;
      v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v28);
      while (__stlxr(v21 - 1, v28));
      break;
    case 5:
      v13 = (turi::unity_sarray *)operator new();
      turi::unity_sarray::unity_sarray(v13);
      std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)&__p, (uint64_t)v13);
      (*(void (**)(std::string::size_type, turi::iarchive *))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0], a2);
      v71 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::set((uint64_t *)&v71, (uint64_t)&v76);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v76);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v76);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        return;
      v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      break;
    case 6:
      v73 = 0;
      v39 = *((_QWORD *)a2 + 2);
      if (v39)
      {
        v40 = *((_QWORD *)a2 + 3);
        v41 = *(_QWORD *)(v39 + v40);
        v73 = v41;
        *((_QWORD *)a2 + 3) = v40 + 8;
      }
      else
      {
        std::istream::read();
        v41 = v73;
      }
      *((_QWORD *)&v71 + 1) = 0;
      v72 = 0;
      *(_QWORD *)&v71 = (char *)&v71 + 8;
      if (v41)
      {
        v45 = 0;
        do
        {
          memset(&__p, 0, sizeof(__p));
          *((_QWORD *)&v76 + 1) = 0;
          LODWORD(v77) = 0;
          BYTE4(v77) = 0;
          LODWORD(v76) = 0;
          turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, &__p);
          turi::variant_deep_load(&v76, a2);
          p_p = &__p;
          v46 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v71, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v46 + 14, (unsigned int *)&v76);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v76);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v45;
        }
        while (v45 < v73);
      }
      boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)&v76 + 1, (const void ***)&v71);
      LODWORD(v76) = 6;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v76);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v76);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v71, *((char **)&v71 + 1));
      return;
    case 7:
      p_p = 0;
      v42 = *((_QWORD *)a2 + 2);
      if (v42)
      {
        v43 = *((_QWORD *)a2 + 3);
        v44 = *(__int128 **)(v42 + v43);
        p_p = (std::string *)v44;
        *((_QWORD *)a2 + 3) = v43 + 8;
      }
      else
      {
        std::istream::read();
        v44 = (__int128 *)p_p;
      }
      v71 = 0uLL;
      v72 = 0;
      std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::resize((uint64_t *)&v71, (unint64_t)v44);
      if (p_p)
      {
        v47 = 0;
        for (i = 0; i < (unint64_t)p_p; ++i)
        {
          *((_QWORD *)&v76 + 1) = 0;
          LODWORD(v77) = 0;
          BYTE4(v77) = 0;
          LODWORD(v76) = 0;
          turi::variant_deep_load(&v76, a2);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v71 + v47), (unsigned int *)&v76);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v76);
          v47 += 80;
        }
      }
      boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((_QWORD *)&v76 + 1, (uint64_t *)&v71);
      LODWORD(v76) = 7;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v76);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v76);
      *(_QWORD *)&v76 = &v71;
      std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      return;
    default:
      return;
  }
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
}

void sub_21845CC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::exception a22,int a23,char a24)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a22);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_variant_deep_serialize_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

CoreML::Model *CoreML::LinearModel::LinearModel(CoreML::Model *a1, const std::string *a2, const std::string *a3)
{
  CoreML::Model *v5;
  uint64_t v6;
  std::string **v7;
  std::string *v8;
  std::string **v9;
  uint64_t *v10;

  v5 = CoreML::Model::Model(a1, a3);
  *(_QWORD *)v5 = &unk_24D942118;
  v6 = *((_QWORD *)v5 + 1);
  v7 = *(std::string ***)(v6 + 16);
  if (!v7)
  {
    v7 = (std::string **)operator new();
    CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v7);
    *(_QWORD *)(v6 + 16) = v7;
  }
  v10 = (uint64_t *)v7[11];
  v9 = v7 + 11;
  v8 = (std::string *)v10;
  if (v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)a2);
  else
    std::string::operator=(v8, a2);
  return a1;
}

void sub_21845CF10(_Unwind_Exception *a1)
{
  CoreML::Model *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C40FD9EAC30);
  CoreML::Model::~Model(v1);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LinearModel::setOffsets@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) == 300)
  {
    v6 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 300;
    v6 = operator new();
    CoreML::Specification::GLMRegressor::GLMRegressor((CoreML::Specification::GLMRegressor *)v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v9 = *(_DWORD *)(v6 + 40);
    do
    {
      v10 = *v7;
      if (v9 == *(_DWORD *)(v6 + 44))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v6 + 40), v9 + 1);
        v9 = *(_DWORD *)(v6 + 40);
      }
      v11 = *(_QWORD *)(v6 + 48) + 8 * v9++;
      *(_DWORD *)(v6 + 40) = v9;
      *(_QWORD *)(v11 + 8) = v10;
      ++v7;
    }
    while (v7 != v8);
  }
  return CoreML::Result::Result(a3);
}

void sub_21845D024(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C404133E315);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LinearModel::setWeights@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  CoreML::Specification::GLMRegressor *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CoreML::Specification::GLMRegressor_DoubleArray *v10;
  _QWORD *v11;
  _QWORD *v12;
  CoreML::Specification::GLMRegressor_DoubleArray *v13;
  signed int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) == 300)
  {
    v6 = *(CoreML::Specification::GLMRegressor **)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 300;
    v6 = (CoreML::Specification::GLMRegressor *)operator new();
    CoreML::Specification::GLMRegressor::GLMRegressor(v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v9 = (uint64_t)v6 + 16;
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v19, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
      v10 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v9);
      v11 = v19;
      v12 = v20;
      if (v19 != v20)
      {
        v13 = v10;
        v15 = (unsigned int *)((char *)v10 + 16);
        v14 = *((_DWORD *)v10 + 4);
        do
        {
          v16 = *v11;
          if (v14 == *((_DWORD *)v13 + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v15, v14 + 1);
            v14 = *v15;
          }
          v17 = *((_QWORD *)v13 + 3) + 8 * v14++;
          *((_DWORD *)v13 + 4) = v14;
          *(_QWORD *)(v17 + 8) = v16;
          ++v11;
        }
        while (v11 != v12);
        v11 = v19;
      }
      if (v11)
      {
        v20 = v11;
        operator delete(v11);
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  return CoreML::Result::Result(a3);
}

void sub_21845D194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x219A19A08](v11, 0x10A1C404133E315);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t _GLOBAL__sub_I_LinearModel_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)601>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  char v15;
  CoreML::Specification::ArrayFeatureType *v16;
  uint64_t *v17;
  uint64_t *v18;
  char v19;
  CoreML::Specification::ArrayFeatureType *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  _QWORD **v28;
  _QWORD *v29[2];
  void *v30;
  _QWORD *v31;
  char v32;
  void *v33;
  void *v34;
  char *v35;
  void *__p;
  __int128 v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 16))
    v4 = *(uint64_t **)(a1 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v39);
  CoreML::validateModelDescription((CoreML *)v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&__p);
  v39 = __p;
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  v40 = v37;
  v41 = v38;
  if (!CoreML::Result::good((CoreML::Result *)&v39))
  {
    *(_QWORD *)a2 = v39;
    *(_OWORD *)(a2 + 8) = v40;
    *(_QWORD *)(a2 + 24) = v41;
    return;
  }
  v5 = operator new(0x14uLL);
  v34 = v5 + 5;
  v35 = (char *)(v5 + 5);
  v5[4] = 6;
  *(_OWORD *)v5 = xmmword_218702950;
  v33 = v5;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 2), 1, (int **)&v33, (uint64_t)&__p);
  v39 = __p;
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  v40 = v37;
  v41 = v38;
  if (!CoreML::Result::good((CoreML::Result *)&v39))
    goto LABEL_41;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 5), 1, (int **)&v33, (uint64_t)&__p);
  v39 = __p;
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  v40 = v37;
  v41 = v38;
  v6 = CoreML::Result::good((CoreML::Result *)&v39);
  if (!v6)
  {
LABEL_41:
    *(_QWORD *)a2 = v39;
    *(_OWORD *)(a2 + 8) = v40;
    *(_QWORD *)(a2 + 24) = v41;
    v40 = 0uLL;
    v41 = 0;
    goto LABEL_42;
  }
  v7 = *(_QWORD *)(v4[4] + 8);
  v8 = *(uint64_t **)(*(_QWORD *)(v4[7] + 8) + 32);
  if (!v8)
    v8 = &CoreML::Specification::_FeatureType_default_instance_;
  v9 = *((_DWORD *)v8 + 9);
  v10 = *(uint64_t **)(v7 + 32);
  if (!v10)
    v10 = &CoreML::Specification::_FeatureType_default_instance_;
  if (v9 == *((_DWORD *)v10 + 9))
  {
    if (v9 != 5)
      goto LABEL_22;
    v11 = v10[3];
    if (*(_DWORD *)(v11 + 16) == 1)
    {
      v12 = v8[3];
      if (*(_DWORD *)(v12 + 16) == 1
        && *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) == *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8))
      {
LABEL_22:
        __p = *(void **)(v4[4] + 8);
        *(_QWORD *)&v37 = &v39;
        *((_QWORD *)&v37 + 1) = a1;
        if (*(_DWORD *)(a1 + 44) == 601)
          v13 = *(uint64_t **)(a1 + 32);
        else
          v13 = CoreML::Specification::Imputer::default_instance((CoreML::Specification::Imputer *)v6);
        switch(*((_DWORD *)v13 + 9))
        {
          case 0:
            std::string::basic_string[abi:ne180100]<0>(&v30, "Imputer parameter must be set.");
            CoreML::Result::Result((_DWORD *)a2, 13);
            goto LABEL_35;
          case 1:
            v42[0] = 0x500000002;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 2);
            v27 = 11;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            goto LABEL_40;
          case 2:
            LODWORD(v42[0]) = 1;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            v27 = 12;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            goto LABEL_40;
          case 3:
            LODWORD(v42[0]) = 3;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            v27 = 13;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            goto LABEL_40;
          case 4:
            LODWORD(v42[0]) = 5;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            v27 = 11;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            v15 = CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v28, v29[0]);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v30, v31);
            if ((v15 & 1) == 0)
              goto LABEL_41;
            v17 = *(uint64_t **)(v7 + 32);
            if (!v17)
              v17 = &CoreML::Specification::_FeatureType_default_instance_;
            v18 = *((_DWORD *)v17 + 9) == 5
                ? (uint64_t *)v17[3]
                : CoreML::Specification::ArrayFeatureType::default_instance(v16);
            v23 = *(_QWORD *)(v18[3] + 8);
            v24 = *((_DWORD *)v13 + 9) == 4
                ? (uint64_t *)v13[2]
                : CoreML::Specification::DoubleVector::default_instance((CoreML::Specification::DoubleVector *)v18);
            if (v23 == *((_DWORD *)v24 + 4))
              goto LABEL_41;
            goto LABEL_65;
          case 5:
            LODWORD(v42[0]) = 5;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            v27 = 12;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            v19 = CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v28, v29[0]);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v30, v31);
            if ((v19 & 1) == 0)
              goto LABEL_41;
            v21 = *(uint64_t **)(v7 + 32);
            if (!v21)
              v21 = &CoreML::Specification::_FeatureType_default_instance_;
            v22 = *((_DWORD *)v21 + 9) == 5
                ? (uint64_t *)v21[3]
                : CoreML::Specification::ArrayFeatureType::default_instance(v20);
            v25 = *(_QWORD *)(v22[3] + 8);
            v26 = *((_DWORD *)v13 + 9) == 5
                ? (uint64_t *)v13[2]
                : CoreML::Specification::Int64Vector::default_instance((CoreML::Specification::Int64Vector *)v22);
            if (v25 == *((_DWORD *)v26 + 4))
              goto LABEL_41;
LABEL_65:
            std::string::basic_string[abi:ne180100]<0>(&v30, "Shape of imputed array value does not match shape of input array.");
            CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_35:
            if ((v32 & 0x80000000) == 0)
              goto LABEL_42;
            v14 = v30;
            break;
          case 6:
          case 7:
            LODWORD(v42[0]) = 6;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            v29[0] = 0;
            v29[1] = 0;
            v28 = v29;
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
LABEL_40:
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v28, v29[0]);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v30, v31);
            goto LABEL_41;
          default:
            goto LABEL_41;
        }
        goto LABEL_28;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Shape of output array does not match shape of input array.");
      CoreML::Result::Result((_DWORD *)a2, 13);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Only 1 dimensional arrays input features are supported by the imputer.");
      CoreML::Result::Result((_DWORD *)a2, 13);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Type of input feature does not match the output type feature.");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  if (SHIBYTE(v37) < 0)
  {
    v14 = __p;
LABEL_28:
    operator delete(v14);
  }
LABEL_42:
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
}

void sub_21845D9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a20 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()(CoreML::Specification::Imputer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  int v7;
  int v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  std::string v26;
  void *__p[2];
  std::string::size_type v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = &CoreML::Specification::_FeatureType_default_instance_;
  if (*(_QWORD *)(*(_QWORD *)a1 + 32))
    v4 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v5 = *(uint64_t **)(a2 + 8);
  if (!v5)
  {
LABEL_9:
    std::operator+<char>();
    v9 = std::string::append(&v26, "\" is not compatible with given imputed value type.");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v28 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v29, 13);
    v11 = *((_QWORD *)a1 + 1);
    *(_QWORD *)v11 = v29;
    v12 = v11 + 8;
    if (*(char *)(v11 + 31) < 0)
      operator delete(*(void **)v12);
    v13 = v30;
    *(_QWORD *)(v12 + 16) = v31;
    *(_OWORD *)v12 = v13;
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return 0;
  }
  v7 = *((_DWORD *)v4 + 9);
  while (1)
  {
    v8 = *((_DWORD *)v5 + 7);
    if (v7 >= v8)
      break;
LABEL_8:
    v5 = (uint64_t *)*v5;
    if (!v5)
      goto LABEL_9;
  }
  if (v8 < v7)
  {
    ++v5;
    goto LABEL_8;
  }
  v16 = *((_QWORD *)a1 + 2);
  if (*(_DWORD *)(v16 + 44) == 601)
    v17 = *(uint64_t **)(v16 + 32);
  else
    v17 = CoreML::Specification::Imputer::default_instance(a1);
  if (*((_DWORD *)v17 + 10))
  {
    v18 = *((_QWORD *)a1 + 2);
    if (*(_DWORD *)(v18 + 44) == 601)
      v19 = *(uint64_t **)(v18 + 32);
    else
      v19 = CoreML::Specification::Imputer::default_instance((CoreML::Specification::Imputer *)v17);
    v20 = *(uint64_t **)(a3 + 8);
    if (v20)
    {
      v21 = *((_DWORD *)v19 + 10);
      do
      {
        v22 = *((_DWORD *)v20 + 7);
        if (v21 >= v22)
        {
          if (v22 >= v21)
            return 1;
          ++v20;
        }
        v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Type of given replace value not compatible with input feature type.");
    CoreML::Result::Result(&v29, 13);
    v23 = *((_QWORD *)a1 + 1);
    *(_QWORD *)v23 = v29;
    v24 = v23 + 8;
    if (*(char *)(v23 + 31) < 0)
      operator delete(*(void **)v24);
    v25 = v30;
    *(_QWORD *)(v24 + 16) = v31;
    *(_OWORD *)v24 = v25;
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    if (SHIBYTE(v28) < 0)
    {
      v14 = __p[0];
LABEL_15:
      operator delete(v14);
    }
    return 0;
  }
  return 1;
}

void sub_21845DCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_21845DD54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_21845DDD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_ImputerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_21845DFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t Eigen::internal::CompressedStorage<double,int>::reserve(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;

  v2 = *(_QWORD *)(result + 16) + a2;
  if (v2 > *(_QWORD *)(result + 24))
  {
    v3 = result;
    v4 = (void *)operator new[]();
    result = operator new[]();
    v5 = (void *)result;
    if (*(_QWORD *)(v3 + 16) >= v2)
      v6 = v2;
    else
      v6 = *(_QWORD *)(v3 + 16);
    v7 = *(const void **)v3;
    if (v6 <= 0)
    {
      v8 = *(const void **)(v3 + 8);
    }
    else
    {
      memcpy(v4, *(const void **)v3, 8 * v6);
      v8 = *(const void **)(v3 + 8);
      result = (uint64_t)memcpy(v5, v8, 4 * v6);
    }
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v5;
    *(_QWORD *)(v3 + 24) = v2;
    if (v8)
      result = MEMORY[0x219A199F0](v8, 0x1000C8052888210);
    if (v7)
      JUMPOUT(0x219A199F0);
  }
  return result;
}

void sub_21845E178(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_leaf<1ul,turi::flexible_type,false>::~__tuple_leaf(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::__tuple_leaf<0ul,turi::flexible_type,false>::~__tuple_leaf(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

void __cxx_global_var_init_50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_registration_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/WordTagger.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::CoreMLModels::_WordTagger_default_instance_ = (uint64_t)&off_24D942160;
  unk_254FFB050 = 0;
  qword_254FFB058 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFB060 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFB068 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFB070 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFB078 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFB080 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FFB088 = 0;
  qword_254FFB098 = 0;
  byte_254FFB0A0 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_21845E758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::WordTagger *CoreML::Specification::CoreMLModels::WordTagger::WordTagger(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  *(_QWORD *)this = &off_24D942160;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::WordTagger *)&CoreML::Specification::CoreMLModels::_WordTagger_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_21845E7D0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::WordTagger::~WordTagger(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  *(_QWORD *)this = &off_24D942160;
  CoreML::Specification::CoreMLModels::WordTagger::SharedDtor(this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::CoreMLModels::WordTagger::~WordTagger(this);
  JUMPOUT(0x219A19A08);
}

_QWORD *CoreML::Specification::CoreMLModels::WordTagger::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v1 = this;
  v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = v1[3];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (_QWORD *)MEMORY[0x219A19A08](v4, 0x1012C40EC159624);
  }
  v6 = v1[4];
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    this = (_QWORD *)MEMORY[0x219A19A08](v6, 0x1012C40EC159624);
  }
  v8 = v1[5];
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    this = (_QWORD *)MEMORY[0x219A19A08](v8, 0x1012C40EC159624);
  }
  v10 = v1[6];
  if ((uint64_t *)v10 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    this = (_QWORD *)MEMORY[0x219A19A08](v10, 0x1012C40EC159624);
  }
  v11 = v1[7];
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (_QWORD *)MEMORY[0x219A19A08](v11, 0x1012C40EC159624);
  }
  v12 = *((_DWORD *)v1 + 21);
  if (v12)
  {
    if (v12 == 200)
    {
      this = (_QWORD *)v1[9];
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
    *((_DWORD *)v1 + 21) = 0;
  }
  return this;
}

uint64_t *CoreML::Specification::CoreMLModels::WordTagger::default_instance(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(this);
  return &CoreML::Specification::CoreMLModels::_WordTagger_default_instance_;
}

CoreML::Specification::CoreMLModels::WordTagger *CoreML::Specification::CoreMLModels::WordTagger::New(CoreML::Specification::CoreMLModels::WordTagger *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CoreMLModels::WordTagger *v3;

  v3 = (CoreML::Specification::CoreMLModels::WordTagger *)operator new();
  CoreML::Specification::CoreMLModels::WordTagger::WordTagger(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::WordTagger>(a2, v3);
  return v3;
}

void sub_21845EA5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403AEF19A0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::WordTagger>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::WordTagger>);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::WordTagger::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(_QWORD *)(this + 24);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *(_QWORD *)(this + 32);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *(_QWORD *)(this + 40);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
  v6 = *(_QWORD *)(this + 48);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v7 = *(_QWORD *)(this + 56);
  if ((uint64_t *)v7 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 64) = 0;
  if (*(_DWORD *)(this + 84) == 200)
  {
    this = *(_QWORD *)(this + 72);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 84) = 0;
  return this;
}

BOOL CoreML::Specification::CoreMLModels::WordTagger::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::WordTagger *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  CoreML::Specification::CoreMLModels::WordTagger *v4;
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  std::string **v9;
  std::string **v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  unsigned int TagFallback;
  unsigned int v20;
  std::string *v21;
  _BOOL8 result;
  std::string *v23;
  const char *size;
  std::string *v25;
  CoreML::Specification::StringVector *v26;
  char *v27;
  int v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  char *v33;
  int VarintSizeAsIntFallback;
  uint64_t *v35;
  std::string **v36;
  std::string **v37;
  std::string **v38;
  std::string **v39;
  std::string **v40;
  std::string **v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  const char *v46;
  uint64_t Varint32Fallback;

  v4 = this;
  v5 = (std::string **)((char *)this + 56);
  v6 = (std::string **)((char *)this + 48);
  v7 = (std::string **)((char *)this + 40);
  v8 = (std::string **)((char *)this + 32);
  v9 = (std::string **)((char *)this + 24);
  v10 = (std::string **)((char *)this + 16);
  v11 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  while (1)
  {
LABEL_2:
    v12 = *(unsigned __int8 **)a2;
    v13 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v13)
    {
      v15 = 0;
    }
    else
    {
      v14 = v12 + 1;
      v15 = *v12;
      if ((char)*v12 >= 1)
      {
        *(_QWORD *)a2 = v14;
        v16 = v15 | 0x100000000;
        if ((v16 & 0x100000000) == 0)
          goto LABEL_9;
        goto LABEL_17;
      }
      if ((unint64_t)v14 < v13)
      {
        v17 = *v14;
        if ((v15 & ~v17) >= 0x80)
        {
          *(_QWORD *)a2 = v12 + 2;
          v16 = (v15 + (v17 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v15);
    v16 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v16 & 0x100000000) == 0)
      goto LABEL_9;
LABEL_17:
    v20 = v16 >> 3;
    if (v16 >> 3 > 0x13)
      break;
    if (v20 == 1)
    {
      if (v16 == 8)
      {
        v27 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v28 = 0;
          goto LABEL_87;
        }
        v28 = *v27;
        if (*v27 < 0)
        {
LABEL_87:
          Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v28);
          *((_DWORD *)v4 + 16) = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
        }
        else
        {
          *((_DWORD *)v4 + 16) = v28;
          *(_QWORD *)a2 = v27 + 1;
        }
      }
      else
      {
LABEL_9:
        if ((_DWORD)v16)
          v18 = (v16 & 7) == 4;
        else
          v18 = 1;
        if (v18)
          return 1;
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v16, a3) & 1) == 0)return 0;
      }
    }
    else
    {
      if (v20 != 10 || v16 != 82)
        goto LABEL_9;
      v25 = *v10;
      if (*v10 == (std::string *)v11)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)v11);
        v25 = *v10;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v25);
      if (!result)
        return result;
      v23 = *v10;
      if (SHIBYTE((*v10)->__r_.__value_.__r.__words[2]) < 0)
      {
        v23 = (std::string *)v23->__r_.__value_.__r.__words[0];
        size = (const char *)(*v10)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v10)->__r_.__value_.__r.__words[2]);
      }
      v46 = "CoreML.Specification.CoreMLModels.WordTagger.language";
LABEL_84:
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v23, size, 0, (uint64_t)v46))return 0;
    }
  }
  switch(v20)
  {
    case 0x14u:
      if (v16 != 162)
        goto LABEL_9;
      v21 = *v9;
      if (*v9 == (std::string *)v11)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)v11);
        v21 = *v9;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v21);
      if (result)
      {
        v23 = *v9;
        if (SHIBYTE((*v9)->__r_.__value_.__r.__words[2]) < 0)
        {
          v23 = (std::string *)v23->__r_.__value_.__r.__words[0];
          size = (const char *)(*v9)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v9)->__r_.__value_.__r.__words[2]);
        }
        v46 = "CoreML.Specification.CoreMLModels.WordTagger.tokensOutputFeatureName";
        goto LABEL_84;
      }
      break;
    case 0x15u:
      if (v16 != 170)
        goto LABEL_9;
      v29 = *v8;
      if (*v8 == (std::string *)v11)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)v11);
        v29 = *v8;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v29);
      if (result)
      {
        v23 = *v8;
        if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
        {
          v23 = (std::string *)v23->__r_.__value_.__r.__words[0];
          size = (const char *)(*v8)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
        }
        v46 = "CoreML.Specification.CoreMLModels.WordTagger.tokenTagsOutputFeatureName";
        goto LABEL_84;
      }
      break;
    case 0x16u:
      if (v16 != 178)
        goto LABEL_9;
      v30 = *v7;
      if (*v7 == (std::string *)v11)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)v11);
        v30 = *v7;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v30);
      if (result)
      {
        v23 = *v7;
        if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
        {
          v23 = (std::string *)v23->__r_.__value_.__r.__words[0];
          size = (const char *)(*v7)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
        }
        v46 = "CoreML.Specification.CoreMLModels.WordTagger.tokenLocationsOutputFeatureName";
        goto LABEL_84;
      }
      break;
    case 0x17u:
      if (v16 != 186)
        goto LABEL_9;
      v31 = *v6;
      if (*v6 == (std::string *)v11)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)v11);
        v31 = *v6;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v31);
      if (result)
      {
        v23 = *v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          v23 = (std::string *)v23->__r_.__value_.__r.__words[0];
          size = (const char *)(*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        v46 = "CoreML.Specification.CoreMLModels.WordTagger.tokenLengthsOutputFeatureName";
        goto LABEL_84;
      }
      break;
    default:
      if (v20 == 100)
      {
        if (v16 != 34)
          goto LABEL_9;
        v32 = *v5;
        if (*v5 == (std::string *)v11)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)v11);
          v32 = *v5;
        }
        if (_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v32))
          goto LABEL_2;
        return 0;
      }
      if (v20 != 200 || v16 != 66)
        goto LABEL_9;
      if (*((_DWORD *)v4 + 21) == 200)
      {
        v26 = (CoreML::Specification::StringVector *)*((_QWORD *)v4 + 9);
      }
      else
      {
        *((_DWORD *)v4 + 21) = 200;
        v26 = (CoreML::Specification::StringVector *)operator new();
        CoreML::Specification::StringVector::StringVector(v26);
        *((_QWORD *)v4 + 9) = v26;
      }
      v33 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v33 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v33;
        *(_QWORD *)a2 = v33 + 1;
      }
      v35 = v11;
      v36 = v10;
      v37 = v9;
      v38 = v8;
      v39 = v7;
      v40 = v6;
      v41 = v5;
      v42 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v42 & 0x8000000000000000) != 0)
        return 0;
      v44 = v42;
      result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v26, (char **)a2, v43);
      if (result)
      {
        v45 = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v44);
        v5 = v41;
        v6 = v40;
        v7 = v39;
        v8 = v38;
        v9 = v37;
        v10 = v36;
        v11 = v35;
        v4 = this;
        if (v45)
          goto LABEL_2;
        return 0;
      }
      break;
  }
  return result;
}

void sub_21845F0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::WordTagger::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::WordTagger *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  _tc_google::protobuf::internal *v7;
  const char *v8;
  _tc_google::protobuf::internal *v9;
  const char *v10;
  _tc_google::protobuf::internal *v11;
  const char *v12;
  _tc_google::protobuf::internal *v13;
  const char *v14;
  uint64_t result;
  const char *v16;
  uint64_t v17;

  v6 = *((_DWORD *)this + 16);
  if (v6)
    _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  v7 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_9;
    v7 = *(_tc_google::protobuf::internal **)v7;
    goto LABEL_8;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_8:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.language");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((_QWORD *)this + 2), a2);
  }
LABEL_9:
  v9 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    v10 = (const char *)*((_QWORD *)v9 + 1);
    if (!v10)
      goto LABEL_15;
    v9 = *(_tc_google::protobuf::internal **)v9;
    goto LABEL_14;
  }
  v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((_BYTE *)v9 + 23))
  {
LABEL_14:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.tokensOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(20, *((_QWORD *)this + 3), a2);
  }
LABEL_15:
  v11 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 4);
  if (*((char *)v11 + 23) < 0)
  {
    v12 = (const char *)*((_QWORD *)v11 + 1);
    if (!v12)
      goto LABEL_21;
    v11 = *(_tc_google::protobuf::internal **)v11;
    goto LABEL_20;
  }
  v12 = (const char *)*((unsigned __int8 *)v11 + 23);
  if (*((_BYTE *)v11 + 23))
  {
LABEL_20:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.tokenTagsOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(21, *((_QWORD *)this + 4), a2);
  }
LABEL_21:
  v13 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v13 + 23) < 0)
  {
    v14 = (const char *)*((_QWORD *)v13 + 1);
    if (!v14)
      goto LABEL_27;
    v13 = *(_tc_google::protobuf::internal **)v13;
    goto LABEL_26;
  }
  v14 = (const char *)*((unsigned __int8 *)v13 + 23);
  if (*((_BYTE *)v13 + 23))
  {
LABEL_26:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, v14, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.tokenLocationsOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(22, *((_QWORD *)this + 5), a2);
  }
LABEL_27:
  result = *((_QWORD *)this + 6);
  if (*(char *)(result + 23) < 0)
  {
    v16 = *(const char **)(result + 8);
    if (!v16)
      goto LABEL_33;
    result = *(_QWORD *)result;
    goto LABEL_32;
  }
  v16 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_32:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v16, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.tokenLengthsOutputFeatureName");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(23, *((_QWORD *)this + 6), a2);
  }
LABEL_33:
  v17 = *((_QWORD *)this + 7);
  if ((*(char *)(v17 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v17 + 23))
      goto LABEL_36;
    goto LABEL_35;
  }
  if (*(_QWORD *)(v17 + 8))
LABEL_35:
    result = _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(100, v17, a2);
LABEL_36:
  if (*((_DWORD *)this + 21) == 200)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, *((_QWORD *)this + 9), a2, a4);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::WordTagger::ByteSizeLong(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v9 = *((_QWORD *)this + 4);
  v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  v5 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_18:
  v12 = *((_QWORD *)this + 5);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v5 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_23:
  v15 = *((_QWORD *)this + 6);
  v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_28;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if ((v16 & 0x80u) == 0)
    v17 = v16;
  v5 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_28:
  v18 = *((_QWORD *)this + 7);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_33;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_33;
  }
  v20 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v20 = v19;
  v5 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_33:
  v21 = *((_DWORD *)this + 16);
  if (v21)
    v5 += ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (*((_DWORD *)this + 21) == 200)
  {
    v22 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 9));
    v5 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 20) = v5;
  return v5;
}

void CoreML::Specification::CoreMLModels::WordTagger::MergeFrom(CoreML::Specification::CoreMLModels::WordTagger *this, const CoreML::Specification::CoreMLModels::WordTagger *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  CoreML::Specification::StringVector *v18;
  CoreML::Specification::StringVector *v19;
  uint64_t *v20;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 4);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_27;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_27;
  }
  v10 = (uint64_t *)*((_QWORD *)this + 4);
  if (v10 != (uint64_t *)v9)
  {
    if (v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v9);
    else
      std::string::operator=(*((std::string **)this + 4), (const std::string *)v9);
  }
LABEL_27:
  v11 = *((_QWORD *)a2 + 5);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_35;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_35;
  }
  v12 = (uint64_t *)*((_QWORD *)this + 5);
  if (v12 != (uint64_t *)v11)
  {
    if (v12 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v11);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v11);
  }
LABEL_35:
  v13 = *((_QWORD *)a2 + 6);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(_QWORD *)(v13 + 8))
      goto LABEL_43;
  }
  else if (!*(_BYTE *)(v13 + 23))
  {
    goto LABEL_43;
  }
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  if (v14 != (uint64_t *)v13)
  {
    if (v14 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v13);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v13);
  }
LABEL_43:
  v15 = *((_QWORD *)a2 + 7);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_51;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_51;
  }
  v16 = (uint64_t *)*((_QWORD *)this + 7);
  if (v16 != (uint64_t *)v15)
  {
    if (v16 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v15);
    else
      std::string::operator=(*((std::string **)this + 7), (const std::string *)v15);
  }
LABEL_51:
  v17 = *((_DWORD *)a2 + 16);
  if (v17)
    *((_DWORD *)this + 16) = v17;
  if (*((_DWORD *)a2 + 21) == 200)
  {
    if (*((_DWORD *)this + 21) == 200)
    {
      v18 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 9);
    }
    else
    {
      *((_DWORD *)this + 21) = 200;
      v18 = (CoreML::Specification::StringVector *)operator new();
      v19 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v18);
      *((_QWORD *)this + 9) = v18;
      if (*((_DWORD *)a2 + 21) != 200)
      {
        v20 = CoreML::Specification::StringVector::default_instance(v19);
        goto LABEL_60;
      }
    }
    v20 = (uint64_t *)*((_QWORD *)a2 + 9);
LABEL_60:
    CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v18, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v20);
  }
}

void sub_21845F7DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::WordTagger::IsInitialized(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CoreMLModels::WordTagger::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.WordTagger");
}

CoreML::Specification::CoreMLModels::WordTagger *CoreML::Specification::CoreMLModels::WordTagger::New(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  return CoreML::Specification::CoreMLModels::WordTagger::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::WordTagger>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_WordTagger_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

std::string *turi::unity_server::unity_server(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  std::string::size_type v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = a2[3];
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__s.__data_[0] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0x800000;
  turi::blocking_queue<std::string>::blocking_queue((uint64_t)&this[5].__r_.__value_.__l.__size_);
  v8 = (_QWORD *)operator new();
  v8[2] = 0;
  v8[1] = 0;
  *v8 = v8 + 1;
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  v9 = operator new();
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)v9 = v9 + 8;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 24) = v9 + 32;
  this[3].__r_.__value_.__l.__size_ = v9;
  return this;
}

void sub_21845F988(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void turi::unity_server::start(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  std::string *v6;
  turi::global_startup *v7;
  turi::global_startup *instance;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23[4];
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string v28;
  std::string v29;
  std::string v30;

  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
      goto LABEL_17;
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    goto LABEL_17;
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      v4 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v30 = *(std::string *)a1;
    }
    turi::begin_log_rotation((turi *)&v30, v4, *(_QWORD *)(a1 + 64));
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = &v30;
LABEL_16:
      operator delete(v6->__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v5 = global_logger();
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v29 = *(std::string *)a1;
    file_logger::set_log_file((uint64_t)v5, (uint64_t)&v29);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = &v29;
      goto LABEL_16;
    }
  }
LABEL_17:
  if (*(char *)(a1 + 47) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  else
    v28 = *(std::string *)(a1 + 24);
  turi::configure_global_environment((uint64_t)&v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  instance = (turi::global_startup *)turi::global_startup::get_instance(v7);
  turi::global_startup::perform_startup(instance);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 72));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 80));
  turi::create_unity_global_singleton(*(turi::toolkit_function_registry **)(a1 + 72), *(turi::toolkit_class_registry **)(a1 + 80));
  turi::get_unity_global_singleton(v9, v10, v11, v12, v13, v14, &v26);
  v24 = v26;
  v25 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 32))(a2, a1 + 24, &v24);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v23[0] = (uint64_t)boost::function0<void>::assign_to<turi::unity_server::start(turi::unity_server_initializer const&)::$_0>(turi::unity_server::start(turi::unity_server_initializer const&)::$_0)::stored_vtable
         + 1;
  v23[1] = a1;
  turi::thread::launch(a1 + 96, v23);
  boost::function0<void>::~function0(v23);
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_21845FC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21845FE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t turi::blocking_queue<std::string>::blocking_queue(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  assert_msg((_DWORD)v2 == 0, (uint64_t)"Mutex create error %d", v3, v4, v5, v6, v7, v8, v2);
  turi::conditional::conditional((pthread_cond_t *)(a1 + 120));
  turi::conditional::conditional((pthread_cond_t *)(a1 + 168));
  *(_WORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 218) = 0;
  return a1;
}

void sub_21845FF2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  pthread_cond_t *v3;

  turi::conditional::~conditional(v3);
  turi::mutex::~mutex(v2);
  std::deque<std::string>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t turi::blocking_queue<std::string>::~blocking_queue(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  turi::blocking_queue<std::string>::broadcast(a1);
  turi::blocking_queue<std::string>::broadcast_blocking_empty(a1);
  turi::conditional::~conditional((pthread_cond_t *)(a1 + 168));
  turi::conditional::~conditional((pthread_cond_t *)(a1 + 120));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 56));
  std::deque<std::string>::~deque[abi:ne180100]((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t turi::blocking_queue<std::string>::broadcast(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  v3 = pthread_cond_broadcast((pthread_cond_t *)(a1 + 120));
  assert_msg((_DWORD)v3 == 0, (uint64_t)"Condition variable broadcast error %d", v4, v5, v6, v7, v8, v9, v3);
  return pthread_mutex_unlock(v2);
}

uint64_t turi::blocking_queue<std::string>::broadcast_blocking_empty(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  v3 = pthread_cond_broadcast((pthread_cond_t *)(a1 + 168));
  assert_msg((_DWORD)v3 == 0, (uint64_t)"Condition variable broadcast error %d", v4, v5, v6, v7, v8, v9, v3);
  return pthread_mutex_unlock(v2);
}

uint64_t boost::detail::function::functor_manager<turi::unity_server::start(turi::unity_server_initializer const&)::$_0>::manage(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        a2[4] = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12unity_server5startERKNS_24unity_server_initializerEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12unity_server5startERKNS_24unity_server_initializerEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<turi::unity_server::start(turi::unity_server_initializer const&)::$_0,void>::invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  void (*v4)(std::string *);
  std::string __p;
  unsigned __int8 v6;

  v1 = *a1;
  v2 = *a1 + 128;
  do
  {
    while (1)
    {
      turi::blocking_queue<std::string>::dequeue(v2, &__p);
      v3 = v6;
      if (v6)
      {
        v4 = *(void (**)(std::string *))(v1 + 88);
        if (v4)
          v4(&__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (!v3)
        return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v3);
}

void sub_218460178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::blocking_queue<std::string>::dequeue(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  std::string v21;

  v4 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  memset(&v21, 0, sizeof(v21));
  if (*(_QWORD *)(a1 + 48))
  {
LABEL_4:
    std::string::operator=(&v21, (const std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0xAAuLL))+ 24 * (*(_QWORD *)(a1 + 40) % 0xAAuLL)));
    std::deque<std::string>::pop_front((_QWORD *)(a1 + 8));
    if (!*(_QWORD *)(a1 + 48) && *(_WORD *)(a1 + 218))
    {
      v12 = pthread_cond_signal((pthread_cond_t *)(a1 + 168));
      assert_msg((_DWORD)v12 == 0, (uint64_t)"Condition variable signal error %d", v13, v14, v15, v16, v17, v18, v12);
    }
    v19 = 1;
  }
  else
  {
    while (*(_BYTE *)a1)
    {
      ++*(_WORD *)(a1 + 216);
      v5 = pthread_cond_wait((pthread_cond_t *)(a1 + 120), v4);
      assert_msg((_DWORD)v5 == 0, (uint64_t)"Condition variable wait error %d", v6, v7, v8, v9, v10, v11, v5);
      --*(_WORD *)(a1 + 216);
      if (*(_QWORD *)(a1 + 48))
        goto LABEL_4;
    }
    v19 = 0;
  }
  pthread_mutex_unlock(v4);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    v20 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
    a2[1].__r_.__value_.__s.__data_[0] = v19;
    if (v20 < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = v21;
    a2[1].__r_.__value_.__s.__data_[0] = v19;
  }
}

void sub_218460304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __cxx_global_var_init_4_21()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_server_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::start_server(uint64_t a1, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *exception;
  uint64_t v11;
  std::string v13;
  std::string __p;
  __int128 v15;
  uint64_t v16;
  std::locale v17;

  pthread_mutex_lock(&turi::_server_start_lock);
  *((_DWORD *)global_logger() + 169) = 4;
  *((_WORD *)global_logger() + 336) = 0;
  if (turi::SERVER)
  {
    v4 = (int *)global_logger();
    if (v4[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v4))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v5 = (file_logger *)global_logger();
      started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/server/unity_server_control.cpp", "start_server", 43, 1);
      v7 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v7 && *((_BYTE *)v7 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Unity server initialized twice.", 31);
      v8 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v8)
      {
        if (*((_BYTE *)v8 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
          v9 = std::locale::use_facet(&v17, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
          std::locale::~locale(&v17);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
  }
  else
  {
    v11 = operator new();
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v13 = *(std::string *)a1;
    if (*(char *)(a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    else
      __p = *(std::string *)(a1 + 24);
    v15 = *(_OWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 64);
    turi::unity_server::unity_server(v11, &v13);
    turi::SERVER = v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    turi::unity_server::start(turi::SERVER, a2);
  }
  return pthread_mutex_unlock(&turi::_server_start_lock);
}

void sub_218460650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x219A19A08](v14, 0x10B2C403CCB4398);
  pthread_mutex_unlock(&turi::_server_start_lock);
  _Unwind_Resume(a1);
}

void sub_21846085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_unity_server_control_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v0 = pthread_mutex_init(&turi::_server_start_lock, 0);
  assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::_server_start_lock, &dword_217E69000);
}

void turi::unity_server_initializer::init_extensions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  std::string::size_type i;
  std::string::size_type size;
  __int128 v19;
  std::string::size_type j;
  std::string::size_type v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string::size_type k;
  std::string::size_type v26;
  __int128 v27;
  int *v28;
  file_logger *v29;
  file_logger *started;
  _QWORD *v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  std::string::size_type v35;
  int v37;
  int v38;
  uint64_t v39;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int *v48;
  file_logger *v49;
  file_logger *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  std::string *v55;
  uint64_t v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  uint64_t v59;
  _QWORD *exception;
  _QWORD *v61;
  std::string *v62;
  void *v64[2];
  char v65;
  std::string v66;
  void *v67;
  char v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string __p;
  std::string v73;
  std::string v74;
  std::string *v75;
  std::string *v76;
  std::string *v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  __int128 v83;

  *(_QWORD *)&v83 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v78 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(&v74, "*.so");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v79 = v78;
  v3 = boost::filesystem::path::operator/=(&v79, &v74);
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v80, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v4;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v73, "*.dylib");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v79 = v78;
  v5 = boost::filesystem::path::operator/=(&v79, &v73);
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v6;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "*.dll");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v79 = v78;
  v7 = boost::filesystem::path::operator/=(&v79, &__p);
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v82, v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
  }
  else
  {
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v8;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v76 = 0;
  v77 = 0;
  v75 = 0;
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  v79.__r_.__value_.__s.__data_[8] = 0;
  v75 = (std::string *)operator new(0x48uLL);
  v76 = v75;
  v77 = v75 + 3;
  v9 = 0;
  v76 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::filesystem::path>,boost::filesystem::path const*,boost::filesystem::path const*,boost::filesystem::path*>((uint64_t)&v77, (__int128 *)&v80, &v83, v75);
  do
  {
    if (SHIBYTE(v82.__r_.__value_.__r.__words[v9 + 2]) < 0)
      operator delete(*(void **)((char *)&v82.__r_.__value_.__l.__data_ + v9 * 8));
    v9 -= 3;
  }
  while (v9 != -9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v73, "*libunity*.so");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v79 = v78;
  v10 = boost::filesystem::path::operator/=(&v79, &v73);
  if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v80, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
  }
  else
  {
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v11;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "*libunity*.dylib");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v79 = v78;
  v12 = boost::filesystem::path::operator/=(&v79, &__p);
  if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, v12->__r_.__value_.__l.__data_, v12->__r_.__value_.__l.__size_);
  }
  else
  {
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v13;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v71, "*libunity*.dll");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v79 = v78;
  v14 = boost::filesystem::path::operator/=(&v79, &v71);
  if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v82, v14->__r_.__value_.__l.__data_, v14->__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v15;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  memset(&v74, 0, sizeof(v74));
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  v79.__r_.__value_.__s.__data_[8] = 0;
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  v74.__r_.__value_.__l.__size_ = v74.__r_.__value_.__r.__words[0];
  v74.__r_.__value_.__r.__words[2] = v74.__r_.__value_.__r.__words[0] + 72;
  v16 = 0;
  v74.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::filesystem::path>,boost::filesystem::path const*,boost::filesystem::path const*,boost::filesystem::path*>((uint64_t)&v74.__r_.__value_.__r.__words[2], (__int128 *)&v80, &v83, (std::string *)v74.__r_.__value_.__l.__data_);
  do
  {
    if (SHIBYTE(v82.__r_.__value_.__r.__words[v16 + 2]) < 0)
      operator delete(*(void **)((char *)&v82.__r_.__value_.__l.__data_ + v16 * 8));
    v16 -= 3;
  }
  while (v16 != -9);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = 0uLL;
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79.__r_.__value_.__l.__size_;
  size = v74.__r_.__value_.__l.__size_;
  for (i = v74.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
    }
    else
    {
      v19 = *(_OWORD *)i;
      v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v19;
    }
    turi::fileio::get_glob_files((uint64_t)&v73, (uint64_t *)&__p);
    v21 = __p.__r_.__value_.__l.__size_;
    for (j = __p.__r_.__value_.__r.__words[0]; j != v21; j += 32)
    {
      if (*(char *)(j + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)j, *(_QWORD *)(j + 8));
      }
      else
      {
        v22 = *(_OWORD *)j;
        v80.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 16);
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v22;
      }
      LODWORD(v81.__r_.__value_.__l.__data_) = *(_DWORD *)(j + 24);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v79, (const void **)&v80.__r_.__value_.__l.__data_, (uint64_t)&v80);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
    }
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
  }
  v23 = v75;
  v62 = v76;
  while (v23 != v62)
  {
    if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v73, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
    }
    else
    {
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v24;
    }
    turi::fileio::get_glob_files((uint64_t)&v73, (uint64_t *)&__p);
    v26 = __p.__r_.__value_.__l.__size_;
    for (k = __p.__r_.__value_.__r.__words[0]; k != v26; k += 32)
    {
      if (*(char *)(k + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)k, *(_QWORD *)(k + 8));
      }
      else
      {
        v27 = *(_OWORD *)k;
        v80.__r_.__value_.__r.__words[2] = *(_QWORD *)(k + 16);
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v27;
      }
      LODWORD(v81.__r_.__value_.__l.__data_) = *(_DWORD *)(k + 24);
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v79, (const void **)&v80.__r_.__value_.__l.__data_))
      {
        v28 = (int *)global_logger();
        if (v28[169] <= 2)
        {
          if (cppipc::must_cancel((cppipc *)v28))
            goto LABEL_169;
          v29 = (file_logger *)global_logger();
          started = file_logger::start_stream(v29, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/server/unity_server_init.cpp", "init_extensions", 57, 1);
          v31 = pthread_getspecific(*((_QWORD *)started + 74));
          if (v31 && *((_BYTE *)v31 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"Excluding load of ", 18);
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v70, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
          else
            v70 = v80;
          v52 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v70);
          v53 = pthread_getspecific(*(_QWORD *)(v52 + 592));
          if (v53)
          {
            if (*((_BYTE *)v53 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(v53[2] - 24) + 16));
              v54 = std::locale::use_facet((const std::locale *)&v71, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
              std::locale::~locale((std::locale *)&v71);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v52);
              if (*(_DWORD *)(v52 + 600) == 7)
              {
                __print_back_trace();
                exception = __cxa_allocate_exception(8uLL);
                *exception = "LOG_FATAL encountered";
                __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
              }
            }
          }
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          {
            v55 = &v70;
LABEL_159:
            operator delete(v55->__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        v32 = 0;
        v33 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v80;
        v34 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v34 = v80.__r_.__value_.__l.__size_;
        v35 = v34 - 1;
        while (v35 + v32 != -1 && v32 != -10)
        {
          v37 = v33->__r_.__value_.__s.__data_[v34 - 1 + v32];
          v38 = aLibhdfsSo[v32-- + 9];
          if (v37 != v38)
            goto LABEL_116;
        }
        if (v32 != -10)
        {
LABEL_116:
          v39 = 0;
          while (v35 + v39 != -1 && v39 != -13)
          {
            v41 = v33->__r_.__value_.__s.__data_[v35 + v39];
            v42 = aLibhdfsDylib[v39-- + 12];
            if (v41 != v42)
              goto LABEL_124;
          }
          if (v39 != -13)
          {
LABEL_124:
            v43 = 0;
            v44 = (uint64_t)v33 + v34 - 1;
            v45 = -(uint64_t)v34;
            while (v45 != v43 && v43 != -8)
            {
              v46 = *(unsigned __int8 *)(v44 + v43);
              v47 = aHdfsDll[v43-- + 7];
              if (v46 != v47)
                goto LABEL_130;
            }
            if (v43 != -8)
            {
LABEL_130:
              if (LODWORD(v81.__r_.__value_.__l.__data_) == 1)
              {
                v48 = (int *)global_logger();
                if (v48[169] <= 2)
                {
                  if (cppipc::must_cancel((cppipc *)v48))
LABEL_169:
                    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
                  v49 = (file_logger *)global_logger();
                  v50 = file_logger::start_stream(v49, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/server/unity_server_init.cpp", "init_extensions", 67, 1);
                  v51 = pthread_getspecific(*((_QWORD *)v50 + 74));
                  if (v51 && *((_BYTE *)v51 + 280))
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51 + 2, (uint64_t)"Autoloading of ", 15);
                  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v69, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
                  else
                    v69 = v80;
                  v56 = file_logger::operator<<<std::string>((uint64_t)v50, (uint64_t)&v69);
                  v57 = pthread_getspecific(*(_QWORD *)(v56 + 592));
                  if (v57)
                  {
                    if (*((_BYTE *)v57 + 280))
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(v57[2] - 24) + 16));
                      v58 = std::locale::use_facet((const std::locale *)&v71, MEMORY[0x24BEDB350]);
                      ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
                      std::locale::~locale((std::locale *)&v71);
                      std::ostream::put();
                      std::ostream::flush();
                      file_logger::stream_flush((file_logger *)v56);
                      if (*(_DWORD *)(v56 + 600) == 7)
                      {
                        __print_back_trace();
                        v61 = __cxa_allocate_exception(8uLL);
                        *v61 = "LOG_FATAL encountered";
                        __cxa_throw(v61, MEMORY[0x24BEDB718], 0);
                      }
                    }
                  }
                  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v69.__r_.__value_.__l.__data_);
                }
                v59 = *a3;
                if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v66, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
                else
                  v66 = v80;
                std::string::basic_string[abi:ne180100]<0>(v64, "..");
                (*(void (**)(void **__return_ptr, uint64_t, std::string *, void **))(*(_QWORD *)v59 + 232))(&v67, v59, &v66, v64);
                if (v68 < 0)
                  operator delete(v67);
                if (v65 < 0)
                  operator delete(v64[0]);
                if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
                {
                  v55 = &v66;
                  goto LABEL_159;
                }
              }
            }
          }
        }
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
    }
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    ++v23;
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v79, (char *)v79.__r_.__value_.__l.__size_);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
}

void sub_2184614BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;

  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (a46 < 0)
    operator delete(a41);
  for (; v51 != v52 - 176; v51 -= 24)
  {
    if (*(char *)(v51 - 1) < 0)
      operator delete(*(void **)(v51 - 24));
  }
  *(_QWORD *)(v52 - 176) = &a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 176));
  if (*(char *)(v52 - 217) < 0)
    operator delete(*(void **)(v52 - 240));
  _Unwind_Resume(a1);
}

void sub_2184619DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::filesystem::path>,boost::filesystem::path const*,boost::filesystem::path const*,boost::filesystem::path*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::filesystem::path>,boost::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_218461B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::filesystem::path>,boost::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::filesystem::path>,boost::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void __cxx_global_var_init_16_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_server_init_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  __int128 v16;

  v5 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a1, a2, (unsigned __int8 **)a3);
  if (v5 == a2)
    return a2;
  v6 = v5;
  v7 = v5 + 24;
  if (v5 + 24 != a2)
  {
    v8 = v5;
    while (1)
    {
      v9 = v6;
      v6 = v7;
      v10 = *(unsigned __int8 *)(v9 + 47);
      if ((v10 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v9 + 47);
      else
        v11 = *(_QWORD *)(v9 + 32);
      v12 = *(unsigned __int8 *)(a3 + 23);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a3 + 8);
      if (v11 != v12)
        goto LABEL_20;
      if (v13 >= 0)
        v14 = (unsigned __int8 *)a3;
      else
        v14 = *(unsigned __int8 **)a3;
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v6, v14, *(_QWORD *)(v9 + 32)))
          goto LABEL_20;
      }
      else if (*(_BYTE *)(v9 + 47))
      {
        v15 = 0;
        while (*(unsigned __int8 *)(v6 + v15) == v14[v15])
        {
          if (v10 == ++v15)
            goto LABEL_23;
        }
LABEL_20:
        if (*(char *)(v8 + 23) < 0)
          operator delete(*(void **)v8);
        v16 = *(_OWORD *)v6;
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
        *(_OWORD *)v8 = v16;
        v8 += 24;
        *(_BYTE *)(v9 + 47) = 0;
        *(_BYTE *)v6 = 0;
      }
LABEL_23:
      v7 = v6 + 24;
      if (v6 + 24 == a2)
        return v8;
    }
  }
  return v5;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<turi::gl_sframe>(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v6 = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<turi::gl_sframe>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    turi::gl_sframe::operator std::shared_ptr<turi::unity_sframe_base>(a2, &v5);
    v7 = v5;
    LODWORD(v6) = 4;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v6);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v6);
  }
}

void sub_218461E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<turi::gl_sframe>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    result = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
        v12 = v6 - 1;
      }
      while (*(_QWORD *)(a1 + 40) <= v12);
      v13 = result << v5;
      if (v5 >= 0x40)
        v13 = 0;
      result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (v2 < v14)
  {
    v15 = *(unsigned int **)a1;
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(a1 + 60);
    v19 = *v15;
    while (1)
    {
      v20 = v19 / 0xADC8;
      v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      v9 = v21 >= v20;
      v22 = v21 - v20;
      if (v9)
        v23 = 0;
      else
        v23 = 0x7FFFFFFF;
      v19 = v23 + v22;
      v24 = v19 - 1;
      if (v16 > v24)
      {
        v25 = result << (v17 + 1);
        if (v17 >= 0x3F)
          v25 = 0;
        result = v25 + (v18 & v24);
        if (++v2 == v14)
          break;
      }
    }
    *v15 = v19;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_ac_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::flexmap_to_varmap(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 *v11;
  unsigned int v12;
  _QWORD v13[10];

  v13[9] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = a1 + 1;
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      memset(v13, 0, 13);
      if (v13 != v4 + 7)
      {
        *(_QWORD *)((char *)v13 + 5) = *(_QWORD *)((char *)v4 + 61);
        v13[0] = v4[7];
        BYTE4(v13[1]) = *((_BYTE *)v4 + 68);
        v5 = BYTE4(v13[1]) > 9u || ((1 << SBYTE4(v13[1])) & 0x33C) == 0;
        if (!v5)
        {
          v6 = (unint64_t *)v13[0];
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
        }
      }
      v12 = 0;
      v11 = (__int128 *)(v4 + 4);
      v8 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v4 + 4, (uint64_t)&std::piecewise_construct, &v11);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v8 + 14, &v12);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v12);
      v9 = (_QWORD *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v4[2];
          v5 = *v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v5);
      }
      v4 = v10;
    }
    while (v10 != v3);
  }
}

void sub_2184621C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v4, *(char **)(v4 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::emplace_back<std::string const&,turi::flexible_type const&>(uint64_t *a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v12 = (uint64_t)(v9 - *a1) >> 5;
    if ((unint64_t)(v12 + 1) >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = v7 - *a1;
    v14 = v13 >> 4;
    if (v13 >> 4 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v21 = v6;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v6, v15);
    else
      v16 = 0;
    v17 = v16;
    v18 = &v16[32 * v12];
    v20 = &v16[32 * v15];
    std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>((uint64_t)v18, a2, a3);
    v19 = v18 + 32;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, &v17);
    v11 = a1[1];
    result = std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    result = std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>(*(_QWORD *)(v6 - 8), a2, a3);
    v11 = v9 + 32;
    a1[1] = v9 + 32;
  }
  a1[1] = v11;
  return result;
}

void sub_2184622DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

std::string *turi::activity_classification::activity_classifier::init_model(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  turi::neural_net::model_spec **v14;
  turi::neural_net::model_spec **v15;
  turi::neural_net::model_spec *v16;
  unsigned int v17;
  uint64_t i;
  std::string *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  std::string *p_p;
  const void *v44;
  std::string *result;
  uint64_t v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  _QWORD __dst[313];
  _BYTE v53[24];
  _BYTE *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  std::string __p;
  _QWORD v62[3];
  __int128 v63[21];
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  std::string v68;
  std::string *v69;
  _BYTE __src[2504];
  uint64_t v71;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (const void **)v2;
  v15 = v14;
  v71 = *MEMORY[0x24BDAC8D0];
  v16 = (turi::neural_net::model_spec *)operator new();
  turi::neural_net::model_spec::model_spec(v16);
  *v15 = v16;
  v17 = 5489;
  LODWORD(__dst[0]) = 5489;
  for (i = 1; i != 624; ++i)
  {
    v17 = i + 1812433253 * (v17 ^ (v17 >> 30));
    *((_DWORD *)__dst + i) = v17;
  }
  __dst[312] = 0;
  if (v6)
  {
    *(_DWORD *)__src = v4;
    std::seed_seq::seed_seq[abi:ne180100]<int,(void *)0>(&__p, (int *)__src, 1);
    std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::__seed<std::seed_seq>(__src, (unint64_t)&__p);
    memcpy(__dst, __src, sizeof(__dst));
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v19 = *(std::string **)v12;
  if (*(_QWORD *)(v12 + 8) - *(_QWORD *)v12 == 24)
  {
    if (SHIBYTE(v19->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v19->__r_.__value_.__l.__data_, v19->__r_.__value_.__l.__size_);
    }
    else
    {
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
    }
    std::string::basic_string[abi:ne180100]<0>(&v68, "reshape");
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3);
    *(_QWORD *)__src = 1;
    *(_QWORD *)&__src[8] = v22;
    *(_QWORD *)&__src[16] = 1;
    *(_QWORD *)&__src[24] = v10;
    turi::neural_net::model_spec::add_reshape(v16, &v68, &__p, (uint64_t)__src);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__src, "features");
    turi::neural_net::model_spec::add_channel_concat(v16, (std::string *)__src, (std::string **)v12);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
    std::string::basic_string[abi:ne180100]<0>(&v68, "features");
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3);
    *(_QWORD *)__src = 1;
    *(_QWORD *)&__src[8] = v21;
    *(_QWORD *)&__src[16] = 1;
    *(_QWORD *)&__src[24] = v10;
    turi::neural_net::model_spec::add_reshape(v16, &__p, &v68, (uint64_t)__src);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91A230;
  v69 = &v68;
  turi::neural_net::lstm_weight_initializers::create_with_zero(__src);
  if (v6)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3) * v10, v10 << 6, (uint64_t)__dst);
    std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(&v68, (__int128 *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  std::string::basic_string[abi:ne180100]<0>(&v51, "reshape");
  v25 = v12;
  v23 = *(std::string **)v12;
  v24 = *(_QWORD *)(v25 + 8);
  v26 = (uint64_t)v69;
  if (!v69)
    goto LABEL_23;
  if (v69 != &v68)
  {
    v26 = (*(uint64_t (**)(void))(v69->__r_.__value_.__r.__words[0] + 16))();
LABEL_23:
    v67 = (_QWORD *)v26;
    goto LABEL_25;
  }
  v67 = v66;
  (*(void (**)(uint64_t, _QWORD *))(v68.__r_.__value_.__r.__words[0] + 24))((uint64_t)&v68, v66);
LABEL_25:
  v64[0] = &unk_24D91A230;
  v65 = v64;
  turi::neural_net::model_spec::add_convolution(v16, &__p, &v51, 64, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3), 1, v10, 1, v10, 0, (uint64_t)v66, (uint64_t)v64);
  v27 = v65;
  if (v65 == v64)
  {
    v28 = 4;
    v27 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_30;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_30:
  v29 = v67;
  if (v67 == v66)
  {
    v30 = 4;
    v29 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_35;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_35:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "relu1");
  std::string::basic_string[abi:ne180100]<0>(&v51, "conv");
  turi::neural_net::model_spec::add_relu(v16, &__p, &v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "hiddenIn");
  std::string::basic_string[abi:ne180100]<0>(&v51, "stateIn");
  turi::neural_net::model_spec::add_channel_slice(v16, &__p, &v51, 0, 200, 1);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "cellIn");
  std::string::basic_string[abi:ne180100]<0>(&v51, "stateIn");
  turi::neural_net::model_spec::add_channel_slice(v16, &__p, &v51, 200, 400, 1);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_54;
    goto LABEL_53;
  }
  if (v6)
  {
LABEL_53:
    turi::neural_net::lstm_weight_initializers::create_with_xavier_method(0x40uLL, 0xC8uLL, (uint64_t)__dst, &__p);
    turi::neural_net::lstm_weight_initializers::operator=(__src, (uint64_t)&__p);
    turi::neural_net::lstm_weight_initializers::~lstm_weight_initializers((turi::neural_net::lstm_weight_initializers *)&__p);
  }
LABEL_54:
  std::string::basic_string[abi:ne180100]<0>(&__p, "lstm");
  std::string::basic_string[abi:ne180100]<0>(&v51, "relu1");
  std::string::basic_string[abi:ne180100]<0>(&v50, "hiddenIn");
  std::string::basic_string[abi:ne180100]<0>(&v49, "cellIn");
  std::string::basic_string[abi:ne180100]<0>(&v48, "hiddenOut");
  std::string::basic_string[abi:ne180100]<0>(&v47, "cellOut");
  turi::neural_net::model_spec::add_lstm(v16, &__p, &v51, &v50, &v49, &v48, &v47, 64, 50000.0, 200, __src);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v51, "stateOut");
  std::string::basic_string[abi:ne180100]<0>(&__p, "hiddenOut");
  std::string::basic_string[abi:ne180100]<0>(v62, "cellOut");
  memset(&v50, 0, sizeof(v50));
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  v49.__r_.__value_.__s.__data_[8] = 0;
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v50.__r_.__value_.__l.__size_ = v50.__r_.__value_.__r.__words[0];
  v50.__r_.__value_.__r.__words[2] = v50.__r_.__value_.__r.__words[0] + 48;
  v50.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v50.__r_.__value_.__r.__words[2], (__int128 *)&__p, v63, (std::string *)v50.__r_.__value_.__l.__data_);
  turi::neural_net::model_spec::add_channel_concat(v16, &v51, (std::string **)&v50);
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v62[j + 2]) < 0)
      operator delete(*(void **)((char *)&__p + j * 8 + 24));
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_75;
    goto LABEL_74;
  }
  if (v6)
  {
LABEL_74:
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&__p, 0xC8uLL, 0x80uLL, (uint64_t)__dst);
    std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(&v68, (__int128 *)&__p);
  }
LABEL_75:
  std::string::basic_string[abi:ne180100]<0>(&__p, "dense0");
  std::string::basic_string[abi:ne180100]<0>(&v51, "lstm");
  v32 = (uint64_t)v69;
  if (!v69)
  {
LABEL_78:
    v60 = (_QWORD *)v32;
    goto LABEL_80;
  }
  if (v69 != &v68)
  {
    v32 = (*(uint64_t (**)(void))(v69->__r_.__value_.__r.__words[0] + 16))();
    goto LABEL_78;
  }
  v60 = v59;
  (*(void (**)(uint64_t, _QWORD *))(v68.__r_.__value_.__r.__words[0] + 24))((uint64_t)&v68, v59);
LABEL_80:
  v57[0] = &unk_24D91A230;
  v58 = v57;
  turi::neural_net::model_spec::add_inner_product(v16, &__p, &v51, 128, 200, (uint64_t)v59, (uint64_t)v57);
  v33 = v58;
  if (v58 == v57)
  {
    v34 = 4;
    v33 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_85;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_85:
  v35 = v60;
  if (v60 == v59)
  {
    v36 = 4;
    v35 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_90;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_90:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "bn");
  std::string::basic_string[abi:ne180100]<0>(&v51, "dense0");
  turi::neural_net::model_spec::add_batchnorm(v16, &__p, &v51, 128, 0.001);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "relu6");
  std::string::basic_string[abi:ne180100]<0>(&v51, "bn");
  turi::neural_net::model_spec::add_relu(v16, &__p, &v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_105;
    goto LABEL_104;
  }
  if (v6)
  {
LABEL_104:
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&__p, 0x80uLL, v8, (uint64_t)__dst);
    std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(&v68, (__int128 *)&__p);
  }
LABEL_105:
  std::string::basic_string[abi:ne180100]<0>(&__p, "dense1");
  std::string::basic_string[abi:ne180100]<0>(&v51, "relu6");
  v37 = (uint64_t)v69;
  if (!v69)
  {
LABEL_108:
    v56 = (_QWORD *)v37;
    goto LABEL_110;
  }
  if (v69 != &v68)
  {
    v37 = (*(uint64_t (**)(void))(v69->__r_.__value_.__r.__words[0] + 16))();
    goto LABEL_108;
  }
  v56 = v55;
  (*(void (**)(uint64_t, _QWORD *))(v68.__r_.__value_.__r.__words[0] + 24))((uint64_t)&v68, v55);
LABEL_110:
  v54 = 0;
  turi::neural_net::model_spec::add_inner_product(v16, &__p, &v51, v8, 128, (uint64_t)v55, (uint64_t)v53);
  v38 = v54;
  if (v54 == v53)
  {
    v39 = 4;
    v38 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_115;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_115:
  v40 = v56;
  if (v56 == v55)
  {
    v41 = 4;
    v40 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_120;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_120:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)v13 + 23) >= 0)
    v42 = *((unsigned __int8 *)v13 + 23);
  else
    v42 = (size_t)v13[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v42 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v42)
  {
    if (*((char *)v13 + 23) >= 0)
      v44 = v13;
    else
      v44 = *v13;
    memmove(p_p, v44, v42);
  }
  strcpy((char *)p_p + v42, "Probability");
  std::string::basic_string[abi:ne180100]<0>(&v51, "dense1");
  turi::neural_net::model_spec::add_softmax(v16, &__p, &v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::neural_net::lstm_weight_initializers::~lstm_weight_initializers((turi::neural_net::lstm_weight_initializers *)__src);
  result = v69;
  if (v69 == &v68)
  {
    v46 = 4;
    result = &v68;
  }
  else
  {
    if (!v69)
      return result;
    v46 = 5;
  }
  return (std::string *)(*(uint64_t (**)(void))(result->__r_.__value_.__r.__words[0] + 8 * v46))();
}

void sub_218462E20(_Unwind_Exception *a1)
{
  turi::neural_net::model_spec **v1;

  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_21846316C()
{
  JUMPOUT(0x218463128);
}

void sub_218463174()
{
  uint64_t v0;

  MEMORY[0x219A19A08](v0, 0x20C4093837F09);
  JUMPOUT(0x218463164);
}

_QWORD *turi::neural_net::lstm_weight_initializers::operator=(_QWORD *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 4, a2 + 32);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 8, a2 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 12, a2 + 96);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 16, a2 + 128);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 20, a2 + 160);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 24, a2 + 192);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 28, a2 + 224);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 32, a2 + 256);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 36, a2 + 288);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 40, a2 + 320);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 44, a2 + 352);
  return a1;
}

void sub_2184632D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2184632FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2184634A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t turi::variant_converter<long long,void>::get(uint64_t a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v39[3];
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((_QWORD *)v2 != v41)
  {
    v4 = *(_QWORD *)v2;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v2 + 5);
    v41[0] = v4;
    BYTE4(v41[1]) = *(_BYTE *)(v2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v41[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v39[0] = 0;
  turi::flexible_type_internals::ft_converter<1>::get(v39, (turi::flexible_type_internals *)v41, v3);
  v8 = v39[0];
  switch(BYTE4(v41[1]))
  {
    case 2:
      v9 = (unint64_t *)v41[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          v30 = *(void **)(v41[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v41[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v41[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v41[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v23 = *(void **)(v41[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v41[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_2184637D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

_QWORD *turi::flexible_type_internals::ft_converter<1>::get(_QWORD *result, turi::flexible_type_internals *this, const char *a3)
{
  double v3;

  if (*((_BYTE *)this + 12) == 1)
  {
    v3 = *(double *)this;
    *result = (uint64_t)*(double *)this;
    if (v3 != (double)(uint64_t)v3)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer value", a3);
  }
  else
  {
    if (*((_BYTE *)this + 12))
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"numeric integer value", a3);
    *result = *(_QWORD *)this;
  }
  return result;
}

void sub_218463B0C()
{
  turi::flexible_type_internals::ft_converter<1>::get(long long &,turi::flexible_type const&)::{lambda(void)#2}::operator()();
}

void turi::flexible_type_internals::ft_converter<1>::get(long long &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 150, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_internals::ft_converter<1>::get(long long &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218463C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<1>::get(long long &,turi::flexible_type const&)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 154, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_internals::ft_converter<1>::get(long long &,turi::flexible_type const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218463D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<double>(unsigned int *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD v5[2];
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5[0] = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<double>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    v5[1] = *a2;
    v6 = 0;
    v7 = 1;
    LODWORD(v5[0]) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v5);
  }
}

void sub_218463EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<double>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

_QWORD *std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[6],turi::gl_sarray_reference,0>(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::gl_sarray::gl_sarray(v5 + 3, a3);
  return a1;
}

void sub_218463F50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],std::string&,0>(uint64_t a1, char *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void **v46;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 2;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v46 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v46 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*v6 + 8), a3);
  return a1;
}

void sub_21846438C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[13],std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,0>(uint64_t a1, char *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void **v47;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 5;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v47 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v47);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v47 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v47);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  v45 = *(_QWORD *)(a1 + 24);
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v45 + 8));
  *(_OWORD *)(v45 + 8) = *(_OWORD *)a3;
  *(_QWORD *)(v45 + 24) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return a1;
}

void sub_218464A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>(std::string *result, turi::flexible_type_impl *a2, turi::flexible_type_impl *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,turi::flexible_type *,turi::flexible_type *,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_218464CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,turi::flexible_type *,turi::flexible_type *,std::string*>(uint64_t a1, turi::flexible_type_impl *a2, turi::flexible_type_impl *a3, std::string *this)
{
  std::string *v4;
  turi::flexible_type_impl *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<std::string>::construct[abi:ne180100]<std::string,turi::flexible_type &>(v7, v4, v6);
      v6 = (turi::flexible_type_impl *)((char *)v6 + 16);
      v4 = ++v12;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_218464D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<std::string>::construct[abi:ne180100]<std::string,turi::flexible_type &>(int a1, std::string *this, turi::flexible_type_impl *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v6[13];
  char v7;
  uint64_t v8;

  switch(*((_BYTE *)a3 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_4;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_4:
      v6[0] = *MEMORY[0x24BEDB7F0];
      v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v6[2] = v3;
      v6[3] = MEMORY[0x24BEDB848] + 16;
      if (v7 < 0)
        operator delete((void *)v6[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v8);
      break;
    case 2:
      v4 = *(_QWORD *)a3;
      if (*(char *)(*(_QWORD *)a3 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
      }
      else
      {
        v5 = *(_OWORD *)(v4 + 8);
        this->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v6, (_QWORD *)(*(_QWORD *)a3 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v6, (uint64_t *)(*(_QWORD *)a3 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v6, (_QWORD *)(*(_QWORD *)a3 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(a3, this);
      break;
    case 7:
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
      this->__r_.__value_.__r.__words[2] = 0;
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v6, (_QWORD *)(*(_QWORD *)a3 + 8));
      break;
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_218464F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_79()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_activity_classifier_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/TreeEnsemble.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_TreeEnsembleParameters_TreeNode_EvaluationInfo_default_instance_ = (uint64_t)&off_24D942240;
  *(_QWORD *)algn_254FFB0B8 = 0;
  qword_254FFB0C0 = 0;
  unk_254FFB0C8 = 0;
  dword_254FFB0D0 = 0;
  byte_254FFB0D8 = 1;
  CoreML::Specification::_TreeEnsembleParameters_TreeNode_default_instance_ = (uint64_t)&off_24D9422D8;
  result = 0.0;
  unk_254FFB0E8 = 0u;
  unk_254FFB0F8 = 0u;
  unk_254FFB108 = 0u;
  unk_254FFB118 = 0u;
  unk_254FFB128 = 0u;
  unk_254FFB138 = 0u;
  dword_254FFB148 = 0;
  byte_254FFB150 = 1;
  CoreML::Specification::_TreeEnsembleParameters_default_instance_ = (uint64_t)&off_24D942370;
  unk_254FFB160 = 0u;
  unk_254FFB170 = 0u;
  unk_254FFB180 = 0u;
  qword_254FFB198 = 0;
  dword_254FFB1A0 = 0;
  byte_254FFB1A8 = 1;
  qword_254FFB1D8 = 0;
  dword_254FFB1C8 = 0;
  CoreML::Specification::_TreeEnsembleClassifier_default_instance_ = (uint64_t)&off_24D942408;
  *(_QWORD *)algn_254FFB1B8 = 0;
  byte_254FFB1E0 = 1;
  CoreML::Specification::_TreeEnsembleRegressor_default_instance_ = (uint64_t)&off_24D9424A0;
  unk_254FFB200 = 0;
  byte_254FFB218 = 1;
  qword_254FFB1C0 = (uint64_t)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  qword_254FFB208 = (uint64_t)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  unk_254FFB210 = 0;
  return result;
}

void CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(CoreML::Specification::protobuf_TreeEnsemble_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184651CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
  *(_QWORD *)this = &off_24D942240;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *)&CoreML::Specification::_TreeEnsembleParameters_TreeNode_EvaluationInfo_default_instance_)
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_218465230(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::~TreeEnsembleParameters_TreeNode_EvaluationInfo(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
  *(_QWORD *)this = &off_24D942240;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D942240;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::New(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *v3;

  v3 = (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *)operator new();
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>(a2, v3);
  return v3;
}

void sub_218465308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>);
  return result;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

BOOL CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  BOOL v13;
  char v14;
  _BOOL8 result;
  unint64_t v16;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          v6 = 0;
LABEL_6:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 17)
          goto LABEL_20;
        v16 = 0;
        v11 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
          if (!result)
            return result;
          v12 = v16;
        }
        else
        {
          v12 = *v11;
          *a2 = (char *)(v11 + 1);
        }
        *((_QWORD *)this + 3) = v12;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        *((_QWORD *)this + 2) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v14 & 1) == 0)
          return 0;
      }
      else
      {
        *((_QWORD *)this + 2) = *v10;
        *a2 = v10 + 1;
      }
    }
LABEL_20:
    if ((_DWORD)v7)
      v13 = (v7 & 7) == 4;
    else
      v13 = 1;
    if (v13)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  double v7;

  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(double *)(v5 + 24);
  if (v7 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  return this;
}

unint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::ByteSizeLong(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *((_QWORD *)this + 2);
  v2 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (*((double *)this + 3) != 0.0)
    v3 += 9;
  *((_DWORD *)this + 8) = v3;
  return v3;
}

std::string *CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::MergeFrom(std::string *this, const CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  double v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((double *)a2 + 3);
  if (v6 != 0.0)
    *(double *)&v3[1].__r_.__value_.__l.__data_ = v6;
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::IsInitialized(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
  return 1;
}

_QWORD *CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo");
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::Specification::TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  *(_QWORD *)this = &off_24D9422D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::TreeEnsembleParameters_TreeNode *)&CoreML::Specification::_TreeEnsembleParameters_TreeNode_default_instance_)
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return this;
}

void sub_218465608(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleParameters_TreeNode::~TreeEnsembleParameters_TreeNode(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  *(_QWORD *)this = &off_24D9422D8;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::TreeEnsembleParameters_TreeNode::~TreeEnsembleParameters_TreeNode(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::Specification::TreeEnsembleParameters_TreeNode::New(CoreML::Specification::TreeEnsembleParameters_TreeNode *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::TreeEnsembleParameters_TreeNode *v3;

  v3 = (CoreML::Specification::TreeEnsembleParameters_TreeNode *)operator new();
  CoreML::Specification::TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleParameters_TreeNode>(a2, v3);
  return v3;
}

void sub_2184656E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40FA1F30E5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleParameters_TreeNode>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>);
  return result;
}

double CoreML::Specification::TreeEnsembleParameters_TreeNode::Clear(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  double result;

  v1 = *((unsigned int *)this + 6);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v3 = *v2++;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      --v1;
    }
    while (v1);
    *((_DWORD *)this + 6) = 0;
  }
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

BOOL CoreML::Specification::TreeEnsembleParameters_TreeNode::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleParameters_TreeNode *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int TagFallback;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  unint64_t Varint64Fallback;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *v23;
  char *v24;
  int VarintSizeAsIntFallback;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  _BOOL8 result;
  uint64_t Varint32Fallback;
  unint64_t v37;

  v5 = (CoreML::Specification::TreeEnsembleParameters_TreeNode *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *(unsigned __int8 **)a2;
      v7 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v7)
      {
        v9 = 0;
        goto LABEL_16;
      }
      v8 = v6 + 1;
      v9 = *v6;
      if ((char)*v6 >= 1)
        break;
      if ((unint64_t)v8 < v7)
      {
        v11 = *v8;
        if ((v9 & ~v11) >= 0x80)
        {
          *(_QWORD *)a2 = v6 + 2;
          v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
LABEL_16:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
      v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v10 & 0x100000000) == 0)
        goto LABEL_9;
LABEL_17:
      switch(v10 >> 3)
      {
        case 1u:
          if (v10 != 8)
            goto LABEL_9;
          v14 = *(char **)a2;
          if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && (*v14 & 0x80000000) == 0)
          {
            *((_QWORD *)this + 5) = *v14;
            goto LABEL_51;
          }
          *((_QWORD *)this + 5) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v26 & 1) == 0)
            return 0;
          continue;
        case 2u:
          if (v10 != 16)
            goto LABEL_9;
          v14 = *(char **)a2;
          if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && (*v14 & 0x80000000) == 0)
          {
            *((_QWORD *)this + 6) = *v14;
            goto LABEL_51;
          }
          *((_QWORD *)this + 6) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v27 & 1) == 0)
            return 0;
          continue;
        case 3u:
          if (v10 != 24)
            goto LABEL_9;
          v17 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
          {
            v18 = 0;
          }
          else
          {
            v18 = *v17;
            if ((*v17 & 0x80000000) == 0)
            {
              *(_QWORD *)a2 = v17 + 1;
              goto LABEL_79;
            }
          }
          Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v18);
          v18 = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
LABEL_79:
          *((_DWORD *)this + 14) = v18;
          break;
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
          goto LABEL_9;
        case 0xAu:
          if (v10 != 80)
            goto LABEL_9;
          v14 = *(char **)a2;
          if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && (*v14 & 0x80000000) == 0)
          {
            *((_QWORD *)this + 8) = *v14;
            goto LABEL_51;
          }
          *((_QWORD *)this + 8) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v28 & 1) == 0)
            return 0;
          continue;
        case 0xBu:
          if (v10 != 89)
            goto LABEL_9;
          v37 = 0;
          v19 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v37);
            if (!result)
              return result;
            v20 = v37;
          }
          else
          {
            v20 = *v19;
            *(_QWORD *)a2 = v19 + 1;
          }
          *((_QWORD *)this + 9) = v20;
          continue;
        case 0xCu:
          if (v10 != 96)
            goto LABEL_9;
          v14 = *(char **)a2;
          if (*(_QWORD *)a2 < *((_QWORD *)a2 + 1) && (*v14 & 0x80000000) == 0)
          {
            *((_QWORD *)this + 10) = *v14;
            goto LABEL_51;
          }
          *((_QWORD *)this + 10) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v29 & 1) == 0)
            return 0;
          continue;
        case 0xDu:
          if (v10 != 104)
            goto LABEL_9;
          v14 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
          {
            *((_QWORD *)this + 11) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v30 & 1) == 0)
              return 0;
          }
          else
          {
            *((_QWORD *)this + 11) = *v14;
LABEL_51:
            *(_QWORD *)a2 = v14 + 1;
          }
          continue;
        case 0xEu:
          if (v10 != 112)
            goto LABEL_9;
          v21 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
          {
            Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v31 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v21;
            *(_QWORD *)a2 = v21 + 1;
          }
          *((_BYTE *)this + 60) = Varint64Fallback != 0;
          continue;
        case 0x14u:
          if (v10 != 162)
            goto LABEL_9;
          v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>(v5);
          v24 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v24 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v24;
            *(_QWORD *)a2 = v24 + 1;
          }
          v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v32 & 0x8000000000000000) != 0)
            return 0;
          v34 = v32;
          result = CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::MergePartialFromCodedStream(v23, (char **)a2, v33);
          if (!result)
            return result;
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v34))
            return 0;
          continue;
        default:
          if (v10 >> 3 != 30 || v10 != 241)
            goto LABEL_9;
          v37 = 0;
          v15 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v37);
            if (!result)
              return result;
            v16 = v37;
          }
          else
          {
            v16 = *v15;
            *(_QWORD *)a2 = v15 + 1;
          }
          *((_QWORD *)this + 12) = v16;
          continue;
      }
    }
    *(_QWORD *)a2 = v8;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0)
      goto LABEL_17;
LABEL_9:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  signed int v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int i;
  double v15;

  v5 = this;
  v6 = *(_QWORD *)(this + 40);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(_QWORD *)(v5 + 48);
  if (v7)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  v8 = *(_DWORD *)(v5 + 56);
  if (v8)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(3, v8, a2, a4);
  v9 = *(_QWORD *)(v5 + 64);
  if (v9)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(10, v9, a2, a4);
  v10 = *(double *)(v5 + 72);
  if (v10 != 0.0)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0xB, a2, v10, a3);
  v11 = *(_QWORD *)(v5 + 80);
  if (v11)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(12, v11, a2, a4);
  v12 = *(_QWORD *)(v5 + 88);
  if (v12)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(13, v12, a2, a4);
  if (*(_BYTE *)(v5 + 60))
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(14, 1u, a2, a4);
  v13 = *(_DWORD *)(v5 + 24);
  if (v13)
  {
    for (i = 0; i != v13; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v15 = *(double *)(v5 + 96);
  if (v15 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0x1E, a2, v15, a3);
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode::ByteSizeLong(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v1 = *((unsigned int *)this + 6);
  v2 = 2 * v1;
  if ((_DWORD)v1)
  {
    v3 = 0;
    v4 = *((_QWORD *)this + 4);
    do
    {
      v5 = *(_QWORD *)(v4 + 8 * v3 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = (9 * (__clz(v6 | 1) ^ 0x3F) + 73) >> 6;
      if (v6)
        v8 = v7 + 1;
      else
        v8 = 0;
      if (*(double *)(v5 + 24) != 0.0)
        v8 += 9;
      *(_DWORD *)(v5 + 32) = v8;
      v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while ((_DWORD)v1 != v3);
  }
  v9 = *((_QWORD *)this + 5);
  v10 = v2 + ((9 * (__clz(v9 | 1) ^ 0x3F) + 73) >> 6);
  if (v9)
    v2 = v10 + 1;
  v11 = *((_QWORD *)this + 6);
  v12 = v2 + ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6);
  if (v11)
    v2 = v12 + 1;
  v13 = *((_DWORD *)this + 14);
  v14 = 11;
  v15 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v13 >= 0)
    v14 = v15;
  v16 = v14 + v2;
  if (v13)
    v2 = v16;
  if (*((_BYTE *)this + 60))
    v2 += 2;
  v17 = *((_QWORD *)this + 8);
  v18 = v2 + ((9 * (__clz(v17 | 1) ^ 0x3F) + 73) >> 6);
  if (v17)
    v2 = v18 + 1;
  if (*((double *)this + 9) != 0.0)
    v2 += 9;
  v19 = *((_QWORD *)this + 10);
  v20 = *((_QWORD *)this + 11);
  v21 = v2 + ((9 * (__clz(v19 | 1) ^ 0x3F) + 73) >> 6);
  if (v19)
    v2 = v21 + 1;
  v22 = v2 + ((9 * (__clz(v20 | 1) ^ 0x3F) + 73) >> 6);
  if (v20)
    v2 = v22 + 1;
  if (*((double *)this + 12) != 0.0)
    v2 += 10;
  *((_DWORD *)this + 26) = v2;
  return v2;
}

std::string *CoreML::Specification::TreeEnsembleParameters_TreeNode::MergeFrom(std::string *this, const CoreML::Specification::TreeEnsembleParameters_TreeNode *a2)
{
  std::string *v3;
  uint64_t v4;
  signed int v5;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **v6;
  unsigned int *v7;
  int v8;
  int *size;
  std::string::size_type v10;
  std::string::size_type v11;
  int v12;
  std::string::size_type v13;
  double v14;
  std::string::size_type v15;
  std::string::size_type v16;
  double v17;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  v10 = *((_QWORD *)a2 + 5);
  if (v10)
    v3[1].__r_.__value_.__r.__words[2] = v10;
  v11 = *((_QWORD *)a2 + 6);
  if (v11)
    v3[2].__r_.__value_.__r.__words[0] = v11;
  v12 = *((_DWORD *)a2 + 14);
  if (v12)
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = v12;
  if (*((_BYTE *)a2 + 60))
    v3[2].__r_.__value_.__s.__data_[12] = 1;
  v13 = *((_QWORD *)a2 + 8);
  if (v13)
    v3[2].__r_.__value_.__r.__words[2] = v13;
  v14 = *((double *)a2 + 9);
  if (v14 != 0.0)
    *(double *)&v3[3].__r_.__value_.__l.__data_ = v14;
  v15 = *((_QWORD *)a2 + 10);
  if (v15)
    v3[3].__r_.__value_.__l.__size_ = v15;
  v16 = *((_QWORD *)a2 + 11);
  if (v16)
    v3[3].__r_.__value_.__r.__words[2] = v16;
  v17 = *((double *)a2 + 12);
  if (v17 != 0.0)
    *(double *)&v3[4].__r_.__value_.__l.__data_ = v17;
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode::IsInitialized(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  return 1;
}

_QWORD *CoreML::Specification::TreeEnsembleParameters_TreeNode::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleParameters.TreeNode");
}

CoreML::Specification::TreeEnsembleParameters *CoreML::Specification::TreeEnsembleParameters::TreeEnsembleParameters(CoreML::Specification::TreeEnsembleParameters *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24D942370;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != (CoreML::Specification::TreeEnsembleParameters *)&CoreML::Specification::_TreeEnsembleParameters_default_instance_)
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  return this;
}

void sub_218465FE8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v5 = *(_QWORD **)(v2 + 48);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleParameters::~TreeEnsembleParameters(CoreML::Specification::TreeEnsembleParameters *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D942370;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::TreeEnsembleParameters::~TreeEnsembleParameters(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::TreeEnsembleParameters *CoreML::Specification::TreeEnsembleParameters::New(CoreML::Specification::TreeEnsembleParameters *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::TreeEnsembleParameters *v3;

  v3 = (CoreML::Specification::TreeEnsembleParameters *)operator new();
  CoreML::Specification::TreeEnsembleParameters::TreeEnsembleParameters(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleParameters>(a2, v3);
  return v3;
}

void sub_2184660EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40CFA7A0FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleParameters>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters>);
  return result;
}

uint64_t CoreML::Specification::TreeEnsembleParameters::Clear(CoreML::Specification::TreeEnsembleParameters *this)
{
  uint64_t result;

  result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  return result;
}

BOOL CoreML::Specification::TreeEnsembleParameters::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleParameters *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  unsigned int v11;
  CoreML::Specification::TreeEnsembleParameters_TreeNode *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  char *v16;
  unsigned int v17;
  char *v18;
  BOOL v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  _BOOL8 result;
  char v24;
  signed int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  signed int v33;
  uint64_t v34;
  signed int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v5 = (unsigned int *)((char *)this + 40);
  v6 = (CoreML::Specification::TreeEnsembleParameters *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v7 = *a2;
            if (*a2 < a2[1])
              break;
            v8 = 0;
LABEL_7:
            TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
            v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) != 0)
              goto LABEL_8;
LABEL_27:
            if ((_DWORD)v9)
              v19 = (v9 & 7) == 4;
            else
              v19 = 1;
            if (v19)
              return 1;
            if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
          }
          v8 = *v7;
          if (*v7 < 1)
            goto LABEL_7;
          *a2 = v7 + 1;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_27;
LABEL_8:
          v11 = v9 >> 3;
          if (v9 >> 3 == 3)
            break;
          if (v11 == 2)
          {
            if (v9 != 16)
              goto LABEL_27;
            v18 = *a2;
            if (*a2 >= a2[1] || *v18 < 0)
            {
              *((_QWORD *)this + 8) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v24 & 1) == 0)
                return 0;
            }
            else
            {
              *((_QWORD *)this + 8) = *v18;
              *a2 = v18 + 1;
            }
          }
          else
          {
            if (v11 != 1 || v9 != 10)
              goto LABEL_27;
            v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>(v6);
            v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if (VarintSizeAsIntFallback < 0)
                return 0;
            }
            else
            {
              VarintSizeAsIntFallback = *v14;
              *a2 = v14 + 1;
            }
            v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
            if ((v20 & 0x8000000000000000) != 0)
              return 0;
            v22 = v20;
            result = CoreML::Specification::TreeEnsembleParameters_TreeNode::MergePartialFromCodedStream(v13, (_tc_google::protobuf::io::CodedInputStream *)a2, v21);
            if (!result)
              return result;
            if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22))return 0;
          }
        }
        if (v9 != 25)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0x1Au, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v9 != 26)
        goto LABEL_27;
      v16 = *a2;
      if (*a2 >= a2[1] || *v16 < 0)
      {
        v17 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v17 & 0x80000000) != 0)
          return 0;
      }
      else
      {
        v17 = *v16;
        *a2 = v16 + 1;
      }
      if ((v17 & 7) != 0)
        return 0;
      v25 = *v5;
      v26 = v17 >> 3;
      v27 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v28 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v28 >= v27)
        v29 = v27;
      else
        v29 = v28;
      if (v27 == -1)
        v29 = v28;
      if (v29 >= (uint64_t)v17)
        break;
      if (v17 >= 8)
      {
        if (v26 <= 1)
          v30 = 1;
        else
          v30 = v17 >> 3;
        do
        {
          v39 = 0;
          v31 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v39);
            if (!result)
              return result;
            v32 = v39;
          }
          else
          {
            v32 = *v31;
            *a2 = (char *)(v31 + 1);
          }
          v33 = *((_DWORD *)this + 10);
          if (v33 == *((_DWORD *)this + 11))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v33 + 1);
            v33 = *v5;
          }
          v34 = *((_QWORD *)this + 6);
          *((_DWORD *)this + 10) = v33 + 1;
          *(_QWORD *)(v34 + 8 * v33 + 8) = v32;
          --v30;
        }
        while (v30);
      }
    }
    v35 = v25 + v26;
    if ((int)*v5 >= (int)(v25 + v26))
    {
      v36 = *((_QWORD *)this + 6);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + v26);
      v36 = *((_QWORD *)this + 6);
      v37 = 8 * v35 - 8 * *((int *)this + 10);
      if (v37 >= 1)
        bzero((void *)(v36 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v37 >> 3) - ((unint64_t)v37 > 7)) + 8);
    }
    *v5 = v35;
    v38 = v36 + 8;
    if (!v36)
      v38 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v38 + 8 * v25), v17));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v25;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::TreeEnsembleParameters::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  _tc_google::protobuf::internal::WireFormatLite *v17;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v8 = *(_QWORD *)(v5 + 64);
  if (v8)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v8, a2, a4);
  if (*(int *)(v5 + 40) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x1Au);
      v9 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 26;
      v9 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v9;
    }
    v10 = *(_DWORD *)(v5 + 56);
    if (v9 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v10);
    }
    else
    {
      v11 = *((_QWORD *)a2 + 1);
      if (v10 < 0x80)
      {
        v13 = *(_DWORD *)(v5 + 56);
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v12++ = v10 | 0x80;
          v13 = v10 >> 7;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
      }
      *v12 = v13;
      v15 = (_DWORD)v12 - v11 + 1;
      *((_QWORD *)a2 + 1) += v15;
      *((_DWORD *)a2 + 4) -= v15;
    }
    v16 = *(_QWORD *)(v5 + 48);
    if (v16)
      v17 = (_tc_google::protobuf::internal::WireFormatLite *)(v16 + 8);
    else
      v17 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v17, (const double *)*(unsigned int *)(v5 + 40), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters::ByteSizeLong(CoreML::Specification::TreeEnsembleParameters *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::TreeEnsembleParameters_TreeNode::ByteSizeLong(*(CoreML::Specification::TreeEnsembleParameters_TreeNode **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 10);
  v7 = 8 * v6;
  if ((_DWORD)v6)
  {
    v8 = 11;
    v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v7 >= 0)
      v8 = v9;
    v4 += v8;
  }
  *((_DWORD *)this + 14) = v7;
  v10 = v4 + v7;
  v11 = *((_QWORD *)this + 8);
  v12 = v10 + ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6);
  if (v11)
    result = v12 + 1;
  else
    result = v10;
  *((_DWORD *)this + 18) = result;
  return result;
}

uint64_t *CoreML::Specification::TreeEnsembleParameters::MergeFrom(uint64_t *this, const CoreML::Specification::TreeEnsembleParameters *a2)
{
  uint64_t *v3;
  uint64_t v4;
  signed int v5;
  CoreML::Specification::TreeEnsembleParameters_TreeNode **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  int v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::TreeEnsembleParameters_TreeNode **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), *((_DWORD *)a2 + 6));
    this = (uint64_t *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>((std::string *)(v3 + 2), (std::string **)v7, v6, v5, *(_DWORD *)v3[4] - *((_DWORD *)v3 + 6));
    v8 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v8;
    v9 = (int *)v3[4];
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 10);
  if (v10)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)v3 + 10, *((_DWORD *)v3 + 10) + v10);
    this = (uint64_t *)memcpy((void *)(v3[6] + 8 * *((int *)v3 + 10) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)v3 + 10) += *((_DWORD *)a2 + 10);
  }
  v11 = *((_QWORD *)a2 + 8);
  if (v11)
    v3[8] = v11;
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters::IsInitialized(CoreML::Specification::TreeEnsembleParameters *this)
{
  return 1;
}

_QWORD *CoreML::Specification::TreeEnsembleParameters::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleParameters");
}

CoreML::Specification::TreeEnsembleClassifier *CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(CoreML::Specification::TreeEnsembleClassifier *this)
{
  *(_QWORD *)this = &off_24D942408;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::TreeEnsembleClassifier *)&CoreML::Specification::_TreeEnsembleClassifier_default_instance_)
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_218466874(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleClassifier::~TreeEnsembleClassifier(CoreML::Specification::TreeEnsembleClassifier *this)
{
  *(_QWORD *)this = &off_24D942408;
  CoreML::Specification::TreeEnsembleClassifier::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::TreeEnsembleClassifier::~TreeEnsembleClassifier(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::TreeEnsembleClassifier::SharedDtor(uint64_t *this)
{
  uint64_t v1;

  v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_TreeEnsembleClassifier_default_instance_)
  {
    this = (uint64_t *)this[2];
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  if (*(_DWORD *)(v1 + 44))
    return (uint64_t *)CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v1);
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 44);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 32);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

uint64_t *CoreML::Specification::TreeEnsembleClassifier::default_instance(CoreML::Specification::TreeEnsembleClassifier *this)
{
  CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  return &CoreML::Specification::_TreeEnsembleClassifier_default_instance_;
}

CoreML::Specification::TreeEnsembleClassifier *CoreML::Specification::TreeEnsembleClassifier::New(CoreML::Specification::TreeEnsembleClassifier *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::TreeEnsembleClassifier *v3;

  v3 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
  CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleClassifier>(a2, v3);
  return v3;
}

void sub_2184669FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403B3CA634);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleClassifier>);
  return result;
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::Clear(CoreML::Specification::TreeEnsembleClassifier *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  char *v13;
  int v14;
  CoreML::Specification::Int64Vector *v15;
  CoreML::Specification::TreeEnsembleParameters *v16;
  char *v17;
  int VarintSizeAsIntFallback;
  CoreML::Specification::StringVector *v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t result;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int TagFallback;
  BOOL v33;
  uint64_t Varint32Fallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v6)
      {
        v8 = 0;
      }
      else
      {
        v7 = v5 + 1;
        v8 = *v5;
        if ((char)*v5 >= 1)
        {
          *(_QWORD *)a2 = v7;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_55;
          goto LABEL_8;
        }
        if ((unint64_t)v7 < v6)
        {
          v10 = *v7;
          if ((v8 & ~v10) >= 0x80)
          {
            *(_QWORD *)a2 = v5 + 2;
            v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
            goto LABEL_8;
          }
        }
      }
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_55;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 > 0x63)
        break;
      if (v11 == 1)
      {
        if (v9 == 10)
        {
          v16 = (CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)this + 2);
          if (!v16)
          {
            v16 = (CoreML::Specification::TreeEnsembleParameters *)operator new();
            CoreML::Specification::TreeEnsembleParameters::TreeEnsembleParameters(v16);
            *((_QWORD *)this + 2) = v16;
          }
          v17 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v17;
            *(_QWORD *)a2 = v17 + 1;
          }
          v24 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v24 & 0x8000000000000000) != 0)
            return 0;
          v26 = v24;
          result = CoreML::Specification::TreeEnsembleParameters::MergePartialFromCodedStream(v16, (char **)a2, v25);
          if (!(_DWORD)result)
            return result;
          goto LABEL_51;
        }
LABEL_55:
        if ((_DWORD)v9)
          v33 = (v9 & 7) == 4;
        else
          v33 = 1;
        if (v33)
          return 1;
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
      }
      else
      {
        if (v11 != 2 || v9 != 16)
          goto LABEL_55;
        v13 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v14 = 0;
        }
        else
        {
          v14 = *v13;
          if ((*v13 & 0x80000000) == 0)
          {
            *(_QWORD *)a2 = v13 + 1;
            goto LABEL_63;
          }
        }
        Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v14);
        v14 = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
LABEL_63:
        *((_DWORD *)this + 6) = v14;
      }
    }
    if (v11 == 100)
      break;
    if (v11 != 101 || v9 != 42)
      goto LABEL_55;
    if (*((_DWORD *)this + 11) == 101)
    {
      v15 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 11) = 101;
      v15 = (CoreML::Specification::Int64Vector *)operator new();
      CoreML::Specification::Int64Vector::Int64Vector(v15);
      *((_QWORD *)this + 4) = v15;
    }
    v20 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
    {
      v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (v21 < 0)
        return 0;
    }
    else
    {
      v21 = *v20;
      *(_QWORD *)a2 = v20 + 1;
    }
    v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v21);
    if ((v28 & 0x8000000000000000) != 0)
      return 0;
    v26 = v28;
    result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v15, (char **)a2, v29);
    if (!(_DWORD)result)
      return result;
LABEL_51:
    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
      return 0;
  }
  if (v9 != 34)
    goto LABEL_55;
  if (*((_DWORD *)this + 11) == 100)
  {
    v19 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 4);
  }
  else
  {
    CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels((uint64_t)this);
    *((_DWORD *)this + 11) = 100;
    v19 = (CoreML::Specification::StringVector *)operator new();
    CoreML::Specification::StringVector::StringVector(v19);
    *((_QWORD *)this + 4) = v19;
  }
  v22 = *(char **)a2;
  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
  {
    v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v23 < 0)
      return 0;
  }
  else
  {
    v23 = *v22;
    *(_QWORD *)a2 = v22 + 1;
  }
  v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v23);
  if ((v30 & 0x8000000000000000) == 0)
  {
    v26 = v30;
    result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v19, (char **)a2, v31);
    if (!(_DWORD)result)
      return result;
    goto LABEL_51;
  }
  return 0;
}

void sub_218466DC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40CFA7A0FDLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::TreeEnsembleClassifier::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  signed int v7;
  int v8;

  v5 = this;
  if (this != &CoreML::Specification::_TreeEnsembleClassifier_default_instance_)
  {
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  v7 = *((_DWORD *)v5 + 6);
  if (v7)
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteInt32(2, v7, a2, a4);
  v8 = *((_DWORD *)v5 + 11);
  if (v8 == 100)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v5[4], a2, a4);
    v8 = *((_DWORD *)v5 + 11);
  }
  if (v8 == 101)
    return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, v5[4], a2, a4);
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::ByteSizeLong(CoreML::Specification::TreeEnsembleClassifier *this)
{
  CoreML::Specification::TreeEnsembleParameters *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  if (this == (CoreML::Specification::TreeEnsembleClassifier *)&CoreML::Specification::_TreeEnsembleClassifier_default_instance_
    || (v2 = (CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)this + 2)) == 0)
  {
    v4 = 0;
  }
  else
  {
    v3 = CoreML::Specification::TreeEnsembleParameters::ByteSizeLong(v2);
    v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0)
      v6 = 11;
    else
      v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v4 += v6;
  }
  v7 = *((_DWORD *)this + 11);
  if (v7 == 101)
  {
    v8 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 4));
    goto LABEL_14;
  }
  if (v7 == 100)
  {
    v8 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 4));
LABEL_14:
    v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::TreeEnsembleClassifier::MergeFrom(std::string *this, const CoreML::Specification::TreeEnsembleClassifier *a2)
{
  uint64_t v3;
  uint64_t v4;
  const CoreML::Specification::TreeEnsembleParameters *v5;
  CoreML::Specification::TreeEnsembleParameters *v7;
  const CoreML::Specification::TreeEnsembleParameters *v8;
  int v9;
  int v10;
  CoreML::Specification::StringVector *v11;
  CoreML::Specification::Int64Vector *v12;
  CoreML::Specification::StringVector *v13;
  uint64_t *v14;
  CoreML::Specification::Int64Vector *v15;
  uint64_t *v16;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::TreeEnsembleClassifier *)&CoreML::Specification::_TreeEnsembleClassifier_default_instance_
    && v5 != 0)
  {
    v7 = *(CoreML::Specification::TreeEnsembleParameters **)(v3 + 16);
    if (!v7)
    {
      v7 = (CoreML::Specification::TreeEnsembleParameters *)operator new();
      CoreML::Specification::TreeEnsembleParameters::TreeEnsembleParameters(v7);
      *(_QWORD *)(v3 + 16) = v7;
      v5 = (const CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::TreeEnsembleParameters *)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
    this = (std::string *)CoreML::Specification::TreeEnsembleParameters::MergeFrom((uint64_t *)v7, v8);
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
    *(_DWORD *)(v3 + 24) = v9;
  v10 = *((_DWORD *)a2 + 11);
  if (v10 == 101)
  {
    if (*(_DWORD *)(v3 + 44) == 101)
    {
      v12 = *(CoreML::Specification::Int64Vector **)(v3 + 32);
    }
    else
    {
      CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 44) = 101;
      v12 = (CoreML::Specification::Int64Vector *)operator new();
      v15 = (CoreML::Specification::Int64Vector *)CoreML::Specification::Int64Vector::Int64Vector(v12);
      *(_QWORD *)(v3 + 32) = v12;
      if (*((_DWORD *)a2 + 11) != 101)
      {
        v16 = CoreML::Specification::Int64Vector::default_instance(v15);
        return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v12, (const CoreML::Specification::GLMRegressor_DoubleArray *)v16);
      }
    }
    v16 = (uint64_t *)*((_QWORD *)a2 + 4);
    return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v12, (const CoreML::Specification::GLMRegressor_DoubleArray *)v16);
  }
  if (v10 == 100)
  {
    if (*(_DWORD *)(v3 + 44) == 100)
    {
      v11 = *(CoreML::Specification::StringVector **)(v3 + 32);
    }
    else
    {
      CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 44) = 100;
      v11 = (CoreML::Specification::StringVector *)operator new();
      v13 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v11);
      *(_QWORD *)(v3 + 32) = v11;
      if (*((_DWORD *)a2 + 11) != 100)
      {
        v14 = CoreML::Specification::StringVector::default_instance(v13);
        return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v11, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v14);
      }
    }
    v14 = (uint64_t *)*((_QWORD *)a2 + 4);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v11, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v14);
  }
  return this;
}

void sub_218467144(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::IsInitialized(CoreML::Specification::TreeEnsembleClassifier *this)
{
  return 1;
}

_QWORD *CoreML::Specification::TreeEnsembleClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleClassifier");
}

CoreML::Specification::TreeEnsembleRegressor *CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(CoreML::Specification::TreeEnsembleRegressor *this)
{
  *(_QWORD *)this = &off_24D9424A0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_)
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_2184671F4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleRegressor::~TreeEnsembleRegressor(CoreML::Specification::TreeEnsembleRegressor *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D9424A0;
  if (this != (CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::TreeEnsembleRegressor::~TreeEnsembleRegressor(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::TreeEnsembleRegressor::default_instance(CoreML::Specification::TreeEnsembleRegressor *this)
{
  CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  return &CoreML::Specification::_TreeEnsembleRegressor_default_instance_;
}

CoreML::Specification::TreeEnsembleRegressor *CoreML::Specification::TreeEnsembleRegressor::New(CoreML::Specification::TreeEnsembleRegressor *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::TreeEnsembleRegressor *v3;

  v3 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
  CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleRegressor>(a2, v3);
  return v3;
}

void sub_2184672F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleRegressor>);
  return result;
}

uint64_t CoreML::Specification::TreeEnsembleRegressor::Clear(CoreML::Specification::TreeEnsembleRegressor *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

BOOL CoreML::Specification::TreeEnsembleRegressor::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleRegressor *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::TreeEnsembleParameters *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  char *v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  _BOOL8 result;
  uint64_t Varint32Fallback;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 < a2[1])
          break;
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0)
          goto LABEL_7;
LABEL_22:
        if ((_DWORD)v7)
          v15 = (v7 & 7) == 4;
        else
          v15 = 1;
        if (v15)
          return 1;
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_22;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 16)
        goto LABEL_22;
      v13 = *a2;
      if (*a2 >= a2[1])
      {
        v14 = 0;
      }
      else
      {
        v14 = *v13;
        if ((*v13 & 0x80000000) == 0)
        {
          *a2 = v13 + 1;
          goto LABEL_35;
        }
      }
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v14);
      v14 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_35:
      *((_DWORD *)this + 6) = v14;
    }
    if (v7 >> 3 != 1 || v7 != 10)
      goto LABEL_22;
    v10 = (CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)this + 2);
    if (!v10)
    {
      v10 = (CoreML::Specification::TreeEnsembleParameters *)operator new();
      CoreML::Specification::TreeEnsembleParameters::TreeEnsembleParameters(v10);
      *((_QWORD *)this + 2) = v10;
    }
    v11 = *a2;
    if (*a2 >= a2[1] || *v11 < 0)
    {
      VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (VarintSizeAsIntFallback < 0)
        return 0;
    }
    else
    {
      VarintSizeAsIntFallback = *v11;
      *a2 = v11 + 1;
    }
    v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
    if ((v16 & 0x8000000000000000) != 0)
      break;
    v18 = v16;
    result = CoreML::Specification::TreeEnsembleParameters::MergePartialFromCodedStream(v10, a2, v17);
    if (!result)
      return result;
  }
  while (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18));
  return 0;
}

void sub_21846750C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40CFA7A0FDLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::TreeEnsembleRegressor::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  signed int v7;

  v5 = this;
  if (this != &CoreML::Specification::_TreeEnsembleRegressor_default_instance_)
  {
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  v7 = *((_DWORD *)v5 + 6);
  if (v7)
    return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteInt32(2, v7, a2, a4);
  return this;
}

CoreML::Specification::TreeEnsembleParameters *CoreML::Specification::TreeEnsembleRegressor::ByteSizeLong(CoreML::Specification::TreeEnsembleRegressor *this)
{
  CoreML::Specification::TreeEnsembleParameters *result;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (this == (CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::TreeEnsembleParameters::ByteSizeLong(result);
      result = (CoreML::Specification::TreeEnsembleParameters *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  v4 = *((_DWORD *)this + 6);
  if (v4)
  {
    if (v4 < 0)
      v5 = 11;
    else
      v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    result = (CoreML::Specification::TreeEnsembleParameters *)((char *)result + v5);
  }
  *((_DWORD *)this + 7) = (_DWORD)result;
  return result;
}

std::string *CoreML::Specification::TreeEnsembleRegressor::MergeFrom(std::string *this, const CoreML::Specification::TreeEnsembleRegressor *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::TreeEnsembleParameters *v5;
  CoreML::Specification::TreeEnsembleParameters *v7;
  const CoreML::Specification::TreeEnsembleParameters *v8;
  int v9;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::TreeEnsembleParameters *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::TreeEnsembleParameters *)operator new();
      CoreML::Specification::TreeEnsembleParameters::TreeEnsembleParameters(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::TreeEnsembleParameters *)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
    this = (std::string *)CoreML::Specification::TreeEnsembleParameters::MergeFrom((uint64_t *)v7, v8);
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v9;
  return this;
}

void sub_2184676D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40CFA7A0FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::TreeEnsembleRegressor::IsInitialized(CoreML::Specification::TreeEnsembleRegressor *this)
{
  return 1;
}

_QWORD *CoreML::Specification::TreeEnsembleRegressor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleRegressor");
}

CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::New(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
  return CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::New(this, 0);
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::Specification::TreeEnsembleParameters_TreeNode::New(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  return CoreML::Specification::TreeEnsembleParameters_TreeNode::New(this, 0);
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode::GetCachedSize(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  return *((unsigned int *)this + 26);
}

CoreML::Specification::TreeEnsembleParameters *CoreML::Specification::TreeEnsembleParameters::New(CoreML::Specification::TreeEnsembleParameters *this)
{
  return CoreML::Specification::TreeEnsembleParameters::New(this, 0);
}

CoreML::Specification::TreeEnsembleClassifier *CoreML::Specification::TreeEnsembleClassifier::New(CoreML::Specification::TreeEnsembleClassifier *this)
{
  return CoreML::Specification::TreeEnsembleClassifier::New(this, 0);
}

CoreML::Specification::TreeEnsembleRegressor *CoreML::Specification::TreeEnsembleRegressor::New(CoreML::Specification::TreeEnsembleRegressor *this)
{
  return CoreML::Specification::TreeEnsembleRegressor::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v4 = *(_QWORD *)(v3 + 8 * v2);
      v5 = *(unsigned int *)(v4 + 24);
      if ((int)v5 >= 1)
      {
        v6 = (uint64_t *)(*(_QWORD *)(v4 + 32) + 8);
        do
        {
          v7 = *v6++;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)(v7 + 24) = 0;
          --v5;
        }
        while (v5);
        *(_DWORD *)(v4 + 24) = 0;
      }
      ++v2;
      *(_OWORD *)(v4 + 88) = 0uLL;
      *(_OWORD *)(v4 + 72) = 0uLL;
      *(_OWORD *)(v4 + 56) = 0uLL;
      *(_OWORD *)(v4 + 40) = 0uLL;
    }
    while (v2 != v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **v11;
  std::string **v12;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *v13;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **v18;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **v19;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *v20;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>);
      }
      else
      {
        Aligned = (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *)operator new();
        CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2184678D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::Merge(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *a1, std::string *this)
{
  return CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::TreeEnsembleParameters_TreeNode **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::TreeEnsembleParameters_TreeNode **v11;
  std::string **v12;
  CoreML::Specification::TreeEnsembleParameters_TreeNode *v13;
  CoreML::Specification::TreeEnsembleParameters_TreeNode *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::TreeEnsembleParameters_TreeNode **v18;
  CoreML::Specification::TreeEnsembleParameters_TreeNode **v19;
  CoreML::Specification::TreeEnsembleParameters_TreeNode *v20;
  CoreML::Specification::TreeEnsembleParameters_TreeNode *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::TreeEnsembleParameters_TreeNode **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>);
      }
      else
      {
        Aligned = (CoreML::Specification::TreeEnsembleParameters_TreeNode *)operator new();
        CoreML::Specification::TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_218467A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40FA1F30E5);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode>::Merge(CoreML::Specification::TreeEnsembleParameters_TreeNode *a1, std::string *this)
{
  return CoreML::Specification::TreeEnsembleParameters_TreeNode::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleRegressor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_TreeEnsemble_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_218467B24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_218467B48(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218467CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

float turi::variant_converter<float,void>::get(uint64_t a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  float v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float v39[6];
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((_QWORD *)v2 != v41)
  {
    v4 = *(_QWORD *)v2;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v2 + 5);
    v41[0] = v4;
    BYTE4(v41[1]) = *(_BYTE *)(v2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v41[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v39[0] = 0.0;
  turi::flexible_type_internals::ft_converter<2>::get<float>(v39, (turi::flexible_type_internals *)v41, v3);
  v8 = v39[0];
  switch(BYTE4(v41[1]))
  {
    case 2:
      v9 = (unint64_t *)v41[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          v30 = *(void **)(v41[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v41[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v41[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v41[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v23 = *(void **)(v41[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v41[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_218468034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 44))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 56);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 56);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 56);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 56);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 56);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 56);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 56);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 56);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 56);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 56);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 56);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 56);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

float *turi::flexible_type_internals::ft_converter<2>::get<float>(float *result, turi::flexible_type_internals *this, const char *a3)
{
  float v3;

  if (*((_BYTE *)this + 12))
  {
    if (*((_BYTE *)this + 12) != 1)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"numeric", a3);
    v3 = *(double *)this;
  }
  else
  {
    v3 = (float)*(uint64_t *)this;
  }
  *result = v3;
  return result;
}

void sub_21846833C()
{
  turi::flexible_type_internals::ft_converter<2>::get<float>(float &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void turi::flexible_type_internals::ft_converter<2>::get<float>(float &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 222, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<2>::get<float>(float &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218468440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_21_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_4()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_218468744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_5()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::sframe::column_name(turi::sframe *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;

  v3 = *((_QWORD *)this + 5);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 6) - v3) >> 3) <= a2)
    turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
  v4 = (__int128 *)(v3 + 24 * a2);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_218468AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 2);
        v4 -= 16;
        free(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v6 + 3);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_218468C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_67()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_kmeans_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_218468F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_20_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_kmeans_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::add_metadata(uint64_t a1, uint64_t a2)
{
  CoreML::Specification::ModelDescription *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  turi::flexible_type_impl *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  turi::flexible_type_impl *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  turi::flexible_type_impl *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  turi::flexible_type_impl *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  void *v35;
  uint64_t v36;
  turi::flexible_type_impl *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  turi::flexible_type_impl *v41;
  uint64_t v42;
  __int128 v43;
  std::string *v44;
  std::string *v45;
  __int128 v46;
  _BYTE *v47;
  uint64_t v48;
  void *v49;
  std::string v50;
  std::string v51;
  void *__p[2];
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  _BYTE v57[160];

  v3 = *(CoreML::Specification::ModelDescription **)(a1 + 16);
  if (!v3)
  {
    v3 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v3);
    *(_QWORD *)(a1 + 16) = v3;
  }
  v5 = (uint64_t *)*((_QWORD *)v3 + 13);
  if (!v5)
  {
    v5 = (uint64_t *)operator new();
    CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)v5);
    *((_QWORD *)v3 + 13) = v5;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "author");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  v7 = v6;
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p[0]);
    if (!v7)
      goto LABEL_29;
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(&v50, "author");
    v8 = (turi::flexible_type_impl *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v50.__r_.__value_.__l.__data_);
    switch(*((_BYTE *)v8 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_18;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_18:
        __p[0] = *(void **)MEMORY[0x24BEDB7F0];
        v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
        v53 = v11;
        v54 = MEMORY[0x24BEDB848] + 16;
        if (v56 < 0)
          operator delete(v55);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v57);
        goto LABEL_25;
      case 2:
        v9 = *(_QWORD *)v8;
        if (*(char *)(*(_QWORD *)v8 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
        }
        else
        {
          v10 = *(_OWORD *)(v9 + 8);
          v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
          *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v10;
        }
        goto LABEL_25;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v8 + 8));
        goto LABEL_25;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v8 + 8));
        goto LABEL_25;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v8 + 8));
        goto LABEL_25;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v8, &v51);
        goto LABEL_25;
      case 7:
        memset(&v51, 0, sizeof(v51));
        goto LABEL_25;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_25;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v8 + 8));
LABEL_25:
        _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(v5 + 8, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v51);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        goto LABEL_29;
      default:
LABEL_149:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
  if (v6)
    goto LABEL_9;
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(__p, "short_description");
  v12 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  v13 = v12;
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p[0]);
    if (!v13)
      goto LABEL_53;
  }
  else if (!v12)
  {
    goto LABEL_53;
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "short_description");
  v14 = (turi::flexible_type_impl *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v50.__r_.__value_.__l.__data_);
  switch(*((_BYTE *)v14 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_42;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_42:
      __p[0] = *(void **)MEMORY[0x24BEDB7F0];
      v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v53 = v17;
      v54 = MEMORY[0x24BEDB848] + 16;
      if (v56 < 0)
        operator delete(v55);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](v57);
      break;
    case 2:
      v15 = *(_QWORD *)v14;
      if (*(char *)(*(_QWORD *)v14 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v16;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v14 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v14 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v14 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v14, &v51);
      break;
    case 7:
      memset(&v51, 0, sizeof(v51));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v14 + 8));
      break;
    default:
      goto LABEL_149;
  }
  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(v5 + 6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_53:
  std::string::basic_string[abi:ne180100]<0>(__p, "version_string");
  v18 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  v19 = v18;
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p[0]);
    if (!v19)
      goto LABEL_77;
  }
  else if (!v18)
  {
    goto LABEL_77;
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "version_string");
  v20 = (turi::flexible_type_impl *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v50.__r_.__value_.__l.__data_);
  switch(*((_BYTE *)v20 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_66;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_66:
      __p[0] = *(void **)MEMORY[0x24BEDB7F0];
      v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v53 = v23;
      v54 = MEMORY[0x24BEDB848] + 16;
      if (v56 < 0)
        operator delete(v55);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](v57);
      break;
    case 2:
      v21 = *(_QWORD *)v20;
      if (*(char *)(*(_QWORD *)v20 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v21 + 8), *(_QWORD *)(v21 + 16));
      }
      else
      {
        v22 = *(_OWORD *)(v21 + 8);
        v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 24);
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v20 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v20 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v20 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v20, &v51);
      break;
    case 7:
      memset(&v51, 0, sizeof(v51));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v20 + 8));
      break;
    default:
      goto LABEL_149;
  }
  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(v5 + 7, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_77:
  std::string::basic_string[abi:ne180100]<0>(__p, "license");
  v24 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  v25 = v24;
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p[0]);
    if (!v25)
      goto LABEL_101;
  }
  else if (!v24)
  {
    goto LABEL_101;
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "license");
  v26 = (turi::flexible_type_impl *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v50.__r_.__value_.__l.__data_);
  switch(*((_BYTE *)v26 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_90;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_90:
      __p[0] = *(void **)MEMORY[0x24BEDB7F0];
      v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v53 = v29;
      v54 = MEMORY[0x24BEDB848] + 16;
      if (v56 < 0)
        operator delete(v55);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](v57);
      break;
    case 2:
      v27 = *(_QWORD *)v26;
      if (*(char *)(*(_QWORD *)v26 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v27 + 8), *(_QWORD *)(v27 + 16));
      }
      else
      {
        v28 = *(_OWORD *)(v27 + 8);
        v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 24);
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v28;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v26 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v26 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v26 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v26, &v51);
      break;
    case 7:
      memset(&v51, 0, sizeof(v51));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v26 + 8));
      break;
    default:
      goto LABEL_149;
  }
  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(v5 + 9, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_101:
  std::string::basic_string[abi:ne180100]<0>(__p, "user_defined");
  v30 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  v31 = v30;
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p[0]);
    if (!v31)
      return;
  }
  else if (!v30)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "user_defined");
  v32 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)__p);
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  v33 = *(_BYTE **)(v32 + 8);
  v34 = *(_BYTE **)(v32 + 16);
  if (v33 != v34)
  {
    v35 = (void *)*MEMORY[0x24BEDB7F0];
    v36 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v49 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v37 = (turi::flexible_type_impl *)(v33 + 16);
    v48 = MEMORY[0x24BEDB848] + 16;
    while (2)
    {
      switch(*((_BYTE *)v37 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          __p[0] = v35;
          *(void **)((char *)__p + *((_QWORD *)v35 - 3)) = v49;
          v53 = v36;
          v38 = v48;
          goto LABEL_118;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          __p[0] = v35;
          *(void **)((char *)__p + *((_QWORD *)v35 - 3)) = v49;
          v38 = MEMORY[0x24BEDB848] + 16;
          v53 = v36;
LABEL_118:
          v54 = v38;
          if (v56 < 0)
            operator delete(v55);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v57);
          break;
        case 2:
          v39 = *(_QWORD *)v37;
          if (*(char *)(*(_QWORD *)v37 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v39 + 8), *(_QWORD *)(v39 + 16));
          }
          else
          {
            v40 = *(_OWORD *)(v39 + 8);
            v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(v39 + 24);
            *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v37 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v37 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v37 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v37, &v51);
          break;
        case 7:
          memset(&v51, 0, sizeof(v51));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v37 + 8));
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      v41 = (turi::flexible_type_impl *)((char *)v37 - 16);
      switch(*((_BYTE *)v37 - 4))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_134;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_134:
          __p[0] = v35;
          *(void **)((char *)__p + *((_QWORD *)v35 - 3)) = v49;
          v53 = v36;
          v54 = MEMORY[0x24BEDB848] + 16;
          if (v56 < 0)
            operator delete(v55);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v57);
          goto LABEL_141;
        case 2:
          v42 = *(_QWORD *)v41;
          if (*(char *)(*(_QWORD *)v41 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v42 + 8), *(_QWORD *)(v42 + 16));
          }
          else
          {
            v43 = *(_OWORD *)(v42 + 8);
            v50.__r_.__value_.__r.__words[2] = *(_QWORD *)(v42 + 24);
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v43;
          }
          goto LABEL_141;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v41 + 8));
          goto LABEL_141;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v41 + 8));
          goto LABEL_141;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v41 + 8));
          goto LABEL_141;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v41, &v50);
          goto LABEL_141;
        case 7:
          memset(&v50, 0, sizeof(v50));
          goto LABEL_141;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_141;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v41 + 8));
LABEL_141:
          v44 = _tc_google::protobuf::Map<std::string,std::string>::operator[]((uint64_t)(v5 + 3), (uint64_t)&v50);
          v45 = v44;
          if (SHIBYTE(v44->__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44->__r_.__value_.__l.__data_);
          v46 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
          v45->__r_.__value_.__r.__words[2] = v51.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
          *((_BYTE *)&v51.__r_.__value_.__s + 23) = 0;
          v51.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v50.__r_.__value_.__l.__data_);
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v51.__r_.__value_.__l.__data_);
          }
          v47 = (char *)v37 + 16;
          v37 = (turi::flexible_type_impl *)((char *)v37 + 32);
          if (v47 == v34)
            return;
          continue;
        default:
          goto LABEL_149;
      }
    }
  }
}

void sub_218469EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_coreml_export_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_21846A1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void *turi::variant_converter<std::shared_ptr<turi::supervised::supervised_learning_model_base>,void>::get@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  void **has_fallback_type;
  void **v4;
  void *result;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;
  char *v10;

  v10 = &v9;
  has_fallback_type = (void **)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::model_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v10, (uint64_t)(a1 + 2));
  v4 = has_fallback_type;
  if (!has_fallback_type)
  {
    v10 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  result = *has_fallback_type;
  if (*v4
  {
    v6 = (char *)v4[1];
    *a2 = result;
    a2[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_21846A304(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::model_base>>(v10);
}

void sub_21846A328(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_21_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_coreml_extension_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_21846A6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void turi::export_linear_regression_as_model_asset(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const std::string *v8;
  CoreML::Pipeline *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const std::string *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *v45[3];
  char v46;
  char v47[8];
  void *v48;
  char v49;
  const CoreML::Specification::FeatureType *v50;
  std::__shared_weak_count *v51;
  char v52[8];
  void *v53;
  char v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  const CoreML::Specification::FeatureType *v58;
  std::__shared_weak_count *v59;
  char v60[8];
  void *v61;
  char v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  char v66[8];
  void *__p;
  char v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  char v72[8];
  void *v73;
  char v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  std::string v79;
  uint64_t v80[3];
  __int128 v81;
  void **v82;
  char v83;
  std::string v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v8 = *(const std::string **)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v79, "");
  CoreML::Pipeline::Regressor(v8, &v79, v80);
  std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>((const CoreML::Model *)v80, &v81);
  CoreML::Pipeline::~Pipeline((CoreML::Pipeline *)v80);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v9 = (CoreML::Pipeline *)v81;
  v10 = (std::__shared_weak_count *)a1[1];
  v77 = (uint64_t *)*a1;
  v78 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  turi::setup_pipeline_from_mldata(v9, &v77);
  v13 = v78;
  if (v78)
  {
    v14 = (unint64_t *)&v78->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v79, "");
  CoreML::LinearModel::LinearModel(v80, v16, &v79);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  memset(&v79, 0, sizeof(v79));
  v17 = (std::__shared_weak_count *)a1[1];
  v75 = (uint64_t *)*a1;
  v76 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  turi::supervised::get_one_hot_encoded_coefs(a2, &v75, (uint64_t)&v79);
  v20 = v76;
  if (v76)
  {
    v21 = (unint64_t *)&v76->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(_QWORD *)(v79.__r_.__value_.__l.__size_ - 8);
  v24 = (uint64_t *)operator new(8uLL);
  v69 = v24;
  *v24 = v23;
  v70 = v24 + 1;
  v71 = v24 + 1;
  CoreML::LinearModel::setOffsets((uint64_t)v80, &v69, (CoreML::Result *)v72);
  if (v74 < 0)
    operator delete(v73);
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  v79.__r_.__value_.__l.__size_ -= 8;
  memset(&v84, 0, sizeof(v84));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v84, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_, (uint64_t)(v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0]) >> 3);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v82 = (void **)&v63;
  v83 = 0;
  v63 = operator new(0x18uLL);
  v64 = v63;
  v65 = v63 + 3;
  v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double> const*,std::vector<double> const*,std::vector<double>*>((uint64_t)&v65, (uint64_t)&v84, (uint64_t)&v85, v63);
  CoreML::LinearModel::setWeights((uint64_t)v80, (uint64_t *)&v63, (CoreML::Result *)v66);
  if (v68 < 0)
    operator delete(__p);
  v82 = (void **)&v63;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v82);
  if (v84.__r_.__value_.__r.__words[0])
  {
    v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v84, "__vectorized_features__");
  v25 = *(_QWORD *)(*a1 + 64);
  v26 = operator new(8uLL);
  v55 = v26;
  *v26 = v25;
  v56 = v26 + 1;
  v57 = v26 + 1;
  CoreML::FeatureType::Array((uint64_t)&v55, (uint64_t *)&v58);
  CoreML::Model::addInput((uint64_t)v80, &v84, &v58, (CoreML::Result *)v60);
  if (v62 < 0)
    operator delete(v61);
  v27 = v59;
  if (v59)
  {
    v28 = (unint64_t *)&v59->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  v30 = *(const std::string **)(*a1 + 24);
  CoreML::FeatureType::Double((uint64_t *)&v50);
  CoreML::Model::addOutput((uint64_t)v80, v30, &v50, (CoreML::Result *)v52);
  if (v54 < 0)
    operator delete(v53);
  v31 = v51;
  if (v51)
  {
    v32 = (unint64_t *)&v51->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  CoreML::Pipeline::add((CoreML::Pipeline *)v81, (const CoreML::Model *)v80, (CoreML::Result *)v47);
  if (v49 < 0)
    operator delete(v48);
  v34 = v81;
  v35 = *(_QWORD *)(*a1 + 24);
  CoreML::FeatureType::Double(&v43);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v34 + 24))(v45, v34, v35, &v43);
  if (v46 < 0)
    operator delete(v45[1]);
  v36 = v44;
  if (v44)
  {
    v37 = (unint64_t *)&v44->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v81);
  turi::add_metadata(v39, a3);
  std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Pipeline>,void>(&v81, a4);
  if (v79.__r_.__value_.__r.__words[0])
  {
    v79.__r_.__value_.__l.__size_ = v79.__r_.__value_.__r.__words[0];
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  CoreML::Model::~Model((CoreML::Model *)v80);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_21846AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  void *v38;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v38 = *(void **)(v36 - 160);
  if (v38)
  {
    *(_QWORD *)(v36 - 152) = v38;
    operator delete(v38);
  }
  CoreML::Model::~Model((CoreML::Model *)(v36 - 136));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v36 - 112);
  _Unwind_Resume(a1);
}

void turi::supervised::get_one_hot_encoded_coefs(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v3 = (*a2)[3];
  v4 = *(_QWORD *)(v3 + 64);
  LODWORD(v3) = *(_DWORD *)(v3 + 24);
  v5 = v3 > 6;
  v6 = (1 << v3) & 0x4A;
  if (v5 || v6 == 0)
    v8 = v4;
  else
    v8 = v4 - 1;
  v67 = v8;
  if (v8)
  {
    v12 = 0;
    v13 = 0;
    v14 = a3 + 16;
    do
    {
      v15 = **a2;
      v68 = v12;
      if ((*a2)[1] != v15)
      {
        v16 = 0;
        while (1)
        {
          v17 = (uint64_t *)(v15 + 16 * v16);
          v18 = *v17;
          v19 = (std::__shared_weak_count *)v17[1];
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(p_shared_owners);
            while (__stxr(v21 + 1, p_shared_owners));
            v22 = *(_DWORD *)(v18 + 24);
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          else
          {
            v22 = *(_DWORD *)(v18 + 24);
          }
          v24 = 0;
          if (v22 <= 6 && ((1 << v22) & 0x4A) != 0)
            break;
          while (1)
          {
LABEL_55:
            v48 = (uint64_t *)(**a2 + 16 * v16);
            v49 = *v48;
            v50 = (std::__shared_weak_count *)v48[1];
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
              v53 = *(_QWORD *)(v49 + 64);
              do
                v54 = __ldaxr(v51);
              while (__stlxr(v54 - 1, v51));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            else
            {
              v53 = *(_QWORD *)(v49 + 64);
            }
            if (v24 >= v53)
              break;
            v36 = *a1;
            v38 = *(_QWORD **)(a3 + 8);
            v37 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v38 >= v37)
            {
              v40 = *(_QWORD **)a3;
              v41 = ((uint64_t)v38 - *(_QWORD *)a3) >> 3;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 61)
                goto LABEL_83;
              v43 = v37 - (_QWORD)v40;
              if (v43 >> 2 > v42)
                v42 = v43 >> 2;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                v44 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v44 = v42;
              if (v44)
              {
                v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v14, v44);
                v40 = *(_QWORD **)a3;
                v38 = *(_QWORD **)(a3 + 8);
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[8 * v41];
              *(_QWORD *)v46 = *(_QWORD *)(v36 + 8 * v13);
              v39 = v46 + 8;
              while (v38 != v40)
              {
                v47 = *--v38;
                *((_QWORD *)v46 - 1) = v47;
                v46 -= 8;
              }
              *(_QWORD *)a3 = v46;
              *(_QWORD *)(a3 + 8) = v39;
              *(_QWORD *)(a3 + 16) = &v45[8 * v44];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *v38 = *(_QWORD *)(v36 + 8 * v13);
              v39 = v38 + 1;
            }
            *(_QWORD *)(a3 + 8) = v39;
            ++v13;
            ++v24;
          }
          ++v16;
          v15 = **a2;
          if (v16 >= ((*a2)[1] - v15) >> 4)
            goto LABEL_65;
        }
        v26 = *(_QWORD **)(a3 + 8);
        v25 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v26 >= v25)
        {
          v28 = *(_QWORD **)a3;
          v29 = ((uint64_t)v26 - *(_QWORD *)a3) >> 3;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61)
LABEL_83:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v31 = v25 - (_QWORD)v28;
          if (v31 >> 2 > v30)
            v30 = v31 >> 2;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v14, v32);
            v28 = *(_QWORD **)a3;
            v26 = *(_QWORD **)(a3 + 8);
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[8 * v29];
          *(_QWORD *)v34 = 0;
          v27 = v34 + 8;
          while (v26 != v28)
          {
            v35 = *--v26;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          *(_QWORD *)a3 = v34;
          *(_QWORD *)(a3 + 8) = v27;
          *(_QWORD *)(a3 + 16) = &v33[8 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v26 = 0;
          v27 = v26 + 1;
        }
        *(_QWORD *)(a3 + 8) = v27;
        v24 = 1;
        goto LABEL_55;
      }
LABEL_65:
      v55 = *a1;
      v57 = *(_QWORD **)(a3 + 8);
      v56 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v57 >= v56)
      {
        v59 = *(_QWORD **)a3;
        v60 = ((uint64_t)v57 - *(_QWORD *)a3) >> 3;
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 61)
          goto LABEL_83;
        v62 = v56 - (_QWORD)v59;
        if (v62 >> 2 > v61)
          v61 = v62 >> 2;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
        {
          v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v14, v63);
          v59 = *(_QWORD **)a3;
          v57 = *(_QWORD **)(a3 + 8);
        }
        else
        {
          v64 = 0;
        }
        v65 = &v64[8 * v60];
        *(_QWORD *)v65 = *(_QWORD *)(v55 + 8 * v13);
        v58 = v65 + 8;
        while (v57 != v59)
        {
          v66 = *--v57;
          *((_QWORD *)v65 - 1) = v66;
          v65 -= 8;
        }
        *(_QWORD *)a3 = v65;
        *(_QWORD *)(a3 + 8) = v58;
        *(_QWORD *)(a3 + 16) = &v64[8 * v63];
        if (v59)
          operator delete(v59);
      }
      else
      {
        *v57 = *(_QWORD *)(v55 + 8 * v13);
        v58 = v57 + 1;
      }
      ++v13;
      *(_QWORD *)(a3 + 8) = v58;
      v12 = v68 + 1;
    }
    while (v68 + 1 != v67);
  }
}

void turi::export_linear_svm_as_model_asset(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const void **v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  const std::string *v12;
  CoreML::Pipeline *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::vector<std::string>::size_type v27;
  uint64_t v28;
  char *v29;
  std::string::size_type *v30;
  std::vector<std::string>::pointer begin;
  std::string::size_type v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  const std::string *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  __int128 v100;
  void *v101[3];
  char v102;
  __int128 v103;
  void *v104[3];
  char v105;
  char v106[8];
  void *v107;
  char v108;
  __int128 v109;
  char v110[8];
  void *v111;
  char v112;
  __int128 v113;
  char v114[8];
  void *v115;
  char v116;
  void *v117;
  void *v118;
  _QWORD *v119;
  const CoreML::Specification::FeatureType *v120;
  std::__shared_weak_count *v121;
  char v122[8];
  void *v123;
  char v124;
  char v125[8];
  void *v126;
  char v127;
  __int128 v128;
  char v129[8];
  void *v130;
  char v131;
  char v132[8];
  void *v133;
  char v134;
  std::vector<std::string> v135;
  char v136[8];
  void *__p;
  char v138;
  uint64_t *v139;
  std::__shared_weak_count *v140;
  uint64_t *v141;
  std::__shared_weak_count *v142;
  std::string v143;
  uint64_t v144[3];
  __int128 v145;
  std::string v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  v8 = *(const void ***)(*a1 + 24);
  if (*((char *)v8 + 23) >= 0)
    v9 = *((unsigned __int8 *)v8 + 23);
  else
    v9 = (size_t)v8[1];
  v10 = &v146;
  std::string::basic_string[abi:ne180100]((uint64_t)&v146, v9 + 11);
  if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v146.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*((char *)v8 + 23) >= 0)
      v11 = v8;
    else
      v11 = *v8;
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "Probability");
  v12 = *(const std::string **)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v143, "");
  CoreML::Pipeline::Classifier(v12, &v146, &v143, v144);
  std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>((const CoreML::Model *)v144, &v145);
  CoreML::Pipeline::~Pipeline((CoreML::Pipeline *)v144);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  v13 = (CoreML::Pipeline *)v145;
  v14 = (std::__shared_weak_count *)a1[1];
  v141 = (uint64_t *)*a1;
  v142 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  turi::setup_pipeline_from_mldata(v13, &v141);
  v17 = v142;
  if (v142)
  {
    v18 = (unint64_t *)&v142->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(_QWORD *)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v143, "Linear SVM");
  CoreML::LogisticModel::LogisticModel(v144, v20, &v146, &v143);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  memset(&v143, 0, sizeof(v143));
  v21 = (std::__shared_weak_count *)a1[1];
  v139 = (uint64_t *)*a1;
  v140 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  turi::supervised::get_one_hot_encoded_coefs(a2, &v139, (uint64_t)&v143);
  v24 = v140;
  if (v140)
  {
    v25 = (unint64_t *)&v140->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(_QWORD *)(*(_QWORD *)(*a1 + 24) + 64);
  v28 = *(_QWORD *)(v143.__r_.__value_.__l.__size_ - 8);
  v29 = (char *)operator new(8uLL);
  v135.__begin_ = (std::vector<std::string>::pointer)v29;
  *(_QWORD *)v29 = v28;
  v135.__end_ = (std::vector<std::string>::pointer)(v29 + 8);
  v135.__end_cap_.__value_ = (std::string *)(v29 + 8);
  CoreML::LogisticModel::setOffsets((uint64_t)v144, (uint64_t **)&v135, (CoreML::Result *)v136);
  if (v138 < 0)
    operator delete(__p);
  if (v135.__begin_)
  {
    v135.__end_ = v135.__begin_;
    operator delete(v135.__begin_);
  }
  v143.__r_.__value_.__l.__size_ -= 8;
  v148 = 0uLL;
  v149 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v148, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_, (uint64_t)(v143.__r_.__value_.__l.__size_ - v143.__r_.__value_.__r.__words[0]) >> 3);
  memset(&v135, 0, sizeof(v135));
  *(_QWORD *)&v147 = &v135;
  BYTE8(v147) = 0;
  v135.__begin_ = (std::vector<std::string>::pointer)operator new(0x18uLL);
  v135.__end_ = v135.__begin_;
  v135.__end_cap_.__value_ = v135.__begin_ + 1;
  v135.__end_ = (std::vector<std::string>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double> const*,std::vector<double> const*,std::vector<double>*>((uint64_t)&v135.__end_cap_, (uint64_t)&v148, (uint64_t)&v150, v135.__begin_->__r_.__value_.__r.__words);
  CoreML::LogisticModel::setWeights((uint64_t)v144, (uint64_t *)&v135, (CoreML::Result *)v132);
  if (v134 < 0)
    operator delete(v133);
  *(_QWORD *)&v147 = &v135;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
  if ((_QWORD)v148)
  {
    *((_QWORD *)&v148 + 1) = v148;
    operator delete((void *)v148);
  }
  CoreML::FeatureType::Double((uint64_t *)&v148);
  CoreML::FeatureType::Double((uint64_t *)&v147);
  if (*(_BYTE *)(*(_QWORD *)(*a1 + 24) + 28) == 2)
  {
    std::vector<std::string>::vector(&v135, v27);
    if (v27)
    {
      v47 = 0;
      v48 = 0;
      do
      {
        std::string::operator=(&v135.__begin_[v47], (const std::string *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 24) + 32) + 80) + v48) + 8));
        v48 += 16;
        ++v47;
        --v27;
      }
      while (v27);
    }
    CoreML::LogisticModel::setClassNames((uint64_t)v144, &v135, (CoreML::Result *)v125);
    if (v127 < 0)
      operator delete(v126);
    CoreML::FeatureType::String((uint64_t *)&v128);
    v49 = v128;
    v128 = 0uLL;
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
    v148 = v49;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    if (*((_QWORD *)&v128 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    CoreML::FeatureType::Dictionary(2, (uint64_t *)&v128);
    v56 = v128;
    v128 = 0uLL;
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    v147 = v56;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    if (*((_QWORD *)&v128 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    *(_QWORD *)&v128 = &v135;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(*a1 + 24) + 28))
      turi::export_linear_svm_as_model_asset(std::shared_ptr<turi::ml_metadata> const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&)::$_0::operator()();
    std::vector<long long>::vector(&v135, v27);
    if (v27)
    {
      v30 = *(std::string::size_type **)(*(_QWORD *)(*(_QWORD *)(*a1 + 24) + 32) + 80);
      begin = v135.__begin_;
      do
      {
        v32 = *v30;
        v30 += 2;
        begin->__r_.__value_.__r.__words[0] = v32;
        begin = (std::vector<std::string>::pointer)((char *)begin + 8);
        --v27;
      }
      while (v27);
    }
    CoreML::LogisticModel::setClassNames((uint64_t)v144, (uint64_t *)&v135, (CoreML::Result *)v129);
    if (v131 < 0)
      operator delete(v130);
    CoreML::FeatureType::Int64((uint64_t *)&v128);
    v33 = v128;
    v128 = 0uLL;
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
    v148 = v33;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    if (*((_QWORD *)&v128 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    CoreML::FeatureType::Dictionary(1, (uint64_t *)&v128);
    v40 = v128;
    v128 = 0uLL;
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    v147 = v40;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    if (*((_QWORD *)&v128 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v135.__begin_)
    {
      v135.__end_ = v135.__begin_;
      operator delete(v135.__begin_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v135, "__vectorized_features__");
  v63 = *(_QWORD *)(*a1 + 64);
  v64 = operator new(8uLL);
  v117 = v64;
  *v64 = v63;
  v118 = v64 + 1;
  v119 = v64 + 1;
  CoreML::FeatureType::Array((uint64_t)&v117, (uint64_t *)&v120);
  CoreML::Model::addInput((uint64_t)v144, (const std::string *)&v135, &v120, (CoreML::Result *)v122);
  if (v124 < 0)
    operator delete(v123);
  v65 = v121;
  if (v121)
  {
    v66 = (unint64_t *)&v121->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  if (SHIBYTE(v135.__end_cap_.__value_) < 0)
    operator delete(v135.__begin_);
  v68 = *(const std::string **)(*a1 + 24);
  v113 = v148;
  if (*((_QWORD *)&v148 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  CoreML::Model::addOutput((uint64_t)v144, v68, (const CoreML::Specification::FeatureType **)&v113, (CoreML::Result *)v114);
  if (v116 < 0)
    operator delete(v115);
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v109 = v147;
  if (*((_QWORD *)&v147 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  CoreML::Model::addOutput((uint64_t)v144, &v146, (const CoreML::Specification::FeatureType **)&v109, (CoreML::Result *)v110);
  if (v112 < 0)
    operator delete(v111);
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  CoreML::Pipeline::add((CoreML::Pipeline *)v145, (const CoreML::Model *)v144, (CoreML::Result *)v106);
  if (v108 < 0)
    operator delete(v107);
  v79 = v145;
  v103 = v148;
  if (*((_QWORD *)&v148 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v79 + 24))(v104);
  if (v105 < 0)
    operator delete(v104[1]);
  if (*((_QWORD *)&v103 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v103 + 1) + 16))(*((_QWORD *)&v103 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v103 + 1));
    }
  }
  v84 = v145;
  v100 = v147;
  if (*((_QWORD *)&v147 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  (*(void (**)(void **__return_ptr, uint64_t, std::string *, __int128 *))(*(_QWORD *)v84 + 24))(v101, v84, &v146, &v100);
  if (v102 < 0)
    operator delete(v101[1]);
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v145);
  turi::add_metadata(v90, a3);
  std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Pipeline>,void>(&v145, a4);
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v143.__r_.__value_.__r.__words[0])
  {
    v143.__r_.__value_.__l.__size_ = v143.__r_.__value_.__r.__words[0];
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  CoreML::Model::~Model((CoreML::Model *)v144);
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
}

void sub_21846BBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t p_p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p)
{
  uint64_t v61;
  void *v63;

  p_p = (uint64_t)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v61 - 112);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v61 - 96);
  v63 = *(void **)(v61 - 200);
  if (v63)
  {
    *(_QWORD *)(v61 - 192) = v63;
    operator delete(v63);
  }
  CoreML::Model::~Model((CoreML::Model *)(v61 - 176));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v61 - 152);
  if (*(char *)(v61 - 113) < 0)
    operator delete(*(void **)(v61 - 136));
  _Unwind_Resume(a1);
}

void turi::export_logistic_model_as_model_asset(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const void **v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  const std::string *v10;
  CoreML::Pipeline *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  _QWORD *v32;
  _QWORD **v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  std::vector<std::string>::size_type v56;
  std::string::size_type *v57;
  std::vector<std::string>::pointer begin;
  std::string::size_type v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  const std::string *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::vector<std::string>::size_type __n;
  _QWORD *v130;
  unint64_t v131;
  std::vector<std::string>::size_type v132;
  __int128 v133;
  void *v134[3];
  char v135;
  __int128 v136;
  void *v137[3];
  char v138;
  char v139[8];
  void *v140;
  char v141;
  __int128 v142;
  char v143[8];
  void *v144;
  char v145;
  __int128 v146;
  char v147[8];
  void *v148;
  char v149;
  void *v150;
  void *v151;
  _QWORD *v152;
  const CoreML::Specification::FeatureType *v153;
  std::__shared_weak_count *v154;
  char v155[8];
  void *v156;
  char v157;
  char v158[8];
  void *v159;
  char v160;
  __int128 v161;
  char v162[8];
  void *v163;
  char v164;
  __int128 v165;
  __int128 v166;
  char v167[8];
  void *v168;
  char v169;
  char v170[8];
  void *v171;
  char v172;
  std::vector<std::string> __p;
  uint64_t v174[3];
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  std::__shared_weak_count *v179;
  uint64_t *v180;
  std::__shared_weak_count *v181;
  std::string v182;
  uint64_t v183[3];
  __int128 v184;
  std::string v185;

  v6 = *(const void ***)(*a1 + 24);
  if (*((char *)v6 + 23) >= 0)
    v7 = *((unsigned __int8 *)v6 + 23);
  else
    v7 = (size_t)v6[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&v185, v7 + 11);
  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v185;
  else
    v8 = (std::string *)v185.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)v6 + 23) >= 0)
      v9 = v6;
    else
      v9 = *v6;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "Probability");
  v10 = *(const std::string **)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v182, "");
  CoreML::Pipeline::Classifier(v10, &v185, &v182, v183);
  std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>((const CoreML::Model *)v183, &v184);
  CoreML::Pipeline::~Pipeline((CoreML::Pipeline *)v183);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  v11 = (CoreML::Pipeline *)v184;
  v12 = (std::__shared_weak_count *)a1[1];
  v180 = (uint64_t *)*a1;
  v181 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  turi::setup_pipeline_from_mldata(v11, &v180);
  v15 = v181;
  if (v181)
  {
    v16 = (unint64_t *)&v181->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_QWORD *)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v182, "Logistic Regression");
  CoreML::LogisticModel::LogisticModel(v183, v18, &v185, &v182);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  memset(&v182, 0, sizeof(v182));
  v19 = (std::__shared_weak_count *)a1[1];
  v178 = (uint64_t *)*a1;
  v179 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  turi::supervised::get_one_hot_encoded_coefs(a2, &v178, (uint64_t)&v182);
  v22 = v179;
  if (v179)
  {
    v23 = (unint64_t *)&v179->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v175 = 0;
  v176 = 0;
  v177 = 0;
  memset(v174, 0, sizeof(v174));
  __n = *(_QWORD *)(*(_QWORD *)(*a1 + 24) + 64);
  v130 = a1;
  v132 = __n - 1;
  if (__n != 1)
  {
    v25 = 0;
    v131 = ((uint64_t)(v182.__r_.__value_.__l.__size_ - v182.__r_.__value_.__r.__words[0]) >> 3) / v132;
    v26 = v131 - 1;
    do
    {
      memset(&__p, 0, sizeof(__p));
      std::vector<std::vector<double>>::push_back[abi:ne180100](v174, (uint64_t)&__p);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      v27 = v25 * v131;
      if (v131 != 1)
      {
        v28 = 0;
        do
        {
          v29 = v174[0] + 24 * v25;
          v30 = v28 + v27;
          v31 = v182.__r_.__value_.__r.__words[0];
          v33 = (_QWORD **)(v29 + 8);
          v32 = *(_QWORD **)(v29 + 8);
          v35 = (_QWORD *)(v29 + 16);
          v34 = *(_QWORD *)(v29 + 16);
          if ((unint64_t)v32 >= v34)
          {
            v37 = *(_QWORD **)v29;
            v38 = ((uint64_t)v32 - *(_QWORD *)v29) >> 3;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v40 = v34 - (_QWORD)v37;
            if (v40 >> 2 > v39)
              v39 = v40 >> 2;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
              v41 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v35, v41);
              v32 = *v33;
              v37 = *(_QWORD **)v29;
            }
            else
            {
              v42 = 0;
            }
            v43 = &v42[8 * v38];
            *(_QWORD *)v43 = *(_QWORD *)(v31 + 8 * v30);
            v36 = v43 + 8;
            while (v32 != v37)
            {
              v44 = *--v32;
              *((_QWORD *)v43 - 1) = v44;
              v43 -= 8;
            }
            *(_QWORD *)v29 = v43;
            *v33 = v36;
            *v35 = &v42[8 * v41];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *v32 = *(_QWORD *)(v182.__r_.__value_.__r.__words[0] + 8 * v30);
            v36 = v32 + 1;
          }
          *v33 = v36;
          ++v28;
        }
        while (v28 != v26);
      }
      v45 = *(_QWORD *)(v182.__r_.__value_.__r.__words[0] + 8 * (v26 + v27));
      v46 = v176;
      if (v176 >= v177)
      {
        v48 = v175;
        v49 = v176 - v175;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v51 = (char *)v177 - (char *)v175;
        if (((char *)v177 - (char *)v175) >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v177, v52);
          v48 = v175;
          v46 = v176;
        }
        else
        {
          v53 = 0;
        }
        v54 = (uint64_t *)&v53[8 * v49];
        *v54 = v45;
        v47 = v54 + 1;
        while (v46 != v48)
        {
          v55 = *--v46;
          *--v54 = v55;
        }
        v175 = v54;
        v176 = v47;
        v177 = (uint64_t *)&v53[8 * v52];
        if (v48)
          operator delete(v48);
      }
      else
      {
        *v176 = v45;
        v47 = v46 + 1;
      }
      v176 = v47;
      ++v25;
    }
    while (v25 != v132);
  }
  CoreML::LogisticModel::setWeights((uint64_t)v183, v174, (CoreML::Result *)v170);
  if (v172 < 0)
    operator delete(v171);
  CoreML::LogisticModel::setOffsets((uint64_t)v183, &v175, (CoreML::Result *)v167);
  if (v169 < 0)
    operator delete(v168);
  CoreML::FeatureType::Double((uint64_t *)&v166);
  CoreML::FeatureType::Double((uint64_t *)&v165);
  v56 = __n;
  if (*(_BYTE *)(*(_QWORD *)(*v130 + 24) + 28) == 2)
  {
    std::vector<std::string>::vector(&__p, __n);
    if (__n)
    {
      v74 = 0;
      v75 = 0;
      do
      {
        std::string::operator=(&__p.__begin_[v74], (const std::string *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v130 + 24) + 32) + 80) + v75)+ 8));
        v75 += 16;
        ++v74;
        --v56;
      }
      while (v56);
    }
    CoreML::LogisticModel::setClassNames((uint64_t)v183, &__p, (CoreML::Result *)v158);
    if (v160 < 0)
      operator delete(v159);
    CoreML::FeatureType::String((uint64_t *)&v161);
    v76 = v161;
    v161 = 0uLL;
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    v166 = v76;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v81 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    CoreML::FeatureType::Dictionary(2, (uint64_t *)&v161);
    v83 = v161;
    v161 = 0uLL;
    v84 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
    v165 = v83;
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v88 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    *(_QWORD *)&v161 = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(*v130 + 24) + 28))
      turi::export_logistic_model_as_model_asset(std::shared_ptr<turi::ml_metadata> const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&)::$_0::operator()();
    std::vector<long long>::vector(&__p, __n);
    if (__n)
    {
      v57 = *(std::string::size_type **)(*(_QWORD *)(*(_QWORD *)(*v130 + 24) + 32) + 80);
      begin = __p.__begin_;
      do
      {
        v59 = *v57;
        v57 += 2;
        begin->__r_.__value_.__r.__words[0] = v59;
        begin = (std::vector<std::string>::pointer)((char *)begin + 8);
        --v56;
      }
      while (v56);
    }
    CoreML::LogisticModel::setClassNames((uint64_t)v183, (uint64_t *)&__p, (CoreML::Result *)v162);
    if (v164 < 0)
      operator delete(v163);
    CoreML::FeatureType::Int64((uint64_t *)&v161);
    v60 = v161;
    v161 = 0uLL;
    v61 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    v166 = v60;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    CoreML::FeatureType::Dictionary(1, (uint64_t *)&v161);
    v67 = v161;
    v161 = 0uLL;
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
    v165 = v67;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "__vectorized_features__");
  v90 = *(_QWORD *)(*v130 + 64);
  v91 = operator new(8uLL);
  v150 = v91;
  *v91 = v90;
  v151 = v91 + 1;
  v152 = v91 + 1;
  CoreML::FeatureType::Array((uint64_t)&v150, (uint64_t *)&v153);
  CoreML::Model::addInput((uint64_t)v183, (const std::string *)&__p, &v153, (CoreML::Result *)v155);
  if (v157 < 0)
    operator delete(v156);
  v92 = v154;
  if (v154)
  {
    v93 = (unint64_t *)&v154->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  v95 = *(const std::string **)(*v130 + 24);
  v146 = v166;
  if (*((_QWORD *)&v166 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  CoreML::Model::addOutput((uint64_t)v183, v95, (const CoreML::Specification::FeatureType **)&v146, (CoreML::Result *)v147);
  if (v149 < 0)
    operator delete(v148);
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
  if (*((_QWORD *)&v146 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v142 = v165;
  if (*((_QWORD *)&v165 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  CoreML::Model::addOutput((uint64_t)v183, &v185, (const CoreML::Specification::FeatureType **)&v142, (CoreML::Result *)v143);
  if (v145 < 0)
    operator delete(v144);
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  CoreML::Pipeline::add((CoreML::Pipeline *)v184, (const CoreML::Model *)v183, (CoreML::Result *)v139);
  if (v141 < 0)
    operator delete(v140);
  v106 = v184;
  v136 = v166;
  if (*((_QWORD *)&v166 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v106 + 24))(v137);
  if (v138 < 0)
    operator delete(v137[1]);
  if (*((_QWORD *)&v136 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
    }
  }
  v111 = v184;
  v133 = v165;
  if (*((_QWORD *)&v165 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
  }
  (*(void (**)(void **__return_ptr, uint64_t, std::string *, __int128 *))(*(_QWORD *)v111 + 24))(v134, v111, &v185, &v133);
  if (v135 < 0)
    operator delete(v134[1]);
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v184);
  turi::add_metadata(v117, a3);
  std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Pipeline>,void>(&v184, a4);
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  __p.__begin_ = (std::vector<std::string>::pointer)v174;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v182.__r_.__value_.__r.__words[0])
  {
    v182.__r_.__value_.__l.__size_ = v182.__r_.__value_.__r.__words[0];
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  CoreML::Model::~Model((CoreML::Model *)v183);
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
}

void sub_21846C9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a65;
  uint64_t v65;
  void *v67;
  void *v68;

  a57 = (uint64_t)&STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  STACK[0x210] = (unint64_t)&STACK[0x228];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  v67 = *(void **)(v65 - 256);
  if (v67)
  {
    *(_QWORD *)(v65 - 248) = v67;
    operator delete(v67);
  }
  v68 = *(void **)(v65 - 200);
  if (v68)
  {
    *(_QWORD *)(v65 - 192) = v68;
    operator delete(v68);
  }
  CoreML::Model::~Model((CoreML::Model *)(v65 - 176));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v65 - 152);
  if (*(char *)(v65 - 113) < 0)
    operator delete(*(void **)(v65 - 136));
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_21846CCC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21846CE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>@<X0>(const CoreML::Model *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<CoreML::Pipeline>::__shared_ptr_emplace[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21846CF48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CoreML::Pipeline>::__shared_ptr_emplace[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,0>(_QWORD *a1, const CoreML::Model *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D9425B0;
  a1[1] = 0;
  CoreML::Model::Model(a1 + 3, a2);
  a1[3] = &off_24D94D6E0;
  return a1;
}

void sub_21846CFA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Pipeline>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9425B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Pipeline>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9425B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<CoreML::Pipeline>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double> const*,std::vector<double> const*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_21846D0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Pipeline>,void>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x108uLL);
  std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<CoreML::Model>,std::allocator<turi::coreml::MLModelWrapper>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_21846D140(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_8_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_linear_models_exporter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_string_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::setup_pipeline_from_mldata(CoreML::Pipeline *a1, uint64_t **a2)
{
  uint64_t v3;
  unint64_t v4;
  std::string::size_type v5;
  __int128 **v6;
  __int128 *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 **v29;
  __int128 *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 **v78;
  __int128 *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  uint64_t *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::vector<std::string>::size_type v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  _QWORD *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::string *v116;
  __int128 v117;
  uint64_t *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::vector<std::string>::size_type v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  turi::flexible_type_impl *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  uint64_t *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t size;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  char **v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int v182;
  __int128 v183;
  __int128 v184;
  uint64_t *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  void **v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  int v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  turi::flexible_type_impl *v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  unint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  char **v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  uint64_t *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t *v313;
  uint64_t v314;
  _QWORD *v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::runtime_error *exception;
  std::string *v320;
  __int128 v321;
  std::runtime_error *v322;
  std::string *v323;
  __int128 v324;
  uint64_t v325;
  std::string::size_type v327;
  std::string::size_type v328;
  char v329[8];
  void *v330;
  char v331;
  void *v332;
  void *v333;
  _QWORD *v334;
  const CoreML::Specification::FeatureType *v335;
  std::__shared_weak_count *v336;
  char v337[8];
  void *v338;
  char v339;
  char v340[8];
  void *v341;
  char v342;
  __int128 v343;
  char v344[8];
  void *v345;
  char v346;
  char v347[8];
  void *v348;
  char v349;
  __int128 v350;
  char v351[8];
  void *v352;
  char v353;
  __int128 v354;
  char v355[8];
  void *v356;
  char v357;
  __int128 v358;
  char v359[8];
  void *v360;
  char v361;
  __int128 v362;
  void *v363[3];
  char v364;
  __int128 v365;
  char v366[8];
  void *v367;
  char v368;
  char v369[8];
  void *v370;
  char v371;
  void *v372;
  std::__shared_weak_count *v373;
  char v374[8];
  void *v375;
  char v376;
  size_t __idx;
  std::__shared_weak_count *v378;
  char v379[8];
  _BYTE v380[24];
  const CoreML::Specification::FeatureType *v381;
  std::__shared_weak_count *v382;
  char v383[8];
  void *v384;
  char v385;
  char v386[8];
  void *v387;
  char v388;
  uint64_t v389;
  std::__shared_weak_count *v390;
  void *v391[3];
  char v392;
  const CoreML::Specification::FeatureType *v393;
  std::__shared_weak_count *v394;
  char v395[8];
  void *v396;
  char v397;
  const CoreML::Specification::FeatureType *v398;
  std::__shared_weak_count *v399;
  char v400[8];
  void *v401;
  char v402;
  char v403[8];
  _BYTE v404[24];
  const CoreML::Specification::FeatureType *v405;
  std::__shared_weak_count *v406;
  char v407[8];
  void *v408;
  char v409;
  char v410[8];
  void *v411;
  char v412;
  uint64_t v413;
  std::__shared_weak_count *v414;
  void *v415[3];
  char v416;
  const CoreML::Specification::FeatureType *v417;
  std::__shared_weak_count *v418;
  char v419[8];
  void *v420;
  char v421;
  const CoreML::Specification::FeatureType *v422;
  std::__shared_weak_count *v423;
  char v424[8];
  void *v425;
  char v426;
  char v427[8];
  void *v428;
  char v429;
  char v430[8];
  void *v431;
  char v432;
  char v433[8];
  void *v434;
  char v435;
  void *v436;
  _QWORD *v437;
  uint64_t v438;
  char v439[8];
  void *v440;
  char v441;
  _BYTE v442[24];
  std::string v443;
  char v444[8];
  void *v445;
  char v446;
  void *v447;
  void *v448;
  uint64_t v449;
  const CoreML::Specification::FeatureType *v450;
  std::__shared_weak_count *v451;
  char v452[8];
  void *v453;
  char v454;
  void *v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  std::__shared_weak_count *v459;
  void *v460[3];
  char v461;
  char v462[8];
  void *v463;
  char v464;
  void *v465;
  void *v466;
  _QWORD *v467;
  const CoreML::Specification::FeatureType *v468;
  std::__shared_weak_count *v469;
  char v470[8];
  void *v471;
  char v472;
  void *v473;
  void *v474;
  _QWORD *v475;
  uint64_t v476;
  std::__shared_weak_count *v477;
  void *v478[3];
  char v479;
  char v480[8];
  void *v481;
  char v482;
  const CoreML::Specification::FeatureType *v483;
  std::__shared_weak_count *v484;
  char v485[8];
  void *v486;
  char v487;
  uint64_t v488;
  std::__shared_weak_count *v489;
  void *v490[3];
  char v491;
  std::string v492;
  _BYTE v493[24];
  std::string __p;
  uint64_t v495;
  void *v496;
  void *v497;
  void *v498;
  char v499;
  _BYTE v500[152];
  _BYTE v501[32];
  __int128 v502;
  __int128 v503;
  size_t v504;
  std::string v505;

  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  CoreML::FeatureVectorizer::FeatureVectorizer((CoreML::Model *)v493, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v3 = **a2;
  if ((*a2)[1] != v3)
  {
    v4 = 0;
    v5 = *MEMORY[0x24BEDB7F0];
    v327 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v328 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v325 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v6 = (__int128 **)(v3 + 16 * v4);
      v7 = *v6;
      v8 = (std::__shared_weak_count *)v6[1];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v492, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v12 = *v7;
        v492.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v492.__r_.__value_.__l.__data_ = v12;
      }
      v13 = (uint64_t *)(**a2 + 16 * v4);
      v14 = *v13;
      v15 = (std::__shared_weak_count *)v13[1];
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        v18 = *(_DWORD *)(v14 + 24);
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v18 = *(_DWORD *)(v14 + 24);
      }
      switch(v18)
      {
        case 0:
          CoreML::FeatureType::Double(&v488);
          (*(void (**)(void **__return_ptr, CoreML::Pipeline *, std::string *, uint64_t *))(*(_QWORD *)a1 + 16))(v490, a1, &v492, &v488);
          if (v491 < 0)
            operator delete(v490[1]);
          v36 = v489;
          if (v489)
          {
            v37 = (unint64_t *)&v489->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          CoreML::FeatureType::Double((uint64_t *)&v483);
          CoreML::Model::addInput((uint64_t)v493, &v492, &v483, (CoreML::Result *)v485);
          if (v487 < 0)
            operator delete(v486);
          v39 = v484;
          if (v484)
          {
            v40 = (unint64_t *)&v484->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          CoreML::FeatureVectorizer::add((uint64_t)v493, &v492, 1, (CoreML::Result *)v480);
          if ((v482 & 0x80000000) == 0)
            goto LABEL_552;
          v42 = v481;
          goto LABEL_348;
        case 1:
        case 6:
          v20 = (uint64_t *)(**a2 + 16 * v4);
          v21 = *v20;
          v22 = (std::__shared_weak_count *)v20[1];
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v26 = *(unint64_t **)(v21 + 40);
          v372 = *(void **)(v21 + 32);
          v373 = (std::__shared_weak_count *)v26;
          if (v26)
          {
            v27 = v26 + 1;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v29 = (__int128 **)(**a2 + 16 * v4);
          v30 = *v29;
          v31 = (std::__shared_weak_count *)v29[1];
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
            do
              v34 = __ldaxr(v32);
            while (__stlxr(v34 - 1, v32));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if (*((char *)v30 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v443, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
          }
          else
          {
            v35 = *v30;
            v443.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
            *(_OWORD *)&v443.__r_.__value_.__l.__data_ = v35;
          }
          std::to_string((std::string *)v501, v4);
          v85 = std::string::insert((std::string *)v501, 0, "One Hot Encoder on Column");
          v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          CoreML::OneHotEncoder::OneHotEncoder(v442, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v501[23] & 0x80000000) != 0)
            operator delete(*(void **)v501);
          v87 = (uint64_t *)(**a2 + 16 * v4);
          v88 = *v87;
          v89 = (std::__shared_weak_count *)v87[1];
          if (v89)
          {
            v90 = (unint64_t *)&v89->__shared_owners_;
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
            v92 = *(unsigned __int8 *)(v88 + 28);
            do
              v93 = __ldaxr(v90);
            while (__stlxr(v93 - 1, v90));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          else
          {
            v92 = *(unsigned __int8 *)(v88 + 28);
          }
          if (v92 == 2)
          {
            v94 = (uint64_t *)(**a2 + 16 * v4);
            v95 = *v94;
            v96 = (std::__shared_weak_count *)v94[1];
            if (v96)
            {
              v97 = (unint64_t *)&v96->__shared_owners_;
              do
                v98 = __ldxr(v97);
              while (__stxr(v98 + 1, v97));
              v99 = *(_QWORD *)(v95 + 64);
              do
                v100 = __ldaxr(v97);
              while (__stlxr(v100 - 1, v97));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
            else
            {
              v99 = *(_QWORD *)(v95 + 64);
            }
            std::vector<std::string>::vector((std::vector<std::string> *)v501, v99);
            v139 = 0;
            while (2)
            {
              v140 = (uint64_t *)(**a2 + 16 * v4);
              v141 = *v140;
              v142 = (std::__shared_weak_count *)v140[1];
              if (v142)
              {
                v143 = (unint64_t *)&v142->__shared_owners_;
                do
                  v144 = __ldxr(v143);
                while (__stxr(v144 + 1, v143));
                v145 = *(_QWORD *)(v141 + 64);
                do
                  v146 = __ldaxr(v143);
                while (__stlxr(v146 - 1, v143));
                if (!v146)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              else
              {
                v145 = *(_QWORD *)(v141 + 64);
              }
              if (v139 < v145)
              {
                v147 = (turi::flexible_type_impl *)(*((_QWORD *)v372 + 10) + 16 * v139);
                switch(*((_BYTE *)v147 + 12))
                {
                  case 0:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    __p.__r_.__value_.__r.__words[0] = v5;
                    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v5 - 24)) = v328;
                    __p.__r_.__value_.__r.__words[2] = v327;
                    v148 = v325;
                    goto LABEL_208;
                  case 1:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    __p.__r_.__value_.__r.__words[0] = v5;
                    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v5 - 24)) = v328;
                    v148 = MEMORY[0x24BEDB848] + 16;
                    __p.__r_.__value_.__r.__words[2] = v327;
LABEL_208:
                    v495 = v148;
                    if (v499 < 0)
                      operator delete(v498);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x219A198F4](v500);
                    goto LABEL_215;
                  case 2:
                    v149 = *(_QWORD *)v147;
                    if (*(char *)(*(_QWORD *)v147 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v505, *(const std::string::value_type **)(v149 + 8), *(_QWORD *)(v149 + 16));
                    }
                    else
                    {
                      v150 = *(_OWORD *)(v149 + 8);
                      v505.__r_.__value_.__r.__words[2] = *(_QWORD *)(v149 + 24);
                      *(_OWORD *)&v505.__r_.__value_.__l.__data_ = v150;
                    }
                    goto LABEL_215;
                  case 3:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v147 + 8));
                    goto LABEL_215;
                  case 4:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v147 + 8));
                    goto LABEL_215;
                  case 5:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v147 + 8));
                    goto LABEL_215;
                  case 6:
                    turi::flexible_type_impl::get_string_visitor::operator()(v147, &v505);
                    goto LABEL_215;
                  case 7:
                    memset(&v505, 0, sizeof(v505));
                    goto LABEL_215;
                  case 8:
                    turi::flexible_type_impl::get_string_visitor::operator()();
                    goto LABEL_215;
                  case 9:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v147 + 8));
LABEL_215:
                    v151 = *(_QWORD *)v501 + 24 * v139;
                    if (*(char *)(v151 + 23) < 0)
                      operator delete(*(void **)v151);
                    v152 = *(_OWORD *)&v505.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v151 + 16) = *((_QWORD *)&v505.__r_.__value_.__l + 2);
                    *(_OWORD *)v151 = v152;
                    ++v139;
                    continue;
                  default:
                    goto LABEL_569;
                }
              }
              break;
            }
            CoreML::OneHotEncoder::setFeatureEncoding((uint64_t)v442, (__int128 **)v501, (CoreML::Result *)v439);
            if (v441 < 0)
              operator delete(v440);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v501;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          }
          else
          {
            v101 = (uint64_t *)(**a2 + 16 * v4);
            v102 = *v101;
            v103 = (std::__shared_weak_count *)v101[1];
            if (v103)
            {
              v104 = (unint64_t *)&v103->__shared_owners_;
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
              v106 = *(unsigned __int8 *)(v102 + 28);
              do
                v107 = __ldaxr(v104);
              while (__stlxr(v107 - 1, v104));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            else
            {
              v106 = *(unsigned __int8 *)(v102 + 28);
            }
            if (v106)
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v443;
              turi::setup_pipeline_from_mldata(CoreML::Pipeline &,std::shared_ptr<turi::ml_metadata>)::$_0::operator()();
            }
            v153 = (uint64_t *)(**a2 + 16 * v4);
            v154 = *v153;
            v155 = (std::__shared_weak_count *)v153[1];
            if (v155)
            {
              v156 = (unint64_t *)&v155->__shared_owners_;
              do
                v157 = __ldxr(v156);
              while (__stxr(v157 + 1, v156));
              v158 = *(_QWORD *)(v154 + 64);
              do
                v159 = __ldaxr(v156);
              while (__stlxr(v159 - 1, v156));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            else
            {
              v158 = *(_QWORD *)(v154 + 64);
            }
            std::vector<long long>::vector(&v436, v158);
            v160 = 0;
            while (1)
            {
              v161 = (uint64_t *)(**a2 + 16 * v4);
              v162 = *v161;
              v163 = (std::__shared_weak_count *)v161[1];
              if (v163)
              {
                v164 = (unint64_t *)&v163->__shared_owners_;
                do
                  v165 = __ldxr(v164);
                while (__stxr(v165 + 1, v164));
                v166 = *(_QWORD *)(v162 + 64);
                do
                  v167 = __ldaxr(v164);
                while (__stlxr(v167 - 1, v164));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
              }
              else
              {
                v166 = *(_QWORD *)(v162 + 64);
              }
              if (v160 >= v166)
                break;
              v168 = *((_QWORD *)v372 + 10) + 16 * v160;
              size = 0;
              switch(*(_BYTE *)(v168 + 12))
              {
                case 0:
                  size = *(_QWORD *)v168;
                  goto LABEL_269;
                case 1:
                  size = (uint64_t)*(double *)v168;
                  goto LABEL_269;
                case 2:
                  v173 = *(_QWORD *)v168;
                  v174 = (char **)(*(_QWORD *)v168 + 8);
                  __idx = 0;
                  v175 = (char *)v174;
                  if (*(char *)(v173 + 31) < 0)
                    v175 = *v174;
                  std::string::basic_string[abi:ne180100]<0>(&__p, v175);
                  size = std::stoll(&__p, &__idx, 10);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (*(char *)(v173 + 31) < 0)
                    v176 = *(_QWORD *)(v173 + 16);
                  else
                    v176 = *(unsigned __int8 *)(v173 + 31);
                  if (__idx != v176)
                  {
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    v320 = std::string::append(&v505, " cannot be interpreted as an integer");
                    v321 = *(_OWORD *)&v320->__r_.__value_.__l.__data_;
                    __p.__r_.__value_.__r.__words[2] = v320->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v321;
                    v320->__r_.__value_.__l.__size_ = 0;
                    v320->__r_.__value_.__r.__words[2] = 0;
                    v320->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(exception, &__p);
                    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                  }
                  goto LABEL_269;
                case 3:
                  v170 = *(_QWORD *)v168;
                  memset(&__p, 0, sizeof(__p));
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v170 + 8), *(_QWORD *)(v170 + 16), (uint64_t)(*(_QWORD *)(v170 + 16) - *(_QWORD *)(v170 + 8)) >> 3);
                  turi::flexible_type_fail(0);
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_268;
                case 4:
                  v177 = *(_QWORD *)v168;
                  memset(&__p, 0, sizeof(__p));
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v177 + 8), *(uint64_t **)(v177 + 16), (uint64_t)(*(_QWORD *)(v177 + 16) - *(_QWORD *)(v177 + 8)) >> 4);
                  turi::flexible_type_fail(0);
                  v505.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v505);
                  goto LABEL_268;
                case 5:
                  v178 = *(_QWORD *)v168;
                  memset(&__p, 0, sizeof(__p));
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v178 + 8), *(uint64_t **)(v178 + 16), (uint64_t)(*(_QWORD *)(v178 + 16) - *(_QWORD *)(v178 + 8)) >> 5);
                  turi::flexible_type_fail(0);
                  v505.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v505);
                  goto LABEL_268;
                case 6:
                  size = (uint64_t)(*(_QWORD *)v168 << 8) >> 8;
                  goto LABEL_269;
                case 7:
                  goto LABEL_269;
                case 8:
                  v179 = *(_QWORD *)v168;
                  v180 = *(_QWORD *)(v179 + 16);
                  *(_QWORD *)v501 = *(_QWORD *)(v179 + 8);
                  *(_QWORD *)&v501[8] = v180;
                  if (v180)
                  {
                    v181 = (unsigned int *)(v180 + 8);
                    do
                      v182 = __ldxr(v181);
                    while (__stxr(v182 + 1, v181));
                  }
                  v183 = *(_OWORD *)(v179 + 24);
                  v184 = *(_OWORD *)(v179 + 56);
                  v502 = *(_OWORD *)(v179 + 40);
                  v503 = v184;
                  *(_OWORD *)&v501[16] = v183;
                  turi::flexible_type_fail(0);
                  boost::detail::shared_count::~shared_count((unsigned int **)&v501[8]);
                  goto LABEL_268;
                case 9:
                  turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v168 + 8);
                  turi::flexible_type_fail(0);
                  if (v496)
                  {
                    v497 = v496;
                    operator delete(v496);
                  }
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    v495 = __p.__r_.__value_.__r.__words[2];
                    operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                  }
                  size = __p.__r_.__value_.__l.__size_;
                  if (!__p.__r_.__value_.__l.__size_)
                    goto LABEL_269;
                  v171 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                  do
                    v172 = __ldaxr(v171);
                  while (__stlxr(v172 - 1, v171));
                  if (!v172)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)size + 16))(size);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
                  }
LABEL_268:
                  size = 0;
LABEL_269:
                  *((_QWORD *)v436 + v160++) = size;
                  break;
                default:
                  goto LABEL_569;
              }
            }
            CoreML::OneHotEncoder::setFeatureEncoding((uint64_t)v442, (uint64_t **)&v436, (CoreML::Result *)v433);
            if (v435 < 0)
              operator delete(v434);
            if (v436)
            {
              v437 = v436;
              operator delete(v436);
            }
          }
          CoreML::OneHotEncoder::setHandleUnknown((uint64_t)v442, 1, (CoreML::Result *)v430);
          if (v432 < 0)
            operator delete(v431);
          CoreML::OneHotEncoder::setUseSparse((CoreML::OneHotEncoder *)v442, 1, (CoreML::Result *)v427);
          if (v429 < 0)
            operator delete(v428);
          v185 = (uint64_t *)(**a2 + 16 * v4);
          v186 = *v185;
          v187 = (std::__shared_weak_count *)v185[1];
          if (v187)
          {
            v188 = (unint64_t *)&v187->__shared_owners_;
            do
              v189 = __ldxr(v188);
            while (__stxr(v189 + 1, v188));
            v190 = *(_QWORD *)(v186 + 64);
            do
              v191 = __ldaxr(v188);
            while (__stlxr(v191 - 1, v188));
            if (!v191)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
          else
          {
            v190 = *(_QWORD *)(v186 + 64);
          }
          v192 = (uint64_t *)(**a2 + 16 * v4);
          v193 = *v192;
          v194 = (std::__shared_weak_count *)v192[1];
          if (v194)
          {
            v195 = (unint64_t *)&v194->__shared_owners_;
            do
              v196 = __ldxr(v195);
            while (__stxr(v196 + 1, v195));
            v197 = *(unsigned __int8 *)(v193 + 28);
            do
              v198 = __ldaxr(v195);
            while (__stlxr(v198 - 1, v195));
            if (!v198)
            {
              ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
              std::__shared_weak_count::__release_weak(v194);
            }
          }
          else
          {
            v197 = *(unsigned __int8 *)(v193 + 28);
          }
          if (v197 == 2)
          {
            CoreML::FeatureType::String((uint64_t *)&v422);
            CoreML::OneHotEncoder::addInput((uint64_t)v442, &v443, &v422, (uint64_t)v424);
            if (v426 < 0)
              operator delete(v425);
            v199 = v423;
            if (v423)
            {
              v200 = (unint64_t *)&v423->__shared_owners_;
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            CoreML::FeatureType::Dictionary(1, (uint64_t *)&v417);
            CoreML::Model::addOutput((uint64_t)v442, &v443, &v417, (CoreML::Result *)v419);
            if (v421 < 0)
              operator delete(v420);
            v202 = v418;
            if (v418)
            {
              v203 = (unint64_t *)&v418->__shared_owners_;
              do
                v204 = __ldaxr(v203);
              while (__stlxr(v204 - 1, v203));
              if (!v204)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
            CoreML::FeatureType::String(&v413);
            (*(void (**)(void **__return_ptr, CoreML::Pipeline *, std::string *, uint64_t *))(*(_QWORD *)a1 + 16))(v415, a1, &v443, &v413);
            if (v416 < 0)
              operator delete(v415[1]);
            v205 = v414;
            if (v414)
            {
              v206 = (unint64_t *)&v414->__shared_owners_;
              do
                v207 = __ldaxr(v206);
              while (__stlxr(v207 - 1, v206));
              if (!v207)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v205);
              }
            }
            CoreML::Pipeline::add(a1, (const CoreML::Model *)v442, (CoreML::Result *)v410);
            if (v412 < 0)
              operator delete(v411);
            CoreML::FeatureType::Dictionary(1, (uint64_t *)&v405);
            CoreML::Model::addInput((uint64_t)v493, &v443, &v405, (CoreML::Result *)v407);
            if (v409 < 0)
              operator delete(v408);
            v208 = v406;
            if (v406)
            {
              v209 = (unint64_t *)&v406->__shared_owners_;
              do
                v210 = __ldaxr(v209);
              while (__stlxr(v210 - 1, v209));
              if (!v210)
              {
                ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                std::__shared_weak_count::__release_weak(v208);
              }
            }
            CoreML::FeatureVectorizer::add((uint64_t)v493, &v443, v190, (CoreML::Result *)v403);
            v211 = (void **)v404;
            if ((v404[23] & 0x80000000) != 0)
              goto LABEL_329;
          }
          else
          {
            v215 = (uint64_t *)(**a2 + 16 * v4);
            v216 = *v215;
            v217 = (std::__shared_weak_count *)v215[1];
            if (v217)
            {
              v218 = (unint64_t *)&v217->__shared_owners_;
              do
                v219 = __ldxr(v218);
              while (__stxr(v219 + 1, v218));
              v220 = *(unsigned __int8 *)(v216 + 28);
              do
                v221 = __ldaxr(v218);
              while (__stlxr(v221 - 1, v218));
              if (!v221)
              {
                ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                std::__shared_weak_count::__release_weak(v217);
              }
            }
            else
            {
              v220 = *(unsigned __int8 *)(v216 + 28);
            }
            if (v220)
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v443;
              turi::setup_pipeline_from_mldata(CoreML::Pipeline &,std::shared_ptr<turi::ml_metadata>)::$_1::operator()();
            }
            CoreML::FeatureType::Int64((uint64_t *)&v398);
            CoreML::OneHotEncoder::addInput((uint64_t)v442, &v443, &v398, (uint64_t)v400);
            if (v402 < 0)
              operator delete(v401);
            v222 = v399;
            if (v399)
            {
              v223 = (unint64_t *)&v399->__shared_owners_;
              do
                v224 = __ldaxr(v223);
              while (__stlxr(v224 - 1, v223));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                std::__shared_weak_count::__release_weak(v222);
              }
            }
            CoreML::FeatureType::Dictionary(1, (uint64_t *)&v393);
            CoreML::Model::addOutput((uint64_t)v442, &v443, &v393, (CoreML::Result *)v395);
            if (v397 < 0)
              operator delete(v396);
            v225 = v394;
            if (v394)
            {
              v226 = (unint64_t *)&v394->__shared_owners_;
              do
                v227 = __ldaxr(v226);
              while (__stlxr(v227 - 1, v226));
              if (!v227)
              {
                ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                std::__shared_weak_count::__release_weak(v225);
              }
            }
            CoreML::FeatureType::Int64(&v389);
            (*(void (**)(void **__return_ptr, CoreML::Pipeline *, std::string *, uint64_t *))(*(_QWORD *)a1 + 16))(v391, a1, &v443, &v389);
            if (v392 < 0)
              operator delete(v391[1]);
            v228 = v390;
            if (v390)
            {
              v229 = (unint64_t *)&v390->__shared_owners_;
              do
                v230 = __ldaxr(v229);
              while (__stlxr(v230 - 1, v229));
              if (!v230)
              {
                ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                std::__shared_weak_count::__release_weak(v228);
              }
            }
            CoreML::Pipeline::add(a1, (const CoreML::Model *)v442, (CoreML::Result *)v386);
            if (v388 < 0)
              operator delete(v387);
            CoreML::FeatureType::Dictionary(1, (uint64_t *)&v381);
            CoreML::Model::addInput((uint64_t)v493, &v443, &v381, (CoreML::Result *)v383);
            if (v385 < 0)
              operator delete(v384);
            v231 = v382;
            if (v382)
            {
              v232 = (unint64_t *)&v382->__shared_owners_;
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
              {
                ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                std::__shared_weak_count::__release_weak(v231);
              }
            }
            CoreML::FeatureVectorizer::add((uint64_t)v493, &v443, v190, (CoreML::Result *)v379);
            v211 = (void **)v380;
            if ((v380[23] & 0x80000000) != 0)
LABEL_329:
              operator delete(*v211);
          }
          CoreML::Model::~Model((CoreML::Model *)v442);
          if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v443.__r_.__value_.__l.__data_);
          v212 = v373;
          if (!v373)
            goto LABEL_552;
          v213 = (unint64_t *)&v373->__shared_owners_;
          do
            v214 = __ldaxr(v213);
          while (__stlxr(v214 - 1, v213));
          goto LABEL_550;
        case 2:
          v62 = (uint64_t *)(**a2 + 16 * v4);
          v63 = *v62;
          v64 = (std::__shared_weak_count *)v62[1];
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
            v67 = *(_QWORD *)(v63 + 64);
            do
              v68 = __ldaxr(v65);
            while (__stlxr(v68 - 1, v65));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          else
          {
            v67 = *(_QWORD *)(v63 + 64);
          }
          v474 = 0;
          v473 = 0;
          v475 = 0;
          v108 = operator new(8uLL);
          v473 = v108;
          *v108 = v67;
          v475 = v108 + 1;
          v474 = v108 + 1;
          CoreML::FeatureType::Array((uint64_t)&v473, &v476);
          (*(void (**)(void **__return_ptr, CoreML::Pipeline *, std::string *, uint64_t *))(*(_QWORD *)a1 + 16))(v478, a1, &v492, &v476);
          if (v479 < 0)
            operator delete(v478[1]);
          v109 = v477;
          if (v477)
          {
            v110 = (unint64_t *)&v477->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          if (v473)
          {
            v474 = v473;
            operator delete(v473);
          }
          v466 = 0;
          v465 = 0;
          v467 = 0;
          v112 = operator new(8uLL);
          v465 = v112;
          *v112 = v67;
          v467 = v112 + 1;
          v466 = v112 + 1;
          CoreML::FeatureType::Array((uint64_t)&v465, (uint64_t *)&v468);
          CoreML::Model::addInput((uint64_t)v493, &v492, &v468, (CoreML::Result *)v470);
          if (v472 < 0)
            operator delete(v471);
          v113 = v469;
          if (v469)
          {
            v114 = (unint64_t *)&v469->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          if (v465)
          {
            v466 = v465;
            operator delete(v465);
          }
          CoreML::FeatureVectorizer::add((uint64_t)v493, &v492, v67, (CoreML::Result *)v462);
          if ((v464 & 0x80000000) == 0)
            goto LABEL_552;
          v42 = v463;
          goto LABEL_348;
        case 3:
          turi::setup_pipeline_from_mldata(CoreML::Pipeline &,std::shared_ptr<turi::ml_metadata>)::$_3::operator()();
        case 4:
          v69 = (uint64_t *)(**a2 + 16 * v4);
          v70 = *v69;
          v71 = (std::__shared_weak_count *)v69[1];
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
            do
              v74 = __ldaxr(v72);
            while (__stlxr(v74 - 1, v72));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v75 = *(std::__shared_weak_count **)(v70 + 40);
          __idx = *(_QWORD *)(v70 + 32);
          v378 = v75;
          if (v75)
          {
            v76 = (unint64_t *)&v75->__shared_owners_;
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
          }
          v78 = (__int128 **)(**a2 + 16 * v4);
          v79 = *v78;
          v80 = (std::__shared_weak_count *)v78[1];
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
            do
              v83 = __ldaxr(v81);
            while (__stlxr(v83 - 1, v81));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          if (*((char *)v79 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v443, *(const std::string::value_type **)v79, *((_QWORD *)v79 + 1));
          }
          else
          {
            v84 = *v79;
            v443.__r_.__value_.__r.__words[2] = *((_QWORD *)v79 + 2);
            *(_OWORD *)&v443.__r_.__value_.__l.__data_ = v84;
          }
          std::to_string((std::string *)v501, v4);
          v116 = std::string::insert((std::string *)v501, 0, "Dict Vectorizer on Column");
          v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          CoreML::DictVectorizer::DictVectorizer(v442, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v501[23] & 0x80000000) != 0)
            operator delete(*(void **)v501);
          v118 = (uint64_t *)(**a2 + 16 * v4);
          v119 = *v118;
          v120 = (std::__shared_weak_count *)v118[1];
          if (v120)
          {
            v121 = (unint64_t *)&v120->__shared_owners_;
            do
              v122 = __ldxr(v121);
            while (__stxr(v122 + 1, v121));
            do
              v123 = __ldaxr(v121);
            while (__stlxr(v123 - 1, v121));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          turi::ml_data_internal::column_indexer::extract_key_types(*(_QWORD *)(v119 + 32), (uint64_t)&v436);
          if (v438 != 1)
            goto LABEL_570;
          v124 = *((unsigned __int8 *)v436 + 25);
          if (v124 == 2)
          {
            v125 = (uint64_t *)(**a2 + 16 * v4);
            v126 = *v125;
            v127 = (std::__shared_weak_count *)v125[1];
            if (v127)
            {
              v128 = (unint64_t *)&v127->__shared_owners_;
              do
                v129 = __ldxr(v128);
              while (__stxr(v129 + 1, v128));
              v130 = *(_QWORD *)(v126 + 64);
              do
                v131 = __ldaxr(v128);
              while (__stlxr(v131 - 1, v128));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            else
            {
              v130 = *(_QWORD *)(v126 + 64);
            }
            std::vector<std::string>::vector((std::vector<std::string> *)v501, v130);
            v234 = 0;
            while (2)
            {
              v235 = (uint64_t *)(**a2 + 16 * v4);
              v236 = *v235;
              v237 = (std::__shared_weak_count *)v235[1];
              if (v237)
              {
                v238 = (unint64_t *)&v237->__shared_owners_;
                do
                  v239 = __ldxr(v238);
                while (__stxr(v239 + 1, v238));
                v240 = *(_QWORD *)(v236 + 64);
                do
                  v241 = __ldaxr(v238);
                while (__stlxr(v241 - 1, v238));
                if (!v241)
                {
                  ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                  std::__shared_weak_count::__release_weak(v237);
                }
              }
              else
              {
                v240 = *(_QWORD *)(v236 + 64);
              }
              if (v234 < v240)
              {
                v242 = (turi::flexible_type_impl *)(*(_QWORD *)(__idx + 80) + 16 * v234);
                switch(*((_BYTE *)v242 + 12))
                {
                  case 0:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    goto LABEL_403;
                  case 1:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                    std::ostream::operator<<();
                    std::stringbuf::str();
LABEL_403:
                    __p.__r_.__value_.__r.__words[0] = v5;
                    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v5 - 24)) = v328;
                    __p.__r_.__value_.__r.__words[2] = v327;
                    v495 = MEMORY[0x24BEDB848] + 16;
                    if (v499 < 0)
                      operator delete(v498);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x219A198F4](v500);
                    goto LABEL_410;
                  case 2:
                    v243 = *(_QWORD *)v242;
                    if (*(char *)(*(_QWORD *)v242 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v505, *(const std::string::value_type **)(v243 + 8), *(_QWORD *)(v243 + 16));
                    }
                    else
                    {
                      v244 = *(_OWORD *)(v243 + 8);
                      v505.__r_.__value_.__r.__words[2] = *(_QWORD *)(v243 + 24);
                      *(_OWORD *)&v505.__r_.__value_.__l.__data_ = v244;
                    }
                    goto LABEL_410;
                  case 3:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v242 + 8));
                    goto LABEL_410;
                  case 4:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v242 + 8));
                    goto LABEL_410;
                  case 5:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v242 + 8));
                    goto LABEL_410;
                  case 6:
                    turi::flexible_type_impl::get_string_visitor::operator()(v242, &v505);
                    goto LABEL_410;
                  case 7:
                    memset(&v505, 0, sizeof(v505));
                    goto LABEL_410;
                  case 8:
                    turi::flexible_type_impl::get_string_visitor::operator()();
                    goto LABEL_410;
                  case 9:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v242 + 8));
LABEL_410:
                    v245 = *(_QWORD *)v501 + 24 * v234;
                    if (*(char *)(v245 + 23) < 0)
                      operator delete(*(void **)v245);
                    v246 = *(_OWORD *)&v505.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v245 + 16) = *((_QWORD *)&v505.__r_.__value_.__l + 2);
                    *(_OWORD *)v245 = v246;
                    ++v234;
                    continue;
                  default:
                    goto LABEL_569;
                }
              }
              break;
            }
            CoreML::DictVectorizer::setFeatureEncoding((uint64_t)v442, (__int128 **)v501, (CoreML::Result *)v374);
            if (v376 < 0)
              operator delete(v375);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v501;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          }
          else
          {
            if (*((_BYTE *)v436 + 25))
LABEL_570:
              turi::setup_pipeline_from_mldata(CoreML::Pipeline &,std::shared_ptr<turi::ml_metadata>)::$_2::operator()();
            v132 = (uint64_t *)(**a2 + 16 * v4);
            v133 = *v132;
            v134 = (std::__shared_weak_count *)v132[1];
            if (v134)
            {
              v135 = (unint64_t *)&v134->__shared_owners_;
              do
                v136 = __ldxr(v135);
              while (__stxr(v136 + 1, v135));
              v137 = *(_QWORD *)(v133 + 64);
              do
                v138 = __ldaxr(v135);
              while (__stlxr(v138 - 1, v135));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
            else
            {
              v137 = *(_QWORD *)(v133 + 64);
            }
            std::vector<long long>::vector(&v372, v137);
            v247 = 0;
            while (1)
            {
              v248 = (uint64_t *)(**a2 + 16 * v4);
              v249 = *v248;
              v250 = (std::__shared_weak_count *)v248[1];
              if (v250)
              {
                v251 = (unint64_t *)&v250->__shared_owners_;
                do
                  v252 = __ldxr(v251);
                while (__stxr(v252 + 1, v251));
                v253 = *(_QWORD *)(v249 + 64);
                do
                  v254 = __ldaxr(v251);
                while (__stlxr(v254 - 1, v251));
                if (!v254)
                {
                  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                  std::__shared_weak_count::__release_weak(v250);
                }
              }
              else
              {
                v253 = *(_QWORD *)(v249 + 64);
              }
              if (v247 >= v253)
                break;
              v255 = *(_QWORD *)(__idx + 80) + 16 * v247;
              v256 = 0;
              switch(*(_BYTE *)(v255 + 12))
              {
                case 0:
                  v256 = *(_QWORD *)v255;
                  goto LABEL_455;
                case 1:
                  v256 = (uint64_t)*(double *)v255;
                  goto LABEL_455;
                case 2:
                  v260 = *(_QWORD *)v255;
                  v261 = (char **)(*(_QWORD *)v255 + 8);
                  v504 = 0;
                  v262 = (char *)v261;
                  if (*(char *)(v260 + 31) < 0)
                    v262 = *v261;
                  std::string::basic_string[abi:ne180100]<0>(&__p, v262);
                  v256 = std::stoll(&__p, &v504, 10);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (*(char *)(v260 + 31) < 0)
                    v263 = *(_QWORD *)(v260 + 16);
                  else
                    v263 = *(unsigned __int8 *)(v260 + 31);
                  if (v504 != v263)
                  {
                    v322 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    v323 = std::string::append(&v505, " cannot be interpreted as an integer");
                    v324 = *(_OWORD *)&v323->__r_.__value_.__l.__data_;
                    __p.__r_.__value_.__r.__words[2] = v323->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v324;
                    v323->__r_.__value_.__l.__size_ = 0;
                    v323->__r_.__value_.__r.__words[2] = 0;
                    v323->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(v322, &__p);
                    __cxa_throw(v322, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                  }
                  goto LABEL_455;
                case 3:
                  v257 = *(_QWORD *)v255;
                  memset(&__p, 0, sizeof(__p));
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v257 + 8), *(_QWORD *)(v257 + 16), (uint64_t)(*(_QWORD *)(v257 + 16) - *(_QWORD *)(v257 + 8)) >> 3);
                  turi::flexible_type_fail(0);
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_454;
                case 4:
                  v264 = *(_QWORD *)v255;
                  memset(&__p, 0, sizeof(__p));
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v264 + 8), *(uint64_t **)(v264 + 16), (uint64_t)(*(_QWORD *)(v264 + 16) - *(_QWORD *)(v264 + 8)) >> 4);
                  turi::flexible_type_fail(0);
                  v505.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v505);
                  goto LABEL_454;
                case 5:
                  v265 = *(_QWORD *)v255;
                  memset(&__p, 0, sizeof(__p));
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v265 + 8), *(uint64_t **)(v265 + 16), (uint64_t)(*(_QWORD *)(v265 + 16) - *(_QWORD *)(v265 + 8)) >> 5);
                  turi::flexible_type_fail(0);
                  v505.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v505);
                  goto LABEL_454;
                case 6:
                  v256 = (uint64_t)(*(_QWORD *)v255 << 8) >> 8;
                  goto LABEL_455;
                case 7:
                  goto LABEL_455;
                case 8:
                  v266 = *(_QWORD *)v255;
                  v267 = *(_QWORD *)(v266 + 16);
                  *(_QWORD *)v501 = *(_QWORD *)(v266 + 8);
                  *(_QWORD *)&v501[8] = v267;
                  if (v267)
                  {
                    v268 = (unsigned int *)(v267 + 8);
                    do
                      v269 = __ldxr(v268);
                    while (__stxr(v269 + 1, v268));
                  }
                  v270 = *(_OWORD *)(v266 + 24);
                  v271 = *(_OWORD *)(v266 + 56);
                  v502 = *(_OWORD *)(v266 + 40);
                  v503 = v271;
                  *(_OWORD *)&v501[16] = v270;
                  turi::flexible_type_fail(0);
                  boost::detail::shared_count::~shared_count((unsigned int **)&v501[8]);
                  goto LABEL_454;
                case 9:
                  turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v255 + 8);
                  turi::flexible_type_fail(0);
                  if (v496)
                  {
                    v497 = v496;
                    operator delete(v496);
                  }
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    v495 = __p.__r_.__value_.__r.__words[2];
                    operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                  }
                  v256 = __p.__r_.__value_.__l.__size_;
                  if (!__p.__r_.__value_.__l.__size_)
                    goto LABEL_455;
                  v258 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                  do
                    v259 = __ldaxr(v258);
                  while (__stlxr(v259 - 1, v258));
                  if (!v259)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v256 + 16))(v256);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v256);
                  }
LABEL_454:
                  v256 = 0;
LABEL_455:
                  *((_QWORD *)v372 + v247++) = v256;
                  break;
                default:
LABEL_569:
                  turi::flexible_type_fail(0);
                  __break(1u);
                  return;
              }
            }
            CoreML::DictVectorizer::setFeatureEncoding((uint64_t)v442, (uint64_t **)&v372, (CoreML::Result *)v369);
            if (v371 < 0)
              operator delete(v370);
            if (v372)
            {
              v373 = (std::__shared_weak_count *)v372;
              operator delete(v372);
            }
          }
          v272 = (uint64_t *)(**a2 + 16 * v4);
          v273 = *v272;
          v274 = (std::__shared_weak_count *)v272[1];
          if (v274)
          {
            v275 = (unint64_t *)&v274->__shared_owners_;
            do
              v276 = __ldxr(v275);
            while (__stxr(v276 + 1, v275));
            v277 = *(_QWORD *)(v273 + 64);
            do
              v278 = __ldaxr(v275);
            while (__stlxr(v278 - 1, v275));
            if (!v278)
            {
              ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
              std::__shared_weak_count::__release_weak(v274);
            }
          }
          else
          {
            v277 = *(_QWORD *)(v273 + 64);
          }
          CoreML::FeatureType::Dictionary(2, (uint64_t *)&__p);
          CoreML::FeatureType::Dictionary(1, (uint64_t *)v501);
          if (v124 == 2)
          {
            v365 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v279 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v280 = __ldxr(v279);
              while (__stxr(v280 + 1, v279));
            }
            CoreML::DictVectorizer::addInput((uint64_t)v442, &v443, (const CoreML::Specification::FeatureType **)&v365, (uint64_t)v366);
            if (v368 < 0)
              operator delete(v367);
            v281 = (std::__shared_weak_count *)*((_QWORD *)&v365 + 1);
            if (*((_QWORD *)&v365 + 1))
            {
              v282 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
              do
                v283 = __ldaxr(v282);
              while (__stlxr(v283 - 1, v282));
              if (!v283)
              {
                ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                std::__shared_weak_count::__release_weak(v281);
              }
            }
            v362 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v284 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v285 = __ldxr(v284);
              while (__stxr(v285 + 1, v284));
            }
            (*(void (**)(void **__return_ptr, CoreML::Pipeline *, std::string *, __int128 *))(*(_QWORD *)a1 + 16))(v363, a1, &v443, &v362);
            if (v364 < 0)
              operator delete(v363[1]);
            v286 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
            if (*((_QWORD *)&v362 + 1))
            {
              v287 = (unint64_t *)(*((_QWORD *)&v362 + 1) + 8);
              do
                v288 = __ldaxr(v287);
              while (__stlxr(v288 - 1, v287));
              goto LABEL_509;
            }
          }
          else
          {
            v358 = *(_OWORD *)v501;
            if (*(_QWORD *)&v501[8])
            {
              v289 = (unint64_t *)(*(_QWORD *)&v501[8] + 8);
              do
                v290 = __ldxr(v289);
              while (__stxr(v290 + 1, v289));
            }
            CoreML::DictVectorizer::addInput((uint64_t)v442, &v443, (const CoreML::Specification::FeatureType **)&v358, (uint64_t)v359);
            if (v361 < 0)
              operator delete(v360);
            v291 = (std::__shared_weak_count *)*((_QWORD *)&v358 + 1);
            if (*((_QWORD *)&v358 + 1))
            {
              v292 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 8);
              do
                v293 = __ldaxr(v292);
              while (__stlxr(v293 - 1, v292));
              if (!v293)
              {
                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                std::__shared_weak_count::__release_weak(v291);
              }
            }
            v354 = *(_OWORD *)v501;
            if (*(_QWORD *)&v501[8])
            {
              v294 = (unint64_t *)(*(_QWORD *)&v501[8] + 8);
              do
                v295 = __ldxr(v294);
              while (__stxr(v295 + 1, v294));
            }
            CoreML::Model::addOutput((uint64_t)v442, &v443, (const CoreML::Specification::FeatureType **)&v354, (CoreML::Result *)v355);
            if (v357 < 0)
              operator delete(v356);
            v286 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
            if (*((_QWORD *)&v354 + 1))
            {
              v296 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
              do
                v288 = __ldaxr(v296);
              while (__stlxr(v288 - 1, v296));
LABEL_509:
              if (!v288)
              {
                ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                std::__shared_weak_count::__release_weak(v286);
              }
            }
          }
          v350 = *(_OWORD *)v501;
          if (*(_QWORD *)&v501[8])
          {
            v297 = (unint64_t *)(*(_QWORD *)&v501[8] + 8);
            do
              v298 = __ldxr(v297);
            while (__stxr(v298 + 1, v297));
          }
          CoreML::Model::addOutput((uint64_t)v442, &v443, (const CoreML::Specification::FeatureType **)&v350, (CoreML::Result *)v351);
          if (v353 < 0)
            operator delete(v352);
          v299 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
          if (*((_QWORD *)&v350 + 1))
          {
            v300 = (unint64_t *)(*((_QWORD *)&v350 + 1) + 8);
            do
              v301 = __ldaxr(v300);
            while (__stlxr(v301 - 1, v300));
            if (!v301)
            {
              ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
              std::__shared_weak_count::__release_weak(v299);
            }
          }
          CoreML::Pipeline::add(a1, (const CoreML::Model *)v442, (CoreML::Result *)v347);
          if (v349 < 0)
            operator delete(v348);
          v343 = *(_OWORD *)v501;
          if (*(_QWORD *)&v501[8])
          {
            v302 = (unint64_t *)(*(_QWORD *)&v501[8] + 8);
            do
              v303 = __ldxr(v302);
            while (__stxr(v303 + 1, v302));
          }
          CoreML::Model::addInput((uint64_t)v493, &v443, (const CoreML::Specification::FeatureType **)&v343, (CoreML::Result *)v344);
          if (v346 < 0)
            operator delete(v345);
          v304 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
          if (*((_QWORD *)&v343 + 1))
          {
            v305 = (unint64_t *)(*((_QWORD *)&v343 + 1) + 8);
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
            }
          }
          CoreML::FeatureVectorizer::add((uint64_t)v493, &v443, v277, (CoreML::Result *)v340);
          if (v342 < 0)
            operator delete(v341);
          v307 = *(std::__shared_weak_count **)&v501[8];
          if (*(_QWORD *)&v501[8])
          {
            v308 = (unint64_t *)(*(_QWORD *)&v501[8] + 8);
            do
              v309 = __ldaxr(v308);
            while (__stlxr(v309 - 1, v308));
            if (!v309)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v307);
            }
          }
          v310 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v311 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v312 = __ldaxr(v311);
            while (__stlxr(v312 - 1, v311));
            if (!v312)
            {
              ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
              std::__shared_weak_count::__release_weak(v310);
            }
          }
          std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v436, v437);
          CoreML::Model::~Model((CoreML::Model *)v442);
          if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v443.__r_.__value_.__l.__data_);
          v212 = v378;
          if (v378)
          {
            v313 = (unint64_t *)&v378->__shared_owners_;
            do
              v214 = __ldaxr(v313);
            while (__stlxr(v214 - 1, v313));
LABEL_550:
            if (!v214)
            {
              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
              std::__shared_weak_count::__release_weak(v212);
            }
          }
LABEL_552:
          if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v492.__r_.__value_.__l.__data_);
          ++v4;
          v3 = **a2;
          if (v4 >= ((*a2)[1] - v3) >> 4)
            goto LABEL_555;
          break;
        case 7:
          v43 = (uint64_t *)(**a2 + 16 * v4);
          v44 = *v43;
          v45 = (std::__shared_weak_count *)v43[1];
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
            do
              v48 = __ldaxr(v46);
            while (__stlxr(v48 - 1, v46));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v44 + 80), *(_QWORD *)(v44 + 88), (uint64_t)(*(_QWORD *)(v44 + 88) - *(_QWORD *)(v44 + 80)) >> 3);
          v457 = 0;
          v455 = 0;
          v456 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v455, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
          CoreML::FeatureType::Array((uint64_t)&v455, &v458);
          (*(void (**)(void **__return_ptr, CoreML::Pipeline *, std::string *, uint64_t *))(*(_QWORD *)a1 + 16))(v460, a1, &v492, &v458);
          if (v461 < 0)
            operator delete(v460[1]);
          v49 = v459;
          if (v459)
          {
            v50 = (unint64_t *)&v459->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          if (v455)
          {
            v456 = v455;
            operator delete(v455);
          }
          v449 = 0;
          v447 = 0;
          v448 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v447, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
          CoreML::FeatureType::Array((uint64_t)&v447, (uint64_t *)&v450);
          CoreML::Model::addInput((uint64_t)v493, &v492, &v450, (CoreML::Result *)v452);
          if (v454 < 0)
            operator delete(v453);
          v52 = v451;
          if (v451)
          {
            v53 = (unint64_t *)&v451->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          if (v447)
          {
            v448 = v447;
            operator delete(v447);
          }
          v55 = (uint64_t *)(**a2 + 16 * v4);
          v56 = *v55;
          v57 = (std::__shared_weak_count *)v55[1];
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
            v60 = *(_QWORD *)(v56 + 64);
            do
              v61 = __ldaxr(v58);
            while (__stlxr(v61 - 1, v58));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          else
          {
            v60 = *(_QWORD *)(v56 + 64);
          }
          CoreML::FeatureVectorizer::add((uint64_t)v493, &v492, v60, (CoreML::Result *)v444);
          if (v446 < 0)
            operator delete(v445);
          v42 = (void *)__p.__r_.__value_.__r.__words[0];
          if (!__p.__r_.__value_.__r.__words[0])
            goto LABEL_552;
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
LABEL_348:
          operator delete(v42);
          goto LABEL_552;
        default:
          goto LABEL_552;
      }
    }
  }
LABEL_555:
  std::string::basic_string[abi:ne180100]<0>(&__p, "__vectorized_features__");
  v314 = (*a2)[8];
  v315 = operator new(8uLL);
  v332 = v315;
  *v315 = v314;
  v333 = v315 + 1;
  v334 = v315 + 1;
  CoreML::FeatureType::Array((uint64_t)&v332, (uint64_t *)&v335);
  CoreML::Model::addOutput((uint64_t)v493, &__p, &v335, (CoreML::Result *)v337);
  if (v339 < 0)
    operator delete(v338);
  v316 = v336;
  if (v336)
  {
    v317 = (unint64_t *)&v336->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  CoreML::Pipeline::add(a1, (const CoreML::Model *)v493, (CoreML::Result *)v329);
  if (v331 < 0)
    operator delete(v330);
  CoreML::FeatureVectorizer::~FeatureVectorizer((CoreML::FeatureVectorizer *)v493);
}

void sub_21846F634(_Unwind_Exception *a1)
{
  CoreML::FeatureVectorizer::~FeatureVectorizer((CoreML::FeatureVectorizer *)&STACK[0x748]);
  _Unwind_Resume(a1);
}

void sub_21846FD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_mldata_exporter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::coreml::MLModelWrapper::save(uint64_t a1)
{
  turi::neural_net::float_scalar *v1;
  _BYTE v2[8];
  void *__p;
  char v4;

  CoreML::Model::save(*(_QWORD *)(a1 + 224), (uint64_t)v2);
  if (!CoreML::Result::good((CoreML::Result *)v2))
  {
    v1 = (turi::neural_net::float_scalar *)v2;
    turi::coreml::MLModelWrapper::save(std::string const&)::$_0::operator()(&v1);
  }
  if (v4 < 0)
    operator delete(__p);
}

void sub_21846FF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::coreml::MLModelWrapper::add_metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = turi::gl_sarray_range::iterator::dereference(*(turi::gl_sarray_range::iterator **)(a1 + 224));
  turi::add_metadata(v3, a2);
}

uint64_t _GLOBAL__sub_I_mlmodel_wrapper_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::set_array_feature(uint64_t *a1, __n128 *a2, __n128 *a3, uint64_t **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(a1 + 2, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, a2);
  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(a1 + 3, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, a3);
  v7 = a1[4];
  if (!v7)
  {
    v7 = operator new();
    CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)v7);
    a1[4] = v7;
  }
  if (*(_DWORD *)(v7 + 36) == 5)
  {
    v8 = *(_QWORD *)(v7 + 24);
  }
  else
  {
    CoreML::Specification::FeatureType::clear_Type(v7);
    *(_DWORD *)(v7 + 36) = 5;
    v8 = operator new();
    CoreML::Specification::ArrayFeatureType::ArrayFeatureType((CoreML::Specification::ArrayFeatureType *)v8);
    *(_QWORD *)(v7 + 24) = v8;
  }
  *(_DWORD *)(v8 + 36) = 65600;
  v9 = *a4;
  v10 = a4[1];
  if (*a4 != v10)
  {
    v11 = *(_DWORD *)(v8 + 16);
    do
    {
      v12 = *v9;
      if (v11 == *(_DWORD *)(v8 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v8 + 16), v11 + 1);
        v11 = *(_DWORD *)(v8 + 16);
      }
      v13 = *(_QWORD *)(v8 + 24) + 8 * v11++;
      *(_DWORD *)(v8 + 16) = v11;
      *(_QWORD *)(v13 + 8) = v12;
      ++v9;
    }
    while (v9 != v10);
  }
}

void sub_2184700E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

void turi::export_style_transfer_model(const CoreML::Specification::NeuralNetwork **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, std::string *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  CoreML::Specification::ModelDescription *v15;
  CoreML::Specification::FeatureDescription *v16;
  turi::_anonymous_namespace_ *v17;
  uint64_t *v18;
  _QWORD *v19;
  std::string *v20;
  std::string::value_type v21;
  std::string *v22;
  CoreML::Specification::FeatureDescription *v23;
  CoreML::Specification::ImageFeatureType *v24;
  turi::_anonymous_namespace_ *v25;
  CoreML::Specification::ImageFeatureType *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  void *v35[2];
  char v36;
  std::string v37;
  __int128 v38;
  _QWORD *v39;
  __n128 v40;
  char v41;
  __n128 v42;
  char v43;
  void *__p[2];
  char v45;
  std::string __str;
  _BYTE v47[16];
  CoreML::Specification::ModelDescription *v48;
  int v49;
  uint64_t v50;
  int v51;

  CoreML::Specification::Model::Model((CoreML::Specification::Model *)v47);
  v49 = 6;
  v15 = v48;
  if (!v48)
  {
    v15 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v15);
    v48 = v15;
  }
  v33 = a8;
  v16 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)v15 + 16);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __str = *(std::string *)a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "Input image");
  if (v45 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v18 = (uint64_t *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)v15 + 16);
  std::string::basic_string[abi:ne180100]<0>(&v42, "index");
  std::string::basic_string[abi:ne180100]<0>(&v40, "Style index array (set index I to 1.0 to enable Ith style)");
  v19 = operator new(8uLL);
  *v19 = a7;
  *((_QWORD *)&v38 + 1) = v19 + 1;
  v39 = v19 + 1;
  *(_QWORD *)&v38 = v19;
  turi::set_array_feature(v18, &v42, &v40, (uint64_t **)&v38);
  operator delete(v19);
  if (v41 < 0)
    operator delete((void *)v40.n128_u64[0]);
  if (v43 < 0)
    operator delete((void *)v42.n128_u64[0]);
  v20 = a6;
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
    v20 = (std::string *)a6->__r_.__value_.__r.__words[0];
  v21 = __toupper(v20->__r_.__value_.__s.__data_[0]);
  v22 = a6;
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
    v22 = (std::string *)a6->__r_.__value_.__r.__words[0];
  v22->__r_.__value_.__s.__data_[0] = v21;
  std::operator+<char>();
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
    operator delete(a6->__r_.__value_.__l.__data_);
  *(_OWORD *)&a6->__r_.__value_.__l.__data_ = v38;
  a6->__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
  v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)v15 + 40);
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v37, a6->__r_.__value_.__l.__data_, a6->__r_.__value_.__l.__size_);
  else
    v37 = *a6;
  std::string::basic_string[abi:ne180100]<0>(v35, "Stylized image");
  if (v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (!a4)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (a4)
  {
LABEL_29:
  }
LABEL_30:
  if (v51 == 500)
  {
    v27 = v50;
  }
  else
  {
    CoreML::Specification::Model::clear_Type((uint64_t)v47);
    v51 = 500;
    v27 = operator new();
    CoreML::Specification::NeuralNetwork::NeuralNetwork((CoreML::Specification::NeuralNetwork *)v27);
    v50 = v27;
  }
  CoreML::Specification::NeuralNetwork::MergeFrom((CoreML::Specification::NeuralNetwork *)v27, *a1);
  v28 = *(_QWORD *)(v27 + 32);
  v29 = *(_QWORD *)(v28 + 8 * *(int *)(v27 + 24));
  std::string::operator=(*(std::string **)(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 32) + 8), (const std::string *)a5);
  std::string::operator=(*(std::string **)(*(_QWORD *)(v29 + 56) + 8), a6);
  std::allocate_shared[abi:ne180100]<CoreML::Model,std::allocator<CoreML::Model>,CoreML::Specification::Model &,void>((const CoreML::Specification::Model *)v47, &v38);
  std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Model>,void>(&v38, v33);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)v47);
}

void sub_2184704BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;
  uint64_t v52;

  MEMORY[0x219A19A08](v51, 0x10A1C40FD9EAC30);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)(v52 - 144));
  _Unwind_Resume(a1);
}

uint64_t turi::`anonymous namespace'::set_image_feature(uint64_t a1, uint64_t a2, uint64_t a3, std::string *__str, uint64_t a5, int a6)
{
  std::string **v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(uint64_t **)(a1 + 16);
  v11 = (std::string **)(a1 + 16);
  v12 = (std::string *)v13;
  if (v13 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)__str);
  else
    std::string::operator=(v12, __str);
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(_QWORD *)(a5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a5 + 23))
  {
    goto LABEL_11;
  }
  if (*(uint64_t **)(a1 + 24) == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), a5);
  else
    std::string::operator=(*(std::string **)(a1 + 24), (const std::string *)a5);
LABEL_11:
  v14 = *(_QWORD *)(a1 + 32);
  if (!v14)
  {
    v14 = operator new();
    CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)v14);
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (*(_DWORD *)(v14 + 36) == 4)
  {
    v15 = *(_QWORD *)(v14 + 24);
  }
  else
  {
    CoreML::Specification::FeatureType::clear_Type(v14);
    *(_DWORD *)(v14 + 36) = 4;
    v15 = operator new();
    CoreML::Specification::ImageFeatureType::ImageFeatureType((CoreML::Specification::ImageFeatureType *)v15);
    *(_QWORD *)(v14 + 24) = v15;
  }
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  *(_DWORD *)(v15 + 32) = a6;
  return v15;
}

void sub_2184706F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

double turi::`anonymous namespace'::set_image_feature_size_range(turi::_anonymous_namespace_ *this, CoreML::Specification::ImageFeatureType *a2)
{
  CoreML::Specification::ImageFeatureType_ImageSizeRange *v3;
  CoreML::Specification::SizeRange *v4;
  CoreML::Specification::SizeRange *v5;
  double result;

  if (*((_DWORD *)this + 13) == 31)
  {
    v3 = (CoreML::Specification::ImageFeatureType_ImageSizeRange *)*((_QWORD *)this + 5);
  }
  else
  {
    CoreML::Specification::ImageFeatureType::clear_SizeFlexibility((uint64_t)this);
    *((_DWORD *)this + 13) = 31;
    v3 = (CoreML::Specification::ImageFeatureType_ImageSizeRange *)operator new();
    CoreML::Specification::ImageFeatureType_ImageSizeRange::ImageFeatureType_ImageSizeRange(v3);
    *((_QWORD *)this + 5) = v3;
  }
  v4 = (CoreML::Specification::SizeRange *)*((_QWORD *)v3 + 2);
  if (!v4)
  {
    v4 = (CoreML::Specification::SizeRange *)operator new();
    CoreML::Specification::SizeRange::SizeRange(v4);
    *((_QWORD *)v3 + 2) = v4;
  }
  v5 = (CoreML::Specification::SizeRange *)*((_QWORD *)v3 + 3);
  if (!v5)
  {
    v5 = (CoreML::Specification::SizeRange *)operator new();
    CoreML::Specification::SizeRange::SizeRange(v5);
    *((_QWORD *)v3 + 3) = v5;
  }
  *(_QWORD *)&result = 64;
  *((_OWORD *)v4 + 1) = xmmword_218703C00;
  *((_OWORD *)v5 + 1) = xmmword_218703C00;
  return result;
}

void sub_218470804(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x219A19A08](v2, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_neural_net_models_exporter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Imputer_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Imputer.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_Imputer_default_instance_ = (uint64_t)&off_24D942600;
  *(_QWORD *)algn_254FFB228 = 0;
  dword_254FFB248 = 0;
  qword_254FFB240 = 0;
  byte_254FFB250 = 1;
}

void CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(CoreML::Specification::protobuf_Imputer_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_218470950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::Imputer(CoreML::Specification::Imputer *this)
{
  *(_QWORD *)this = &off_24D942600;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Imputer *)&CoreML::Specification::_Imputer_default_instance_)
    CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_2184709B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Imputer::~Imputer(CoreML::Specification::Imputer *this)
{
  *(_QWORD *)this = &off_24D942600;
  CoreML::Specification::Imputer::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Imputer::~Imputer(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::Imputer::SharedDtor(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 36))
    this = CoreML::Specification::Imputer::clear_ImputedValue(this);
  if (*(_DWORD *)(v1 + 40))
    return CoreML::Specification::Imputer::clear_ReplaceValue(v1);
  return this;
}

uint64_t CoreML::Specification::Imputer::clear_ImputedValue(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 3:
      v2 = *(_QWORD *)(this + 16);
      if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
      {
        if (*(char *)(v2 + 23) < 0)
          operator delete(*(void **)v2);
        this = MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
      }
      break;
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::Imputer::clear_ReplaceValue(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (*(_DWORD *)(this + 40) == 13)
  {
    v2 = *(_QWORD *)(this + 24);
    if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
    {
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      this = MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

uint64_t *CoreML::Specification::Imputer::default_instance(CoreML::Specification::Imputer *this)
{
  CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Imputer_default_instance_;
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::New(CoreML::Specification::Imputer *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Imputer *v3;

  v3 = (CoreML::Specification::Imputer *)operator new();
  CoreML::Specification::Imputer::Imputer(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Imputer>(a2, v3);
  return v3;
}

void sub_218470BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A3C40D8CFA532);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Imputer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Imputer>);
  return result;
}

uint64_t CoreML::Specification::Imputer::Clear(CoreML::Specification::Imputer *this)
{
  CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
  return CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
}

uint64_t CoreML::Specification::Imputer::MergePartialFromCodedStream(CoreML::Specification::Imputer *this, char **a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  unint64_t Varint64Fallback;
  std::string *v16;
  CoreML::Specification::DoubleVector *v17;
  CoreML::Specification::Int64Vector *v18;
  CoreML::Specification::StringToDoubleMap *v19;
  CoreML::Specification::Int64ToDoubleMap *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  std::string *v25;
  uint64_t result;
  int v27;
  std::string *v28;
  std::string *v29;
  const char *size;
  char *v31;
  int VarintSizeAsIntFallback;
  char *v33;
  int v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  std::string *v40;
  char v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  const char *v52;
  unint64_t v53;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v7 = *a2;
      if (*a2 < a2[1])
        break;
      v8 = 0;
LABEL_7:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_8;
LABEL_14:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 9)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
          v53 = 0;
          v12 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v53);
            if (!(_DWORD)result)
              return result;
            v13 = v53;
          }
          else
          {
            v13 = *v12;
            *a2 = (char *)(v12 + 1);
          }
          *((_QWORD *)this + 2) = v13;
          *((_DWORD *)this + 9) = 1;
          continue;
        case 2u:
          if (v9 != 16)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
          v14 = *a2;
          if (*a2 >= a2[1] || *v14 < 0)
          {
            Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v41 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v14;
            *a2 = v14 + 1;
          }
          *((_QWORD *)this + 2) = Varint64Fallback;
          *((_DWORD *)this + 9) = 2;
          continue;
        case 3u:
          if (v9 != 26)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 3)
          {
            v16 = *v6;
            if (*v6 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
              goto LABEL_53;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 3;
            *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
          }
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
LABEL_53:
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v16);
          if (!(_DWORD)result)
            return result;
          v27 = *((_DWORD *)this + 9);
          v28 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v27 == 3)
            v28 = *v6;
          if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
            v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
          v29 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v27 == 3)
            v29 = *v6;
          if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0)
            size = (const char *)v29->__r_.__value_.__l.__size_;
          else
            size = (const char *)HIBYTE(v29->__r_.__value_.__r.__words[2]);
          v52 = "CoreML.Specification.Imputer.imputedStringValue";
          goto LABEL_114;
        case 4u:
          if (v9 != 34)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 4)
          {
            v17 = (CoreML::Specification::DoubleVector *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 4;
            v17 = (CoreML::Specification::DoubleVector *)operator new();
            CoreML::Specification::DoubleVector::DoubleVector(v17);
            *v6 = (std::string *)v17;
          }
          v31 = *a2;
          if (*a2 >= a2[1] || *v31 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v31;
            *a2 = v31 + 1;
          }
          v43 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v43 & 0x8000000000000000) != 0)
            return 0;
          v45 = v43;
          result = CoreML::Specification::DoubleVector::MergePartialFromCodedStream(v17, a2, v44);
          if (!(_DWORD)result)
            return result;
          goto LABEL_108;
        case 5u:
          if (v9 != 42)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 5)
          {
            v18 = (CoreML::Specification::Int64Vector *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 5;
            v18 = (CoreML::Specification::Int64Vector *)operator new();
            CoreML::Specification::Int64Vector::Int64Vector(v18);
            *v6 = (std::string *)v18;
          }
          v33 = *a2;
          if (*a2 >= a2[1] || *v33 < 0)
          {
            v34 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v34 < 0)
              return 0;
          }
          else
          {
            v34 = *v33;
            *a2 = v33 + 1;
          }
          v46 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v34);
          if ((v46 & 0x8000000000000000) != 0)
            return 0;
          v45 = v46;
          result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v18, a2, v47);
          if (!(_DWORD)result)
            return result;
          goto LABEL_108;
        case 6u:
          if (v9 != 50)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 6)
          {
            v19 = (CoreML::Specification::StringToDoubleMap *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 6;
            v19 = (CoreML::Specification::StringToDoubleMap *)operator new();
            CoreML::Specification::StringToDoubleMap::StringToDoubleMap(v19);
            *v6 = (std::string *)v19;
          }
          v35 = *a2;
          if (*a2 >= a2[1] || *v35 < 0)
          {
            v36 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v36 < 0)
              return 0;
          }
          else
          {
            v36 = *v35;
            *a2 = v35 + 1;
          }
          v48 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v36);
          if ((v48 & 0x8000000000000000) != 0)
            return 0;
          v45 = v48;
          result = CoreML::Specification::StringToDoubleMap::MergePartialFromCodedStream(v19, a2, v49);
          if (!(_DWORD)result)
            return result;
          goto LABEL_108;
        case 7u:
          if (v9 != 58)
            goto LABEL_8;
          if (*((_DWORD *)this + 9) == 7)
          {
            v20 = (CoreML::Specification::Int64ToDoubleMap *)*v6;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 7;
            v20 = (CoreML::Specification::Int64ToDoubleMap *)operator new();
            CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(v20);
            *v6 = (std::string *)v20;
          }
          v37 = *a2;
          if (*a2 >= a2[1] || *v37 < 0)
          {
            v38 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v38 < 0)
              return 0;
          }
          else
          {
            v38 = *v37;
            *a2 = v37 + 1;
          }
          v50 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v38);
          if ((v50 & 0x8000000000000000) != 0)
            return 0;
          v45 = v50;
          result = CoreML::Specification::Int64ToDoubleMap::MergePartialFromCodedStream(v20, a2, v51);
          if (!(_DWORD)result)
            return result;
LABEL_108:
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v45))
          {
            continue;
          }
          return 0;
        case 0xBu:
          if (v9 != 89)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
          v53 = 0;
          v21 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v53);
            if (!(_DWORD)result)
              return result;
            v22 = v53;
          }
          else
          {
            v22 = *v21;
            *a2 = (char *)(v21 + 1);
          }
          *((_QWORD *)this + 3) = v22;
          *((_DWORD *)this + 10) = 11;
          break;
        case 0xCu:
          if (v9 != 96)
            goto LABEL_8;
          CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
          v23 = *a2;
          if (*a2 >= a2[1] || *v23 < 0)
          {
            v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v42 & 1) == 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *a2 = v23 + 1;
          }
          *((_QWORD *)this + 3) = v24;
          *((_DWORD *)this + 10) = 12;
          continue;
        case 0xDu:
          if (v9 != 106)
            goto LABEL_8;
          if (*((_DWORD *)this + 10) == 13)
          {
            v25 = *v5;
            if (*v5 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
              goto LABEL_80;
          }
          else
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 13;
            *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
          }
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v25 = *v5;
LABEL_80:
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v25);
          if (!(_DWORD)result)
            return result;
          v39 = *((_DWORD *)this + 10);
          v28 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v39 == 13)
            v28 = *v5;
          if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
            v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
          v40 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v39 == 13)
            v40 = *v5;
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
            size = (const char *)v40->__r_.__value_.__l.__size_;
          else
            size = (const char *)HIBYTE(v40->__r_.__value_.__r.__words[2]);
          v52 = "CoreML.Specification.Imputer.replaceStringValue";
LABEL_114:
          if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v28, size, 0, (uint64_t)v52))return 0;
          continue;
        default:
          goto LABEL_8;
      }
    }
    v8 = *v7;
    if (*v7 < 1)
      goto LABEL_7;
    *a2 = v7 + 1;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_14;
LABEL_8:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
  }
}

void sub_2184712CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Imputer::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  const char *v8;
  uint64_t *v9;
  int v10;
  unsigned __int8 *v11;
  const char *v12;
  uint64_t *v13;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(this + 16), a3);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 3)
  {
    v7 = *(unsigned __int8 **)(v5 + 16);
    if ((char)v7[23] < 0)
    {
      v7 = *(unsigned __int8 **)v7;
      v8 = *(const char **)(*(_QWORD *)(v5 + 16) + 8);
    }
    else
    {
      v8 = (const char *)v7[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v7, v8, 1, (uint64_t)"CoreML.Specification.Imputer.imputedStringValue");
    if (*(_DWORD *)(v5 + 36) == 3)
      v9 = *(uint64_t **)(v5 + 16);
    else
      v9 = &_tc_google::protobuf::internal::fixed_address_empty_string;
    this = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3, (uint64_t)v9, a2);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 4)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 5)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 6)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 7)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(v5 + 16), a2, a4);
  v10 = *(_DWORD *)(v5 + 40);
  if (v10 == 11)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0xB, a2, *(double *)(v5 + 24), a3);
    v10 = *(_DWORD *)(v5 + 40);
  }
  if (v10 == 12)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(12, *(_QWORD *)(v5 + 24), a2, a4);
    v10 = *(_DWORD *)(v5 + 40);
  }
  if (v10 == 13)
  {
    v11 = *(unsigned __int8 **)(v5 + 24);
    if ((char)v11[23] < 0)
    {
      v11 = *(unsigned __int8 **)v11;
      v12 = *(const char **)(*(_QWORD *)(v5 + 24) + 8);
    }
    else
    {
      v12 = (const char *)v11[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v11, v12, 1, (uint64_t)"CoreML.Specification.Imputer.replaceStringValue");
    if (*(_DWORD *)(v5 + 40) == 13)
      v13 = *(uint64_t **)(v5 + 24);
    else
      v13 = &_tc_google::protobuf::internal::fixed_address_empty_string;
    return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(13, (uint64_t)v13, a2);
  }
  return this;
}

uint64_t CoreML::Specification::Imputer::ByteSizeLong(CoreML::Specification::Imputer *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  switch(*((_DWORD *)this + 9))
  {
    case 1:
      v2 = 9;
      break;
    case 2:
      v3 = (9 * (__clz(*((_QWORD *)this + 2) | 1) ^ 0x3F) + 73) >> 6;
      goto LABEL_13;
    case 3:
      v4 = *((_QWORD *)this + 2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_13;
    case 4:
      v7 = CoreML::Specification::DoubleVector::ByteSizeLong(*((CoreML::Specification::DoubleVector **)this + 2));
      goto LABEL_12;
    case 5:
      v7 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 2));
      goto LABEL_12;
    case 6:
      v7 = CoreML::Specification::StringToDoubleMap::ByteSizeLong(*((_tc_google::protobuf::Arena ***)this + 2));
      goto LABEL_12;
    case 7:
      v7 = CoreML::Specification::Int64ToDoubleMap::ByteSizeLong(*((_tc_google::protobuf::Arena ***)this + 2));
LABEL_12:
      v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
LABEL_13:
      v2 = v3 + 1;
      break;
    default:
      v2 = 0;
      break;
  }
  v8 = *((_DWORD *)this + 10);
  switch(v8)
  {
    case 13:
      v10 = *((_QWORD *)this + 3);
      v11 = *(unsigned __int8 *)(v10 + 23);
      v12 = *(_QWORD *)(v10 + 8);
      if ((v11 & 0x80u) == 0)
        v12 = v11;
      v13 = v2 + v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_23;
    case 12:
      v13 = v2 + ((9 * (__clz(*((_QWORD *)this + 3) | 1) ^ 0x3F) + 73) >> 6);
LABEL_23:
      result = v13 + 1;
      break;
    case 11:
      result = v2 + 9;
      break;
    default:
      result = v2;
      break;
  }
  *((_DWORD *)this + 8) = result;
  return result;
}

void CoreML::Specification::Imputer::MergeFrom(CoreML::Specification::Imputer *this, const CoreML::Specification::Imputer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  CoreML::Specification::DoubleVector *v9;
  CoreML::Specification::StringToDoubleMap *v10;
  CoreML::Specification::Int64ToDoubleMap *v11;
  CoreML::Specification::DoubleVector *v12;
  uint64_t *v13;
  CoreML::Specification::Int64Vector *v14;
  CoreML::Specification::StringToDoubleMap *v15;
  const CoreML::Specification::StringToDoubleMap *v16;
  CoreML::Specification::Int64ToDoubleMap *v17;
  const CoreML::Specification::Int64ToDoubleMap *v18;
  int v19;
  uint64_t v20;
  const std::string *v21;
  std::string *v22;
  uint64_t v23;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      v5 = *((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
      }
      *((_QWORD *)this + 2) = v5;
      goto LABEL_38;
    case 2:
      v6 = *((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 9) != 2)
      {
        CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
      }
      *((_QWORD *)this + 2) = v6;
      goto LABEL_38;
    case 3:
      v7 = *((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 9) == 3)
      {
        v8 = (std::string *)*((_QWORD *)this + 2);
        if (v8 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          std::string::operator=(v8, *((const std::string **)a2 + 2));
          goto LABEL_38;
        }
      }
      else
      {
        CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
        *((_DWORD *)this + 9) = 3;
        *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
      }
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v7);
      goto LABEL_38;
    case 4:
      if (*((_DWORD *)this + 9) == 4)
      {
        v9 = (CoreML::Specification::DoubleVector *)*((_QWORD *)this + 2);
LABEL_24:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_32;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 4;
      v9 = (CoreML::Specification::DoubleVector *)operator new();
      v12 = (CoreML::Specification::DoubleVector *)CoreML::Specification::DoubleVector::DoubleVector(v9);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 9) == 4)
        goto LABEL_24;
      v13 = CoreML::Specification::DoubleVector::default_instance(v12);
      goto LABEL_32;
    case 5:
      if (*((_DWORD *)this + 9) == 5)
      {
        v9 = (CoreML::Specification::DoubleVector *)*((_QWORD *)this + 2);
LABEL_26:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_32;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      v9 = (CoreML::Specification::DoubleVector *)operator new();
      v14 = (CoreML::Specification::Int64Vector *)CoreML::Specification::Int64Vector::Int64Vector(v9);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 9) == 5)
        goto LABEL_26;
      v13 = CoreML::Specification::Int64Vector::default_instance(v14);
LABEL_32:
      CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v9, (const CoreML::Specification::GLMRegressor_DoubleArray *)v13);
      goto LABEL_38;
    case 6:
      if (*((_DWORD *)this + 9) == 6)
      {
        v10 = (CoreML::Specification::StringToDoubleMap *)*((_QWORD *)this + 2);
LABEL_28:
        v16 = (const CoreML::Specification::StringToDoubleMap *)*((_QWORD *)a2 + 2);
        goto LABEL_35;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 6;
      v10 = (CoreML::Specification::StringToDoubleMap *)operator new();
      v15 = (CoreML::Specification::StringToDoubleMap *)CoreML::Specification::StringToDoubleMap::StringToDoubleMap(v10);
      *((_QWORD *)this + 2) = v10;
      if (*((_DWORD *)a2 + 9) == 6)
        goto LABEL_28;
      v16 = (const CoreML::Specification::StringToDoubleMap *)CoreML::Specification::StringToDoubleMap::default_instance(v15);
LABEL_35:
      CoreML::Specification::StringToDoubleMap::MergeFrom(v10, v16);
      goto LABEL_38;
    case 7:
      if (*((_DWORD *)this + 9) == 7)
      {
        v11 = (CoreML::Specification::Int64ToDoubleMap *)*((_QWORD *)this + 2);
LABEL_30:
        v18 = (const CoreML::Specification::Int64ToDoubleMap *)*((_QWORD *)a2 + 2);
        goto LABEL_37;
      }
      CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
      *((_DWORD *)this + 9) = 7;
      v11 = (CoreML::Specification::Int64ToDoubleMap *)operator new();
      v17 = (CoreML::Specification::Int64ToDoubleMap *)CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(v11);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 9) == 7)
        goto LABEL_30;
      v18 = (const CoreML::Specification::Int64ToDoubleMap *)CoreML::Specification::Int64ToDoubleMap::default_instance(v17);
LABEL_37:
      CoreML::Specification::Int64ToDoubleMap::MergeFrom(v11, v18);
LABEL_38:
      v19 = *((_DWORD *)a2 + 10);
      switch(v19)
      {
        case 13:
          v21 = (const std::string *)*((_QWORD *)a2 + 3);
          if (*((_DWORD *)this + 10) == 13)
          {
            v22 = (std::string *)*((_QWORD *)this + 3);
            if (v22 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
            {
              std::string::operator=(v22, v21);
              return;
            }
          }
          else
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 13;
            *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
          }
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v21);
          break;
        case 12:
          v23 = *((_QWORD *)a2 + 3);
          if (*((_DWORD *)this + 10) != 12)
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 12;
          }
          *((_QWORD *)this + 3) = v23;
          break;
        case 11:
          v20 = *((_QWORD *)a2 + 3);
          if (*((_DWORD *)this + 10) != 11)
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 10) = 11;
          }
          *((_QWORD *)this + 3) = v20;
          break;
      }
      return;
    default:
      goto LABEL_38;
  }
}

void sub_2184719FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Imputer::IsInitialized(CoreML::Specification::Imputer *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Imputer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Imputer");
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::New(CoreML::Specification::Imputer *this)
{
  return CoreML::Specification::Imputer::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Imputer>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_Imputer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::export_xgboost_model(std::__shared_weak_count **a1@<X0>, const std::string **a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count **v6;
  const void **v7;
  size_t v8;
  std::string *v9;
  const void *v10;
  CoreML::Pipeline *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t i;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  const std::string *v42;
  const std::string *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::vector<std::string>::size_type get_deleter;
  uint64_t v49;
  const void **v50;
  size_t v51;
  void *begin;
  const void *v53;
  const void **v54;
  size_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::string::size_type v75;
  std::string::size_type on_zero_shared_weak;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *end;
  unint64_t *p_size;
  unint64_t v102;
  uint64_t v103;
  char **v104;
  char *v105;
  const std::string *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  __int128 v114;
  __int128 v115;
  std::runtime_error *exception;
  std::string *v117;
  __int128 v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *size;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  std::string *v148;
  int v149;
  unsigned __int8 v150;
  unsigned __int8 v151;
  int v152;
  double v153;
  std::string *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  std::string *v164;
  int v165;
  std::string *v166;
  std::string::size_type v167;
  int v168;
  uint64_t v170;
  _QWORD *j;
  size_t v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  CoreML::TreeEnsembleBase *v176;
  double *v177;
  void *v178;
  CoreML::TreeEnsembleBase *v179;
  _QWORD *v180;
  uint64_t shared_weak_owners;
  _QWORD *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  CoreML::TreeEnsembleBase *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  CoreML::TreeEnsembleBase *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v224;
  std::__shared_weak_count **v226;
  unint64_t v228;
  __int128 v229;
  void *v230[3];
  char v231;
  __int128 v232;
  void *v233[3];
  char v234;
  char v235[8];
  void *v236;
  char v237;
  __int128 v238;
  void *v239[3];
  char v240;
  __int128 v241;
  void *v242[3];
  char v243;
  void *v244;
  void *v245;
  _QWORD *v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  void *v249[3];
  char v250;
  uint64_t *v251;
  uint64_t v252;
  std::string v253;
  _QWORD v254[2];
  CoreML::TreeEnsembleBase *v255;
  std::__shared_weak_count *v256;
  char v257;
  size_t __idx[2];
  uint64_t v259;
  std::string v260;
  std::string v261;
  _BYTE v262[40];
  __int128 v263;
  std::vector<std::string> v264;
  __int128 v265;
  uint64_t *v266;
  _QWORD *v267[2];
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  std::string __p;
  std::string v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  std::string v277;
  std::vector<std::string> v278;
  std::string *value;
  void *v280;
  void *v281;
  char v282;
  uint64_t v283;

  v6 = a1;
  v283 = *MEMORY[0x24BDAC8D0];
  v7 = (const void **)&(*a1)[1].~__shared_weak_count;
  if (a3)
  {
    if (*((char *)v7 + 23) >= 0)
      v8 = *((unsigned __int8 *)v7 + 23);
    else
      v8 = (size_t)v7[1];
    v9 = &v271;
    std::string::basic_string[abi:ne180100]((uint64_t)&v271, v8 + 11);
    if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v271.__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (*((char *)v7 + 23) >= 0)
        v10 = v7;
      else
        v10 = *v7;
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "Probability");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    CoreML::Pipeline::Classifier((const std::string *)v7, &v271, &__p, (uint64_t *)&v278);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v271, "");
    CoreML::Pipeline::Regressor((const std::string *)v7, &v271, (uint64_t *)&v278);
  }
  std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>((const CoreML::Model *)&v278, &v272);
  CoreML::Pipeline::~Pipeline((CoreML::Pipeline *)&v278);
  if ((a3 & 1) != 0 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v271.__r_.__value_.__l.__data_);
  v11 = (CoreML::Pipeline *)v272;
  v12 = v6[1];
  v268 = *v6;
  v269 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  turi::setup_pipeline_from_mldata(v11, (uint64_t **)&v268);
  v15 = v269;
  if (v269)
  {
    v16 = (unint64_t *)&v269->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v267[1] = 0;
  v267[0] = 0;
  v266 = (uint64_t *)v267;
  v18 = (*v6)->__vftable;
  if ((std::__shared_weak_count_vtbl *)(*v6)->__shared_owners_ != v18)
  {
    v19 = 0;
    do
    {
      v20 = (uint64_t *)((char *)v18 + 16 * v19);
      v21 = *v20;
      v22 = (std::__shared_weak_count *)v20[1];
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        v25 = *(unsigned __int8 *)(v21 + 28);
        do
          v26 = __ldaxr(v23);
        while (__stlxr(v26 - 1, v23));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      else
      {
        v25 = *(unsigned __int8 *)(v21 + 28);
      }
      if (v25 == 5)
      {
        for (i = 0; ; ++i)
        {
          v28 = (uint64_t *)((char *)(*v6)->__vftable + 16 * v19);
          v29 = *v28;
          v30 = (std::__shared_weak_count *)v28[1];
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
            v33 = *(_QWORD *)(v29 + 64);
            do
              v34 = __ldaxr(v31);
            while (__stlxr(v34 - 1, v31));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          else
          {
            v33 = *(_QWORD *)(v29 + 64);
          }
          if (i >= v33)
            break;
          v35 = (uint64_t *)((char *)(*v6)->__vftable + 16 * v19);
          v36 = *v35;
          v37 = (std::__shared_weak_count *)v35[1];
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
            v40 = *(_QWORD *)(v36 + 104);
            do
              v41 = __ldaxr(v38);
            while (__stlxr(v41 - 1, v38));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v40 = *(_QWORD *)(v36 + 104);
          }
          v278.__begin_ = (std::vector<std::string>::pointer)(v40 + i);
          std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v266, (unint64_t *)&v278, (uint64_t *)&v278);
        }
      }
      ++v19;
      v18 = (*v6)->__vftable;
    }
    while (v19 < ((*v6)->__shared_owners_ - (uint64_t)v18) >> 4);
  }
  CoreML::FeatureType::Double((uint64_t *)&v265);
  memset(&v264, 0, sizeof(v264));
  CoreML::FeatureType::Double((uint64_t *)&v263);
  v42 = *a2;
  v43 = a2[1];
  v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (char *)*a2) >> 3);
  memset(&v278, 0, sizeof(v278));
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v278, v42, v43, v44);
  turi::gl_sarray::gl_sarray(v262, &v278, 7);
  *(_QWORD *)&v273 = &v278;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
  turi::gl_sarray::astype((uint64_t)v262, 5, 1, (uint64_t)&v273);
  std::string::basic_string[abi:ne180100]<0>(&v261, "X");
  v259 = 0;
  memset(&v260, 0, sizeof(v260));
  __idx[0] = 0;
  __idx[1] = 0;
  turi::gl_sarray::unpack((turi::gl_sarray *)&v273, (uint64_t)&v261, (uint64_t)&v260, (uint64_t)&turi::FLEX_UNDEFINED, (uint64_t **)__idx, (uint64_t)&v277);
  std::string::basic_string[abi:ne180100]<0>(&v255, "X.vertices");
  turi::gl_sframe::operator[]((uint64_t)&v277, (uint64_t)&v255, (turi::gl_sarray *)&v278);
  turi::gl_sarray::operator=((uint64_t)v262, (uint64_t)&v278);
  v278.__begin_ = (std::vector<std::string>::pointer)off_24D91EA30;
  if (v282 < 0)
    operator delete(v281);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v278);
  if (v257 < 0)
    operator delete(v255);
  v277.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
  v45 = (std::__shared_weak_count *)v277.__r_.__value_.__r.__words[2];
  if (v277.__r_.__value_.__r.__words[2])
  {
    v46 = (unint64_t *)(v277.__r_.__value_.__r.__words[2] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v255 = (CoreML::TreeEnsembleBase *)__idx;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
  if (v260.__r_.__value_.__r.__words[0])
  {
    v260.__r_.__value_.__l.__size_ = v260.__r_.__value_.__r.__words[0];
    operator delete(v260.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v261.__r_.__value_.__l.__data_);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v273);
  v255 = 0;
  v256 = 0;
  v226 = v6;
  if ((a3 & 1) != 0)
  {
    get_deleter = (std::vector<std::string>::size_type)(*v6)[1].__vftable[1].__get_deleter;
    v49 = operator new();
    v50 = (const void **)&(*v6)[1].~__shared_weak_count;
    if (*((char *)v50 + 23) >= 0)
      v51 = *((unsigned __int8 *)v50 + 23);
    else
      v51 = (size_t)v50[1];
    begin = &v278;
    std::string::basic_string[abi:ne180100]((uint64_t)&v278, v51 + 11);
    if (SHIBYTE(v278.__end_cap_.__value_) < 0)
      begin = v278.__begin_;
    if (v51)
    {
      if (*((char *)v50 + 23) >= 0)
        v53 = v50;
      else
        v53 = *v50;
      memmove(begin, v53, v51);
    }
    strcpy((char *)begin + v51, "Probability");
    std::string::basic_string[abi:ne180100]<0>(&v273, "Tree Ensemble");
    CoreML::TreeEnsembleClassifier::TreeEnsembleClassifier(v49, v50, &v278, &v273);
    if (SBYTE7(v274) < 0)
      operator delete((void *)v273);
    if (SHIBYTE(v278.__end_cap_.__value_) < 0)
      operator delete(v278.__begin_);
    v54 = (const void **)&(*v6)[1].~__shared_weak_count;
    if (*((char *)v54 + 23) >= 0)
      v55 = *((unsigned __int8 *)v54 + 23);
    else
      v55 = (size_t)v54[1];
    v56 = &v278;
    std::string::basic_string[abi:ne180100]((uint64_t)&v278, v55 + 11);
    if (SHIBYTE(v278.__end_cap_.__value_) < 0)
      v56 = v278.__begin_;
    if (v55)
    {
      if (*((char *)v54 + 23) >= 0)
        v57 = v54;
      else
        v57 = *v54;
      memmove(v56, v57, v55);
    }
    strcpy((char *)v56 + v55, "Probability");
    if (SHIBYTE(v264.__end_cap_.__value_) < 0)
      operator delete(v264.__begin_);
    v264 = v278;
    if (get_deleter == 2)
    {
      CoreML::TreeEnsembleClassifier::setPostEvaluationTransform(v49, 2);
      v228 = 1;
    }
    else
    {
      CoreML::TreeEnsembleClassifier::setPostEvaluationTransform(v49, 1);
      v228 = get_deleter;
    }
    v74 = (*v6)[1].__vftable;
    on_zero_shared_weak = (std::string::size_type)v74->__on_zero_shared_weak;
    v75 = (std::string::size_type)v74[1].~__shared_weak_count;
    v260.__r_.__value_.__r.__words[0] = on_zero_shared_weak;
    v260.__r_.__value_.__l.__size_ = v75;
    if (v75)
    {
      v77 = (unint64_t *)(v75 + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
      v74 = (*v6)[1].__vftable;
    }
    v79 = BYTE4(v74->__get_deleter);
    if (v79)
    {
      if (v79 != 2)
        turi::export_xgboost_model(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::string> const&,BOOL,BOOL,std::map<std::string,turi::flexible_type> const&)::$_0::operator()();
      std::vector<std::string>::vector(&v278, get_deleter);
      if (get_deleter)
      {
        v80 = 0;
        v81 = 0;
        do
        {
          std::string::operator=(&v278.__begin_[v80], (const std::string *)(*(_QWORD *)(*(_QWORD *)(on_zero_shared_weak + 80) + v81) + 8));
          v81 += 16;
          ++v80;
          --get_deleter;
        }
        while (get_deleter);
      }
      CoreML::TreeEnsembleClassifier::setOutputClassList(v49, &v278);
      CoreML::FeatureType::String((uint64_t *)&v273);
      v82 = v273;
      v273 = 0uLL;
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
      v265 = v82;
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v86 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      CoreML::FeatureType::Dictionary(2, (uint64_t *)&v273);
      v89 = v273;
      v273 = 0uLL;
      v90 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
      v263 = v89;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v93 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v94 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      *(_QWORD *)&v273 = &v278;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
    }
    else
    {
      std::vector<long long>::vector(&v261, get_deleter);
      if (get_deleter)
      {
        v96 = 0;
        while (2)
        {
          v97 = *(_QWORD *)(v260.__r_.__value_.__r.__words[0] + 80) + 16 * v96;
          v98 = 0;
          switch(*(_BYTE *)(v97 + 12))
          {
            case 0:
              v98 = *(_QWORD *)v97;
              goto LABEL_184;
            case 1:
              v98 = (uint64_t)*(double *)v97;
              goto LABEL_184;
            case 2:
              v103 = *(_QWORD *)v97;
              v104 = (char **)(*(_QWORD *)v97 + 8);
              __idx[0] = 0;
              v105 = (char *)v104;
              if (*(char *)(v103 + 31) < 0)
                v105 = *v104;
              v106 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v278, v105);
              v98 = std::stoll(v106, __idx, 10);
              if (SHIBYTE(v278.__end_cap_.__value_) < 0)
                operator delete(v278.__begin_);
              if (*(char *)(v103 + 31) < 0)
                v107 = *(_QWORD *)(v103 + 16);
              else
                v107 = *(unsigned __int8 *)(v103 + 31);
              if (__idx[0] != v107)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v117 = std::string::append(&v277, " cannot be interpreted as an integer");
                v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                v278.__end_cap_.__value_ = (std::string *)v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v278.__begin_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, (const std::string *)&v278);
                __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_184;
            case 3:
              v99 = *(_QWORD *)v97;
              memset(&v278, 0, sizeof(v278));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v278, *(const void **)(v99 + 8), *(_QWORD *)(v99 + 16), (uint64_t)(*(_QWORD *)(v99 + 16) - *(_QWORD *)(v99 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (v278.__begin_)
              {
                v278.__end_ = v278.__begin_;
                operator delete(v278.__begin_);
              }
              goto LABEL_183;
            case 4:
              v108 = *(_QWORD *)v97;
              memset(&v278, 0, sizeof(v278));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v278, *(uint64_t **)(v108 + 8), *(uint64_t **)(v108 + 16), (uint64_t)(*(_QWORD *)(v108 + 16) - *(_QWORD *)(v108 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v277);
              goto LABEL_183;
            case 5:
              v109 = *(_QWORD *)v97;
              memset(&v278, 0, sizeof(v278));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v278, *(uint64_t **)(v109 + 8), *(uint64_t **)(v109 + 16), (uint64_t)(*(_QWORD *)(v109 + 16) - *(_QWORD *)(v109 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v277);
              goto LABEL_183;
            case 6:
              v98 = (uint64_t)(*(_QWORD *)v97 << 8) >> 8;
              goto LABEL_184;
            case 7:
              goto LABEL_184;
            case 8:
              v110 = *(_QWORD *)v97;
              v111 = *(_QWORD *)(v110 + 16);
              *(_QWORD *)&v273 = *(_QWORD *)(v110 + 8);
              *((_QWORD *)&v273 + 1) = v111;
              if (v111)
              {
                v112 = (unsigned int *)(v111 + 8);
                do
                  v113 = __ldxr(v112);
                while (__stxr(v113 + 1, v112));
              }
              v114 = *(_OWORD *)(v110 + 24);
              v115 = *(_OWORD *)(v110 + 56);
              v275 = *(_OWORD *)(v110 + 40);
              v276 = v115;
              v274 = v114;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&v273 + 1);
              goto LABEL_183;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&v278, *(_QWORD *)v97 + 8);
              turi::flexible_type_fail(0);
              if (v280)
              {
                v281 = v280;
                operator delete(v280);
              }
              if (v278.__end_cap_.__value_)
              {
                value = v278.__end_cap_.__value_;
                operator delete(v278.__end_cap_.__value_);
              }
              end = (std::__shared_weak_count *)v278.__end_;
              if (v278.__end_)
              {
                p_size = &v278.__end_->__r_.__value_.__l.__size_;
                do
                  v102 = __ldaxr(p_size);
                while (__stlxr(v102 - 1, p_size));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
                  std::__shared_weak_count::__release_weak(end);
                }
              }
LABEL_183:
              v98 = 0;
LABEL_184:
              *(_QWORD *)(v261.__r_.__value_.__r.__words[0] + 8 * v96++) = v98;
              if (v96 == get_deleter)
                break;
              continue;
            default:
              turi::flexible_type_fail(0);
              __break(1u);
              return;
          }
          break;
        }
      }
      CoreML::TreeEnsembleClassifier::setOutputClassList(v49, (uint64_t *)&v261);
      CoreML::FeatureType::Int64((uint64_t *)&v278);
      v119 = *(_OWORD *)&v278.__begin_;
      v278.__begin_ = 0;
      v278.__end_ = 0;
      v120 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
      v265 = v119;
      if (v120)
      {
        v121 = (unint64_t *)&v120->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v123 = (std::__shared_weak_count *)v278.__end_;
      if (v278.__end_)
      {
        v124 = &v278.__end_->__r_.__value_.__l.__size_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      CoreML::FeatureType::Dictionary(1, (uint64_t *)&v278);
      v126 = *(_OWORD *)&v278.__begin_;
      v278.__begin_ = 0;
      v278.__end_ = 0;
      v127 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
      v263 = v126;
      if (v127)
      {
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      v130 = (std::__shared_weak_count *)v278.__end_;
      if (v278.__end_)
      {
        v131 = &v278.__end_->__r_.__value_.__l.__size_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      if (v261.__r_.__value_.__r.__words[0])
      {
        v261.__r_.__value_.__l.__size_ = v261.__r_.__value_.__r.__words[0];
        operator delete(v261.__r_.__value_.__l.__data_);
      }
    }
    *(_QWORD *)&v273 = 0;
    std::vector<double>::vector(&v278, v228, &v273);
    CoreML::TreeEnsembleBase::setDefaultPredictionValue(v49, (uint64_t **)&v278);
    if (v278.__begin_)
    {
      v278.__end_ = v278.__begin_;
      operator delete(v278.__begin_);
    }
    std::shared_ptr<CoreML::TreeEnsembleBase>::reset[abi:ne180100]<CoreML::TreeEnsembleClassifier,void>(&v255, v49);
    size = (std::__shared_weak_count *)v260.__r_.__value_.__l.__size_;
    if (v260.__r_.__value_.__l.__size_)
    {
      v134 = (unint64_t *)(v260.__r_.__value_.__l.__size_ + 8);
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v58 = operator new();
    v59 = (*v6)[1].__vftable;
    std::string::basic_string[abi:ne180100]<0>(&v278, "Tree Ensemble");
    CoreML::TreeEnsembleRegressor::TreeEnsembleRegressor(v58, v59, &v278);
    std::shared_ptr<CoreML::TreeEnsembleBase>::reset[abi:ne180100]<CoreML::TreeEnsembleRegressor,void>(&v255, v58);
    if (SHIBYTE(v278.__end_cap_.__value_) < 0)
      operator delete(v278.__begin_);
    CoreML::TreeEnsembleBase::setDefaultPredictionValue(v255, 0.5);
    CoreML::FeatureType::Double((uint64_t *)&v278);
    v60 = *(_OWORD *)&v278.__begin_;
    v278.__begin_ = 0;
    v278.__end_ = 0;
    v61 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
    v265 = v60;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = (std::__shared_weak_count *)v278.__end_;
    if (v278.__end_)
    {
      v65 = &v278.__end_->__r_.__value_.__l.__size_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    CoreML::FeatureType::Double((uint64_t *)&v278);
    v67 = *(_OWORD *)&v278.__begin_;
    v278.__begin_ = 0;
    v278.__end_ = 0;
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
    v263 = v67;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = (std::__shared_weak_count *)v278.__end_;
    if (v278.__end_)
    {
      v72 = &v278.__end_->__r_.__value_.__l.__size_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v228 = 1;
  }
  turi::gl_sarray::range_iterator((turi::gl_sarray *)v262, 0, 0xFFFFFFFFFFFFFFFFLL, &v278);
  v254[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)&v278);
  v254[1] = v136;
  v224 = turi::gl_sarray_range::end((turi::gl_sarray_range *)&v278);
  v137 = 0;
  while (v254[0] != v224)
  {
    v138 = turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v254);
    v140 = *(_QWORD *)(*(_QWORD *)v138 + 8);
    v139 = *(_QWORD *)(*(_QWORD *)v138 + 16);
    while (v140 != v139)
    {
      std::map<std::string,turi::flexible_type>::map[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)&v273, *(std::string::size_type **)(*(_QWORD *)v140 + 8), *(std::string::size_type **)(*(_QWORD *)v140 + 16));
      std::string::basic_string[abi:ne180100]<0>(&v277, "id");
      v141 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v273, (const void **)&v277.__r_.__value_.__l.__data_);
      if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v277.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v261, "type");
      v142 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v273, (const void **)&v261.__r_.__value_.__l.__data_);
      v143 = *(_QWORD *)v142;
      if (*(char *)(*(_QWORD *)v142 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)(v143 + 8), *(_QWORD *)(v143 + 16));
      }
      else
      {
        v144 = *(_OWORD *)(v143 + 8);
        v277.__r_.__value_.__r.__words[2] = *(_QWORD *)(v143 + 24);
        *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v144;
      }
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v261, "value_hexadecimal");
      v145 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v273, (const void **)&v261.__r_.__value_.__l.__data_);
      v146 = *(_QWORD *)v145;
      if (*(char *)(*(_QWORD *)v145 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(v146 + 8), *(_QWORD *)(v146 + 16));
      }
      else
      {
        v147 = *(_OWORD *)(v146 + 8);
        v253.__r_.__value_.__r.__words[2] = *(_QWORD *)(v146 + 24);
        *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v147;
      }
      LODWORD(v260.__r_.__value_.__l.__data_) = 0;
      LODWORD(__idx[0]) = 0;
      LODWORD(v252) = 0;
      LODWORD(v251) = 0;
      if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v148 = &v253;
      else
        v148 = (std::string *)v253.__r_.__value_.__r.__words[0];
      sscanf((const char *)v148, "%02X%02X%02X%02X", &v260, __idx, &v252, &v251);
      v149 = v260.__r_.__value_.__s.__data_[0];
      v150 = __idx[0];
      v151 = v252;
      v152 = (int)v251;
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v253.__r_.__value_.__l.__data_);
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
      v153 = COERCE_FLOAT(v149 & 0xFF0000FF | (unsigned __int16)(v150 << 8) | (v151 << 16) | (v152 << 24));
      if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v277.__r_.__value_.__l.__size_ != 4)
          goto LABEL_245;
        v154 = (std::string *)v277.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) != 4)
          goto LABEL_245;
        v154 = &v277;
      }
      if (LODWORD(v154->__r_.__value_.__l.__data_) != 1717658988)
      {
LABEL_245:
        std::string::basic_string[abi:ne180100]<0>(&v261, "yes_child");
        v155 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v273, (const void **)&v261.__r_.__value_.__l.__data_);
        if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v261.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v261, "no_child");
        v156 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v273, (const void **)&v261.__r_.__value_.__l.__data_);
        if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v261.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v261, "missing_child");
        v157 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v273, (const void **)&v261.__r_.__value_.__l.__data_);
        if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v261.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v260, "name");
        v158 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v273, (const void **)&v260.__r_.__value_.__l.__data_);
        v159 = *(_QWORD *)v158;
        if (*(char *)(*(_QWORD *)v158 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v261, *(const std::string::value_type **)(v159 + 8), *(_QWORD *)(v159 + 16));
        }
        else
        {
          v160 = *(_OWORD *)(v159 + 8);
          v261.__r_.__value_.__r.__words[2] = *(_QWORD *)(v159 + 24);
          *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v160;
        }
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v260.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(__idx, "type");
        v161 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v273, (const void **)__idx);
        v162 = *(_QWORD *)v161;
        if (*(char *)(*(_QWORD *)v161 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)(v162 + 8), *(_QWORD *)(v162 + 16));
        }
        else
        {
          v163 = *(_OWORD *)(v162 + 8);
          v260.__r_.__value_.__r.__words[2] = *(_QWORD *)(v162 + 24);
          *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v163;
        }
        if (SHIBYTE(v259) < 0)
          operator delete((void *)__idx[0]);
        __idx[0] = 0;
        if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v164 = &v261;
        else
          v164 = (std::string *)v261.__r_.__value_.__r.__words[0];
        v165 = sscanf((const char *)v164, "{%zd}", __idx);
        v252 = v165;
        if (v165 != 1)
        {
          v251 = &v252;
          turi::export_xgboost_model(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::string> const&,BOOL,BOOL,std::map<std::string,turi::flexible_type> const&)::$_1::operator()();
        }
        if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) == 9)
          {
            v166 = &v260;
            goto LABEL_270;
          }
          goto LABEL_274;
        }
        if (v260.__r_.__value_.__l.__size_ != 9)
          goto LABEL_274;
        v166 = (std::string *)v260.__r_.__value_.__r.__words[0];
LABEL_270:
        v167 = v166->__r_.__value_.__r.__words[0];
        v168 = v166->__r_.__value_.__s.__data_[8];
        if (v167 == 0x6F74616369646E69 && v168 == 114)
        {
          v153 = 1.0;
          v173 = 4;
          v170 = __idx[0];
          v156 = v157;
        }
        else
        {
LABEL_274:
          v170 = __idx[0];
          for (j = v267[0]; j; j = (_QWORD *)*j)
          {
            v172 = j[4];
            if (__idx[0] >= v172)
            {
              if (v172 >= __idx[0])
              {
                CoreML::TreeEnsembleBase::setupBranchNode(v255, v137, v141, __idx[0], 0, v155, v156, v153);
                CoreML::TreeEnsembleBase::setMissingValueBehavior(v255, v137, v141, v157 != v155);
LABEL_288:
                if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v260.__r_.__value_.__l.__data_);
                if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
                {
                  v178 = (void *)v261.__r_.__value_.__r.__words[0];
LABEL_292:
                  operator delete(v178);
                }
                goto LABEL_293;
              }
              ++j;
            }
          }
          v173 = 0;
        }
        CoreML::TreeEnsembleBase::setupBranchNode(v255, v137, v141, v170, v173, v155, v156, v153);
        goto LABEL_288;
      }
      if (a4)
      {
        v174 = (unint64_t)(*v226)[1].__vftable[1].__get_deleter;
        v175 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3);
        if (v174 >= 3)
          v175 /= v174;
        v153 = v153 / (double)v175;
      }
      v176 = v255;
      v177 = (double *)operator new(0x10uLL);
      v261.__r_.__value_.__r.__words[2] = (std::string::size_type)(v177 + 2);
      *(_QWORD *)v177 = v137 % v228;
      v177[1] = v153;
      v261.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
      v261.__r_.__value_.__l.__size_ = (std::string::size_type)(v177 + 2);
      CoreML::TreeEnsembleBase::setupLeafNode(v176, v137, v141, (uint64_t *)&v261);
      v178 = (void *)v261.__r_.__value_.__r.__words[0];
      if (v261.__r_.__value_.__r.__words[0])
      {
        v261.__r_.__value_.__l.__size_ = v261.__r_.__value_.__r.__words[0];
        goto LABEL_292;
      }
LABEL_293:
      if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v277.__r_.__value_.__l.__data_);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v273, *((_QWORD **)&v273 + 1));
      v140 += 16;
    }
    ++v137;
    turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)v254);
    v6 = v226;
  }
  turi::gl_sarray_range::~gl_sarray_range((unint64_t **)&v278);
  v179 = v255;
  std::string::basic_string[abi:ne180100]<0>(v180, "__vectorized_features__");
  shared_weak_owners = (*v6)[2].__shared_weak_owners_;
  v182 = operator new(8uLL);
  v244 = v182;
  *v182 = shared_weak_owners;
  v245 = v182 + 1;
  v246 = v182 + 1;
  CoreML::FeatureType::Array((uint64_t)&v244, &v247);
  (*(void (**)(void **__return_ptr, CoreML::TreeEnsembleBase *, std::vector<std::string> *, uint64_t *))(*(_QWORD *)v179 + 16))(v249, v179, &v278, &v247);
  if (v250 < 0)
    operator delete(v249[1]);
  v183 = v248;
  if (v248)
  {
    v184 = (unint64_t *)&v248->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  if (SHIBYTE(v278.__end_cap_.__value_) < 0)
    operator delete(v278.__begin_);
  v186 = v255;
  v241 = v265;
  if (*((_QWORD *)&v265 + 1))
  {
    v187 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
    do
      v188 = __ldxr(v187);
    while (__stxr(v188 + 1, v187));
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v186 + 24))(v242);
  if (v243 < 0)
    operator delete(v242[1]);
  if (*((_QWORD *)&v241 + 1))
  {
    v189 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v241 + 1) + 16))(*((_QWORD *)&v241 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v241 + 1));
    }
  }
  if (a3)
  {
    v191 = v255;
    v238 = v263;
    if (*((_QWORD *)&v263 + 1))
    {
      v192 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    (*(void (**)(void **__return_ptr, CoreML::TreeEnsembleBase *, std::vector<std::string> *, __int128 *))(*(_QWORD *)v191 + 24))(v239, v191, &v264, &v238);
    if (v240 < 0)
      operator delete(v239[1]);
    v194 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
    if (*((_QWORD *)&v238 + 1))
    {
      v195 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 - 1, v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }
  }
  CoreML::TreeEnsembleBase::finish((CoreML::TreeEnsembles **)v255);
  CoreML::Pipeline::add((CoreML::Pipeline *)v272, v255, (CoreML::Result *)v235);
  if (v237 < 0)
    operator delete(v236);
  v197 = v272;
  v232 = v265;
  if (*((_QWORD *)&v265 + 1))
  {
    v198 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
    do
      v199 = __ldxr(v198);
    while (__stxr(v199 + 1, v198));
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v197 + 24))(v233);
  if (v234 < 0)
    operator delete(v233[1]);
  if (*((_QWORD *)&v232 + 1))
  {
    v200 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v232 + 1) + 16))(*((_QWORD *)&v232 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v232 + 1));
    }
  }
  if (a3)
  {
    v202 = v272;
    v229 = v263;
    if (*((_QWORD *)&v263 + 1))
    {
      v203 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
      do
        v204 = __ldxr(v203);
      while (__stxr(v204 + 1, v203));
    }
    (*(void (**)(void **__return_ptr, uint64_t, std::vector<std::string> *, __int128 *))(*(_QWORD *)v202 + 24))(v230, v202, &v264, &v229);
    if (v231 < 0)
      operator delete(v230[1]);
    v205 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
    if (*((_QWORD *)&v229 + 1))
    {
      v206 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
        std::__shared_weak_count::__release_weak(v205);
      }
    }
  }
  v208 = turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v272);
  turi::add_metadata(v208, a5);
  std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Pipeline>,void>(&v272, a6);
  v209 = v256;
  if (v256)
  {
    v210 = (unint64_t *)&v256->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v262);
  v212 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
  if (*((_QWORD *)&v263 + 1))
  {
    v213 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  if (SHIBYTE(v264.__end_cap_.__value_) < 0)
    operator delete(v264.__begin_);
  v215 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
  if (*((_QWORD *)&v265 + 1))
  {
    v216 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v266, v267[0]);
  v218 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
  if (*((_QWORD *)&v272 + 1))
  {
    v219 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
}

void sub_218473364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a68;
  void *v68;
  int v69;
  uint64_t v70;
  void *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;

  if (*(char *)(v70 - 169) < 0)
    operator delete(*(void **)(v70 - 192));
  if (*(char *)(v70 - 201) < 0)
  {
    operator delete(*(void **)(v70 - 224));
    if ((v69 & 1) == 0)
    {
LABEL_8:
      v72 = (void *)STACK[0x220];
      if (STACK[0x220])
      {
        STACK[0x228] = (unint64_t)v72;
        operator delete(v72);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
      if (a68)
      {
        p_shared_owners = (unint64_t *)&a68->__shared_owners_;
        do
          v74 = __ldaxr(p_shared_owners);
        while (__stlxr(v74 - 1, p_shared_owners));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))a68->__on_zero_shared)(a68);
          std::__shared_weak_count::__release_weak(a68);
        }
      }
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&STACK[0x238]);
      v75 = (std::__shared_weak_count *)STACK[0x268];
      if (STACK[0x268])
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      if (SLOBYTE(STACK[0x287]) < 0)
        operator delete((void *)STACK[0x270]);
      v78 = (std::__shared_weak_count *)STACK[0x298];
      if (STACK[0x298])
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&STACK[0x2A8], (_QWORD *)STACK[0x2B0]);
      v81 = (std::__shared_weak_count *)STACK[0x308];
      if (STACK[0x308])
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v69)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v68);
  goto LABEL_8;
}

void std::shared_ptr<CoreML::TreeEnsembleBase>::reset[abi:ne180100]<CoreML::TreeEnsembleRegressor,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleRegressor,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::shared_ptr<CoreML::TreeEnsembleBase>::reset[abi:ne180100]<CoreML::TreeEnsembleClassifier,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleClassifier,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void turi::export_xgboost_model(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::string> const&,BOOL,BOOL,std::map<std::string,turi::flexible_type> const&)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/coreml_export/xgboost_exporter.cpp", 109);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"n", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/coreml_export/xgboost_exporter.cpp", "operator()", 220, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::export_xgboost_model(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::string> const&,BOOL,BOOL,std::map<std::string,turi::flexible_type> const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218473B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void sub_218473D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleRegressor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D9426B0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_218473E84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CoreML::TreeEnsembleRegressor *,std::shared_ptr<CoreML::TreeEnsembleBase>::__shared_ptr_default_delete<CoreML::TreeEnsembleBase,CoreML::TreeEnsembleRegressor>,std::allocator<CoreML::TreeEnsembleRegressor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreML::TreeEnsembleRegressor *,std::shared_ptr<CoreML::TreeEnsembleBase>::__shared_ptr_default_delete<CoreML::TreeEnsembleBase,CoreML::TreeEnsembleRegressor>,std::allocator<CoreML::TreeEnsembleRegressor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleClassifier,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D942728;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_218473F54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CoreML::TreeEnsembleClassifier *,std::shared_ptr<CoreML::TreeEnsembleBase>::__shared_ptr_default_delete<CoreML::TreeEnsembleBase,CoreML::TreeEnsembleClassifier>,std::allocator<CoreML::TreeEnsembleClassifier>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreML::TreeEnsembleClassifier *,std::shared_ptr<CoreML::TreeEnsembleBase>::__shared_ptr_default_delete<CoreML::TreeEnsembleBase,CoreML::TreeEnsembleClassifier>,std::allocator<CoreML::TreeEnsembleClassifier>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::map<std::string,turi::flexible_type>::map[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t a1, std::string::size_type *a2, std::string::size_type *a3)
{
  uint64_t *v4;
  std::string::size_type *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_impl<std::pair<turi::flexible_type,turi::flexible_type> const&>((uint64_t **)a1, v4, v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_218474030(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_impl<std::pair<turi::flexible_type,turi::flexible_type> const&>(uint64_t **a1, uint64_t *a2, std::string::size_type *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v8;
  const void **v9;
  uint64_t *v10[3];

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<turi::flexible_type,turi::flexible_type> const&>((uint64_t)a1, a3, (uint64_t)v10);
  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v9, &v8, (const void **)v10[0] + 4);
  v6 = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v5, v10[0]);
    v6 = v10[0];
    v10[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  return v6;
}

void sub_2184740C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<turi::flexible_type,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, std::string::size_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_218474130(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(std::string *this, std::string::size_type *a2)
{
  uint64_t v4;
  std::string::size_type v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[13];
  char v14;
  uint64_t v15;

  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_4;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_4:
      v13[0] = *MEMORY[0x24BEDB7F0];
      v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v13[2] = v4;
      v13[3] = MEMORY[0x24BEDB848] + 16;
      if (v14 < 0)
        operator delete((void *)v13[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v15);
      break;
    case 2:
      v5 = *a2;
      if (*(char *)(*a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v6 = *(_OWORD *)(v5 + 8);
        this->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 24);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v13, (_QWORD *)(*a2 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v13, (uint64_t *)(*a2 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v13, (_QWORD *)(*a2 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)a2, this);
      break;
    case 7:
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
      this->__r_.__value_.__r.__words[2] = 0;
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v13, (_QWORD *)(*a2 + 8));
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  v7 = this + 1;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  if (a2 + 2 != (std::string::size_type *)&this[1])
  {
    v8 = a2[2];
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(std::string::size_type *)((char *)a2 + 21);
    v7->__r_.__value_.__r.__words[0] = v8;
    v9 = *((unsigned __int8 *)a2 + 28);
    this[1].__r_.__value_.__s.__data_[12] = v9;
    if (v9 <= 9 && ((1 << v9) & 0x33C) != 0)
    {
      v10 = (unint64_t *)v7->__r_.__value_.__r.__words[0];
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  return this;
}

void sub_218474398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_19_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_xgboost_exporter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_21847462C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_10_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_6()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_data_preparation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_dc_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184749AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(unsigned int *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD v5[2];
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5[0] = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<unsigned long>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    v5[1] = *a2;
    v6 = 0;
    v7 = 0;
    LODWORD(v5[0]) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v5);
  }
}

void sub_218474AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<unsigned long>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<std::vector<turi::flexible_type>>(unsigned int *a1, __n128 *a2)
{
  __n128 *v4;
  _QWORD v5[11];

  v5[10] = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5[0] = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<std::vector<turi::flexible_type>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<turi::flexible_type>>((uint64_t)v5, a2);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v5);
  }
}

void sub_218474BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<std::vector<turi::flexible_type>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

void __cxx_global_var_init_70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_drawing_classifier_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::evaluation::get_index_map(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD v58[2];
  _BYTE v59[40];
  uint64_t v60;
  std::__shared_weak_count *v61;
  _BYTE v62[40];
  uint64_t v63;
  std::__shared_weak_count *v64;
  _BYTE v65[47];
  _QWORD *v66;
  void **v67[2];
  _QWORD *v68[2];
  _QWORD v69[33];
  _QWORD v70[3];

  v70[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1[1];
  v63 = *a1;
  v64 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  turi::gl_sarray::gl_sarray((uint64_t)v65, &v63);
  v8 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = a2[1];
  v60 = *a2;
  v61 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  turi::gl_sarray::gl_sarray((uint64_t)v62, &v60);
  v14 = v61;
  if (v61)
  {
    v15 = (unint64_t *)&v61->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  turi::gl_sarray::unique((turi::gl_sarray *)v65, (uint64_t)v68);
  turi::gl_sarray::sort((turi::gl_sarray *)v68, 1, (uint64_t)v59);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v68);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  turi::gl_sarray::range_iterator((turi::gl_sarray *)v59, 0, 0xFFFFFFFFFFFFFFFFLL, v68);
  v58[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)v68);
  v58[1] = v17;
  v18 = turi::gl_sarray_range::end((turi::gl_sarray_range *)v68);
  v19 = 0;
  while (v58[0] != v18)
  {
    v20 = turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v58);
    memset(v70, 0, 13);
    if ((_QWORD *)v20 != v70)
    {
      v21 = *(_QWORD *)v20;
      *(_QWORD *)((char *)v70 + 5) = *(_QWORD *)(v20 + 5);
      v70[0] = v21;
      BYTE4(v70[1]) = *(_BYTE *)(v20 + 12);
      if (BYTE4(v70[1]) <= 9u && ((1 << SBYTE4(v70[1])) & 0x33C) != 0)
      {
        v23 = (unint64_t *)v70[0];
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
      }
    }
    v66 = v70;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a3, (unsigned __int8 *)v70, (uint64_t)&std::piecewise_construct, (void **)&v66)+ 4) = v19;
    switch(BYTE4(v70[1]))
    {
      case 2:
        v25 = (unint64_t *)v70[0];
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v28 = v70[0];
          if (v70[0])
          {
            if (*(char *)(v70[0] + 31) < 0)
              operator delete(*(void **)(v70[0] + 8));
            v29 = v28;
            v30 = 0x1012C404EF22A49;
            goto LABEL_67;
          }
        }
        break;
      case 3:
        v42 = (unint64_t *)v70[0];
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          v45 = v70[0];
          if (v70[0])
          {
            v46 = *(void **)(v70[0] + 8);
            if (v46)
            {
              *(_QWORD *)(v70[0] + 16) = v46;
              operator delete(v46);
            }
            v29 = v45;
            v30 = 0x1080C409938AC02;
            goto LABEL_67;
          }
        }
        break;
      case 4:
        v31 = (unint64_t *)v70[0];
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v34 = v70[0];
          if (v70[0])
          {
            v67[0] = (void **)(v70[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v67);
            goto LABEL_60;
          }
        }
        break;
      case 5:
        v47 = (unint64_t *)v70[0];
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          v34 = v70[0];
          if (v70[0])
          {
            v67[0] = (void **)(v70[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v67);
LABEL_60:
            v29 = v34;
            v30 = 0x1020C405E66F15BLL;
            goto LABEL_67;
          }
        }
        break;
      case 8:
        v50 = (unint64_t *)v70[0];
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          v53 = v70[0];
          if (v70[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v70[0] + 16));
            v29 = v53;
            v41 = -235920773;
            goto LABEL_66;
          }
        }
        break;
      case 9:
        v35 = (unint64_t *)v70[0];
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = v70[0];
          if (v70[0])
          {
            v39 = *(void **)(v70[0] + 48);
            if (v39)
            {
              *(_QWORD *)(v70[0] + 56) = v39;
              operator delete(v39);
            }
            v40 = *(void **)(v38 + 24);
            if (v40)
            {
              *(_QWORD *)(v38 + 32) = v40;
              operator delete(v40);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v38 + 8);
            v29 = v38;
            v41 = 2071181815;
LABEL_66:
            v30 = v41 | 0x1030C4000000000;
LABEL_67:
            MEMORY[0x219A19A08](v29, v30);
          }
        }
        break;
      default:
        break;
    }
    ++v19;
    turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)v58);
  }
  turi::gl_sarray_range::~gl_sarray_range(v68);
  if (turi::gl_sarray::dtype((turi::gl_sarray *)v62) == 1 && *(_QWORD *)(a3 + 24) != 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v68);
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"can be of type float only when the number of classes is 2", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" (i.e binary classification). This dataset has ", 47);
    v56 = (_QWORD *)std::ostream::operator<<();
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" classes.", 9);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v57);
    v67[0] = (void **)v68;
    turi::evaluation::get_index_map(std::shared_ptr<turi::unity_sarray> const&,std::shared_ptr<turi::unity_sarray> const&)::$_0::operator()();
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v59);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v62);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v65);
}

void sub_2184751E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v35);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a12);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a19);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a26);
  _Unwind_Resume(a1);
}

void turi::evaluation::_supervised_streaming_evaluator(turi::unity_sarray **a1, turi::unity_sarray **a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char **v48;
  char *v49[2];
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  __int128 v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  void *__p;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  turi::unity_sarray::get_underlying_sarray(*a1, &v51);
  turi::unity_sarray::get_underlying_sarray(*a2, &v50);
  v49[0] = 0;
  v49[1] = 0;
  v48 = v49;
  v10 = (_QWORD *)*a4;
  v8 = a4 + 1;
  v9 = v10;
  if (v10 != v8)
  {
    do
    {
      *(_QWORD *)&v55 = 0;
      DWORD2(v55) = 0;
      BYTE12(v55) = 0;
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v55, v9 + 7);
      *(_QWORD *)((char *)&v58 + 5) = *(_QWORD *)((char *)&v55 + 5);
      *(_QWORD *)&v58 = v55;
      BYTE12(v58) = BYTE12(v55);
      LODWORD(__p) = 0;
      *(_QWORD *)&v55 = v9 + 4;
      v11 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v48, (const void **)v9 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v55);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v11 + 14, (unsigned int *)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
      v12 = (_QWORD *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v9[2];
          v16 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v16);
      }
      v9 = v13;
    }
    while (v13 != v8);
  }
  if (*((char *)a3 + 23) < 0)
  {
    v18 = a3[1];
    if (v18 == 3 && *(_WORD *)*a3 == 30049 && *(_BYTE *)(*a3 + 2) == 99)
      goto LABEL_50;
    if (v18 == 9)
    {
      if (*(_QWORD *)*a3 == 0x767275635F636F72 && *(_BYTE *)(*a3 + 8) == 101)
        goto LABEL_50;
      v18 = a3[1];
    }
    if (v18 == 14)
    {
      if (*(_QWORD *)*a3 == 0x6C5F7972616E6962 && *(_QWORD *)(*a3 + 6) == 0x73736F6C676F6C5FLL)
        goto LABEL_50;
      v18 = a3[1];
    }
    if (v18 != 18)
      goto LABEL_57;
    v22 = (uint64_t *)*a3;
    goto LABEL_34;
  }
  v14 = *((unsigned __int8 *)a3 + 23);
  if (v14 <= 0xD)
  {
    if (v14 == 3)
    {
      v15 = *((unsigned __int8 *)a3 + 2);
      v16 = *(unsigned __int16 *)a3 == 30049;
      v17 = 99;
    }
    else
    {
      if (v14 != 9)
        goto LABEL_57;
      v15 = *((unsigned __int8 *)a3 + 8);
      v16 = *a3 == 0x767275635F636F72;
      v17 = 101;
    }
    goto LABEL_39;
  }
  if (v14 != 14)
  {
    v22 = a3;
    if (v14 != 18)
      goto LABEL_57;
LABEL_34:
    v23 = *v22;
    v24 = v22[1];
    v15 = *((unsigned __int16 *)v22 + 8);
    v16 = v23 == 0x616C6369746C756DLL && v24 == 0x6F6C676F6C5F7373;
    v17 = 29555;
LABEL_39:
    if (!v16 || v15 != v17)
      goto LABEL_57;
    goto LABEL_50;
  }
  if (*a3 != 0x6C5F7972616E6962 || *(_QWORD *)((char *)a3 + 6) != 0x73736F6C676F6C5FLL)
    goto LABEL_57;
LABEL_50:
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
  v27 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v48, (const void **)&__p);
  v28 = v27;
  if (SHIBYTE(v58) < 0)
  {
    operator delete(__p);
    if (v28)
      goto LABEL_57;
  }
  else if (v27)
  {
    goto LABEL_57;
  }
  turi::evaluation::get_index_map((uint64_t *)a1, (uint64_t *)a2, (uint64_t)&v55);
  turi::flexible_type_converter<std::unordered_map<turi::flexible_type,unsigned long>>::set((uint64_t)&v55, (uint64_t)&v53);
  *(_QWORD *)((char *)&v58 + 5) = *(_QWORD *)((char *)&v53 + 5);
  *(_QWORD *)&v58 = v53;
  BYTE12(v58) = BYTE12(v53);
  LODWORD(__p) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v53, "index_map");
  v52 = &v53;
  v29 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v48, (const void **)&v53, (uint64_t)&std::piecewise_construct, &v52);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v29 + 14, (unsigned int *)&__p);
  if (v54 < 0)
    operator delete((void *)v53);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&v55);
LABEL_57:
  turi::evaluation::get_evaluator_metric(a3, (uint64_t)&v48, &v53);
  turi::sarray<turi::flexible_type>::get_reader(v51, &v47);
  turi::sarray<turi::flexible_type>::get_reader(v50, &v46);
  v30 = 0;
  do
  {
    __p = 0;
    v58 = 0uLL;
    v55 = 0uLL;
    v56 = 0;
    v31 = v30 + 5000;
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v47 + 48))(v47, v30, v30 + 5000, &v55);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v46 + 48))(v46, v30, v30 + 5000, &__p);
    if (v32)
    {
      v33 = 0;
      v34 = v32;
      do
      {
        (*(void (**)(_QWORD, _QWORD, char *, _QWORD))(*(_QWORD *)v53 + 48))(v53, v55 + v33, (char *)__p + v33, 0);
        v33 += 16;
        --v34;
      }
      while (v34);
    }
    v52 = &v55;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    *(_QWORD *)&v55 = &__p;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    v30 = v31;
  }
  while (v32 == 5000);
  (*(void (**)(_QWORD))(*(_QWORD *)v53 + 64))(v53);
  v35 = v46;
  v46 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v47;
  v47 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v48, v49[0]);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_218475948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a31);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&a26);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a12, a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::get_evaluator_metric@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t *v7;
  uint64_t v9;
  BOOL v14;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v24;
  _QWORD *v25;
  turi::thread *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  __int128 *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  int *v50;
  int *v51;
  char v52;
  int *v53;
  uint64_t v54;
  int *v55;
  unint64_t v56;
  int *v57;
  int *v58;
  char v59;
  int *v60;
  uint64_t v61;
  int *v62;
  unint64_t v63;
  int *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  int *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  void *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t *v118;
  unint64_t v119;
  BOOL v120;
  unint64_t *v121;
  unint64_t v122;
  BOOL v123;
  unint64_t *v124;
  unint64_t v125;
  BOOL v126;
  unint64_t *v127;
  unint64_t v128;
  BOOL v129;
  unint64_t *v130;
  unint64_t v131;
  BOOL v132;
  unint64_t *v133;
  unint64_t v134;
  BOOL v135;
  int *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  void *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unsigned int v182;
  int *v183;
  double v184;
  int *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  unsigned int v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  void *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  unint64_t *v214;
  unint64_t v215;
  BOOL v216;
  unint64_t *v217;
  unint64_t v218;
  BOOL v219;
  unint64_t *v220;
  unint64_t v221;
  BOOL v222;
  unint64_t *v223;
  unint64_t v224;
  BOOL v225;
  unint64_t *v226;
  unint64_t v227;
  BOOL v228;
  unint64_t *v229;
  unint64_t v230;
  BOOL v231;
  int *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  _QWORD *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  unsigned int v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  void *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  _QWORD *v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  unsigned int v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t v283;
  _QWORD *v284;
  void *v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  _QWORD *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  _QWORD *v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  unsigned int v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  void *v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t v323;
  _QWORD *v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  _QWORD *v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t v343;
  unsigned int v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t v347;
  _QWORD *v348;
  void *v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t v355;
  _QWORD *v356;
  unint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  void *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  __int128 __p;
  void *v373[2];
  void *v374[2];
  __int128 v375;
  uint64_t v376;
  _QWORD *v377;
  _BYTE v378[40];
  _BYTE v379[216];
  _BYTE v380[40];
  _BYTE v381[40];
  __int128 v382;
  _BYTE v383[40];
  uint64_t v384[3];
  _QWORD *v385;
  _QWORD v386[2];
  void **v387;
  _QWORD *v388[2];
  _QWORD *v389[2];
  _QWORD *v390[2];
  _QWORD *v391[2];
  _QWORD *v392[2];
  _QWORD *v393[2];
  _QWORD *v394[2];
  __int128 v395[2];
  __int128 v396;
  uint64_t v397;

  v397 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  v6 = *((unsigned __int8 *)a1 + 23);
  if ((v6 & 0x80) != 0)
  {
    v9 = a1[1];
    if (v9 == 4 && *(_DWORD *)*a1 == 1702063474)
    {
LABEL_87:
      *(_QWORD *)&__p = &unk_24D9427F0;
      *((_QWORD *)&__p + 1) = 0;
      v41 = operator new(0x58uLL);
      v41[2] = 0;
      *v41 = &unk_24D9427A0;
      v41[1] = 0;
      v41[3] = &unk_24D9427F0;
      *((_OWORD *)v41 + 2) = 0u;
      *((_OWORD *)v41 + 3) = 0u;
      v373[1] = 0;
      v374[0] = 0;
      v373[0] = 0;
      v41[9] = 0;
      v41[10] = 0;
      v41[8] = 0;
      v375 = 0uLL;
      v374[1] = 0;
      *(_QWORD *)&v395[0] = v41 + 3;
      *((_QWORD *)&v395[0] + 1) = v41;
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, v395);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v395[0] + 1);
      if (*((_QWORD *)&v395[0] + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&v395[0] + 1) + 8);
        do
          v20 = __ldaxr(v42);
        while (__stlxr(v20 - 1, v42));
LABEL_90:
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
LABEL_92:
      v26 = (turi::thread *)v373[0];
      if (v373[0])
        operator delete(v373[0]);
      goto LABEL_106;
    }
    if (v9 == 9)
    {
      if (*(_QWORD *)*a1 == 0x6F7272655F78616DLL && *(_BYTE *)(*a1 + 8) == 114)
      {
LABEL_66:
        v25 = operator new(0x40uLL);
        v25[2] = 0;
        v25[3] = &unk_24D9428C0;
        *v25 = &unk_24D942870;
        v25[1] = 0;
        *((_OWORD *)v25 + 2) = 0u;
        *((_OWORD *)v25 + 3) = 0u;
        *(_QWORD *)&__p = v25 + 3;
        *((_QWORD *)&__p + 1) = v25;
        v26 = (turi::thread *)std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &__p);
        v27 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        goto LABEL_106;
      }
      v9 = a1[1];
    }
    if (v9 == 23)
    {
      if (*(_QWORD *)*a1 == 0x6F697375666E6F63
        && *(_QWORD *)(*a1 + 8) == 0x78697274616D5F6ELL
        && *(_QWORD *)(*a1 + 15) == 0x70616D5F6F6E5F78)
      {
LABEL_79:
        v386[1] = 0;
        v386[0] = 0;
        v385 = v386;
        turi::evaluation::confusion_matrix::confusion_matrix((uint64_t)&__p, (uint64_t)&v385);
        v37 = operator new(0xD0uLL);
        v37[2] = 0;
        *v37 = &unk_24D942930;
        v37[1] = 0;
        std::allocator<turi::evaluation::confusion_matrix>::construct[abi:ne180100]<turi::evaluation::confusion_matrix,turi::evaluation::confusion_matrix>((uint64_t)&v396, v37 + 3, (uint64_t)&__p);
        *(_QWORD *)&v395[0] = v37 + 3;
        *((_QWORD *)&v395[0] + 1) = v37;
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, v395);
        v38 = (std::__shared_weak_count *)*((_QWORD *)&v395[0] + 1);
        if (*((_QWORD *)&v395[0] + 1))
        {
          v39 = (unint64_t *)(*((_QWORD *)&v395[0] + 1) + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        *(_QWORD *)&__p = &unk_24D942980;
        std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v379);
        std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v378);
        std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v376, v377);
        std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)&v374[1]);
        *(_QWORD *)&v396 = (char *)&__p + 8;
        std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v396);
        v35 = (_QWORD *)v386[0];
        v36 = (__int128 *)&v385;
        goto LABEL_85;
      }
      v9 = a1[1];
    }
    if (v9 != 16)
      goto LABEL_32;
    if (*(_QWORD *)*a1 != 0x6F697375666E6F63 || *(_QWORD *)(*a1 + 8) != 0x78697274616D5F6ELL)
    {
      v9 = a1[1];
LABEL_32:
      if (v9 != 8)
      {
LABEL_35:
        if (v9 == 14)
        {
          v7 = (uint64_t *)*a1;
LABEL_58:
          v21 = *v7;
          v22 = *(uint64_t *)((char *)v7 + 6);
          if (v21 == 0x6C5F7972616E6962 && v22 == 0x73736F6C676F6C5FLL)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
            v24 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
            turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get(v24, (uint64_t)v395);
            if (SHIBYTE(v373[0]) < 0)
              operator delete((void *)__p);
            std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)v383, (uint64_t)v395);
            turi::evaluation::binary_logloss::binary_logloss((uint64_t)&__p, (uint64_t)v383);
            std::make_shared[abi:ne180100]<turi::evaluation::binary_logloss,turi::evaluation::binary_logloss,void>((uint64_t)&__p, &v396);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v396);
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v396);
            turi::evaluation::binary_logloss::~binary_logloss((turi::evaluation::binary_logloss *)&__p);
            std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v383);
            goto LABEL_105;
          }
        }
        goto LABEL_94;
      }
      if (*(_QWORD *)*a1 != 0x7963617275636361)
      {
        v9 = a1[1];
        goto LABEL_35;
      }
LABEL_54:
      *(_QWORD *)&__p = &unk_24D942A40;
      *((_QWORD *)&__p + 1) = 0;
      v17 = operator new(0x58uLL);
      v17[2] = 0;
      *v17 = &unk_24D9429F0;
      v17[1] = 0;
      v17[3] = &unk_24D942A40;
      *((_OWORD *)v17 + 2) = 0u;
      *((_OWORD *)v17 + 3) = 0u;
      v373[1] = 0;
      v374[0] = 0;
      v373[0] = 0;
      v17[9] = 0;
      v17[10] = 0;
      v17[8] = 0;
      v375 = 0uLL;
      v374[1] = 0;
      *(_QWORD *)&v395[0] = v17 + 3;
      *((_QWORD *)&v395[0] + 1) = v17;
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, v395);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v395[0] + 1);
      if (*((_QWORD *)&v395[0] + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v395[0] + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        goto LABEL_90;
      }
      goto LABEL_92;
    }
LABEL_71:
    std::string::basic_string[abi:ne180100]<0>(&__p, "inv_index_map");
    v30 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<std::map<unsigned long,turi::flexible_type>,void>::get(v30, (uint64_t)v395);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    std::map<unsigned long,turi::flexible_type>::map[abi:ne180100](v384, (uint64_t)v395);
    turi::evaluation::confusion_matrix::confusion_matrix((uint64_t)&__p, (uint64_t)v384);
    v31 = operator new(0xD0uLL);
    v31[2] = 0;
    *v31 = &unk_24D942930;
    v31[1] = 0;
    std::allocator<turi::evaluation::confusion_matrix>::construct[abi:ne180100]<turi::evaluation::confusion_matrix,turi::evaluation::confusion_matrix>((uint64_t)&v382, v31 + 3, (uint64_t)&__p);
    *(_QWORD *)&v396 = v31 + 3;
    *((_QWORD *)&v396 + 1) = v31;
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v396);
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v396 + 1);
    if (*((_QWORD *)&v396 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v396 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    *(_QWORD *)&__p = &unk_24D942980;
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v379);
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v378);
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v376, v377);
    std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)&v374[1]);
    *(_QWORD *)&v382 = (char *)&__p + 8;
    std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)v384, (_QWORD *)v384[1]);
    v35 = (_QWORD *)*((_QWORD *)&v395[0] + 1);
    v36 = v395;
LABEL_85:
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)v36, v35);
    goto LABEL_106;
  }
  v7 = a1;
  switch(*((_BYTE *)a1 + 23))
  {
    case 8:
      goto LABEL_53;
    case 9:
      if (*a1 == 0x6F7272655F78616DLL && *((_BYTE *)a1 + 8) == 114)
        goto LABEL_66;
      goto LABEL_52;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xF:
      break;
    case 0xE:
      goto LABEL_58;
    case 0x10:
      if (*a1 == 0x6F697375666E6F63 && a1[1] == 0x78697274616D5F6ELL)
        goto LABEL_71;
      v7 = a1;
      if (v6 == 14)
        goto LABEL_58;
LABEL_52:
      if (v6 != 8)
        break;
LABEL_53:
      if (*a1 == 0x7963617275636361)
        goto LABEL_54;
      break;
    default:
      if (v6 == 4)
      {
        if (*(_DWORD *)a1 != 1702063474)
          break;
        goto LABEL_87;
      }
      if (v6 == 23)
      {
        v14 = *a1 == 0x6F697375666E6F63 && a1[1] == 0x78697274616D5F6ELL;
        if (v14 && *(_QWORD *)((char *)a1 + 15) == 0x70616D5F6F6E5F78)
          goto LABEL_79;
      }
      break;
  }
LABEL_94:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "multiclass_logloss")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "log_loss"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
    v43 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get(v43, (uint64_t)v395);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
    v44 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)&__p);
    v45 = v44;
    if (SHIBYTE(v373[0]) < 0)
    {
      operator delete((void *)__p);
      if (v45)
      {
LABEL_100:
        std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
        v46 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
        v47 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v396, v46);
        if (SHIBYTE(v373[0]) < 0)
          operator delete((void *)__p);
        goto LABEL_104;
      }
    }
    else if (v44)
    {
      goto LABEL_100;
    }
    v47 = -1;
LABEL_104:
    turi::evaluation::multiclass_logloss::multiclass_logloss((uint64_t)&__p, (uint64_t)v395, v47);
    std::make_shared[abi:ne180100]<turi::evaluation::multiclass_logloss,turi::evaluation::multiclass_logloss,void>((uint64_t)&__p, &v396);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v396);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v396);
    turi::evaluation::multiclass_logloss::~multiclass_logloss((turi::evaluation::multiclass_logloss *)&__p);
LABEL_105:
    v26 = (turi::thread *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v395);
    goto LABEL_106;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "roc_curve"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    v50 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v50, (uint64_t)&v396);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "binary");
    v51 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    v52 = turi::variant_converter<BOOL,void>::get((uint64_t)v395, v51);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
    v53 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get(v53, (uint64_t)v395);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
    v54 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)&__p);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    if (v54)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
      v55 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
      v56 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v382, v55);
      if (SHIBYTE(v373[0]) < 0)
        operator delete((void *)__p);
    }
    else
    {
      v56 = -1;
    }
    std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)v381, (uint64_t)v395);
    *(_QWORD **)((char *)v394 + 5) = *(_QWORD **)((char *)&v396 + 5);
    v394[0] = (_QWORD *)v396;
    BYTE4(v394[1]) = BYTE12(v396);
    if (BYTE12(v396) <= 9u && ((1 << SBYTE12(v396)) & 0x33C) != 0)
    {
      v73 = v394[0];
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 + 1, v73));
    }
    turi::evaluation::roc_curve::roc_curve((uint64_t)&__p, (uint64_t)v381, (turi::evaluation *)v394, v52, v56);
    std::make_shared[abi:ne180100]<turi::evaluation::roc_curve,turi::evaluation::roc_curve,void>((uint64_t)&__p, &v382);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v382);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v382);
    turi::evaluation::roc_curve::~roc_curve((turi::evaluation::roc_curve *)&__p);
    switch(BYTE4(v394[1]))
    {
      case 2:
        v75 = v394[0];
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          v78 = v394[0];
          if (v394[0])
          {
            if (*((char *)v394[0] + 31) < 0)
              operator delete(*((void **)v394[0] + 1));
            v79 = v78;
            v80 = 0x1012C404EF22A49;
            goto LABEL_216;
          }
        }
        break;
      case 3:
        v106 = v394[0];
        do
        {
          v107 = __ldaxr(v106);
          v108 = v107 - 1;
        }
        while (__stlxr(v108, v106));
        if (!v108)
        {
          v109 = v394[0];
          if (v394[0])
          {
            v110 = (void *)v394[0][1];
            if (v110)
            {
              v394[0][2] = v110;
              operator delete(v110);
            }
            v79 = v109;
            v80 = 0x1080C409938AC02;
            goto LABEL_216;
          }
        }
        break;
      case 4:
        v98 = v394[0];
        do
        {
          v99 = __ldaxr(v98);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v98));
        if (!v100)
        {
          v101 = v394[0];
          if (v394[0])
          {
            v387 = (void **)(v394[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v387);
            goto LABEL_209;
          }
        }
        break;
      case 5:
        v111 = v394[0];
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          v101 = v394[0];
          if (v394[0])
          {
            v387 = (void **)(v394[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v387);
LABEL_209:
            v79 = v101;
            v80 = 0x1020C405E66F15BLL;
            goto LABEL_216;
          }
        }
        break;
      case 8:
        v114 = v394[0];
        do
        {
          v115 = __ldaxr(v114);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v114));
        if (!v116)
        {
          v117 = v394[0];
          if (v394[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v394[0] + 2);
            v79 = v117;
            v105 = -235920773;
            goto LABEL_215;
          }
        }
        break;
      case 9:
        v102 = v394[0];
        do
        {
          v103 = __ldaxr(v102);
          v104 = v103 - 1;
        }
        while (__stlxr(v104, v102));
        if (!v104 && v394[0])
        {
          v79 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v394[0]);
          v105 = 2071181815;
LABEL_215:
          v80 = v105 | 0x1030C4000000000;
LABEL_216:
          MEMORY[0x219A19A08](v79, v80);
        }
        break;
      default:
        break;
    }
    memset(v394, 0, 13);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v381);
    v26 = (turi::thread *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v395);
    switch(BYTE12(v396))
    {
      case 2:
        v118 = (unint64_t *)v396;
        do
        {
          v119 = __ldaxr(v118);
          v120 = --v119 == 0;
        }
        while (__stlxr(v119, v118));
        goto LABEL_284;
      case 3:
        v127 = (unint64_t *)v396;
        do
        {
          v128 = __ldaxr(v127);
          v129 = --v128 == 0;
        }
        while (__stlxr(v128, v127));
        goto LABEL_302;
      case 4:
        v121 = (unint64_t *)v396;
        do
        {
          v122 = __ldaxr(v121);
          v123 = --v122 == 0;
        }
        while (__stlxr(v122, v121));
        goto LABEL_290;
      case 5:
        v130 = (unint64_t *)v396;
        do
        {
          v131 = __ldaxr(v130);
          v132 = --v131 == 0;
        }
        while (__stlxr(v131, v130));
        goto LABEL_308;
      case 8:
        v133 = (unint64_t *)v396;
        do
        {
          v134 = __ldaxr(v133);
          v135 = --v134 == 0;
        }
        while (__stlxr(v134, v133));
        goto LABEL_314;
      case 9:
        v124 = (unint64_t *)v396;
        do
        {
          v125 = __ldaxr(v124);
          v126 = --v125 == 0;
        }
        while (__stlxr(v125, v124));
        goto LABEL_296;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "auc"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    v57 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v57, (uint64_t)&v396);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "binary");
    v58 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    v59 = turi::variant_converter<BOOL,void>::get((uint64_t)v395, v58);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
    v60 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get(v60, (uint64_t)v395);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
    v61 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)&__p);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    if (v61)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
      v62 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
      v63 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v382, v62);
      if (SHIBYTE(v373[0]) < 0)
        operator delete((void *)__p);
    }
    else
    {
      v63 = -1;
    }
    std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)v380, (uint64_t)v395);
    *(_QWORD **)((char *)v393 + 5) = *(_QWORD **)((char *)&v396 + 5);
    v393[0] = (_QWORD *)v396;
    BYTE4(v393[1]) = BYTE12(v396);
    if (BYTE12(v396) <= 9u && ((1 << SBYTE12(v396)) & 0x33C) != 0)
    {
      v90 = v393[0];
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 + 1, v90));
    }
    turi::evaluation::auc::auc((uint64_t)&__p, (uint64_t)v380, (turi::evaluation *)v393, v59, v63);
    std::make_shared[abi:ne180100]<turi::evaluation::auc,turi::evaluation::auc,void>((uint64_t)&__p, &v382);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v382);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v382);
    turi::evaluation::roc_curve::~roc_curve((turi::evaluation::roc_curve *)&__p);
    switch(BYTE4(v393[1]))
    {
      case 2:
        v92 = v393[0];
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          v95 = v393[0];
          if (v393[0])
          {
            if (*((char *)v393[0] + 31) < 0)
              operator delete(*((void **)v393[0] + 1));
            v96 = v95;
            v97 = 0x1012C404EF22A49;
            goto LABEL_280;
          }
        }
        break;
      case 3:
        v153 = v393[0];
        do
        {
          v154 = __ldaxr(v153);
          v155 = v154 - 1;
        }
        while (__stlxr(v155, v153));
        if (!v155)
        {
          v156 = v393[0];
          if (v393[0])
          {
            v157 = (void *)v393[0][1];
            if (v157)
            {
              v393[0][2] = v157;
              operator delete(v157);
            }
            v96 = v156;
            v97 = 0x1080C409938AC02;
            goto LABEL_280;
          }
        }
        break;
      case 4:
        v145 = v393[0];
        do
        {
          v146 = __ldaxr(v145);
          v147 = v146 - 1;
        }
        while (__stlxr(v147, v145));
        if (!v147)
        {
          v148 = v393[0];
          if (v393[0])
          {
            v387 = (void **)(v393[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v387);
            goto LABEL_273;
          }
        }
        break;
      case 5:
        v158 = v393[0];
        do
        {
          v159 = __ldaxr(v158);
          v160 = v159 - 1;
        }
        while (__stlxr(v160, v158));
        if (!v160)
        {
          v148 = v393[0];
          if (v393[0])
          {
            v387 = (void **)(v393[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v387);
LABEL_273:
            v96 = v148;
            v97 = 0x1020C405E66F15BLL;
            goto LABEL_280;
          }
        }
        break;
      case 8:
        v161 = v393[0];
        do
        {
          v162 = __ldaxr(v161);
          v163 = v162 - 1;
        }
        while (__stlxr(v163, v161));
        if (!v163)
        {
          v164 = v393[0];
          if (v393[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v393[0] + 2);
            v96 = v164;
            v152 = -235920773;
            goto LABEL_279;
          }
        }
        break;
      case 9:
        v149 = v393[0];
        do
        {
          v150 = __ldaxr(v149);
          v151 = v150 - 1;
        }
        while (__stlxr(v151, v149));
        if (!v151 && v393[0])
        {
          v96 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v393[0]);
          v152 = 2071181815;
LABEL_279:
          v97 = v152 | 0x1030C4000000000;
LABEL_280:
          MEMORY[0x219A19A08](v96, v97);
        }
        break;
      default:
        break;
    }
    memset(v393, 0, 13);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v380);
    v26 = (turi::thread *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v395);
    switch(BYTE12(v396))
    {
      case 2:
        v165 = (unint64_t *)v396;
        do
        {
          v166 = __ldaxr(v165);
          v120 = --v166 == 0;
        }
        while (__stlxr(v166, v165));
LABEL_284:
        if (v120)
        {
          v167 = v396;
          if ((_QWORD)v396)
            goto LABEL_582;
        }
        break;
      case 3:
        v173 = (unint64_t *)v396;
        do
        {
          v174 = __ldaxr(v173);
          v129 = --v174 == 0;
        }
        while (__stlxr(v174, v173));
LABEL_302:
        if (v129)
        {
          v175 = (_QWORD *)v396;
          if ((_QWORD)v396)
            goto LABEL_603;
        }
        break;
      case 4:
        v168 = (unint64_t *)v396;
        do
        {
          v169 = __ldaxr(v168);
          v123 = --v169 == 0;
        }
        while (__stlxr(v169, v168));
LABEL_290:
        if (v123)
        {
          v170 = (_QWORD *)v396;
          if ((_QWORD)v396)
            goto LABEL_590;
        }
        break;
      case 5:
        v176 = (unint64_t *)v396;
        do
        {
          v177 = __ldaxr(v176);
          v132 = --v177 == 0;
        }
        while (__stlxr(v177, v176));
LABEL_308:
        if (v132)
        {
          v170 = (_QWORD *)v396;
          if ((_QWORD)v396)
            goto LABEL_611;
        }
        break;
      case 8:
        v178 = (unint64_t *)v396;
        do
        {
          v179 = __ldaxr(v178);
          v135 = --v179 == 0;
        }
        while (__stlxr(v179, v178));
LABEL_314:
        if (v135)
        {
          v180 = (_QWORD *)v396;
          if ((_QWORD)v396)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v396 + 16));
            v181 = v180;
            v182 = -235920773;
            goto LABEL_597;
          }
        }
        break;
      case 9:
        v171 = (unint64_t *)v396;
        do
        {
          v172 = __ldaxr(v171);
          v126 = --v172 == 0;
        }
        while (__stlxr(v172, v171));
LABEL_296:
        if (v126)
        {
          v26 = (turi::thread *)v396;
          if ((_QWORD)v396)
            goto LABEL_596;
        }
        break;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "flexible_accuracy"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    v64 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v64, (uint64_t)v395);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    *(_QWORD **)((char *)v392 + 5) = *(_QWORD **)((char *)v395 + 5);
    v392[0] = *(_QWORD **)&v395[0];
    BYTE4(v392[1]) = BYTE12(v395[0]);
    if (BYTE12(v395[0]) <= 9u && ((1 << SBYTE12(v395[0])) & 0x33C) != 0)
    {
      v65 = v392[0];
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 + 1, v65));
    }
    turi::evaluation::flexible_accuracy::flexible_accuracy((uint64_t)&__p, (turi::evaluation *)v392);
    std::make_shared[abi:ne180100]<turi::evaluation::flexible_accuracy,turi::evaluation::flexible_accuracy,void>((uint64_t)&__p, (uint64_t *)&v396);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v396);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v396);
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v392[1]))
    {
      case 2:
        v67 = v392[0];
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
        {
          v70 = v392[0];
          if (v392[0])
          {
            if (*((char *)v392[0] + 31) < 0)
              operator delete(*((void **)v392[0] + 1));
            v71 = v70;
            v72 = 0x1012C404EF22A49;
            goto LABEL_364;
          }
        }
        break;
      case 3:
        v202 = v392[0];
        do
        {
          v203 = __ldaxr(v202);
          v204 = v203 - 1;
        }
        while (__stlxr(v204, v202));
        if (!v204)
        {
          v205 = v392[0];
          if (v392[0])
          {
            v206 = (void *)v392[0][1];
            if (v206)
            {
              v392[0][2] = v206;
              operator delete(v206);
            }
            v71 = v205;
            v72 = 0x1080C409938AC02;
            goto LABEL_364;
          }
        }
        break;
      case 4:
        v194 = v392[0];
        do
        {
          v195 = __ldaxr(v194);
          v196 = v195 - 1;
        }
        while (__stlxr(v196, v194));
        if (!v196)
        {
          v197 = v392[0];
          if (v392[0])
          {
            *(_QWORD *)&v382 = v392[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
            goto LABEL_357;
          }
        }
        break;
      case 5:
        v207 = v392[0];
        do
        {
          v208 = __ldaxr(v207);
          v209 = v208 - 1;
        }
        while (__stlxr(v209, v207));
        if (!v209)
        {
          v197 = v392[0];
          if (v392[0])
          {
            *(_QWORD *)&v382 = v392[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
LABEL_357:
            v71 = v197;
            v72 = 0x1020C405E66F15BLL;
            goto LABEL_364;
          }
        }
        break;
      case 8:
        v210 = v392[0];
        do
        {
          v211 = __ldaxr(v210);
          v212 = v211 - 1;
        }
        while (__stlxr(v212, v210));
        if (!v212)
        {
          v213 = v392[0];
          if (v392[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v392[0] + 2);
            v71 = v213;
            v201 = -235920773;
            goto LABEL_363;
          }
        }
        break;
      case 9:
        v198 = v392[0];
        do
        {
          v199 = __ldaxr(v198);
          v200 = v199 - 1;
        }
        while (__stlxr(v200, v198));
        if (!v200)
        {
          v26 = (turi::thread *)v392[0];
          if (v392[0])
          {
            v71 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v392[0]);
            v201 = 2071181815;
LABEL_363:
            v72 = v201 | 0x1030C4000000000;
LABEL_364:
            v26 = (turi::thread *)MEMORY[0x219A19A08](v71, v72);
          }
        }
        break;
      default:
        break;
    }
    memset(v392, 0, 13);
    switch(BYTE12(v395[0]))
    {
      case 2:
        v214 = *(unint64_t **)&v395[0];
        do
        {
          v215 = __ldaxr(v214);
          v216 = --v215 == 0;
        }
        while (__stlxr(v215, v214));
        goto LABEL_579;
      case 3:
        v223 = *(unint64_t **)&v395[0];
        do
        {
          v224 = __ldaxr(v223);
          v225 = --v224 == 0;
        }
        while (__stlxr(v224, v223));
        goto LABEL_600;
      case 4:
        v217 = *(unint64_t **)&v395[0];
        do
        {
          v218 = __ldaxr(v217);
          v219 = --v218 == 0;
        }
        while (__stlxr(v218, v217));
        goto LABEL_587;
      case 5:
        v226 = *(unint64_t **)&v395[0];
        do
        {
          v227 = __ldaxr(v226);
          v228 = --v227 == 0;
        }
        while (__stlxr(v227, v226));
        goto LABEL_608;
      case 8:
        v229 = *(unint64_t **)&v395[0];
        do
        {
          v230 = __ldaxr(v229);
          v231 = --v230 == 0;
        }
        while (__stlxr(v230, v229));
        goto LABEL_616;
      case 9:
        v220 = *(unint64_t **)&v395[0];
        do
        {
          v221 = __ldaxr(v220);
          v222 = --v221 == 0;
        }
        while (__stlxr(v221, v220));
        goto LABEL_593;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "precision"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    v81 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v81, (uint64_t)v395);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    *(_QWORD **)((char *)v391 + 5) = *(_QWORD **)((char *)v395 + 5);
    v391[0] = *(_QWORD **)&v395[0];
    BYTE4(v391[1]) = BYTE12(v395[0]);
    if (BYTE12(v395[0]) <= 9u && ((1 << SBYTE12(v395[0])) & 0x33C) != 0)
    {
      v82 = v391[0];
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 + 1, v82));
    }
    turi::evaluation::precision::precision((uint64_t)&__p, (turi::evaluation *)v391);
    std::make_shared[abi:ne180100]<turi::evaluation::precision,turi::evaluation::precision,void>((uint64_t)&__p, (uint64_t *)&v396);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v396);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v396);
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v391[1]))
    {
      case 2:
        v84 = v391[0];
        do
        {
          v85 = __ldaxr(v84);
          v86 = v85 - 1;
        }
        while (__stlxr(v86, v84));
        if (!v86)
        {
          v87 = v391[0];
          if (v391[0])
          {
            if (*((char *)v391[0] + 31) < 0)
              operator delete(*((void **)v391[0] + 1));
            v88 = v87;
            v89 = 0x1012C404EF22A49;
            goto LABEL_428;
          }
        }
        break;
      case 3:
        v249 = v391[0];
        do
        {
          v250 = __ldaxr(v249);
          v251 = v250 - 1;
        }
        while (__stlxr(v251, v249));
        if (!v251)
        {
          v252 = v391[0];
          if (v391[0])
          {
            v253 = (void *)v391[0][1];
            if (v253)
            {
              v391[0][2] = v253;
              operator delete(v253);
            }
            v88 = v252;
            v89 = 0x1080C409938AC02;
            goto LABEL_428;
          }
        }
        break;
      case 4:
        v241 = v391[0];
        do
        {
          v242 = __ldaxr(v241);
          v243 = v242 - 1;
        }
        while (__stlxr(v243, v241));
        if (!v243)
        {
          v244 = v391[0];
          if (v391[0])
          {
            *(_QWORD *)&v382 = v391[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
            goto LABEL_421;
          }
        }
        break;
      case 5:
        v254 = v391[0];
        do
        {
          v255 = __ldaxr(v254);
          v256 = v255 - 1;
        }
        while (__stlxr(v256, v254));
        if (!v256)
        {
          v244 = v391[0];
          if (v391[0])
          {
            *(_QWORD *)&v382 = v391[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
LABEL_421:
            v88 = v244;
            v89 = 0x1020C405E66F15BLL;
            goto LABEL_428;
          }
        }
        break;
      case 8:
        v257 = v391[0];
        do
        {
          v258 = __ldaxr(v257);
          v259 = v258 - 1;
        }
        while (__stlxr(v259, v257));
        if (!v259)
        {
          v260 = v391[0];
          if (v391[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v391[0] + 2);
            v88 = v260;
            v248 = -235920773;
            goto LABEL_427;
          }
        }
        break;
      case 9:
        v245 = v391[0];
        do
        {
          v246 = __ldaxr(v245);
          v247 = v246 - 1;
        }
        while (__stlxr(v247, v245));
        if (!v247)
        {
          v26 = (turi::thread *)v391[0];
          if (v391[0])
          {
            v88 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v391[0]);
            v248 = 2071181815;
LABEL_427:
            v89 = v248 | 0x1030C4000000000;
LABEL_428:
            v26 = (turi::thread *)MEMORY[0x219A19A08](v88, v89);
          }
        }
        break;
      default:
        break;
    }
    memset(v391, 0, 13);
    switch(BYTE12(v395[0]))
    {
      case 2:
        v261 = *(unint64_t **)&v395[0];
        do
        {
          v262 = __ldaxr(v261);
          v216 = --v262 == 0;
        }
        while (__stlxr(v262, v261));
        goto LABEL_579;
      case 3:
        v267 = *(unint64_t **)&v395[0];
        do
        {
          v268 = __ldaxr(v267);
          v225 = --v268 == 0;
        }
        while (__stlxr(v268, v267));
        goto LABEL_600;
      case 4:
        v263 = *(unint64_t **)&v395[0];
        do
        {
          v264 = __ldaxr(v263);
          v219 = --v264 == 0;
        }
        while (__stlxr(v264, v263));
        goto LABEL_587;
      case 5:
        v269 = *(unint64_t **)&v395[0];
        do
        {
          v270 = __ldaxr(v269);
          v228 = --v270 == 0;
        }
        while (__stlxr(v270, v269));
        goto LABEL_608;
      case 8:
        v271 = *(unint64_t **)&v395[0];
        do
        {
          v272 = __ldaxr(v271);
          v231 = --v272 == 0;
        }
        while (__stlxr(v272, v271));
        goto LABEL_616;
      case 9:
        v265 = *(unint64_t **)&v395[0];
        do
        {
          v266 = __ldaxr(v265);
          v222 = --v266 == 0;
        }
        while (__stlxr(v266, v265));
        goto LABEL_593;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "recall"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    v136 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v136, (uint64_t)v395);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    *(_QWORD **)((char *)v390 + 5) = *(_QWORD **)((char *)v395 + 5);
    v390[0] = *(_QWORD **)&v395[0];
    BYTE4(v390[1]) = BYTE12(v395[0]);
    if (BYTE12(v395[0]) <= 9u && ((1 << SBYTE12(v395[0])) & 0x33C) != 0)
    {
      v137 = v390[0];
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 + 1, v137));
    }
    turi::evaluation::recall::recall((uint64_t)&__p, (turi::evaluation *)v390);
    std::make_shared[abi:ne180100]<turi::evaluation::recall,turi::evaluation::recall,void>((uint64_t)&__p, (uint64_t *)&v396);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v396);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v396);
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v390[1]))
    {
      case 2:
        v139 = v390[0];
        do
        {
          v140 = __ldaxr(v139);
          v141 = v140 - 1;
        }
        while (__stlxr(v141, v139));
        if (!v141)
        {
          v142 = v390[0];
          if (v390[0])
          {
            if (*((char *)v390[0] + 31) < 0)
              operator delete(*((void **)v390[0] + 1));
            v143 = v142;
            v144 = 0x1012C404EF22A49;
            goto LABEL_477;
          }
        }
        break;
      case 3:
        v281 = v390[0];
        do
        {
          v282 = __ldaxr(v281);
          v283 = v282 - 1;
        }
        while (__stlxr(v283, v281));
        if (!v283)
        {
          v284 = v390[0];
          if (v390[0])
          {
            v285 = (void *)v390[0][1];
            if (v285)
            {
              v390[0][2] = v285;
              operator delete(v285);
            }
            v143 = v284;
            v144 = 0x1080C409938AC02;
            goto LABEL_477;
          }
        }
        break;
      case 4:
        v273 = v390[0];
        do
        {
          v274 = __ldaxr(v273);
          v275 = v274 - 1;
        }
        while (__stlxr(v275, v273));
        if (!v275)
        {
          v276 = v390[0];
          if (v390[0])
          {
            *(_QWORD *)&v382 = v390[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
            goto LABEL_470;
          }
        }
        break;
      case 5:
        v286 = v390[0];
        do
        {
          v287 = __ldaxr(v286);
          v288 = v287 - 1;
        }
        while (__stlxr(v288, v286));
        if (!v288)
        {
          v276 = v390[0];
          if (v390[0])
          {
            *(_QWORD *)&v382 = v390[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
LABEL_470:
            v143 = v276;
            v144 = 0x1020C405E66F15BLL;
            goto LABEL_477;
          }
        }
        break;
      case 8:
        v289 = v390[0];
        do
        {
          v290 = __ldaxr(v289);
          v291 = v290 - 1;
        }
        while (__stlxr(v291, v289));
        if (!v291)
        {
          v292 = v390[0];
          if (v390[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v390[0] + 2);
            v143 = v292;
            v280 = -235920773;
            goto LABEL_476;
          }
        }
        break;
      case 9:
        v277 = v390[0];
        do
        {
          v278 = __ldaxr(v277);
          v279 = v278 - 1;
        }
        while (__stlxr(v279, v277));
        if (!v279)
        {
          v26 = (turi::thread *)v390[0];
          if (v390[0])
          {
            v143 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v390[0]);
            v280 = 2071181815;
LABEL_476:
            v144 = v280 | 0x1030C4000000000;
LABEL_477:
            v26 = (turi::thread *)MEMORY[0x219A19A08](v143, v144);
          }
        }
        break;
      default:
        break;
    }
    memset(v390, 0, 13);
    switch(BYTE12(v395[0]))
    {
      case 2:
        v293 = *(unint64_t **)&v395[0];
        do
        {
          v294 = __ldaxr(v293);
          v216 = --v294 == 0;
        }
        while (__stlxr(v294, v293));
        goto LABEL_579;
      case 3:
        v299 = *(unint64_t **)&v395[0];
        do
        {
          v300 = __ldaxr(v299);
          v225 = --v300 == 0;
        }
        while (__stlxr(v300, v299));
        goto LABEL_600;
      case 4:
        v295 = *(unint64_t **)&v395[0];
        do
        {
          v296 = __ldaxr(v295);
          v219 = --v296 == 0;
        }
        while (__stlxr(v296, v295));
        goto LABEL_587;
      case 5:
        v301 = *(unint64_t **)&v395[0];
        do
        {
          v302 = __ldaxr(v301);
          v228 = --v302 == 0;
        }
        while (__stlxr(v302, v301));
        goto LABEL_608;
      case 8:
        v303 = *(unint64_t **)&v395[0];
        do
        {
          v304 = __ldaxr(v303);
          v231 = --v304 == 0;
        }
        while (__stlxr(v304, v303));
        goto LABEL_616;
      case 9:
        v297 = *(unint64_t **)&v395[0];
        do
        {
          v298 = __ldaxr(v297);
          v222 = --v298 == 0;
        }
        while (__stlxr(v298, v297));
        goto LABEL_593;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "fbeta_score"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "beta");
    v183 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    v184 = turi::variant_converter<double,void>::get((uint64_t)v395, v183);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    v185 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v185, (uint64_t)v395);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    *(_QWORD **)((char *)v389 + 5) = *(_QWORD **)((char *)v395 + 5);
    v389[0] = *(_QWORD **)&v395[0];
    BYTE4(v389[1]) = BYTE12(v395[0]);
    if (BYTE12(v395[0]) <= 9u && ((1 << SBYTE12(v395[0])) & 0x33C) != 0)
    {
      v186 = v389[0];
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 + 1, v186));
    }
    turi::evaluation::fbeta_score::fbeta_score((uint64_t)&__p, (turi::evaluation *)v389, v184);
    std::make_shared[abi:ne180100]<turi::evaluation::fbeta_score,turi::evaluation::fbeta_score,void>((uint64_t)&__p, (uint64_t *)&v396);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v396);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v396);
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v389[1]))
    {
      case 2:
        v188 = v389[0];
        do
        {
          v189 = __ldaxr(v188);
          v190 = v189 - 1;
        }
        while (__stlxr(v190, v188));
        if (!v190)
        {
          v191 = v389[0];
          if (v389[0])
          {
            if (*((char *)v389[0] + 31) < 0)
              operator delete(*((void **)v389[0] + 1));
            v192 = v191;
            v193 = 0x1012C404EF22A49;
            goto LABEL_575;
          }
        }
        break;
      case 3:
        v345 = v389[0];
        do
        {
          v346 = __ldaxr(v345);
          v347 = v346 - 1;
        }
        while (__stlxr(v347, v345));
        if (!v347)
        {
          v348 = v389[0];
          if (v389[0])
          {
            v349 = (void *)v389[0][1];
            if (v349)
            {
              v389[0][2] = v349;
              operator delete(v349);
            }
            v192 = v348;
            v193 = 0x1080C409938AC02;
            goto LABEL_575;
          }
        }
        break;
      case 4:
        v337 = v389[0];
        do
        {
          v338 = __ldaxr(v337);
          v339 = v338 - 1;
        }
        while (__stlxr(v339, v337));
        if (!v339)
        {
          v340 = v389[0];
          if (v389[0])
          {
            *(_QWORD *)&v382 = v389[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
            goto LABEL_568;
          }
        }
        break;
      case 5:
        v350 = v389[0];
        do
        {
          v351 = __ldaxr(v350);
          v352 = v351 - 1;
        }
        while (__stlxr(v352, v350));
        if (!v352)
        {
          v340 = v389[0];
          if (v389[0])
          {
            *(_QWORD *)&v382 = v389[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
LABEL_568:
            v192 = v340;
            v193 = 0x1020C405E66F15BLL;
            goto LABEL_575;
          }
        }
        break;
      case 8:
        v353 = v389[0];
        do
        {
          v354 = __ldaxr(v353);
          v355 = v354 - 1;
        }
        while (__stlxr(v355, v353));
        if (!v355)
        {
          v356 = v389[0];
          if (v389[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v389[0] + 2);
            v192 = v356;
            v344 = -235920773;
            goto LABEL_574;
          }
        }
        break;
      case 9:
        v341 = v389[0];
        do
        {
          v342 = __ldaxr(v341);
          v343 = v342 - 1;
        }
        while (__stlxr(v343, v341));
        if (!v343)
        {
          v26 = (turi::thread *)v389[0];
          if (v389[0])
          {
            v192 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v389[0]);
            v344 = 2071181815;
LABEL_574:
            v193 = v344 | 0x1030C4000000000;
LABEL_575:
            v26 = (turi::thread *)MEMORY[0x219A19A08](v192, v193);
          }
        }
        break;
      default:
        break;
    }
    memset(v389, 0, 13);
    switch(BYTE12(v395[0]))
    {
      case 2:
        v357 = *(unint64_t **)&v395[0];
        do
        {
          v358 = __ldaxr(v357);
          v216 = --v358 == 0;
        }
        while (__stlxr(v358, v357));
        goto LABEL_579;
      case 3:
        v364 = *(unint64_t **)&v395[0];
        do
        {
          v365 = __ldaxr(v364);
          v225 = --v365 == 0;
        }
        while (__stlxr(v365, v364));
        goto LABEL_600;
      case 4:
        v360 = *(unint64_t **)&v395[0];
        do
        {
          v361 = __ldaxr(v360);
          v219 = --v361 == 0;
        }
        while (__stlxr(v361, v360));
        goto LABEL_587;
      case 5:
        v367 = *(unint64_t **)&v395[0];
        do
        {
          v368 = __ldaxr(v367);
          v228 = --v368 == 0;
        }
        while (__stlxr(v368, v367));
        goto LABEL_608;
      case 8:
        v369 = *(unint64_t **)&v395[0];
        do
        {
          v370 = __ldaxr(v369);
          v231 = --v370 == 0;
        }
        while (__stlxr(v370, v369));
        goto LABEL_616;
      case 9:
        v362 = *(unint64_t **)&v395[0];
        do
        {
          v363 = __ldaxr(v362);
          v222 = --v363 == 0;
        }
        while (__stlxr(v363, v362));
        goto LABEL_593;
      default:
        break;
    }
  }
  else
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "f1_score"))
    {
      *(_QWORD *)&__p = a1;
      turi::evaluation::get_evaluator_metric(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)::{lambda(void)#1}::operator()();
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    v232 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v232, (uint64_t)v395);
    if (SHIBYTE(v373[0]) < 0)
      operator delete((void *)__p);
    *(_QWORD **)((char *)v388 + 5) = *(_QWORD **)((char *)v395 + 5);
    v388[0] = *(_QWORD **)&v395[0];
    BYTE4(v388[1]) = BYTE12(v395[0]);
    if (BYTE12(v395[0]) <= 9u && ((1 << SBYTE12(v395[0])) & 0x33C) != 0)
    {
      v233 = v388[0];
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 + 1, v233));
    }
    turi::evaluation::fbeta_score::fbeta_score((uint64_t)&__p, (turi::evaluation *)v388, 1.0);
    std::make_shared[abi:ne180100]<turi::evaluation::fbeta_score,turi::evaluation::fbeta_score,void>((uint64_t)&__p, (uint64_t *)&v396);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v396);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v396);
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v388[1]))
    {
      case 2:
        v235 = v388[0];
        do
        {
          v236 = __ldaxr(v235);
          v237 = v236 - 1;
        }
        while (__stlxr(v237, v235));
        if (!v237)
        {
          v238 = v388[0];
          if (v388[0])
          {
            if (*((char *)v388[0] + 31) < 0)
              operator delete(*((void **)v388[0] + 1));
            v239 = v238;
            v240 = 0x1012C404EF22A49;
            goto LABEL_526;
          }
        }
        break;
      case 3:
        v313 = v388[0];
        do
        {
          v314 = __ldaxr(v313);
          v315 = v314 - 1;
        }
        while (__stlxr(v315, v313));
        if (!v315)
        {
          v316 = v388[0];
          if (v388[0])
          {
            v317 = (void *)v388[0][1];
            if (v317)
            {
              v388[0][2] = v317;
              operator delete(v317);
            }
            v239 = v316;
            v240 = 0x1080C409938AC02;
            goto LABEL_526;
          }
        }
        break;
      case 4:
        v305 = v388[0];
        do
        {
          v306 = __ldaxr(v305);
          v307 = v306 - 1;
        }
        while (__stlxr(v307, v305));
        if (!v307)
        {
          v308 = v388[0];
          if (v388[0])
          {
            *(_QWORD *)&v382 = v388[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
            goto LABEL_519;
          }
        }
        break;
      case 5:
        v318 = v388[0];
        do
        {
          v319 = __ldaxr(v318);
          v320 = v319 - 1;
        }
        while (__stlxr(v320, v318));
        if (!v320)
        {
          v308 = v388[0];
          if (v388[0])
          {
            *(_QWORD *)&v382 = v388[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v382);
LABEL_519:
            v239 = v308;
            v240 = 0x1020C405E66F15BLL;
            goto LABEL_526;
          }
        }
        break;
      case 8:
        v321 = v388[0];
        do
        {
          v322 = __ldaxr(v321);
          v323 = v322 - 1;
        }
        while (__stlxr(v323, v321));
        if (!v323)
        {
          v324 = v388[0];
          if (v388[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v388[0] + 2);
            v239 = v324;
            v312 = -235920773;
            goto LABEL_525;
          }
        }
        break;
      case 9:
        v309 = v388[0];
        do
        {
          v310 = __ldaxr(v309);
          v311 = v310 - 1;
        }
        while (__stlxr(v311, v309));
        if (!v311)
        {
          v26 = (turi::thread *)v388[0];
          if (v388[0])
          {
            v239 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v388[0]);
            v312 = 2071181815;
LABEL_525:
            v240 = v312 | 0x1030C4000000000;
LABEL_526:
            v26 = (turi::thread *)MEMORY[0x219A19A08](v239, v240);
          }
        }
        break;
      default:
        break;
    }
    memset(v388, 0, 13);
    switch(BYTE12(v395[0]))
    {
      case 2:
        v325 = *(unint64_t **)&v395[0];
        do
        {
          v326 = __ldaxr(v325);
          v216 = --v326 == 0;
        }
        while (__stlxr(v326, v325));
LABEL_579:
        if (v216)
        {
          v167 = *(_QWORD *)&v395[0];
          if (*(_QWORD *)&v395[0])
          {
LABEL_582:
            if (*(char *)(v167 + 31) < 0)
              operator delete(*(void **)(v167 + 8));
            v181 = (_QWORD *)v167;
            v359 = 0x1012C404EF22A49;
            goto LABEL_613;
          }
        }
        break;
      case 3:
        v331 = *(unint64_t **)&v395[0];
        do
        {
          v332 = __ldaxr(v331);
          v225 = --v332 == 0;
        }
        while (__stlxr(v332, v331));
LABEL_600:
        if (v225)
        {
          v175 = *(_QWORD **)&v395[0];
          if (*(_QWORD *)&v395[0])
          {
LABEL_603:
            v366 = (void *)v175[1];
            if (v366)
            {
              v175[2] = v366;
              operator delete(v366);
            }
            v181 = v175;
            v359 = 0x1080C409938AC02;
            goto LABEL_613;
          }
        }
        break;
      case 4:
        v327 = *(unint64_t **)&v395[0];
        do
        {
          v328 = __ldaxr(v327);
          v219 = --v328 == 0;
        }
        while (__stlxr(v328, v327));
LABEL_587:
        if (v219)
        {
          v170 = *(_QWORD **)&v395[0];
          if (*(_QWORD *)&v395[0])
          {
LABEL_590:
            *(_QWORD *)&__p = v170 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_612;
          }
        }
        break;
      case 5:
        v333 = *(unint64_t **)&v395[0];
        do
        {
          v334 = __ldaxr(v333);
          v228 = --v334 == 0;
        }
        while (__stlxr(v334, v333));
LABEL_608:
        if (v228)
        {
          v170 = *(_QWORD **)&v395[0];
          if (*(_QWORD *)&v395[0])
          {
LABEL_611:
            *(_QWORD *)&__p = v170 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_612:
            v181 = v170;
            v359 = 0x1020C405E66F15BLL;
            goto LABEL_613;
          }
        }
        break;
      case 8:
        v335 = *(unint64_t **)&v395[0];
        do
        {
          v336 = __ldaxr(v335);
          v231 = --v336 == 0;
        }
        while (__stlxr(v336, v335));
LABEL_616:
        if (v231)
        {
          v371 = *(_QWORD *)&v395[0];
          if (*(_QWORD *)&v395[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v395[0] + 16));
            v26 = (turi::thread *)MEMORY[0x219A19A08](v371, 0x1030C40F1F0227BLL);
          }
          *(_QWORD *)&v395[0] = 0;
        }
        break;
      case 9:
        v329 = *(unint64_t **)&v395[0];
        do
        {
          v330 = __ldaxr(v329);
          v222 = --v330 == 0;
        }
        while (__stlxr(v330, v329));
LABEL_593:
        if (v222)
        {
          v26 = *(turi::thread **)&v395[0];
          if (*(_QWORD *)&v395[0])
          {
LABEL_596:
            v181 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v26);
            v182 = 2071181815;
LABEL_597:
            v359 = v182 | 0x1030C4000000000;
LABEL_613:
            v26 = (turi::thread *)MEMORY[0x219A19A08](v181, v359);
          }
        }
        break;
      default:
        break;
    }
  }
LABEL_106:
  v48 = turi::thread::cpu_count(v26);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, v48);
}

void sub_218477DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unsigned int v118;
  _QWORD *v119;
  void *v120;
  uint64_t v121;

  turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
  switch(*(_BYTE *)(v66 - 212))
  {
    case 2:
      v68 = *(unint64_t **)(v66 - 224);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (v70)
        goto LABEL_39;
      v71 = *(_QWORD *)(v66 - 224);
      if (!v71)
        goto LABEL_39;
      if (*(char *)(v71 + 31) < 0)
        operator delete(*(void **)(v71 + 8));
      v72 = (_QWORD *)v71;
      v73 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v83 = *(unint64_t **)(v66 - 224);
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (v85)
        goto LABEL_39;
      v86 = *(_QWORD **)(v66 - 224);
      if (!v86)
        goto LABEL_39;
      v87 = (void *)v86[1];
      if (v87)
      {
        v86[2] = v87;
        operator delete(v87);
      }
      v72 = v86;
      v73 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v74 = *(unint64_t **)(v66 - 224);
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (v76)
        goto LABEL_39;
      v77 = *(_QWORD **)(v66 - 224);
      if (!v77)
        goto LABEL_39;
      a65 = (uint64_t)(v77 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
      goto LABEL_31;
    case 5:
      v88 = *(unint64_t **)(v66 - 224);
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (v90)
        goto LABEL_39;
      v77 = *(_QWORD **)(v66 - 224);
      if (!v77)
        goto LABEL_39;
      a65 = (uint64_t)(v77 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
LABEL_31:
      v72 = v77;
      v73 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v91 = *(unint64_t **)(v66 - 224);
      do
      {
        v92 = __ldaxr(v91);
        v93 = v92 - 1;
      }
      while (__stlxr(v93, v91));
      if (v93)
        goto LABEL_39;
      v94 = *(_QWORD *)(v66 - 224);
      if (!v94)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v94 + 16));
      v72 = (_QWORD *)v94;
      v82 = -235920773;
      goto LABEL_37;
    case 9:
      v78 = *(unint64_t **)(v66 - 224);
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (v80)
        goto LABEL_39;
      v81 = *(_QWORD **)(v66 - 224);
      if (!v81)
        goto LABEL_39;
      v72 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v81);
      v82 = 2071181815;
LABEL_37:
      v73 = v82 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v72, v73);
LABEL_39:
      *(_QWORD *)(v66 - 224) = 0;
      *(_DWORD *)(v66 - 216) = 0;
      *(_BYTE *)(v66 - 212) = 0;
      switch(*(_BYTE *)(v66 - 116))
      {
        case 2:
          v95 = *(unint64_t **)(v66 - 128);
          do
          {
            v96 = __ldaxr(v95);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, v95));
          if (v97)
            goto LABEL_84;
          v113 = *(_QWORD *)(v66 - 128);
          if (!v113)
            goto LABEL_83;
          if (*(char *)(v113 + 31) < 0)
            operator delete(*(void **)(v113 + 8));
          v114 = (_QWORD *)v113;
          v115 = 0x1012C404EF22A49;
          goto LABEL_82;
        case 3:
          v104 = *(unint64_t **)(v66 - 128);
          do
          {
            v105 = __ldaxr(v104);
            v106 = v105 - 1;
          }
          while (__stlxr(v106, v104));
          if (v106)
            goto LABEL_84;
          v119 = *(_QWORD **)(v66 - 128);
          if (!v119)
            goto LABEL_83;
          v120 = (void *)v119[1];
          if (v120)
          {
            v119[2] = v120;
            operator delete(v120);
          }
          v114 = v119;
          v115 = 0x1080C409938AC02;
          goto LABEL_82;
        case 4:
          v98 = *(unint64_t **)(v66 - 128);
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (v100)
            goto LABEL_84;
          v116 = *(_QWORD **)(v66 - 128);
          if (!v116)
            goto LABEL_83;
          __p = v116 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_77;
        case 5:
          v107 = *(unint64_t **)(v66 - 128);
          do
          {
            v108 = __ldaxr(v107);
            v109 = v108 - 1;
          }
          while (__stlxr(v109, v107));
          if (v109)
            goto LABEL_84;
          v116 = *(_QWORD **)(v66 - 128);
          if (!v116)
            goto LABEL_83;
          __p = v116 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_77:
          v114 = v116;
          v115 = 0x1020C405E66F15BLL;
          goto LABEL_82;
        case 8:
          v110 = *(unint64_t **)(v66 - 128);
          do
          {
            v111 = __ldaxr(v110);
            v112 = v111 - 1;
          }
          while (__stlxr(v112, v110));
          if (v112)
            goto LABEL_84;
          v121 = *(_QWORD *)(v66 - 128);
          if (!v121)
            goto LABEL_83;
          boost::detail::shared_count::~shared_count((unsigned int **)(v121 + 16));
          v114 = (_QWORD *)v121;
          v118 = -235920773;
          goto LABEL_81;
        case 9:
          v101 = *(unint64_t **)(v66 - 128);
          do
          {
            v102 = __ldaxr(v101);
            v103 = v102 - 1;
          }
          while (__stlxr(v103, v101));
          if (v103)
            goto LABEL_84;
          v117 = *(_QWORD **)(v66 - 128);
          if (!v117)
            goto LABEL_83;
          v114 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v117);
          v118 = 2071181815;
LABEL_81:
          v115 = v118 | 0x1030C4000000000;
LABEL_82:
          MEMORY[0x219A19A08](v114, v115);
LABEL_83:
          *(_QWORD *)(v66 - 128) = 0;
LABEL_84:
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v65);
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_84;
      }
    default:
      goto LABEL_39;
  }
}

void turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string> *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t i;
  _QWORD *v13;
  uint64_t v14;
  std::vector<std::string>::const_iterator v15;
  std::vector<std::string>::const_iterator v16;
  unsigned int *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t j;
  std::vector<std::string>::const_iterator v25;
  std::vector<std::string>::const_iterator v26;
  unsigned int *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t k;
  turi::thread *v38;
  std::vector<std::string>::pointer begin;
  std::string *end;
  __int128 v41;
  int v42;
  BOOL v43;
  std::string::size_type size;
  const char *v48;
  const std::string::value_type *v50;
  uint64_t v52;
  int v53;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD v74[2];
  std::__shared_weak_count *v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  void *__p[2];
  __int128 v83;
  int v84;
  void *v85;
  char v86;
  _QWORD v87[2];
  std::__shared_weak_count *v88;
  uint64_t *v89[2];
  std::__shared_weak_count *v90;
  _QWORD v91[2];
  std::__shared_weak_count *v92;
  void **v93;
  _QWORD v94[3];
  _QWORD *v95;
  std::string *v96;
  _OWORD v97[2];
  void *v98;
  char v99;
  std::string v100;
  std::string v101;
  __int128 v102;
  _QWORD v103[5];
  _QWORD v104[3];
  _DWORD v105[2];
  uint64_t v106;
  int v107;
  char v108;
  __int128 v109;
  char v110;
  _QWORD v111[3];
  _QWORD *v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)a6 = a6 + 8;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v100 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v101 = *(std::string *)a4;
  v96 = 0;
  v97[0] = 0uLL;
  LOBYTE(__p[1]) = 0;
  v96 = (std::string *)operator new(0x30uLL);
  *(_QWORD *)&v97[0] = v96;
  *((_QWORD *)&v97[0] + 1) = v96 + 2;
  *(_QWORD *)&v97[0] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v97 + 8, (__int128 *)&v100, &v102, v96);
  turi::gl_sframe::select_columns(a2, (uint64_t)&v96, v91);
  __p[0] = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v101.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v100 + i * 8 + 24));
  }
  turi::gl_sframe::operator[]((uint64_t)v91, a4, (turi::gl_sarray *)&v100);
  v111[0] = &off_24D9431F0;
  v111[1] = a5;
  v112 = v111;
  turi::gl_sarray::apply((uint64_t)&v100, (uint64_t)v111, *(char *)(*a5 + 12), 1, (uint64_t)&v96);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::gl_sframe::add_column((uint64_t)v91, (uint64_t)&v96, (uint64_t)__p);
  if (SBYTE7(v83) < 0)
    operator delete(__p[0]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v96);
  v13 = v112;
  if (v112 == v111)
  {
    v14 = 4;
    v13 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_18;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_18:
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
  if (SHIBYTE(v103[0]) < 0)
    operator delete((void *)v102);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v100);
  v15.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,char [17]>((unsigned __int8 *)a1->__begin_, (unsigned __int8 *)a1->__end_, "confusion_matrix");
  v16.__i_ = a1->__end_;
  if (v16.__i_ != v15.__i_)
  {
    std::vector<std::string>::erase(a1, v15, v16);
    turi::gl_sframe::operator[]((uint64_t)v91, a3, (turi::gl_sarray *)&v96);
    std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[6],turi::gl_sarray_reference,0>(&v100, "class", (uint64_t)&v96);
    turi::gl_sframe::column_names((turi::gl_sframe *)v91);
    turi::gl_sframe::operator[]((uint64_t)v91, *((_QWORD *)&v109 + 1) - 24, (turi::gl_sarray *)__p);
    std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[6],turi::gl_sarray_reference,0>(v103, "predicted_class", (uint64_t)__p);
    turi::gl_sframe::gl_sframe(v87, &v100, 2);
    std::string::basic_string[abi:ne180100]<0>(v80, "class");
    std::string::basic_string[abi:ne180100]<0>(v78, "predicted_class");
    turi::supervised::confusion_matrix((uint64_t)v87, (uint64_t)v80, (uint64_t)v78, v89);
    std::string::basic_string[abi:ne180100]<0>(v76, "confusion_matrix");
    v93 = v76;
    v17 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a6, (const void **)v76, (uint64_t)&std::piecewise_construct, (_OWORD **)&v93);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::gl_sframe>(v17 + 14, (uint64_t)v89);
    if (v77 < 0)
      operator delete(v76[0]);
    v89[0] = (uint64_t *)off_24D91E9C0;
    v18 = v90;
    if (v90)
    {
      p_shared_owners = (unint64_t *)&v90->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v79 < 0)
      operator delete(v78[0]);
    if (v81 < 0)
      operator delete(v80[0]);
    v87[0] = off_24D91E9C0;
    v21 = v88;
    if (v88)
    {
      v22 = (unint64_t *)&v88->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    for (j = 0; j != -16; j -= 8)
    {
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v103[j + 3]);
      if (SHIBYTE(v103[j + 2]) < 0)
        operator delete((void *)v103[j]);
    }
    __p[0] = off_24D91EA30;
    if (v86 < 0)
      operator delete(v85);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
    v80[0] = &v109;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
    v96 = (std::string *)off_24D91EA30;
    if (v99 < 0)
      operator delete(v98);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v96);
    v15.__i_ = a1->__end_;
  }
  v25.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,char [16]>((unsigned __int8 *)a1->__begin_, (unsigned __int8 *)v15.__i_, "report_by_class");
  v26.__i_ = a1->__end_;
  if (v26.__i_ != v25.__i_)
  {
    std::vector<std::string>::erase(a1, v25, v26);
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v74, (const turi::gl_sframe *)v91);
    turi::gl_sframe::column_names((turi::gl_sframe *)v91);
    turi::supervised::classifier_report_by_class((uint64_t)v74, a3, *(_QWORD *)&v97[0] - 24, (uint64_t)&v100);
    std::string::basic_string[abi:ne180100]<0>(__p, "report_by_class");
    v89[0] = (uint64_t *)__p;
    v27 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v89);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::gl_sframe>(v27 + 14, (uint64_t)&v100);
    if (SBYTE7(v83) < 0)
      operator delete(__p[0]);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v28 = (std::__shared_weak_count *)v100.__r_.__value_.__r.__words[2];
    if (v100.__r_.__value_.__r.__words[2])
    {
      v29 = (unint64_t *)(v100.__r_.__value_.__r.__words[2] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    __p[0] = &v96;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v74[0] = off_24D91E9C0;
    v31 = v75;
    if (v75)
    {
      v32 = (unint64_t *)&v75->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v83 = 0u;
  v84 = 1065353216;
  v34 = *a5;
  if (a5[1] != *a5)
  {
    v35 = 0;
    v36 = 0;
    do
    {
      v100.__r_.__value_.__r.__words[0] = v34 + v35;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)(v34 + v35), (uint64_t)&std::piecewise_construct, (void **)&v100.__r_.__value_.__l.__data_)+ 4) = v36++;
      v34 = *a5;
      v35 += 16;
    }
    while (v36 < (uint64_t)(a5[1] - *a5) >> 4);
  }
  turi::flexible_type_converter<std::unordered_map<turi::flexible_type,unsigned long>>::set((uint64_t)__p, (uint64_t)&v109);
  *(_QWORD *)((char *)v97 + 5) = *(_QWORD *)((char *)&v109 + 5);
  *(_QWORD *)&v97[0] = v109;
  BYTE12(v97[0]) = BYTE12(v109);
  LODWORD(v96) = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v100, "index_map", (unsigned int *)&v96);
  std::string::basic_string[abi:ne180100]<0>(v104, "binary");
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v105[0] = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v89, (const void **)&v100.__r_.__value_.__l.__data_, 2);
  for (k = 0; k != -208; k -= 104)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v105[k / 4]);
    if (SHIBYTE(v104[k / 8 + 2]) < 0)
      operator delete((void *)v104[k / 8]);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v96);
  v97[0] = 0uLL;
  v96 = (std::string *)v97;
  begin = a1->__begin_;
  end = a1->__end_;
  if (a1->__begin_ != end)
  {
    while (1)
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v100, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
      }
      else
      {
        v41 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v41;
      }
      v42 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(begin->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        switch(*((_BYTE *)&begin->__r_.__value_.__s + 23))
        {
          case 3:
            v43 = LOWORD(begin->__r_.__value_.__l.__data_) == 30049 && begin->__r_.__value_.__s.__data_[2] == 99;
            if (v43)
              goto LABEL_136;
            goto LABEL_145;
          case 6:
            goto LABEL_117;
          case 8:
            if (begin->__r_.__value_.__r.__words[0] == 0x7963617275636361)
              goto LABEL_133;
            if (begin->__r_.__value_.__r.__words[0] == 0x65726F63735F3166)
              goto LABEL_139;
            if (v42 == 6)
              goto LABEL_117;
            if (v42 == 8 && begin->__r_.__value_.__r.__words[0] == 0x73736F6C5F676F6CLL)
              goto LABEL_110;
            goto LABEL_145;
          case 9:
            if (begin->__r_.__value_.__r.__words[0] == 0x6F69736963657270
              && begin->__r_.__value_.__s.__data_[8] == 110)
            {
              goto LABEL_136;
            }
            v50 = (const std::string::value_type *)begin;
            if (v42 != 9)
              goto LABEL_116;
            goto LABEL_125;
          default:
            goto LABEL_145;
        }
      }
      size = begin->__r_.__value_.__l.__size_;
      if (size == 3)
      {
        if (*(_WORD *)begin->__r_.__value_.__l.__data_ == 30049
          && *(_BYTE *)(begin->__r_.__value_.__r.__words[0] + 2) == 99)
        {
          goto LABEL_136;
        }
        size = begin->__r_.__value_.__l.__size_;
      }
      else if (size == 8 && *(_QWORD *)begin->__r_.__value_.__l.__data_ == 0x7963617275636361)
      {
LABEL_133:
        std::string::basic_string[abi:ne180100]<0>(&v109, "average");
        v80[0] = &v109;
        v56 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v89, (const void **)&v109, (uint64_t)&std::piecewise_construct, (_OWORD **)v80);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<char [6]>(v56 + 14, "micro");
        if (v110 < 0)
          operator delete((void *)v109);
        v48 = "flexible_accuracy";
        goto LABEL_144;
      }
      if (size != 8)
        goto LABEL_92;
      if (*(_QWORD *)begin->__r_.__value_.__l.__data_ == 0x65726F63735F3166)
        break;
      size = begin->__r_.__value_.__l.__size_;
      if (size != 8)
        goto LABEL_92;
      if (*(_QWORD *)begin->__r_.__value_.__l.__data_ == 0x73736F6C5F676F6CLL)
      {
LABEL_110:
        v48 = "multiclass_logloss";
LABEL_144:
        MEMORY[0x219A19390](&v100, v48);
        goto LABEL_145;
      }
      if ((v42 & 0x80) != 0)
      {
LABEL_92:
        if (size != 9)
          goto LABEL_98;
        if (*(_QWORD *)begin->__r_.__value_.__l.__data_ == 0x6F69736963657270
          && *(_BYTE *)(begin->__r_.__value_.__r.__words[0] + 8) == 110)
        {
          goto LABEL_136;
        }
        size = begin->__r_.__value_.__l.__size_;
LABEL_98:
        if (size == 6)
        {
          if (*(_DWORD *)begin->__r_.__value_.__l.__data_ != 1633903986
            || *(_WORD *)(begin->__r_.__value_.__r.__words[0] + 4) != 27756)
          {
LABEL_122:
            size = begin->__r_.__value_.__l.__size_;
            goto LABEL_123;
          }
LABEL_136:
          std::string::basic_string[abi:ne180100]<0>(&v109, "average");
          v80[0] = &v109;
          v57 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v89, (const void **)&v109, (uint64_t)&std::piecewise_construct, (_OWORD **)v80);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<char [6]>(v57 + 14, "macro");
        }
        else
        {
LABEL_123:
          if (size != 9)
            goto LABEL_145;
          v50 = (const std::string::value_type *)begin->__r_.__value_.__r.__words[0];
LABEL_125:
          v52 = *(_QWORD *)v50;
          v53 = *((unsigned __int8 *)v50 + 8);
          if (v52 != 0x767275635F636F72 || v53 != 101)
            goto LABEL_145;
          std::string::basic_string[abi:ne180100]<0>(&v109, "average");
          v80[0] = &v109;
          v55 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v89, (const void **)&v109, (uint64_t)&std::piecewise_construct, (_OWORD **)v80);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<char [8]>(v55 + 14, "default");
        }
        if (v110 < 0)
          operator delete((void *)v109);
        goto LABEL_145;
      }
LABEL_116:
      if (v42 == 6)
      {
LABEL_117:
        if (LODWORD(begin->__r_.__value_.__l.__data_) == 1633903986
          && WORD2(begin->__r_.__value_.__r.__words[0]) == 27756)
        {
          goto LABEL_136;
        }
        if ((v42 & 0x80) != 0)
          goto LABEL_122;
      }
LABEL_145:
      turi::evaluation::get_evaluator_metric(&v100, (uint64_t)v89, &v109);
      v80[0] = begin;
      v60 = std::__tree<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v96, (const void **)&begin->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v80);
      v38 = (turi::thread *)std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v60 + 7), &v109);
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
      if (*((_QWORD *)&v109 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      if (++begin == end)
        goto LABEL_153;
    }
LABEL_139:
    std::string::basic_string[abi:ne180100]<0>(&v109, "average");
    v80[0] = &v109;
    v58 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v89, (const void **)&v109, (uint64_t)&std::piecewise_construct, (_OWORD **)v80);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<char [6]>(v58 + 14, "macro");
    if (v110 < 0)
      operator delete((void *)v109);
    v78[0] = (void *)0x3FF0000000000000;
    std::string::basic_string[abi:ne180100]<0>(&v109, "beta");
    v80[0] = &v109;
    v59 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v89, (const void **)&v109, (uint64_t)&std::piecewise_construct, (_OWORD **)v80);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<double>(v59 + 14, v78);
    if (v110 < 0)
      operator delete((void *)v109);
    v48 = "fbeta_score";
    goto LABEL_144;
  }
LABEL_153:
  v94[0] = &off_24D943270;
  v94[1] = &v96;
  v95 = v94;
  v64 = turi::thread::cpu_count(v38);
  turi::gl_sframe::materialize_to_callback((uint64_t)v91, (uint64_t)v94, v64);
  v65 = v95;
  if (v95 == v94)
  {
    v66 = 4;
    v65 = v94;
  }
  else
  {
    if (!v95)
      goto LABEL_158;
    v66 = 5;
  }
  (*(void (**)(_QWORD *))(*v65 + 8 * v66))(v65);
LABEL_158:
  v67 = (uint64_t *)v96;
  if (v96 != (std::string *)v97)
  {
    do
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v67[7] + 64))(&v100);
      *(_QWORD *)&v109 = v67 + 4;
      v68 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a6, (const void **)v67 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v109);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v68 + 14, (unsigned int *)&v100);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v100);
      v69 = (uint64_t *)v67[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (uint64_t *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (uint64_t *)v67[2];
          v43 = *v70 == (_QWORD)v67;
          v67 = v70;
        }
        while (!v43);
      }
      v67 = v70;
    }
    while (v70 != (uint64_t *)v97);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>>>::destroy((uint64_t)&v96, *(_QWORD **)&v97[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v89, (char *)v89[1]);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)__p);
  v91[0] = off_24D91E9C0;
  v71 = v92;
  if (v92)
  {
    v72 = (unint64_t *)&v92->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_21847A0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  if (a60 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v60, *(char **)(v60 + 8));
  _Unwind_Resume(a1);
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,char [17]>(unsigned __int8 *a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  size_t v8;
  size_t v9;
  unsigned __int8 *v10;
  __int128 v11;

  v5 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [17],std::__identity>(a1, a2, a3);
  v6 = v5 + 24;
  if (v5 != a2 && v6 != a2)
  {
    do
    {
      v8 = strlen(a3);
      v9 = v8;
      if ((char)v6[23] < 0)
      {
        if (v8 != *((_QWORD *)v6 + 1))
          goto LABEL_13;
        if (v8 == -1)
LABEL_18:
          std::string::__throw_out_of_range[abi:ne180100]();
        v10 = *(unsigned __int8 **)v6;
      }
      else
      {
        if (v8 != v6[23])
          goto LABEL_13;
        v10 = v6;
        if (v9 == -1)
          goto LABEL_18;
      }
      if (memcmp(v10, a3, v9))
      {
LABEL_13:
        if ((char)v5[23] < 0)
          operator delete(*(void **)v5);
        v11 = *(_OWORD *)v6;
        *((_QWORD *)v5 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v5 = v11;
        v5 += 24;
        v6[23] = 0;
        *v6 = 0;
      }
      v6 += 24;
    }
    while (v6 != a2);
  }
  return v5;
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,char [16]>(unsigned __int8 *a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  size_t v8;
  size_t v9;
  unsigned __int8 *v10;
  __int128 v11;

  v5 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [16],std::__identity>(a1, a2, a3);
  v6 = v5 + 24;
  if (v5 != a2 && v6 != a2)
  {
    do
    {
      v8 = strlen(a3);
      v9 = v8;
      if ((char)v6[23] < 0)
      {
        if (v8 != *((_QWORD *)v6 + 1))
          goto LABEL_13;
        if (v8 == -1)
LABEL_18:
          std::string::__throw_out_of_range[abi:ne180100]();
        v10 = *(unsigned __int8 **)v6;
      }
      else
      {
        if (v8 != v6[23])
          goto LABEL_13;
        v10 = v6;
        if (v9 == -1)
          goto LABEL_18;
      }
      if (memcmp(v10, a3, v9))
      {
LABEL_13:
        if ((char)v5[23] < 0)
          operator delete(*(void **)v5);
        v11 = *(_OWORD *)v6;
        *((_QWORD *)v5 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v5 = v11;
        v5 += 24;
        v6[23] = 0;
        *v6 = 0;
      }
      v6 += 24;
    }
    while (v6 != a2);
  }
  return v5;
}

void turi::evaluation::compute_classifier_metrics(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, turi::gl_sarray *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  unsigned __int8 *v12;
  _DWORD *v13;
  int v14;
  int v15;
  std::vector<std::string>::pointer end;
  __int128 v18;
  int v19;
  std::string *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const std::string *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  void *v52;
  void *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  std::string *v90;
  unint64_t *v91;
  unint64_t v92;
  BOOL v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  BOOL v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  BOOL v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  BOOL v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  unsigned int v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  void *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  __int128 *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *p_shared_owners;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t i;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  __int128 v171;
  uint64_t v172;
  void *v173[2];
  char v174;
  void *v175[2];
  char v176;
  _QWORD v177[2];
  std::__shared_weak_count *v178;
  std::vector<std::string> v179;
  __int128 v180;
  _QWORD v181[2];
  std::vector<std::string> v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  char *v187;
  std::__shared_weak_count *v188;
  __int128 v189;
  uint64_t v190[6];
  char v191;
  _BYTE __str[32];
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  _QWORD v196[3];
  uint64_t v197[3];
  uint64_t v198[3];
  uint64_t v199[3];
  _QWORD v200[3];
  __int128 v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  __int128 *v204;
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__str, "accuracy");
  std::string::basic_string[abi:ne180100]<0>(&__str[24], "auc");
  std::string::basic_string[abi:ne180100]<0>(&v194, "precision");
  std::string::basic_string[abi:ne180100]<0>(v196, "recall");
  std::string::basic_string[abi:ne180100]<0>(v197, "f1_score");
  std::string::basic_string[abi:ne180100]<0>(v198, "log_loss");
  std::string::basic_string[abi:ne180100]<0>(v199, "confusion_matrix");
  std::string::basic_string[abi:ne180100]<0>(v200, "roc_curve");
  memset(&v182, 0, sizeof(v182));
  *(_QWORD *)&v189 = &v182;
  BYTE8(v189) = 0;
  v182.__begin_ = (std::vector<std::string>::pointer)operator new(0xC0uLL);
  v182.__end_ = v182.__begin_;
  v182.__end_cap_.__value_ = v182.__begin_ + 8;
  v11 = 0;
  v182.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v182.__end_cap_, (__int128 *)__str, &v201, v182.__begin_);
  do
  {
    if (SHIBYTE(v200[v11 + 2]) < 0)
      operator delete((void *)v200[v11]);
    v11 -= 3;
  }
  while (v11 != -24);
  if (((char)a3[23] & 0x80000000) == 0)
  {
    if (a3[23] != 4)
    {
      v12 = a3;
      if (a3[23] != 6)
        goto LABEL_22;
      goto LABEL_12;
    }
    v19 = *(_DWORD *)a3;
    goto LABEL_21;
  }
  v13 = (_DWORD *)*((_QWORD *)a3 + 1);
  if (v13 == (_DWORD *)4)
  {
    v19 = **(_DWORD **)a3;
LABEL_21:
    if (v19 == 1869903201)
      goto LABEL_29;
LABEL_22:
    v20 = (std::string *)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v182.__begin_, (uint64_t)v182.__end_, (unsigned __int8 **)a3);
    if (v20 == v182.__end_)
    {
      *(_QWORD *)__str = a3;
    }
    if ((char)a3[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      *(_OWORD *)__str = *(_OWORD *)a3;
      *(_QWORD *)&__str[16] = *((_QWORD *)a3 + 2);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v182, (std::string *)__str, (__int128 *)&__str[24], 1uLL);
    if ((__str[23] & 0x80000000) == 0)
      goto LABEL_29;
    v21 = *(void **)__str;
    goto LABEL_28;
  }
  if (v13 != (_DWORD *)6)
    goto LABEL_22;
  v12 = *(unsigned __int8 **)a3;
LABEL_12:
  v14 = *(_DWORD *)v12;
  v15 = *((unsigned __int16 *)v12 + 2);
  if (v14 != 1869636978 || v15 != 29810)
    goto LABEL_22;
  std::string::basic_string[abi:ne180100]<0>(&v189, "report_by_class");
  end = v182.__end_;
  if (v182.__end_ >= v182.__end_cap_.__value_)
  {
    v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v182.__end_ - (char *)v182.__begin_) >> 3);
    v85 = v84 + 1;
    if (v84 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v182.__end_cap_.__value_ - (char *)v182.__begin_) >> 3) > v85)
      v85 = 0x5555555555555556 * (((char *)v182.__end_cap_.__value_ - (char *)v182.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v182.__end_cap_.__value_ - (char *)v182.__begin_) >> 3) >= 0x555555555555555)
      v86 = 0xAAAAAAAAAAAAAAALL;
    else
      v86 = v85;
    *(_QWORD *)&v193 = &v182.__end_cap_;
    if (v86)
      v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v182.__end_cap_, v86);
    else
      v87 = 0;
    v88 = &v87[24 * v84];
    *(_QWORD *)__str = v87;
    *(_QWORD *)&__str[8] = v88;
    *(_QWORD *)&__str[24] = &v87[24 * v86];
    v89 = v189;
    *((_QWORD *)v88 + 2) = v190[0];
    *(_OWORD *)v88 = v89;
    v190[0] = 0;
    v189 = 0uLL;
    *(_QWORD *)&__str[16] = v88 + 24;
    std::vector<std::string>::__swap_out_circular_buffer(&v182, (std::__split_buffer<std::string> *)__str);
    v90 = v182.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__str);
    v182.__end_ = v90;
    if ((SHIBYTE(v190[0]) & 0x80000000) == 0)
      goto LABEL_29;
    v21 = (void *)v189;
LABEL_28:
    operator delete(v21);
    goto LABEL_29;
  }
  v18 = v189;
  v182.__end_->__r_.__value_.__r.__words[2] = v190[0];
  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v18;
  v182.__end_ = end + 1;
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(__str, "classes");
  v22 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a5, (const void **)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (a5 + 8 == v22)
    turi::evaluation::compute_classifier_metrics(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  switch(*(_BYTE *)(v22 + 68))
  {
    case 0:
      v23 = *(_QWORD *)(v22 + 56);
      BYTE12(v189) = 0;
      DWORD2(v189) = 0;
      *(_QWORD *)&v189 = v23;
      v181[0] = 0;
      v180 = 0uLL;
      *(_QWORD *)__str = &v180;
      __str[8] = 0;
      *(_QWORD *)&v180 = operator new(0x10uLL);
      *((_QWORD *)&v180 + 1) = v180;
      v181[0] = v180 + 16;
      *((_QWORD *)&v180 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v181, (uint64_t *)&v189, v190, v180);
      switch(BYTE12(v189))
      {
        case 2:
          v24 = (unint64_t *)v189;
          do
          {
            v25 = __ldaxr(v24);
            v26 = --v25 == 0;
          }
          while (__stlxr(v25, v24));
          goto LABEL_107;
        case 3:
          v105 = (unint64_t *)v189;
          do
          {
            v106 = __ldaxr(v105);
            v107 = --v106 == 0;
          }
          while (__stlxr(v106, v105));
          goto LABEL_191;
        case 4:
          v91 = (unint64_t *)v189;
          do
          {
            v92 = __ldaxr(v91);
            v93 = --v92 == 0;
          }
          while (__stlxr(v92, v91));
          goto LABEL_175;
        case 5:
          v110 = (unint64_t *)v189;
          do
          {
            v111 = __ldaxr(v110);
            v112 = --v111 == 0;
          }
          while (__stlxr(v111, v110));
          goto LABEL_199;
        case 8:
          v117 = (unint64_t *)v189;
          do
          {
            v118 = __ldaxr(v117);
            v119 = --v118 == 0;
          }
          while (__stlxr(v118, v117));
          goto LABEL_206;
        case 9:
          v96 = (unint64_t *)v189;
          do
          {
            v97 = __ldaxr(v96);
            v98 = --v97 == 0;
          }
          while (__stlxr(v97, v96));
          goto LABEL_181;
        default:
          goto LABEL_212;
      }
      goto LABEL_212;
    case 1:
      v67 = *(_QWORD *)(v22 + 56);
      DWORD2(v189) = 0;
      BYTE12(v189) = 1;
      *(_QWORD *)&v189 = v67;
      v181[0] = 0;
      v180 = 0uLL;
      *(_QWORD *)__str = &v180;
      __str[8] = 0;
      *(_QWORD *)&v180 = operator new(0x10uLL);
      *((_QWORD *)&v180 + 1) = v180;
      v181[0] = v180 + 16;
      *((_QWORD *)&v180 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v181, (uint64_t *)&v189, v190, v180);
      switch(BYTE12(v189))
      {
        case 2:
          v68 = (unint64_t *)v189;
          do
          {
            v69 = __ldaxr(v68);
            v26 = --v69 == 0;
          }
          while (__stlxr(v69, v68));
          goto LABEL_107;
        case 3:
          v108 = (unint64_t *)v189;
          do
          {
            v109 = __ldaxr(v108);
            v107 = --v109 == 0;
          }
          while (__stlxr(v109, v108));
          goto LABEL_191;
        case 4:
          v94 = (unint64_t *)v189;
          do
          {
            v95 = __ldaxr(v94);
            v93 = --v95 == 0;
          }
          while (__stlxr(v95, v94));
          goto LABEL_175;
        case 5:
          v113 = (unint64_t *)v189;
          do
          {
            v114 = __ldaxr(v113);
            v112 = --v114 == 0;
          }
          while (__stlxr(v114, v113));
          goto LABEL_199;
        case 8:
          v120 = (unint64_t *)v189;
          do
          {
            v121 = __ldaxr(v120);
            v119 = --v121 == 0;
          }
          while (__stlxr(v121, v120));
          goto LABEL_206;
        case 9:
          v99 = (unint64_t *)v189;
          do
          {
            v100 = __ldaxr(v99);
            v98 = --v100 == 0;
          }
          while (__stlxr(v100, v99));
          goto LABEL_181;
        default:
          goto LABEL_212;
      }
      goto LABEL_212;
    case 2:
      v31 = (const std::string *)(*(_QWORD *)(v22 + 56) + 8);
      *(_QWORD *)&v189 = 0;
      DWORD2(v189) = 0;
      BYTE12(v189) = 0;
      turi::flexible_type::operator=<std::string>((uint64_t *)&v189, v31);
      v180 = 0uLL;
      v181[0] = 0;
      *(_QWORD *)__str = &v180;
      __str[8] = 0;
      *(_QWORD *)&v180 = operator new(0x10uLL);
      *((_QWORD *)&v180 + 1) = v180;
      v181[0] = v180 + 16;
      *((_QWORD *)&v180 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v181, (uint64_t *)&v189, v190, v180);
      switch(BYTE12(v189))
      {
        case 2:
          v32 = (unint64_t *)v189;
          do
          {
            v33 = __ldaxr(v32);
            v26 = --v33 == 0;
          }
          while (__stlxr(v33, v32));
          goto LABEL_107;
        case 3:
          v135 = (unint64_t *)v189;
          do
          {
            v136 = __ldaxr(v135);
            v107 = --v136 == 0;
          }
          while (__stlxr(v136, v135));
          goto LABEL_191;
        case 4:
          v126 = (unint64_t *)v189;
          do
          {
            v127 = __ldaxr(v126);
            v93 = --v127 == 0;
          }
          while (__stlxr(v127, v126));
          goto LABEL_175;
        case 5:
          v139 = (unint64_t *)v189;
          do
          {
            v140 = __ldaxr(v139);
            v112 = --v140 == 0;
          }
          while (__stlxr(v140, v139));
          goto LABEL_199;
        case 8:
          v141 = (unint64_t *)v189;
          do
          {
            v142 = __ldaxr(v141);
            v119 = --v142 == 0;
          }
          while (__stlxr(v142, v141));
          goto LABEL_206;
        case 9:
          v129 = (unint64_t *)v189;
          do
          {
            v130 = __ldaxr(v129);
            v98 = --v130 == 0;
          }
          while (__stlxr(v130, v129));
          goto LABEL_181;
        default:
          goto LABEL_212;
      }
      goto LABEL_212;
    case 3:
      v34 = *(_QWORD *)(v22 + 56);
      std::vector<turi::flexible_type>::vector(&v180, (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 3);
      v35 = *(_QWORD *)(v34 + 8);
      if (*(_QWORD *)(v34 + 16) != v35)
      {
        v36 = 0;
        do
        {
          v37 = v180 + 16 * v36;
          switch(*(_BYTE *)(v37 + 12))
          {
            case 2:
              v38 = *(unint64_t **)v37;
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                v41 = *(unint64_t **)v37;
                if (!*(_QWORD *)v37)
                  goto LABEL_95;
                if (*((char *)v41 + 31) < 0)
                  operator delete((void *)v41[1]);
                v42 = v41;
                v43 = 0x1012C404EF22A49;
                goto LABEL_94;
              }
              break;
            case 3:
              v55 = *(unint64_t **)v37;
              do
              {
                v56 = __ldaxr(v55);
                v57 = v56 - 1;
              }
              while (__stlxr(v57, v55));
              if (!v57)
              {
                v58 = *(unint64_t **)v37;
                if (!*(_QWORD *)v37)
                  goto LABEL_95;
                v59 = (void *)v58[1];
                if (v59)
                {
                  v58[2] = (unint64_t)v59;
                  operator delete(v59);
                }
                v42 = v58;
                v43 = 0x1080C409938AC02;
                goto LABEL_94;
              }
              break;
            case 4:
              v44 = *(unint64_t **)v37;
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                v47 = *(unint64_t **)v37;
                if (!*(_QWORD *)v37)
                  goto LABEL_95;
                *(_QWORD *)__str = v47 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                goto LABEL_87;
              }
              break;
            case 5:
              v60 = *(unint64_t **)v37;
              do
              {
                v61 = __ldaxr(v60);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, v60));
              if (!v62)
              {
                v47 = *(unint64_t **)v37;
                if (!*(_QWORD *)v37)
                  goto LABEL_95;
                *(_QWORD *)__str = v47 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_87:
                v42 = v47;
                v43 = 0x1020C405E66F15BLL;
                goto LABEL_94;
              }
              break;
            case 8:
              v63 = *(unint64_t **)v37;
              do
              {
                v64 = __ldaxr(v63);
                v65 = v64 - 1;
              }
              while (__stlxr(v65, v63));
              if (!v65)
              {
                v66 = *(unint64_t **)v37;
                if (!*(_QWORD *)v37)
                  goto LABEL_95;
                boost::detail::shared_count::~shared_count((unsigned int **)v66 + 2);
                v42 = v66;
                v54 = -235920773;
                goto LABEL_93;
              }
              break;
            case 9:
              v48 = *(unint64_t **)v37;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                v51 = *(unint64_t **)v37;
                if (*(_QWORD *)v37)
                {
                  v52 = (void *)v51[6];
                  if (v52)
                  {
                    v51[7] = (unint64_t)v52;
                    operator delete(v52);
                  }
                  v53 = (void *)v51[3];
                  if (v53)
                  {
                    v51[4] = (unint64_t)v53;
                    operator delete(v53);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v51 + 1));
                  v42 = v51;
                  v54 = 2071181815;
LABEL_93:
                  v43 = v54 | 0x1030C4000000000;
LABEL_94:
                  MEMORY[0x219A19A08](v42, v43);
                }
LABEL_95:
                *(_QWORD *)v37 = 0;
              }
              break;
            default:
              break;
          }
          *(_QWORD *)v37 = 0;
          *(_DWORD *)(v37 + 8) = 0;
          *(_BYTE *)(v37 + 12) = 1;
          *(_QWORD *)v37 = *(_QWORD *)(v35 + 8 * v36++);
          v35 = *(_QWORD *)(v34 + 8);
        }
        while (v36 < (*(_QWORD *)(v34 + 16) - v35) >> 3);
      }
      goto LABEL_212;
    case 4:
      v27 = *(_QWORD *)(v22 + 56);
      v181[0] = 0;
      v180 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v180, *(uint64_t **)(v27 + 8), *(uint64_t **)(v27 + 16), (uint64_t)(*(_QWORD *)(v27 + 16) - *(_QWORD *)(v27 + 8)) >> 4);
      goto LABEL_212;
    case 5:
      v70 = *(_QWORD *)(v22 + 56);
      memset(__str, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v70 + 8), *(uint64_t **)(v70 + 16), (uint64_t)(*(_QWORD *)(v70 + 16) - *(_QWORD *)(v70 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v180 = 0uLL;
      v181[0] = 0;
      *(_QWORD *)&v189 = __str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
      goto LABEL_212;
    case 6:
      v71 = (double)((uint64_t)(*(_QWORD *)(v22 + 56) << 8) >> 8);
      v72 = (double)*(int *)(v22 + 64) / 1000000.0;
      DWORD2(v189) = 0;
      BYTE12(v189) = 1;
      *(double *)&v189 = v72 + v71;
      v181[0] = 0;
      v180 = 0uLL;
      *(_QWORD *)__str = &v180;
      __str[8] = 0;
      *(_QWORD *)&v180 = operator new(0x10uLL);
      *((_QWORD *)&v180 + 1) = v180;
      v181[0] = v180 + 16;
      *((_QWORD *)&v180 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v181, (uint64_t *)&v189, v190, v180);
      switch(BYTE12(v189))
      {
        case 2:
          v73 = (unint64_t *)v189;
          do
          {
            v74 = __ldaxr(v73);
            v26 = --v74 == 0;
          }
          while (__stlxr(v74, v73));
LABEL_107:
          if (v26)
          {
            v75 = v189;
            if ((_QWORD)v189)
            {
              if (*(char *)(v189 + 31) < 0)
                operator delete(*(void **)(v189 + 8));
              v76 = v75;
              v77 = 0x1012C404EF22A49;
              goto LABEL_211;
            }
          }
          break;
        case 3:
          v115 = (unint64_t *)v189;
          do
          {
            v116 = __ldaxr(v115);
            v107 = --v116 == 0;
          }
          while (__stlxr(v116, v115));
LABEL_191:
          if (v107)
          {
            v137 = v189;
            if ((_QWORD)v189)
            {
              v138 = *(void **)(v189 + 8);
              if (v138)
              {
                *(_QWORD *)(v189 + 16) = v138;
                operator delete(v138);
              }
              v76 = v137;
              v77 = 0x1080C409938AC02;
              goto LABEL_211;
            }
          }
          break;
        case 4:
          v101 = (unint64_t *)v189;
          do
          {
            v102 = __ldaxr(v101);
            v93 = --v102 == 0;
          }
          while (__stlxr(v102, v101));
LABEL_175:
          if (v93)
          {
            v128 = v189;
            if ((_QWORD)v189)
            {
              *(_QWORD *)__str = v189 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
              goto LABEL_203;
            }
          }
          break;
        case 5:
          v122 = (unint64_t *)v189;
          do
          {
            v123 = __ldaxr(v122);
            v112 = --v123 == 0;
          }
          while (__stlxr(v123, v122));
LABEL_199:
          if (v112)
          {
            v128 = v189;
            if ((_QWORD)v189)
            {
              *(_QWORD *)__str = v189 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_203:
              v76 = v128;
              v77 = 0x1020C405E66F15BLL;
              goto LABEL_211;
            }
          }
          break;
        case 8:
          v124 = (unint64_t *)v189;
          do
          {
            v125 = __ldaxr(v124);
            v119 = --v125 == 0;
          }
          while (__stlxr(v125, v124));
LABEL_206:
          if (v119)
          {
            v143 = v189;
            if ((_QWORD)v189)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v189 + 16));
              v76 = v143;
              v134 = -235920773;
              goto LABEL_210;
            }
          }
          break;
        case 9:
          v103 = (unint64_t *)v189;
          do
          {
            v104 = __ldaxr(v103);
            v98 = --v104 == 0;
          }
          while (__stlxr(v104, v103));
LABEL_181:
          if (v98)
          {
            v131 = v189;
            if ((_QWORD)v189)
            {
              v132 = *(void **)(v189 + 48);
              if (v132)
              {
                *(_QWORD *)(v189 + 56) = v132;
                operator delete(v132);
              }
              v133 = *(void **)(v131 + 24);
              if (v133)
              {
                *(_QWORD *)(v131 + 32) = v133;
                operator delete(v133);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v131 + 8);
              v76 = v131;
              v134 = 2071181815;
LABEL_210:
              v77 = v134 | 0x1030C4000000000;
LABEL_211:
              MEMORY[0x219A19A08](v76, v77);
            }
          }
          break;
        default:
          goto LABEL_212;
      }
      goto LABEL_212;
    case 7:
      v180 = 0uLL;
      v181[0] = 0;
      goto LABEL_212;
    case 8:
      v78 = *(_QWORD *)(v22 + 56);
      v79 = *(_QWORD *)(v78 + 16);
      *(_QWORD *)__str = *(_QWORD *)(v78 + 8);
      *(_QWORD *)&__str[8] = v79;
      if (v79)
      {
        v80 = (unsigned int *)(v79 + 8);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v82 = *(_OWORD *)(v78 + 24);
      v83 = *(_OWORD *)(v78 + 56);
      v193 = *(_OWORD *)(v78 + 40);
      v194 = v83;
      *(_OWORD *)&__str[16] = v82;
      turi::flexible_type_fail(0);
      v180 = 0uLL;
      v181[0] = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
      goto LABEL_212;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)(v22 + 56) + 8);
      turi::flexible_type_fail(0);
      v180 = 0uLL;
      v181[0] = 0;
      if (*((_QWORD *)&v193 + 1))
      {
        *(_QWORD *)&v194 = *((_QWORD *)&v193 + 1);
        operator delete(*((void **)&v193 + 1));
      }
      if (*(_QWORD *)&__str[16])
      {
        *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
        operator delete(*(void **)&__str[16]);
      }
      v28 = *(std::__shared_weak_count **)&__str[8];
      if (*(_QWORD *)&__str[8])
      {
        v29 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
LABEL_212:
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)&v189);
      v144 = turi::gl_sarray::dtype(a4);
      if (v144 == 3)
      {
        turi::gl_sarray::operator=((uint64_t)&v189, (uint64_t)a4);
        goto LABEL_246;
      }
      if (v144 != 5)
      {
        if (v144 != 9)
        turi::gl_sarray::astype((uint64_t)a4, 3, 1, (uint64_t)__str);
        turi::gl_sarray::operator=((uint64_t)&v189, (uint64_t)__str);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__str);
        goto LABEL_246;
      }
      v145 = (char *)operator new(0x40uLL);
      *((_QWORD *)v145 + 2) = 0;
      *(_QWORD *)v145 = &unk_24D943120;
      *((_QWORD *)v145 + 1) = 0;
      *(_OWORD *)(v145 + 24) = 0u;
      v146 = (uint64_t)(v145 + 24);
      *(_OWORD *)(v145 + 40) = 0u;
      *((_DWORD *)v145 + 14) = 1065353216;
      v187 = v145 + 24;
      v188 = (std::__shared_weak_count *)v145;
      *(_QWORD *)__str = 0;
      v147 = v180;
      if (*((_QWORD *)&v180 + 1) == (_QWORD)v180)
      {
        v185 = (uint64_t)(v145 + 24);
        v186 = (std::__shared_weak_count *)v145;
LABEL_223:
        v149 = (unint64_t *)(v145 + 8);
        do
          v150 = __ldxr(v149);
        while (__stxr(v150 + 1, v149));
        do
          v151 = __ldxr(v149);
        while (__stxr(v151 + 1, v149));
        goto LABEL_226;
      }
      v148 = 0;
      do
      {
        std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,unsigned long &>((uint64_t)v187, (unsigned __int8 *)(v147 + 16 * v148), (char *)(v147 + 16 * v148), __str);
        v148 = *(_QWORD *)__str + 1;
        *(_QWORD *)__str = v148;
        v147 = v180;
      }
      while (v148 < (uint64_t)(*((_QWORD *)&v180 + 1) - v180) >> 4);
      v146 = (uint64_t)v187;
      v145 = (char *)v188;
      v185 = (uint64_t)v187;
      v186 = v188;
      if (v188)
        goto LABEL_223;
LABEL_226:
      *((_QWORD *)&v201 + 1) = &off_24D943170;
      v202 = v146;
      v183 = 0;
      v184 = 0;
      v203 = (std::__shared_weak_count *)v145;
      v204 = (__int128 *)((char *)&v201 + 8);
      turi::gl_sarray::apply((uint64_t)a4, (uint64_t)&v201 + 8, 3, 1, (uint64_t)__str);
      turi::gl_sarray::operator=((uint64_t)&v189, (uint64_t)__str);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__str);
      v152 = v204;
      if (v204 == (__int128 *)((char *)&v201 + 8))
      {
        v153 = 4;
        v152 = (__int128 *)((char *)&v201 + 8);
      }
      else
      {
        if (!v204)
          goto LABEL_231;
        v153 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v152 + 8 * v153))();
LABEL_231:
      v154 = v184;
      if (v184)
      {
        p_shared_owners = (unint64_t *)&v184->__shared_owners_;
        do
          v156 = __ldaxr(p_shared_owners);
        while (__stlxr(v156 - 1, p_shared_owners));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      v157 = v186;
      if (v186)
      {
        v158 = (unint64_t *)&v186->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v160 = v188;
      if (v188)
      {
        v161 = (unint64_t *)&v188->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
LABEL_246:
      turi::gl_sarray::operator=((uint64_t)a4, (uint64_t)&v189);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v189);
      turi::gl_sframe::operator[](a1, a2, (turi::gl_sarray *)&v189);
      std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[6],turi::gl_sarray_reference,0>(__str, "target", (uint64_t)&v189);
      std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray&,0>(&v195, "class_probs", a4);
      turi::gl_sframe::gl_sframe((char *)&v201 + 8, __str, 2);
      for (i = 0; i != -16; i -= 8)
      {
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v196[i + 2]);
        if (SHIBYTE(v196[i + 1]) < 0)
          operator delete((void *)v196[i - 1]);
      }
      *(_QWORD *)&v189 = off_24D91EA30;
      if (v191 < 0)
        operator delete((void *)v190[4]);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v189);
      v179 = v182;
      memset(&v182, 0, sizeof(v182));
      turi::gl_sframe::gl_sframe(v177, (char *)&v201 + 8);
      std::string::basic_string[abi:ne180100]<0>(v175, "target");
      std::string::basic_string[abi:ne180100]<0>(v173, "class_probs");
      v171 = v180;
      v172 = v181[0];
      v181[0] = 0;
      v180 = 0uLL;
      turi::evaluation::compute_classifier_metrics_from_probability_vectors(&v179, (uint64_t)v177, (uint64_t)v175, (uint64_t)v173, &v171, a6);
      *(_QWORD *)__str = &v171;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      if (v174 < 0)
        operator delete(v173[0]);
      if (v176 < 0)
        operator delete(v175[0]);
      v177[0] = off_24D91E9C0;
      v164 = v178;
      if (v178)
      {
        v165 = (unint64_t *)&v178->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      *(_QWORD *)__str = &v179;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      *((_QWORD *)&v201 + 1) = off_24D91E9C0;
      v167 = v203;
      if (v203)
      {
        v168 = (unint64_t *)&v203->__shared_owners_;
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      *(_QWORD *)__str = &v180;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      *(_QWORD *)__str = &v182;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      return;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
}

void sub_21847B7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *__p,int a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char *__pa,uint64_t a50,std::__split_buffer<std::string> *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a58);
  if (SHIBYTE(a51) < 0)
    operator delete(__pa);
  __pa = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void turi::evaluation::compute_object_detection_metrics(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  void **v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const std::string *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void **v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  unint64_t *v62;
  unint64_t v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  __int128 v71;
  __int128 v72;
  unint64_t *v73;
  unint64_t v74;
  BOOL v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  BOOL v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  BOOL v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  BOOL v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  BOOL v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  double v110;
  unint64_t *v111;
  unint64_t v112;
  double v113;
  void *v114;
  void *v115;
  unsigned int v116;
  unint64_t *v117;
  unint64_t v118;
  double v119;
  void *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  double v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  uint64_t i;
  uint64_t j;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  void **v147[2];
  std::__shared_weak_count *v148;
  uint64_t v149;
  void *v150;
  void *v151;
  __int128 v152;
  uint64_t v153;
  uint64_t *v154;
  turi::flexible_type_impl *v155;
  uint64_t *v156;
  void **v157;
  void *__p[2];
  _BYTE v159[32];
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  double v164;
  int v165;
  char v166;
  std::__shared_weak_count *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[60];
  __int16 v172;
  char v173;
  int v174;
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "classes");
  v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a5, (const void **)__p);
  if ((v159[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (a5 + 8 == v11)
    turi::evaluation::compute_object_detection_metrics(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  v142 = a4;
  switch(*(_BYTE *)(v11 + 68))
  {
    case 0:
      v12 = *(void ***)(v11 + 56);
      v166 = 0;
      v165 = 0;
      v164 = *(double *)&v12;
      v155 = 0;
      v156 = 0;
      v154 = 0;
      __p[0] = &v154;
      LOBYTE(__p[1]) = 0;
      v154 = (uint64_t *)operator new(0x10uLL);
      v155 = (turi::flexible_type_impl *)v154;
      v156 = v154 + 2;
      v155 = (turi::flexible_type_impl *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v156, (uint64_t *)&v164, (uint64_t *)&v167, (uint64_t)v154);
      switch(v166)
      {
        case 2:
          v13 = *(unint64_t **)&v164;
          do
          {
            v14 = __ldaxr(v13);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, v13));
          goto LABEL_79;
        case 3:
          v87 = *(unint64_t **)&v164;
          do
          {
            v88 = __ldaxr(v87);
            v89 = --v88 == 0;
          }
          while (__stlxr(v88, v87));
          goto LABEL_152;
        case 4:
          v73 = *(unint64_t **)&v164;
          do
          {
            v74 = __ldaxr(v73);
            v75 = --v74 == 0;
          }
          while (__stlxr(v74, v73));
          goto LABEL_136;
        case 5:
          v92 = *(unint64_t **)&v164;
          do
          {
            v93 = __ldaxr(v92);
            v94 = --v93 == 0;
          }
          while (__stlxr(v93, v92));
          goto LABEL_160;
        case 8:
          v99 = *(unint64_t **)&v164;
          do
          {
            v100 = __ldaxr(v99);
            v101 = --v100 == 0;
          }
          while (__stlxr(v100, v99));
          goto LABEL_167;
        case 9:
          v78 = *(unint64_t **)&v164;
          do
          {
            v79 = __ldaxr(v78);
            v80 = --v79 == 0;
          }
          while (__stlxr(v79, v78));
          goto LABEL_142;
        default:
          goto LABEL_173;
      }
    case 1:
      v56 = *(void ***)(v11 + 56);
      v165 = 0;
      v166 = 1;
      v164 = *(double *)&v56;
      v155 = 0;
      v156 = 0;
      v154 = 0;
      __p[0] = &v154;
      LOBYTE(__p[1]) = 0;
      v154 = (uint64_t *)operator new(0x10uLL);
      v155 = (turi::flexible_type_impl *)v154;
      v156 = v154 + 2;
      v155 = (turi::flexible_type_impl *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v156, (uint64_t *)&v164, (uint64_t *)&v167, (uint64_t)v154);
      switch(v166)
      {
        case 2:
          v57 = *(unint64_t **)&v164;
          do
          {
            v58 = __ldaxr(v57);
            v15 = --v58 == 0;
          }
          while (__stlxr(v58, v57));
          goto LABEL_79;
        case 3:
          v90 = *(unint64_t **)&v164;
          do
          {
            v91 = __ldaxr(v90);
            v89 = --v91 == 0;
          }
          while (__stlxr(v91, v90));
          goto LABEL_152;
        case 4:
          v76 = *(unint64_t **)&v164;
          do
          {
            v77 = __ldaxr(v76);
            v75 = --v77 == 0;
          }
          while (__stlxr(v77, v76));
          goto LABEL_136;
        case 5:
          v95 = *(unint64_t **)&v164;
          do
          {
            v96 = __ldaxr(v95);
            v94 = --v96 == 0;
          }
          while (__stlxr(v96, v95));
          goto LABEL_160;
        case 8:
          v102 = *(unint64_t **)&v164;
          do
          {
            v103 = __ldaxr(v102);
            v101 = --v103 == 0;
          }
          while (__stlxr(v103, v102));
          goto LABEL_167;
        case 9:
          v81 = *(unint64_t **)&v164;
          do
          {
            v82 = __ldaxr(v81);
            v80 = --v82 == 0;
          }
          while (__stlxr(v82, v81));
          goto LABEL_142;
        default:
          goto LABEL_173;
      }
    case 2:
      v20 = (const std::string *)(*(_QWORD *)(v11 + 56) + 8);
      v164 = 0.0;
      v165 = 0;
      v166 = 0;
      turi::flexible_type::operator=<std::string>((uint64_t *)&v164, v20);
      v154 = 0;
      v155 = 0;
      v156 = 0;
      __p[0] = &v154;
      LOBYTE(__p[1]) = 0;
      v154 = (uint64_t *)operator new(0x10uLL);
      v155 = (turi::flexible_type_impl *)v154;
      v156 = v154 + 2;
      v155 = (turi::flexible_type_impl *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v156, (uint64_t *)&v164, (uint64_t *)&v167, (uint64_t)v154);
      switch(v166)
      {
        case 2:
          v21 = *(unint64_t **)&v164;
          do
          {
            v22 = __ldaxr(v21);
            v15 = --v22 == 0;
          }
          while (__stlxr(v22, v21));
          goto LABEL_79;
        case 3:
          v117 = *(unint64_t **)&v164;
          do
          {
            v118 = __ldaxr(v117);
            v89 = --v118 == 0;
          }
          while (__stlxr(v118, v117));
          goto LABEL_152;
        case 4:
          v108 = *(unint64_t **)&v164;
          do
          {
            v109 = __ldaxr(v108);
            v75 = --v109 == 0;
          }
          while (__stlxr(v109, v108));
          goto LABEL_136;
        case 5:
          v121 = *(unint64_t **)&v164;
          do
          {
            v122 = __ldaxr(v121);
            v94 = --v122 == 0;
          }
          while (__stlxr(v122, v121));
          goto LABEL_160;
        case 8:
          v123 = *(unint64_t **)&v164;
          do
          {
            v124 = __ldaxr(v123);
            v101 = --v124 == 0;
          }
          while (__stlxr(v124, v123));
          goto LABEL_167;
        case 9:
          v111 = *(unint64_t **)&v164;
          do
          {
            v112 = __ldaxr(v111);
            v80 = --v112 == 0;
          }
          while (__stlxr(v112, v111));
          goto LABEL_142;
        default:
          goto LABEL_173;
      }
    case 3:
      v23 = *(_QWORD *)(v11 + 56);
      std::vector<turi::flexible_type>::vector(&v154, (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 3);
      v24 = *(_QWORD *)(v23 + 8);
      if (*(_QWORD *)(v23 + 16) != v24)
      {
        v25 = 0;
        do
        {
          v26 = &v154[2 * v25];
          switch(*((_BYTE *)v26 + 12))
          {
            case 2:
              v27 = (unint64_t *)*v26;
              do
              {
                v28 = __ldaxr(v27);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, v27));
              if (!v29)
              {
                v30 = *v26;
                if (!*v26)
                  goto LABEL_67;
                if (*(char *)(v30 + 31) < 0)
                  operator delete(*(void **)(v30 + 8));
                v31 = (_QWORD *)v30;
                v32 = 0x1012C404EF22A49;
                goto LABEL_66;
              }
              break;
            case 3:
              v44 = (unint64_t *)*v26;
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                v47 = *v26;
                if (!*v26)
                  goto LABEL_67;
                v48 = *(void **)(v47 + 8);
                if (v48)
                {
                  *(_QWORD *)(v47 + 16) = v48;
                  operator delete(v48);
                }
                v31 = (_QWORD *)v47;
                v32 = 0x1080C409938AC02;
                goto LABEL_66;
              }
              break;
            case 4:
              v33 = (unint64_t *)*v26;
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                v36 = *v26;
                if (!*v26)
                  goto LABEL_67;
                __p[0] = (void *)(v36 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_59;
              }
              break;
            case 5:
              v49 = (unint64_t *)*v26;
              do
              {
                v50 = __ldaxr(v49);
                v51 = v50 - 1;
              }
              while (__stlxr(v51, v49));
              if (!v51)
              {
                v36 = *v26;
                if (!*v26)
                  goto LABEL_67;
                __p[0] = (void *)(v36 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_59:
                v31 = (_QWORD *)v36;
                v32 = 0x1020C405E66F15BLL;
                goto LABEL_66;
              }
              break;
            case 8:
              v52 = (unint64_t *)*v26;
              do
              {
                v53 = __ldaxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
              {
                v55 = *v26;
                if (!*v26)
                  goto LABEL_67;
                boost::detail::shared_count::~shared_count((unsigned int **)(v55 + 16));
                v31 = (_QWORD *)v55;
                v43 = -235920773;
                goto LABEL_65;
              }
              break;
            case 9:
              v37 = (unint64_t *)*v26;
              do
              {
                v38 = __ldaxr(v37);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v37));
              if (!v39)
              {
                v40 = (_QWORD *)*v26;
                if (*v26)
                {
                  v41 = (void *)v40[6];
                  if (v41)
                  {
                    v40[7] = v41;
                    operator delete(v41);
                  }
                  v42 = (void *)v40[3];
                  if (v42)
                  {
                    v40[4] = v42;
                    operator delete(v42);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v40 + 1));
                  v31 = v40;
                  v43 = 2071181815;
LABEL_65:
                  v32 = v43 | 0x1030C4000000000;
LABEL_66:
                  MEMORY[0x219A19A08](v31, v32);
                }
LABEL_67:
                *v26 = 0;
              }
              break;
            default:
              break;
          }
          *v26 = 0;
          *((_DWORD *)v26 + 2) = 0;
          *((_BYTE *)v26 + 12) = 1;
          *v26 = *(_QWORD *)(v24 + 8 * v25++);
          v24 = *(_QWORD *)(v23 + 8);
        }
        while (v25 < (*(_QWORD *)(v23 + 16) - v24) >> 3);
      }
      break;
    case 4:
      v16 = *(_QWORD *)(v11 + 56);
      v155 = 0;
      v156 = 0;
      v154 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v154, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
      break;
    case 5:
      v59 = *(_QWORD *)(v11 + 56);
      __p[1] = 0;
      *(_QWORD *)v159 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v59 + 8), *(uint64_t **)(v59 + 16), (uint64_t)(*(_QWORD *)(v59 + 16) - *(_QWORD *)(v59 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v164 = COERCE_DOUBLE(__p);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
      break;
    case 6:
      v60 = (double)((uint64_t)(*(_QWORD *)(v11 + 56) << 8) >> 8);
      v61 = (double)*(int *)(v11 + 64) / 1000000.0;
      v165 = 0;
      v166 = 1;
      v164 = v61 + v60;
      v155 = 0;
      v156 = 0;
      v154 = 0;
      __p[0] = &v154;
      LOBYTE(__p[1]) = 0;
      v154 = (uint64_t *)operator new(0x10uLL);
      v155 = (turi::flexible_type_impl *)v154;
      v156 = v154 + 2;
      v155 = (turi::flexible_type_impl *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v156, (uint64_t *)&v164, (uint64_t *)&v167, (uint64_t)v154);
      switch(v166)
      {
        case 2:
          v62 = *(unint64_t **)&v164;
          do
          {
            v63 = __ldaxr(v62);
            v15 = --v63 == 0;
          }
          while (__stlxr(v63, v62));
LABEL_79:
          if (v15)
          {
            v64 = v164;
            if (v164 != 0.0)
            {
              if (*(char *)(*(_QWORD *)&v164 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v164 + 8));
              v65 = v64;
              v66 = 0x1012C404EF22A49;
              goto LABEL_172;
            }
          }
          break;
        case 3:
          v97 = *(unint64_t **)&v164;
          do
          {
            v98 = __ldaxr(v97);
            v89 = --v98 == 0;
          }
          while (__stlxr(v98, v97));
LABEL_152:
          if (v89)
          {
            v119 = v164;
            if (v164 != 0.0)
            {
              v120 = *(void **)(*(_QWORD *)&v164 + 8);
              if (v120)
              {
                *(_QWORD *)(*(_QWORD *)&v164 + 16) = v120;
                operator delete(v120);
              }
              v65 = v119;
              v66 = 0x1080C409938AC02;
              goto LABEL_172;
            }
          }
          break;
        case 4:
          v83 = *(unint64_t **)&v164;
          do
          {
            v84 = __ldaxr(v83);
            v75 = --v84 == 0;
          }
          while (__stlxr(v84, v83));
LABEL_136:
          if (v75)
          {
            v110 = v164;
            if (v164 != 0.0)
            {
              __p[0] = (void *)(*(_QWORD *)&v164 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_164;
            }
          }
          break;
        case 5:
          v104 = *(unint64_t **)&v164;
          do
          {
            v105 = __ldaxr(v104);
            v94 = --v105 == 0;
          }
          while (__stlxr(v105, v104));
LABEL_160:
          if (v94)
          {
            v110 = v164;
            if (v164 != 0.0)
            {
              __p[0] = (void *)(*(_QWORD *)&v164 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_164:
              v65 = v110;
              v66 = 0x1020C405E66F15BLL;
              goto LABEL_172;
            }
          }
          break;
        case 8:
          v106 = *(unint64_t **)&v164;
          do
          {
            v107 = __ldaxr(v106);
            v101 = --v107 == 0;
          }
          while (__stlxr(v107, v106));
LABEL_167:
          if (v101)
          {
            v125 = v164;
            if (v164 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v164 + 16));
              v65 = v125;
              v116 = -235920773;
              goto LABEL_171;
            }
          }
          break;
        case 9:
          v85 = *(unint64_t **)&v164;
          do
          {
            v86 = __ldaxr(v85);
            v80 = --v86 == 0;
          }
          while (__stlxr(v86, v85));
LABEL_142:
          if (v80)
          {
            v113 = v164;
            if (v164 != 0.0)
            {
              v114 = *(void **)(*(_QWORD *)&v164 + 48);
              if (v114)
              {
                *(_QWORD *)(*(_QWORD *)&v164 + 56) = v114;
                operator delete(v114);
              }
              v115 = *(void **)(*(_QWORD *)&v113 + 24);
              if (v115)
              {
                *(_QWORD *)(*(_QWORD *)&v113 + 32) = v115;
                operator delete(v115);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v113 + 8);
              v65 = v113;
              v116 = 2071181815;
LABEL_171:
              v66 = v116 | 0x1030C4000000000;
LABEL_172:
              MEMORY[0x219A19A08](*(_QWORD *)&v65, v66);
            }
          }
          break;
        default:
          goto LABEL_173;
      }
      break;
    case 7:
      v154 = 0;
      v155 = 0;
      v156 = 0;
      break;
    case 8:
      v67 = *(_QWORD *)(v11 + 56);
      v68 = *(unsigned int **)(v67 + 16);
      __p[0] = *(void **)(v67 + 8);
      __p[1] = v68;
      if (v68)
      {
        v69 = v68 + 2;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v71 = *(_OWORD *)(v67 + 24);
      v72 = *(_OWORD *)(v67 + 56);
      *(_OWORD *)&v159[16] = *(_OWORD *)(v67 + 40);
      v160 = v72;
      *(_OWORD *)v159 = v71;
      turi::flexible_type_fail(0);
      v154 = 0;
      v155 = 0;
      v156 = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)(v11 + 56) + 8);
      turi::flexible_type_fail(0);
      v154 = 0;
      v155 = 0;
      v156 = 0;
      if (*(_QWORD *)&v159[24])
      {
        *(_QWORD *)&v160 = *(_QWORD *)&v159[24];
        operator delete(*(void **)&v159[24]);
      }
      if (*(_QWORD *)v159)
      {
        *(_QWORD *)&v159[8] = *(_QWORD *)v159;
        operator delete(*(void **)v159);
      }
      v17 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v18 = (unint64_t *)((char *)__p[1] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
LABEL_173:
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v164);
  memset(v171, 0, sizeof(v171));
  v170 = 0u;
  v169 = 0u;
  v168 = 0u;
  v172 = 257;
  v173 = 0;
  v174 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    *(_QWORD *)v159 = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v159[8], *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v159[8] = *(_OWORD *)a3;
    *(_QWORD *)&v159[24] = *(_QWORD *)(a3 + 16);
  }
  v152 = 0uLL;
  v153 = 0;
  *(_QWORD *)&v143 = &v152;
  BYTE8(v143) = 0;
  *(_QWORD *)&v152 = operator new(0x30uLL);
  *((_QWORD *)&v152 + 1) = v152;
  v153 = v152 + 48;
  *((_QWORD *)&v152 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v153, (__int128 *)__p, &v160, (std::string *)v152);
  turi::gl_sframe::select_columns(a1, (uint64_t)&v152, v147);
  turi::gl_sframe::operator=((uint64_t)&v164, (uint64_t)v147);
  v147[0] = (void **)off_24D91E9C0;
  v126 = v148;
  if (v148)
  {
    p_shared_owners = (unint64_t *)&v148->__shared_owners_;
    do
      v128 = __ldaxr(p_shared_owners);
    while (__stlxr(v128 - 1, p_shared_owners));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  *(_QWORD *)&v143 = &v152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
  for (i = 0; i != -48; i -= 24)
  {
    if ((char)v159[i + 31] < 0)
      operator delete(*(void **)&v159[i + 8]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::gl_sframe::add_column((uint64_t)&v164, v142, (uint64_t)__p);
  if ((v159[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)&v168, (const std::string *)a2);
  turi::gl_sframe::column_names((turi::gl_sframe *)&v164);
  std::string::operator=((std::string *)((char *)&v169 + 8), (const std::string *)__p[1] - 1);
  v147[0] = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v147);
  std::string::operator=((std::string *)v171, (const std::string *)a3);
  __p[1] = 0;
  *(_QWORD *)v159 = 0;
  __p[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>((std::string *)__p, (turi::flexible_type_impl *)v154, v155, (v155 - (turi::flexible_type_impl *)v154) >> 4);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v171[24]);
  *(_OWORD *)&v171[24] = *(_OWORD *)__p;
  *(_QWORD *)&v171[40] = *(_QWORD *)v159;
  __p[1] = 0;
  *(_QWORD *)v159 = 0;
  __p[0] = 0;
  v147[0] = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v147);
  LOBYTE(v172) = 0;
  turi::object_detection::simple_data_iterator::simple_data_iterator((turi::object_detection::simple_data_iterator *)__p, (const turi::object_detection::data_iterator::parameters *)&v164);
  v146 = 0;
  v145 = 0uLL;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v145, v154, (uint64_t *)v155, (v155 - (turi::flexible_type_impl *)v154) >> 4);
  turi::object_detection::average_precision_calculator::average_precision_calculator(v147, &v145);
  *(_QWORD *)&v152 = &v145;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  turi::object_detection::simple_data_iterator::next_batch((turi::object_detection::simple_data_iterator *)__p, 0x20uLL, &v152);
  v131 = *((_QWORD *)&v152 + 1);
  for (j = v152; (_QWORD)v152 != *((_QWORD *)&v152 + 1); j = v152)
  {
    do
    {
      turi::object_detection::average_precision_calculator::add_row((uint64_t)v147, (int **)(j + 40), (int **)(j + 16));
      j += 64;
    }
    while (j != v131);
    turi::object_detection::simple_data_iterator::next_batch((turi::object_detection::simple_data_iterator *)__p, 0x20uLL, &v143);
    std::vector<turi::neural_net::labeled_image>::__vdeallocate(&v152);
    v152 = v143;
    v153 = v144;
    v144 = 0;
    v143 = 0uLL;
    v157 = (void **)&v143;
    std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100](&v157);
    v131 = *((_QWORD *)&v152 + 1);
  }
  turi::object_detection::average_precision_calculator::evaluate((turi::object_detection::average_precision_calculator *)v147, a6);
  *(_QWORD *)&v143 = &v152;
  std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  *(_QWORD *)&v152 = &v149;
  std::vector<turi::object_detection::average_precision_calculator::class_data>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  *(_QWORD *)&v152 = v147;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  __p[0] = off_24D945530;
  v132 = v163;
  if (v163)
  {
    v133 = (unint64_t *)&v163->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v162);
  v147[0] = (void **)&v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v147);
  __p[1] = off_24D91E9C0;
  v135 = *(std::__shared_weak_count **)&v159[8];
  if (*(_QWORD *)&v159[8])
  {
    v136 = (unint64_t *)(*(_QWORD *)&v159[8] + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  __p[0] = &v171[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((v171[23] & 0x80000000) != 0)
    operator delete(*(void **)v171);
  if (SHIBYTE(v170) < 0)
    operator delete(*((void **)&v169 + 1));
  if (SBYTE7(v169) < 0)
    operator delete((void *)v168);
  v164 = COERCE_DOUBLE(off_24D91E9C0);
  v138 = v167;
  if (v167)
  {
    v139 = (unint64_t *)&v167->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  __p[0] = &v154;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_21847CE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;

  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  switch(*(_BYTE *)(v40 - 236))
  {
    case 2:
      v42 = *(unint64_t **)(v40 - 248);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_45;
      v60 = *(_QWORD *)(v40 - 248);
      if (!v60)
        goto LABEL_45;
      if (*(char *)(v60 + 31) < 0)
        operator delete(*(void **)(v60 + 8));
      v61 = (_QWORD *)v60;
      v62 = 0x1012C404EF22A49;
      goto LABEL_44;
    case 3:
      v45 = *(unint64_t **)(v40 - 248);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_45;
      v63 = *(_QWORD **)(v40 - 248);
      if (!v63)
        goto LABEL_45;
      v64 = (void *)v63[1];
      if (v64)
      {
        v63[2] = v64;
        operator delete(v64);
      }
      v61 = v63;
      v62 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      v48 = *(unint64_t **)(v40 - 248);
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (v50)
        goto LABEL_45;
      v68 = *(_QWORD **)(v40 - 248);
      if (!v68)
        goto LABEL_45;
      __p = v68 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_43;
    case 5:
      v54 = *(unint64_t **)(v40 - 248);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (v56)
        goto LABEL_45;
      v68 = *(_QWORD **)(v40 - 248);
      if (!v68)
        goto LABEL_45;
      __p = v68 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_43:
      v61 = v68;
      v62 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      v57 = *(unint64_t **)(v40 - 248);
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (v59)
        goto LABEL_45;
      v67 = *(_QWORD *)(v40 - 248);
      if (!v67)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)(v67 + 16));
      v61 = (_QWORD *)v67;
      v66 = -235920773;
      goto LABEL_36;
    case 9:
      v51 = *(unint64_t **)(v40 - 248);
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (v53)
        goto LABEL_45;
      v65 = *(_QWORD **)(v40 - 248);
      if (!v65)
        goto LABEL_45;
      v61 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v65);
      v66 = 2071181815;
LABEL_36:
      v62 = v66 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v61, v62);
LABEL_45:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_45;
  }
}

void turi::object_detection::average_precision_calculator::~average_precision_calculator(turi::object_detection::average_precision_calculator *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 24);
  std::vector<turi::object_detection::average_precision_calculator::class_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)this;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void turi::object_detection::simple_data_iterator::~simple_data_iterator(turi::object_detection::simple_data_iterator *this)
{
  void **v2;

  *(_QWORD *)this = off_24D945530;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 96);
  v2 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 1) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  void **v2;

  *(_QWORD *)this = off_24D945530;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 96);
  v2 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 1) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  MEMORY[0x219A19A08](this, 0x10A1C40ECC577EFLL);
}

void turi::object_detection::data_iterator::parameters::~parameters(void **this)
{
  void **v2;

  v2 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  *this = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

void turi::evaluation::precision_recall_by_user(const turi::sframe *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  turi::ml_data_internal::column_indexer *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  turi::ml_data_internal::column_indexer *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  turi::thread_pool *v55;
  _QWORD **v56;
  uint64_t v57;
  unint64_t v58;
  turi::thread_pool *instance;
  turi::thread *v60;
  turi::thread_pool *tls_data;
  turi::thread_pool *v62;
  uint64_t v63;
  double v64;
  turi::thread *v65;
  unint64_t v66;
  unint64_t j;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::string *v90;
  std::string *v91;
  _QWORD v92[5];
  std::string v93;
  __int128 v94;
  __int128 v95;
  void *v96[3];
  _QWORD *v97[3];
  __int128 v98;
  __int128 v99;
  void *v100[3];
  _QWORD *v101[3];
  uint64_t v102;
  turi::ml_data_internal::column_indexer *v103;
  std::__shared_weak_count *v104;
  turi::ml_data_internal::column_indexer *v105;
  std::__shared_weak_count *v106;
  _QWORD v107[2];
  std::__shared_weak_count *v108;
  _QWORD v109[2];
  std::__shared_weak_count *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  _QWORD v113[2];
  std::__shared_weak_count *v114;
  _QWORD v115[2];
  std::__shared_weak_count *v116;
  timeval v117;
  void *v118;
  uint64_t **v119;
  unint64_t v120;
  unint64_t v121;
  void **v122[6];
  void *__p;
  char v124;
  _QWORD v125[3];
  _QWORD *v126;
  _QWORD v127[3];
  _QWORD *v128;
  void **v129[6];
  void *v130;
  char v131;
  _QWORD v132[3];
  _QWORD *v133;
  _QWORD v134[3];
  _QWORD *v135;
  _QWORD v136[3];
  _QWORD *v137;
  _QWORD v138[3];
  _QWORD *v139;
  std::string v140;
  uint64_t v141[3];
  void *v142;
  char v143;
  uint64_t v144[3];
  _QWORD v145[3];
  __int128 v146[5];
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  gettimeofday(&v117, 0);
  gettimeofday(&v117, 0);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v115, (const turi::sframe *)a2);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v113, a1);
  turi::gl_sframe::column_names((turi::gl_sframe *)v115);
  turi::gl_sframe::column_names((turi::gl_sframe *)v115);
  v8 = v111;
  v9 = (unsigned __int8 *)v129[0];
  if (v112 - v111 != (char *)v129[1] - (char *)v129[0])
  {
LABEL_161:
    v122[0] = (void **)v129;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v122);
    turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_0::operator()();
  }
  while (v8 != v112)
  {
    if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v122, v8, v9))
      goto LABEL_161;
    v8 += 24;
    v9 += 24;
  }
  v122[0] = (void **)v129;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v122);
  v10 = (uint64_t)v111;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v109);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v107);
  LODWORD(v129[0]) = 1;
  v11 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], (unsigned __int8 **)v10);
  if (v11 == a2[6])
  {
    v122[0] = (void **)v10;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v140.__r_.__value_.__s.__data_[0] = turi::sarray<turi::flexible_type>::get_type(*(_QWORD *)(a2[23]
                                                                                            - 0x5555555555555550
                                                                                            * ((unint64_t)(v11 - a2[5]) >> 3)));
  std::allocate_shared[abi:ne180100]<turi::ml_data_internal::column_indexer,std::allocator<turi::ml_data_internal::column_indexer>,std::string const&,turi::ml_column_mode,turi::flex_type_enum,void>(v10, (unsigned int *)v129, (char *)&v140, &v105);
  LODWORD(v129[0]) = 1;
  v12 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], (unsigned __int8 **)(v10 + 24));
  if (v12 == a2[6])
  {
    v122[0] = (void **)(v10 + 24);
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v140.__r_.__value_.__s.__data_[0] = turi::sarray<turi::flexible_type>::get_type(*(_QWORD *)(a2[23]
                                                                                            - 0x5555555555555550
                                                                                            * ((unint64_t)(v12 - a2[5]) >> 3)));
  std::allocate_shared[abi:ne180100]<turi::ml_data_internal::column_indexer,std::allocator<turi::ml_data_internal::column_indexer>,std::string const&,turi::ml_column_mode,turi::flex_type_enum,void>(v10 + 24, (unsigned int *)v129, (char *)&v140, &v103);
  turi::ml_data_internal::column_indexer::initialize(v105);
  turi::ml_data_internal::column_indexer::initialize(v103);
  v14 = v105;
  v13 = v106;
  if (v106)
  {
    p_shared_owners = (unint64_t *)&v106->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v138[0] = &off_24D943340;
  v138[1] = v14;
  v138[2] = v13;
  v139 = v138;
  v18 = v103;
  v17 = v104;
  if (v104)
  {
    v19 = (unint64_t *)&v104->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v136[0] = &off_24D9433C0;
  v136[1] = v18;
  v136[2] = v17;
  v137 = v136;
  turi::gl_sframe::operator[]((uint64_t)v113, v10, (turi::gl_sarray *)v129);
  v21 = (uint64_t)v139;
  if (!v139)
    goto LABEL_16;
  if (v139 != v138)
  {
    v21 = (*(uint64_t (**)(void))(*v139 + 16))();
LABEL_16:
    v135 = (_QWORD *)v21;
    goto LABEL_18;
  }
  v135 = v134;
  (*(void (**)(uint64_t, _QWORD *))(v138[0] + 24))((uint64_t)v138, v134);
LABEL_18:
  turi::gl_sarray::apply((uint64_t)v129, (uint64_t)v134, 0, 1, (uint64_t)&v140);
  turi::gl_sframe::operator[]((uint64_t)v109, v10, (turi::gl_sarray *)v122);
  turi::gl_sarray_reference::operator=((uint64_t)v122, (uint64_t)&v140);
  v122[0] = (void **)off_24D91EA30;
  if (v124 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v122);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v140);
  v22 = v135;
  if (v135 == v134)
  {
    v23 = 4;
    v22 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_25;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_25:
  v129[0] = (void **)off_24D91EA30;
  if (v131 < 0)
    operator delete(v130);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v129);
  turi::gl_sframe::operator[]((uint64_t)v113, v10 + 24, (turi::gl_sarray *)v129);
  v24 = (uint64_t)v137;
  if (!v137)
    goto LABEL_30;
  if (v137 != v136)
  {
    v24 = (*(uint64_t (**)(void))(*v137 + 16))();
LABEL_30:
    v133 = (_QWORD *)v24;
    goto LABEL_32;
  }
  v133 = v132;
  (*(void (**)(uint64_t, _QWORD *))(v136[0] + 24))((uint64_t)v136, v132);
LABEL_32:
  turi::gl_sarray::apply((uint64_t)v129, (uint64_t)v132, 0, 1, (uint64_t)&v140);
  turi::gl_sframe::operator[]((uint64_t)v109, v10 + 24, (turi::gl_sarray *)v122);
  turi::gl_sarray_reference::operator=((uint64_t)v122, (uint64_t)&v140);
  v122[0] = (void **)off_24D91EA30;
  if (v124 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v122);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v140);
  v25 = v133;
  if (v133 == v132)
  {
    v26 = 4;
    v25 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_39;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_39:
  v129[0] = (void **)off_24D91EA30;
  if (v131 < 0)
    operator delete(v130);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v129);
  turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)v109, (turi::sframe *)v129);
  turi::gl_sframe::operator[]((uint64_t)v115, v10, (turi::gl_sarray *)v122);
  v27 = (uint64_t)v139;
  if (!v139)
    goto LABEL_44;
  if (v139 != v138)
  {
    v27 = (*(uint64_t (**)(void))(*v139 + 16))();
LABEL_44:
    v128 = (_QWORD *)v27;
    goto LABEL_46;
  }
  v128 = v127;
  (*(void (**)(uint64_t, _QWORD *))(v138[0] + 24))((uint64_t)v138, v127);
LABEL_46:
  turi::gl_sarray::apply((uint64_t)v122, (uint64_t)v127, 0, 1, (uint64_t)&v90);
  turi::gl_sframe::operator[]((uint64_t)v107, v10, (turi::gl_sarray *)&v140);
  turi::gl_sarray_reference::operator=((uint64_t)&v140, (uint64_t)&v90);
  v140.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
  if (v143 < 0)
    operator delete(v142);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v140);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v90);
  v28 = v128;
  if (v128 == v127)
  {
    v29 = 4;
    v28 = v127;
  }
  else
  {
    if (!v128)
      goto LABEL_53;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_53:
  v122[0] = (void **)off_24D91EA30;
  if (v124 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v122);
  turi::gl_sframe::operator[]((uint64_t)v115, v10 + 24, (turi::gl_sarray *)v122);
  v30 = (uint64_t)v137;
  if (!v137)
    goto LABEL_58;
  if (v137 != v136)
  {
    v30 = (*(uint64_t (**)(void))(*v137 + 16))();
LABEL_58:
    v126 = (_QWORD *)v30;
    goto LABEL_60;
  }
  v126 = v125;
  (*(void (**)(uint64_t, _QWORD *))(v136[0] + 24))((uint64_t)v136, v125);
LABEL_60:
  turi::gl_sarray::apply((uint64_t)v122, (uint64_t)v125, 0, 1, (uint64_t)&v90);
  turi::gl_sframe::operator[]((uint64_t)v107, v10 + 24, (turi::gl_sarray *)&v140);
  turi::gl_sarray_reference::operator=((uint64_t)&v140, (uint64_t)&v90);
  v140.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
  if (v143 < 0)
    operator delete(v142);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v140);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v90);
  v31 = v126;
  if (v126 == v125)
  {
    v32 = 4;
    v31 = v125;
  }
  else
  {
    if (!v126)
      goto LABEL_67;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_67:
  v122[0] = (void **)off_24D91EA30;
  if (v124 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v122);
  turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)v107, (turi::sframe *)v122);
  turi::ml_data_internal::column_indexer::finalize(v105);
  turi::ml_data_internal::column_indexer::finalize(v103);
  v102 = *((_QWORD *)v105 + 13);
  turi::sframe::select_column((uint64_t)v122, 0, &v99);
  turi::sframe::select_column((uint64_t)v122, 1uLL, &v98);
  turi::indexed_column_groupby::indexed_column_groupby(v100, &v99, &v98, 0, 0);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
  if (*((_QWORD *)&v98 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  turi::sframe::select_column((uint64_t)v129, 0, &v95);
  turi::sframe::select_column((uint64_t)v129, 1uLL, &v94);
  turi::indexed_column_groupby::indexed_column_groupby(v96, &v95, &v94, 0, 0);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  turi::sframe::sframe((turi::sframe *)a4);
  if (*(char *)(v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
  }
  else
  {
    v45 = *(_OWORD *)v10;
    v140.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v45;
  }
  std::string::basic_string[abi:ne180100]<0>(v141, "cutoff");
  std::string::basic_string[abi:ne180100]<0>(&v142, "precision");
  std::string::basic_string[abi:ne180100]<0>(v144, "recall");
  std::string::basic_string[abi:ne180100]<0>(v145, "count");
  v90 = 0;
  v91 = 0;
  v92[0] = 0;
  v118 = &v90;
  LOBYTE(v119) = 0;
  v90 = (std::string *)operator new(0x78uLL);
  v91 = v90;
  v92[0] = v90 + 5;
  v91 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v92, (__int128 *)&v140, v146, v90);
  v46 = *((_BYTE *)v105 + 28);
  v47 = (char *)operator new(5uLL);
  v119 = (uint64_t **)(v47 + 5);
  v120 = (unint64_t)(v47 + 5);
  *v47 = v46;
  *(_DWORD *)(v47 + 1) = 65792;
  v118 = v47;
  std::string::basic_string[abi:ne180100]<0>(&v93, "");
  turi::sframe::open_for_write(a4, &v90, &v118, &v93, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (v118)
  {
    v119 = (uint64_t **)v118;
    operator delete(v118);
  }
  v118 = &v90;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v145[i + 2]) < 0)
      operator delete((void *)v145[i]);
  }
  v93.__r_.__value_.__r.__words[0] = 0;
  v55 = (turi::thread_pool *)assert_msg(*(unsigned __int8 *)(a4 + 288), (uint64_t)"Invalid SFrame", v48, v49, v50, v51, v52, v53, (uint64_t)v90);
  if (*(_BYTE *)(a4 + 289))
  {
    v56 = (_QWORD **)(a4 + 208);
    v57 = 15;
  }
  else
  {
    if (!*(_QWORD *)(a4 + 24))
    {
      v58 = 0;
      goto LABEL_105;
    }
    v56 = *(_QWORD ***)(a4 + 184);
    v57 = 3;
  }
  v55 = (turi::thread_pool *)(*(uint64_t (**)(void))(**v56 + 8 * v57))();
  v58 = (unint64_t)v55;
LABEL_105:
  v90 = (std::string *)&v102;
  v91 = &v93;
  v92[0] = a4;
  v92[1] = v96;
  v92[2] = v100;
  v92[3] = a3;
  v92[4] = &v105;
  v93.__r_.__value_.__r.__words[0] = v58;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v55);
  v60 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v60);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v60 <= 1)
  {
    if (v58)
    {
      for (j = 0; j != v58; ++j)
        turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3::operator()((uint64_t **)&v90, j);
    }
  }
  else
  {
    v62 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v140, v62);
    v63 = 0;
    v64 = (double)v58 / (double)(unint64_t)v60;
    do
    {
      v65 = (turi::thread *)(v63 + 1);
      v66 = (unint64_t)(v64 * (double)(unint64_t)(v63 + 1) + 0.0);
      if ((turi::thread *)v63 == (turi::thread *)((char *)v60 - 1))
        v66 = v58;
      v120 = (unint64_t)(v64 * (double)(unint64_t)v63 + 0.0);
      v121 = v66;
      v118 = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3>(unsigned long,unsigned long,turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3 const&)::{lambda(void)#1}>(turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3)::stored_vtable
           + 1;
      v119 = (uint64_t **)&v90;
      turi::parallel_task_queue::launch((uint64_t)&v140, (uint64_t)&v118, v63);
      boost::function0<void>::~function0((uint64_t *)&v118);
      v63 = (uint64_t)v65;
    }
    while (v65 != v60);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&v140);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v140);
  }
  turi::sframe::close((turi::sframe *)a4);
  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy((uint64_t)v97, v97[1]);
  if (v96[0])
  {
    v96[1] = v96[0];
    operator delete(v96[0]);
  }
  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy((uint64_t)v101, v101[1]);
  if (v100[0])
  {
    v100[1] = v100[0];
    operator delete(v100[0]);
  }
  turi::sframe::~sframe((turi::sframe *)v122);
  turi::sframe::~sframe((turi::sframe *)v129);
  v68 = v137;
  if (v137 == v136)
  {
    v69 = 4;
    v68 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_124;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_124:
  v70 = v139;
  if (v139 == v138)
  {
    v71 = 4;
    v70 = v138;
    goto LABEL_128;
  }
  if (v139)
  {
    v71 = 5;
LABEL_128:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  v72 = v104;
  if (v104)
  {
    v73 = (unint64_t *)&v104->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v106;
  if (v106)
  {
    v76 = (unint64_t *)&v106->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v107[0] = off_24D91E9C0;
  v78 = v108;
  if (v108)
  {
    v79 = (unint64_t *)&v108->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v109[0] = off_24D91E9C0;
  v81 = v110;
  if (v110)
  {
    v82 = (unint64_t *)&v110->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v129[0] = (void **)&v111;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v129);
  v113[0] = off_24D91E9C0;
  v84 = v114;
  if (v114)
  {
    v85 = (unint64_t *)&v114->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v115[0] = off_24D91E9C0;
  v87 = v116;
  if (v116)
  {
    v88 = (unint64_t *)&v116->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void sub_21847E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a65;
  turi::sframe *v65;
  unint64_t *v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;

  turi::sframe::~sframe(v65);
  turi::indexed_column_groupby::~indexed_column_groupby((turi::indexed_column_groupby *)&a23);
  turi::indexed_column_groupby::~indexed_column_groupby((turi::indexed_column_groupby *)&a33);
  turi::sframe::~sframe((turi::sframe *)&a65);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x328]);
  v67 = (unint64_t *)STACK[0x4A8];
  if ((unint64_t *)STACK[0x4A8] == &STACK[0x490])
  {
    v68 = 4;
    v67 = &STACK[0x490];
  }
  else
  {
    if (!v67)
      goto LABEL_6;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_6:
  v69 = (unint64_t *)STACK[0x4C8];
  if ((unint64_t *)STACK[0x4C8] == &STACK[0x4B0])
  {
    v70 = 4;
    v69 = &STACK[0x4B0];
  }
  else
  {
    if (!v69)
      goto LABEL_11;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_11:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  a44 = (uint64_t)off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  a47 = (uint64_t)off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  STACK[0x328] = (unint64_t)&a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x328]);
  a53 = (uint64_t)off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  a56 = (uint64_t)off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void turi::indexed_column_groupby::~indexed_column_groupby(turi::indexed_column_groupby *this)
{
  _QWORD *v2;

  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void turi::evaluation::rmse::~rmse(turi::evaluation::rmse *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D9427F0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D9427F0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x219A19A08);
}

void turi::evaluation::max_error::~max_error(turi::evaluation::max_error *this)
{
  void *v2;

  *(_QWORD *)this = &unk_24D9428C0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_24D9428C0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x219A19A08);
}

void turi::evaluation::confusion_matrix::~confusion_matrix(turi::evaluation::confusion_matrix *this)
{
  void **v2;

  *(_QWORD *)this = &unk_24D942980;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 104);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 40);
  v2 = (void **)((char *)this + 8);
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *(_QWORD *)this = &unk_24D942980;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 104);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 40);
  v2 = (void **)((char *)this + 8);
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C40E904833FLL);
}

void turi::evaluation::classifier_accuracy::~classifier_accuracy(turi::evaluation::classifier_accuracy *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D942A40;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D942A40;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x219A19A08);
}

uint64_t std::make_shared[abi:ne180100]<turi::evaluation::binary_logloss,turi::evaluation::binary_logloss,void>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  char v6;

  v4 = operator new(0x80uLL);
  v4[2] = 0;
  *v4 = &unk_24D942AB0;
  v4[1] = 0;
  result = std::allocator<turi::evaluation::binary_logloss>::construct[abi:ne180100]<turi::evaluation::binary_logloss,turi::evaluation::binary_logloss>((uint64_t)&v6, v4 + 3, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void turi::evaluation::binary_logloss::~binary_logloss(turi::evaluation::binary_logloss *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D942B00;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 64);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D942B00;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 64);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x219A19A08);
}

uint64_t std::make_shared[abi:ne180100]<turi::evaluation::multiclass_logloss,turi::evaluation::multiclass_logloss,void>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  char v6;

  v4 = operator new(0x88uLL);
  v4[2] = 0;
  *v4 = &unk_24D942B70;
  v4[1] = 0;
  result = std::allocator<turi::evaluation::multiclass_logloss>::construct[abi:ne180100]<turi::evaluation::multiclass_logloss,turi::evaluation::multiclass_logloss>((uint64_t)&v6, v4 + 3, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void turi::evaluation::multiclass_logloss::~multiclass_logloss(turi::evaluation::multiclass_logloss *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D942BC0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 64);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D942BC0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 64);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x219A19A08);
}

void std::make_shared[abi:ne180100]<turi::evaluation::roc_curve,turi::evaluation::roc_curve,void>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char v5;

  v4 = operator new(0x148uLL);
  v4[2] = 0;
  *v4 = &unk_24D942C30;
  v4[1] = 0;
  std::allocator<turi::evaluation::roc_curve>::construct[abi:ne180100]<turi::evaluation::roc_curve,turi::evaluation::roc_curve>((uint64_t)&v5, (uint64_t)(v4 + 3), a1);
  *a2 = v4 + 3;
  a2[1] = v4;
}

void std::make_shared[abi:ne180100]<turi::evaluation::auc,turi::evaluation::auc,void>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char v5;

  v4 = operator new(0x148uLL);
  v4[2] = 0;
  *v4 = &unk_24D942CF0;
  v4[1] = 0;
  std::allocator<turi::evaluation::auc>::construct[abi:ne180100]<turi::evaluation::auc,turi::evaluation::auc>((uint64_t)&v5, (uint64_t)(v4 + 3), a1);
  *a2 = v4 + 3;
  a2[1] = v4;
}

uint64_t std::make_shared[abi:ne180100]<turi::evaluation::flexible_accuracy,turi::evaluation::flexible_accuracy,void>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x178uLL);
  v4[2] = 0;
  *v4 = &unk_24D942DB0;
  v4[1] = 0;
  result = turi::evaluation::precision_recall_base::precision_recall_base((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_24D942E00;
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

void turi::evaluation::flexible_accuracy::~flexible_accuracy(turi::evaluation::flexible_accuracy *this)
{
  void **v2;

  *(_QWORD *)this = &unk_24D942E88;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 312);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 272);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 192);
  *(_QWORD *)this = &unk_24D942980;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 104);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 40);
  v2 = (void **)((char *)this + 8);
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *(_QWORD *)this = &unk_24D942E88;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 312);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 272);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 192);
  *(_QWORD *)this = &unk_24D942980;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 104);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 40);
  v2 = (void **)((char *)this + 8);
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C406EE6F45FLL);
}

uint64_t std::make_shared[abi:ne180100]<turi::evaluation::precision,turi::evaluation::precision,void>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x178uLL);
  v4[2] = 0;
  *v4 = &unk_24D942EE0;
  v4[1] = 0;
  result = turi::evaluation::precision_recall_base::precision_recall_base((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_24D942F30;
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

uint64_t std::make_shared[abi:ne180100]<turi::evaluation::recall,turi::evaluation::recall,void>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x178uLL);
  v4[2] = 0;
  *v4 = &unk_24D942FA0;
  v4[1] = 0;
  result = turi::evaluation::precision_recall_base::precision_recall_base((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_24D942FF0;
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

double std::make_shared[abi:ne180100]<turi::evaluation::fbeta_score,turi::evaluation::fbeta_score,void>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double *v4;
  uint64_t v5;
  double result;

  v4 = (double *)operator new(0x180uLL);
  v4[2] = 0.0;
  *(_QWORD *)v4 = &unk_24D943060;
  v4[1] = 0.0;
  v5 = turi::evaluation::precision_recall_base::precision_recall_base((uint64_t)(v4 + 3), a1);
  *((_QWORD *)v4 + 3) = &unk_24D9430B0;
  result = *(double *)(a1 + 352);
  v4[47] = result;
  *a2 = v5;
  a2[1] = (uint64_t)v4;
  return result;
}

void std::__shared_ptr_emplace<turi::evaluation::rmse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9427A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::rmse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9427A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::rmse>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::evaluation::rmse::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "rmse");
}

void turi::evaluation::rmse::init(turi::evaluation::rmse *this, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 1) = a2;
  v3 = (uint64_t *)((char *)this + 16);
  std::vector<double>::resize((uint64_t)this + 16, a2);
  std::vector<unsigned long>::resize((uint64_t)this + 40, *((_QWORD *)this + 1));
  if (*((_QWORD *)this + 1))
  {
    v4 = 0;
    v5 = *v3;
    v6 = *((_QWORD *)this + 5);
    do
    {
      *(_QWORD *)(v5 + 8 * v4) = 0;
      *(_QWORD *)(v6 + 8 * v4++) = 0;
    }
    while (v4 < *((_QWORD *)this + 1));
  }
}

double turi::evaluation::rmse::register_example(turi::evaluation::rmse *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  double v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  float v25;
  double v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  char *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double result;
  std::runtime_error *exception;
  std::string *v50;
  __int128 v51;
  std::runtime_error *v52;
  std::string *v53;
  __int128 v54;
  void *__p[2];
  void *v56[2];
  __int128 v57;
  __int128 v58;
  std::string v59;
  size_t __idx;

  v7 = 0.0;
  switch(*((_BYTE *)a3 + 12))
  {
    case 0:
      v7 = (double)*(uint64_t *)a3;
      break;
    case 1:
      v7 = *(double *)a3;
      break;
    case 2:
      v12 = *(_QWORD *)a3;
      v13 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v14 = (char *)v13;
      if (*(char *)(v12 + 31) < 0)
        v14 = *v13;
      std::string::basic_string[abi:ne180100]<0>(__p, v14);
      v15 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v56[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v12 + 31) < 0)
        v16 = *(_QWORD *)(v12 + 16);
      else
        v16 = *(unsigned __int8 *)(v12 + 31);
      if (__idx != v16)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v50 = std::string::append(&v59, " cannot be interpreted as a float");
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v56[0] = (void *)v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v25 = v15;
      v7 = v25;
      break;
    case 3:
      v8 = *(_QWORD *)a3;
      __p[1] = 0;
      v56[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v8 + 8), *(_QWORD *)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v17 = *(_QWORD *)a3;
      __p[1] = 0;
      v56[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      break;
    case 5:
      v18 = *(_QWORD *)a3;
      __p[1] = 0;
      v56[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      break;
    case 6:
      v7 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v19 = *(double *)a3;
      v20 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v20;
      if (v20)
      {
        v21 = v20 + 2;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(_OWORD *)(*(_QWORD *)&v19 + 24);
      v24 = *(_OWORD *)(*(_QWORD *)&v19 + 56);
      v57 = *(_OWORD *)(*(_QWORD *)&v19 + 40);
      v58 = v24;
      *(_OWORD *)v56 = v23;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v57 + 1))
      {
        *(_QWORD *)&v58 = *((_QWORD *)&v57 + 1);
        operator delete(*((void **)&v57 + 1));
      }
      if (v56[0])
      {
        v56[1] = v56[0];
        operator delete(v56[0]);
      }
      v9 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v10 = (unint64_t *)((char *)__p[1] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v26 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v26 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v26 = *(double *)a2;
      break;
    case 2:
      v31 = *(_QWORD *)a2;
      v32 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v33 = (char *)v32;
      if (*(char *)(v31 + 31) < 0)
        v33 = *v32;
      std::string::basic_string[abi:ne180100]<0>(__p, v33);
      v34 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v56[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v31 + 31) < 0)
        v35 = *(_QWORD *)(v31 + 16);
      else
        v35 = *(unsigned __int8 *)(v31 + 31);
      if (__idx != v35)
      {
        v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v53 = std::string::append(&v59, " cannot be interpreted as a float");
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v56[0] = (void *)v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v52, (const std::string *)__p);
        __cxa_throw(v52, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v44 = v34;
      v26 = v44;
      break;
    case 3:
      v27 = *(_QWORD *)a2;
      __p[1] = 0;
      v56[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v27 + 8), *(_QWORD *)(v27 + 16), (uint64_t)(*(_QWORD *)(v27 + 16) - *(_QWORD *)(v27 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v36 = *(_QWORD *)a2;
      __p[1] = 0;
      v56[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      break;
    case 5:
      v37 = *(_QWORD *)a2;
      __p[1] = 0;
      v56[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v37 + 8), *(uint64_t **)(v37 + 16), (uint64_t)(*(_QWORD *)(v37 + 16) - *(_QWORD *)(v37 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      break;
    case 6:
      v26 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v38 = *(double *)a2;
      v39 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v39;
      if (v39)
      {
        v40 = v39 + 2;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = *(_OWORD *)(*(_QWORD *)&v38 + 24);
      v43 = *(_OWORD *)(*(_QWORD *)&v38 + 56);
      v57 = *(_OWORD *)(*(_QWORD *)&v38 + 40);
      v58 = v43;
      *(_OWORD *)v56 = v42;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v57 + 1))
      {
        *(_QWORD *)&v58 = *((_QWORD *)&v57 + 1);
        operator delete(*((void **)&v57 + 1));
      }
      if (v56[0])
      {
        v56[1] = v56[0];
        operator delete(v56[0]);
      }
      v28 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v29 = (unint64_t *)((char *)__p[1] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v45 = *((_QWORD *)this + 5);
  v46 = *(_QWORD *)(v45 + 8 * a4) + 1;
  *(_QWORD *)(v45 + 8 * a4) = v46;
  v47 = *((_QWORD *)this + 2);
  result = *(double *)(v47 + 8 * a4)
         + -(*(double *)(v47 + 8 * a4) - (v7 - v26) * (v7 - v26)) / (double)(unint64_t)v46;
  *(double *)(v47 + 8 * a4) = result;
  return result;
}

void sub_21847F454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t turi::evaluation::supervised_evaluation_interface::register_unmapped_example(turi::evaluation::supervised_evaluation_interface *this, const unint64_t *a2, void ***a3)
{
  uint64_t result;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void **v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  unsigned int v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void **v62;
  void **v63;
  int v64;
  char v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v68 = 0;
  v67 = 0;
  v66 = *a2;
  v65 = 0;
  v64 = 0;
  v63 = *a3;
  result = (*(uint64_t (**)(turi::evaluation::supervised_evaluation_interface *, uint64_t *, void ***))(*(_QWORD *)this + 48))(this, &v66, &v63);
  switch(v65)
  {
    case 2:
      v4 = (unint64_t *)v63;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = v63;
        if (v63)
        {
          if (*((char *)v63 + 31) < 0)
            operator delete(v63[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v10 = (unint64_t *)v63;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = v63;
        if (v63)
        {
          v14 = v63[1];
          if (v14)
          {
            v63[2] = v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v63;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v63;
        if (v63)
        {
          v62 = v63 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v62);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v19 = (unint64_t *)v63;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = v63;
        if (v63)
        {
          v62 = v63 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v62);
LABEL_26:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v29 = (unint64_t *)v63;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = v63;
        if (v63)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v63 + 2);
          v8 = v32;
          v28 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v22 = (unint64_t *)v63;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = v63;
        if (v63)
        {
          v26 = v63[6];
          if (v26)
          {
            v63[7] = v26;
            operator delete(v26);
          }
          v27 = v25[3];
          if (v27)
          {
            v25[4] = v27;
            operator delete(v27);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v25 + 1));
          v8 = v25;
          v28 = 2071181815;
LABEL_41:
          v9 = v28 | 0x1030C4000000000;
LABEL_42:
          result = MEMORY[0x219A19A08](v8, v9);
        }
      }
      break;
    default:
      break;
  }
  switch(v68)
  {
    case 2:
      v33 = (unint64_t *)v66;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = v66;
        if (v66)
        {
          if (*(char *)(v66 + 31) < 0)
            operator delete(*(void **)(v66 + 8));
          v37 = v36;
          v38 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v39 = (unint64_t *)v66;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        v42 = v66;
        if (v66)
        {
          v43 = *(void **)(v66 + 8);
          if (v43)
          {
            *(_QWORD *)(v66 + 16) = v43;
            operator delete(v43);
          }
          v37 = v42;
          v38 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v44 = (unint64_t *)v66;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        v47 = v66;
        if (v66)
        {
          v63 = (void **)(v66 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v63);
          goto LABEL_68;
        }
      }
      break;
    case 5:
      v48 = (unint64_t *)v66;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        v47 = v66;
        if (v66)
        {
          v63 = (void **)(v66 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v63);
LABEL_68:
          v37 = v47;
          v38 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v58 = (unint64_t *)v66;
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v61 = v66;
        if (v66)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v66 + 16));
          v37 = v61;
          v57 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v51 = (unint64_t *)v66;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        v54 = v66;
        if (v66)
        {
          v55 = *(void **)(v66 + 48);
          if (v55)
          {
            *(_QWORD *)(v66 + 56) = v55;
            operator delete(v55);
          }
          v56 = *(void **)(v54 + 24);
          if (v56)
          {
            *(_QWORD *)(v54 + 32) = v56;
            operator delete(v56);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v54 + 8);
          v37 = v54;
          v57 = 2071181815;
LABEL_83:
          v38 = v57 | 0x1030C4000000000;
LABEL_84:
          result = MEMORY[0x219A19A08](v37, v38);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_21847F97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, unint64_t *);
  v5 = va_arg(va1, _QWORD);
  switch(BYTE4(v5))
  {
    case 2:
      turi::full_type_name<turi::flexible_type>((unint64_t **)va);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>((unint64_t **)va);
      break;
    case 4:
      turi::evaluation::compute_classifier_metrics((unint64_t **)va);
      break;
    case 5:
      turi::evaluation::compute_classifier_metrics((unint64_t **)va);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>((unint64_t **)va);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((unint64_t **)va);
      break;
    default:
      break;
  }
  turi::evaluation::supervised_evaluation_interface::register_unmapped_example((uint64_t)va, (uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::rmse::get_metric@<X0>(turi::evaluation::rmse *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  double *v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t result;
  double v14;
  _BYTE v15[13];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = 0;
    v5 = (unint64_t *)*((_QWORD *)this + 5);
    v6 = (double *)*((_QWORD *)this + 2);
    v7 = 0.0;
    do
    {
      v9 = *v5++;
      v8 = v9;
      v10 = (double)v9;
      v11 = *v6++;
      v7 = v7 + v10 * v11;
      v4 += v8;
      --v3;
    }
    while (v3);
    v12 = v7 / (double)v4;
  }
  else
  {
    v12 = NAN;
  }
  v14 = sqrt(v12);
  result = turi::flexible_type_converter<double>::set(&v14, (uint64_t)v15);
  *(_QWORD *)(a2 + 13) = *(_QWORD *)&v15[5];
  *(_QWORD *)(a2 + 8) = *(_QWORD *)v15;
  *(_BYTE *)(a2 + 20) = v15[12];
  *(_DWORD *)a2 = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::evaluation::max_error>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::max_error>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::max_error>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::evaluation::max_error::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "max_error");
}

void turi::evaluation::max_error::init(turi::evaluation::max_error *this, unint64_t a2)
{
  void **v3;
  uint64_t v4;

  *((_QWORD *)this + 1) = a2;
  v3 = (void **)((char *)this + 16);
  std::vector<double>::resize((uint64_t)this + 16, a2);
  v4 = *((_QWORD *)this + 1);
  if (v4)
    bzero(*v3, 8 * v4);
}

void turi::evaluation::max_error::register_example(turi::evaluation::max_error *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  double v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  float v25;
  double v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  char *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  float v44;
  double v45;
  uint64_t v46;
  std::runtime_error *exception;
  std::string *v48;
  __int128 v49;
  std::runtime_error *v50;
  std::string *v51;
  __int128 v52;
  void *__p[2];
  void *v54[2];
  __int128 v55;
  __int128 v56;
  std::string v57;
  size_t __idx;

  v7 = 0.0;
  switch(*((_BYTE *)a3 + 12))
  {
    case 0:
      v7 = (double)*(uint64_t *)a3;
      break;
    case 1:
      v7 = *(double *)a3;
      break;
    case 2:
      v12 = *(_QWORD *)a3;
      v13 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v14 = (char *)v13;
      if (*(char *)(v12 + 31) < 0)
        v14 = *v13;
      std::string::basic_string[abi:ne180100]<0>(__p, v14);
      v15 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v54[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v12 + 31) < 0)
        v16 = *(_QWORD *)(v12 + 16);
      else
        v16 = *(unsigned __int8 *)(v12 + 31);
      if (__idx != v16)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v48 = std::string::append(&v57, " cannot be interpreted as a float");
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v54[0] = (void *)v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v25 = v15;
      v7 = v25;
      break;
    case 3:
      v8 = *(_QWORD *)a3;
      __p[1] = 0;
      v54[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v8 + 8), *(_QWORD *)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v17 = *(_QWORD *)a3;
      __p[1] = 0;
      v54[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      break;
    case 5:
      v18 = *(_QWORD *)a3;
      __p[1] = 0;
      v54[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      break;
    case 6:
      v7 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v19 = *(double *)a3;
      v20 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v20;
      if (v20)
      {
        v21 = v20 + 2;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(_OWORD *)(*(_QWORD *)&v19 + 24);
      v24 = *(_OWORD *)(*(_QWORD *)&v19 + 56);
      v55 = *(_OWORD *)(*(_QWORD *)&v19 + 40);
      v56 = v24;
      *(_OWORD *)v54 = v23;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v55 + 1))
      {
        *(_QWORD *)&v56 = *((_QWORD *)&v55 + 1);
        operator delete(*((void **)&v55 + 1));
      }
      if (v54[0])
      {
        v54[1] = v54[0];
        operator delete(v54[0]);
      }
      v9 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v10 = (unint64_t *)((char *)__p[1] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v26 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v26 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v26 = *(double *)a2;
      break;
    case 2:
      v31 = *(_QWORD *)a2;
      v32 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v33 = (char *)v32;
      if (*(char *)(v31 + 31) < 0)
        v33 = *v32;
      std::string::basic_string[abi:ne180100]<0>(__p, v33);
      v34 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v54[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v31 + 31) < 0)
        v35 = *(_QWORD *)(v31 + 16);
      else
        v35 = *(unsigned __int8 *)(v31 + 31);
      if (__idx != v35)
      {
        v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v51 = std::string::append(&v57, " cannot be interpreted as a float");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v54[0] = (void *)v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v50, (const std::string *)__p);
        __cxa_throw(v50, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v44 = v34;
      v26 = v44;
      break;
    case 3:
      v27 = *(_QWORD *)a2;
      __p[1] = 0;
      v54[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v27 + 8), *(_QWORD *)(v27 + 16), (uint64_t)(*(_QWORD *)(v27 + 16) - *(_QWORD *)(v27 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v36 = *(_QWORD *)a2;
      __p[1] = 0;
      v54[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      break;
    case 5:
      v37 = *(_QWORD *)a2;
      __p[1] = 0;
      v54[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v37 + 8), *(uint64_t **)(v37 + 16), (uint64_t)(*(_QWORD *)(v37 + 16) - *(_QWORD *)(v37 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      break;
    case 6:
      v26 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v38 = *(double *)a2;
      v39 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v39;
      if (v39)
      {
        v40 = v39 + 2;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = *(_OWORD *)(*(_QWORD *)&v38 + 24);
      v43 = *(_OWORD *)(*(_QWORD *)&v38 + 56);
      v55 = *(_OWORD *)(*(_QWORD *)&v38 + 40);
      v56 = v43;
      *(_OWORD *)v54 = v42;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v55 + 1))
      {
        *(_QWORD *)&v56 = *((_QWORD *)&v55 + 1);
        operator delete(*((void **)&v55 + 1));
      }
      if (v54[0])
      {
        v54[1] = v54[0];
        operator delete(v54[0]);
      }
      v28 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v29 = (unint64_t *)((char *)__p[1] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v45 = vabdd_f64(v7, v26);
  v46 = *((_QWORD *)this + 2);
  if (v45 < *(double *)(v46 + 8 * a4))
    v45 = *(double *)(v46 + 8 * a4);
  *(double *)(v46 + 8 * a4) = v45;
}

void sub_2184801C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t turi::evaluation::max_error::get_metric@<X0>(turi::evaluation::max_error *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  uint64_t result;
  double v9;
  _BYTE v10[13];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v9 = 0.0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = (double *)*((_QWORD *)this + 2);
    v5 = 0.0;
    do
    {
      v6 = *v4++;
      v7 = v6;
      if (v5 < v6)
        v5 = v7;
      v9 = v5;
      --v3;
    }
    while (v3);
  }
  result = turi::flexible_type_converter<double>::set(&v9, (uint64_t)v10);
  *(_QWORD *)(a2 + 13) = *(_QWORD *)&v10[5];
  *(_QWORD *)(a2 + 8) = *(_QWORD *)v10;
  *(_BYTE *)(a2 + 20) = v10[12];
  *(_DWORD *)a2 = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::evaluation::confusion_matrix>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::confusion_matrix>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::confusion_matrix>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<turi::evaluation::confusion_matrix>::construct[abi:ne180100]<turi::evaluation::confusion_matrix,turi::evaluation::confusion_matrix>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a2 = &unk_24D942980;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 8);
  v5 = *(_QWORD *)(a3 + 32);
  a2[3] = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  a2[4] = v5;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 5), (uint64_t *)(a3 + 40));
  a2[10] = *(_QWORD *)(a3 + 80);
  v6 = (_QWORD *)(a3 + 88);
  v7 = *(_QWORD *)(a3 + 88);
  a2[11] = v7;
  v8 = a2 + 11;
  v9 = *(_QWORD *)(a3 + 96);
  a2[12] = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a3 + 80) = v6;
    *v6 = 0;
    *(_QWORD *)(a3 + 96) = 0;
  }
  else
  {
    a2[10] = v8;
  }
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 13), (uint64_t *)(a3 + 104));
  return std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 18), (uint64_t *)(a3 + 144));
}

_QWORD *turi::evaluation::confusion_matrix::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "confusion_matrix");
}

uint64_t turi::evaluation::confusion_matrix::init(turi::evaluation::confusion_matrix *this, unint64_t a2)
{
  *((_QWORD *)this + 4) = a2;
  return std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::resize((uint64_t *)this + 1, a2);
}

uint64_t turi::evaluation::confusion_matrix::register_example(turi::evaluation::confusion_matrix *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned __int8 v12[32];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)v12, (uint64_t *)a2, (uint64_t)a3);
  v6 = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::find<std::pair<turi::flexible_type,turi::flexible_type>>((_QWORD *)(*((_QWORD *)this + 1) + 40 * a4), v12);
  v7 = *((_QWORD *)this + 1) + 40 * a4;
  v11 = v12;
  if (v6)
  {
    v8 = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>(v7, v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
    v9 = *((_QWORD *)v8 + 6) + 1;
  }
  else
  {
    v8 = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>(v7, v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
    v9 = 1;
  }
  *((_QWORD *)v8 + 6) = v9;
  return std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v12);
}

void sub_2184805F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::evaluation::confusion_matrix::get_metric(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t **i;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  std::vector<std::string>::pointer end;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::vector<std::string>::pointer v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::vector<std::string>::pointer v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  uint64_t *v35;
  char *v36;
  uint64_t *v37;
  unsigned __int8 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  _BYTE *v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  size_t v52;
  _BYTE *v53;
  char *v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  void *v73;
  void *v74;
  unsigned int v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  void *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  BOOL v89;
  int v90;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t **v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  void *v110;
  void *v111;
  unsigned int v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  void *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t *v125;
  unsigned int v126;
  int v127;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  void *v146;
  void *v147;
  unsigned int v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  void *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  std::__compressed_pair_elem<std::allocator<std::string> &, 1, false> *v171;
  uint64_t v172;
  _QWORD *words;
  uint64_t v174;
  turi::unity_sframe *v175;
  std::__shared_weak_count *v176;
  unint64_t v177[3];
  void *__p[2];
  unint64_t v179;
  std::vector<std::string> v180;
  void **v181;
  std::__shared_weak_count *v182;
  std::__split_buffer<std::string> __v;
  std::__split_buffer<std::string> *v184;
  _BYTE v185[24];
  _BYTE *v186;
  __int128 v187;
  __int128 v188;
  int v189;
  uint64_t v190;

  v190 = *MEMORY[0x24BDAC8D0];
  turi::evaluation::confusion_matrix::gather_counts_and_labels((turi::evaluation::confusion_matrix *)this);
  if (this[12])
  {
    v187 = 0u;
    v188 = 0u;
    v189 = 1065353216;
    for (i = this[20]; i; i = (uint64_t **)*i)
    {
      __p[0] = i[2];
      v177[0] = (unint64_t)i[4];
      v5 = std::map<unsigned long,turi::flexible_type>::at((uint64_t)(this + 10), (unint64_t *)__p);
      v6 = std::map<unsigned long,turi::flexible_type>::at((uint64_t)(this + 10), v177);
      v7 = i[6];
      std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)&__v, v5, (uint64_t)v6);
      v180.__begin_ = (std::vector<std::string>::pointer)&__v;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type>&&>,std::tuple<>>((uint64_t)&v187, (unsigned __int8 *)&__v, (uint64_t)&std::piecewise_construct, (uint64_t **)&v180)+ 6) = v7;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&__v);
    }
    if (this + 18 != (uint64_t ***)&v187)
    {
      *((_DWORD *)this + 44) = v189;
      std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,void *> *>>(this + 18, (_QWORD *)v188, 0);
    }
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&v187);
  }
  turi::sframe::sframe((turi::sframe *)&v187);
  memset(&v180, 0, sizeof(v180));
  std::string::basic_string[abi:ne180100]<0>(__p, "target_label");
  end = v180.__end_;
  if (v180.__end_ >= v180.__end_cap_.__value_)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v180.__end_ - (char *)v180.__begin_) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 3) > v11)
      v11 = 0x5555555555555556 * (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 3) >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v180.__end_cap_;
    if (v12)
      v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v180.__end_cap_, v12);
    else
      v13 = 0;
    v14 = v13 + v10;
    __v.__first_ = v13;
    __v.__begin_ = v14;
    __v.__end_cap_.__value_ = &v13[v12];
    v15 = *(_OWORD *)__p;
    v14->__r_.__value_.__r.__words[2] = v179;
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    __p[1] = 0;
    v179 = 0;
    __p[0] = 0;
    __v.__end_ = v14 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v180, &__v);
    v16 = v180.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v180.__end_ = v16;
    if (SHIBYTE(v179) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v9 = *(_OWORD *)__p;
    v180.__end_->__r_.__value_.__r.__words[2] = v179;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
    v180.__end_ = end + 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "predicted_label");
  v17 = v180.__end_;
  if (v180.__end_ >= v180.__end_cap_.__value_)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v180.__end_ - (char *)v180.__begin_) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 3) > v20)
      v20 = 0x5555555555555556 * (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 3) >= 0x555555555555555)
      v21 = 0xAAAAAAAAAAAAAAALL;
    else
      v21 = v20;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v180.__end_cap_;
    if (v21)
      v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v180.__end_cap_, v21);
    else
      v22 = 0;
    v23 = v22 + v19;
    __v.__first_ = v22;
    __v.__begin_ = v23;
    __v.__end_cap_.__value_ = &v22[v21];
    v24 = *(_OWORD *)__p;
    v23->__r_.__value_.__r.__words[2] = v179;
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    __p[1] = 0;
    v179 = 0;
    __p[0] = 0;
    __v.__end_ = v23 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v180, &__v);
    v25 = v180.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v180.__end_ = v25;
    if (SHIBYTE(v179) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v18 = *(_OWORD *)__p;
    v180.__end_->__r_.__value_.__r.__words[2] = v179;
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    v180.__end_ = v17 + 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "count");
  v26 = v180.__end_;
  if (v180.__end_ >= v180.__end_cap_.__value_)
  {
    v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v180.__end_ - (char *)v180.__begin_) >> 3);
    v29 = v28 + 1;
    if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 3) > v29)
      v29 = 0x5555555555555556 * (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 3) >= 0x555555555555555)
      v30 = 0xAAAAAAAAAAAAAAALL;
    else
      v30 = v29;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v180.__end_cap_;
    if (v30)
      v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v180.__end_cap_, v30);
    else
      v31 = 0;
    v32 = v31 + v28;
    __v.__first_ = v31;
    __v.__begin_ = v32;
    __v.__end_cap_.__value_ = &v31[v30];
    v33 = *(_OWORD *)__p;
    v32->__r_.__value_.__r.__words[2] = v179;
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
    __p[1] = 0;
    v179 = 0;
    __p[0] = 0;
    __v.__end_ = v32 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v180, &__v);
    v34 = v180.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v180.__end_ = v34;
    if (SHIBYTE(v179) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v27 = *(_OWORD *)__p;
    v180.__end_->__r_.__value_.__r.__words[2] = v179;
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
    v180.__end_ = v26 + 1;
  }
  v37 = (uint64_t *)this[20];
  v36 = (char *)(this + 20);
  v35 = v37;
  if (!v37)
  {
    LODWORD(v41) = 7;
LABEL_63:
    v38 = 1;
    LODWORD(v39) = v41;
    goto LABEL_64;
  }
  v38 = 7;
  v39 = 7;
  while (1)
  {
    v40 = *((unsigned __int8 *)v35 + 28);
    v41 = *((unsigned __int8 *)v35 + 44);
    if (v38 == 7)
    {
      v38 = *((_BYTE *)v35 + 28);
    }
    else if (v40 != 7 && v40 != v38)
    {
      v38 = 2;
      goto LABEL_64;
    }
    if ((_DWORD)v39 != 7)
    {
      v42 = (_DWORD)v41 == 7 || (_DWORD)v41 == (_DWORD)v39;
      v41 = v39;
      if (!v42)
        break;
    }
    v35 = (uint64_t *)*v35;
    v39 = v41;
    if (!v35)
      goto LABEL_62;
  }
  LODWORD(v41) = 2;
LABEL_62:
  LODWORD(v39) = v41;
  if (v38 == 7)
    goto LABEL_63;
LABEL_64:
  if ((_DWORD)v39 == 7)
    v43 = 1;
  else
    v43 = v39;
  __p[0] = 0;
  __p[1] = 0;
  v179 = 0;
  v44 = operator new(1uLL);
  *v44 = v38;
  __p[0] = v44;
  v179 = (unint64_t)(v44 + 1);
  v45 = operator new(2uLL);
  v46 = v45 + 2;
  v45[1] = v43;
  *v45 = *v44;
  __p[0] = v45;
  __p[1] = v45 + 2;
  v179 = (unint64_t)(v45 + 2);
  operator delete(v44);
  __p[1] = v45 + 2;
  if ((unint64_t)(v45 + 2) >= v179)
  {
    v48 = __p[0];
    v49 = v46 - (char *)__p[0];
    v50 = v46 - (char *)__p[0] + 1;
    if (v50 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v51 = v179 - (unint64_t)__p[0];
    if (2 * (v179 - (unint64_t)__p[0]) > v50)
      v50 = 2 * v51;
    if (v51 >= 0x3FFFFFFFFFFFFFFFLL)
      v52 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    if (v52)
      v53 = operator new(v52);
    else
      v53 = 0;
    v54 = &v53[v52];
    v53[v49] = 0;
    v47 = &v53[v49 + 1];
    if (v46 == v48)
    {
      v53 += v49;
    }
    else
    {
      v55 = v45 - v48 + 1;
      do
      {
        v56 = *--v46;
        v53[v55--] = v56;
      }
      while (v46 != v48);
    }
    __p[0] = v53;
    __p[1] = v47;
    v179 = (unint64_t)v54;
    if (v48)
      operator delete(v48);
  }
  else
  {
    v45[2] = 0;
    v47 = v45 + 3;
  }
  __p[1] = v47;
  std::string::basic_string[abi:ne180100]<0>(&__v, "");
  turi::sframe::open_for_write((uint64_t)&v187, &v180, __p, (const std::string *)&__v, 1, 1);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  turi::sframe::get_output_iterator((size_t *)&v187, 0, (uint64_t)&__v);
  std::vector<turi::flexible_type>::vector(v177, 3uLL);
  while (1)
  {
    v36 = *(char **)v36;
    if (!v36)
      break;
    v57 = (uint64_t *)(v36 + 16);
    v58 = v177[0];
    if (v36 + 16 != (char *)v177[0])
    {
      switch(*(_BYTE *)(v177[0] + 12))
      {
        case 2:
          v59 = *(unint64_t **)v177[0];
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (!v61)
          {
            v62 = *(unint64_t **)v58;
            if (!*(_QWORD *)v58)
              goto LABEL_132;
            if (*((char *)v62 + 31) < 0)
              operator delete((void *)v62[1]);
            v63 = v62;
            v64 = 0x1012C404EF22A49;
            goto LABEL_131;
          }
          break;
        case 3:
          v76 = *(unint64_t **)v177[0];
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
          {
            v79 = *(unint64_t **)v58;
            if (!*(_QWORD *)v58)
              goto LABEL_132;
            v80 = (void *)v79[1];
            if (v80)
            {
              v79[2] = (unint64_t)v80;
              operator delete(v80);
            }
            v63 = v79;
            v64 = 0x1080C409938AC02;
            goto LABEL_131;
          }
          break;
        case 4:
          v65 = *(unint64_t **)v177[0];
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = *(unint64_t **)v58;
            if (!*(_QWORD *)v58)
              goto LABEL_132;
            v181 = (void **)(v68 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v181);
            goto LABEL_124;
          }
          break;
        case 5:
          v81 = *(unint64_t **)v177[0];
          do
          {
            v82 = __ldaxr(v81);
            v83 = v82 - 1;
          }
          while (__stlxr(v83, v81));
          if (!v83)
          {
            v68 = *(unint64_t **)v58;
            if (!*(_QWORD *)v58)
              goto LABEL_132;
            v181 = (void **)(v68 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v181);
LABEL_124:
            v63 = v68;
            v64 = 0x1020C405E66F15BLL;
            goto LABEL_131;
          }
          break;
        case 8:
          v84 = *(unint64_t **)v177[0];
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, v84));
          if (!v86)
          {
            v87 = *(unint64_t **)v58;
            if (!*(_QWORD *)v58)
              goto LABEL_132;
            boost::detail::shared_count::~shared_count((unsigned int **)v87 + 2);
            v63 = v87;
            v75 = -235920773;
            goto LABEL_130;
          }
          break;
        case 9:
          v69 = *(unint64_t **)v177[0];
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            v72 = *(unint64_t **)v58;
            if (*(_QWORD *)v58)
            {
              v73 = (void *)v72[6];
              if (v73)
              {
                v72[7] = (unint64_t)v73;
                operator delete(v73);
              }
              v74 = (void *)v72[3];
              if (v74)
              {
                v72[4] = (unint64_t)v74;
                operator delete(v74);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v72 + 1));
              v63 = v72;
              v75 = 2071181815;
LABEL_130:
              v64 = v75 | 0x1030C4000000000;
LABEL_131:
              MEMORY[0x219A19A08](v63, v64);
            }
LABEL_132:
            *(_QWORD *)v58 = 0;
          }
          break;
        default:
          break;
      }
      v88 = *v57;
      *(_QWORD *)(v58 + 5) = *(_QWORD *)(v36 + 21);
      *(_QWORD *)v58 = v88;
      LODWORD(v88) = v36[28];
      *(_BYTE *)(v58 + 12) = v88;
      v89 = v88 > 9;
      v90 = (1 << v88) & 0x33C;
      if (!v89 && v90 != 0)
      {
        v92 = *(unint64_t **)v58;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 + 1, v92));
      }
    }
    v94 = v177[0];
    if (v57 != (uint64_t *)v177[0])
    {
      v95 = (unint64_t **)(v177[0] + 16);
      switch(*(_BYTE *)(v177[0] + 28))
      {
        case 2:
          v96 = *v95;
          do
          {
            v97 = __ldaxr(v96);
            v98 = v97 - 1;
          }
          while (__stlxr(v98, v96));
          if (!v98)
          {
            v99 = *v95;
            if (!*v95)
              goto LABEL_182;
            if (*((char *)v99 + 31) < 0)
              operator delete((void *)v99[1]);
            v100 = v99;
            v101 = 0x1012C404EF22A49;
            goto LABEL_181;
          }
          break;
        case 3:
          v113 = *v95;
          do
          {
            v114 = __ldaxr(v113);
            v115 = v114 - 1;
          }
          while (__stlxr(v115, v113));
          if (!v115)
          {
            v116 = *v95;
            if (!*v95)
              goto LABEL_182;
            v117 = (void *)v116[1];
            if (v117)
            {
              v116[2] = (unint64_t)v117;
              operator delete(v117);
            }
            v100 = v116;
            v101 = 0x1080C409938AC02;
            goto LABEL_181;
          }
          break;
        case 4:
          v102 = *v95;
          do
          {
            v103 = __ldaxr(v102);
            v104 = v103 - 1;
          }
          while (__stlxr(v104, v102));
          if (!v104)
          {
            v105 = *v95;
            if (!*v95)
              goto LABEL_182;
            v181 = (void **)(v105 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v181);
            goto LABEL_174;
          }
          break;
        case 5:
          v118 = *v95;
          do
          {
            v119 = __ldaxr(v118);
            v120 = v119 - 1;
          }
          while (__stlxr(v120, v118));
          if (!v120)
          {
            v105 = *v95;
            if (!*v95)
              goto LABEL_182;
            v181 = (void **)(v105 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v181);
LABEL_174:
            v100 = v105;
            v101 = 0x1020C405E66F15BLL;
            goto LABEL_181;
          }
          break;
        case 8:
          v121 = *v95;
          do
          {
            v122 = __ldaxr(v121);
            v123 = v122 - 1;
          }
          while (__stlxr(v123, v121));
          if (!v123)
          {
            v124 = *v95;
            if (!*v95)
              goto LABEL_182;
            boost::detail::shared_count::~shared_count((unsigned int **)v124 + 2);
            v100 = v124;
            v112 = -235920773;
            goto LABEL_180;
          }
          break;
        case 9:
          v106 = *v95;
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (!v108)
          {
            v109 = *v95;
            if (*v95)
            {
              v110 = (void *)v109[6];
              if (v110)
              {
                v109[7] = (unint64_t)v110;
                operator delete(v110);
              }
              v111 = (void *)v109[3];
              if (v111)
              {
                v109[4] = (unint64_t)v111;
                operator delete(v111);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v109 + 1));
              v100 = v109;
              v112 = 2071181815;
LABEL_180:
              v101 = v112 | 0x1030C4000000000;
LABEL_181:
              MEMORY[0x219A19A08](v100, v101);
            }
LABEL_182:
            *v95 = 0;
          }
          break;
        default:
          break;
      }
      v125 = (unint64_t *)*((_QWORD *)v36 + 4);
      *(_QWORD *)(v94 + 21) = *(_QWORD *)(v36 + 37);
      *v95 = v125;
      v126 = v36[44];
      *(_BYTE *)(v94 + 28) = v126;
      v89 = v126 > 9;
      v127 = (1 << v126) & 0x33C;
      if (!v89 && v127 != 0)
      {
        v129 = *v95;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 + 1, v129));
      }
    }
    v131 = v177[0];
    switch(*(_BYTE *)(v177[0] + 44))
    {
      case 2:
        v132 = *(unint64_t **)(v177[0] + 32);
        do
        {
          v133 = __ldaxr(v132);
          v134 = v133 - 1;
        }
        while (__stlxr(v134, v132));
        if (!v134)
        {
          v135 = *(_QWORD *)(v131 + 32);
          if (!v135)
            goto LABEL_231;
          if (*(char *)(v135 + 31) < 0)
            operator delete(*(void **)(v135 + 8));
          v136 = (_QWORD *)v135;
          v137 = 0x1012C404EF22A49;
          goto LABEL_230;
        }
        break;
      case 3:
        v149 = *(unint64_t **)(v177[0] + 32);
        do
        {
          v150 = __ldaxr(v149);
          v151 = v150 - 1;
        }
        while (__stlxr(v151, v149));
        if (!v151)
        {
          v152 = *(_QWORD **)(v131 + 32);
          if (!v152)
            goto LABEL_231;
          v153 = (void *)v152[1];
          if (v153)
          {
            v152[2] = v153;
            operator delete(v153);
          }
          v136 = v152;
          v137 = 0x1080C409938AC02;
          goto LABEL_230;
        }
        break;
      case 4:
        v138 = *(unint64_t **)(v177[0] + 32);
        do
        {
          v139 = __ldaxr(v138);
          v140 = v139 - 1;
        }
        while (__stlxr(v140, v138));
        if (!v140)
        {
          v141 = *(_QWORD *)(v131 + 32);
          if (!v141)
            goto LABEL_231;
          v181 = (void **)(v141 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v181);
          goto LABEL_223;
        }
        break;
      case 5:
        v154 = *(unint64_t **)(v177[0] + 32);
        do
        {
          v155 = __ldaxr(v154);
          v156 = v155 - 1;
        }
        while (__stlxr(v156, v154));
        if (!v156)
        {
          v141 = *(_QWORD *)(v131 + 32);
          if (!v141)
            goto LABEL_231;
          v181 = (void **)(v141 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v181);
LABEL_223:
          v136 = (_QWORD *)v141;
          v137 = 0x1020C405E66F15BLL;
          goto LABEL_230;
        }
        break;
      case 8:
        v157 = *(unint64_t **)(v177[0] + 32);
        do
        {
          v158 = __ldaxr(v157);
          v159 = v158 - 1;
        }
        while (__stlxr(v159, v157));
        if (!v159)
        {
          v160 = *(_QWORD *)(v131 + 32);
          if (!v160)
            goto LABEL_231;
          boost::detail::shared_count::~shared_count((unsigned int **)(v160 + 16));
          v136 = (_QWORD *)v160;
          v148 = -235920773;
          goto LABEL_229;
        }
        break;
      case 9:
        v142 = *(unint64_t **)(v177[0] + 32);
        do
        {
          v143 = __ldaxr(v142);
          v144 = v143 - 1;
        }
        while (__stlxr(v144, v142));
        if (!v144)
        {
          v145 = *(_QWORD **)(v131 + 32);
          if (v145)
          {
            v146 = (void *)v145[6];
            if (v146)
            {
              v145[7] = v146;
              operator delete(v146);
            }
            v147 = (void *)v145[3];
            if (v147)
            {
              v145[4] = v147;
              operator delete(v147);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v145 + 1));
            v136 = v145;
            v148 = 2071181815;
LABEL_229:
            v137 = v148 | 0x1030C4000000000;
LABEL_230:
            MEMORY[0x219A19A08](v136, v137);
          }
LABEL_231:
          *(_QWORD *)(v131 + 32) = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)(v131 + 32) = 0;
    *(_DWORD *)(v131 + 40) = 0;
    *(_BYTE *)(v131 + 44) = 0;
    *(_QWORD *)(v131 + 32) = *((_QWORD *)v36 + 6);
    if (!__v.__end_cap_.__value_)
      std::__throw_bad_function_call[abi:ne180100]();
    (*((void (**)(std::string *, unint64_t *))__v.__end_cap_.__value_->__r_.__value_.__l.__data_ + 6))(__v.__end_cap_.__value_, v177);
  }
  turi::sframe::close((turi::sframe *)&v187);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v175);
  turi::unity_sframe::construct_from_sframe(v175, (const turi::sframe *)&v187);
  v181 = (void **)v175;
  v182 = v176;
  if (v176)
  {
    p_shared_owners = (unint64_t *)&v176->__shared_owners_;
    do
      v162 = __ldxr(p_shared_owners);
    while (__stxr(v162 + 1, p_shared_owners));
  }
  turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&v181, a2);
  v163 = v182;
  if (v182)
  {
    v164 = (unint64_t *)&v182->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v176;
  if (v176)
  {
    v167 = (unint64_t *)&v176->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v181 = (void **)v177;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v181);
  v169 = v186;
  if (v186 == v185)
  {
    v170 = 4;
    v169 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_252;
    v170 = 5;
  }
  (*(void (**)(void))(*v169 + 8 * v170))();
LABEL_252:
  v171 = (std::__compressed_pair_elem<std::allocator<std::string> &, 1, false> *)v184;
  if (v184 == (std::__split_buffer<std::string> *)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>)
  {
    v172 = 4;
    v171 = &__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
  }
  else
  {
    if (!v184)
      goto LABEL_257;
    v172 = 5;
  }
  (*((void (**)(void))v171->__value_ + v172))();
LABEL_257:
  words = __v.__end_cap_.__value_->__r_.__value_.__r.__words;
  if ((std::__split_buffer<std::string> *)__v.__end_cap_.__value_ == &__v)
  {
    v174 = 4;
    words = &__v;
  }
  else
  {
    if (!__v.__end_cap_.__value_)
      goto LABEL_262;
    v174 = 5;
  }
  (*(void (**)(void))(*words + 8 * v174))();
LABEL_262:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v180;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  turi::sframe::~sframe((turi::sframe *)&v187);
}

void sub_218481468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, __int16 a7, char a8, char a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__pa, std::__split_buffer<std::string> *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,...)
{
  va_list va;

  va_start(va, a35);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (result != v7)
      result = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

uint64_t std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[40 * v11];
    v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_21848173C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

