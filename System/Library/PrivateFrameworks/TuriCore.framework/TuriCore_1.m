void sub_217EDEC6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDEC58);
}

void sub_217EDECC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_variant_sframe(int *a1, uint64_t *a2)
{
  int *v4;
  int v5;
  uint64_t *v6;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v5 = a1[2];
    v4 = a1 + 2;
    if ((v5 ^ (v5 >> 31)) == 4)
    {
      v6 = (uint64_t *)turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(v4);
      return new_tc_sframe<std::shared_ptr<turi::unity_sframe_base> const&>(v6);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Variant does not contain an SFrame.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Variant\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDED88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDED74);
}

void sub_217EDEDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_variant_parameters(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  int v5;
  const void ***v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  std::string::size_type v10;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v5 = *((_DWORD *)a1 + 2);
    v4 = a1 + 1;
    if ((v5 ^ (v5 >> 31)) == 6)
    {
      v6 = (const void ***)turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v4);
      v7 = operator new();
      *(_QWORD *)(v7 + 16) = 0;
      v8 = v7 + 16;
      *(_QWORD *)(v7 + 8) = v7 + 16;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)v7 = &capi_struct_type_info_tc_parameters_inst;
      std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)&__p, v6);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v7 + 8, *(char **)(v7 + 16));
      size = __p.__r_.__value_.__l.__size_;
      *(_QWORD *)(v7 + 8) = __p.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v7 + 16) = size;
      v10 = __p.__r_.__value_.__r.__words[2];
      *(_QWORD *)(v7 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      if (v10)
      {
        *(_QWORD *)(size + 16) = v8;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        size = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 8) = v8;
      }
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, (char *)size);
      return v7;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Variant does not contain parameters.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Variant\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDEF48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDEF18);
}

void sub_217EDEF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_variant_model(int *a1, uint64_t *a2)
{
  int *v4;
  int v5;
  std::string::size_type *v6;
  _QWORD *v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    v5 = a1[2];
    v4 = a1 + 2;
    if ((v5 ^ (v5 >> 31)) == 3)
    {
      v6 = (std::string::size_type *)turi::variant_get_ref<std::shared_ptr<turi::model_base>>(v4);
      v7 = (_QWORD *)operator new();
      v7[1] = 0;
      v7[2] = 0;
      *v7 = &capi_struct_type_info_tc_model_inst;
      v8 = v6[1];
      __p.__r_.__value_.__r.__words[0] = *v6;
      __p.__r_.__value_.__l.__size_ = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v7 + 1), (__int128 *)&__p);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      return v7;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Variant does not contain a model.");
    set_error(a2, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Variant\" is null.");
    set_error(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EDF100(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EDF0E4);
}

void sub_217EDF154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *tc_plot_create_1d(uint64_t a1, char *a2, char *a3, char *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  unsigned int v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  unsigned int v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  std::string::size_type v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *size;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  __int128 v114;
  void *lpsrc[2];
  std::string __p;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    optional_str(a2, (uint64_t)&v121);
    optional_str(a3, (uint64_t)&v119);
    optional_str(a4, (uint64_t)&v117);
    turi::gl_sarray::plot((turi::gl_sarray *)(a1 + 8), (const turi::flexible_type *)&v121, (const turi::flexible_type *)&v119, (const turi::flexible_type *)&v117, &v114);
    *(_OWORD *)lpsrc = v114;
    v114 = 0uLL;
    switch(v118)
    {
      case 2:
        v11 = (unint64_t *)v117;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = v117;
          if (v117)
          {
            if (*(char *)(v117 + 31) < 0)
              operator delete(*(void **)(v117 + 8));
            v15 = v14;
            v16 = 0x1012C404EF22A49;
            goto LABEL_48;
          }
        }
        break;
      case 3:
        v29 = (unint64_t *)v117;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = v117;
          if (v117)
          {
            v33 = *(void **)(v117 + 8);
            if (v33)
            {
              *(_QWORD *)(v117 + 16) = v33;
              operator delete(v33);
            }
            v15 = v32;
            v16 = 0x1080C409938AC02;
            goto LABEL_48;
          }
        }
        break;
      case 4:
        v18 = (unint64_t *)v117;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = v117;
          if (v117)
          {
            __p.__r_.__value_.__r.__words[0] = v117 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_41;
          }
        }
        break;
      case 5:
        v34 = (unint64_t *)v117;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v21 = v117;
          if (v117)
          {
            __p.__r_.__value_.__r.__words[0] = v117 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_41:
            v15 = v21;
            v16 = 0x1020C405E66F15BLL;
            goto LABEL_48;
          }
        }
        break;
      case 8:
        v37 = (unint64_t *)v117;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          v40 = v117;
          if (v117)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v117 + 16));
            v15 = v40;
            v28 = -235920773;
            goto LABEL_47;
          }
        }
        break;
      case 9:
        v22 = (unint64_t *)v117;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = v117;
          if (v117)
          {
            v26 = *(void **)(v117 + 48);
            if (v26)
            {
              *(_QWORD *)(v117 + 56) = v26;
              operator delete(v26);
            }
            v27 = *(void **)(v25 + 24);
            if (v27)
            {
              *(_QWORD *)(v25 + 32) = v27;
              operator delete(v27);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v25 + 8);
            v15 = v25;
            v28 = 2071181815;
LABEL_47:
            v16 = v28 | 0x1030C4000000000;
LABEL_48:
            MEMORY[0x219A19A08](v15, v16);
          }
        }
        break;
      default:
        break;
    }
    switch(v120)
    {
      case 2:
        v41 = (unint64_t *)v119;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          v44 = v119;
          if (v119)
          {
            if (*(char *)(v119 + 31) < 0)
              operator delete(*(void **)(v119 + 8));
            v45 = v44;
            v46 = 0x1012C404EF22A49;
            goto LABEL_90;
          }
        }
        break;
      case 3:
        v58 = (unint64_t *)v119;
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (!v60)
        {
          v61 = v119;
          if (v119)
          {
            v62 = *(void **)(v119 + 8);
            if (v62)
            {
              *(_QWORD *)(v119 + 16) = v62;
              operator delete(v62);
            }
            v45 = v61;
            v46 = 0x1080C409938AC02;
            goto LABEL_90;
          }
        }
        break;
      case 4:
        v47 = (unint64_t *)v119;
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          v50 = v119;
          if (v119)
          {
            __p.__r_.__value_.__r.__words[0] = v119 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_83;
          }
        }
        break;
      case 5:
        v63 = (unint64_t *)v119;
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          v50 = v119;
          if (v119)
          {
            __p.__r_.__value_.__r.__words[0] = v119 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_83:
            v45 = v50;
            v46 = 0x1020C405E66F15BLL;
            goto LABEL_90;
          }
        }
        break;
      case 8:
        v66 = (unint64_t *)v119;
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
        {
          v69 = v119;
          if (v119)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v119 + 16));
            v45 = v69;
            v57 = -235920773;
            goto LABEL_89;
          }
        }
        break;
      case 9:
        v51 = (unint64_t *)v119;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          v54 = v119;
          if (v119)
          {
            v55 = *(void **)(v119 + 48);
            if (v55)
            {
              *(_QWORD *)(v119 + 56) = v55;
              operator delete(v55);
            }
            v56 = *(void **)(v54 + 24);
            if (v56)
            {
              *(_QWORD *)(v54 + 32) = v56;
              operator delete(v56);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v54 + 8);
            v45 = v54;
            v57 = 2071181815;
LABEL_89:
            v46 = v57 | 0x1030C4000000000;
LABEL_90:
            MEMORY[0x219A19A08](v45, v46);
          }
        }
        break;
      default:
        break;
    }
    switch(v122)
    {
      case 2:
        v70 = (unint64_t *)v121;
        do
        {
          v71 = __ldaxr(v70);
          v72 = v71 - 1;
        }
        while (__stlxr(v72, v70));
        if (!v72)
        {
          v73 = v121;
          if (v121)
          {
            if (*(char *)(v121 + 31) < 0)
              operator delete(*(void **)(v121 + 8));
            v74 = v73;
            v75 = 0x1012C404EF22A49;
            goto LABEL_132;
          }
        }
        break;
      case 3:
        v87 = (unint64_t *)v121;
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          v90 = v121;
          if (v121)
          {
            v91 = *(void **)(v121 + 8);
            if (v91)
            {
              *(_QWORD *)(v121 + 16) = v91;
              operator delete(v91);
            }
            v74 = v90;
            v75 = 0x1080C409938AC02;
            goto LABEL_132;
          }
        }
        break;
      case 4:
        v76 = (unint64_t *)v121;
        do
        {
          v77 = __ldaxr(v76);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v76));
        if (!v78)
        {
          v79 = v121;
          if (v121)
          {
            __p.__r_.__value_.__r.__words[0] = v121 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_125;
          }
        }
        break;
      case 5:
        v92 = (unint64_t *)v121;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          v79 = v121;
          if (v121)
          {
            __p.__r_.__value_.__r.__words[0] = v121 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_125:
            v74 = v79;
            v75 = 0x1020C405E66F15BLL;
            goto LABEL_132;
          }
        }
        break;
      case 8:
        v95 = (unint64_t *)v121;
        do
        {
          v96 = __ldaxr(v95);
          v97 = v96 - 1;
        }
        while (__stlxr(v97, v95));
        if (!v97)
        {
          v98 = v121;
          if (v121)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v121 + 16));
            v74 = v98;
            v86 = -235920773;
            goto LABEL_131;
          }
        }
        break;
      case 9:
        v80 = (unint64_t *)v121;
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (!v82)
        {
          v83 = v121;
          if (v121)
          {
            v84 = *(void **)(v121 + 48);
            if (v84)
            {
              *(_QWORD *)(v121 + 56) = v84;
              operator delete(v84);
            }
            v85 = *(void **)(v83 + 24);
            if (v85)
            {
              *(_QWORD *)(v83 + 32) = v85;
              operator delete(v85);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v83 + 8);
            v74 = v83;
            v86 = 2071181815;
LABEL_131:
            v75 = v86 | 0x1030C4000000000;
LABEL_132:
            MEMORY[0x219A19A08](v74, v75);
          }
        }
        break;
      default:
        break;
    }
    if (lpsrc[0]
    {
      v100 = (std::string::size_type)v99;
      v101 = lpsrc[1];
      *(_QWORD *)&v114 = v99;
      *((void **)&v114 + 1) = lpsrc[1];
      if (lpsrc[1])
      {
        v102 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
    }
    else
    {
      v101 = 0;
      v100 = 0;
      v114 = 0uLL;
    }
    v17 = (_QWORD *)operator new();
    v17[1] = 0;
    v17[2] = 0;
    *v17 = &capi_struct_type_info_tc_plot_inst;
    __p.__r_.__value_.__r.__words[0] = v100;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v101;
    v114 = 0uLL;
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v17 + 1), (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v105 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v107 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
    if (*((_QWORD *)&v114 + 1))
    {
      v108 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v110 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      v111 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v17;
}

void sub_217EDF918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,int a22,char a23,uint64_t a24,int a25,char a26)
{
  if (a2)
  {
    if (a20 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EDF2A4);
  }
  _Unwind_Resume(exception_object);
}

void optional_str(char *__s@<X0>, uint64_t a2@<X8>)
{
  int v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  char v17;

  if (__s)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::flexible_type::flexible_type<std::string>(a2, (__int128 *)__p);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if ((uint64_t *)a2 != &turi::FLEX_UNDEFINED)
    {
      *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)a2 = turi::FLEX_UNDEFINED;
      v3 = byte_254FEDD1C;
      *(_BYTE *)(a2 + 12) = byte_254FEDD1C;
      switch(v3)
      {
        case 2:
          v4 = *(unint64_t **)a2;
          do
            v5 = __ldaxr(v4);
          while (__stlxr(v5 + 1, v4));
          break;
        case 3:
          v6 = *(unint64_t **)a2;
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
          break;
        case 4:
          v8 = *(unint64_t **)a2;
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
          break;
        case 5:
          v10 = *(unint64_t **)a2;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
          break;
        case 8:
          v12 = *(unint64_t **)a2;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
          break;
        case 9:
          v14 = *(unint64_t **)a2;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
          break;
        default:
          return;
      }
    }
  }
}

void sub_217EDFF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *tc_plot_create_2d(uint64_t a1, uint64_t a2, char *a3, char *__s, char *a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *v13;
  __int128 v14;
  std::string::size_type v15;
  __int128 v16;
  std::string::size_type v17;
  __int128 v18;
  std::string::size_type v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  void *v98;
  std::string::size_type v99;
  void *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *size;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *result;
  std::string v113;
  std::string v114;
  std::string v115;
  __int128 v116;
  void *lpsrc[2];
  std::string __p;
  uint64_t v119;
  void *v120;
  char v121;
  _BYTE v122[160];
  _QWORD *v123;
  char v124;
  _QWORD *v125;
  char v126;
  _QWORD *v127;
  char v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a2)
    {
      optional_str(__s, (uint64_t)&v127);
      switch(v128)
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_19;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_19:
          __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
          v15 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                    + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
          __p.__r_.__value_.__r.__words[2] = v15;
          v119 = MEMORY[0x24BEDB848] + 16;
          if (v121 < 0)
            operator delete(v120);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v122);
          goto LABEL_26;
        case 2:
          if (*((char *)v127 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v115, (const std::string::value_type *)v127[1], v127[2]);
          }
          else
          {
            v14 = *(_OWORD *)(v127 + 1);
            v115.__r_.__value_.__r.__words[2] = v127[3];
            *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v14;
          }
          goto LABEL_26;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v127 + 1);
          goto LABEL_26;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v127 + 1);
          goto LABEL_26;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v127 + 1);
          goto LABEL_26;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v127, &v115);
          goto LABEL_26;
        case 7:
          memset(&v115, 0, sizeof(v115));
          goto LABEL_26;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_26;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v127 + 1);
LABEL_26:
          optional_str(a5, (uint64_t)&v125);
          switch(v126)
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_35;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_35:
              __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
              v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                        + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
              __p.__r_.__value_.__r.__words[2] = v17;
              v119 = MEMORY[0x24BEDB848] + 16;
              if (v121 < 0)
                operator delete(v120);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](v122);
              break;
            case 2:
              if (*((char *)v125 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v114, (const std::string::value_type *)v125[1], v125[2]);
              }
              else
              {
                v16 = *(_OWORD *)(v125 + 1);
                v114.__r_.__value_.__r.__words[2] = v125[3];
                *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v16;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v125 + 1);
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v125 + 1);
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v125 + 1);
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v125, &v114);
              break;
            case 7:
              memset(&v114, 0, sizeof(v114));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v125 + 1);
              break;
            default:
              result = (_QWORD *)turi::flexible_type_fail(0);
              goto LABEL_204;
          }
          optional_str(a3, (uint64_t)&v123);
          switch(v124)
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_51;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_51:
              __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
              v19 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                        + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
              __p.__r_.__value_.__r.__words[2] = v19;
              v119 = MEMORY[0x24BEDB848] + 16;
              if (v121 < 0)
                operator delete(v120);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](v122);
              break;
            case 2:
              if (*((char *)v123 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v113, (const std::string::value_type *)v123[1], v123[2]);
              }
              else
              {
                v18 = *(_OWORD *)(v123 + 1);
                v113.__r_.__value_.__r.__words[2] = v123[3];
                *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v18;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v123 + 1);
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v123 + 1);
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v123 + 1);
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v123, &v113);
              break;
            case 7:
              memset(&v113, 0, sizeof(v113));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, v123 + 1);
              break;
            default:
              result = (_QWORD *)turi::flexible_type_fail(0);
              goto LABEL_204;
          }
          turi::visualization::plot((turi::gl_sarray *)(a1 + 8), (turi::gl_sarray *)(a2 + 8), &v115, &v114, &v113, &v116);
          *(_OWORD *)lpsrc = v116;
          v116 = 0uLL;
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v113.__r_.__value_.__l.__data_);
          switch(v124)
          {
            case 2:
              v20 = v123;
              do
              {
                v21 = __ldaxr(v20);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v20));
              if (!v22)
              {
                v23 = v123;
                if (v123)
                {
                  if (*((char *)v123 + 31) < 0)
                    operator delete((void *)v123[1]);
                  v24 = v23;
                  v25 = 0x1012C404EF22A49;
                  goto LABEL_97;
                }
              }
              break;
            case 3:
              v34 = v123;
              do
              {
                v35 = __ldaxr(v34);
                v36 = v35 - 1;
              }
              while (__stlxr(v36, v34));
              if (!v36)
              {
                v37 = v123;
                if (v123)
                {
                  v38 = (void *)v123[1];
                  if (v38)
                  {
                    v123[2] = v38;
                    operator delete(v38);
                  }
                  v24 = v37;
                  v25 = 0x1080C409938AC02;
                  goto LABEL_97;
                }
              }
              break;
            case 4:
              v26 = v123;
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                v29 = v123;
                if (v123)
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v123 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_90;
                }
              }
              break;
            case 5:
              v39 = v123;
              do
              {
                v40 = __ldaxr(v39);
                v41 = v40 - 1;
              }
              while (__stlxr(v41, v39));
              if (!v41)
              {
                v29 = v123;
                if (v123)
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v123 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_90:
                  v24 = v29;
                  v25 = 0x1020C405E66F15BLL;
                  goto LABEL_97;
                }
              }
              break;
            case 8:
              v42 = v123;
              do
              {
                v43 = __ldaxr(v42);
                v44 = v43 - 1;
              }
              while (__stlxr(v44, v42));
              if (!v44)
              {
                v45 = v123;
                if (v123)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v123 + 2);
                  v24 = v45;
                  v33 = -235920773;
                  goto LABEL_96;
                }
              }
              break;
            case 9:
              v30 = v123;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32 && v123)
              {
                v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v123);
                v33 = 2071181815;
LABEL_96:
                v25 = v33 | 0x1030C4000000000;
LABEL_97:
                MEMORY[0x219A19A08](v24, v25);
              }
              break;
            default:
              break;
          }
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          switch(v126)
          {
            case 2:
              v46 = v125;
              do
              {
                v47 = __ldaxr(v46);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, v46));
              if (!v48)
              {
                v49 = v125;
                if (v125)
                {
                  if (*((char *)v125 + 31) < 0)
                    operator delete((void *)v125[1]);
                  v50 = v49;
                  v51 = 0x1012C404EF22A49;
                  goto LABEL_137;
                }
              }
              break;
            case 3:
              v60 = v125;
              do
              {
                v61 = __ldaxr(v60);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, v60));
              if (!v62)
              {
                v63 = v125;
                if (v125)
                {
                  v64 = (void *)v125[1];
                  if (v64)
                  {
                    v125[2] = v64;
                    operator delete(v64);
                  }
                  v50 = v63;
                  v51 = 0x1080C409938AC02;
                  goto LABEL_137;
                }
              }
              break;
            case 4:
              v52 = v125;
              do
              {
                v53 = __ldaxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
              {
                v55 = v125;
                if (v125)
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v125 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_130;
                }
              }
              break;
            case 5:
              v65 = v125;
              do
              {
                v66 = __ldaxr(v65);
                v67 = v66 - 1;
              }
              while (__stlxr(v67, v65));
              if (!v67)
              {
                v55 = v125;
                if (v125)
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v125 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_130:
                  v50 = v55;
                  v51 = 0x1020C405E66F15BLL;
                  goto LABEL_137;
                }
              }
              break;
            case 8:
              v68 = v125;
              do
              {
                v69 = __ldaxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
              {
                v71 = v125;
                if (v125)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v125 + 2);
                  v50 = v71;
                  v59 = -235920773;
                  goto LABEL_136;
                }
              }
              break;
            case 9:
              v56 = v125;
              do
              {
                v57 = __ldaxr(v56);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v56));
              if (!v58 && v125)
              {
                v50 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v125);
                v59 = 2071181815;
LABEL_136:
                v51 = v59 | 0x1030C4000000000;
LABEL_137:
                MEMORY[0x219A19A08](v50, v51);
              }
              break;
            default:
              break;
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v115.__r_.__value_.__l.__data_);
          switch(v128)
          {
            case 2:
              v72 = v127;
              do
              {
                v73 = __ldaxr(v72);
                v74 = v73 - 1;
              }
              while (__stlxr(v74, v72));
              if (!v74)
              {
                v75 = v127;
                if (v127)
                {
                  if (*((char *)v127 + 31) < 0)
                    operator delete((void *)v127[1]);
                  v76 = v75;
                  v77 = 0x1012C404EF22A49;
                  goto LABEL_177;
                }
              }
              break;
            case 3:
              v86 = v127;
              do
              {
                v87 = __ldaxr(v86);
                v88 = v87 - 1;
              }
              while (__stlxr(v88, v86));
              if (!v88)
              {
                v89 = v127;
                if (v127)
                {
                  v90 = (void *)v127[1];
                  if (v90)
                  {
                    v127[2] = v90;
                    operator delete(v90);
                  }
                  v76 = v89;
                  v77 = 0x1080C409938AC02;
                  goto LABEL_177;
                }
              }
              break;
            case 4:
              v78 = v127;
              do
              {
                v79 = __ldaxr(v78);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, v78));
              if (!v80)
              {
                v81 = v127;
                if (v127)
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v127 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_170;
                }
              }
              break;
            case 5:
              v91 = v127;
              do
              {
                v92 = __ldaxr(v91);
                v93 = v92 - 1;
              }
              while (__stlxr(v93, v91));
              if (!v93)
              {
                v81 = v127;
                if (v127)
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v127 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_170:
                  v76 = v81;
                  v77 = 0x1020C405E66F15BLL;
                  goto LABEL_177;
                }
              }
              break;
            case 8:
              v94 = v127;
              do
              {
                v95 = __ldaxr(v94);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, v94));
              if (!v96)
              {
                v97 = v127;
                if (v127)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v127 + 2);
                  v76 = v97;
                  v85 = -235920773;
                  goto LABEL_176;
                }
              }
              break;
            case 9:
              v82 = v127;
              do
              {
                v83 = __ldaxr(v82);
                v84 = v83 - 1;
              }
              while (__stlxr(v84, v82));
              if (!v84 && v127)
              {
                v76 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v127);
                v85 = 2071181815;
LABEL_176:
                v77 = v85 | 0x1030C4000000000;
LABEL_177:
                MEMORY[0x219A19A08](v76, v77);
              }
              break;
            default:
              break;
          }
          if (lpsrc[0]
          {
            v99 = (std::string::size_type)v98;
            v100 = lpsrc[1];
            v115.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
            v115.__r_.__value_.__l.__size_ = (std::string::size_type)lpsrc[1];
            if (lpsrc[1])
            {
              v101 = (unint64_t *)((char *)lpsrc[1] + 8);
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
            }
          }
          else
          {
            v100 = 0;
            v99 = 0;
            *(_OWORD *)&v115.__r_.__value_.__l.__data_ = 0uLL;
          }
          v13 = (_QWORD *)operator new();
          v13[1] = 0;
          v13[2] = 0;
          *v13 = &capi_struct_type_info_tc_plot_inst;
          __p.__r_.__value_.__r.__words[0] = v99;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
          *(_OWORD *)&v115.__r_.__value_.__l.__data_ = 0uLL;
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v13 + 1), (__int128 *)&__p);
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v104 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v106 = (std::__shared_weak_count *)v115.__r_.__value_.__l.__size_;
          if (v115.__r_.__value_.__l.__size_)
          {
            v107 = (unint64_t *)(v115.__r_.__value_.__l.__size_ + 8);
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          v109 = (std::__shared_weak_count *)lpsrc[1];
          if (lpsrc[1])
          {
            v110 = (unint64_t *)((char *)lpsrc[1] + 8);
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          return v13;
        default:
          result = (_QWORD *)turi::flexible_type_fail(0);
LABEL_204:
          __break(1u);
          return result;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray_y\" is null.");
    set_error(a7, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray_x\" is null.");
    set_error(a7, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EE0C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  void *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;

  if (a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a37);
    switch(*(_BYTE *)(v42 - 140))
    {
      case 2:
        v44 = *(unint64_t **)(v42 - 152);
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (v46)
          goto LABEL_40;
        v47 = *(_QWORD *)(v42 - 152);
        if (!v47)
          goto LABEL_40;
        if (*(char *)(v47 + 31) < 0)
          operator delete(*(void **)(v47 + 8));
        v48 = (_QWORD *)v47;
        v49 = 0x1012C404EF22A49;
        break;
      case 3:
        v58 = *(unint64_t **)(v42 - 152);
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (v60)
          goto LABEL_40;
        v61 = *(_QWORD **)(v42 - 152);
        if (!v61)
          goto LABEL_40;
        v62 = (void *)v61[1];
        if (v62)
        {
          v61[2] = v62;
          operator delete(v62);
        }
        v48 = v61;
        v49 = 0x1080C409938AC02;
        break;
      case 4:
        v50 = *(unint64_t **)(v42 - 152);
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (v52)
          goto LABEL_40;
        v53 = *(_QWORD **)(v42 - 152);
        if (!v53)
          goto LABEL_40;
        *(_QWORD *)(v42 - 160) = v53 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 160));
        goto LABEL_32;
      case 5:
        v63 = *(unint64_t **)(v42 - 152);
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (v65)
          goto LABEL_40;
        v53 = *(_QWORD **)(v42 - 152);
        if (!v53)
          goto LABEL_40;
        *(_QWORD *)(v42 - 160) = v53 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 160));
LABEL_32:
        v48 = v53;
        v49 = 0x1020C405E66F15BLL;
        break;
      case 8:
        v66 = *(unint64_t **)(v42 - 152);
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
        {
          v69 = *(_QWORD *)(v42 - 152);
          if (v69)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v69 + 16));
            MEMORY[0x219A19A08](v69, 0x1030C40F1F0227BLL);
          }
          *(_QWORD *)(v42 - 152) = 0;
        }
        goto LABEL_40;
      case 9:
        v54 = *(unint64_t **)(v42 - 152);
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (v56)
          goto LABEL_40;
        v57 = *(_QWORD **)(v42 - 152);
        if (!v57)
          goto LABEL_40;
        v48 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v57);
        v49 = 0x1030C407B73B9F7;
        break;
      default:
        goto LABEL_40;
    }
    MEMORY[0x219A19A08](v48, v49);
LABEL_40:
    if (a23 < 0)
      operator delete(__p);
    switch(*(_BYTE *)(v42 - 124))
    {
      case 2:
        v70 = *(unint64_t **)(v42 - 136);
        do
        {
          v71 = __ldaxr(v70);
          v72 = v71 - 1;
        }
        while (__stlxr(v72, v70));
        if (v72)
          goto LABEL_80;
        v73 = *(_QWORD *)(v42 - 136);
        if (!v73)
          goto LABEL_80;
        if (*(char *)(v73 + 31) < 0)
          operator delete(*(void **)(v73 + 8));
        v74 = (_QWORD *)v73;
        v75 = 0x1012C404EF22A49;
        break;
      case 3:
        v84 = *(unint64_t **)(v42 - 136);
        do
        {
          v85 = __ldaxr(v84);
          v86 = v85 - 1;
        }
        while (__stlxr(v86, v84));
        if (v86)
          goto LABEL_80;
        v87 = *(_QWORD **)(v42 - 136);
        if (!v87)
          goto LABEL_80;
        v88 = (void *)v87[1];
        if (v88)
        {
          v87[2] = v88;
          operator delete(v88);
        }
        v74 = v87;
        v75 = 0x1080C409938AC02;
        break;
      case 4:
        v76 = *(unint64_t **)(v42 - 136);
        do
        {
          v77 = __ldaxr(v76);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v76));
        if (v78)
          goto LABEL_80;
        v79 = *(_QWORD **)(v42 - 136);
        if (!v79)
          goto LABEL_80;
        a11 = v79 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
        goto LABEL_72;
      case 5:
        v89 = *(unint64_t **)(v42 - 136);
        do
        {
          v90 = __ldaxr(v89);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v89));
        if (v91)
          goto LABEL_80;
        v79 = *(_QWORD **)(v42 - 136);
        if (!v79)
          goto LABEL_80;
        a11 = v79 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
LABEL_72:
        v74 = v79;
        v75 = 0x1020C405E66F15BLL;
        break;
      case 8:
        v92 = *(unint64_t **)(v42 - 136);
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          v95 = *(_QWORD *)(v42 - 136);
          if (v95)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v95 + 16));
            MEMORY[0x219A19A08](v95, 0x1030C40F1F0227BLL);
          }
          *(_QWORD *)(v42 - 136) = 0;
        }
        goto LABEL_80;
      case 9:
        v80 = *(unint64_t **)(v42 - 136);
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (v82)
          goto LABEL_80;
        v83 = *(_QWORD **)(v42 - 136);
        if (!v83)
          goto LABEL_80;
        v74 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v83);
        v75 = 0x1030C407B73B9F7;
        break;
      default:
        goto LABEL_80;
    }
    MEMORY[0x219A19A08](v74, v75);
LABEL_80:
    if (a30 < 0)
      operator delete(a25);
    switch(*(_BYTE *)(v42 - 108))
    {
      case 2:
        v96 = *(unint64_t **)(v42 - 120);
        do
        {
          v97 = __ldaxr(v96);
          v98 = v97 - 1;
        }
        while (__stlxr(v98, v96));
        if (v98)
          goto LABEL_120;
        v99 = *(_QWORD *)(v42 - 120);
        if (!v99)
          goto LABEL_120;
        if (*(char *)(v99 + 31) < 0)
          operator delete(*(void **)(v99 + 8));
        v100 = (_QWORD *)v99;
        v101 = 0x1012C404EF22A49;
        break;
      case 3:
        v110 = *(unint64_t **)(v42 - 120);
        do
        {
          v111 = __ldaxr(v110);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v110));
        if (v112)
          goto LABEL_120;
        v113 = *(_QWORD **)(v42 - 120);
        if (!v113)
          goto LABEL_120;
        v114 = (void *)v113[1];
        if (v114)
        {
          v113[2] = v114;
          operator delete(v114);
        }
        v100 = v113;
        v101 = 0x1080C409938AC02;
        break;
      case 4:
        v102 = *(unint64_t **)(v42 - 120);
        do
        {
          v103 = __ldaxr(v102);
          v104 = v103 - 1;
        }
        while (__stlxr(v104, v102));
        if (v104)
          goto LABEL_120;
        v105 = *(_QWORD **)(v42 - 120);
        if (!v105)
          goto LABEL_120;
        __p = v105 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_112;
      case 5:
        v115 = *(unint64_t **)(v42 - 120);
        do
        {
          v116 = __ldaxr(v115);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v115));
        if (v117)
          goto LABEL_120;
        v105 = *(_QWORD **)(v42 - 120);
        if (!v105)
          goto LABEL_120;
        __p = v105 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_112:
        v100 = v105;
        v101 = 0x1020C405E66F15BLL;
        break;
      case 8:
        v118 = *(unint64_t **)(v42 - 120);
        do
        {
          v119 = __ldaxr(v118);
          v120 = v119 - 1;
        }
        while (__stlxr(v120, v118));
        if (!v120)
        {
          v121 = *(_QWORD *)(v42 - 120);
          if (v121)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v121 + 16));
            MEMORY[0x219A19A08](v121, 0x1030C40F1F0227BLL);
          }
          *(_QWORD *)(v42 - 120) = 0;
        }
        goto LABEL_120;
      case 9:
        v106 = *(unint64_t **)(v42 - 120);
        do
        {
          v107 = __ldaxr(v106);
          v108 = v107 - 1;
        }
        while (__stlxr(v108, v106));
        if (v108)
          goto LABEL_120;
        v109 = *(_QWORD **)(v42 - 120);
        if (!v109)
          goto LABEL_120;
        v100 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v109);
        v101 = 0x1030C407B73B9F7;
        break;
      default:
        goto LABEL_120;
    }
    MEMORY[0x219A19A08](v100, v101);
LABEL_120:
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EE00B0);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *tc_plot_create_sframe_summary(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *lpsrc;
  std::__shared_weak_count *v18;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::gl_sframe::plot((turi::gl_sframe *)(a1 + 8));
    if (lpsrc
    {
      v6 = (std::string::size_type)v5;
      v7 = (std::string::size_type)v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    v10 = (_QWORD *)operator new();
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &capi_struct_type_info_tc_plot_inst;
    __p.__r_.__value_.__r.__words[0] = v6;
    __p.__r_.__value_.__l.__size_ = v7;
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v10 + 1), (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)())v18->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v10;
}

void sub_217EE14BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EE14A0);
}

void sub_217EE1524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_plot_get_vega_spec(uint64_t *a1, char a2, uint64_t a3, uint64_t *a4)
{
  turi *p_p;
  size_t size;
  uint64_t v9;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::visualization::Plot::get_spec(a1[1], a2, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = (turi *)&__p;
    else
      p_p = (turi *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v9 = tc_ft_create_from_string(p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"plot\" is null.");
    set_error(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v9;
}

void sub_217EE160C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EE15F0);
}

void sub_217EE1660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_plot_get_next_data(turi::visualization::Plot **a1, uint64_t a2, uint64_t *a3)
{
  turi *p_p;
  size_t size;
  uint64_t v7;
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    turi::visualization::Plot::get_next_data((uint64_t *)&__p, a1[1]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = (turi *)&__p;
    else
      p_p = (turi *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v7 = tc_ft_create_from_string(p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"plot\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v7;
}

void sub_217EE1734(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EE171CLL);
}

void sub_217EE1788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t tc_plot_finished_streaming(turi::visualization::Plot **a1, uint64_t a2, uint64_t *a3)
{
  std::string __p;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
    return turi::visualization::Plot::finished_streaming(a1[1]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"plot\" is null.");
  set_error(a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_217EE181C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EE1808);
}

void sub_217EE1868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_binary_op_ss(turi *a1, char *a2, uint64_t a3, uint64_t *a4)
{
  std::string::size_type v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  _OWORD *v21;
  void *__p[2];
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _BYTE v29[40];
  std::string v30;

  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1 && a3)
  {
    turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v30);
    v8 = v30.__r_.__value_.__r.__words[0];
    turi::gl_sarray::get_proxy(a3 + 8, &v25);
    v26 = v25;
    v25 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    (*(void (**)(uint64_t *__return_ptr, std::string::size_type, __int128 *, void **))(*(_QWORD *)v8 + 312))(&v27, v8, &v26, __p);
    turi::gl_sarray::gl_sarray(v29, &v27);
    v9 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v24 < 0)
      operator delete(__p[0]);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
    if (v30.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v21 = (_OWORD *)operator new();
    v21[1] = 0u;
    v21[2] = 0u;
    *v21 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v21 + 8));
    *(_QWORD *)v21 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)&v30, (const turi::gl_sarray *)v29);
    turi::gl_sarray::operator=((uint64_t)v21 + 8, (uint64_t)&v30);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v30);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v29);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "\"tc_sarray\" is null.");
    set_error(a4, &v30);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    return 0;
  }
  return v21;
}

void sub_217EE1AE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x217EE1AC4);
}

void sub_217EE1BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *tc_binary_op_sf(turi *a1, char *a2, uint64_t a3, uint64_t *a4)
{
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *size;
  unint64_t *v42;
  unint64_t v43;
  void *__p[2];
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _BYTE v49[40];
  std::string v50;
  void **v51;
  _QWORD *v52[3];

  v52[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize(a1);
  if (a1)
  {
    if (a3)
    {
      turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v50);
      v8 = v50.__r_.__value_.__r.__words[0];
      memset(v52, 0, 13);
      if ((_QWORD **)(a3 + 8) != v52)
      {
        *(_QWORD **)((char *)v52 + 5) = *(_QWORD **)(a3 + 13);
        v52[0] = *(_QWORD **)(a3 + 8);
        BYTE4(v52[1]) = *(_BYTE *)(a3 + 20);
        if (BYTE4(v52[1]) <= 9u && ((1 << SBYTE4(v52[1])) & 0x33C) != 0)
        {
          v9 = v52[0];
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, a2);
      (*(void (**)(uint64_t *__return_ptr, std::string::size_type, _QWORD **, void **))(*(_QWORD *)v8 + 296))(&v47, v8, v52, __p);
      turi::gl_sarray::gl_sarray(v49, &v47);
      v11 = v48;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v46 < 0)
        operator delete(__p[0]);
      switch(BYTE4(v52[1]))
      {
        case 2:
          v14 = v52[0];
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            v17 = v52[0];
            if (v52[0])
            {
              if (*((char *)v52[0] + 31) < 0)
                operator delete(*((void **)v52[0] + 1));
              v18 = v17;
              v19 = 0x1012C404EF22A49;
              goto LABEL_59;
            }
          }
          break;
        case 3:
          v29 = v52[0];
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v32 = v52[0];
            if (v52[0])
            {
              v33 = (void *)v52[0][1];
              if (v33)
              {
                v52[0][2] = v33;
                operator delete(v33);
              }
              v18 = v32;
              v19 = 0x1080C409938AC02;
              goto LABEL_59;
            }
          }
          break;
        case 4:
          v21 = v52[0];
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = v52[0];
            if (v52[0])
            {
              v51 = (void **)(v52[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v51);
              goto LABEL_52;
            }
          }
          break;
        case 5:
          v34 = v52[0];
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            v24 = v52[0];
            if (v52[0])
            {
              v51 = (void **)(v52[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v51);
LABEL_52:
              v18 = v24;
              v19 = 0x1020C405E66F15BLL;
              goto LABEL_59;
            }
          }
          break;
        case 8:
          v37 = v52[0];
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            v40 = v52[0];
            if (v52[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v52[0] + 2);
              v18 = v40;
              v28 = -235920773;
              goto LABEL_58;
            }
          }
          break;
        case 9:
          v25 = v52[0];
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27 && v52[0])
          {
            v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v52[0]);
            v28 = 2071181815;
LABEL_58:
            v19 = v28 | 0x1030C4000000000;
LABEL_59:
            MEMORY[0x219A19A08](v18, v19);
          }
          break;
        default:
          break;
      }
      memset(v52, 0, 13);
      size = (std::__shared_weak_count *)v50.__r_.__value_.__l.__size_;
      if (v50.__r_.__value_.__l.__size_)
      {
        v42 = (unint64_t *)(v50.__r_.__value_.__l.__size_ + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v20 = (_OWORD *)operator new();
      v20[1] = 0u;
      v20[2] = 0u;
      *v20 = 0u;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v20 + 8));
      *(_QWORD *)v20 = &capi_struct_type_info_tc_sarray_inst;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)&v50, (const turi::gl_sarray *)v49);
      turi::gl_sarray::operator=((uint64_t)v20 + 8, (uint64_t)&v50);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v50);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v49);
      return v20;
    }
    std::string::basic_string[abi:ne180100]<0>(&v50, "\"tc_flexible_type\" is null.");
    set_error(a4, &v50);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "\"tc_sarray\" is null.");
    set_error(a4, &v50);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EE1FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
  {
    if (a28 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EE1DE0);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *tc_binary_op_fs(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4)
{
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *size;
  unint64_t *v42;
  unint64_t v43;
  void *__p[2];
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _BYTE v49[40];
  std::string v50;
  void **v51;
  _QWORD *v52[3];

  v52[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if (a3)
    {
      turi::gl_sarray::get_proxy(a3 + 8, &v50);
      v8 = v50.__r_.__value_.__r.__words[0];
      memset(v52, 0, 13);
      if ((_QWORD **)(a1 + 8) != v52)
      {
        *(_QWORD **)((char *)v52 + 5) = *(_QWORD **)(a1 + 13);
        v52[0] = *(_QWORD **)(a1 + 8);
        BYTE4(v52[1]) = *(_BYTE *)(a1 + 20);
        if (BYTE4(v52[1]) <= 9u && ((1 << SBYTE4(v52[1])) & 0x33C) != 0)
        {
          v9 = v52[0];
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, a2);
      (*(void (**)(uint64_t *__return_ptr, std::string::size_type, _QWORD **, void **))(*(_QWORD *)v8 + 304))(&v47, v8, v52, __p);
      turi::gl_sarray::gl_sarray(v49, &v47);
      v11 = v48;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v46 < 0)
        operator delete(__p[0]);
      switch(BYTE4(v52[1]))
      {
        case 2:
          v14 = v52[0];
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            v17 = v52[0];
            if (v52[0])
            {
              if (*((char *)v52[0] + 31) < 0)
                operator delete(*((void **)v52[0] + 1));
              v18 = v17;
              v19 = 0x1012C404EF22A49;
              goto LABEL_59;
            }
          }
          break;
        case 3:
          v29 = v52[0];
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v32 = v52[0];
            if (v52[0])
            {
              v33 = (void *)v52[0][1];
              if (v33)
              {
                v52[0][2] = v33;
                operator delete(v33);
              }
              v18 = v32;
              v19 = 0x1080C409938AC02;
              goto LABEL_59;
            }
          }
          break;
        case 4:
          v21 = v52[0];
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = v52[0];
            if (v52[0])
            {
              v51 = (void **)(v52[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v51);
              goto LABEL_52;
            }
          }
          break;
        case 5:
          v34 = v52[0];
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            v24 = v52[0];
            if (v52[0])
            {
              v51 = (void **)(v52[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v51);
LABEL_52:
              v18 = v24;
              v19 = 0x1020C405E66F15BLL;
              goto LABEL_59;
            }
          }
          break;
        case 8:
          v37 = v52[0];
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            v40 = v52[0];
            if (v52[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v52[0] + 2);
              v18 = v40;
              v28 = -235920773;
              goto LABEL_58;
            }
          }
          break;
        case 9:
          v25 = v52[0];
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27 && v52[0])
          {
            v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v52[0]);
            v28 = 2071181815;
LABEL_58:
            v19 = v28 | 0x1030C4000000000;
LABEL_59:
            MEMORY[0x219A19A08](v18, v19);
          }
          break;
        default:
          break;
      }
      memset(v52, 0, 13);
      size = (std::__shared_weak_count *)v50.__r_.__value_.__l.__size_;
      if (v50.__r_.__value_.__l.__size_)
      {
        v42 = (unint64_t *)(v50.__r_.__value_.__l.__size_ + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v20 = (_OWORD *)operator new();
      v20[1] = 0u;
      v20[2] = 0u;
      *v20 = 0u;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v20 + 8));
      *(_QWORD *)v20 = &capi_struct_type_info_tc_sarray_inst;
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)&v50, (const turi::gl_sarray *)v49);
      turi::gl_sarray::operator=((uint64_t)v20 + 8, (uint64_t)&v50);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v50);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v49);
      return v20;
    }
    std::string::basic_string[abi:ne180100]<0>(&v50, "\"tc_sarray\" is null.");
    set_error(a4, &v50);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "\"tc_flexible_type\" is null.");
    set_error(a4, &v50);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  return 0;
}

void sub_217EE26E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
  {
    if (a28 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x217EE24C8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_binary_op_ff(uint64_t a1, const turi::flexible_type *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  char v11;
  std::string __p;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1 && a3)
  {
    turi::apply_binary_op_ff((turi *)(a1 + 8), a2, (const char *)(a3 + 8), &v13);
    result = operator new();
    v9 = v13;
    v10 = v14;
    v11 = v15;
    *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
    *(_QWORD *)(result + 8) = v9;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 16) = v10;
    *(_BYTE *)(result + 20) = v11;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flexible_type\" is null.");
    set_error(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void sub_217EE2AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x217EE2AA4);
  }
  _Unwind_Resume(exception_object);
}

void turi::apply_binary_op_ff(turi *this@<X0>, const turi::flexible_type *__s@<X1>, const char *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v9;
  __n128 v10;
  uint64_t v11;
  uint64_t *v12;
  _BOOL4 v13;
  uint64_t *v14;
  _BOOL4 v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  BOOL v31;
  _BOOL4 v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  BOOL v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  BOOL v65;
  _QWORD *v66;
  unint64_t v67;
  double v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  BOOL v74;
  _QWORD *v75;
  unint64_t v76;
  unsigned int v77;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unsigned int v86;
  _QWORD *v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unsigned int v91;
  _QWORD *v92;
  unint64_t v93;
  double v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  double *v102;
  double *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  unsigned int v139;
  double *v140;
  double *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  size_t v174;
  _QWORD *v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  size_t v180;
  _QWORD *v181;
  unint64_t v182;
  unsigned int v183;
  double *v184;
  double *v185;
  unint64_t v186;
  double *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  double v191;
  double v192;
  _QWORD *v193;
  unint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  unsigned int v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  BOOL v201;
  _QWORD *v202;
  unint64_t v203;
  unsigned int v204;
  double *v205;
  double *v206;
  unint64_t v207;
  double *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  double v213;
  _QWORD *v214;
  unint64_t v215;
  uint64_t v216;
  char **v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char **v221;
  char *v222;
  uint64_t v223;
  unsigned int v224;
  double v225;
  uint64_t v226;
  double v227;
  uint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  unint64_t v233;
  BOOL v234;
  BOOL v235;
  unsigned int v236;
  _QWORD *v237;
  unint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  unint64_t v248;
  int v249;
  const std::string::value_type *v250;
  std::string::size_type v251;
  uint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  _QWORD *v258;
  unint64_t v259;
  uint64_t v260;
  unsigned int *v261;
  unsigned int *v262;
  unsigned int v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  _QWORD *v272;
  unint64_t v273;
  _QWORD *v274;
  unint64_t v275;
  _QWORD *v276;
  unint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  _QWORD *v280;
  unint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  _QWORD *v284;
  unint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  unsigned int v288;
  unsigned int v289;
  uint64_t v290;
  _QWORD *v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  double v306;
  uint64_t *v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  double v312;
  unsigned int v313;
  BOOL v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  double *v318;
  double *v319;
  double *v320;
  uint64_t v321;
  uint64_t v322;
  double v323;
  double v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v328;
  int v329;
  unsigned int v330;
  uint64_t v331;
  _QWORD *v332;
  char *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t *v340;
  uint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  double v347;
  uint64_t *v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  double v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int v357;
  double *v358;
  double *v359;
  double *v360;
  uint64_t v361;
  uint64_t v362;
  double v363;
  double v364;
  double v365;
  uint64_t v366;
  unsigned int v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  char **v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  char **v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int *v382;
  unsigned int *v383;
  unsigned int v384;
  __int128 v385;
  __int128 v386;
  double v387;
  double v388;
  std::runtime_error *v389;
  std::string *v390;
  __int128 v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int *v396;
  unsigned int *v397;
  unsigned int v398;
  __int128 v399;
  __int128 v400;
  unint64_t *v401;
  _QWORD *v402;
  unint64_t v403;
  BOOL v404;
  _QWORD *v405;
  unint64_t v406;
  _QWORD *v407;
  unint64_t v408;
  unint64_t *v409;
  _QWORD *v410;
  uint64_t v411;
  unint64_t v412;
  BOOL v413;
  uint64_t v414;
  unint64_t *v415;
  _QWORD *v416;
  unint64_t v417;
  unint64_t v418;
  void *v419;
  uint64_t v420;
  double *v421;
  uint64_t v422;
  unint64_t v423;
  double *v424;
  double v425;
  unint64_t *v426;
  _QWORD *v427;
  unint64_t v428;
  BOOL v429;
  _QWORD *v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t *v433;
  _QWORD *v434;
  uint64_t v435;
  unint64_t v436;
  unint64_t v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t *v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t *v449;
  uint64_t *v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  double v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t *v461;
  _QWORD *v462;
  unint64_t v463;
  BOOL v464;
  _QWORD *v465;
  unint64_t v466;
  unsigned int v467;
  _QWORD *v468;
  uint64_t v469;
  unint64_t v470;
  _QWORD *v471;
  unint64_t v472;
  _QWORD *v473;
  unint64_t v474;
  unint64_t *v475;
  _QWORD *v476;
  unint64_t v477;
  BOOL v478;
  _QWORD *v479;
  unint64_t v480;
  _QWORD *v481;
  unint64_t v482;
  _QWORD *v483;
  unint64_t v484;
  _QWORD *v485;
  uint64_t v486;
  _QWORD *v487;
  unint64_t v488;
  _QWORD *v489;
  unint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  unint64_t v493;
  _QWORD *v494;
  unint64_t v495;
  void *v496;
  unint64_t *v497;
  _QWORD *v498;
  uint64_t v499;
  unint64_t v500;
  BOOL v501;
  _QWORD *v502;
  unint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t *v508;
  _QWORD *v509;
  unint64_t v510;
  unint64_t v511;
  void *v512;
  uint64_t v513;
  long double *v514;
  uint64_t v515;
  unint64_t v516;
  double *v517;
  uint64_t v518;
  long double v519;
  _QWORD *v520;
  unint64_t v521;
  unint64_t *v522;
  _QWORD *v523;
  uint64_t v524;
  unint64_t v525;
  unint64_t v526;
  _QWORD *v527;
  uint64_t *v528;
  uint64_t *v529;
  uint64_t *v530;
  double v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t *v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t *v542;
  _QWORD *v543;
  uint64_t v544;
  unint64_t v545;
  unint64_t v546;
  _QWORD *v547;
  uint64_t *v548;
  uint64_t *v549;
  uint64_t *v550;
  double v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t *v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  _QWORD *v563;
  uint64_t v564;
  unint64_t v565;
  BOOL v566;
  uint64_t v567;
  unint64_t *v568;
  _QWORD *v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  _QWORD *v573;
  uint64_t v574;
  uint64_t *v575;
  uint64_t *v576;
  uint64_t *v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t *v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t *v588;
  uint64_t v589;
  unint64_t v590;
  uint64_t *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t *v598;
  _QWORD *v599;
  unint64_t v600;
  unint64_t v601;
  void *v602;
  uint64_t v603;
  double *v604;
  uint64_t v605;
  unint64_t v606;
  double *v607;
  double v608;
  _QWORD *v609;
  unint64_t v610;
  _QWORD *v611;
  unint64_t v612;
  _QWORD *v613;
  unint64_t v614;
  BOOL v615;
  uint64_t v616;
  unint64_t *v617;
  _QWORD *v618;
  uint64_t v619;
  unint64_t v620;
  unint64_t v621;
  _QWORD *v622;
  uint64_t v623;
  uint64_t *v624;
  uint64_t *v625;
  uint64_t *v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t *v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t *v633;
  uint64_t *v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  double v640;
  uint64_t *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  _QWORD *v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unsigned int *v652;
  unsigned int v653;
  __int128 v654;
  __int128 v655;
  unint64_t v656;
  BOOL v657;
  _QWORD *v658;
  uint64_t v659;
  unint64_t v660;
  _QWORD *v661;
  unint64_t v662;
  unint64_t *v663;
  _QWORD *v664;
  unint64_t v665;
  BOOL v666;
  _QWORD *v667;
  unint64_t v668;
  _QWORD *v669;
  unint64_t v670;
  _QWORD *v671;
  unint64_t v672;
  _QWORD *v673;
  uint64_t v674;
  unint64_t v675;
  double v676;
  _QWORD *v677;
  uint64_t v678;
  unint64_t v679;
  _QWORD *v680;
  unint64_t v681;
  _QWORD *v682;
  unint64_t v683;
  _QWORD *v684;
  uint64_t v685;
  _QWORD *v686;
  unint64_t v687;
  _QWORD *v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unsigned int *v693;
  unsigned int v694;
  __int128 v695;
  __int128 v696;
  unint64_t v697;
  _QWORD *v698;
  uint64_t v699;
  unint64_t v700;
  unsigned int v701;
  _QWORD *v702;
  unint64_t v703;
  _QWORD *v704;
  uint64_t v705;
  unint64_t v706;
  _QWORD *v707;
  unint64_t v708;
  void *v709;
  unint64_t *v710;
  _QWORD *v711;
  unint64_t v712;
  BOOL v713;
  _QWORD *v714;
  unint64_t v715;
  _QWORD *v716;
  uint64_t v717;
  unint64_t v718;
  _QWORD *v719;
  unint64_t v720;
  _QWORD *v721;
  unint64_t v722;
  _QWORD *v723;
  unint64_t v724;
  _QWORD *v725;
  unint64_t v726;
  _QWORD *v727;
  uint64_t v728;
  unint64_t *v729;
  _QWORD *v730;
  uint64_t v731;
  unint64_t v732;
  unint64_t v733;
  _QWORD *v734;
  uint64_t *v735;
  uint64_t *v736;
  uint64_t *v737;
  double v738;
  uint64_t v739;
  uint64_t v740;
  unint64_t v741;
  uint64_t *v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t *v749;
  uint64_t v750;
  uint64_t v751;
  unint64_t *v752;
  _QWORD *v753;
  uint64_t v754;
  unint64_t v755;
  unint64_t v756;
  _QWORD *v757;
  uint64_t *v758;
  uint64_t *v759;
  uint64_t *v760;
  long double v761;
  uint64_t v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t *v765;
  uint64_t v766;
  unint64_t v767;
  uint64_t *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t *v772;
  uint64_t v773;
  uint64_t v774;
  unint64_t *v775;
  _QWORD *v776;
  unint64_t v777;
  BOOL v778;
  _QWORD *v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unsigned int *v784;
  unsigned int v785;
  __int128 v786;
  __int128 v787;
  unint64_t v788;
  _QWORD *v789;
  uint64_t v790;
  unint64_t v791;
  _QWORD *v792;
  unint64_t v793;
  void *v794;
  double v795;
  double v796;
  _QWORD *v797;
  unint64_t v798;
  _QWORD *v799;
  uint64_t v800;
  unint64_t v801;
  _QWORD *v802;
  unint64_t v803;
  unint64_t *v804;
  _QWORD *v805;
  uint64_t v806;
  unint64_t v807;
  unint64_t v808;
  _QWORD *v809;
  uint64_t *v810;
  uint64_t *v811;
  uint64_t *v812;
  double v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t *v817;
  uint64_t v818;
  unint64_t v819;
  uint64_t *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t *v824;
  _QWORD *v825;
  uint64_t v826;
  unint64_t v827;
  unint64_t v828;
  _QWORD *v829;
  uint64_t *v830;
  uint64_t *v831;
  uint64_t *v832;
  double v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t *v837;
  uint64_t v838;
  unint64_t v839;
  uint64_t *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  _QWORD *v844;
  unint64_t v845;
  double *v846;
  double *v847;
  unint64_t v848;
  unint64_t v849;
  uint64_t v850;
  uint64_t v851;
  _QWORD *v852;
  unint64_t v853;
  unint64_t *v854;
  _QWORD *v855;
  unint64_t v856;
  BOOL v857;
  _QWORD *v858;
  unint64_t v859;
  _QWORD *v860;
  unint64_t v861;
  BOOL v862;
  unint64_t *v863;
  _QWORD *v864;
  unint64_t v865;
  unint64_t v866;
  void *v867;
  double *v868;
  uint64_t v869;
  unint64_t v870;
  double v871;
  unint64_t *v872;
  _QWORD *v873;
  unint64_t v874;
  unint64_t v875;
  void *v876;
  double *v877;
  uint64_t v878;
  double v879;
  unint64_t v880;
  double v881;
  double v882;
  _QWORD *v883;
  unint64_t v884;
  _QWORD *v885;
  unint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  unsigned int *v890;
  unsigned int v891;
  __int128 v892;
  __int128 v893;
  unint64_t v894;
  _QWORD *v895;
  unint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unsigned int *v901;
  unsigned int v902;
  __int128 v903;
  __int128 v904;
  unint64_t v905;
  BOOL v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unsigned int *v910;
  unsigned int v911;
  __int128 v912;
  __int128 v913;
  unint64_t v914;
  _QWORD *v915;
  unint64_t v916;
  _QWORD *v917;
  unint64_t v918;
  _QWORD *v919;
  unint64_t v920;
  _QWORD *v921;
  uint64_t v922;
  unint64_t v923;
  _QWORD *v924;
  unint64_t v925;
  _QWORD *v926;
  unint64_t v927;
  _QWORD *v928;
  unint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  unsigned int *v933;
  unsigned int v934;
  __int128 v935;
  __int128 v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  unsigned int *v941;
  unsigned int v942;
  __int128 v943;
  __int128 v944;
  unint64_t v945;
  _QWORD *v946;
  unint64_t v947;
  BOOL v948;
  _QWORD *v949;
  unint64_t v950;
  _QWORD *v951;
  unint64_t v952;
  _QWORD *v953;
  uint64_t v954;
  unint64_t v955;
  long double v956;
  double v957;
  double v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  unsigned int *v963;
  unsigned int v964;
  __int128 v965;
  __int128 v966;
  unint64_t v967;
  BOOL v968;
  _QWORD *v969;
  unint64_t v970;
  _QWORD *v971;
  unint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  unsigned int *v976;
  unsigned int v977;
  __int128 v978;
  __int128 v979;
  unint64_t v980;
  _QWORD *v981;
  uint64_t v982;
  unint64_t v983;
  unsigned int v984;
  _QWORD *v985;
  uint64_t v986;
  unint64_t v987;
  _QWORD *v988;
  unint64_t v989;
  _QWORD *v990;
  unint64_t v991;
  unint64_t *v992;
  _QWORD *v993;
  uint64_t v994;
  unint64_t v995;
  BOOL v996;
  _QWORD *v997;
  unint64_t v998;
  uint64_t v999;
  _QWORD *v1000;
  unint64_t v1001;
  _QWORD *v1002;
  uint64_t v1003;
  unint64_t v1004;
  double v1005;
  _QWORD *v1006;
  unint64_t v1007;
  uint64_t v1008;
  unint64_t *v1009;
  _QWORD *v1010;
  unint64_t v1011;
  unint64_t v1012;
  void *v1013;
  uint64_t v1014;
  double *v1015;
  uint64_t v1016;
  unint64_t v1017;
  double *v1018;
  double v1019;
  _QWORD *v1020;
  unint64_t v1021;
  _QWORD *v1022;
  unint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  unsigned int *v1027;
  unsigned int v1028;
  __int128 v1029;
  __int128 v1030;
  unint64_t v1031;
  _QWORD *v1032;
  uint64_t v1033;
  unint64_t v1034;
  unsigned int v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  unsigned int *v1039;
  unsigned int v1040;
  __int128 v1041;
  __int128 v1042;
  unint64_t v1043;
  _QWORD *v1044;
  unint64_t v1045;
  _QWORD *v1046;
  unint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  unsigned int *v1051;
  unsigned int v1052;
  __int128 v1053;
  __int128 v1054;
  unint64_t v1055;
  uint64_t v1056;
  _QWORD *v1057;
  unint64_t v1058;
  double v1059;
  double v1060;
  uint64_t v1061;
  unint64_t *v1062;
  _QWORD *v1063;
  uint64_t v1064;
  unint64_t v1065;
  unint64_t v1066;
  _QWORD *v1067;
  uint64_t v1068;
  uint64_t *v1069;
  uint64_t *v1070;
  uint64_t *v1071;
  uint64_t v1072;
  uint64_t v1073;
  unint64_t v1074;
  uint64_t *v1075;
  uint64_t v1076;
  unint64_t v1077;
  uint64_t *v1078;
  uint64_t *v1079;
  unint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  double v1085;
  uint64_t *v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  _QWORD *v1090;
  unint64_t v1091;
  unint64_t *v1092;
  _QWORD *v1093;
  uint64_t v1094;
  unint64_t v1095;
  BOOL v1096;
  uint64_t v1097;
  unint64_t *v1098;
  _QWORD *v1099;
  unint64_t v1100;
  unint64_t v1101;
  void *v1102;
  uint64_t v1103;
  double *v1104;
  uint64_t v1105;
  unint64_t v1106;
  double *v1107;
  double v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unsigned int *v1112;
  unsigned int v1113;
  __int128 v1114;
  __int128 v1115;
  unint64_t v1116;
  _QWORD *v1117;
  unint64_t v1118;
  _QWORD *v1119;
  unint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  unsigned int *v1124;
  unsigned int v1125;
  __int128 v1126;
  __int128 v1127;
  unint64_t v1128;
  _QWORD *v1129;
  unint64_t v1130;
  uint64_t v1131;
  int v1132;
  double v1133;
  double v1134;
  uint64_t v1135;
  int v1136;
  _QWORD *v1137;
  unint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  unsigned int *v1142;
  unsigned int v1143;
  __int128 v1144;
  __int128 v1145;
  unint64_t v1146;
  unint64_t *v1147;
  _QWORD *v1148;
  unint64_t v1149;
  unint64_t v1150;
  void *v1151;
  uint64_t v1152;
  long double *v1153;
  long double *v1154;
  double v1155;
  uint64_t v1156;
  unint64_t *v1157;
  _QWORD *v1158;
  unint64_t v1159;
  unint64_t v1160;
  void *v1161;
  uint64_t v1162;
  long double *v1163;
  long double *v1164;
  long double v1165;
  uint64_t v1166;
  _QWORD *v1167;
  unint64_t v1168;
  _QWORD *v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  unsigned int *v1174;
  unsigned int v1175;
  __int128 v1176;
  __int128 v1177;
  unint64_t v1178;
  _QWORD *v1179;
  uint64_t v1180;
  unint64_t v1181;
  uint64_t v1182;
  unint64_t *v1183;
  _QWORD *v1184;
  uint64_t v1185;
  unint64_t v1186;
  unint64_t v1187;
  _QWORD *v1188;
  uint64_t v1189;
  uint64_t *v1190;
  uint64_t *v1191;
  uint64_t *v1192;
  uint64_t v1193;
  uint64_t v1194;
  unint64_t v1195;
  uint64_t *v1196;
  uint64_t v1197;
  unint64_t v1198;
  uint64_t *v1199;
  uint64_t *v1200;
  unint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  double v1206;
  uint64_t *v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unsigned int *v1214;
  unsigned int v1215;
  __int128 v1216;
  __int128 v1217;
  unint64_t v1218;
  _QWORD *v1219;
  unint64_t v1220;
  _QWORD *v1221;
  unint64_t v1222;
  _QWORD *v1223;
  unint64_t v1224;
  _QWORD *v1225;
  unint64_t v1226;
  _QWORD *v1227;
  unint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  unsigned int *v1232;
  unsigned int v1233;
  __int128 v1234;
  __int128 v1235;
  unint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  unsigned int *v1240;
  unsigned int v1241;
  __int128 v1242;
  __int128 v1243;
  unint64_t v1244;
  double *v1245;
  double *v1246;
  unint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  unint64_t *v1251;
  _QWORD *v1252;
  unint64_t v1253;
  unint64_t v1254;
  void *v1255;
  double *v1256;
  uint64_t v1257;
  unint64_t v1258;
  double v1259;
  unint64_t *v1260;
  _QWORD *v1261;
  unint64_t v1262;
  unint64_t v1263;
  void *v1264;
  double *v1265;
  uint64_t v1266;
  double v1267;
  unint64_t v1268;
  unint64_t *v1269;
  _QWORD *v1270;
  unint64_t v1271;
  BOOL v1272;
  _QWORD *v1273;
  unint64_t v1274;
  _QWORD *v1275;
  unint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  unsigned int *v1280;
  unsigned int v1281;
  __int128 v1282;
  __int128 v1283;
  unint64_t v1284;
  _QWORD *v1285;
  unint64_t v1286;
  unint64_t *v1287;
  _QWORD *v1288;
  unint64_t v1289;
  unint64_t v1290;
  void *v1291;
  double *v1292;
  uint64_t v1293;
  unint64_t v1294;
  double v1295;
  unint64_t *v1296;
  _QWORD *v1297;
  unint64_t v1298;
  unint64_t v1299;
  void *v1300;
  double *v1301;
  uint64_t v1302;
  double v1303;
  unint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  unsigned int *v1308;
  unsigned int v1309;
  __int128 v1310;
  __int128 v1311;
  unint64_t v1312;
  _QWORD *v1313;
  unint64_t v1314;
  _QWORD *v1315;
  unint64_t v1316;
  _QWORD *v1317;
  unint64_t v1318;
  _QWORD *v1319;
  uint64_t v1320;
  unint64_t v1321;
  _QWORD *v1322;
  unint64_t v1323;
  _QWORD *v1324;
  uint64_t v1325;
  unint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  unsigned int *v1330;
  unsigned int v1331;
  __int128 v1332;
  __int128 v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  unsigned int *v1338;
  unsigned int v1339;
  __int128 v1340;
  __int128 v1341;
  unint64_t v1342;
  _QWORD *v1343;
  unint64_t v1344;
  void *v1345;
  _QWORD *v1346;
  uint64_t v1347;
  _QWORD *v1348;
  unint64_t v1349;
  _QWORD *v1350;
  uint64_t v1351;
  unint64_t v1352;
  unint64_t *v1353;
  _QWORD *v1354;
  unint64_t v1355;
  BOOL v1356;
  _QWORD *v1357;
  unint64_t v1358;
  uint64_t v1359;
  double v1360;
  BOOL v1361;
  _QWORD *v1362;
  unint64_t v1363;
  unint64_t *v1364;
  _QWORD *v1365;
  uint64_t v1366;
  unint64_t v1367;
  unint64_t v1368;
  _QWORD *v1369;
  uint64_t *v1370;
  uint64_t *v1371;
  uint64_t *v1372;
  double v1373;
  uint64_t v1374;
  uint64_t v1375;
  unint64_t v1376;
  uint64_t *v1377;
  uint64_t v1378;
  unint64_t v1379;
  uint64_t *v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  unint64_t *v1384;
  _QWORD *v1385;
  uint64_t v1386;
  unint64_t v1387;
  unint64_t v1388;
  _QWORD *v1389;
  uint64_t *v1390;
  uint64_t *v1391;
  uint64_t *v1392;
  double v1393;
  uint64_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  uint64_t *v1397;
  uint64_t v1398;
  unint64_t v1399;
  uint64_t *v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  unint64_t *v1404;
  _QWORD *v1405;
  unint64_t v1406;
  unint64_t v1407;
  void *v1408;
  double *v1409;
  uint64_t v1410;
  unint64_t v1411;
  double v1412;
  unint64_t *v1413;
  _QWORD *v1414;
  unint64_t v1415;
  unint64_t v1416;
  void *v1417;
  double *v1418;
  uint64_t v1419;
  double v1420;
  unint64_t v1421;
  _QWORD *v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  unsigned int *v1427;
  unsigned int v1428;
  __int128 v1429;
  __int128 v1430;
  unint64_t v1431;
  _QWORD *v1432;
  uint64_t v1433;
  unint64_t v1434;
  _QWORD *v1435;
  unint64_t v1436;
  _QWORD *v1437;
  unint64_t v1438;
  void *v1439;
  _QWORD *v1440;
  uint64_t v1441;
  _QWORD *v1442;
  unint64_t v1443;
  _QWORD *v1444;
  unint64_t v1445;
  _QWORD *v1446;
  uint64_t v1447;
  unint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  unsigned int *v1452;
  unsigned int v1453;
  __int128 v1454;
  __int128 v1455;
  unint64_t v1456;
  _QWORD *v1457;
  unint64_t v1458;
  _QWORD *v1459;
  unint64_t v1460;
  double v1461;
  unint64_t *v1462;
  _QWORD *v1463;
  uint64_t v1464;
  unint64_t v1465;
  unint64_t v1466;
  _QWORD *v1467;
  uint64_t *v1468;
  uint64_t *v1469;
  uint64_t *v1470;
  double v1471;
  uint64_t v1472;
  uint64_t v1473;
  unint64_t v1474;
  uint64_t *v1475;
  uint64_t v1476;
  unint64_t v1477;
  uint64_t *v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  unint64_t *v1482;
  _QWORD *v1483;
  uint64_t v1484;
  unint64_t v1485;
  unint64_t v1486;
  _QWORD *v1487;
  uint64_t *v1488;
  uint64_t *v1489;
  uint64_t *v1490;
  double v1491;
  uint64_t v1492;
  uint64_t v1493;
  unint64_t v1494;
  uint64_t *v1495;
  uint64_t v1496;
  unint64_t v1497;
  uint64_t *v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  unsigned int *v1505;
  unsigned int v1506;
  __int128 v1507;
  __int128 v1508;
  unint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  unsigned int *v1513;
  unsigned int v1514;
  __int128 v1515;
  __int128 v1516;
  unint64_t v1517;
  _QWORD *v1518;
  unint64_t v1519;
  BOOL v1520;
  _QWORD *v1521;
  unint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  unsigned int *v1527;
  unsigned int v1528;
  __int128 v1529;
  __int128 v1530;
  unint64_t v1531;
  BOOL v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  unsigned int *v1536;
  unsigned int v1537;
  __int128 v1538;
  __int128 v1539;
  unint64_t v1540;
  _QWORD *v1541;
  unint64_t v1542;
  _QWORD *v1543;
  unint64_t v1544;
  _QWORD *v1545;
  uint64_t v1546;
  unint64_t v1547;
  _QWORD *v1548;
  unint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  unsigned int *v1553;
  unsigned int v1554;
  __int128 v1555;
  __int128 v1556;
  unint64_t v1557;
  _QWORD *v1558;
  unint64_t v1559;
  _QWORD *v1560;
  unint64_t v1561;
  _QWORD *v1562;
  uint64_t v1563;
  unint64_t v1564;
  _QWORD *v1565;
  unint64_t v1566;
  _QWORD *v1567;
  unint64_t v1568;
  _QWORD *v1569;
  unint64_t v1570;
  BOOL v1571;
  uint64_t v1572;
  uint64_t v1573;
  double v1574;
  uint64_t v1575;
  unint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  unsigned int *v1581;
  unsigned int v1582;
  __int128 v1583;
  __int128 v1584;
  unint64_t v1585;
  _QWORD *v1586;
  uint64_t v1587;
  unint64_t v1588;
  unsigned int v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  unsigned int *v1594;
  unsigned int v1595;
  __int128 v1596;
  __int128 v1597;
  unint64_t v1598;
  BOOL v1599;
  _QWORD *v1600;
  uint64_t v1601;
  unint64_t v1602;
  _QWORD *v1603;
  unint64_t v1604;
  _QWORD *v1605;
  unint64_t v1606;
  _QWORD *v1607;
  unint64_t v1608;
  _QWORD *v1609;
  unint64_t v1610;
  _QWORD *v1611;
  uint64_t v1612;
  unint64_t v1613;
  _QWORD *v1614;
  unint64_t v1615;
  _QWORD *v1616;
  unint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  unsigned int *v1621;
  unsigned int v1622;
  __int128 v1623;
  __int128 v1624;
  unint64_t v1625;
  double v1626;
  uint64_t v1627;
  unint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  unsigned int *v1632;
  unsigned int v1633;
  __int128 v1634;
  __int128 v1635;
  unint64_t v1636;
  _QWORD *v1637;
  uint64_t v1638;
  unint64_t v1639;
  unsigned int v1640;
  _QWORD *v1641;
  unint64_t v1642;
  uint64_t v1643;
  _QWORD *v1644;
  unint64_t v1645;
  _QWORD *v1646;
  unint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  unsigned int *v1651;
  unsigned int v1652;
  __int128 v1653;
  __int128 v1654;
  unint64_t v1655;
  _QWORD *v1656;
  unint64_t v1657;
  _QWORD *v1658;
  unint64_t v1659;
  _QWORD *v1660;
  unint64_t v1661;
  _QWORD *v1662;
  unint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  unsigned int *v1667;
  unsigned int v1668;
  __int128 v1669;
  __int128 v1670;
  unint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  unsigned int *v1675;
  unsigned int v1676;
  __int128 v1677;
  __int128 v1678;
  unint64_t v1679;
  _QWORD *v1680;
  unint64_t v1681;
  _QWORD *v1682;
  unint64_t v1683;
  _QWORD *v1684;
  unint64_t v1685;
  _QWORD *v1686;
  unint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  unsigned int *v1691;
  unsigned int v1692;
  __int128 v1693;
  __int128 v1694;
  unint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  unsigned int *v1699;
  unsigned int v1700;
  __int128 v1701;
  __int128 v1702;
  unint64_t v1703;
  _QWORD *v1704;
  unint64_t v1705;
  _QWORD *v1706;
  unint64_t v1707;
  _QWORD *v1708;
  unint64_t v1709;
  _QWORD *v1710;
  unint64_t v1711;
  _QWORD *v1712;
  unint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  unsigned int *v1717;
  unsigned int v1718;
  __int128 v1719;
  __int128 v1720;
  unint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  unsigned int *v1725;
  unsigned int v1726;
  __int128 v1727;
  __int128 v1728;
  unint64_t v1729;
  _QWORD *v1730;
  unint64_t v1731;
  _QWORD *v1732;
  unint64_t v1733;
  _QWORD *v1734;
  unint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  unsigned int *v1739;
  unsigned int v1740;
  __int128 v1741;
  __int128 v1742;
  unint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  unsigned int *v1747;
  unsigned int v1748;
  __int128 v1749;
  __int128 v1750;
  unint64_t v1751;
  _QWORD *v1752;
  unint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  unsigned int *v1757;
  unsigned int v1758;
  __int128 v1759;
  __int128 v1760;
  unint64_t v1761;
  _QWORD *v1762;
  unint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  unsigned int *v1767;
  unsigned int v1768;
  __int128 v1769;
  __int128 v1770;
  unint64_t v1771;
  _QWORD *v1772;
  unint64_t v1773;
  _QWORD *v1774;
  unint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  unsigned int *v1779;
  unsigned int v1780;
  __int128 v1781;
  __int128 v1782;
  unint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  unsigned int *v1787;
  unsigned int v1788;
  __int128 v1789;
  __int128 v1790;
  unint64_t v1791;
  _QWORD *v1792;
  unint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  unsigned int *v1797;
  unsigned int v1798;
  __int128 v1799;
  __int128 v1800;
  unint64_t v1801;
  _QWORD *v1802;
  unint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  unsigned int *v1807;
  unsigned int v1808;
  __int128 v1809;
  __int128 v1810;
  unint64_t v1811;
  std::runtime_error *v1812;
  std::string *v1813;
  __int128 v1814;
  uint64_t v1815;
  unsigned __int8 *v1816;
  unsigned __int8 *v1817;
  size_t v1818;
  int v1819;
  int v1820;
  int v1821;
  int v1822;
  char v1823;
  uint64_t v1824;
  _QWORD *v1825;
  _QWORD *v1826;
  size_t v1827;
  int v1828;
  int v1829;
  int v1830;
  int v1831;
  char v1832;
  uint64_t v1833;
  size_t v1834;
  int v1835;
  int v1836;
  int v1837;
  int v1838;
  char v1839;
  uint64_t v1840;
  size_t v1841;
  int v1842;
  int v1843;
  int v1844;
  int v1845;
  char v1846;
  uint64_t v1847;
  _QWORD *v1848;
  size_t v1849;
  _QWORD *v1850;
  _QWORD *v1851;
  uint64_t v1852;
  int v1853;
  uint64_t v1854;
  uint64_t v1855;
  _QWORD *v1856;
  uint64_t *v1857;
  uint64_t *v1858;
  std::logic_error *exception;
  std::runtime_error *v1860;
  std::string *v1861;
  __int128 v1862;
  std::runtime_error *v1863;
  std::string *v1864;
  __int128 v1865;
  void **v1866;
  unsigned int *v1867;
  __int128 v1868;
  __int128 v1869;
  __int128 v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  void *v1877;
  void *v1878;
  uint64_t v1879;
  std::string v1880;
  std::string __str;
  size_t __idx;
  void *__p[2];
  __int128 v1884;
  __int128 v1885;
  __int128 v1886;
  uint64_t v1887[3];
  int v1888;
  uint64_t v1889[3];
  int v1890;
  uint64_t v1891[3];
  int v1892;
  uint64_t v1893[3];
  int v1894;
  uint64_t v1895[3];
  int v1896;
  uint64_t v1897[3];
  int v1898;
  uint64_t v1899[3];
  int v1900;
  uint64_t v1901[3];
  int v1902;
  uint64_t v1903[3];
  int v1904;
  uint64_t v1905[3];
  int v1906;
  uint64_t v1907[3];
  int v1908;
  uint64_t v1909;

  v1909 = *MEMORY[0x24BDAC8D0];
  if ((v9 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "==");
    DWORD2(v1884) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v1885, "!=");
    DWORD2(v1886) = 1;
    std::string::basic_string[abi:ne180100]<0>(v1887, "<");
    v1888 = 2;
    std::string::basic_string[abi:ne180100]<0>(v1889, "<=");
    v1890 = 3;
    std::string::basic_string[abi:ne180100]<0>(v1891, ">");
    v1892 = 4;
    std::string::basic_string[abi:ne180100]<0>(v1893, ">=");
    v1894 = 5;
    std::string::basic_string[abi:ne180100]<0>(v1895, "&&");
    v1896 = 7;
    std::string::basic_string[abi:ne180100]<0>(v1897, "||");
    v1898 = 9;
    std::string::basic_string[abi:ne180100]<0>(v1899, "+");
    v1900 = 10;
    std::string::basic_string[abi:ne180100]<0>(v1901, "-");
    v1902 = 11;
    std::string::basic_string[abi:ne180100]<0>(v1903, "*");
    v1904 = 12;
    std::string::basic_string[abi:ne180100]<0>(v1905, "/");
    v1906 = 13;
    std::string::basic_string[abi:ne180100]<0>(v1907, "%");
    v1908 = 14;
    std::map<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op,std::less<std::string>,std::allocator<std::pair<std::string const,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::map[abi:ne180100]((uint64_t *)__p, 13);
    v1847 = 52;
    do
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[v1847 + 2]) < 0)
        operator delete(*(void **)((char *)&__str.__r_.__value_.__l.__data_ + v1847 * 8));
      v1847 -= 4;
    }
    while (v1847 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op,std::less<std::string>,std::allocator<std::pair<std::string const,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::~map[abi:ne180100], &turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map, &dword_217E69000);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)__s);
  v11 = qword_254FEDD98;
  if (!qword_254FEDD98)
    goto LABEL_9;
  v12 = &qword_254FEDD98;
  do
  {
    v13 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDDA0, (const void **)(v11 + 32), (const void **)__p);
    v14 = (uint64_t *)(v11 + 8);
    if (!v13)
    {
      v14 = (uint64_t *)v11;
      v12 = (uint64_t *)v11;
    }
    v11 = *v14;
  }
  while (*v14);
  if (v12 == &qword_254FEDD98
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDDA0, (const void **)__p, (const void **)v12 + 4))
  {
LABEL_9:
    v12 = &qword_254FEDD98;
  }
  if (SBYTE7(v1884) < 0)
    operator delete(__p[0]);
  if ((uint64_t *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map == v12)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    v1848 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Binary operator ", 16);
    v1849 = strlen((const char *)__s);
    v1850 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1848, (uint64_t)__s, v1849);
    v1851 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1850, (uint64_t)" not recognized. ", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1851, (uint64_t)"Available operators are ", 24);
    v1852 = turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map;
    if ((uint64_t *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map != &qword_254FEDD98)
    {
      do
      {
        v1853 = *(char *)(v1852 + 55);
        if (v1853 >= 0)
          v1854 = v1852 + 32;
        else
          v1854 = *(_QWORD *)(v1852 + 32);
        if (v1853 >= 0)
          v1855 = *(unsigned __int8 *)(v1852 + 55);
        else
          v1855 = *(_QWORD *)(v1852 + 40);
        v1856 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v1854, v1855);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1856, (uint64_t)" ", 1);
        v1857 = *(uint64_t **)(v1852 + 8);
        if (v1857)
        {
          do
          {
            v1858 = v1857;
            v1857 = (uint64_t *)*v1857;
          }
          while (v1857);
        }
        else
        {
          do
          {
            v1858 = *(uint64_t **)(v1852 + 16);
            v33 = *v1858 == v1852;
            v1852 = (uint64_t)v1858;
          }
          while (!v33);
        }
        v1852 = (uint64_t)v1858;
      }
      while (v1858 != &qword_254FEDD98);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, (const std::string *)&v1866);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  switch(*((_DWORD *)v12 + 14))
  {
    case 0:
      switch(a3[12])
      {
        case 0:
          v15 = 0;
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              goto LABEL_457;
            case 1:
              goto LABEL_739;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_690;
            case 6:
              goto LABEL_732;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          v15 = 0;
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              goto LABEL_686;
            case 1:
              goto LABEL_741;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_690;
            case 6:
              goto LABEL_735;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v15 = 0;
          v171 = *((unsigned __int8 *)this + 12);
          if (v171 - 3 < 7 || v171 < 2)
            goto LABEL_690;
          if (v171 != 2)
            turi::apply_binary_op_ff();
          v172 = *(_QWORD *)a3;
          v173 = *(_QWORD *)this;
          if (*(char *)(*(_QWORD *)this + 31) < 0)
            v174 = *(_QWORD *)(v173 + 16);
          else
            v174 = *(unsigned __int8 *)(*(_QWORD *)this + 31);
          if (*(char *)(v172 + 31) < 0)
            v1815 = *(_QWORD *)(v172 + 16);
          else
            v1815 = *(unsigned __int8 *)(v172 + 31);
          if (v174 != v1815)
            goto LABEL_689;
          v1816 = (unsigned __int8 *)(v173 + 8);
          if ((*(_BYTE *)(*(_QWORD *)this + 31) & 0x80) != 0)
            v1816 = *(unsigned __int8 **)v1816;
          v1817 = (unsigned __int8 *)(v172 + 8);
          if ((*(_BYTE *)(v172 + 31) & 0x80) != 0)
            v1817 = *(unsigned __int8 **)v1817;
          if ((*(_BYTE *)(*(_QWORD *)this + 31) & 0x80) != 0)
            goto LABEL_2610;
          if (!v174)
            goto LABEL_2201;
          v1818 = v174 - 1;
          do
          {
            v1820 = *v1816++;
            v1819 = v1820;
            v1822 = *v1817++;
            v1821 = v1822;
            v314 = v1818-- != 0;
            v1823 = v314;
            v15 = v1819 == v1821;
          }
          while (v1819 == v1821 && (v1823 & 1) != 0);
          goto LABEL_690;
        case 3:
          v183 = *((unsigned __int8 *)this + 12);
          if (v183 > 9)
            turi::apply_binary_op_ff();
          if (v183 != 3)
            goto LABEL_689;
          v184 = *(double **)(*(_QWORD *)this + 8);
          v185 = *(double **)(*(_QWORD *)this + 16);
          v186 = v185 - v184;
          v187 = *(double **)(*(_QWORD *)a3 + 8);
          if (v186 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v187) >> 3)
            goto LABEL_689;
          if (v185 == v184)
            goto LABEL_2201;
          if (v186 <= 1)
            v188 = 1;
          else
            v188 = v185 - v184;
          if (*v184 != *v187)
            goto LABEL_689;
          v189 = 1;
          do
          {
            v190 = v189;
            if (v188 == v189)
              break;
            v191 = v184[v189];
            v192 = v187[v189++];
          }
          while (v191 == v192);
          goto LABEL_679;
        case 4:
          v91 = *((unsigned __int8 *)this + 12);
          if (v91 > 9)
            turi::apply_binary_op_ff();
          if (v91 == 4)
            goto LABEL_636;
          goto LABEL_689;
        case 5:
          v236 = *((unsigned __int8 *)this + 12);
          if (v236 > 9)
            turi::apply_binary_op_ff();
          if (v236 == 5)
            goto LABEL_2525;
          goto LABEL_689;
        case 6:
          v15 = 0;
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              goto LABEL_692;
            case 1:
              goto LABEL_742;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_690;
            case 6:
              goto LABEL_736;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          v197 = *((unsigned __int8 *)this + 12);
          if (v197 >= 0xA)
            turi::apply_binary_op_ff();
          goto LABEL_681;
        case 8:
          v15 = 0;
          v241 = *((unsigned __int8 *)this + 12);
          if (v241 < 8 || v241 == 9)
            goto LABEL_690;
          if (v241 != 8)
            turi::apply_binary_op_ff();
          goto LABEL_698;
        case 9:
          v110 = *((unsigned __int8 *)this + 12);
          if (v110 < 9)
            goto LABEL_689;
          if (v110 != 9)
            turi::apply_binary_op_ff();
          v111 = *(_QWORD *)a3;
          v112 = *(_QWORD **)this;
          if (*(_QWORD **)a3 == v112)
            goto LABEL_2201;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v112 + 1), v111 + 8))
            goto LABEL_689;
          v114 = (char *)v112[3];
          v113 = (char *)v112[4];
          v115 = v113 - v114;
          if (v113 == v114)
            goto LABEL_2201;
          if (!v112[1])
            goto LABEL_2201;
          v116 = 1;
          do
          {
            v117 = *(_QWORD *)v114;
            v114 += 8;
            v116 *= v117;
          }
          while (v114 != v113);
          if (!v116)
            goto LABEL_2201;
          v1866 = 0;
          std::vector<unsigned long>::vector(__p, v115 >> 3, &v1866);
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (1)
      {
        v118 = __p[0];
        if (__p[1] == __p[0])
        {
          v127 = 0;
          v128 = *(double *)(*(_QWORD *)v112[1] + 8 * v112[9]);
        }
        else
        {
          v119 = 0;
          v120 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v121 = (uint64_t *)v112[6];
          if (v120 <= 1)
            v120 = 1;
          v122 = (uint64_t *)__p[0];
          v123 = v120;
          do
          {
            v125 = *v122++;
            v124 = v125;
            v126 = *v121++;
            v119 += v126 * v124;
            --v123;
          }
          while (v123);
          v127 = 0;
          v128 = *(double *)(*(_QWORD *)v112[1] + 8 * (v112[9] + v119));
          v129 = *(uint64_t **)(v111 + 48);
          v130 = (uint64_t *)__p[0];
          do
          {
            v132 = *v130++;
            v131 = v132;
            v133 = *v129++;
            v127 += v133 * v131;
            --v120;
          }
          while (v120);
        }
        v134 = *(double *)(**(_QWORD **)(v111 + 8) + 8 * (*(_QWORD *)(v111 + 72) + v127));
        v15 = v128 == v134;
        if (v128 != v134)
          goto LABEL_660;
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v112 + 1), (uint64_t *)__p))goto LABEL_659;
      }
    case 1:
      switch(a3[12])
      {
        case 0:
          v32 = 0;
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              v33 = *(_QWORD *)this == *(_QWORD *)a3;
              goto LABEL_431;
            case 1:
              v227 = *(double *)this;
              v228 = *(_QWORD *)a3;
              goto LABEL_2203;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_480;
            case 6:
              v33 = *(_QWORD *)a3 == (uint64_t)(*(_QWORD *)this << 8) >> 8 && *((_DWORD *)this + 2) == 0;
              goto LABEL_431;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          v32 = 0;
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              v227 = *(double *)a3;
              v228 = *(_QWORD *)this;
LABEL_2203:
              v33 = v227 == (double)v228;
              goto LABEL_431;
            case 1:
              v32 = *(double *)this == *(double *)a3;
              goto LABEL_480;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_480;
            case 6:
              v1059 = *(double *)a3;
              v1060 = (double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)this << 8) >> 8);
              goto LABEL_2326;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v32 = 0;
          v177 = *((unsigned __int8 *)this + 12);
          if (v177 - 3 < 7 || v177 < 2)
            goto LABEL_480;
          if (v177 != 2)
            turi::apply_binary_op_ff();
          v178 = *(_QWORD *)a3;
          v179 = *(_QWORD *)this;
          if (*(char *)(*(_QWORD *)this + 31) < 0)
            v180 = *(_QWORD *)(v179 + 16);
          else
            v180 = *(unsigned __int8 *)(*(_QWORD *)this + 31);
          if (*(char *)(v178 + 31) < 0)
            v1824 = *(_QWORD *)(v178 + 16);
          else
            v1824 = *(unsigned __int8 *)(v178 + 31);
          if (v180 != v1824)
            goto LABEL_479;
          v1825 = (_QWORD *)(v179 + 8);
          if ((*(_BYTE *)(*(_QWORD *)this + 31) & 0x80) != 0)
            v1825 = (_QWORD *)*v1825;
          v1826 = (_QWORD *)(v178 + 8);
          if ((*(_BYTE *)(v178 + 31) & 0x80) != 0)
            v1826 = (_QWORD *)*v1826;
          if ((*(_BYTE *)(*(_QWORD *)this + 31) & 0x80) != 0)
          {
            v33 = memcmp(v1825, v1826, v180) == 0;
LABEL_431:
            v32 = v33;
          }
          else
          {
            if (!v180)
              goto LABEL_2573;
            v1827 = v180 - 1;
            do
            {
              v1829 = *(unsigned __int8 *)v1825;
              v1825 = (_QWORD *)((char *)v1825 + 1);
              v1828 = v1829;
              v1831 = *(unsigned __int8 *)v1826;
              v1826 = (_QWORD *)((char *)v1826 + 1);
              v1830 = v1831;
              v314 = v1827-- != 0;
              v1832 = v314;
              v32 = v1828 == v1830;
            }
            while (v1828 == v1830 && (v1832 & 1) != 0);
          }
          goto LABEL_480;
        case 3:
          v204 = *((unsigned __int8 *)this + 12);
          if (v204 > 9)
            turi::apply_binary_op_ff();
          if (v204 != 3)
            goto LABEL_479;
          v205 = *(double **)(*(_QWORD *)this + 8);
          v206 = *(double **)(*(_QWORD *)this + 16);
          v207 = v206 - v205;
          v208 = *(double **)(*(_QWORD *)a3 + 8);
          if (v207 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v208) >> 3)
            goto LABEL_479;
          if (v206 == v205)
            goto LABEL_2573;
          if (v207 <= 1)
            v209 = 1;
          else
            v209 = v206 - v205;
          if (*v205 != *v208)
            goto LABEL_479;
          v210 = 1;
          do
          {
            v211 = v210;
            if (v209 == v210)
              break;
            v212 = v205[v210];
            v213 = v208[v210++];
          }
          while (v212 == v213);
          v32 = v211 >= v207;
          goto LABEL_480;
        case 4:
          v99 = *((unsigned __int8 *)this + 12);
          if (v99 > 9)
            turi::apply_binary_op_ff();
          if (v99 != 4)
            goto LABEL_479;
          v100 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)this + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
          goto LABEL_1819;
        case 5:
          v242 = *((unsigned __int8 *)this + 12);
          if (v242 > 9)
            turi::apply_binary_op_ff();
          if (v242 != 5)
            goto LABEL_479;
          v100 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)__p, (uint64_t **)(*(_QWORD *)this + 8), (uint64_t **)(*(_QWORD *)a3 + 8));
          goto LABEL_1819;
        case 6:
          v32 = 0;
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              v33 = *(_QWORD *)this == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && *((_DWORD *)a3 + 2) == 0;
              goto LABEL_431;
            case 1:
              v1060 = *(double *)this;
              v1059 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
LABEL_2326:
              v32 = vabdd_f64(v1060, v1059) < 0.0000005;
              goto LABEL_480;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_480;
            case 6:
              v33 = ((*(_QWORD *)a3 ^ *(_QWORD *)this) & 0xFFFFFFFFFFFFFFLL) == 0
                 && *((_DWORD *)this + 2) == *((_DWORD *)a3 + 2);
              goto LABEL_431;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          v224 = *((unsigned __int8 *)this + 12);
          if (v224 >= 0xA)
            turi::apply_binary_op_ff();
          v33 = v224 == 7;
          goto LABEL_431;
        case 8:
          v32 = 0;
          v257 = *((unsigned __int8 *)this + 12);
          if (v257 < 8 || v257 == 9)
            goto LABEL_480;
          if (v257 != 8)
            turi::apply_binary_op_ff();
          v100 = turi::image_type::operator==(*(_QWORD *)this + 8, *(_QWORD *)a3 + 8);
LABEL_1819:
          v32 = v100;
          goto LABEL_480;
        case 9:
          v146 = *((unsigned __int8 *)this + 12);
          if (v146 < 9)
            goto LABEL_479;
          if (v146 != 9)
            turi::apply_binary_op_ff();
          v147 = *(_QWORD *)a3;
          v148 = *(_QWORD **)this;
          if (*(_QWORD **)a3 == v148)
            goto LABEL_2573;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v148 + 1), v147 + 8))
          {
LABEL_479:
            v32 = 0;
            goto LABEL_480;
          }
          v150 = (char *)v148[3];
          v149 = (char *)v148[4];
          v151 = v149 - v150;
          if (v149 == v150)
            goto LABEL_2573;
          if (!v148[1])
            goto LABEL_2573;
          v152 = 1;
          do
          {
            v153 = *(_QWORD *)v150;
            v150 += 8;
            v152 *= v153;
          }
          while (v150 != v149);
          if (!v152)
          {
LABEL_2573:
            v32 = 1;
            goto LABEL_480;
          }
          v1866 = 0;
          std::vector<unsigned long>::vector(__p, v151 >> 3, &v1866);
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (1)
      {
        v154 = __p[0];
        if (__p[1] == __p[0])
        {
          v163 = 0;
          v164 = *(double *)(*(_QWORD *)v148[1] + 8 * v148[9]);
        }
        else
        {
          v155 = 0;
          v156 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v157 = (uint64_t *)v148[6];
          if (v156 <= 1)
            v156 = 1;
          v158 = (uint64_t *)__p[0];
          v159 = v156;
          do
          {
            v161 = *v158++;
            v160 = v161;
            v162 = *v157++;
            v155 += v162 * v160;
            --v159;
          }
          while (v159);
          v163 = 0;
          v164 = *(double *)(*(_QWORD *)v148[1] + 8 * (v148[9] + v155));
          v165 = *(uint64_t **)(v147 + 48);
          v166 = (uint64_t *)__p[0];
          do
          {
            v168 = *v166++;
            v167 = v168;
            v169 = *v165++;
            v163 += v169 * v167;
            --v156;
          }
          while (v156);
        }
        v170 = *(double *)(**(_QWORD **)(v147 + 8) + 8 * (*(_QWORD *)(v147 + 72) + v163));
        v32 = v164 == v170;
        if (v164 != v170)
          break;
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v148 + 1), (uint64_t *)__p))
        {
          v154 = __p[0];
          break;
        }
      }
      if (v154)
      {
        __p[1] = v154;
        operator delete(v154);
      }
LABEL_480:
      v19 = !v32;
LABEL_763:
      *((_BYTE *)a4 + 12) = 0;
      goto LABEL_2534;
    case 2:
      switch(a3[12])
      {
        case 0:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              v31 = *(_QWORD *)this < *(_QWORD *)a3;
              goto LABEL_1629;
            case 1:
              v94 = *(double *)this;
              v95 = *(_QWORD *)a3;
              goto LABEL_1925;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 6:
              v20 = *(_QWORD *)a3 <= (uint64_t)(*(_QWORD *)this << 8) >> 8;
              goto LABEL_2169;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              v225 = *(double *)a3;
              v226 = *(_QWORD *)this;
              goto LABEL_1418;
            case 1:
              v94 = *(double *)this;
              v1360 = *(double *)a3;
              goto LABEL_1927;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 6:
              v1135 = *(_QWORD *)this;
              v1136 = *((_DWORD *)this + 2);
              v1134 = *(double *)a3;
              goto LABEL_2163;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 2:
              v467 = std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)this + 8), (_BYTE *)(*(_QWORD *)a3 + 8)) >> 31;
              goto LABEL_2533;
            default:
              turi::apply_binary_op_ff();
          }
        case 3:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 3:
              v1245 = *(double **)(*(_QWORD *)this + 8);
              v1246 = *(double **)(*(_QWORD *)a3 + 8);
              v1247 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v1246) >> 3;
              v1248 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - (_QWORD)v1245) >> 3;
              if (*(double **)(*(_QWORD *)this + 16) == v1245)
                goto LABEL_1770;
              if (v1248 <= 1)
                v1249 = 1;
              else
                v1249 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - (_QWORD)v1245) >> 3;
              v1250 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v1246) >> 3;
              break;
            default:
              turi::apply_binary_op_ff();
          }
          return;
        case 4:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 4:
              v467 = turi::flexible_type_impl::lt_operator::operator()(v10, (uint64_t)__p, (uint64_t *)(*(_QWORD *)this + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
              goto LABEL_2533;
            default:
              turi::apply_binary_op_ff();
          }
        case 5:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_511;
        case 6:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              v31 = *(_QWORD *)this < (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
              goto LABEL_1629;
            case 1:
              v1133 = *(double *)this;
              v1131 = *(_QWORD *)a3;
              v1132 = *((_DWORD *)a3 + 2);
              goto LABEL_2168;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 6:
              v1643 = (uint64_t)(*(_QWORD *)this << 8) >> 8;
              if (v1643 < (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
                goto LABEL_2301;
              if (v1643 != (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
                goto LABEL_2532;
              v31 = *((_DWORD *)this + 2) < *((_DWORD *)a3 + 2);
              break;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_1629;
        case 7:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_511;
        case 8:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_511;
        case 9:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_511;
        default:
          turi::apply_binary_op_ff();
      }
      while (v1250 && *v1245 <= *v1246)
      {
        if (*v1245 < *v1246)
          goto LABEL_2301;
        --v1250;
        ++v1245;
        ++v1246;
        if (!--v1249)
        {
LABEL_1770:
          v467 = v1248 < v1247;
          goto LABEL_2533;
        }
      }
      goto LABEL_2532;
    case 3:
      switch(a3[12])
      {
        case 0:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              if (*(_QWORD *)this < *(_QWORD *)a3)
                goto LABEL_2201;
              goto LABEL_455;
            case 1:
              v881 = *(double *)this;
              v882 = (double)*(uint64_t *)a3;
              goto LABEL_1991;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_454;
            case 6:
              if (*(_QWORD *)a3 > (uint64_t)(*(_QWORD *)this << 8) >> 8)
                goto LABEL_2201;
              goto LABEL_455;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              if (*(double *)a3 > (double)*(uint64_t *)this)
                goto LABEL_2201;
              goto LABEL_455;
            case 1:
              v881 = *(double *)this;
              v882 = *(double *)a3;
LABEL_1991:
              if (v881 < v882)
                goto LABEL_2201;
              goto LABEL_455;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_454;
            case 6:
              if ((double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)this << 8) >> 8) < *(double *)a3)
                goto LABEL_2201;
              goto LABEL_455;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v98 = *((unsigned __int8 *)this + 12);
          if (v98 - 3 < 7 || v98 < 2)
            goto LABEL_454;
          if (v98 != 2)
            turi::apply_binary_op_ff();
          if ((std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)this + 8), (_BYTE *)(*(_QWORD *)a3 + 8)) & 0x80000000) != 0)goto LABEL_2201;
          goto LABEL_455;
        case 3:
          v139 = *((unsigned __int8 *)this + 12);
          if (v139 > 9)
            turi::apply_binary_op_ff();
          if (v139 != 3)
            goto LABEL_454;
          v140 = *(double **)(*(_QWORD *)this + 8);
          v141 = *(double **)(*(_QWORD *)a3 + 8);
          v142 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v141) >> 3;
          v143 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - (_QWORD)v140) >> 3;
          if (*(double **)(*(_QWORD *)this + 16) == v140)
            goto LABEL_289;
          if (v143 <= 1)
            v144 = 1;
          else
            v144 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - (_QWORD)v140) >> 3;
          v145 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v141) >> 3;
          break;
        case 4:
          v77 = *((unsigned __int8 *)this + 12);
          if (v77 > 9)
            turi::apply_binary_op_ff();
          if (v77 != 4)
            goto LABEL_454;
          if (turi::flexible_type_impl::lt_operator::operator()(v10, (uint64_t)__p, (uint64_t *)(*(_QWORD *)this + 8), (_QWORD *)(*(_QWORD *)a3 + 8)))
          {
            goto LABEL_2201;
          }
          goto LABEL_455;
        case 5:
          if (*((unsigned __int8 *)this + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_454;
        case 6:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              if (*(_QWORD *)this < (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
                goto LABEL_2201;
              goto LABEL_455;
            case 1:
              if ((double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8) > *(double *)this)
                goto LABEL_2201;
              goto LABEL_455;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_454;
            case 6:
              v1056 = (uint64_t)(*(_QWORD *)this << 8) >> 8;
              if (v1056 < (uint64_t)(*(_QWORD *)a3 << 8) >> 8
                || v1056 == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && *((_DWORD *)this + 2) < *((_DWORD *)a3 + 2))
              {
                goto LABEL_2201;
              }
              goto LABEL_455;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          if (*((unsigned __int8 *)this + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_454;
        case 8:
          if (*((unsigned __int8 *)this + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_454;
        case 9:
          if (*((unsigned __int8 *)this + 12) >= 0xAu)
            turi::apply_binary_op_ff();
LABEL_454:
          turi::flexible_type_fail(0);
          goto LABEL_455;
        default:
          turi::apply_binary_op_ff();
      }
      while (v145 && *v140 <= *v141)
      {
        if (*v140 < *v141)
          goto LABEL_2201;
        --v145;
        ++v140;
        ++v141;
        if (!--v144)
        {
LABEL_289:
          if (v143 < v142)
            goto LABEL_2201;
          break;
        }
      }
LABEL_455:
      switch(a3[12])
      {
        case 0:
          v15 = 0;
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              goto LABEL_457;
            case 1:
              goto LABEL_739;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_690;
            case 6:
              goto LABEL_732;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          v15 = 0;
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              goto LABEL_686;
            case 1:
              goto LABEL_741;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_690;
            case 6:
              goto LABEL_735;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v313 = *((unsigned __int8 *)this + 12);
          v314 = v313 - 3 >= 7 && v313 >= 2;
          if (!v314)
            goto LABEL_689;
          if (v313 != 2)
            turi::apply_binary_op_ff();
          v315 = *(_QWORD *)a3;
          v316 = *(_QWORD *)this;
          v174 = *(char *)(*(_QWORD *)this + 31) < 0
               ? *(_QWORD *)(v316 + 16)
               : *(unsigned __int8 *)(*(_QWORD *)this + 31);
          v1833 = *(char *)(v315 + 31) < 0 ? *(_QWORD *)(v315 + 16) : *(unsigned __int8 *)(v315 + 31);
          if (v174 != v1833)
            goto LABEL_689;
          v1816 = (unsigned __int8 *)(v316 + 8);
          if ((*(_BYTE *)(*(_QWORD *)this + 31) & 0x80) != 0)
            v1816 = *(unsigned __int8 **)v1816;
          v1817 = (unsigned __int8 *)(v315 + 8);
          if ((*(_BYTE *)(v315 + 31) & 0x80) != 0)
            v1817 = *(unsigned __int8 **)v1817;
          if ((*(_BYTE *)(*(_QWORD *)this + 31) & 0x80) != 0)
            goto LABEL_2610;
          if (!v174)
            goto LABEL_2201;
          v1834 = v174 - 1;
          do
          {
            v1836 = *v1816++;
            v1835 = v1836;
            v1838 = *v1817++;
            v1837 = v1838;
            v314 = v1834-- != 0;
            v1839 = v314;
            v15 = v1835 == v1837;
          }
          while (v1835 == v1837 && (v1839 & 1) != 0);
          goto LABEL_690;
        case 3:
          v317 = *((unsigned __int8 *)this + 12);
          if (v317 > 9)
            turi::apply_binary_op_ff();
          if (v317 != 3)
            goto LABEL_689;
          v318 = *(double **)(*(_QWORD *)this + 8);
          v319 = *(double **)(*(_QWORD *)this + 16);
          v186 = v319 - v318;
          v320 = *(double **)(*(_QWORD *)a3 + 8);
          if (v186 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v320) >> 3)
            goto LABEL_689;
          if (v319 == v318)
            goto LABEL_2201;
          if (v186 <= 1)
            v321 = 1;
          else
            v321 = v319 - v318;
          if (*v318 != *v320)
            goto LABEL_689;
          v322 = 1;
          do
          {
            v190 = v322;
            if (v321 == v322)
              break;
            v323 = v318[v322];
            v324 = v320[v322++];
          }
          while (v323 == v324);
          goto LABEL_679;
        case 4:
          v288 = *((unsigned __int8 *)this + 12);
          if (v288 > 9)
            turi::apply_binary_op_ff();
          if (v288 == 4)
            goto LABEL_636;
          goto LABEL_689;
        case 5:
          v325 = *((unsigned __int8 *)this + 12);
          if (v325 > 9)
            turi::apply_binary_op_ff();
          if (v325 == 5)
            goto LABEL_2525;
          goto LABEL_689;
        case 6:
          v15 = 0;
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              goto LABEL_692;
            case 1:
              goto LABEL_742;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_690;
            case 6:
              goto LABEL_736;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          v197 = *((unsigned __int8 *)this + 12);
          if (v197 >= 0xA)
            turi::apply_binary_op_ff();
          goto LABEL_681;
        case 8:
          v326 = *((unsigned __int8 *)this + 12);
          if (v326 < 8 || v326 == 9)
            goto LABEL_689;
          if (v326 != 8)
            turi::apply_binary_op_ff();
          goto LABEL_698;
        case 9:
          v289 = *((unsigned __int8 *)this + 12);
          if (v289 < 9)
            goto LABEL_689;
          if (v289 != 9)
            turi::apply_binary_op_ff();
          v290 = *(_QWORD *)a3;
          v291 = *(_QWORD **)this;
          if (*(_QWORD **)a3 == v291)
            goto LABEL_2201;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v291 + 1), v290 + 8))
            goto LABEL_689;
          v293 = (char *)v291[3];
          v292 = (char *)v291[4];
          v294 = v292 - v293;
          if (v292 == v293)
            goto LABEL_2201;
          if (!v291[1])
            goto LABEL_2201;
          v295 = 1;
          do
          {
            v296 = *(_QWORD *)v293;
            v293 += 8;
            v295 *= v296;
          }
          while (v293 != v292);
          if (!v295)
            goto LABEL_2201;
          v1866 = 0;
          std::vector<unsigned long>::vector(__p, v294 >> 3, &v1866);
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (1)
      {
        v118 = __p[0];
        if (__p[1] == __p[0])
        {
          v305 = 0;
          v306 = *(double *)(*(_QWORD *)v291[1] + 8 * v291[9]);
        }
        else
        {
          v297 = 0;
          v298 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v299 = (uint64_t *)v291[6];
          if (v298 <= 1)
            v298 = 1;
          v300 = (uint64_t *)__p[0];
          v301 = v298;
          do
          {
            v303 = *v300++;
            v302 = v303;
            v304 = *v299++;
            v297 += v304 * v302;
            --v301;
          }
          while (v301);
          v305 = 0;
          v306 = *(double *)(*(_QWORD *)v291[1] + 8 * (v291[9] + v297));
          v307 = *(uint64_t **)(v290 + 48);
          v308 = (uint64_t *)__p[0];
          do
          {
            v310 = *v308++;
            v309 = v310;
            v311 = *v307++;
            v305 += v311 * v309;
            --v298;
          }
          while (v298);
        }
        v312 = *(double *)(**(_QWORD **)(v290 + 8) + 8 * (*(_QWORD *)(v290 + 72) + v305));
        v15 = v306 == v312;
        if (v306 != v312)
          goto LABEL_660;
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v291 + 1), (uint64_t *)__p))
        {
LABEL_659:
          v118 = __p[0];
          goto LABEL_660;
        }
      }
    case 4:
      switch(a3[12])
      {
        case 0:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              v20 = *(_QWORD *)this <= *(_QWORD *)a3;
              goto LABEL_2169;
            case 1:
              v225 = *(double *)this;
              v226 = *(_QWORD *)a3;
LABEL_1418:
              v958 = (double)v226;
              goto LABEL_1420;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 6:
              v31 = *(_QWORD *)a3 < (uint64_t)(*(_QWORD *)this << 8) >> 8;
LABEL_1629:
              v467 = v31;
              goto LABEL_2533;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              v94 = *(double *)a3;
              v95 = *(_QWORD *)this;
LABEL_1925:
              v1360 = (double)v95;
LABEL_1927:
              v1361 = v94 < v1360;
              goto LABEL_2164;
            case 1:
              v225 = *(double *)this;
              v958 = *(double *)a3;
LABEL_1420:
              v20 = v225 <= v958;
              goto LABEL_2169;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 6:
              v1131 = *(_QWORD *)this;
              v1132 = *((_DWORD *)this + 2);
              v1133 = *(double *)a3;
LABEL_2168:
              v20 = (double)v1132 / 1000000.0 + (double)(v1131 << 8 >> 8) <= v1133;
              goto LABEL_2169;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 2:
              v467 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)a3 + 8), (_QWORD *)(*(_QWORD *)this + 8));
              goto LABEL_2533;
            default:
              turi::apply_binary_op_ff();
          }
        case 3:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 3:
              v846 = *(double **)(*(_QWORD *)this + 8);
              v847 = *(double **)(*(_QWORD *)a3 + 8);
              v848 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v847) >> 3;
              v849 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - (_QWORD)v846) >> 3;
              if (*(double **)(*(_QWORD *)this + 16) == v846)
                goto LABEL_1275;
              if (v849 <= 1)
                v850 = 1;
              else
                v850 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - (_QWORD)v846) >> 3;
              v851 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v847) >> 3;
              break;
            default:
              turi::apply_binary_op_ff();
          }
          return;
        case 4:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 4:
              v467 = turi::flexible_type_impl::gt_operator::operator()(v10, (uint64_t)__p, (uint64_t *)(*(_QWORD *)this + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
              goto LABEL_2533;
            default:
              turi::apply_binary_op_ff();
          }
        case 5:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_511;
        case 6:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              v20 = *(_QWORD *)this <= (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
              goto LABEL_2169;
            case 1:
              v1134 = *(double *)this;
              v1135 = *(_QWORD *)a3;
              v1136 = *((_DWORD *)a3 + 2);
LABEL_2163:
              v1361 = (double)v1136 / 1000000.0 + (double)(v1135 << 8 >> 8) < v1134;
LABEL_2164:
              v467 = v1361;
              goto LABEL_2533;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            case 6:
              v1359 = (uint64_t)(*(_QWORD *)this << 8) >> 8;
              if (v1359 > (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
                goto LABEL_2301;
              if (v1359 != (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
                goto LABEL_2532;
              v20 = *((_DWORD *)this + 2) <= *((_DWORD *)a3 + 2);
LABEL_2169:
              v467 = !v20;
              break;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_2533;
        case 7:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_511;
        case 8:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_511;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_511;
        case 9:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
            default:
              turi::apply_binary_op_ff();
          }
LABEL_511:
          turi::flexible_type_fail(0);
          goto LABEL_2532;
        default:
          turi::apply_binary_op_ff();
      }
      while (2)
      {
        if (v851 && *v846 <= *v847)
        {
          if (*v846 >= *v847)
          {
            --v851;
            ++v846;
            ++v847;
            if (!--v850)
            {
LABEL_1275:
              v467 = v849 > v848;
              break;
            }
            continue;
          }
LABEL_2532:
          v467 = 0;
        }
        else
        {
LABEL_2301:
          v467 = 1;
        }
        break;
      }
LABEL_2533:
      *((_BYTE *)a4 + 12) = 0;
      v19 = v467;
      goto LABEL_2534;
    case 5:
      switch(a3[12])
      {
        case 0:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              if (*(_QWORD *)this > *(_QWORD *)a3)
                goto LABEL_2201;
              goto LABEL_407;
            case 1:
              v795 = *(double *)this;
              v796 = (double)*(uint64_t *)a3;
              goto LABEL_1881;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_406;
            case 6:
              if (*(_QWORD *)a3 < (uint64_t)(*(_QWORD *)this << 8) >> 8)
                goto LABEL_2201;
              goto LABEL_407;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              if (*(double *)a3 < (double)*(uint64_t *)this)
                goto LABEL_2201;
              goto LABEL_407;
            case 1:
              v795 = *(double *)this;
              v796 = *(double *)a3;
LABEL_1881:
              if (v795 > v796)
                goto LABEL_2201;
              goto LABEL_407;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_406;
            case 6:
              if ((double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)this << 8) >> 8) > *(double *)a3)
                goto LABEL_2201;
              goto LABEL_407;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v86 = *((unsigned __int8 *)this + 12);
          if (v86 - 3 < 7 || v86 < 2)
            goto LABEL_406;
          if (v86 != 2)
            turi::apply_binary_op_ff();
          v70 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)a3 + 8), (_QWORD *)(*(_QWORD *)this + 8));
          goto LABEL_179;
        case 3:
          v101 = *((unsigned __int8 *)this + 12);
          if (v101 > 9)
            turi::apply_binary_op_ff();
          if (v101 != 3)
            goto LABEL_406;
          v102 = *(double **)(*(_QWORD *)this + 8);
          v103 = *(double **)(*(_QWORD *)a3 + 8);
          v104 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v103) >> 3;
          v105 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - (_QWORD)v102) >> 3;
          if (*(double **)(*(_QWORD *)this + 16) == v102)
            goto LABEL_231;
          if (v105 <= 1)
            v106 = 1;
          else
            v106 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - (_QWORD)v102) >> 3;
          v107 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v103) >> 3;
          break;
        case 4:
          v69 = *((unsigned __int8 *)this + 12);
          if (v69 > 9)
            turi::apply_binary_op_ff();
          if (v69 != 4)
            goto LABEL_406;
          v70 = turi::flexible_type_impl::gt_operator::operator()(v10, (uint64_t)__p, (uint64_t *)(*(_QWORD *)this + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
LABEL_179:
          if (v70)
            goto LABEL_2201;
          goto LABEL_407;
        case 5:
          if (*((unsigned __int8 *)this + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_406;
        case 6:
          switch(*((_BYTE *)this + 12))
          {
            case 0:
              if (*(_QWORD *)this > (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
                goto LABEL_2201;
              goto LABEL_407;
            case 1:
              if ((double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8) < *(double *)this)
                goto LABEL_2201;
              goto LABEL_407;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_406;
            case 6:
              v999 = (uint64_t)(*(_QWORD *)this << 8) >> 8;
              if (v999 > (uint64_t)(*(_QWORD *)a3 << 8) >> 8
                || v999 == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && *((_DWORD *)this + 2) > *((_DWORD *)a3 + 2))
              {
                goto LABEL_2201;
              }
              goto LABEL_407;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          if (*((unsigned __int8 *)this + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_406;
        case 8:
          if (*((unsigned __int8 *)this + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_406;
        case 9:
          if (*((unsigned __int8 *)this + 12) >= 0xAu)
            turi::apply_binary_op_ff();
LABEL_406:
          turi::flexible_type_fail(0);
          goto LABEL_407;
        default:
          turi::apply_binary_op_ff();
      }
      return;
    case 7:
      switch(*((_BYTE *)this + 12))
      {
        case 0:
          v34 = *(_QWORD *)this;
          goto LABEL_701;
        case 1:
          v34 = (uint64_t)*(double *)this;
          goto LABEL_701;
        case 2:
          v216 = *(_QWORD *)this;
          v217 = (char **)(*(_QWORD *)this + 8);
          __idx = 0;
          v218 = (char *)v217;
          if (*(char *)(v216 + 31) < 0)
            v218 = *v217;
          std::string::basic_string[abi:ne180100]<0>(&__str, v218);
          v34 = std::stoll(&__str, &__idx, 10);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (*(char *)(v216 + 31) < 0)
            v219 = *(_QWORD *)(v216 + 16);
          else
            v219 = *(unsigned __int8 *)(v216 + 31);
          if (__idx != v219)
          {
            v1860 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v1861 = std::string::append(&v1880, " cannot be interpreted as an integer");
            v1862 = *(_OWORD *)&v1861->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v1861->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1862;
            v1861->__r_.__value_.__l.__size_ = 0;
            v1861->__r_.__value_.__r.__words[2] = 0;
            v1861->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v1860, &__str);
            __cxa_throw(v1860, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_701;
        case 3:
          v135 = *(_QWORD *)this;
          v1878 = 0;
          v1879 = 0;
          v1877 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v1877, *(const void **)(v135 + 8), *(_QWORD *)(v135 + 16), (uint64_t)(*(_QWORD *)(v135 + 16) - *(_QWORD *)(v135 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (v1877)
          {
            v1878 = v1877;
            operator delete(v1877);
          }
          break;
        case 4:
          v243 = *(_QWORD *)this;
          v1875 = 0;
          v1876 = 0;
          v1874 = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v1874, *(uint64_t **)(v243 + 8), *(uint64_t **)(v243 + 16), (uint64_t)(*(_QWORD *)(v243 + 16) - *(_QWORD *)(v243 + 8)) >> 4);
          turi::flexible_type_fail(0);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1874;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          break;
        case 5:
          v255 = *(_QWORD *)this;
          v1872 = 0;
          v1873 = 0;
          v1871 = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v1871, *(uint64_t **)(v255 + 8), *(uint64_t **)(v255 + 16), (uint64_t)(*(_QWORD *)(v255 + 16) - *(_QWORD *)(v255 + 8)) >> 5);
          turi::flexible_type_fail(0);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1871;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          break;
        case 6:
          v34 = (uint64_t)(*(_QWORD *)this << 8) >> 8;
LABEL_701:
          if (v34)
          {
            v369 = 0;
            switch(a3[12])
            {
              case 0:
                goto LABEL_715;
              case 1:
                goto LABEL_716;
              case 2:
                v370 = *(_QWORD *)a3;
                v371 = (char **)(*(_QWORD *)a3 + 8);
                __str.__r_.__value_.__r.__words[0] = 0;
                v372 = (char *)v371;
                if (*(char *)(v370 + 31) < 0)
                  v372 = *v371;
                std::string::basic_string[abi:ne180100]<0>(__p, v372);
                v369 = std::stoll((const std::string *)__p, (size_t *)&__str, 10);
                if (SBYTE7(v1884) < 0)
                  operator delete(__p[0]);
                if (*(char *)(v370 + 31) < 0)
                  v373 = *(_QWORD *)(v370 + 16);
                else
                  v373 = *(unsigned __int8 *)(v370 + 31);
                if (__str.__r_.__value_.__r.__words[0] != v373)
                {
                  v1812 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v1813 = std::string::append((std::string *)&v1866, " cannot be interpreted as an integer");
                  v1814 = *(_OWORD *)&v1813->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v1884 = *((_QWORD *)&v1813->__r_.__value_.__l + 2);
                  *(_OWORD *)__p = v1814;
                  v1813->__r_.__value_.__l.__size_ = 0;
                  v1813->__r_.__value_.__r.__words[2] = 0;
                  v1813->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v1812, (const std::string *)__p);
                  __cxa_throw(v1812, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_762;
              case 3:
                v392 = *(_QWORD *)a3;
                __p[1] = 0;
                *(_QWORD *)&v1884 = 0;
                __p[0] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v392 + 8), *(_QWORD *)(v392 + 16), (uint64_t)(*(_QWORD *)(v392 + 16) - *(_QWORD *)(v392 + 8)) >> 3);
                turi::flexible_type_fail(0);
                goto LABEL_748;
              case 4:
                v393 = *(_QWORD *)a3;
                __p[1] = 0;
                *(_QWORD *)&v1884 = 0;
                __p[0] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v393 + 8), *(uint64_t **)(v393 + 16), (uint64_t)(*(_QWORD *)(v393 + 16) - *(_QWORD *)(v393 + 8)) >> 4);
                turi::flexible_type_fail(0);
                goto LABEL_753;
              case 5:
                v394 = *(_QWORD *)a3;
                __p[1] = 0;
                *(_QWORD *)&v1884 = 0;
                __p[0] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v394 + 8), *(uint64_t **)(v394 + 16), (uint64_t)(*(_QWORD *)(v394 + 16) - *(_QWORD *)(v394 + 8)) >> 5);
                turi::flexible_type_fail(0);
                goto LABEL_755;
              case 6:
                goto LABEL_717;
              case 7:
                goto LABEL_762;
              case 8:
                v395 = *(_QWORD *)a3;
                v396 = *(unsigned int **)(*(_QWORD *)a3 + 16);
                __p[0] = *(void **)(*(_QWORD *)a3 + 8);
                __p[1] = v396;
                if (v396)
                {
                  v397 = v396 + 2;
                  do
                    v398 = __ldxr(v397);
                  while (__stxr(v398 + 1, v397));
                }
                v399 = *(_OWORD *)(v395 + 24);
                v400 = *(_OWORD *)(v395 + 56);
                v1885 = *(_OWORD *)(v395 + 40);
                v1886 = v400;
                v1884 = v399;
                turi::flexible_type_fail(0);
                goto LABEL_760;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
                turi::flexible_type_fail(0);
                goto LABEL_751;
              default:
                turi::apply_binary_op_ff();
            }
          }
          return;
        case 7:
          break;
        case 8:
          v260 = *(_QWORD *)this;
          v261 = *(unsigned int **)(*(_QWORD *)this + 16);
          v1866 = *(void ***)(*(_QWORD *)this + 8);
          v1867 = v261;
          if (v261)
          {
            v262 = v261 + 2;
            do
              v263 = __ldxr(v262);
            while (__stxr(v263 + 1, v262));
          }
          v264 = *(_OWORD *)(v260 + 24);
          v265 = *(_OWORD *)(v260 + 56);
          v1869 = *(_OWORD *)(v260 + 40);
          v1870 = v265;
          v1868 = v264;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v1867);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)this + 8);
          turi::flexible_type_fail(0);
          turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
          break;
        default:
          turi::apply_binary_op_ff();
      }
      v19 = 0;
      goto LABEL_763;
    case 9:
      switch(*((_BYTE *)this + 12))
      {
        case 0:
          v35 = *(_QWORD *)this;
          goto LABEL_712;
        case 1:
          v35 = (uint64_t)*(double *)this;
          goto LABEL_712;
        case 2:
          v220 = *(_QWORD *)this;
          v221 = (char **)(*(_QWORD *)this + 8);
          __idx = 0;
          v222 = (char *)v221;
          if (*(char *)(v220 + 31) < 0)
            v222 = *v221;
          std::string::basic_string[abi:ne180100]<0>(&__str, v222);
          v35 = std::stoll(&__str, &__idx, 10);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (*(char *)(v220 + 31) < 0)
            v223 = *(_QWORD *)(v220 + 16);
          else
            v223 = *(unsigned __int8 *)(v220 + 31);
          if (__idx != v223)
          {
            v1863 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v1864 = std::string::append(&v1880, " cannot be interpreted as an integer");
            v1865 = *(_OWORD *)&v1864->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v1864->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v1865;
            v1864->__r_.__value_.__l.__size_ = 0;
            v1864->__r_.__value_.__r.__words[2] = 0;
            v1864->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v1863, &__str);
            __cxa_throw(v1863, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_712;
        case 3:
          v136 = *(_QWORD *)this;
          v1878 = 0;
          v1879 = 0;
          v1877 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v1877, *(const void **)(v136 + 8), *(_QWORD *)(v136 + 16), (uint64_t)(*(_QWORD *)(v136 + 16) - *(_QWORD *)(v136 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (v1877)
          {
            v1878 = v1877;
            operator delete(v1877);
          }
          goto LABEL_714;
        case 4:
          v252 = *(_QWORD *)this;
          v1875 = 0;
          v1876 = 0;
          v1874 = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v1874, *(uint64_t **)(v252 + 8), *(uint64_t **)(v252 + 16), (uint64_t)(*(_QWORD *)(v252 + 16) - *(_QWORD *)(v252 + 8)) >> 4);
          turi::flexible_type_fail(0);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1874;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          goto LABEL_714;
        case 5:
          v256 = *(_QWORD *)this;
          v1872 = 0;
          v1873 = 0;
          v1871 = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v1871, *(uint64_t **)(v256 + 8), *(uint64_t **)(v256 + 16), (uint64_t)(*(_QWORD *)(v256 + 16) - *(_QWORD *)(v256 + 8)) >> 5);
          turi::flexible_type_fail(0);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1871;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          goto LABEL_714;
        case 6:
          v35 = (uint64_t)(*(_QWORD *)this << 8) >> 8;
LABEL_712:
          if (!v35)
            goto LABEL_714;
          v19 = 1;
          break;
        case 7:
          goto LABEL_714;
        case 8:
          v266 = *(_QWORD *)this;
          v267 = *(unsigned int **)(*(_QWORD *)this + 16);
          v1866 = *(void ***)(*(_QWORD *)this + 8);
          v1867 = v267;
          if (v267)
          {
            v268 = v267 + 2;
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 56);
          v1869 = *(_OWORD *)(v266 + 40);
          v1870 = v271;
          v1868 = v270;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v1867);
          goto LABEL_714;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)this + 8);
          turi::flexible_type_fail(0);
          turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_714:
          v369 = 0;
          switch(a3[12])
          {
            case 0:
LABEL_715:
              v369 = *(_QWORD *)a3;
              goto LABEL_762;
            case 1:
LABEL_716:
              v369 = (uint64_t)*(double *)a3;
              goto LABEL_762;
            case 2:
              v374 = *(_QWORD *)a3;
              v375 = (char **)(*(_QWORD *)a3 + 8);
              __str.__r_.__value_.__r.__words[0] = 0;
              v376 = (char *)v375;
              if (*(char *)(v374 + 31) < 0)
                v376 = *v375;
              std::string::basic_string[abi:ne180100]<0>(__p, v376);
              v369 = std::stoll((const std::string *)__p, (size_t *)&__str, 10);
              if (SBYTE7(v1884) < 0)
                operator delete(__p[0]);
              if (*(char *)(v374 + 31) < 0)
                v377 = *(_QWORD *)(v374 + 16);
              else
                v377 = *(unsigned __int8 *)(v374 + 31);
              if (__str.__r_.__value_.__r.__words[0] != v377)
              {
                v389 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v390 = std::string::append((std::string *)&v1866, " cannot be interpreted as an integer");
                v391 = *(_OWORD *)&v390->__r_.__value_.__l.__data_;
                *(_QWORD *)&v1884 = *((_QWORD *)&v390->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v391;
                v390->__r_.__value_.__l.__size_ = 0;
                v390->__r_.__value_.__r.__words[2] = 0;
                v390->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v389, (const std::string *)__p);
                __cxa_throw(v389, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_762;
            case 3:
              v379 = *(_QWORD *)a3;
              __p[1] = 0;
              *(_QWORD *)&v1884 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v379 + 8), *(_QWORD *)(v379 + 16), (uint64_t)(*(_QWORD *)(v379 + 16) - *(_QWORD *)(v379 + 8)) >> 3);
              turi::flexible_type_fail(0);
LABEL_748:
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_761;
            case 4:
              v380 = *(_QWORD *)a3;
              __p[1] = 0;
              *(_QWORD *)&v1884 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v380 + 8), *(uint64_t **)(v380 + 16), (uint64_t)(*(_QWORD *)(v380 + 16) - *(_QWORD *)(v380 + 8)) >> 4);
              turi::flexible_type_fail(0);
LABEL_753:
              v1866 = __p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1866);
              goto LABEL_761;
            case 5:
              v378 = *(_QWORD *)a3;
              __p[1] = 0;
              *(_QWORD *)&v1884 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v378 + 8), *(uint64_t **)(v378 + 16), (uint64_t)(*(_QWORD *)(v378 + 16) - *(_QWORD *)(v378 + 8)) >> 5);
              turi::flexible_type_fail(0);
LABEL_755:
              v1866 = __p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1866);
              goto LABEL_761;
            case 6:
LABEL_717:
              v369 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
              goto LABEL_762;
            case 7:
              goto LABEL_762;
            case 8:
              v381 = *(_QWORD *)a3;
              v382 = *(unsigned int **)(*(_QWORD *)a3 + 16);
              __p[0] = *(void **)(*(_QWORD *)a3 + 8);
              __p[1] = v382;
              if (v382)
              {
                v383 = v382 + 2;
                do
                  v384 = __ldxr(v383);
                while (__stxr(v384 + 1, v383));
              }
              v385 = *(_OWORD *)(v381 + 24);
              v386 = *(_OWORD *)(v381 + 56);
              v1885 = *(_OWORD *)(v381 + 40);
              v1886 = v386;
              v1884 = v385;
              turi::flexible_type_fail(0);
LABEL_760:
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_761;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
              turi::flexible_type_fail(0);
LABEL_751:
              turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_761:
              v369 = 0;
LABEL_762:
              v19 = v369 != 0;
              break;
            default:
              turi::apply_binary_op_ff();
          }
          return;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_763;
    case 0xA:
      *a4 = 0;
      *((_DWORD *)a4 + 2) = 0;
      *((_BYTE *)a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)((char *)this + 5);
        *a4 = *(_QWORD *)this;
        v39 = *((unsigned __int8 *)this + 12);
        *((_BYTE *)a4 + 12) = v39;
        if (v39 <= 9 && ((1 << v39) & 0x33C) != 0)
        {
          v40 = (unint64_t *)*a4;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v19 = *a4 + *(_QWORD *)a3;
              goto LABEL_2535;
            case 1:
              v676 = *(double *)a4 + (double)*(uint64_t *)a3;
              goto LABEL_2295;
            case 2:
              v231 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1614 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v1614, *a4);
              *a4 = (uint64_t)v1614;
              *v1614 = 1;
              do
              {
                v1615 = __ldaxr((unint64_t *)v231);
                v234 = --v1615 == 0;
              }
              while (__stlxr(v1615, (unint64_t *)v231));
              goto LABEL_2263;
            case 3:
              v1404 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1405 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1405, *a4);
                *a4 = (uint64_t)v1405;
                *v1405 = 1;
                do
                {
                  v1406 = __ldaxr(v1404);
                  v1407 = v1406 - 1;
                }
                while (__stlxr(v1407, v1404));
                if (!v1407)
                {
                  v1408 = (void *)v1404[1];
                  if (v1408)
                  {
                    v1404[2] = (unint64_t)v1408;
                    operator delete(v1408);
                  }
                  MEMORY[0x219A19A08](v1404, 0x1080C409938AC02);
                }
              }
              v1409 = *(double **)(*a4 + 8);
              v1410 = *(_QWORD *)(*a4 + 16) - (_QWORD)v1409;
              if (v1410)
              {
                v1411 = v1410 >> 3;
                v1412 = (double)*(uint64_t *)a3;
                if (v1411 <= 1)
                  v1411 = 1;
                do
                {
                  *v1409 = *v1409 + v1412;
                  ++v1409;
                  --v1411;
                }
                while (v1411);
              }
              return;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1706 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1706, *a4);
              *a4 = (uint64_t)v1706;
              *v1706 = 1;
              do
              {
                v1707 = __ldaxr(v1353);
                v1571 = --v1707 == 0;
              }
              while (__stlxr(v1707, v1353));
              goto LABEL_2509;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1732 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1732, *a4);
              *a4 = (uint64_t)v1732;
              *v1732 = 1;
              do
              {
                v1733 = __ldaxr(v1353);
                v1356 = --v1733 == 0;
              }
              while (__stlxr(v1733, v1353));
              goto LABEL_2426;
            case 6:
              v1572 = *a4;
              v1573 = *a4 + *(_QWORD *)a3;
              goto LABEL_2276;
            case 7:
              goto LABEL_2524;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1736 = operator new();
              v1737 = *a4;
              *(_QWORD *)v1736 = *(_QWORD *)*a4;
              *(_QWORD *)(v1736 + 8) = *(_QWORD *)(v1737 + 8);
              v1738 = *(_QWORD *)(v1737 + 16);
              *(_QWORD *)(v1736 + 16) = v1738;
              if (v1738)
              {
                v1739 = (unsigned int *)(v1738 + 8);
                do
                  v1740 = __ldxr(v1739);
                while (__stxr(v1740 + 1, v1739));
              }
              v1741 = *(_OWORD *)(v1737 + 24);
              v1742 = *(_OWORD *)(v1737 + 40);
              *(_OWORD *)(v1736 + 56) = *(_OWORD *)(v1737 + 56);
              *(_OWORD *)(v1736 + 40) = v1742;
              *(_OWORD *)(v1736 + 24) = v1741;
              *a4 = v1736;
              *(_QWORD *)v1736 = 1;
              do
              {
                v1743 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1743 == 0;
              }
              while (__stlxr(v1743, (unint64_t *)v1590));
              goto LABEL_2519;
            case 9:
              v1462 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1463 = (_QWORD *)operator new();
                v1464 = *a4 + 8;
                *v1463 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v1463 + 1, v1464);
                *a4 = (uint64_t)v1463;
                *v1463 = 1;
                do
                {
                  v1465 = __ldaxr(v1462);
                  v1466 = v1465 - 1;
                }
                while (__stlxr(v1466, v1462));
                if (!v1466)
                {
                  v1467 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1462);
                  MEMORY[0x219A19A08](v1467, 0x1030C407B73B9F7);
                }
              }
              v1468 = (uint64_t *)*a4;
              v1470 = *(uint64_t **)(*a4 + 24);
              v1469 = *(uint64_t **)(*a4 + 32);
              if (v1469 == v1470)
                return;
              if (!v1468[1])
                return;
              v1471 = (double)*(uint64_t *)a3;
              v1472 = 1;
              do
              {
                v1473 = *v1470++;
                v1472 *= v1473;
              }
              while (v1470 != v1469);
              if (!v1472)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v1468 + 1);
              v1474 = (v1468[4] - v1468[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v1474, &__str);
              do
              {
                v1475 = (uint64_t *)__p[0];
                v1476 = 0;
                if (__p[1] != __p[0])
                {
                  v1477 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v1478 = (uint64_t *)v1468[6];
                  if (v1477 <= 1)
                    v1477 = 1;
                  do
                  {
                    v1480 = *v1475++;
                    v1479 = v1480;
                    v1481 = *v1478++;
                    v1476 += v1481 * v1479;
                    --v1477;
                  }
                  while (v1477);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1468 + 1);
                *(double *)(*(_QWORD *)v1468[1] + 8 * (v1468[9] + v1476)) = *(double *)(*(_QWORD *)v1468[1]
                                                                                      + 8 * (v1468[9] + v1476))
                                                                          + v1471;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v1468 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        case 1:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v68 = *(double *)a3 + (double)*a4;
              goto LABEL_544;
            case 1:
              v676 = *(double *)a3 + *(double *)a4;
              goto LABEL_2295;
            case 2:
              v231 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1616 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v1616, *a4);
              *a4 = (uint64_t)v1616;
              *v1616 = 1;
              do
              {
                v1617 = __ldaxr((unint64_t *)v231);
                v234 = --v1617 == 0;
              }
              while (__stlxr(v1617, (unint64_t *)v231));
              goto LABEL_2263;
            case 3:
              v1413 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1414 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1414, *a4);
                *a4 = (uint64_t)v1414;
                *v1414 = 1;
                do
                {
                  v1415 = __ldaxr(v1413);
                  v1416 = v1415 - 1;
                }
                while (__stlxr(v1416, v1413));
                if (!v1416)
                {
                  v1417 = (void *)v1413[1];
                  if (v1417)
                  {
                    v1413[2] = (unint64_t)v1417;
                    operator delete(v1417);
                  }
                  MEMORY[0x219A19A08](v1413, 0x1080C409938AC02);
                }
              }
              v1418 = *(double **)(*a4 + 8);
              v1419 = *(_QWORD *)(*a4 + 16) - (_QWORD)v1418;
              if (v1419)
              {
                v1420 = *(double *)a3;
                v1421 = v1419 >> 3;
                if (v1421 <= 1)
                  v1421 = 1;
                do
                {
                  *v1418 = v1420 + *v1418;
                  ++v1418;
                  --v1421;
                }
                while (v1421);
              }
              return;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1708 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1708, *a4);
              *a4 = (uint64_t)v1708;
              *v1708 = 1;
              do
              {
                v1709 = __ldaxr(v1353);
                v1571 = --v1709 == 0;
              }
              while (__stlxr(v1709, v1353));
              goto LABEL_2509;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1734 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1734, *a4);
              *a4 = (uint64_t)v1734;
              *v1734 = 1;
              do
              {
                v1735 = __ldaxr(v1353);
                v1356 = --v1735 == 0;
              }
              while (__stlxr(v1735, v1353));
              goto LABEL_2426;
            case 6:
              v1626 = (*(double *)a3 - (double)(uint64_t)floor(*(double *)a3)) * 1000000.0;
              v1627 = *a4;
              v1628 = *a4 + vcvtmd_s64_f64(*(double *)a3);
              *a4 = *a4 & 0xFF00000000000000 | v1628 & 0xFFFFFFFFFFFFFFLL;
              v1577 = (uint64_t)v1626 + *((int *)a4 + 2);
              if (v1577 > 999999)
              {
                *a4 = (v1628 + 1) & 0xFFFFFFFFFFFFFFLL | v1627 & 0xFF00000000000000;
                LODWORD(v1577) = v1577 - 1000000;
              }
              if (v1577 > 0xF423F)
                turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
              goto LABEL_2280;
            case 7:
              goto LABEL_2524;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1744 = operator new();
              v1745 = *a4;
              *(_QWORD *)v1744 = *(_QWORD *)*a4;
              *(_QWORD *)(v1744 + 8) = *(_QWORD *)(v1745 + 8);
              v1746 = *(_QWORD *)(v1745 + 16);
              *(_QWORD *)(v1744 + 16) = v1746;
              if (v1746)
              {
                v1747 = (unsigned int *)(v1746 + 8);
                do
                  v1748 = __ldxr(v1747);
                while (__stxr(v1748 + 1, v1747));
              }
              v1749 = *(_OWORD *)(v1745 + 24);
              v1750 = *(_OWORD *)(v1745 + 40);
              *(_OWORD *)(v1744 + 56) = *(_OWORD *)(v1745 + 56);
              *(_OWORD *)(v1744 + 40) = v1750;
              *(_OWORD *)(v1744 + 24) = v1749;
              *a4 = v1744;
              *(_QWORD *)v1744 = 1;
              do
              {
                v1751 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1751 == 0;
              }
              while (__stlxr(v1751, (unint64_t *)v1590));
              goto LABEL_2519;
            case 9:
              v1482 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1483 = (_QWORD *)operator new();
                v1484 = *a4 + 8;
                *v1483 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v1483 + 1, v1484);
                *a4 = (uint64_t)v1483;
                *v1483 = 1;
                do
                {
                  v1485 = __ldaxr(v1482);
                  v1486 = v1485 - 1;
                }
                while (__stlxr(v1486, v1482));
                if (!v1486)
                {
                  v1487 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1482);
                  MEMORY[0x219A19A08](v1487, 0x1030C407B73B9F7);
                }
              }
              v1488 = (uint64_t *)*a4;
              v1490 = *(uint64_t **)(*a4 + 24);
              v1489 = *(uint64_t **)(*a4 + 32);
              if (v1489 == v1490)
                return;
              if (!v1488[1])
                return;
              v1491 = *(double *)a3;
              v1492 = 1;
              do
              {
                v1493 = *v1490++;
                v1492 *= v1493;
              }
              while (v1490 != v1489);
              if (!v1492)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v1488 + 1);
              v1494 = (v1488[4] - v1488[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v1494, &__str);
              do
              {
                v1495 = (uint64_t *)__p[0];
                v1496 = 0;
                if (__p[1] != __p[0])
                {
                  v1497 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v1498 = (uint64_t *)v1488[6];
                  if (v1497 <= 1)
                    v1497 = 1;
                  do
                  {
                    v1500 = *v1495++;
                    v1499 = v1500;
                    v1501 = *v1498++;
                    v1496 += v1501 * v1499;
                    --v1497;
                  }
                  while (v1497);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1488 + 1);
                *(double *)(*(_QWORD *)v1488[1] + 8 * (v1488[9] + v1496)) = v1491
                                                                          + *(double *)(*(_QWORD *)v1488[1]
                                                                                      + 8 * (v1488[9] + v1496));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v1488 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        case 2:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v244 = *(_QWORD *)a3;
              v245 = *a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v246 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v246, *a4);
                *a4 = (uint64_t)v246;
                *v246 = 1;
                do
                {
                  v247 = __ldaxr((unint64_t *)v245);
                  v248 = v247 - 1;
                }
                while (__stlxr(v248, (unint64_t *)v245));
                if (!v248)
                {
                  if (*(char *)(v245 + 31) < 0)
                    operator delete(*(void **)(v245 + 8));
                  MEMORY[0x219A19A08](v245, 0x1012C404EF22A49);
                }
              }
              v249 = *(char *)(v244 + 31);
              if (v249 >= 0)
                v250 = (const std::string::value_type *)(v244 + 8);
              else
                v250 = *(const std::string::value_type **)(v244 + 8);
              if (v249 >= 0)
                v251 = *(unsigned __int8 *)(v244 + 31);
              else
                v251 = *(_QWORD *)(v244 + 16);
              std::string::append((std::string *)(*a4 + 8), v250, v251);
              return;
            case 3:
              v854 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v990 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v990, *a4);
              *a4 = (uint64_t)v990;
              *v990 = 1;
              do
              {
                v991 = __ldaxr(v854);
                v857 = --v991 == 0;
              }
              while (__stlxr(v991, v854));
              goto LABEL_2015;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1641 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1641, *a4);
              *a4 = (uint64_t)v1641;
              *v1641 = 1;
              do
              {
                v1642 = __ldaxr(v1353);
                v1571 = --v1642 == 0;
              }
              while (__stlxr(v1642, v1353));
              goto LABEL_2509;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1543 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1543, *a4);
              *a4 = (uint64_t)v1543;
              *v1543 = 1;
              do
              {
                v1544 = __ldaxr(v1353);
                v1356 = --v1544 == 0;
              }
              while (__stlxr(v1544, v1353));
              goto LABEL_2426;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1648 = operator new();
              v1649 = *a4;
              *(_QWORD *)v1648 = *(_QWORD *)*a4;
              *(_QWORD *)(v1648 + 8) = *(_QWORD *)(v1649 + 8);
              v1650 = *(_QWORD *)(v1649 + 16);
              *(_QWORD *)(v1648 + 16) = v1650;
              if (v1650)
              {
                v1651 = (unsigned int *)(v1650 + 8);
                do
                  v1652 = __ldxr(v1651);
                while (__stxr(v1652 + 1, v1651));
              }
              v1653 = *(_OWORD *)(v1649 + 24);
              v1654 = *(_OWORD *)(v1649 + 40);
              *(_OWORD *)(v1648 + 56) = *(_OWORD *)(v1649 + 56);
              *(_OWORD *)(v1648 + 40) = v1654;
              *(_OWORD *)(v1648 + 24) = v1653;
              *a4 = v1648;
              *(_QWORD *)v1648 = 1;
              do
              {
                v1655 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1655 == 0;
              }
              while (__stlxr(v1655, (unint64_t *)v1590));
              goto LABEL_2519;
            case 9:
              v1092 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1319 = (_QWORD *)operator new();
              v1320 = *a4 + 8;
              *v1319 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1319 + 1, v1320);
              *a4 = (uint64_t)v1319;
              *v1319 = 1;
              do
              {
                v1321 = __ldaxr(v1092);
                v1096 = --v1321 == 0;
              }
              while (__stlxr(v1321, v1092));
              goto LABEL_2291;
            default:
              goto LABEL_2637;
          }
        case 3:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v231 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v272 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v272, *a4);
              *a4 = (uint64_t)v272;
              *v272 = 1;
              do
              {
                v273 = __ldaxr((unint64_t *)v231);
                v234 = --v273 == 0;
              }
              while (__stlxr(v273, (unint64_t *)v231));
              goto LABEL_2263;
            case 3:
              v1097 = *(_QWORD *)a3;
              v1098 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1099 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1099, *a4);
                *a4 = (uint64_t)v1099;
                *v1099 = 1;
                do
                {
                  v1100 = __ldaxr(v1098);
                  v1101 = v1100 - 1;
                }
                while (__stlxr(v1101, v1098));
                if (!v1101)
                {
                  v1102 = (void *)v1098[1];
                  if (v1102)
                  {
                    v1098[2] = (unint64_t)v1102;
                    operator delete(v1102);
                  }
                  MEMORY[0x219A19A08](v1098, 0x1080C409938AC02);
                }
              }
              v1103 = *a4;
              turi::flexible_type_fail(*(_QWORD *)(*a4 + 16) - *(_QWORD *)(*a4 + 8) == *(_QWORD *)(v1097 + 16)
                                                                                     - *(_QWORD *)(v1097 + 8));
              v1104 = *(double **)(v1103 + 8);
              v1105 = *(_QWORD *)(v1103 + 16) - (_QWORD)v1104;
              if (v1105)
              {
                v1106 = v1105 >> 3;
                v1107 = *(double **)(v1097 + 8);
                if (v1106 <= 1)
                  v1106 = 1;
                do
                {
                  v1108 = *v1107++;
                  *v1104 = v1108 + *v1104;
                  ++v1104;
                  --v1106;
                }
                while (v1106);
              }
              return;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1704 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1704, *a4);
              *a4 = (uint64_t)v1704;
              *v1704 = 1;
              do
              {
                v1705 = __ldaxr(v1353);
                v1571 = --v1705 == 0;
              }
              while (__stlxr(v1705, v1353));
              goto LABEL_2509;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1603 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1603, *a4);
              *a4 = (uint64_t)v1603;
              *v1603 = 1;
              do
              {
                v1604 = __ldaxr(v1353);
                v1356 = --v1604 == 0;
              }
              while (__stlxr(v1604, v1353));
              goto LABEL_2426;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1714 = operator new();
              v1715 = *a4;
              *(_QWORD *)v1714 = *(_QWORD *)*a4;
              *(_QWORD *)(v1714 + 8) = *(_QWORD *)(v1715 + 8);
              v1716 = *(_QWORD *)(v1715 + 16);
              *(_QWORD *)(v1714 + 16) = v1716;
              if (v1716)
              {
                v1717 = (unsigned int *)(v1716 + 8);
                do
                  v1718 = __ldxr(v1717);
                while (__stxr(v1718 + 1, v1717));
              }
              v1719 = *(_OWORD *)(v1715 + 24);
              v1720 = *(_OWORD *)(v1715 + 40);
              *(_OWORD *)(v1714 + 56) = *(_OWORD *)(v1715 + 56);
              *(_OWORD *)(v1714 + 40) = v1720;
              *(_OWORD *)(v1714 + 24) = v1719;
              *a4 = v1714;
              *(_QWORD *)v1714 = 1;
              do
              {
                v1721 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1721 == 0;
              }
              while (__stlxr(v1721, (unint64_t *)v1590));
              goto LABEL_2519;
            case 9:
              v1092 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1432 = (_QWORD *)operator new();
              v1433 = *a4 + 8;
              *v1432 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1432 + 1, v1433);
              *a4 = (uint64_t)v1432;
              *v1432 = 1;
              do
              {
                v1434 = __ldaxr(v1092);
                v1096 = --v1434 == 0;
              }
              while (__stlxr(v1434, v1092));
              goto LABEL_2291;
            default:
              goto LABEL_2637;
          }
        case 4:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v231 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v232 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v232, *a4);
              *a4 = (uint64_t)v232;
              *v232 = 1;
              do
              {
                v233 = __ldaxr((unint64_t *)v231);
                v234 = --v233 == 0;
              }
              while (__stlxr(v233, (unint64_t *)v231));
              goto LABEL_2263;
            case 3:
              v854 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v855 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v855, *a4);
              *a4 = (uint64_t)v855;
              *v855 = 1;
              do
              {
                v856 = __ldaxr(v854);
                v857 = --v856 == 0;
              }
              while (__stlxr(v856, v854));
              goto LABEL_2015;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1569 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1569, *a4);
              *a4 = (uint64_t)v1569;
              *v1569 = 1;
              do
              {
                v1570 = __ldaxr(v1353);
                v1571 = --v1570 == 0;
              }
              while (__stlxr(v1570, v1353));
              goto LABEL_2509;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1354 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1354, *a4);
              *a4 = (uint64_t)v1354;
              *v1354 = 1;
              do
              {
                v1355 = __ldaxr(v1353);
                v1356 = --v1355 == 0;
              }
              while (__stlxr(v1355, v1353));
              goto LABEL_2426;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1591 = operator new();
              v1592 = *a4;
              *(_QWORD *)v1591 = *(_QWORD *)*a4;
              *(_QWORD *)(v1591 + 8) = *(_QWORD *)(v1592 + 8);
              v1593 = *(_QWORD *)(v1592 + 16);
              *(_QWORD *)(v1591 + 16) = v1593;
              if (v1593)
              {
                v1594 = (unsigned int *)(v1593 + 8);
                do
                  v1595 = __ldxr(v1594);
                while (__stxr(v1595 + 1, v1594));
              }
              v1596 = *(_OWORD *)(v1592 + 24);
              v1597 = *(_OWORD *)(v1592 + 40);
              *(_OWORD *)(v1591 + 56) = *(_OWORD *)(v1592 + 56);
              *(_OWORD *)(v1591 + 40) = v1597;
              *(_OWORD *)(v1591 + 24) = v1596;
              *a4 = v1591;
              *(_QWORD *)v1591 = 1;
              do
              {
                v1598 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1598 == 0;
              }
              while (__stlxr(v1598, (unint64_t *)v1590));
              goto LABEL_2519;
            case 9:
              v1092 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1093 = (_QWORD *)operator new();
              v1094 = *a4 + 8;
              *v1093 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1093 + 1, v1094);
              *a4 = (uint64_t)v1093;
              *v1093 = 1;
              do
              {
                v1095 = __ldaxr(v1092);
                v1096 = --v1095 == 0;
              }
              while (__stlxr(v1095, v1092));
              goto LABEL_2291;
            default:
              goto LABEL_2637;
          }
        case 5:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v231 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v282 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v282, *a4);
              *a4 = (uint64_t)v282;
              *v282 = 1;
              do
              {
                v283 = __ldaxr((unint64_t *)v231);
                v234 = --v283 == 0;
              }
              while (__stlxr(v283, (unint64_t *)v231));
              goto LABEL_2263;
            case 3:
              v854 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1357 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1357, *a4);
              *a4 = (uint64_t)v1357;
              *v1357 = 1;
              do
              {
                v1358 = __ldaxr(v854);
                v857 = --v1358 == 0;
              }
              while (__stlxr(v1358, v854));
              goto LABEL_2015;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1774 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1774, *a4);
              *a4 = (uint64_t)v1774;
              *v1774 = 1;
              do
              {
                v1775 = __ldaxr(v1353);
                v1571 = --v1775 == 0;
              }
              while (__stlxr(v1775, v1353));
              goto LABEL_2509;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1686 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1686, *a4);
              *a4 = (uint64_t)v1686;
              *v1686 = 1;
              do
              {
                v1687 = __ldaxr(v1353);
                v1356 = --v1687 == 0;
              }
              while (__stlxr(v1687, v1353));
              goto LABEL_2426;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1784 = operator new();
              v1785 = *a4;
              *(_QWORD *)v1784 = *(_QWORD *)*a4;
              *(_QWORD *)(v1784 + 8) = *(_QWORD *)(v1785 + 8);
              v1786 = *(_QWORD *)(v1785 + 16);
              *(_QWORD *)(v1784 + 16) = v1786;
              if (v1786)
              {
                v1787 = (unsigned int *)(v1786 + 8);
                do
                  v1788 = __ldxr(v1787);
                while (__stxr(v1788 + 1, v1787));
              }
              v1789 = *(_OWORD *)(v1785 + 24);
              v1790 = *(_OWORD *)(v1785 + 40);
              *(_OWORD *)(v1784 + 56) = *(_OWORD *)(v1785 + 56);
              *(_OWORD *)(v1784 + 40) = v1790;
              *(_OWORD *)(v1784 + 24) = v1789;
              *a4 = v1784;
              *(_QWORD *)v1784 = 1;
              do
              {
                v1791 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1791 == 0;
              }
              while (__stlxr(v1791, (unint64_t *)v1590));
              goto LABEL_2519;
            case 9:
              v1092 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1600 = (_QWORD *)operator new();
              v1601 = *a4 + 8;
              *v1600 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1600 + 1, v1601);
              *a4 = (uint64_t)v1600;
              *v1600 = 1;
              do
              {
                v1602 = __ldaxr(v1092);
                v1096 = --v1602 == 0;
              }
              while (__stlxr(v1602, v1092));
              goto LABEL_2291;
            default:
              goto LABEL_2637;
          }
        case 6:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v231 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v284 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v284, *a4);
              *a4 = (uint64_t)v284;
              *v284 = 1;
              do
              {
                v285 = __ldaxr((unint64_t *)v231);
                v234 = --v285 == 0;
              }
              while (__stlxr(v285, (unint64_t *)v231));
              goto LABEL_2263;
            case 3:
              v854 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1422 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1422, *a4);
              *a4 = (uint64_t)v1422;
              *v1422 = 1;
              do
              {
                v1423 = __ldaxr(v854);
                v857 = --v1423 == 0;
              }
              while (__stlxr(v1423, v854));
              goto LABEL_2015;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1792 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1792, *a4);
              *a4 = (uint64_t)v1792;
              *v1792 = 1;
              do
              {
                v1793 = __ldaxr(v1353);
                v1571 = --v1793 == 0;
              }
              while (__stlxr(v1793, v1353));
              goto LABEL_2509;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1712 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1712, *a4);
              *a4 = (uint64_t)v1712;
              *v1712 = 1;
              do
              {
                v1713 = __ldaxr(v1353);
                v1356 = --v1713 == 0;
              }
              while (__stlxr(v1713, v1353));
              goto LABEL_2426;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1794 = operator new();
              v1795 = *a4;
              *(_QWORD *)v1794 = *(_QWORD *)*a4;
              *(_QWORD *)(v1794 + 8) = *(_QWORD *)(v1795 + 8);
              v1796 = *(_QWORD *)(v1795 + 16);
              *(_QWORD *)(v1794 + 16) = v1796;
              if (v1796)
              {
                v1797 = (unsigned int *)(v1796 + 8);
                do
                  v1798 = __ldxr(v1797);
                while (__stxr(v1798 + 1, v1797));
              }
              v1799 = *(_OWORD *)(v1795 + 24);
              v1800 = *(_OWORD *)(v1795 + 40);
              *(_OWORD *)(v1794 + 56) = *(_OWORD *)(v1795 + 56);
              *(_OWORD *)(v1794 + 40) = v1800;
              *(_OWORD *)(v1794 + 24) = v1799;
              *a4 = v1794;
              *(_QWORD *)v1794 = 1;
              do
              {
                v1801 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1801 == 0;
              }
              while (__stlxr(v1801, (unint64_t *)v1590));
              goto LABEL_2519;
            case 9:
              v1092 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1611 = (_QWORD *)operator new();
              v1612 = *a4 + 8;
              *v1611 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1611 + 1, v1612);
              *a4 = (uint64_t)v1611;
              *v1611 = 1;
              do
              {
                v1613 = __ldaxr(v1092);
                v1096 = --v1613 == 0;
              }
              while (__stlxr(v1613, v1092));
              goto LABEL_2291;
            default:
              goto LABEL_2637;
          }
        case 7:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v231 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v274 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v274, *a4);
              *a4 = (uint64_t)v274;
              *v274 = 1;
              do
              {
                v275 = __ldaxr((unint64_t *)v231);
                v234 = --v275 == 0;
              }
              while (__stlxr(v275, (unint64_t *)v231));
              goto LABEL_2263;
            case 3:
              v854 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1137 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1137, *a4);
              *a4 = (uint64_t)v1137;
              *v1137 = 1;
              do
              {
                v1138 = __ldaxr(v854);
                v857 = --v1138 == 0;
              }
              while (__stlxr(v1138, v854));
              goto LABEL_2015;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1710 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1710, *a4);
              *a4 = (uint64_t)v1710;
              *v1710 = 1;
              do
              {
                v1711 = __ldaxr(v1353);
                v1571 = --v1711 == 0;
              }
              while (__stlxr(v1711, v1353));
              goto LABEL_2509;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1607 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1607, *a4);
              *a4 = (uint64_t)v1607;
              *v1607 = 1;
              do
              {
                v1608 = __ldaxr(v1353);
                v1356 = --v1608 == 0;
              }
              while (__stlxr(v1608, v1353));
              goto LABEL_2426;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1722 = operator new();
              v1723 = *a4;
              *(_QWORD *)v1722 = *(_QWORD *)*a4;
              *(_QWORD *)(v1722 + 8) = *(_QWORD *)(v1723 + 8);
              v1724 = *(_QWORD *)(v1723 + 16);
              *(_QWORD *)(v1722 + 16) = v1724;
              if (v1724)
              {
                v1725 = (unsigned int *)(v1724 + 8);
                do
                  v1726 = __ldxr(v1725);
                while (__stxr(v1726 + 1, v1725));
              }
              v1727 = *(_OWORD *)(v1723 + 24);
              v1728 = *(_OWORD *)(v1723 + 40);
              *(_OWORD *)(v1722 + 56) = *(_OWORD *)(v1723 + 56);
              *(_OWORD *)(v1722 + 40) = v1728;
              *(_OWORD *)(v1722 + 24) = v1727;
              *a4 = v1722;
              *(_QWORD *)v1722 = 1;
              do
              {
                v1729 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1729 == 0;
              }
              while (__stlxr(v1729, (unint64_t *)v1590));
              goto LABEL_2519;
            case 9:
              v1092 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1446 = (_QWORD *)operator new();
              v1447 = *a4 + 8;
              *v1446 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1446 + 1, v1447);
              *a4 = (uint64_t)v1446;
              *v1446 = 1;
              do
              {
                v1448 = __ldaxr(v1092);
                v1096 = --v1448 == 0;
              }
              while (__stlxr(v1448, v1092));
              goto LABEL_2291;
            default:
              goto LABEL_2637;
          }
        case 8:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v231 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v286 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v286, *a4);
              *a4 = (uint64_t)v286;
              *v286 = 1;
              do
              {
                v287 = __ldaxr((unint64_t *)v231);
                v234 = --v287 == 0;
              }
              while (__stlxr(v287, (unint64_t *)v231));
              goto LABEL_2263;
            case 3:
              v854 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1437 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1437, *a4);
              *a4 = (uint64_t)v1437;
              *v1437 = 1;
              do
              {
                v1438 = __ldaxr(v854);
                v857 = --v1438 == 0;
              }
              while (__stlxr(v1438, v854));
              goto LABEL_2015;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1802 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1802, *a4);
              *a4 = (uint64_t)v1802;
              *v1802 = 1;
              do
              {
                v1803 = __ldaxr(v1353);
                v1571 = --v1803 == 0;
              }
              while (__stlxr(v1803, v1353));
              goto LABEL_2509;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1730 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1730, *a4);
              *a4 = (uint64_t)v1730;
              *v1730 = 1;
              do
              {
                v1731 = __ldaxr(v1353);
                v1356 = --v1731 == 0;
              }
              while (__stlxr(v1731, v1353));
              goto LABEL_2426;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1804 = operator new();
              v1805 = *a4;
              *(_QWORD *)v1804 = *(_QWORD *)*a4;
              *(_QWORD *)(v1804 + 8) = *(_QWORD *)(v1805 + 8);
              v1806 = *(_QWORD *)(v1805 + 16);
              *(_QWORD *)(v1804 + 16) = v1806;
              if (v1806)
              {
                v1807 = (unsigned int *)(v1806 + 8);
                do
                  v1808 = __ldxr(v1807);
                while (__stxr(v1808 + 1, v1807));
              }
              v1809 = *(_OWORD *)(v1805 + 24);
              v1810 = *(_OWORD *)(v1805 + 40);
              *(_OWORD *)(v1804 + 56) = *(_OWORD *)(v1805 + 56);
              *(_OWORD *)(v1804 + 40) = v1810;
              *(_OWORD *)(v1804 + 24) = v1809;
              *a4 = v1804;
              *(_QWORD *)v1804 = 1;
              do
              {
                v1811 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1811 == 0;
              }
              while (__stlxr(v1811, (unint64_t *)v1590));
              goto LABEL_2519;
            case 9:
              v1092 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1637 = (_QWORD *)operator new();
              v1638 = *a4 + 8;
              *v1637 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1637 + 1, v1638);
              *a4 = (uint64_t)v1637;
              *v1637 = 1;
              do
              {
                v1639 = __ldaxr(v1092);
                v1096 = --v1639 == 0;
              }
              while (__stlxr(v1639, v1092));
LABEL_2291:
              if (!v1096)
                goto LABEL_2524;
              v1440 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1092);
              v1640 = 2071181815;
              goto LABEL_2522;
            default:
              goto LABEL_2637;
          }
        case 9:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v231 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v239 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v239, *a4);
              *a4 = (uint64_t)v239;
              *v239 = 1;
              do
              {
                v240 = __ldaxr((unint64_t *)v231);
                v234 = --v240 == 0;
              }
              while (__stlxr(v240, (unint64_t *)v231));
LABEL_2263:
              if (!v234)
                goto LABEL_2524;
              if (*(char *)(v231 + 31) < 0)
                operator delete(*(void **)(v231 + 8));
              v1440 = (_QWORD *)v231;
              v1441 = 0x1012C404EF22A49;
              goto LABEL_2523;
            case 3:
              v854 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v928 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v928, *a4);
              *a4 = (uint64_t)v928;
              *v928 = 1;
              do
              {
                v929 = __ldaxr(v854);
                v857 = --v929 == 0;
              }
              while (__stlxr(v929, v854));
LABEL_2015:
              if (!v857)
                goto LABEL_2524;
              v1439 = (void *)v854[1];
              if (v1439)
              {
                v854[2] = (unint64_t)v1439;
                operator delete(v1439);
              }
              v1440 = v854;
              v1441 = 0x1080C409938AC02;
              goto LABEL_2523;
            case 4:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1609 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1609, *a4);
              *a4 = (uint64_t)v1609;
              *v1609 = 1;
              do
              {
                v1610 = __ldaxr(v1353);
                v1571 = --v1610 == 0;
              }
              while (__stlxr(v1610, v1353));
LABEL_2509:
              if (!v1571)
                goto LABEL_2524;
              __p[0] = v1353 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_2512;
            case 5:
              v1353 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1444 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1444, *a4);
              *a4 = (uint64_t)v1444;
              *v1444 = 1;
              do
              {
                v1445 = __ldaxr(v1353);
                v1356 = --v1445 == 0;
              }
              while (__stlxr(v1445, v1353));
LABEL_2426:
              if (!v1356)
                goto LABEL_2524;
              __p[0] = v1353 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_2512:
              v1440 = v1353;
              v1441 = 0x1020C405E66F15BLL;
              goto LABEL_2523;
            case 8:
              v1590 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1629 = operator new();
              v1630 = *a4;
              *(_QWORD *)v1629 = *(_QWORD *)*a4;
              *(_QWORD *)(v1629 + 8) = *(_QWORD *)(v1630 + 8);
              v1631 = *(_QWORD *)(v1630 + 16);
              *(_QWORD *)(v1629 + 16) = v1631;
              if (v1631)
              {
                v1632 = (unsigned int *)(v1631 + 8);
                do
                  v1633 = __ldxr(v1632);
                while (__stxr(v1633 + 1, v1632));
              }
              v1634 = *(_OWORD *)(v1630 + 24);
              v1635 = *(_OWORD *)(v1630 + 40);
              *(_OWORD *)(v1629 + 56) = *(_OWORD *)(v1630 + 56);
              *(_OWORD *)(v1629 + 40) = v1635;
              *(_OWORD *)(v1629 + 24) = v1634;
              *a4 = v1629;
              *(_QWORD *)v1629 = 1;
              do
              {
                v1636 = __ldaxr((unint64_t *)v1590);
                v1599 = --v1636 == 0;
              }
              while (__stlxr(v1636, (unint64_t *)v1590));
LABEL_2519:
              if (!v1599)
                goto LABEL_2524;
              boost::detail::shared_count::~shared_count((unsigned int **)(v1590 + 16));
              v1440 = (_QWORD *)v1590;
              v1640 = -235920773;
LABEL_2522:
              v1441 = v1640 | 0x1030C4000000000;
LABEL_2523:
              MEMORY[0x219A19A08](v1440, v1441);
              goto LABEL_2524;
            case 9:
              v1182 = *(_QWORD *)a3;
              v1183 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1184 = (_QWORD *)operator new();
                v1185 = *a4 + 8;
                *v1184 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v1184 + 1, v1185);
                *a4 = (uint64_t)v1184;
                *v1184 = 1;
                do
                {
                  v1186 = __ldaxr(v1183);
                  v1187 = v1186 - 1;
                }
                while (__stlxr(v1187, v1183));
                if (!v1187)
                {
                  v1188 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1183);
                  MEMORY[0x219A19A08](v1188, 0x1030C407B73B9F7);
                }
              }
              v1189 = *a4;
              v1190 = (uint64_t *)(*a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v1190, v1182 + 8))
                turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              v1192 = *(uint64_t **)(v1189 + 24);
              v1191 = *(uint64_t **)(v1189 + 32);
              if (v1191 == v1192)
                return;
              if (!*v1190)
                return;
              v1193 = 1;
              do
              {
                v1194 = *v1192++;
                v1193 *= v1194;
              }
              while (v1192 != v1191);
              if (!v1193)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v1190);
              v1195 = (uint64_t)(*(_QWORD *)(v1189 + 32) - *(_QWORD *)(v1189 + 24)) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v1195, &__str);
              do
              {
                v1196 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  v1205 = 0;
                  v1206 = *(double *)(**(_QWORD **)(v1182 + 8) + 8 * *(_QWORD *)(v1182 + 72));
                }
                else
                {
                  v1197 = 0;
                  v1198 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v1199 = *(uint64_t **)(v1182 + 48);
                  if (v1198 <= 1)
                    v1198 = 1;
                  v1200 = (uint64_t *)__p[0];
                  v1201 = v1198;
                  do
                  {
                    v1203 = *v1200++;
                    v1202 = v1203;
                    v1204 = *v1199++;
                    v1197 += v1204 * v1202;
                    --v1201;
                  }
                  while (v1201);
                  v1205 = 0;
                  v1206 = *(double *)(**(_QWORD **)(v1182 + 8) + 8 * (*(_QWORD *)(v1182 + 72) + v1197));
                  v1207 = *(uint64_t **)(v1189 + 48);
                  do
                  {
                    v1209 = *v1196++;
                    v1208 = v1209;
                    v1210 = *v1207++;
                    v1205 += v1210 * v1208;
                    --v1198;
                  }
                  while (v1198);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1190);
                *(double *)(**(_QWORD **)(v1189 + 8) + 8 * (*(_QWORD *)(v1189 + 72) + v1205)) = v1206
                                                                                              + *(double *)(**(_QWORD **)(v1189 + 8) + 8 * (*(_QWORD *)(v1189 + 72) + v1205));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v1190, (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        default:
          goto LABEL_2637;
      }
    case 0xB:
      *a4 = 0;
      *((_DWORD *)a4 + 2) = 0;
      *((_BYTE *)a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)((char *)this + 5);
        *a4 = *(_QWORD *)this;
        v36 = *((unsigned __int8 *)this + 12);
        *((_BYTE *)a4 + 12) = v36;
        if (v36 <= 9 && ((1 << v36) & 0x33C) != 0)
        {
          v37 = (unint64_t *)*a4;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 + 1, v37));
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v19 = *a4 - *(_QWORD *)a3;
              goto LABEL_2535;
            case 1:
              v1461 = (double)*(uint64_t *)a3;
              goto LABEL_2235;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1565 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v1565, *a4);
              *a4 = (uint64_t)v1565;
              *v1565 = 1;
              do
              {
                v1566 = __ldaxr((unint64_t *)v198);
                v201 = --v1566 == 0;
              }
              while (__stlxr(v1566, (unint64_t *)v198));
              goto LABEL_2191;
            case 3:
              v1287 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1288 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1288, *a4);
                *a4 = (uint64_t)v1288;
                *v1288 = 1;
                do
                {
                  v1289 = __ldaxr(v1287);
                  v1290 = v1289 - 1;
                }
                while (__stlxr(v1290, v1287));
                if (!v1290)
                {
                  v1291 = (void *)v1287[1];
                  if (v1291)
                  {
                    v1287[2] = (unint64_t)v1291;
                    operator delete(v1291);
                  }
                  MEMORY[0x219A19A08](v1287, 0x1080C409938AC02);
                }
              }
              v1292 = *(double **)(*a4 + 8);
              v1293 = *(_QWORD *)(*a4 + 16) - (_QWORD)v1292;
              if (v1293)
              {
                v1294 = v1293 >> 3;
                v1295 = (double)*(uint64_t *)a3;
                if (v1294 <= 1)
                  v1294 = 1;
                do
                {
                  *v1292 = *v1292 - v1295;
                  ++v1292;
                  --v1294;
                }
                while (v1294);
              }
              return;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1656 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1656, *a4);
              *a4 = (uint64_t)v1656;
              *v1656 = 1;
              do
              {
                v1657 = __ldaxr(v1269);
                v1520 = --v1657 == 0;
              }
              while (__stlxr(v1657, v1269));
              goto LABEL_2468;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1682 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1682, *a4);
              *a4 = (uint64_t)v1682;
              *v1682 = 1;
              do
              {
                v1683 = __ldaxr(v1269);
                v1272 = --v1683 == 0;
              }
              while (__stlxr(v1683, v1269));
              goto LABEL_2360;
            case 6:
              v1572 = *a4;
              v1573 = *a4 - *(_QWORD *)a3;
LABEL_2276:
              *a4 = v1572 & 0xFF00000000000000 | v1573 & 0xFFFFFFFFFFFFFFLL;
              return;
            case 7:
              goto LABEL_2524;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1688 = operator new();
              v1689 = *a4;
              *(_QWORD *)v1688 = *(_QWORD *)*a4;
              *(_QWORD *)(v1688 + 8) = *(_QWORD *)(v1689 + 8);
              v1690 = *(_QWORD *)(v1689 + 16);
              *(_QWORD *)(v1688 + 16) = v1690;
              if (v1690)
              {
                v1691 = (unsigned int *)(v1690 + 8);
                do
                  v1692 = __ldxr(v1691);
                while (__stxr(v1692 + 1, v1691));
              }
              v1693 = *(_OWORD *)(v1689 + 24);
              v1694 = *(_OWORD *)(v1689 + 40);
              *(_OWORD *)(v1688 + 56) = *(_OWORD *)(v1689 + 56);
              *(_OWORD *)(v1688 + 40) = v1694;
              *(_OWORD *)(v1688 + 24) = v1693;
              *a4 = v1688;
              *(_QWORD *)v1688 = 1;
              do
              {
                v1695 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1695 == 0;
              }
              while (__stlxr(v1695, (unint64_t *)v1523));
              goto LABEL_2482;
            case 9:
              v1364 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1365 = (_QWORD *)operator new();
                v1366 = *a4 + 8;
                *v1365 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v1365 + 1, v1366);
                *a4 = (uint64_t)v1365;
                *v1365 = 1;
                do
                {
                  v1367 = __ldaxr(v1364);
                  v1368 = v1367 - 1;
                }
                while (__stlxr(v1368, v1364));
                if (!v1368)
                {
                  v1369 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1364);
                  MEMORY[0x219A19A08](v1369, 0x1030C407B73B9F7);
                }
              }
              v1370 = (uint64_t *)*a4;
              v1372 = *(uint64_t **)(*a4 + 24);
              v1371 = *(uint64_t **)(*a4 + 32);
              if (v1371 == v1372)
                return;
              if (!v1370[1])
                return;
              v1373 = (double)*(uint64_t *)a3;
              v1374 = 1;
              do
              {
                v1375 = *v1372++;
                v1374 *= v1375;
              }
              while (v1372 != v1371);
              if (!v1374)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v1370 + 1);
              v1376 = (v1370[4] - v1370[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v1376, &__str);
              do
              {
                v1377 = (uint64_t *)__p[0];
                v1378 = 0;
                if (__p[1] != __p[0])
                {
                  v1379 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v1380 = (uint64_t *)v1370[6];
                  if (v1379 <= 1)
                    v1379 = 1;
                  do
                  {
                    v1382 = *v1377++;
                    v1381 = v1382;
                    v1383 = *v1380++;
                    v1378 += v1383 * v1381;
                    --v1379;
                  }
                  while (v1379);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1370 + 1);
                *(double *)(*(_QWORD *)v1370[1] + 8 * (v1370[9] + v1378)) = *(double *)(*(_QWORD *)v1370[1]
                                                                                      + 8 * (v1370[9] + v1378))
                                                                          - v1373;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v1370 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        case 1:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v68 = (double)*a4 - *(double *)a3;
              goto LABEL_544;
            case 1:
              v1461 = *(double *)a3;
LABEL_2235:
              v676 = *(double *)a4 - v1461;
              goto LABEL_2295;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1567 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v1567, *a4);
              *a4 = (uint64_t)v1567;
              *v1567 = 1;
              do
              {
                v1568 = __ldaxr((unint64_t *)v198);
                v201 = --v1568 == 0;
              }
              while (__stlxr(v1568, (unint64_t *)v198));
              goto LABEL_2191;
            case 3:
              v1296 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1297 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1297, *a4);
                *a4 = (uint64_t)v1297;
                *v1297 = 1;
                do
                {
                  v1298 = __ldaxr(v1296);
                  v1299 = v1298 - 1;
                }
                while (__stlxr(v1299, v1296));
                if (!v1299)
                {
                  v1300 = (void *)v1296[1];
                  if (v1300)
                  {
                    v1296[2] = (unint64_t)v1300;
                    operator delete(v1300);
                  }
                  MEMORY[0x219A19A08](v1296, 0x1080C409938AC02);
                }
              }
              v1301 = *(double **)(*a4 + 8);
              v1302 = *(_QWORD *)(*a4 + 16) - (_QWORD)v1301;
              if (v1302)
              {
                v1303 = *(double *)a3;
                v1304 = v1302 >> 3;
                if (v1304 <= 1)
                  v1304 = 1;
                do
                {
                  *v1301 = *v1301 - v1303;
                  ++v1301;
                  --v1304;
                }
                while (v1304);
              }
              return;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1658 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1658, *a4);
              *a4 = (uint64_t)v1658;
              *v1658 = 1;
              do
              {
                v1659 = __ldaxr(v1269);
                v1520 = --v1659 == 0;
              }
              while (__stlxr(v1659, v1269));
              goto LABEL_2468;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1684 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1684, *a4);
              *a4 = (uint64_t)v1684;
              *v1684 = 1;
              do
              {
                v1685 = __ldaxr(v1269);
                v1272 = --v1685 == 0;
              }
              while (__stlxr(v1685, v1269));
              goto LABEL_2360;
            case 6:
              v1574 = (*(double *)a3 - (double)(uint64_t)floor(*(double *)a3)) * 1000000.0;
              v1575 = *a4;
              v1576 = *a4 - vcvtmd_s64_f64(*(double *)a3);
              *a4 = *a4 & 0xFF00000000000000 | v1576 & 0xFFFFFFFFFFFFFFLL;
              v1577 = *((int *)a4 + 2) - (uint64_t)v1574;
              if (v1577 < 0)
              {
                *a4 = (v1576 - 1) & 0xFFFFFFFFFFFFFFLL | v1575 & 0xFF00000000000000;
                LODWORD(v1577) = v1577 + 1000000;
              }
              if (v1577 > 0xF423F)
                turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
LABEL_2280:
              *((_DWORD *)a4 + 2) = v1577;
              return;
            case 7:
              goto LABEL_2524;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1696 = operator new();
              v1697 = *a4;
              *(_QWORD *)v1696 = *(_QWORD *)*a4;
              *(_QWORD *)(v1696 + 8) = *(_QWORD *)(v1697 + 8);
              v1698 = *(_QWORD *)(v1697 + 16);
              *(_QWORD *)(v1696 + 16) = v1698;
              if (v1698)
              {
                v1699 = (unsigned int *)(v1698 + 8);
                do
                  v1700 = __ldxr(v1699);
                while (__stxr(v1700 + 1, v1699));
              }
              v1701 = *(_OWORD *)(v1697 + 24);
              v1702 = *(_OWORD *)(v1697 + 40);
              *(_OWORD *)(v1696 + 56) = *(_OWORD *)(v1697 + 56);
              *(_OWORD *)(v1696 + 40) = v1702;
              *(_OWORD *)(v1696 + 24) = v1701;
              *a4 = v1696;
              *(_QWORD *)v1696 = 1;
              do
              {
                v1703 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1703 == 0;
              }
              while (__stlxr(v1703, (unint64_t *)v1523));
              goto LABEL_2482;
            case 9:
              v1384 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1385 = (_QWORD *)operator new();
                v1386 = *a4 + 8;
                *v1385 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v1385 + 1, v1386);
                *a4 = (uint64_t)v1385;
                *v1385 = 1;
                do
                {
                  v1387 = __ldaxr(v1384);
                  v1388 = v1387 - 1;
                }
                while (__stlxr(v1388, v1384));
                if (!v1388)
                {
                  v1389 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1384);
                  MEMORY[0x219A19A08](v1389, 0x1030C407B73B9F7);
                }
              }
              v1390 = (uint64_t *)*a4;
              v1392 = *(uint64_t **)(*a4 + 24);
              v1391 = *(uint64_t **)(*a4 + 32);
              if (v1391 == v1392)
                return;
              if (!v1390[1])
                return;
              v1393 = *(double *)a3;
              v1394 = 1;
              do
              {
                v1395 = *v1392++;
                v1394 *= v1395;
              }
              while (v1392 != v1391);
              if (!v1394)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v1390 + 1);
              v1396 = (v1390[4] - v1390[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v1396, &__str);
              do
              {
                v1397 = (uint64_t *)__p[0];
                v1398 = 0;
                if (__p[1] != __p[0])
                {
                  v1399 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v1400 = (uint64_t *)v1390[6];
                  if (v1399 <= 1)
                    v1399 = 1;
                  do
                  {
                    v1402 = *v1397++;
                    v1401 = v1402;
                    v1403 = *v1400++;
                    v1398 += v1403 * v1401;
                    --v1399;
                  }
                  while (v1399);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1390 + 1);
                *(double *)(*(_QWORD *)v1390[1] + 8 * (v1390[9] + v1398)) = *(double *)(*(_QWORD *)v1390[1]
                                                                                      + 8 * (v1390[9] + v1398))
                                                                          - v1393;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v1390 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        case 2:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v237 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v237, *a4);
              *a4 = (uint64_t)v237;
              *v237 = 1;
              do
              {
                v238 = __ldaxr((unint64_t *)v198);
                v201 = --v238 == 0;
              }
              while (__stlxr(v238, (unint64_t *)v198));
              goto LABEL_2191;
            case 3:
              v775 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v926 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v926, *a4);
              *a4 = (uint64_t)v926;
              *v926 = 1;
              do
              {
                v927 = __ldaxr(v775);
                v778 = --v927 == 0;
              }
              while (__stlxr(v927, v775));
              goto LABEL_1900;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1605 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1605, *a4);
              *a4 = (uint64_t)v1605;
              *v1605 = 1;
              do
              {
                v1606 = __ldaxr(v1269);
                v1520 = --v1606 == 0;
              }
              while (__stlxr(v1606, v1269));
              goto LABEL_2468;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1442 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1442, *a4);
              *a4 = (uint64_t)v1442;
              *v1442 = 1;
              do
              {
                v1443 = __ldaxr(v1269);
                v1272 = --v1443 == 0;
              }
              while (__stlxr(v1443, v1269));
              goto LABEL_2360;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1618 = operator new();
              v1619 = *a4;
              *(_QWORD *)v1618 = *(_QWORD *)*a4;
              *(_QWORD *)(v1618 + 8) = *(_QWORD *)(v1619 + 8);
              v1620 = *(_QWORD *)(v1619 + 16);
              *(_QWORD *)(v1618 + 16) = v1620;
              if (v1620)
              {
                v1621 = (unsigned int *)(v1620 + 8);
                do
                  v1622 = __ldxr(v1621);
                while (__stxr(v1622 + 1, v1621));
              }
              v1623 = *(_OWORD *)(v1619 + 24);
              v1624 = *(_OWORD *)(v1619 + 40);
              *(_OWORD *)(v1618 + 56) = *(_OWORD *)(v1619 + 56);
              *(_OWORD *)(v1618 + 40) = v1624;
              *(_OWORD *)(v1618 + 24) = v1623;
              *a4 = v1618;
              *(_QWORD *)v1618 = 1;
              do
              {
                v1625 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1625 == 0;
              }
              while (__stlxr(v1625, (unint64_t *)v1523));
              goto LABEL_2482;
            case 9:
              v992 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1179 = (_QWORD *)operator new();
              v1180 = *a4 + 8;
              *v1179 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1179 + 1, v1180);
              *a4 = (uint64_t)v1179;
              *v1179 = 1;
              do
              {
                v1181 = __ldaxr(v992);
                v996 = --v1181 == 0;
              }
              while (__stlxr(v1181, v992));
              goto LABEL_2220;
            default:
              goto LABEL_2637;
          }
        case 3:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v253 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v253, *a4);
              *a4 = (uint64_t)v253;
              *v253 = 1;
              do
              {
                v254 = __ldaxr((unint64_t *)v198);
                v201 = --v254 == 0;
              }
              while (__stlxr(v254, (unint64_t *)v198));
              goto LABEL_2191;
            case 3:
              v1008 = *(_QWORD *)a3;
              v1009 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1010 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1010, *a4);
                *a4 = (uint64_t)v1010;
                *v1010 = 1;
                do
                {
                  v1011 = __ldaxr(v1009);
                  v1012 = v1011 - 1;
                }
                while (__stlxr(v1012, v1009));
                if (!v1012)
                {
                  v1013 = (void *)v1009[1];
                  if (v1013)
                  {
                    v1009[2] = (unint64_t)v1013;
                    operator delete(v1013);
                  }
                  MEMORY[0x219A19A08](v1009, 0x1080C409938AC02);
                }
              }
              v1014 = *a4;
              turi::flexible_type_fail(*(_QWORD *)(*a4 + 16) - *(_QWORD *)(*a4 + 8) == *(_QWORD *)(v1008 + 16)
                                                                                     - *(_QWORD *)(v1008 + 8));
              v1015 = *(double **)(v1014 + 8);
              v1016 = *(_QWORD *)(v1014 + 16) - (_QWORD)v1015;
              if (v1016)
              {
                v1017 = v1016 >> 3;
                v1018 = *(double **)(v1008 + 8);
                if (v1017 <= 1)
                  v1017 = 1;
                do
                {
                  v1019 = *v1018++;
                  *v1015 = *v1015 - v1019;
                  ++v1015;
                  --v1017;
                }
                while (v1017);
              }
              return;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1646 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1646, *a4);
              *a4 = (uint64_t)v1646;
              *v1646 = 1;
              do
              {
                v1647 = __ldaxr(v1269);
                v1520 = --v1647 == 0;
              }
              while (__stlxr(v1647, v1269));
              goto LABEL_2468;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1548 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1548, *a4);
              *a4 = (uint64_t)v1548;
              *v1548 = 1;
              do
              {
                v1549 = __ldaxr(v1269);
                v1272 = --v1549 == 0;
              }
              while (__stlxr(v1549, v1269));
              goto LABEL_2360;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1664 = operator new();
              v1665 = *a4;
              *(_QWORD *)v1664 = *(_QWORD *)*a4;
              *(_QWORD *)(v1664 + 8) = *(_QWORD *)(v1665 + 8);
              v1666 = *(_QWORD *)(v1665 + 16);
              *(_QWORD *)(v1664 + 16) = v1666;
              if (v1666)
              {
                v1667 = (unsigned int *)(v1666 + 8);
                do
                  v1668 = __ldxr(v1667);
                while (__stxr(v1668 + 1, v1667));
              }
              v1669 = *(_OWORD *)(v1665 + 24);
              v1670 = *(_OWORD *)(v1665 + 40);
              *(_OWORD *)(v1664 + 56) = *(_OWORD *)(v1665 + 56);
              *(_OWORD *)(v1664 + 40) = v1670;
              *(_OWORD *)(v1664 + 24) = v1669;
              *a4 = v1664;
              *(_QWORD *)v1664 = 1;
              do
              {
                v1671 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1671 == 0;
              }
              while (__stlxr(v1671, (unint64_t *)v1523));
              goto LABEL_2482;
            case 9:
              v992 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1324 = (_QWORD *)operator new();
              v1325 = *a4 + 8;
              *v1324 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1324 + 1, v1325);
              *a4 = (uint64_t)v1324;
              *v1324 = 1;
              do
              {
                v1326 = __ldaxr(v992);
                v996 = --v1326 == 0;
              }
              while (__stlxr(v1326, v992));
              goto LABEL_2220;
            default:
              goto LABEL_2637;
          }
        case 4:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v199 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v199, *a4);
              *a4 = (uint64_t)v199;
              *v199 = 1;
              do
              {
                v200 = __ldaxr((unint64_t *)v198);
                v201 = --v200 == 0;
              }
              while (__stlxr(v200, (unint64_t *)v198));
              goto LABEL_2191;
            case 3:
              v775 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v776 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v776, *a4);
              *a4 = (uint64_t)v776;
              *v776 = 1;
              do
              {
                v777 = __ldaxr(v775);
                v778 = --v777 == 0;
              }
              while (__stlxr(v777, v775));
              goto LABEL_1900;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1518 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1518, *a4);
              *a4 = (uint64_t)v1518;
              *v1518 = 1;
              do
              {
                v1519 = __ldaxr(v1269);
                v1520 = --v1519 == 0;
              }
              while (__stlxr(v1519, v1269));
              goto LABEL_2468;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1270 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1270, *a4);
              *a4 = (uint64_t)v1270;
              *v1270 = 1;
              do
              {
                v1271 = __ldaxr(v1269);
                v1272 = --v1271 == 0;
              }
              while (__stlxr(v1271, v1269));
              goto LABEL_2360;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1524 = operator new();
              v1525 = *a4;
              *(_QWORD *)v1524 = *(_QWORD *)*a4;
              *(_QWORD *)(v1524 + 8) = *(_QWORD *)(v1525 + 8);
              v1526 = *(_QWORD *)(v1525 + 16);
              *(_QWORD *)(v1524 + 16) = v1526;
              if (v1526)
              {
                v1527 = (unsigned int *)(v1526 + 8);
                do
                  v1528 = __ldxr(v1527);
                while (__stxr(v1528 + 1, v1527));
              }
              v1529 = *(_OWORD *)(v1525 + 24);
              v1530 = *(_OWORD *)(v1525 + 40);
              *(_OWORD *)(v1524 + 56) = *(_OWORD *)(v1525 + 56);
              *(_OWORD *)(v1524 + 40) = v1530;
              *(_OWORD *)(v1524 + 24) = v1529;
              *a4 = v1524;
              *(_QWORD *)v1524 = 1;
              do
              {
                v1531 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1531 == 0;
              }
              while (__stlxr(v1531, (unint64_t *)v1523));
              goto LABEL_2482;
            case 9:
              v992 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v993 = (_QWORD *)operator new();
              v994 = *a4 + 8;
              *v993 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v993 + 1, v994);
              *a4 = (uint64_t)v993;
              *v993 = 1;
              do
              {
                v995 = __ldaxr(v992);
                v996 = --v995 == 0;
              }
              while (__stlxr(v995, v992));
              goto LABEL_2220;
            default:
              goto LABEL_2637;
          }
        case 5:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v276 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v276, *a4);
              *a4 = (uint64_t)v276;
              *v276 = 1;
              do
              {
                v277 = __ldaxr((unint64_t *)v198);
                v201 = --v277 == 0;
              }
              while (__stlxr(v277, (unint64_t *)v198));
              goto LABEL_2191;
            case 3:
              v775 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1285 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1285, *a4);
              *a4 = (uint64_t)v1285;
              *v1285 = 1;
              do
              {
                v1286 = __ldaxr(v775);
                v778 = --v1286 == 0;
              }
              while (__stlxr(v1286, v775));
              goto LABEL_1900;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1752 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1752, *a4);
              *a4 = (uint64_t)v1752;
              *v1752 = 1;
              do
              {
                v1753 = __ldaxr(v1269);
                v1520 = --v1753 == 0;
              }
              while (__stlxr(v1753, v1269));
              goto LABEL_2468;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1644 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1644, *a4);
              *a4 = (uint64_t)v1644;
              *v1644 = 1;
              do
              {
                v1645 = __ldaxr(v1269);
                v1272 = --v1645 == 0;
              }
              while (__stlxr(v1645, v1269));
              goto LABEL_2360;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1754 = operator new();
              v1755 = *a4;
              *(_QWORD *)v1754 = *(_QWORD *)*a4;
              *(_QWORD *)(v1754 + 8) = *(_QWORD *)(v1755 + 8);
              v1756 = *(_QWORD *)(v1755 + 16);
              *(_QWORD *)(v1754 + 16) = v1756;
              if (v1756)
              {
                v1757 = (unsigned int *)(v1756 + 8);
                do
                  v1758 = __ldxr(v1757);
                while (__stxr(v1758 + 1, v1757));
              }
              v1759 = *(_OWORD *)(v1755 + 24);
              v1760 = *(_OWORD *)(v1755 + 40);
              *(_OWORD *)(v1754 + 56) = *(_OWORD *)(v1755 + 56);
              *(_OWORD *)(v1754 + 40) = v1760;
              *(_OWORD *)(v1754 + 24) = v1759;
              *a4 = v1754;
              *(_QWORD *)v1754 = 1;
              do
              {
                v1761 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1761 == 0;
              }
              while (__stlxr(v1761, (unint64_t *)v1523));
              goto LABEL_2482;
            case 9:
              v992 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1545 = (_QWORD *)operator new();
              v1546 = *a4 + 8;
              *v1545 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1545 + 1, v1546);
              *a4 = (uint64_t)v1545;
              *v1545 = 1;
              do
              {
                v1547 = __ldaxr(v992);
                v996 = --v1547 == 0;
              }
              while (__stlxr(v1547, v992));
              goto LABEL_2220;
            default:
              goto LABEL_2637;
          }
        case 6:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v278 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v278, *a4);
              *a4 = (uint64_t)v278;
              *v278 = 1;
              do
              {
                v279 = __ldaxr((unint64_t *)v198);
                v201 = --v279 == 0;
              }
              while (__stlxr(v279, (unint64_t *)v198));
              goto LABEL_2191;
            case 3:
              v775 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1322 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1322, *a4);
              *a4 = (uint64_t)v1322;
              *v1322 = 1;
              do
              {
                v1323 = __ldaxr(v775);
                v778 = --v1323 == 0;
              }
              while (__stlxr(v1323, v775));
              goto LABEL_1900;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1762 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1762, *a4);
              *a4 = (uint64_t)v1762;
              *v1762 = 1;
              do
              {
                v1763 = __ldaxr(v1269);
                v1520 = --v1763 == 0;
              }
              while (__stlxr(v1763, v1269));
              goto LABEL_2468;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1662 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1662, *a4);
              *a4 = (uint64_t)v1662;
              *v1662 = 1;
              do
              {
                v1663 = __ldaxr(v1269);
                v1272 = --v1663 == 0;
              }
              while (__stlxr(v1663, v1269));
              goto LABEL_2360;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1764 = operator new();
              v1765 = *a4;
              *(_QWORD *)v1764 = *(_QWORD *)*a4;
              *(_QWORD *)(v1764 + 8) = *(_QWORD *)(v1765 + 8);
              v1766 = *(_QWORD *)(v1765 + 16);
              *(_QWORD *)(v1764 + 16) = v1766;
              if (v1766)
              {
                v1767 = (unsigned int *)(v1766 + 8);
                do
                  v1768 = __ldxr(v1767);
                while (__stxr(v1768 + 1, v1767));
              }
              v1769 = *(_OWORD *)(v1765 + 24);
              v1770 = *(_OWORD *)(v1765 + 40);
              *(_OWORD *)(v1764 + 56) = *(_OWORD *)(v1765 + 56);
              *(_OWORD *)(v1764 + 40) = v1770;
              *(_OWORD *)(v1764 + 24) = v1769;
              *a4 = v1764;
              *(_QWORD *)v1764 = 1;
              do
              {
                v1771 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1771 == 0;
              }
              while (__stlxr(v1771, (unint64_t *)v1523));
              goto LABEL_2482;
            case 9:
              v992 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1562 = (_QWORD *)operator new();
              v1563 = *a4 + 8;
              *v1562 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1562 + 1, v1563);
              *a4 = (uint64_t)v1562;
              *v1562 = 1;
              do
              {
                v1564 = __ldaxr(v992);
                v996 = --v1564 == 0;
              }
              while (__stlxr(v1564, v992));
              goto LABEL_2220;
            default:
              goto LABEL_2637;
          }
        case 7:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v258 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v258, *a4);
              *a4 = (uint64_t)v258;
              *v258 = 1;
              do
              {
                v259 = __ldaxr((unint64_t *)v198);
                v201 = --v259 == 0;
              }
              while (__stlxr(v259, (unint64_t *)v198));
              goto LABEL_2191;
            case 3:
              v775 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1046 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1046, *a4);
              *a4 = (uint64_t)v1046;
              *v1046 = 1;
              do
              {
                v1047 = __ldaxr(v775);
                v778 = --v1047 == 0;
              }
              while (__stlxr(v1047, v775));
              goto LABEL_1900;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1660 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1660, *a4);
              *a4 = (uint64_t)v1660;
              *v1660 = 1;
              do
              {
                v1661 = __ldaxr(v1269);
                v1520 = --v1661 == 0;
              }
              while (__stlxr(v1661, v1269));
              goto LABEL_2468;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1558 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1558, *a4);
              *a4 = (uint64_t)v1558;
              *v1558 = 1;
              do
              {
                v1559 = __ldaxr(v1269);
                v1272 = --v1559 == 0;
              }
              while (__stlxr(v1559, v1269));
              goto LABEL_2360;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1672 = operator new();
              v1673 = *a4;
              *(_QWORD *)v1672 = *(_QWORD *)*a4;
              *(_QWORD *)(v1672 + 8) = *(_QWORD *)(v1673 + 8);
              v1674 = *(_QWORD *)(v1673 + 16);
              *(_QWORD *)(v1672 + 16) = v1674;
              if (v1674)
              {
                v1675 = (unsigned int *)(v1674 + 8);
                do
                  v1676 = __ldxr(v1675);
                while (__stxr(v1676 + 1, v1675));
              }
              v1677 = *(_OWORD *)(v1673 + 24);
              v1678 = *(_OWORD *)(v1673 + 40);
              *(_OWORD *)(v1672 + 56) = *(_OWORD *)(v1673 + 56);
              *(_OWORD *)(v1672 + 40) = v1678;
              *(_OWORD *)(v1672 + 24) = v1677;
              *a4 = v1672;
              *(_QWORD *)v1672 = 1;
              do
              {
                v1679 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1679 == 0;
              }
              while (__stlxr(v1679, (unint64_t *)v1523));
              goto LABEL_2482;
            case 9:
              v992 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1350 = (_QWORD *)operator new();
              v1351 = *a4 + 8;
              *v1350 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1350 + 1, v1351);
              *a4 = (uint64_t)v1350;
              *v1350 = 1;
              do
              {
                v1352 = __ldaxr(v992);
                v996 = --v1352 == 0;
              }
              while (__stlxr(v1352, v992));
              goto LABEL_2220;
            default:
              goto LABEL_2637;
          }
        case 8:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v280 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v280, *a4);
              *a4 = (uint64_t)v280;
              *v280 = 1;
              do
              {
                v281 = __ldaxr((unint64_t *)v198);
                v201 = --v281 == 0;
              }
              while (__stlxr(v281, (unint64_t *)v198));
              goto LABEL_2191;
            case 3:
              v775 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1343 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1343, *a4);
              *a4 = (uint64_t)v1343;
              *v1343 = 1;
              do
              {
                v1344 = __ldaxr(v775);
                v778 = --v1344 == 0;
              }
              while (__stlxr(v1344, v775));
              goto LABEL_1900;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1772 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1772, *a4);
              *a4 = (uint64_t)v1772;
              *v1772 = 1;
              do
              {
                v1773 = __ldaxr(v1269);
                v1520 = --v1773 == 0;
              }
              while (__stlxr(v1773, v1269));
              goto LABEL_2468;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1680 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1680, *a4);
              *a4 = (uint64_t)v1680;
              *v1680 = 1;
              do
              {
                v1681 = __ldaxr(v1269);
                v1272 = --v1681 == 0;
              }
              while (__stlxr(v1681, v1269));
              goto LABEL_2360;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1776 = operator new();
              v1777 = *a4;
              *(_QWORD *)v1776 = *(_QWORD *)*a4;
              *(_QWORD *)(v1776 + 8) = *(_QWORD *)(v1777 + 8);
              v1778 = *(_QWORD *)(v1777 + 16);
              *(_QWORD *)(v1776 + 16) = v1778;
              if (v1778)
              {
                v1779 = (unsigned int *)(v1778 + 8);
                do
                  v1780 = __ldxr(v1779);
                while (__stxr(v1780 + 1, v1779));
              }
              v1781 = *(_OWORD *)(v1777 + 24);
              v1782 = *(_OWORD *)(v1777 + 40);
              *(_OWORD *)(v1776 + 56) = *(_OWORD *)(v1777 + 56);
              *(_OWORD *)(v1776 + 40) = v1782;
              *(_OWORD *)(v1776 + 24) = v1781;
              *a4 = v1776;
              *(_QWORD *)v1776 = 1;
              do
              {
                v1783 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1783 == 0;
              }
              while (__stlxr(v1783, (unint64_t *)v1523));
              goto LABEL_2482;
            case 9:
              v992 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1586 = (_QWORD *)operator new();
              v1587 = *a4 + 8;
              *v1586 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1586 + 1, v1587);
              *a4 = (uint64_t)v1586;
              *v1586 = 1;
              do
              {
                v1588 = __ldaxr(v992);
                v996 = --v1588 == 0;
              }
              while (__stlxr(v1588, v992));
LABEL_2220:
              if (!v996)
                goto LABEL_2524;
              v1346 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v992);
              v1589 = 2071181815;
              goto LABEL_2485;
            default:
              goto LABEL_2637;
          }
        case 9:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v198 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v229 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v229, *a4);
              *a4 = (uint64_t)v229;
              *v229 = 1;
              do
              {
                v230 = __ldaxr((unint64_t *)v198);
                v201 = --v230 == 0;
              }
              while (__stlxr(v230, (unint64_t *)v198));
LABEL_2191:
              if (!v201)
                goto LABEL_2524;
              if (*(char *)(v198 + 31) < 0)
                operator delete(*(void **)(v198 + 8));
              v1346 = (_QWORD *)v198;
              v1347 = 0x1012C404EF22A49;
              goto LABEL_2486;
            case 3:
              v775 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v852 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v852, *a4);
              *a4 = (uint64_t)v852;
              *v852 = 1;
              do
              {
                v853 = __ldaxr(v775);
                v778 = --v853 == 0;
              }
              while (__stlxr(v853, v775));
LABEL_1900:
              if (!v778)
                goto LABEL_2524;
              v1345 = (void *)v775[1];
              if (v1345)
              {
                v775[2] = (unint64_t)v1345;
                operator delete(v1345);
              }
              v1346 = v775;
              v1347 = 0x1080C409938AC02;
              goto LABEL_2486;
            case 4:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1560 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1560, *a4);
              *a4 = (uint64_t)v1560;
              *v1560 = 1;
              do
              {
                v1561 = __ldaxr(v1269);
                v1520 = --v1561 == 0;
              }
              while (__stlxr(v1561, v1269));
LABEL_2468:
              if (!v1520)
                goto LABEL_2524;
              __p[0] = v1269 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_2471;
            case 5:
              v1269 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1348 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1348, *a4);
              *a4 = (uint64_t)v1348;
              *v1348 = 1;
              do
              {
                v1349 = __ldaxr(v1269);
                v1272 = --v1349 == 0;
              }
              while (__stlxr(v1349, v1269));
LABEL_2360:
              if (!v1272)
                goto LABEL_2524;
              __p[0] = v1269 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_2471:
              v1346 = v1269;
              v1347 = 0x1020C405E66F15BLL;
              goto LABEL_2486;
            case 8:
              v1523 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1578 = operator new();
              v1579 = *a4;
              *(_QWORD *)v1578 = *(_QWORD *)*a4;
              *(_QWORD *)(v1578 + 8) = *(_QWORD *)(v1579 + 8);
              v1580 = *(_QWORD *)(v1579 + 16);
              *(_QWORD *)(v1578 + 16) = v1580;
              if (v1580)
              {
                v1581 = (unsigned int *)(v1580 + 8);
                do
                  v1582 = __ldxr(v1581);
                while (__stxr(v1582 + 1, v1581));
              }
              v1583 = *(_OWORD *)(v1579 + 24);
              v1584 = *(_OWORD *)(v1579 + 40);
              *(_OWORD *)(v1578 + 56) = *(_OWORD *)(v1579 + 56);
              *(_OWORD *)(v1578 + 40) = v1584;
              *(_OWORD *)(v1578 + 24) = v1583;
              *a4 = v1578;
              *(_QWORD *)v1578 = 1;
              do
              {
                v1585 = __ldaxr((unint64_t *)v1523);
                v1532 = --v1585 == 0;
              }
              while (__stlxr(v1585, (unint64_t *)v1523));
LABEL_2482:
              if (!v1532)
                goto LABEL_2524;
              boost::detail::shared_count::~shared_count((unsigned int **)(v1523 + 16));
              v1346 = (_QWORD *)v1523;
              v1589 = -235920773;
LABEL_2485:
              v1347 = v1589 | 0x1030C4000000000;
LABEL_2486:
              MEMORY[0x219A19A08](v1346, v1347);
              goto LABEL_2524;
            case 9:
              v1061 = *(_QWORD *)a3;
              v1062 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1063 = (_QWORD *)operator new();
                v1064 = *a4 + 8;
                *v1063 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v1063 + 1, v1064);
                *a4 = (uint64_t)v1063;
                *v1063 = 1;
                do
                {
                  v1065 = __ldaxr(v1062);
                  v1066 = v1065 - 1;
                }
                while (__stlxr(v1066, v1062));
                if (!v1066)
                {
                  v1067 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1062);
                  MEMORY[0x219A19A08](v1067, 0x1030C407B73B9F7);
                }
              }
              v1068 = *a4;
              v1069 = (uint64_t *)(*a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v1069, v1061 + 8))
                turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              v1071 = *(uint64_t **)(v1068 + 24);
              v1070 = *(uint64_t **)(v1068 + 32);
              if (v1070 == v1071)
                return;
              if (!*v1069)
                return;
              v1072 = 1;
              do
              {
                v1073 = *v1071++;
                v1072 *= v1073;
              }
              while (v1071 != v1070);
              if (!v1072)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v1069);
              v1074 = (uint64_t)(*(_QWORD *)(v1068 + 32) - *(_QWORD *)(v1068 + 24)) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v1074, &__str);
              do
              {
                v1075 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  v1084 = 0;
                  v1085 = *(double *)(**(_QWORD **)(v1061 + 8) + 8 * *(_QWORD *)(v1061 + 72));
                }
                else
                {
                  v1076 = 0;
                  v1077 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v1078 = *(uint64_t **)(v1061 + 48);
                  if (v1077 <= 1)
                    v1077 = 1;
                  v1079 = (uint64_t *)__p[0];
                  v1080 = v1077;
                  do
                  {
                    v1082 = *v1079++;
                    v1081 = v1082;
                    v1083 = *v1078++;
                    v1076 += v1083 * v1081;
                    --v1080;
                  }
                  while (v1080);
                  v1084 = 0;
                  v1085 = *(double *)(**(_QWORD **)(v1061 + 8) + 8 * (*(_QWORD *)(v1061 + 72) + v1076));
                  v1086 = *(uint64_t **)(v1068 + 48);
                  do
                  {
                    v1088 = *v1075++;
                    v1087 = v1088;
                    v1089 = *v1086++;
                    v1084 += v1089 * v1087;
                    --v1077;
                  }
                  while (v1077);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1069);
                *(double *)(**(_QWORD **)(v1068 + 8) + 8 * (*(_QWORD *)(v1068 + 72) + v1084)) = *(double *)(**(_QWORD **)(v1068 + 8) + 8 * (*(_QWORD *)(v1068 + 72) + v1084))
                                                                                              - v1085;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v1069, (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        default:
          goto LABEL_2637;
      }
    case 0xC:
      *a4 = 0;
      *((_DWORD *)a4 + 2) = 0;
      *((_BYTE *)a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)((char *)this + 5);
        *a4 = *(_QWORD *)this;
        v16 = *((unsigned __int8 *)this + 12);
        *((_BYTE *)a4 + 12) = v16;
        if (v16 <= 9 && ((1 << v16) & 0x33C) != 0)
        {
          v17 = (unint64_t *)*a4;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v19 = *a4 * *(_QWORD *)a3;
              goto LABEL_2535;
            case 1:
              v676 = *(double *)a4 * (double)*(uint64_t *)a3;
              goto LABEL_2295;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v481 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v481, *a4);
              *a4 = (uint64_t)v481;
              *v481 = 1;
              do
              {
                v482 = __ldaxr((unint64_t *)v52);
                v55 = --v482 == 0;
              }
              while (__stlxr(v482, (unint64_t *)v52));
              goto LABEL_859;
            case 3:
              v863 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v864 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v864, *a4);
                *a4 = (uint64_t)v864;
                *v864 = 1;
                do
                {
                  v865 = __ldaxr(v863);
                  v866 = v865 - 1;
                }
                while (__stlxr(v866, v863));
                if (!v866)
                {
                  v867 = (void *)v863[1];
                  if (v867)
                  {
                    v863[2] = (unint64_t)v867;
                    operator delete(v867);
                  }
                  MEMORY[0x219A19A08](v863, 0x1080C409938AC02);
                }
              }
              v868 = *(double **)(*a4 + 8);
              v869 = *(_QWORD *)(*a4 + 16) - (_QWORD)v868;
              if (v869)
              {
                v870 = v869 >> 3;
                v871 = (double)*(uint64_t *)a3;
                if (v870 <= 1)
                  v870 = 1;
                do
                {
                  *v868 = *v868 * v871;
                  ++v868;
                  --v870;
                }
                while (v870);
              }
              return;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v917 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v917, *a4);
              *a4 = (uint64_t)v917;
              *v917 = 1;
              do
              {
                v918 = __ldaxr(v475);
                v615 = --v918 == 0;
              }
              while (__stlxr(v918, v475));
              goto LABEL_1609;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v686 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v686, *a4);
              *a4 = (uint64_t)v686;
              *v686 = 1;
              do
              {
                v687 = __ldaxr(v475);
                v478 = --v687 == 0;
              }
              while (__stlxr(v687, v475));
              goto LABEL_1353;
            case 6:
            case 7:
              goto LABEL_2524;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v930 = operator new();
              v931 = *a4;
              *(_QWORD *)v930 = *(_QWORD *)*a4;
              *(_QWORD *)(v930 + 8) = *(_QWORD *)(v931 + 8);
              v932 = *(_QWORD *)(v931 + 16);
              *(_QWORD *)(v930 + 16) = v932;
              if (v932)
              {
                v933 = (unsigned int *)(v932 + 8);
                do
                  v934 = __ldxr(v933);
                while (__stxr(v934 + 1, v933));
              }
              v935 = *(_OWORD *)(v931 + 24);
              v936 = *(_OWORD *)(v931 + 40);
              *(_OWORD *)(v930 + 56) = *(_OWORD *)(v931 + 56);
              *(_OWORD *)(v930 + 40) = v936;
              *(_OWORD *)(v930 + 24) = v935;
              *a4 = v930;
              *(_QWORD *)v930 = 1;
              do
              {
                v937 = __ldaxr((unint64_t *)v648);
                v657 = --v937 == 0;
              }
              while (__stlxr(v937, (unint64_t *)v648));
              goto LABEL_1644;
            case 9:
              v522 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v523 = (_QWORD *)operator new();
                v524 = *a4 + 8;
                *v523 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v523 + 1, v524);
                *a4 = (uint64_t)v523;
                *v523 = 1;
                do
                {
                  v525 = __ldaxr(v522);
                  v526 = v525 - 1;
                }
                while (__stlxr(v526, v522));
                if (!v526)
                {
                  v527 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v522);
                  MEMORY[0x219A19A08](v527, 0x1030C407B73B9F7);
                }
              }
              v528 = (uint64_t *)*a4;
              v530 = *(uint64_t **)(*a4 + 24);
              v529 = *(uint64_t **)(*a4 + 32);
              if (v529 == v530)
                return;
              if (!v528[1])
                return;
              v531 = (double)*(uint64_t *)a3;
              v532 = 1;
              do
              {
                v533 = *v530++;
                v532 *= v533;
              }
              while (v530 != v529);
              if (!v532)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v528 + 1);
              v534 = (v528[4] - v528[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v534, &__str);
              do
              {
                v535 = (uint64_t *)__p[0];
                v536 = 0;
                if (__p[1] != __p[0])
                {
                  v537 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v538 = (uint64_t *)v528[6];
                  if (v537 <= 1)
                    v537 = 1;
                  do
                  {
                    v540 = *v535++;
                    v539 = v540;
                    v541 = *v538++;
                    v536 += v541 * v539;
                    --v537;
                  }
                  while (v537);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v528 + 1);
                *(double *)(*(_QWORD *)v528[1] + 8 * (v528[9] + v536)) = *(double *)(*(_QWORD *)v528[1]
                                                                                   + 8 * (v528[9] + v536))
                                                                       * v531;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v528 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        case 1:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v68 = *(double *)a3 * (double)*a4;
              goto LABEL_544;
            case 1:
              v676 = *(double *)a3 * *(double *)a4;
              goto LABEL_2295;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v483 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v483, *a4);
              *a4 = (uint64_t)v483;
              *v483 = 1;
              do
              {
                v484 = __ldaxr((unint64_t *)v52);
                v55 = --v484 == 0;
              }
              while (__stlxr(v484, (unint64_t *)v52));
              goto LABEL_859;
            case 3:
              v872 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v873 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v873, *a4);
                *a4 = (uint64_t)v873;
                *v873 = 1;
                do
                {
                  v874 = __ldaxr(v872);
                  v875 = v874 - 1;
                }
                while (__stlxr(v875, v872));
                if (!v875)
                {
                  v876 = (void *)v872[1];
                  if (v876)
                  {
                    v872[2] = (unint64_t)v876;
                    operator delete(v876);
                  }
                  MEMORY[0x219A19A08](v872, 0x1080C409938AC02);
                }
              }
              v877 = *(double **)(*a4 + 8);
              v878 = *(_QWORD *)(*a4 + 16) - (_QWORD)v877;
              if (v878)
              {
                v879 = *(double *)a3;
                v880 = v878 >> 3;
                if (v880 <= 1)
                  v880 = 1;
                do
                {
                  *v877 = v879 * *v877;
                  ++v877;
                  --v880;
                }
                while (v880);
              }
              return;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v919 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v919, *a4);
              *a4 = (uint64_t)v919;
              *v919 = 1;
              do
              {
                v920 = __ldaxr(v475);
                v615 = --v920 == 0;
              }
              while (__stlxr(v920, v475));
              goto LABEL_1609;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v688 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v688, *a4);
              *a4 = (uint64_t)v688;
              *v688 = 1;
              do
              {
                v689 = __ldaxr(v475);
                v478 = --v689 == 0;
              }
              while (__stlxr(v689, v475));
              goto LABEL_1353;
            case 6:
            case 7:
              goto LABEL_2524;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v938 = operator new();
              v939 = *a4;
              *(_QWORD *)v938 = *(_QWORD *)*a4;
              *(_QWORD *)(v938 + 8) = *(_QWORD *)(v939 + 8);
              v940 = *(_QWORD *)(v939 + 16);
              *(_QWORD *)(v938 + 16) = v940;
              if (v940)
              {
                v941 = (unsigned int *)(v940 + 8);
                do
                  v942 = __ldxr(v941);
                while (__stxr(v942 + 1, v941));
              }
              v943 = *(_OWORD *)(v939 + 24);
              v944 = *(_OWORD *)(v939 + 40);
              *(_OWORD *)(v938 + 56) = *(_OWORD *)(v939 + 56);
              *(_OWORD *)(v938 + 40) = v944;
              *(_OWORD *)(v938 + 24) = v943;
              *a4 = v938;
              *(_QWORD *)v938 = 1;
              do
              {
                v945 = __ldaxr((unint64_t *)v648);
                v657 = --v945 == 0;
              }
              while (__stlxr(v945, (unint64_t *)v648));
              goto LABEL_1644;
            case 9:
              v542 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v543 = (_QWORD *)operator new();
                v544 = *a4 + 8;
                *v543 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v543 + 1, v544);
                *a4 = (uint64_t)v543;
                *v543 = 1;
                do
                {
                  v545 = __ldaxr(v542);
                  v546 = v545 - 1;
                }
                while (__stlxr(v546, v542));
                if (!v546)
                {
                  v547 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v542);
                  MEMORY[0x219A19A08](v547, 0x1030C407B73B9F7);
                }
              }
              v548 = (uint64_t *)*a4;
              v550 = *(uint64_t **)(*a4 + 24);
              v549 = *(uint64_t **)(*a4 + 32);
              if (v549 == v550)
                return;
              if (!v548[1])
                return;
              v551 = *(double *)a3;
              v552 = 1;
              do
              {
                v553 = *v550++;
                v552 *= v553;
              }
              while (v550 != v549);
              if (!v552)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v548 + 1);
              v554 = (v548[4] - v548[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v554, &__str);
              do
              {
                v555 = (uint64_t *)__p[0];
                v556 = 0;
                if (__p[1] != __p[0])
                {
                  v557 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v558 = (uint64_t *)v548[6];
                  if (v557 <= 1)
                    v557 = 1;
                  do
                  {
                    v560 = *v555++;
                    v559 = v560;
                    v561 = *v558++;
                    v556 += v561 * v559;
                    --v557;
                  }
                  while (v557);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v548 + 1);
                *(double *)(*(_QWORD *)v548[1] + 8 * (v548[9] + v556)) = v551
                                                                       * *(double *)(*(_QWORD *)v548[1]
                                                                                   + 8 * (v548[9] + v556));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v548 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        case 2:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v58 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v58, *a4);
              *a4 = (uint64_t)v58;
              *v58 = 1;
              do
              {
                v59 = __ldaxr((unint64_t *)v52);
                v55 = --v59 == 0;
              }
              while (__stlxr(v59, (unint64_t *)v52));
              goto LABEL_859;
            case 3:
              v401 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v407 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v407, *a4);
              *a4 = (uint64_t)v407;
              *v407 = 1;
              do
              {
                v408 = __ldaxr(v401);
                v404 = --v408 == 0;
              }
              while (__stlxr(v408, v401));
              goto LABEL_879;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v721 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v721, *a4);
              *a4 = (uint64_t)v721;
              *v721 = 1;
              do
              {
                v722 = __ldaxr(v475);
                v615 = --v722 == 0;
              }
              while (__stlxr(v722, v475));
              goto LABEL_1609;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v609 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v609, *a4);
              *a4 = (uint64_t)v609;
              *v609 = 1;
              do
              {
                v610 = __ldaxr(v475);
                v478 = --v610 == 0;
              }
              while (__stlxr(v610, v475));
              goto LABEL_1353;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v781 = operator new();
              v782 = *a4;
              *(_QWORD *)v781 = *(_QWORD *)*a4;
              *(_QWORD *)(v781 + 8) = *(_QWORD *)(v782 + 8);
              v783 = *(_QWORD *)(v782 + 16);
              *(_QWORD *)(v781 + 16) = v783;
              if (v783)
              {
                v784 = (unsigned int *)(v783 + 8);
                do
                  v785 = __ldxr(v784);
                while (__stxr(v785 + 1, v784));
              }
              v786 = *(_OWORD *)(v782 + 24);
              v787 = *(_OWORD *)(v782 + 40);
              *(_OWORD *)(v781 + 56) = *(_OWORD *)(v782 + 56);
              *(_OWORD *)(v781 + 40) = v787;
              *(_OWORD *)(v781 + 24) = v786;
              *a4 = v781;
              *(_QWORD *)v781 = 1;
              do
              {
                v788 = __ldaxr((unint64_t *)v648);
                v657 = --v788 == 0;
              }
              while (__stlxr(v788, (unint64_t *)v648));
              goto LABEL_1644;
            case 9:
              v409 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v468 = (_QWORD *)operator new();
              v469 = *a4 + 8;
              *v468 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v468 + 1, v469);
              *a4 = (uint64_t)v468;
              *v468 = 1;
              do
              {
                v470 = __ldaxr(v409);
                v413 = --v470 == 0;
              }
              while (__stlxr(v470, v409));
              goto LABEL_1099;
            default:
              goto LABEL_2637;
          }
        case 3:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v60 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v60, *a4);
              *a4 = (uint64_t)v60;
              *v60 = 1;
              do
              {
                v61 = __ldaxr((unint64_t *)v52);
                v55 = --v61 == 0;
              }
              while (__stlxr(v61, (unint64_t *)v52));
              goto LABEL_859;
            case 3:
              v414 = *(_QWORD *)a3;
              v415 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v416 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v416, *a4);
                *a4 = (uint64_t)v416;
                *v416 = 1;
                do
                {
                  v417 = __ldaxr(v415);
                  v418 = v417 - 1;
                }
                while (__stlxr(v418, v415));
                if (!v418)
                {
                  v419 = (void *)v415[1];
                  if (v419)
                  {
                    v415[2] = (unint64_t)v419;
                    operator delete(v419);
                  }
                  MEMORY[0x219A19A08](v415, 0x1080C409938AC02);
                }
              }
              v420 = *a4;
              turi::flexible_type_fail(*(_QWORD *)(*a4 + 16) - *(_QWORD *)(*a4 + 8) == *(_QWORD *)(v414 + 16)
                                                                                     - *(_QWORD *)(v414 + 8));
              v421 = *(double **)(v420 + 8);
              v422 = *(_QWORD *)(v420 + 16) - (_QWORD)v421;
              if (v422)
              {
                v423 = v422 >> 3;
                v424 = *(double **)(v414 + 8);
                if (v423 <= 1)
                  v423 = 1;
                do
                {
                  v425 = *v424++;
                  *v421 = v425 * *v421;
                  ++v421;
                  --v423;
                }
                while (v423);
              }
              return;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v858 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v858, *a4);
              *a4 = (uint64_t)v858;
              *v858 = 1;
              do
              {
                v859 = __ldaxr(v475);
                v615 = --v859 == 0;
              }
              while (__stlxr(v859, v475));
              goto LABEL_1609;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v661 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v661, *a4);
              *a4 = (uint64_t)v661;
              *v661 = 1;
              do
              {
                v662 = __ldaxr(v475);
                v478 = --v662 == 0;
              }
              while (__stlxr(v662, v475));
              goto LABEL_1353;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v887 = operator new();
              v888 = *a4;
              *(_QWORD *)v887 = *(_QWORD *)*a4;
              *(_QWORD *)(v887 + 8) = *(_QWORD *)(v888 + 8);
              v889 = *(_QWORD *)(v888 + 16);
              *(_QWORD *)(v887 + 16) = v889;
              if (v889)
              {
                v890 = (unsigned int *)(v889 + 8);
                do
                  v891 = __ldxr(v890);
                while (__stxr(v891 + 1, v890));
              }
              v892 = *(_OWORD *)(v888 + 24);
              v893 = *(_OWORD *)(v888 + 40);
              *(_OWORD *)(v887 + 56) = *(_OWORD *)(v888 + 56);
              *(_OWORD *)(v887 + 40) = v893;
              *(_OWORD *)(v887 + 24) = v892;
              *a4 = v887;
              *(_QWORD *)v887 = 1;
              do
              {
                v894 = __ldaxr((unint64_t *)v648);
                v657 = --v894 == 0;
              }
              while (__stlxr(v894, (unint64_t *)v648));
              goto LABEL_1644;
            case 9:
              v409 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v491 = (_QWORD *)operator new();
              v492 = *a4 + 8;
              *v491 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v491 + 1, v492);
              *a4 = (uint64_t)v491;
              *v491 = 1;
              do
              {
                v493 = __ldaxr(v409);
                v413 = --v493 == 0;
              }
              while (__stlxr(v493, v409));
              goto LABEL_1099;
            default:
              goto LABEL_2637;
          }
        case 4:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v53 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v53, *a4);
              *a4 = (uint64_t)v53;
              *v53 = 1;
              do
              {
                v54 = __ldaxr((unint64_t *)v52);
                v55 = --v54 == 0;
              }
              while (__stlxr(v54, (unint64_t *)v52));
              goto LABEL_859;
            case 3:
              v401 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v402 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v402, *a4);
              *a4 = (uint64_t)v402;
              *v402 = 1;
              do
              {
                v403 = __ldaxr(v401);
                v404 = --v403 == 0;
              }
              while (__stlxr(v403, v401));
              goto LABEL_879;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v613 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v613, *a4);
              *a4 = (uint64_t)v613;
              *v613 = 1;
              do
              {
                v614 = __ldaxr(v475);
                v615 = --v614 == 0;
              }
              while (__stlxr(v614, v475));
              goto LABEL_1609;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v476 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v476, *a4);
              *a4 = (uint64_t)v476;
              *v476 = 1;
              do
              {
                v477 = __ldaxr(v475);
                v478 = --v477 == 0;
              }
              while (__stlxr(v477, v475));
              goto LABEL_1353;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v649 = operator new();
              v650 = *a4;
              *(_QWORD *)v649 = *(_QWORD *)*a4;
              *(_QWORD *)(v649 + 8) = *(_QWORD *)(v650 + 8);
              v651 = *(_QWORD *)(v650 + 16);
              *(_QWORD *)(v649 + 16) = v651;
              if (v651)
              {
                v652 = (unsigned int *)(v651 + 8);
                do
                  v653 = __ldxr(v652);
                while (__stxr(v653 + 1, v652));
              }
              v654 = *(_OWORD *)(v650 + 24);
              v655 = *(_OWORD *)(v650 + 40);
              *(_OWORD *)(v649 + 56) = *(_OWORD *)(v650 + 56);
              *(_OWORD *)(v649 + 40) = v655;
              *(_OWORD *)(v649 + 24) = v654;
              *a4 = v649;
              *(_QWORD *)v649 = 1;
              do
              {
                v656 = __ldaxr((unint64_t *)v648);
                v657 = --v656 == 0;
              }
              while (__stlxr(v656, (unint64_t *)v648));
              goto LABEL_1644;
            case 9:
              v409 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v410 = (_QWORD *)operator new();
              v411 = *a4 + 8;
              *v410 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v410 + 1, v411);
              *a4 = (uint64_t)v410;
              *v410 = 1;
              do
              {
                v412 = __ldaxr(v409);
                v413 = --v412 == 0;
              }
              while (__stlxr(v412, v409));
              goto LABEL_1099;
            default:
              goto LABEL_2637;
          }
        case 5:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v82 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v82, *a4);
              *a4 = (uint64_t)v82;
              *v82 = 1;
              do
              {
                v83 = __ldaxr((unint64_t *)v52);
                v55 = --v83 == 0;
              }
              while (__stlxr(v83, (unint64_t *)v52));
              goto LABEL_859;
            case 3:
              v401 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v479 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v479, *a4);
              *a4 = (uint64_t)v479;
              *v479 = 1;
              do
              {
                v480 = __ldaxr(v401);
                v404 = --v480 == 0;
              }
              while (__stlxr(v480, v401));
              goto LABEL_879;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1044 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1044, *a4);
              *a4 = (uint64_t)v1044;
              *v1044 = 1;
              do
              {
                v1045 = __ldaxr(v475);
                v615 = --v1045 == 0;
              }
              while (__stlxr(v1045, v475));
              goto LABEL_1609;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v844 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v844, *a4);
              *a4 = (uint64_t)v844;
              *v844 = 1;
              do
              {
                v845 = __ldaxr(v475);
                v478 = --v845 == 0;
              }
              while (__stlxr(v845, v475));
              goto LABEL_1353;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1048 = operator new();
              v1049 = *a4;
              *(_QWORD *)v1048 = *(_QWORD *)*a4;
              *(_QWORD *)(v1048 + 8) = *(_QWORD *)(v1049 + 8);
              v1050 = *(_QWORD *)(v1049 + 16);
              *(_QWORD *)(v1048 + 16) = v1050;
              if (v1050)
              {
                v1051 = (unsigned int *)(v1050 + 8);
                do
                  v1052 = __ldxr(v1051);
                while (__stxr(v1052 + 1, v1051));
              }
              v1053 = *(_OWORD *)(v1049 + 24);
              v1054 = *(_OWORD *)(v1049 + 40);
              *(_OWORD *)(v1048 + 56) = *(_OWORD *)(v1049 + 56);
              *(_OWORD *)(v1048 + 40) = v1054;
              *(_OWORD *)(v1048 + 24) = v1053;
              *a4 = v1048;
              *(_QWORD *)v1048 = 1;
              do
              {
                v1055 = __ldaxr((unint64_t *)v648);
                v657 = --v1055 == 0;
              }
              while (__stlxr(v1055, (unint64_t *)v648));
              goto LABEL_1644;
            case 9:
              v409 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v658 = (_QWORD *)operator new();
              v659 = *a4 + 8;
              *v658 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v658 + 1, v659);
              *a4 = (uint64_t)v658;
              *v658 = 1;
              do
              {
                v660 = __ldaxr(v409);
                v413 = --v660 == 0;
              }
              while (__stlxr(v660, v409));
              goto LABEL_1099;
            default:
              goto LABEL_2637;
          }
        case 6:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v84 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v84, *a4);
              *a4 = (uint64_t)v84;
              *v84 = 1;
              do
              {
                v85 = __ldaxr((unint64_t *)v52);
                v55 = --v85 == 0;
              }
              while (__stlxr(v85, (unint64_t *)v52));
              goto LABEL_859;
            case 3:
              v401 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v487 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v487, *a4);
              *a4 = (uint64_t)v487;
              *v487 = 1;
              do
              {
                v488 = __ldaxr(v401);
                v404 = --v488 == 0;
              }
              while (__stlxr(v488, v401));
              goto LABEL_879;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1057 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1057, *a4);
              *a4 = (uint64_t)v1057;
              *v1057 = 1;
              do
              {
                v1058 = __ldaxr(v475);
                v615 = --v1058 == 0;
              }
              while (__stlxr(v1058, v475));
              goto LABEL_1609;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v885 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v885, *a4);
              *a4 = (uint64_t)v885;
              *v885 = 1;
              do
              {
                v886 = __ldaxr(v475);
                v478 = --v886 == 0;
              }
              while (__stlxr(v886, v475));
              goto LABEL_1353;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1109 = operator new();
              v1110 = *a4;
              *(_QWORD *)v1109 = *(_QWORD *)*a4;
              *(_QWORD *)(v1109 + 8) = *(_QWORD *)(v1110 + 8);
              v1111 = *(_QWORD *)(v1110 + 16);
              *(_QWORD *)(v1109 + 16) = v1111;
              if (v1111)
              {
                v1112 = (unsigned int *)(v1111 + 8);
                do
                  v1113 = __ldxr(v1112);
                while (__stxr(v1113 + 1, v1112));
              }
              v1114 = *(_OWORD *)(v1110 + 24);
              v1115 = *(_OWORD *)(v1110 + 40);
              *(_OWORD *)(v1109 + 56) = *(_OWORD *)(v1110 + 56);
              *(_OWORD *)(v1109 + 40) = v1115;
              *(_OWORD *)(v1109 + 24) = v1114;
              *a4 = v1109;
              *(_QWORD *)v1109 = 1;
              do
              {
                v1116 = __ldaxr((unint64_t *)v648);
                v657 = --v1116 == 0;
              }
              while (__stlxr(v1116, (unint64_t *)v648));
              goto LABEL_1644;
            case 9:
              v409 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v673 = (_QWORD *)operator new();
              v674 = *a4 + 8;
              *v673 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v673 + 1, v674);
              *a4 = (uint64_t)v673;
              *v673 = 1;
              do
              {
                v675 = __ldaxr(v409);
                v413 = --v675 == 0;
              }
              while (__stlxr(v675, v409));
              goto LABEL_1099;
            default:
              goto LABEL_2637;
          }
        case 7:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v66 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v66, *a4);
              *a4 = (uint64_t)v66;
              *v66 = 1;
              do
              {
                v67 = __ldaxr((unint64_t *)v52);
                v55 = --v67 == 0;
              }
              while (__stlxr(v67, (unint64_t *)v52));
              goto LABEL_859;
            case 3:
              v401 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v430 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v430, *a4);
              *a4 = (uint64_t)v430;
              *v430 = 1;
              do
              {
                v431 = __ldaxr(v401);
                v404 = --v431 == 0;
              }
              while (__stlxr(v431, v401));
              goto LABEL_879;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v883 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v883, *a4);
              *a4 = (uint64_t)v883;
              *v883 = 1;
              do
              {
                v884 = __ldaxr(v475);
                v615 = --v884 == 0;
              }
              while (__stlxr(v884, v475));
              goto LABEL_1609;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v669 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v669, *a4);
              *a4 = (uint64_t)v669;
              *v669 = 1;
              do
              {
                v670 = __ldaxr(v475);
                v478 = --v670 == 0;
              }
              while (__stlxr(v670, v475));
              goto LABEL_1353;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v907 = operator new();
              v908 = *a4;
              *(_QWORD *)v907 = *(_QWORD *)*a4;
              *(_QWORD *)(v907 + 8) = *(_QWORD *)(v908 + 8);
              v909 = *(_QWORD *)(v908 + 16);
              *(_QWORD *)(v907 + 16) = v909;
              if (v909)
              {
                v910 = (unsigned int *)(v909 + 8);
                do
                  v911 = __ldxr(v910);
                while (__stxr(v911 + 1, v910));
              }
              v912 = *(_OWORD *)(v908 + 24);
              v913 = *(_OWORD *)(v908 + 40);
              *(_OWORD *)(v907 + 56) = *(_OWORD *)(v908 + 56);
              *(_OWORD *)(v907 + 40) = v913;
              *(_OWORD *)(v907 + 24) = v912;
              *a4 = v907;
              *(_QWORD *)v907 = 1;
              do
              {
                v914 = __ldaxr((unint64_t *)v648);
                v657 = --v914 == 0;
              }
              while (__stlxr(v914, (unint64_t *)v648));
              goto LABEL_1644;
            case 9:
              v409 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v504 = (_QWORD *)operator new();
              v505 = *a4 + 8;
              *v504 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v504 + 1, v505);
              *a4 = (uint64_t)v504;
              *v504 = 1;
              do
              {
                v506 = __ldaxr(v409);
                v413 = --v506 == 0;
              }
              while (__stlxr(v506, v409));
              goto LABEL_1099;
            default:
              goto LABEL_2637;
          }
        case 8:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v89 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v89, *a4);
              *a4 = (uint64_t)v89;
              *v89 = 1;
              do
              {
                v90 = __ldaxr((unint64_t *)v52);
                v55 = --v90 == 0;
              }
              while (__stlxr(v90, (unint64_t *)v52));
              goto LABEL_859;
            case 3:
              v401 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v494 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v494, *a4);
              *a4 = (uint64_t)v494;
              *v494 = 1;
              do
              {
                v495 = __ldaxr(v401);
                v404 = --v495 == 0;
              }
              while (__stlxr(v495, v401));
              goto LABEL_879;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1117 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1117, *a4);
              *a4 = (uint64_t)v1117;
              *v1117 = 1;
              do
              {
                v1118 = __ldaxr(v475);
                v615 = --v1118 == 0;
              }
              while (__stlxr(v1118, v475));
              goto LABEL_1609;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v915 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v915, *a4);
              *a4 = (uint64_t)v915;
              *v915 = 1;
              do
              {
                v916 = __ldaxr(v475);
                v478 = --v916 == 0;
              }
              while (__stlxr(v916, v475));
              goto LABEL_1353;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1139 = operator new();
              v1140 = *a4;
              *(_QWORD *)v1139 = *(_QWORD *)*a4;
              *(_QWORD *)(v1139 + 8) = *(_QWORD *)(v1140 + 8);
              v1141 = *(_QWORD *)(v1140 + 16);
              *(_QWORD *)(v1139 + 16) = v1141;
              if (v1141)
              {
                v1142 = (unsigned int *)(v1141 + 8);
                do
                  v1143 = __ldxr(v1142);
                while (__stxr(v1143 + 1, v1142));
              }
              v1144 = *(_OWORD *)(v1140 + 24);
              v1145 = *(_OWORD *)(v1140 + 40);
              *(_OWORD *)(v1139 + 56) = *(_OWORD *)(v1140 + 56);
              *(_OWORD *)(v1139 + 40) = v1145;
              *(_OWORD *)(v1139 + 24) = v1144;
              *a4 = v1139;
              *(_QWORD *)v1139 = 1;
              do
              {
                v1146 = __ldaxr((unint64_t *)v648);
                v657 = --v1146 == 0;
              }
              while (__stlxr(v1146, (unint64_t *)v648));
              goto LABEL_1644;
            case 9:
              v409 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v698 = (_QWORD *)operator new();
              v699 = *a4 + 8;
              *v698 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v698 + 1, v699);
              *a4 = (uint64_t)v698;
              *v698 = 1;
              do
              {
                v700 = __ldaxr(v409);
                v413 = --v700 == 0;
              }
              while (__stlxr(v700, v409));
LABEL_1099:
              if (!v413)
                goto LABEL_2524;
              v485 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v409);
              v701 = 2071181815;
              goto LABEL_1647;
            default:
              goto LABEL_2637;
          }
        case 9:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v52 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v56 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v56, *a4);
              *a4 = (uint64_t)v56;
              *v56 = 1;
              do
              {
                v57 = __ldaxr((unint64_t *)v52);
                v55 = --v57 == 0;
              }
              while (__stlxr(v57, (unint64_t *)v52));
LABEL_859:
              if (!v55)
                goto LABEL_2524;
              if (*(char *)(v52 + 31) < 0)
                operator delete(*(void **)(v52 + 8));
              v485 = (_QWORD *)v52;
              v486 = 0x1012C404EF22A49;
              goto LABEL_1648;
            case 3:
              v401 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v405 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v405, *a4);
              *a4 = (uint64_t)v405;
              *v405 = 1;
              do
              {
                v406 = __ldaxr(v401);
                v404 = --v406 == 0;
              }
              while (__stlxr(v406, v401));
LABEL_879:
              if (!v404)
                goto LABEL_2524;
              v496 = (void *)v401[1];
              if (v496)
              {
                v401[2] = (unint64_t)v496;
                operator delete(v496);
              }
              v485 = v401;
              v486 = 0x1080C409938AC02;
              goto LABEL_1648;
            case 4:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v671 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v671, *a4);
              *a4 = (uint64_t)v671;
              *v671 = 1;
              do
              {
                v672 = __ldaxr(v475);
                v615 = --v672 == 0;
              }
              while (__stlxr(v672, v475));
LABEL_1609:
              if (!v615)
                goto LABEL_2524;
              __p[0] = v475 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_1612;
            case 5:
              v475 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v502 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v502, *a4);
              *a4 = (uint64_t)v502;
              *v502 = 1;
              do
              {
                v503 = __ldaxr(v475);
                v478 = --v503 == 0;
              }
              while (__stlxr(v503, v475));
LABEL_1353:
              if (!v478)
                goto LABEL_2524;
              __p[0] = v475 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_1612:
              v485 = v475;
              v486 = 0x1020C405E66F15BLL;
              goto LABEL_1648;
            case 8:
              v648 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v690 = operator new();
              v691 = *a4;
              *(_QWORD *)v690 = *(_QWORD *)*a4;
              *(_QWORD *)(v690 + 8) = *(_QWORD *)(v691 + 8);
              v692 = *(_QWORD *)(v691 + 16);
              *(_QWORD *)(v690 + 16) = v692;
              if (v692)
              {
                v693 = (unsigned int *)(v692 + 8);
                do
                  v694 = __ldxr(v693);
                while (__stxr(v694 + 1, v693));
              }
              v695 = *(_OWORD *)(v691 + 24);
              v696 = *(_OWORD *)(v691 + 40);
              *(_OWORD *)(v690 + 56) = *(_OWORD *)(v691 + 56);
              *(_OWORD *)(v690 + 40) = v696;
              *(_OWORD *)(v690 + 24) = v695;
              *a4 = v690;
              *(_QWORD *)v690 = 1;
              do
              {
                v697 = __ldaxr((unint64_t *)v648);
                v657 = --v697 == 0;
              }
              while (__stlxr(v697, (unint64_t *)v648));
LABEL_1644:
              if (!v657)
                goto LABEL_2524;
              boost::detail::shared_count::~shared_count((unsigned int **)(v648 + 16));
              v485 = (_QWORD *)v648;
              v701 = -235920773;
LABEL_1647:
              v486 = v701 | 0x1030C4000000000;
LABEL_1648:
              MEMORY[0x219A19A08](v485, v486);
              goto LABEL_2524;
            case 9:
              v432 = *(_QWORD *)a3;
              v433 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v434 = (_QWORD *)operator new();
                v435 = *a4 + 8;
                *v434 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v434 + 1, v435);
                *a4 = (uint64_t)v434;
                *v434 = 1;
                do
                {
                  v436 = __ldaxr(v433);
                  v437 = v436 - 1;
                }
                while (__stlxr(v437, v433));
                if (!v437)
                {
                  v438 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v433);
                  MEMORY[0x219A19A08](v438, 0x1030C407B73B9F7);
                }
              }
              v439 = *a4;
              v440 = (uint64_t *)(*a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v440, v432 + 8))
                turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              v442 = *(uint64_t **)(v439 + 24);
              v441 = *(uint64_t **)(v439 + 32);
              if (v441 == v442)
                return;
              if (!*v440)
                return;
              v443 = 1;
              do
              {
                v444 = *v442++;
                v443 *= v444;
              }
              while (v442 != v441);
              if (!v443)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v440);
              v445 = (uint64_t)(*(_QWORD *)(v439 + 32) - *(_QWORD *)(v439 + 24)) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v445, &__str);
              do
              {
                v446 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  v455 = 0;
                  v456 = *(double *)(**(_QWORD **)(v432 + 8) + 8 * *(_QWORD *)(v432 + 72));
                }
                else
                {
                  v447 = 0;
                  v448 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v449 = *(uint64_t **)(v432 + 48);
                  if (v448 <= 1)
                    v448 = 1;
                  v450 = (uint64_t *)__p[0];
                  v451 = v448;
                  do
                  {
                    v453 = *v450++;
                    v452 = v453;
                    v454 = *v449++;
                    v447 += v454 * v452;
                    --v451;
                  }
                  while (v451);
                  v455 = 0;
                  v456 = *(double *)(**(_QWORD **)(v432 + 8) + 8 * (*(_QWORD *)(v432 + 72) + v447));
                  v457 = *(uint64_t **)(v439 + 48);
                  do
                  {
                    v459 = *v446++;
                    v458 = v459;
                    v460 = *v457++;
                    v455 += v460 * v458;
                    --v448;
                  }
                  while (v448);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v440);
                *(double *)(**(_QWORD **)(v439 + 8) + 8 * (*(_QWORD *)(v439 + 72) + v455)) = v456
                                                                                           * *(double *)(**(_QWORD **)(v439 + 8) + 8 * (*(_QWORD *)(v439 + 72) + v455));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v440, (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        default:
          goto LABEL_2637;
      }
    case 0xD:
      *a4 = 0;
      *((_DWORD *)a4 + 2) = 0;
      *((_BYTE *)a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)((char *)this + 5);
        *a4 = *(_QWORD *)this;
        v25 = *((unsigned __int8 *)this + 12);
        *((_BYTE *)a4 + 12) = v25;
        if (v25 <= 9 && ((1 << v25) & 0x33C) != 0)
        {
          v26 = (unint64_t *)*a4;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v19 = *a4 / *(_QWORD *)a3;
              goto LABEL_2535;
            case 1:
              v1005 = (double)*(uint64_t *)a3;
              goto LABEL_1484;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v723 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v723, *a4);
              *a4 = (uint64_t)v723;
              *v723 = 1;
              do
              {
                v724 = __ldaxr((unint64_t *)v71);
                v74 = --v724 == 0;
              }
              while (__stlxr(v724, (unint64_t *)v71));
              goto LABEL_1145;
            case 3:
              v1251 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1252 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1252, *a4);
                *a4 = (uint64_t)v1252;
                *v1252 = 1;
                do
                {
                  v1253 = __ldaxr(v1251);
                  v1254 = v1253 - 1;
                }
                while (__stlxr(v1254, v1251));
                if (!v1254)
                {
                  v1255 = (void *)v1251[1];
                  if (v1255)
                  {
                    v1251[2] = (unint64_t)v1255;
                    operator delete(v1255);
                  }
                  MEMORY[0x219A19A08](v1251, 0x1080C409938AC02);
                }
              }
              v1256 = *(double **)(*a4 + 8);
              v1257 = *(_QWORD *)(*a4 + 16) - (_QWORD)v1256;
              if (v1257)
              {
                v1258 = v1257 >> 3;
                v1259 = (double)*(uint64_t *)a3;
                if (v1258 <= 1)
                  v1258 = 1;
                do
                {
                  *v1256 = *v1256 / v1259;
                  ++v1256;
                  --v1258;
                }
                while (v1258);
              }
              return;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1315 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1315, *a4);
              *a4 = (uint64_t)v1315;
              *v1315 = 1;
              do
              {
                v1316 = __ldaxr(v710);
                v948 = --v1316 == 0;
              }
              while (__stlxr(v1316, v710));
              goto LABEL_2132;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1020 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1020, *a4);
              *a4 = (uint64_t)v1020;
              *v1020 = 1;
              do
              {
                v1021 = __ldaxr(v710);
                v713 = --v1021 == 0;
              }
              while (__stlxr(v1021, v710));
              goto LABEL_1854;
            case 6:
            case 7:
              goto LABEL_2524;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1327 = operator new();
              v1328 = *a4;
              *(_QWORD *)v1327 = *(_QWORD *)*a4;
              *(_QWORD *)(v1327 + 8) = *(_QWORD *)(v1328 + 8);
              v1329 = *(_QWORD *)(v1328 + 16);
              *(_QWORD *)(v1327 + 16) = v1329;
              if (v1329)
              {
                v1330 = (unsigned int *)(v1329 + 8);
                do
                  v1331 = __ldxr(v1330);
                while (__stxr(v1331 + 1, v1330));
              }
              v1332 = *(_OWORD *)(v1328 + 24);
              v1333 = *(_OWORD *)(v1328 + 40);
              *(_OWORD *)(v1327 + 56) = *(_OWORD *)(v1328 + 56);
              *(_OWORD *)(v1327 + 40) = v1333;
              *(_OWORD *)(v1327 + 24) = v1332;
              *a4 = v1327;
              *(_QWORD *)v1327 = 1;
              do
              {
                v1334 = __ldaxr((unint64_t *)v959);
                v968 = --v1334 == 0;
              }
              while (__stlxr(v1334, (unint64_t *)v959));
              goto LABEL_2154;
            case 9:
              v804 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v805 = (_QWORD *)operator new();
                v806 = *a4 + 8;
                *v805 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v805 + 1, v806);
                *a4 = (uint64_t)v805;
                *v805 = 1;
                do
                {
                  v807 = __ldaxr(v804);
                  v808 = v807 - 1;
                }
                while (__stlxr(v808, v804));
                if (!v808)
                {
                  v809 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v804);
                  MEMORY[0x219A19A08](v809, 0x1030C407B73B9F7);
                }
              }
              v810 = (uint64_t *)*a4;
              v812 = *(uint64_t **)(*a4 + 24);
              v811 = *(uint64_t **)(*a4 + 32);
              if (v811 == v812)
                return;
              if (!v810[1])
                return;
              v813 = (double)*(uint64_t *)a3;
              v814 = 1;
              do
              {
                v815 = *v812++;
                v814 *= v815;
              }
              while (v812 != v811);
              if (!v814)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v810 + 1);
              v816 = (v810[4] - v810[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v816, &__str);
              do
              {
                v817 = (uint64_t *)__p[0];
                v818 = 0;
                if (__p[1] != __p[0])
                {
                  v819 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v820 = (uint64_t *)v810[6];
                  if (v819 <= 1)
                    v819 = 1;
                  do
                  {
                    v822 = *v817++;
                    v821 = v822;
                    v823 = *v820++;
                    v818 += v823 * v821;
                    --v819;
                  }
                  while (v819);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v810 + 1);
                *(double *)(*(_QWORD *)v810[1] + 8 * (v810[9] + v818)) = *(double *)(*(_QWORD *)v810[1]
                                                                                   + 8 * (v810[9] + v818))
                                                                       / v813;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v810 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        case 1:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v68 = (double)*a4 / *(double *)a3;
LABEL_544:
              v19 = (uint64_t)v68;
              goto LABEL_2535;
            case 1:
              v1005 = *(double *)a3;
LABEL_1484:
              v676 = *(double *)a4 / v1005;
              goto LABEL_2295;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v725 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v725, *a4);
              *a4 = (uint64_t)v725;
              *v725 = 1;
              do
              {
                v726 = __ldaxr((unint64_t *)v71);
                v74 = --v726 == 0;
              }
              while (__stlxr(v726, (unint64_t *)v71));
              goto LABEL_1145;
            case 3:
              v1260 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1261 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1261, *a4);
                *a4 = (uint64_t)v1261;
                *v1261 = 1;
                do
                {
                  v1262 = __ldaxr(v1260);
                  v1263 = v1262 - 1;
                }
                while (__stlxr(v1263, v1260));
                if (!v1263)
                {
                  v1264 = (void *)v1260[1];
                  if (v1264)
                  {
                    v1260[2] = (unint64_t)v1264;
                    operator delete(v1264);
                  }
                  MEMORY[0x219A19A08](v1260, 0x1080C409938AC02);
                }
              }
              v1265 = *(double **)(*a4 + 8);
              v1266 = *(_QWORD *)(*a4 + 16) - (_QWORD)v1265;
              if (v1266)
              {
                v1267 = *(double *)a3;
                v1268 = v1266 >> 3;
                if (v1268 <= 1)
                  v1268 = 1;
                do
                {
                  *v1265 = *v1265 / v1267;
                  ++v1265;
                  --v1268;
                }
                while (v1268);
              }
              return;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1317 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1317, *a4);
              *a4 = (uint64_t)v1317;
              *v1317 = 1;
              do
              {
                v1318 = __ldaxr(v710);
                v948 = --v1318 == 0;
              }
              while (__stlxr(v1318, v710));
              goto LABEL_2132;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1022 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1022, *a4);
              *a4 = (uint64_t)v1022;
              *v1022 = 1;
              do
              {
                v1023 = __ldaxr(v710);
                v713 = --v1023 == 0;
              }
              while (__stlxr(v1023, v710));
              goto LABEL_1854;
            case 6:
            case 7:
              goto LABEL_2524;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1335 = operator new();
              v1336 = *a4;
              *(_QWORD *)v1335 = *(_QWORD *)*a4;
              *(_QWORD *)(v1335 + 8) = *(_QWORD *)(v1336 + 8);
              v1337 = *(_QWORD *)(v1336 + 16);
              *(_QWORD *)(v1335 + 16) = v1337;
              if (v1337)
              {
                v1338 = (unsigned int *)(v1337 + 8);
                do
                  v1339 = __ldxr(v1338);
                while (__stxr(v1339 + 1, v1338));
              }
              v1340 = *(_OWORD *)(v1336 + 24);
              v1341 = *(_OWORD *)(v1336 + 40);
              *(_OWORD *)(v1335 + 56) = *(_OWORD *)(v1336 + 56);
              *(_OWORD *)(v1335 + 40) = v1341;
              *(_OWORD *)(v1335 + 24) = v1340;
              *a4 = v1335;
              *(_QWORD *)v1335 = 1;
              do
              {
                v1342 = __ldaxr((unint64_t *)v959);
                v968 = --v1342 == 0;
              }
              while (__stlxr(v1342, (unint64_t *)v959));
              goto LABEL_2154;
            case 9:
              v824 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v825 = (_QWORD *)operator new();
                v826 = *a4 + 8;
                *v825 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v825 + 1, v826);
                *a4 = (uint64_t)v825;
                *v825 = 1;
                do
                {
                  v827 = __ldaxr(v824);
                  v828 = v827 - 1;
                }
                while (__stlxr(v828, v824));
                if (!v828)
                {
                  v829 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v824);
                  MEMORY[0x219A19A08](v829, 0x1030C407B73B9F7);
                }
              }
              v830 = (uint64_t *)*a4;
              v832 = *(uint64_t **)(*a4 + 24);
              v831 = *(uint64_t **)(*a4 + 32);
              if (v831 == v832)
                return;
              if (!v830[1])
                return;
              v833 = *(double *)a3;
              v834 = 1;
              do
              {
                v835 = *v832++;
                v834 *= v835;
              }
              while (v832 != v831);
              if (!v834)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v830 + 1);
              v836 = (v830[4] - v830[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v836, &__str);
              do
              {
                v837 = (uint64_t *)__p[0];
                v838 = 0;
                if (__p[1] != __p[0])
                {
                  v839 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v840 = (uint64_t *)v830[6];
                  if (v839 <= 1)
                    v839 = 1;
                  do
                  {
                    v842 = *v837++;
                    v841 = v842;
                    v843 = *v840++;
                    v838 += v843 * v841;
                    --v839;
                  }
                  while (v839);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v830 + 1);
                *(double *)(*(_QWORD *)v830[1] + 8 * (v830[9] + v838)) = *(double *)(*(_QWORD *)v830[1]
                                                                                   + 8 * (v830[9] + v838))
                                                                       / v833;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v830 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        case 2:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v87 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v87, *a4);
              *a4 = (uint64_t)v87;
              *v87 = 1;
              do
              {
                v88 = __ldaxr((unint64_t *)v71);
                v74 = --v88 == 0;
              }
              while (__stlxr(v88, (unint64_t *)v71));
              goto LABEL_1145;
            case 3:
              v461 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v489 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v489, *a4);
              *a4 = (uint64_t)v489;
              *v489 = 1;
              do
              {
                v490 = __ldaxr(v461);
                v464 = --v490 == 0;
              }
              while (__stlxr(v490, v461));
              goto LABEL_1206;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1090 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1090, *a4);
              *a4 = (uint64_t)v1090;
              *v1090 = 1;
              do
              {
                v1091 = __ldaxr(v710);
                v948 = --v1091 == 0;
              }
              while (__stlxr(v1091, v710));
              goto LABEL_2132;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v895 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v895, *a4);
              *a4 = (uint64_t)v895;
              *v895 = 1;
              do
              {
                v896 = __ldaxr(v710);
                v713 = --v896 == 0;
              }
              while (__stlxr(v896, v710));
              goto LABEL_1854;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1121 = operator new();
              v1122 = *a4;
              *(_QWORD *)v1121 = *(_QWORD *)*a4;
              *(_QWORD *)(v1121 + 8) = *(_QWORD *)(v1122 + 8);
              v1123 = *(_QWORD *)(v1122 + 16);
              *(_QWORD *)(v1121 + 16) = v1123;
              if (v1123)
              {
                v1124 = (unsigned int *)(v1123 + 8);
                do
                  v1125 = __ldxr(v1124);
                while (__stxr(v1125 + 1, v1124));
              }
              v1126 = *(_OWORD *)(v1122 + 24);
              v1127 = *(_OWORD *)(v1122 + 40);
              *(_OWORD *)(v1121 + 56) = *(_OWORD *)(v1122 + 56);
              *(_OWORD *)(v1121 + 40) = v1127;
              *(_OWORD *)(v1121 + 24) = v1126;
              *a4 = v1121;
              *(_QWORD *)v1121 = 1;
              do
              {
                v1128 = __ldaxr((unint64_t *)v959);
                v968 = --v1128 == 0;
              }
              while (__stlxr(v1128, (unint64_t *)v959));
              goto LABEL_2154;
            case 9:
              v562 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v677 = (_QWORD *)operator new();
              v678 = *a4 + 8;
              *v677 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v677 + 1, v678);
              *a4 = (uint64_t)v677;
              *v677 = 1;
              do
              {
                v679 = __ldaxr(v562);
                v566 = --v679 == 0;
              }
              while (__stlxr(v679, v562));
              goto LABEL_1519;
            default:
              goto LABEL_2637;
          }
        case 3:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v108 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a4);
              *a4 = (uint64_t)v108;
              *v108 = 1;
              do
              {
                v109 = __ldaxr((unint64_t *)v71);
                v74 = --v109 == 0;
              }
              while (__stlxr(v109, (unint64_t *)v71));
              goto LABEL_1145;
            case 3:
              v597 = *(_QWORD *)a3;
              v598 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v599 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v599, *a4);
                *a4 = (uint64_t)v599;
                *v599 = 1;
                do
                {
                  v600 = __ldaxr(v598);
                  v601 = v600 - 1;
                }
                while (__stlxr(v601, v598));
                if (!v601)
                {
                  v602 = (void *)v598[1];
                  if (v602)
                  {
                    v598[2] = (unint64_t)v602;
                    operator delete(v602);
                  }
                  MEMORY[0x219A19A08](v598, 0x1080C409938AC02);
                }
              }
              v603 = *a4;
              turi::flexible_type_fail(*(_QWORD *)(*a4 + 16) - *(_QWORD *)(*a4 + 8) == *(_QWORD *)(v597 + 16)
                                                                                     - *(_QWORD *)(v597 + 8));
              v604 = *(double **)(v603 + 8);
              v605 = *(_QWORD *)(v603 + 16) - (_QWORD)v604;
              if (v605)
              {
                v606 = v605 >> 3;
                v607 = *(double **)(v597 + 8);
                if (v606 <= 1)
                  v606 = 1;
                do
                {
                  v608 = *v607++;
                  *v604 = *v604 / v608;
                  ++v604;
                  --v606;
                }
                while (v606);
              }
              return;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1227 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1227, *a4);
              *a4 = (uint64_t)v1227;
              *v1227 = 1;
              do
              {
                v1228 = __ldaxr(v710);
                v948 = --v1228 == 0;
              }
              while (__stlxr(v1228, v710));
              goto LABEL_2132;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v988 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v988, *a4);
              *a4 = (uint64_t)v988;
              *v988 = 1;
              do
              {
                v989 = __ldaxr(v710);
                v713 = --v989 == 0;
              }
              while (__stlxr(v989, v710));
              goto LABEL_1854;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1277 = operator new();
              v1278 = *a4;
              *(_QWORD *)v1277 = *(_QWORD *)*a4;
              *(_QWORD *)(v1277 + 8) = *(_QWORD *)(v1278 + 8);
              v1279 = *(_QWORD *)(v1278 + 16);
              *(_QWORD *)(v1277 + 16) = v1279;
              if (v1279)
              {
                v1280 = (unsigned int *)(v1279 + 8);
                do
                  v1281 = __ldxr(v1280);
                while (__stxr(v1281 + 1, v1280));
              }
              v1282 = *(_OWORD *)(v1278 + 24);
              v1283 = *(_OWORD *)(v1278 + 40);
              *(_OWORD *)(v1277 + 56) = *(_OWORD *)(v1278 + 56);
              *(_OWORD *)(v1277 + 40) = v1283;
              *(_OWORD *)(v1277 + 24) = v1282;
              *a4 = v1277;
              *(_QWORD *)v1277 = 1;
              do
              {
                v1284 = __ldaxr((unint64_t *)v959);
                v968 = --v1284 == 0;
              }
              while (__stlxr(v1284, (unint64_t *)v959));
              goto LABEL_2154;
            case 9:
              v562 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v789 = (_QWORD *)operator new();
              v790 = *a4 + 8;
              *v789 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v789 + 1, v790);
              *a4 = (uint64_t)v789;
              *v789 = 1;
              do
              {
                v791 = __ldaxr(v562);
                v566 = --v791 == 0;
              }
              while (__stlxr(v791, v562));
              goto LABEL_1519;
            default:
              goto LABEL_2637;
          }
        case 4:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v72 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v72, *a4);
              *a4 = (uint64_t)v72;
              *v72 = 1;
              do
              {
                v73 = __ldaxr((unint64_t *)v71);
                v74 = --v73 == 0;
              }
              while (__stlxr(v73, (unint64_t *)v71));
              goto LABEL_1145;
            case 3:
              v461 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v462 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v462, *a4);
              *a4 = (uint64_t)v462;
              *v462 = 1;
              do
              {
                v463 = __ldaxr(v461);
                v464 = --v463 == 0;
              }
              while (__stlxr(v463, v461));
              goto LABEL_1206;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v946 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v946, *a4);
              *a4 = (uint64_t)v946;
              *v946 = 1;
              do
              {
                v947 = __ldaxr(v710);
                v948 = --v947 == 0;
              }
              while (__stlxr(v947, v710));
              goto LABEL_2132;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v711 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v711, *a4);
              *a4 = (uint64_t)v711;
              *v711 = 1;
              do
              {
                v712 = __ldaxr(v710);
                v713 = --v712 == 0;
              }
              while (__stlxr(v712, v710));
              goto LABEL_1854;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v960 = operator new();
              v961 = *a4;
              *(_QWORD *)v960 = *(_QWORD *)*a4;
              *(_QWORD *)(v960 + 8) = *(_QWORD *)(v961 + 8);
              v962 = *(_QWORD *)(v961 + 16);
              *(_QWORD *)(v960 + 16) = v962;
              if (v962)
              {
                v963 = (unsigned int *)(v962 + 8);
                do
                  v964 = __ldxr(v963);
                while (__stxr(v964 + 1, v963));
              }
              v965 = *(_OWORD *)(v961 + 24);
              v966 = *(_OWORD *)(v961 + 40);
              *(_OWORD *)(v960 + 56) = *(_OWORD *)(v961 + 56);
              *(_OWORD *)(v960 + 40) = v966;
              *(_OWORD *)(v960 + 24) = v965;
              *a4 = v960;
              *(_QWORD *)v960 = 1;
              do
              {
                v967 = __ldaxr((unint64_t *)v959);
                v968 = --v967 == 0;
              }
              while (__stlxr(v967, (unint64_t *)v959));
              goto LABEL_2154;
            case 9:
              v562 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v563 = (_QWORD *)operator new();
              v564 = *a4 + 8;
              *v563 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v563 + 1, v564);
              *a4 = (uint64_t)v563;
              *v563 = 1;
              do
              {
                v565 = __ldaxr(v562);
                v566 = --v565 == 0;
              }
              while (__stlxr(v565, v562));
              goto LABEL_1519;
            default:
              goto LABEL_2637;
          }
        case 5:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v195 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v195, *a4);
              *a4 = (uint64_t)v195;
              *v195 = 1;
              do
              {
                v196 = __ldaxr((unint64_t *)v71);
                v74 = --v196 == 0;
              }
              while (__stlxr(v196, (unint64_t *)v71));
              goto LABEL_1145;
            case 3:
              v461 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v719 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v719, *a4);
              *a4 = (uint64_t)v719;
              *v719 = 1;
              do
              {
                v720 = __ldaxr(v461);
                v464 = --v720 == 0;
              }
              while (__stlxr(v720, v461));
              goto LABEL_1206;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1459 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1459, *a4);
              *a4 = (uint64_t)v1459;
              *v1459 = 1;
              do
              {
                v1460 = __ldaxr(v710);
                v948 = --v1460 == 0;
              }
              while (__stlxr(v1460, v710));
              goto LABEL_2132;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1225 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1225, *a4);
              *a4 = (uint64_t)v1225;
              *v1225 = 1;
              do
              {
                v1226 = __ldaxr(v710);
                v713 = --v1226 == 0;
              }
              while (__stlxr(v1226, v710));
              goto LABEL_1854;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1510 = operator new();
              v1511 = *a4;
              *(_QWORD *)v1510 = *(_QWORD *)*a4;
              *(_QWORD *)(v1510 + 8) = *(_QWORD *)(v1511 + 8);
              v1512 = *(_QWORD *)(v1511 + 16);
              *(_QWORD *)(v1510 + 16) = v1512;
              if (v1512)
              {
                v1513 = (unsigned int *)(v1512 + 8);
                do
                  v1514 = __ldxr(v1513);
                while (__stxr(v1514 + 1, v1513));
              }
              v1515 = *(_OWORD *)(v1511 + 24);
              v1516 = *(_OWORD *)(v1511 + 40);
              *(_OWORD *)(v1510 + 56) = *(_OWORD *)(v1511 + 56);
              *(_OWORD *)(v1510 + 40) = v1516;
              *(_OWORD *)(v1510 + 24) = v1515;
              *a4 = v1510;
              *(_QWORD *)v1510 = 1;
              do
              {
                v1517 = __ldaxr((unint64_t *)v959);
                v968 = --v1517 == 0;
              }
              while (__stlxr(v1517, (unint64_t *)v959));
              goto LABEL_2154;
            case 9:
              v562 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v985 = (_QWORD *)operator new();
              v986 = *a4 + 8;
              *v985 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v985 + 1, v986);
              *a4 = (uint64_t)v985;
              *v985 = 1;
              do
              {
                v987 = __ldaxr(v562);
                v566 = --v987 == 0;
              }
              while (__stlxr(v987, v562));
              goto LABEL_1519;
            default:
              goto LABEL_2637;
          }
        case 6:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v202 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v202, *a4);
              *a4 = (uint64_t)v202;
              *v202 = 1;
              do
              {
                v203 = __ldaxr((unint64_t *)v71);
                v74 = --v203 == 0;
              }
              while (__stlxr(v203, (unint64_t *)v71));
              goto LABEL_1145;
            case 3:
              v461 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v779 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v779, *a4);
              *a4 = (uint64_t)v779;
              *v779 = 1;
              do
              {
                v780 = __ldaxr(v461);
                v464 = --v780 == 0;
              }
              while (__stlxr(v780, v461));
              goto LABEL_1206;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1521 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1521, *a4);
              *a4 = (uint64_t)v1521;
              *v1521 = 1;
              do
              {
                v1522 = __ldaxr(v710);
                v948 = --v1522 == 0;
              }
              while (__stlxr(v1522, v710));
              goto LABEL_2132;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1275 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1275, *a4);
              *a4 = (uint64_t)v1275;
              *v1275 = 1;
              do
              {
                v1276 = __ldaxr(v710);
                v713 = --v1276 == 0;
              }
              while (__stlxr(v1276, v710));
              goto LABEL_1854;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1533 = operator new();
              v1534 = *a4;
              *(_QWORD *)v1533 = *(_QWORD *)*a4;
              *(_QWORD *)(v1533 + 8) = *(_QWORD *)(v1534 + 8);
              v1535 = *(_QWORD *)(v1534 + 16);
              *(_QWORD *)(v1533 + 16) = v1535;
              if (v1535)
              {
                v1536 = (unsigned int *)(v1535 + 8);
                do
                  v1537 = __ldxr(v1536);
                while (__stxr(v1537 + 1, v1536));
              }
              v1538 = *(_OWORD *)(v1534 + 24);
              v1539 = *(_OWORD *)(v1534 + 40);
              *(_OWORD *)(v1533 + 56) = *(_OWORD *)(v1534 + 56);
              *(_OWORD *)(v1533 + 40) = v1539;
              *(_OWORD *)(v1533 + 24) = v1538;
              *a4 = v1533;
              *(_QWORD *)v1533 = 1;
              do
              {
                v1540 = __ldaxr((unint64_t *)v959);
                v968 = --v1540 == 0;
              }
              while (__stlxr(v1540, (unint64_t *)v959));
              goto LABEL_2154;
            case 9:
              v562 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1002 = (_QWORD *)operator new();
              v1003 = *a4 + 8;
              *v1002 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1002 + 1, v1003);
              *a4 = (uint64_t)v1002;
              *v1002 = 1;
              do
              {
                v1004 = __ldaxr(v562);
                v566 = --v1004 == 0;
              }
              while (__stlxr(v1004, v562));
              goto LABEL_1519;
            default:
              goto LABEL_2637;
          }
        case 7:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v137 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v137, *a4);
              *a4 = (uint64_t)v137;
              *v137 = 1;
              do
              {
                v138 = __ldaxr((unint64_t *)v71);
                v74 = --v138 == 0;
              }
              while (__stlxr(v138, (unint64_t *)v71));
              goto LABEL_1145;
            case 3:
              v461 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v611 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v611, *a4);
              *a4 = (uint64_t)v611;
              *v611 = 1;
              do
              {
                v612 = __ldaxr(v461);
                v464 = --v612 == 0;
              }
              while (__stlxr(v612, v461));
              goto LABEL_1206;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1273 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1273, *a4);
              *a4 = (uint64_t)v1273;
              *v1273 = 1;
              do
              {
                v1274 = __ldaxr(v710);
                v948 = --v1274 == 0;
              }
              while (__stlxr(v1274, v710));
              goto LABEL_2132;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v997 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v997, *a4);
              *a4 = (uint64_t)v997;
              *v997 = 1;
              do
              {
                v998 = __ldaxr(v710);
                v713 = --v998 == 0;
              }
              while (__stlxr(v998, v710));
              goto LABEL_1854;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1305 = operator new();
              v1306 = *a4;
              *(_QWORD *)v1305 = *(_QWORD *)*a4;
              *(_QWORD *)(v1305 + 8) = *(_QWORD *)(v1306 + 8);
              v1307 = *(_QWORD *)(v1306 + 16);
              *(_QWORD *)(v1305 + 16) = v1307;
              if (v1307)
              {
                v1308 = (unsigned int *)(v1307 + 8);
                do
                  v1309 = __ldxr(v1308);
                while (__stxr(v1309 + 1, v1308));
              }
              v1310 = *(_OWORD *)(v1306 + 24);
              v1311 = *(_OWORD *)(v1306 + 40);
              *(_OWORD *)(v1305 + 56) = *(_OWORD *)(v1306 + 56);
              *(_OWORD *)(v1305 + 40) = v1311;
              *(_OWORD *)(v1305 + 24) = v1310;
              *a4 = v1305;
              *(_QWORD *)v1305 = 1;
              do
              {
                v1312 = __ldaxr((unint64_t *)v959);
                v968 = --v1312 == 0;
              }
              while (__stlxr(v1312, (unint64_t *)v959));
              goto LABEL_2154;
            case 9:
              v562 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v799 = (_QWORD *)operator new();
              v800 = *a4 + 8;
              *v799 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v799 + 1, v800);
              *a4 = (uint64_t)v799;
              *v799 = 1;
              do
              {
                v801 = __ldaxr(v562);
                v566 = --v801 == 0;
              }
              while (__stlxr(v801, v562));
              goto LABEL_1519;
            default:
              goto LABEL_2637;
          }
        case 8:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v214 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v214, *a4);
              *a4 = (uint64_t)v214;
              *v214 = 1;
              do
              {
                v215 = __ldaxr((unint64_t *)v71);
                v74 = --v215 == 0;
              }
              while (__stlxr(v215, (unint64_t *)v71));
              goto LABEL_1145;
            case 3:
              v461 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v792 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v792, *a4);
              *a4 = (uint64_t)v792;
              *v792 = 1;
              do
              {
                v793 = __ldaxr(v461);
                v464 = --v793 == 0;
              }
              while (__stlxr(v793, v461));
              goto LABEL_1206;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1541 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1541, *a4);
              *a4 = (uint64_t)v1541;
              *v1541 = 1;
              do
              {
                v1542 = __ldaxr(v710);
                v948 = --v1542 == 0;
              }
              while (__stlxr(v1542, v710));
              goto LABEL_2132;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1313 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1313, *a4);
              *a4 = (uint64_t)v1313;
              *v1313 = 1;
              do
              {
                v1314 = __ldaxr(v710);
                v713 = --v1314 == 0;
              }
              while (__stlxr(v1314, v710));
              goto LABEL_1854;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1550 = operator new();
              v1551 = *a4;
              *(_QWORD *)v1550 = *(_QWORD *)*a4;
              *(_QWORD *)(v1550 + 8) = *(_QWORD *)(v1551 + 8);
              v1552 = *(_QWORD *)(v1551 + 16);
              *(_QWORD *)(v1550 + 16) = v1552;
              if (v1552)
              {
                v1553 = (unsigned int *)(v1552 + 8);
                do
                  v1554 = __ldxr(v1553);
                while (__stxr(v1554 + 1, v1553));
              }
              v1555 = *(_OWORD *)(v1551 + 24);
              v1556 = *(_OWORD *)(v1551 + 40);
              *(_OWORD *)(v1550 + 56) = *(_OWORD *)(v1551 + 56);
              *(_OWORD *)(v1550 + 40) = v1556;
              *(_OWORD *)(v1550 + 24) = v1555;
              *a4 = v1550;
              *(_QWORD *)v1550 = 1;
              do
              {
                v1557 = __ldaxr((unint64_t *)v959);
                v968 = --v1557 == 0;
              }
              while (__stlxr(v1557, (unint64_t *)v959));
              goto LABEL_2154;
            case 9:
              v562 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1032 = (_QWORD *)operator new();
              v1033 = *a4 + 8;
              *v1032 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v1032 + 1, v1033);
              *a4 = (uint64_t)v1032;
              *v1032 = 1;
              do
              {
                v1034 = __ldaxr(v562);
                v566 = --v1034 == 0;
              }
              while (__stlxr(v1034, v562));
LABEL_1519:
              if (!v566)
                goto LABEL_2524;
              v727 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v562);
              v1035 = 2071181815;
              goto LABEL_2157;
            default:
              goto LABEL_2637;
          }
        case 9:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v71 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v78 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v78, *a4);
              *a4 = (uint64_t)v78;
              *v78 = 1;
              do
              {
                v79 = __ldaxr((unint64_t *)v71);
                v74 = --v79 == 0;
              }
              while (__stlxr(v79, (unint64_t *)v71));
LABEL_1145:
              if (!v74)
                goto LABEL_2524;
              if (*(char *)(v71 + 31) < 0)
                operator delete(*(void **)(v71 + 8));
              v727 = (_QWORD *)v71;
              v728 = 0x1012C404EF22A49;
              goto LABEL_2158;
            case 3:
              v461 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v471 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v471, *a4);
              *a4 = (uint64_t)v471;
              *v471 = 1;
              do
              {
                v472 = __ldaxr(v461);
                v464 = --v472 == 0;
              }
              while (__stlxr(v472, v461));
LABEL_1206:
              if (!v464)
                goto LABEL_2524;
              v794 = (void *)v461[1];
              if (v794)
              {
                v461[2] = (unint64_t)v794;
                operator delete(v794);
              }
              v727 = v461;
              v728 = 0x1080C409938AC02;
              goto LABEL_2158;
            case 4:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1000 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1000, *a4);
              *a4 = (uint64_t)v1000;
              *v1000 = 1;
              do
              {
                v1001 = __ldaxr(v710);
                v948 = --v1001 == 0;
              }
              while (__stlxr(v1001, v710));
LABEL_2132:
              if (!v948)
                goto LABEL_2524;
              __p[0] = v710 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_2135;
            case 5:
              v710 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v797 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v797, *a4);
              *a4 = (uint64_t)v797;
              *v797 = 1;
              do
              {
                v798 = __ldaxr(v710);
                v713 = --v798 == 0;
              }
              while (__stlxr(v798, v710));
LABEL_1854:
              if (!v713)
                goto LABEL_2524;
              __p[0] = v710 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_2135:
              v727 = v710;
              v728 = 0x1020C405E66F15BLL;
              goto LABEL_2158;
            case 8:
              v959 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1024 = operator new();
              v1025 = *a4;
              *(_QWORD *)v1024 = *(_QWORD *)*a4;
              *(_QWORD *)(v1024 + 8) = *(_QWORD *)(v1025 + 8);
              v1026 = *(_QWORD *)(v1025 + 16);
              *(_QWORD *)(v1024 + 16) = v1026;
              if (v1026)
              {
                v1027 = (unsigned int *)(v1026 + 8);
                do
                  v1028 = __ldxr(v1027);
                while (__stxr(v1028 + 1, v1027));
              }
              v1029 = *(_OWORD *)(v1025 + 24);
              v1030 = *(_OWORD *)(v1025 + 40);
              *(_OWORD *)(v1024 + 56) = *(_OWORD *)(v1025 + 56);
              *(_OWORD *)(v1024 + 40) = v1030;
              *(_OWORD *)(v1024 + 24) = v1029;
              *a4 = v1024;
              *(_QWORD *)v1024 = 1;
              do
              {
                v1031 = __ldaxr((unint64_t *)v959);
                v968 = --v1031 == 0;
              }
              while (__stlxr(v1031, (unint64_t *)v959));
LABEL_2154:
              if (!v968)
                goto LABEL_2524;
              boost::detail::shared_count::~shared_count((unsigned int **)(v959 + 16));
              v727 = (_QWORD *)v959;
              v1035 = -235920773;
LABEL_2157:
              v728 = v1035 | 0x1030C4000000000;
LABEL_2158:
              MEMORY[0x219A19A08](v727, v728);
              goto LABEL_2524;
            case 9:
              v616 = *(_QWORD *)a3;
              v617 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v618 = (_QWORD *)operator new();
                v619 = *a4 + 8;
                *v618 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v618 + 1, v619);
                *a4 = (uint64_t)v618;
                *v618 = 1;
                do
                {
                  v620 = __ldaxr(v617);
                  v621 = v620 - 1;
                }
                while (__stlxr(v621, v617));
                if (!v621)
                {
                  v622 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v617);
                  MEMORY[0x219A19A08](v622, 0x1030C407B73B9F7);
                }
              }
              v623 = *a4;
              v624 = (uint64_t *)(*a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v624, v616 + 8))
                turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              v626 = *(uint64_t **)(v623 + 24);
              v625 = *(uint64_t **)(v623 + 32);
              if (v625 == v626)
                return;
              if (!*v624)
                return;
              v627 = 1;
              do
              {
                v628 = *v626++;
                v627 *= v628;
              }
              while (v626 != v625);
              if (!v627)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v624);
              v629 = (uint64_t)(*(_QWORD *)(v623 + 32) - *(_QWORD *)(v623 + 24)) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v629, &__str);
              do
              {
                v630 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  v639 = 0;
                  v640 = *(double *)(**(_QWORD **)(v616 + 8) + 8 * *(_QWORD *)(v616 + 72));
                }
                else
                {
                  v631 = 0;
                  v632 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v633 = *(uint64_t **)(v616 + 48);
                  if (v632 <= 1)
                    v632 = 1;
                  v634 = (uint64_t *)__p[0];
                  v635 = v632;
                  do
                  {
                    v637 = *v634++;
                    v636 = v637;
                    v638 = *v633++;
                    v631 += v638 * v636;
                    --v635;
                  }
                  while (v635);
                  v639 = 0;
                  v640 = *(double *)(**(_QWORD **)(v616 + 8) + 8 * (*(_QWORD *)(v616 + 72) + v631));
                  v641 = *(uint64_t **)(v623 + 48);
                  do
                  {
                    v643 = *v630++;
                    v642 = v643;
                    v644 = *v641++;
                    v639 += v644 * v642;
                    --v632;
                  }
                  while (v632);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v624);
                *(double *)(**(_QWORD **)(v623 + 8) + 8 * (*(_QWORD *)(v623 + 72) + v639)) = *(double *)(**(_QWORD **)(v623 + 8) + 8 * (*(_QWORD *)(v623 + 72) + v639))
                                                                                           / v640;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v624, (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        default:
          goto LABEL_2637;
      }
    case 0xE:
      *a4 = 0;
      *((_DWORD *)a4 + 2) = 0;
      *((_BYTE *)a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)((char *)this + 5);
        *a4 = *(_QWORD *)this;
        v21 = *((unsigned __int8 *)this + 12);
        *((_BYTE *)a4 + 12) = v21;
        if (v21 <= 9 && ((1 << v21) & 0x33C) != 0)
        {
          v22 = (unint64_t *)*a4;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v24 = *(_QWORD *)a3;
              goto LABEL_215;
            case 1:
              v956 = *(double *)a4;
              v957 = (double)*(uint64_t *)a3;
              goto LABEL_1416;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v680 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v680, *a4);
              *a4 = (uint64_t)v680;
              *v680 = 1;
              do
              {
                v681 = __ldaxr((unint64_t *)v62);
                v65 = --v681 == 0;
              }
              while (__stlxr(v681, (unint64_t *)v62));
              goto LABEL_1075;
            case 3:
              v1147 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1148 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1148, *a4);
                *a4 = (uint64_t)v1148;
                *v1148 = 1;
                do
                {
                  v1149 = __ldaxr(v1147);
                  v1150 = v1149 - 1;
                }
                while (__stlxr(v1150, v1147));
                if (!v1150)
                {
                  v1151 = (void *)v1147[1];
                  if (v1151)
                  {
                    v1147[2] = (unint64_t)v1151;
                    operator delete(v1151);
                  }
                  MEMORY[0x219A19A08](v1147, 0x1080C409938AC02);
                }
              }
              v1152 = *a4;
              v1154 = *(long double **)(*a4 + 8);
              v1153 = *(long double **)(v1152 + 16);
              if (v1153 != v1154)
              {
                v1155 = (double)*(uint64_t *)a3;
                if ((unint64_t)(v1153 - v1154) <= 1)
                  v1156 = 1;
                else
                  v1156 = v1153 - v1154;
                do
                {
                  *v1154 = fmod(*v1154, v1155);
                  ++v1154;
                  --v1156;
                }
                while (v1156);
              }
              return;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1221 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1221, *a4);
              *a4 = (uint64_t)v1221;
              *v1221 = 1;
              do
              {
                v1222 = __ldaxr(v663);
                v862 = --v1222 == 0;
              }
              while (__stlxr(v1222, v663));
              goto LABEL_2042;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v969 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v969, *a4);
              *a4 = (uint64_t)v969;
              *v969 = 1;
              do
              {
                v970 = __ldaxr(v663);
                v666 = --v970 == 0;
              }
              while (__stlxr(v970, v663));
              goto LABEL_1728;
            case 6:
            case 7:
              goto LABEL_2524;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1229 = operator new();
              v1230 = *a4;
              *(_QWORD *)v1229 = *(_QWORD *)*a4;
              *(_QWORD *)(v1229 + 8) = *(_QWORD *)(v1230 + 8);
              v1231 = *(_QWORD *)(v1230 + 16);
              *(_QWORD *)(v1229 + 16) = v1231;
              if (v1231)
              {
                v1232 = (unsigned int *)(v1231 + 8);
                do
                  v1233 = __ldxr(v1232);
                while (__stxr(v1233 + 1, v1232));
              }
              v1234 = *(_OWORD *)(v1230 + 24);
              v1235 = *(_OWORD *)(v1230 + 40);
              *(_OWORD *)(v1229 + 56) = *(_OWORD *)(v1230 + 56);
              *(_OWORD *)(v1229 + 40) = v1235;
              *(_OWORD *)(v1229 + 24) = v1234;
              *a4 = v1229;
              *(_QWORD *)v1229 = 1;
              do
              {
                v1236 = __ldaxr((unint64_t *)v897);
                v906 = --v1236 == 0;
              }
              while (__stlxr(v1236, (unint64_t *)v897));
              goto LABEL_2092;
            case 9:
              v729 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v730 = (_QWORD *)operator new();
                v731 = *a4 + 8;
                *v730 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v730 + 1, v731);
                *a4 = (uint64_t)v730;
                *v730 = 1;
                do
                {
                  v732 = __ldaxr(v729);
                  v733 = v732 - 1;
                }
                while (__stlxr(v733, v729));
                if (!v733)
                {
                  v734 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v729);
                  MEMORY[0x219A19A08](v734, 0x1030C407B73B9F7);
                }
              }
              v735 = (uint64_t *)*a4;
              v737 = *(uint64_t **)(*a4 + 24);
              v736 = *(uint64_t **)(*a4 + 32);
              if (v736 == v737)
                return;
              if (!v735[1])
                return;
              v738 = (double)*(uint64_t *)a3;
              v739 = 1;
              do
              {
                v740 = *v737++;
                v739 *= v740;
              }
              while (v737 != v736);
              if (!v739)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v735 + 1);
              v741 = (v735[4] - v735[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v741, &__str);
              do
              {
                v742 = (uint64_t *)__p[0];
                v743 = 0;
                if (__p[1] != __p[0])
                {
                  v744 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v745 = (uint64_t *)v735[6];
                  if (v744 <= 1)
                    v744 = 1;
                  do
                  {
                    v747 = *v742++;
                    v746 = v747;
                    v748 = *v745++;
                    v743 += v748 * v746;
                    --v744;
                  }
                  while (v744);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v735 + 1);
                v749 = (uint64_t *)v735[1];
                v750 = v735[9] + v743;
                v751 = *v749;
                *(long double *)(v751 + 8 * v750) = fmod(*(long double *)(*v749 + 8 * v750), v738);
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v735 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
          goto LABEL_2084;
        case 1:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
              v24 = (uint64_t)*(double *)a3;
LABEL_215:
              v19 = *a4 % v24;
              goto LABEL_2535;
            case 1:
              v956 = *(double *)a4;
              v957 = *(double *)a3;
LABEL_1416:
              v676 = fmod(v956, v957);
LABEL_2295:
              *(double *)a4 = v676;
              return;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v682 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v682, *a4);
              *a4 = (uint64_t)v682;
              *v682 = 1;
              do
              {
                v683 = __ldaxr((unint64_t *)v62);
                v65 = --v683 == 0;
              }
              while (__stlxr(v683, (unint64_t *)v62));
              goto LABEL_1075;
            case 3:
              v1157 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v1158 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v1158, *a4);
                *a4 = (uint64_t)v1158;
                *v1158 = 1;
                do
                {
                  v1159 = __ldaxr(v1157);
                  v1160 = v1159 - 1;
                }
                while (__stlxr(v1160, v1157));
                if (!v1160)
                {
                  v1161 = (void *)v1157[1];
                  if (v1161)
                  {
                    v1157[2] = (unint64_t)v1161;
                    operator delete(v1161);
                  }
                  MEMORY[0x219A19A08](v1157, 0x1080C409938AC02);
                }
              }
              v1162 = *a4;
              v1164 = *(long double **)(*a4 + 8);
              v1163 = *(long double **)(v1162 + 16);
              if (v1163 != v1164)
              {
                v1165 = *(double *)a3;
                if ((unint64_t)(v1163 - v1164) <= 1)
                  v1166 = 1;
                else
                  v1166 = v1163 - v1164;
                do
                {
                  *v1164 = fmod(*v1164, v1165);
                  ++v1164;
                  --v1166;
                }
                while (v1166);
              }
              return;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1223 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1223, *a4);
              *a4 = (uint64_t)v1223;
              *v1223 = 1;
              do
              {
                v1224 = __ldaxr(v663);
                v862 = --v1224 == 0;
              }
              while (__stlxr(v1224, v663));
              goto LABEL_2042;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v971 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v971, *a4);
              *a4 = (uint64_t)v971;
              *v971 = 1;
              do
              {
                v972 = __ldaxr(v663);
                v666 = --v972 == 0;
              }
              while (__stlxr(v972, v663));
              goto LABEL_1728;
            case 6:
            case 7:
              goto LABEL_2524;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1237 = operator new();
              v1238 = *a4;
              *(_QWORD *)v1237 = *(_QWORD *)*a4;
              *(_QWORD *)(v1237 + 8) = *(_QWORD *)(v1238 + 8);
              v1239 = *(_QWORD *)(v1238 + 16);
              *(_QWORD *)(v1237 + 16) = v1239;
              if (v1239)
              {
                v1240 = (unsigned int *)(v1239 + 8);
                do
                  v1241 = __ldxr(v1240);
                while (__stxr(v1241 + 1, v1240));
              }
              v1242 = *(_OWORD *)(v1238 + 24);
              v1243 = *(_OWORD *)(v1238 + 40);
              *(_OWORD *)(v1237 + 56) = *(_OWORD *)(v1238 + 56);
              *(_OWORD *)(v1237 + 40) = v1243;
              *(_OWORD *)(v1237 + 24) = v1242;
              *a4 = v1237;
              *(_QWORD *)v1237 = 1;
              do
              {
                v1244 = __ldaxr((unint64_t *)v897);
                v906 = --v1244 == 0;
              }
              while (__stlxr(v1244, (unint64_t *)v897));
              goto LABEL_2092;
            case 9:
              v752 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v753 = (_QWORD *)operator new();
                v754 = *a4 + 8;
                *v753 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v753 + 1, v754);
                *a4 = (uint64_t)v753;
                *v753 = 1;
                do
                {
                  v755 = __ldaxr(v752);
                  v756 = v755 - 1;
                }
                while (__stlxr(v756, v752));
                if (!v756)
                {
                  v757 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v752);
                  MEMORY[0x219A19A08](v757, 0x1030C407B73B9F7);
                }
              }
              v758 = (uint64_t *)*a4;
              v760 = *(uint64_t **)(*a4 + 24);
              v759 = *(uint64_t **)(*a4 + 32);
              if (v759 == v760)
                return;
              if (!v758[1])
                return;
              v761 = *(double *)a3;
              v762 = 1;
              do
              {
                v763 = *v760++;
                v762 *= v763;
              }
              while (v760 != v759);
              if (!v762)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v758 + 1);
              v764 = (v758[4] - v758[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v764, &__str);
              do
              {
                v765 = (uint64_t *)__p[0];
                v766 = 0;
                if (__p[1] != __p[0])
                {
                  v767 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v768 = (uint64_t *)v758[6];
                  if (v767 <= 1)
                    v767 = 1;
                  do
                  {
                    v770 = *v765++;
                    v769 = v770;
                    v771 = *v768++;
                    v766 += v771 * v769;
                    --v767;
                  }
                  while (v767);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v758 + 1);
                v772 = (uint64_t *)v758[1];
                v773 = v758[9] + v766;
                v774 = *v772;
                *(long double *)(v774 + 8 * v773) = fmod(*(long double *)(*v772 + 8 * v773), v761);
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v758 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_2637;
          }
LABEL_2084:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        case 2:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v80 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v80, *a4);
              *a4 = (uint64_t)v80;
              *v80 = 1;
              do
              {
                v81 = __ldaxr((unint64_t *)v62);
                v65 = --v81 == 0;
              }
              while (__stlxr(v81, (unint64_t *)v62));
              goto LABEL_1075;
            case 3:
              v426 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v473 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v473, *a4);
              *a4 = (uint64_t)v473;
              *v473 = 1;
              do
              {
                v474 = __ldaxr(v426);
                v429 = --v474 == 0;
              }
              while (__stlxr(v474, v426));
              goto LABEL_1113;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1006 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1006, *a4);
              *a4 = (uint64_t)v1006;
              *v1006 = 1;
              do
              {
                v1007 = __ldaxr(v663);
                v862 = --v1007 == 0;
              }
              while (__stlxr(v1007, v663));
              goto LABEL_2042;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v802 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v802, *a4);
              *a4 = (uint64_t)v802;
              *v802 = 1;
              do
              {
                v803 = __ldaxr(v663);
                v666 = --v803 == 0;
              }
              while (__stlxr(v803, v663));
              goto LABEL_1728;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1036 = operator new();
              v1037 = *a4;
              *(_QWORD *)v1036 = *(_QWORD *)*a4;
              *(_QWORD *)(v1036 + 8) = *(_QWORD *)(v1037 + 8);
              v1038 = *(_QWORD *)(v1037 + 16);
              *(_QWORD *)(v1036 + 16) = v1038;
              if (v1038)
              {
                v1039 = (unsigned int *)(v1038 + 8);
                do
                  v1040 = __ldxr(v1039);
                while (__stxr(v1040 + 1, v1039));
              }
              v1041 = *(_OWORD *)(v1037 + 24);
              v1042 = *(_OWORD *)(v1037 + 40);
              *(_OWORD *)(v1036 + 56) = *(_OWORD *)(v1037 + 56);
              *(_OWORD *)(v1036 + 40) = v1042;
              *(_OWORD *)(v1036 + 24) = v1041;
              *a4 = v1036;
              *(_QWORD *)v1036 = 1;
              do
              {
                v1043 = __ldaxr((unint64_t *)v897);
                v906 = --v1043 == 0;
              }
              while (__stlxr(v1043, (unint64_t *)v897));
              goto LABEL_2092;
            case 9:
              v497 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v645 = (_QWORD *)operator new();
              v646 = *a4 + 8;
              *v645 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v645 + 1, v646);
              *a4 = (uint64_t)v645;
              *v645 = 1;
              do
              {
                v647 = __ldaxr(v497);
                v501 = --v647 == 0;
              }
              while (__stlxr(v647, v497));
              goto LABEL_1446;
            default:
              goto LABEL_2637;
          }
        case 3:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v92 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v92, *a4);
              *a4 = (uint64_t)v92;
              *v92 = 1;
              do
              {
                v93 = __ldaxr((unint64_t *)v62);
                v65 = --v93 == 0;
              }
              while (__stlxr(v93, (unint64_t *)v62));
              goto LABEL_1075;
            case 3:
              v507 = *(_QWORD *)a3;
              v508 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v509 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v509, *a4);
                *a4 = (uint64_t)v509;
                *v509 = 1;
                do
                {
                  v510 = __ldaxr(v508);
                  v511 = v510 - 1;
                }
                while (__stlxr(v511, v508));
                if (!v511)
                {
                  v512 = (void *)v508[1];
                  if (v512)
                  {
                    v508[2] = (unint64_t)v512;
                    operator delete(v512);
                  }
                  MEMORY[0x219A19A08](v508, 0x1080C409938AC02);
                }
              }
              v513 = *a4;
              turi::flexible_type_fail(*(_QWORD *)(*a4 + 16) - *(_QWORD *)(*a4 + 8) == *(_QWORD *)(v507 + 16)
                                                                                     - *(_QWORD *)(v507 + 8));
              v514 = *(long double **)(v513 + 8);
              v515 = *(_QWORD *)(v513 + 16) - (_QWORD)v514;
              if (v515)
              {
                v516 = v515 >> 3;
                v517 = *(double **)(v507 + 8);
                if (v516 <= 1)
                  v518 = 1;
                else
                  v518 = v516;
                do
                {
                  v519 = *v517++;
                  *v514 = fmod(*v514, v519);
                  ++v514;
                  --v518;
                }
                while (v518);
              }
              return;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1129 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1129, *a4);
              *a4 = (uint64_t)v1129;
              *v1129 = 1;
              do
              {
                v1130 = __ldaxr(v663);
                v862 = --v1130 == 0;
              }
              while (__stlxr(v1130, v663));
              goto LABEL_2042;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v924 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v924, *a4);
              *a4 = (uint64_t)v924;
              *v924 = 1;
              do
              {
                v925 = __ldaxr(v663);
                v666 = --v925 == 0;
              }
              while (__stlxr(v925, v663));
              goto LABEL_1728;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1171 = operator new();
              v1172 = *a4;
              *(_QWORD *)v1171 = *(_QWORD *)*a4;
              *(_QWORD *)(v1171 + 8) = *(_QWORD *)(v1172 + 8);
              v1173 = *(_QWORD *)(v1172 + 16);
              *(_QWORD *)(v1171 + 16) = v1173;
              if (v1173)
              {
                v1174 = (unsigned int *)(v1173 + 8);
                do
                  v1175 = __ldxr(v1174);
                while (__stxr(v1175 + 1, v1174));
              }
              v1176 = *(_OWORD *)(v1172 + 24);
              v1177 = *(_OWORD *)(v1172 + 40);
              *(_OWORD *)(v1171 + 56) = *(_OWORD *)(v1172 + 56);
              *(_OWORD *)(v1171 + 40) = v1177;
              *(_OWORD *)(v1171 + 24) = v1176;
              *a4 = v1171;
              *(_QWORD *)v1171 = 1;
              do
              {
                v1178 = __ldaxr((unint64_t *)v897);
                v906 = --v1178 == 0;
              }
              while (__stlxr(v1178, (unint64_t *)v897));
              goto LABEL_2092;
            case 9:
              v497 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v704 = (_QWORD *)operator new();
              v705 = *a4 + 8;
              *v704 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v704 + 1, v705);
              *a4 = (uint64_t)v704;
              *v704 = 1;
              do
              {
                v706 = __ldaxr(v497);
                v501 = --v706 == 0;
              }
              while (__stlxr(v706, v497));
              goto LABEL_1446;
            default:
              goto LABEL_2637;
          }
        case 4:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v63 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v63, *a4);
              *a4 = (uint64_t)v63;
              *v63 = 1;
              do
              {
                v64 = __ldaxr((unint64_t *)v62);
                v65 = --v64 == 0;
              }
              while (__stlxr(v64, (unint64_t *)v62));
              goto LABEL_1075;
            case 3:
              v426 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v427 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v427, *a4);
              *a4 = (uint64_t)v427;
              *v427 = 1;
              do
              {
                v428 = __ldaxr(v426);
                v429 = --v428 == 0;
              }
              while (__stlxr(v428, v426));
              goto LABEL_1113;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v860 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v860, *a4);
              *a4 = (uint64_t)v860;
              *v860 = 1;
              do
              {
                v861 = __ldaxr(v663);
                v862 = --v861 == 0;
              }
              while (__stlxr(v861, v663));
              goto LABEL_2042;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v664 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v664, *a4);
              *a4 = (uint64_t)v664;
              *v664 = 1;
              do
              {
                v665 = __ldaxr(v663);
                v666 = --v665 == 0;
              }
              while (__stlxr(v665, v663));
              goto LABEL_1728;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v898 = operator new();
              v899 = *a4;
              *(_QWORD *)v898 = *(_QWORD *)*a4;
              *(_QWORD *)(v898 + 8) = *(_QWORD *)(v899 + 8);
              v900 = *(_QWORD *)(v899 + 16);
              *(_QWORD *)(v898 + 16) = v900;
              if (v900)
              {
                v901 = (unsigned int *)(v900 + 8);
                do
                  v902 = __ldxr(v901);
                while (__stxr(v902 + 1, v901));
              }
              v903 = *(_OWORD *)(v899 + 24);
              v904 = *(_OWORD *)(v899 + 40);
              *(_OWORD *)(v898 + 56) = *(_OWORD *)(v899 + 56);
              *(_OWORD *)(v898 + 40) = v904;
              *(_OWORD *)(v898 + 24) = v903;
              *a4 = v898;
              *(_QWORD *)v898 = 1;
              do
              {
                v905 = __ldaxr((unint64_t *)v897);
                v906 = --v905 == 0;
              }
              while (__stlxr(v905, (unint64_t *)v897));
              goto LABEL_2092;
            case 9:
              v497 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v498 = (_QWORD *)operator new();
              v499 = *a4 + 8;
              *v498 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v498 + 1, v499);
              *a4 = (uint64_t)v498;
              *v498 = 1;
              do
              {
                v500 = __ldaxr(v497);
                v501 = --v500 == 0;
              }
              while (__stlxr(v500, v497));
              goto LABEL_1446;
            default:
              goto LABEL_2637;
          }
        case 5:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v175 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v175, *a4);
              *a4 = (uint64_t)v175;
              *v175 = 1;
              do
              {
                v176 = __ldaxr((unint64_t *)v62);
                v65 = --v176 == 0;
              }
              while (__stlxr(v176, (unint64_t *)v62));
              goto LABEL_1075;
            case 3:
              v426 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v667 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v667, *a4);
              *a4 = (uint64_t)v667;
              *v667 = 1;
              do
              {
                v668 = __ldaxr(v426);
                v429 = --v668 == 0;
              }
              while (__stlxr(v668, v426));
              goto LABEL_1113;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1362 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1362, *a4);
              *a4 = (uint64_t)v1362;
              *v1362 = 1;
              do
              {
                v1363 = __ldaxr(v663);
                v862 = --v1363 == 0;
              }
              while (__stlxr(v1363, v663));
              goto LABEL_2042;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1119 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1119, *a4);
              *a4 = (uint64_t)v1119;
              *v1119 = 1;
              do
              {
                v1120 = __ldaxr(v663);
                v666 = --v1120 == 0;
              }
              while (__stlxr(v1120, v663));
              goto LABEL_1728;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1424 = operator new();
              v1425 = *a4;
              *(_QWORD *)v1424 = *(_QWORD *)*a4;
              *(_QWORD *)(v1424 + 8) = *(_QWORD *)(v1425 + 8);
              v1426 = *(_QWORD *)(v1425 + 16);
              *(_QWORD *)(v1424 + 16) = v1426;
              if (v1426)
              {
                v1427 = (unsigned int *)(v1426 + 8);
                do
                  v1428 = __ldxr(v1427);
                while (__stxr(v1428 + 1, v1427));
              }
              v1429 = *(_OWORD *)(v1425 + 24);
              v1430 = *(_OWORD *)(v1425 + 40);
              *(_OWORD *)(v1424 + 56) = *(_OWORD *)(v1425 + 56);
              *(_OWORD *)(v1424 + 40) = v1430;
              *(_OWORD *)(v1424 + 24) = v1429;
              *a4 = v1424;
              *(_QWORD *)v1424 = 1;
              do
              {
                v1431 = __ldaxr((unint64_t *)v897);
                v906 = --v1431 == 0;
              }
              while (__stlxr(v1431, (unint64_t *)v897));
              goto LABEL_2092;
            case 9:
              v497 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v921 = (_QWORD *)operator new();
              v922 = *a4 + 8;
              *v921 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v921 + 1, v922);
              *a4 = (uint64_t)v921;
              *v921 = 1;
              do
              {
                v923 = __ldaxr(v497);
                v501 = --v923 == 0;
              }
              while (__stlxr(v923, v497));
              goto LABEL_1446;
            default:
              goto LABEL_2637;
          }
        case 6:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v181 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v181, *a4);
              *a4 = (uint64_t)v181;
              *v181 = 1;
              do
              {
                v182 = __ldaxr((unint64_t *)v62);
                v65 = --v182 == 0;
              }
              while (__stlxr(v182, (unint64_t *)v62));
              goto LABEL_1075;
            case 3:
              v426 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v702 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v702, *a4);
              *a4 = (uint64_t)v702;
              *v702 = 1;
              do
              {
                v703 = __ldaxr(v426);
                v429 = --v703 == 0;
              }
              while (__stlxr(v703, v426));
              goto LABEL_1113;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1435 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1435, *a4);
              *a4 = (uint64_t)v1435;
              *v1435 = 1;
              do
              {
                v1436 = __ldaxr(v663);
                v862 = --v1436 == 0;
              }
              while (__stlxr(v1436, v663));
              goto LABEL_2042;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1169 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1169, *a4);
              *a4 = (uint64_t)v1169;
              *v1169 = 1;
              do
              {
                v1170 = __ldaxr(v663);
                v666 = --v1170 == 0;
              }
              while (__stlxr(v1170, v663));
              goto LABEL_1728;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1449 = operator new();
              v1450 = *a4;
              *(_QWORD *)v1449 = *(_QWORD *)*a4;
              *(_QWORD *)(v1449 + 8) = *(_QWORD *)(v1450 + 8);
              v1451 = *(_QWORD *)(v1450 + 16);
              *(_QWORD *)(v1449 + 16) = v1451;
              if (v1451)
              {
                v1452 = (unsigned int *)(v1451 + 8);
                do
                  v1453 = __ldxr(v1452);
                while (__stxr(v1453 + 1, v1452));
              }
              v1454 = *(_OWORD *)(v1450 + 24);
              v1455 = *(_OWORD *)(v1450 + 40);
              *(_OWORD *)(v1449 + 56) = *(_OWORD *)(v1450 + 56);
              *(_OWORD *)(v1449 + 40) = v1455;
              *(_OWORD *)(v1449 + 24) = v1454;
              *a4 = v1449;
              *(_QWORD *)v1449 = 1;
              do
              {
                v1456 = __ldaxr((unint64_t *)v897);
                v906 = --v1456 == 0;
              }
              while (__stlxr(v1456, (unint64_t *)v897));
              goto LABEL_2092;
            case 9:
              v497 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v953 = (_QWORD *)operator new();
              v954 = *a4 + 8;
              *v953 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v953 + 1, v954);
              *a4 = (uint64_t)v953;
              *v953 = 1;
              do
              {
                v955 = __ldaxr(v497);
                v501 = --v955 == 0;
              }
              while (__stlxr(v955, v497));
              goto LABEL_1446;
            default:
              goto LABEL_2637;
          }
        case 7:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v96 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v96, *a4);
              *a4 = (uint64_t)v96;
              *v96 = 1;
              do
              {
                v97 = __ldaxr((unint64_t *)v62);
                v65 = --v97 == 0;
              }
              while (__stlxr(v97, (unint64_t *)v62));
              goto LABEL_1075;
            case 3:
              v426 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v520 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v520, *a4);
              *a4 = (uint64_t)v520;
              *v520 = 1;
              do
              {
                v521 = __ldaxr(v426);
                v429 = --v521 == 0;
              }
              while (__stlxr(v521, v426));
              goto LABEL_1113;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1167 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1167, *a4);
              *a4 = (uint64_t)v1167;
              *v1167 = 1;
              do
              {
                v1168 = __ldaxr(v663);
                v862 = --v1168 == 0;
              }
              while (__stlxr(v1168, v663));
              goto LABEL_2042;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v949 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v949, *a4);
              *a4 = (uint64_t)v949;
              *v949 = 1;
              do
              {
                v950 = __ldaxr(v663);
                v666 = --v950 == 0;
              }
              while (__stlxr(v950, v663));
              goto LABEL_1728;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1211 = operator new();
              v1212 = *a4;
              *(_QWORD *)v1211 = *(_QWORD *)*a4;
              *(_QWORD *)(v1211 + 8) = *(_QWORD *)(v1212 + 8);
              v1213 = *(_QWORD *)(v1212 + 16);
              *(_QWORD *)(v1211 + 16) = v1213;
              if (v1213)
              {
                v1214 = (unsigned int *)(v1213 + 8);
                do
                  v1215 = __ldxr(v1214);
                while (__stxr(v1215 + 1, v1214));
              }
              v1216 = *(_OWORD *)(v1212 + 24);
              v1217 = *(_OWORD *)(v1212 + 40);
              *(_OWORD *)(v1211 + 56) = *(_OWORD *)(v1212 + 56);
              *(_OWORD *)(v1211 + 40) = v1217;
              *(_OWORD *)(v1211 + 24) = v1216;
              *a4 = v1211;
              *(_QWORD *)v1211 = 1;
              do
              {
                v1218 = __ldaxr((unint64_t *)v897);
                v906 = --v1218 == 0;
              }
              while (__stlxr(v1218, (unint64_t *)v897));
              goto LABEL_2092;
            case 9:
              v497 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v716 = (_QWORD *)operator new();
              v717 = *a4 + 8;
              *v716 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v716 + 1, v717);
              *a4 = (uint64_t)v716;
              *v716 = 1;
              do
              {
                v718 = __ldaxr(v497);
                v501 = --v718 == 0;
              }
              while (__stlxr(v718, v497));
              goto LABEL_1446;
            default:
              goto LABEL_2637;
          }
        case 8:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v193 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v193, *a4);
              *a4 = (uint64_t)v193;
              *v193 = 1;
              do
              {
                v194 = __ldaxr((unint64_t *)v62);
                v65 = --v194 == 0;
              }
              while (__stlxr(v194, (unint64_t *)v62));
              goto LABEL_1075;
            case 3:
              v426 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v707 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v707, *a4);
              *a4 = (uint64_t)v707;
              *v707 = 1;
              do
              {
                v708 = __ldaxr(v426);
                v429 = --v708 == 0;
              }
              while (__stlxr(v708, v426));
              goto LABEL_1113;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1457 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1457, *a4);
              *a4 = (uint64_t)v1457;
              *v1457 = 1;
              do
              {
                v1458 = __ldaxr(v663);
                v862 = --v1458 == 0;
              }
              while (__stlxr(v1458, v663));
              goto LABEL_2042;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1219 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1219, *a4);
              *a4 = (uint64_t)v1219;
              *v1219 = 1;
              do
              {
                v1220 = __ldaxr(v663);
                v666 = --v1220 == 0;
              }
              while (__stlxr(v1220, v663));
              goto LABEL_1728;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v1502 = operator new();
              v1503 = *a4;
              *(_QWORD *)v1502 = *(_QWORD *)*a4;
              *(_QWORD *)(v1502 + 8) = *(_QWORD *)(v1503 + 8);
              v1504 = *(_QWORD *)(v1503 + 16);
              *(_QWORD *)(v1502 + 16) = v1504;
              if (v1504)
              {
                v1505 = (unsigned int *)(v1504 + 8);
                do
                  v1506 = __ldxr(v1505);
                while (__stxr(v1506 + 1, v1505));
              }
              v1507 = *(_OWORD *)(v1503 + 24);
              v1508 = *(_OWORD *)(v1503 + 40);
              *(_OWORD *)(v1502 + 56) = *(_OWORD *)(v1503 + 56);
              *(_OWORD *)(v1502 + 40) = v1508;
              *(_OWORD *)(v1502 + 24) = v1507;
              *a4 = v1502;
              *(_QWORD *)v1502 = 1;
              do
              {
                v1509 = __ldaxr((unint64_t *)v897);
                v906 = --v1509 == 0;
              }
              while (__stlxr(v1509, (unint64_t *)v897));
              goto LABEL_2092;
            case 9:
              v497 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v981 = (_QWORD *)operator new();
              v982 = *a4 + 8;
              *v981 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v981 + 1, v982);
              *a4 = (uint64_t)v981;
              *v981 = 1;
              do
              {
                v983 = __ldaxr(v497);
                v501 = --v983 == 0;
              }
              while (__stlxr(v983, v497));
LABEL_1446:
              if (!v501)
                goto LABEL_2524;
              v684 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v497);
              v984 = 2071181815;
              goto LABEL_2095;
            default:
              goto LABEL_2637;
          }
        case 9:
          switch(*((_BYTE *)a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_2524;
            case 2:
              v62 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v75 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v75, *a4);
              *a4 = (uint64_t)v75;
              *v75 = 1;
              do
              {
                v76 = __ldaxr((unint64_t *)v62);
                v65 = --v76 == 0;
              }
              while (__stlxr(v76, (unint64_t *)v62));
LABEL_1075:
              if (!v65)
                goto LABEL_2524;
              if (*(char *)(v62 + 31) < 0)
                operator delete(*(void **)(v62 + 8));
              v684 = (_QWORD *)v62;
              v685 = 0x1012C404EF22A49;
              goto LABEL_2096;
            case 3:
              v426 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v465 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v465, *a4);
              *a4 = (uint64_t)v465;
              *v465 = 1;
              do
              {
                v466 = __ldaxr(v426);
                v429 = --v466 == 0;
              }
              while (__stlxr(v466, v426));
LABEL_1113:
              if (!v429)
                goto LABEL_2524;
              v709 = (void *)v426[1];
              if (v709)
              {
                v426[2] = (unint64_t)v709;
                operator delete(v709);
              }
              v684 = v426;
              v685 = 0x1080C409938AC02;
              goto LABEL_2096;
            case 4:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v951 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v951, *a4);
              *a4 = (uint64_t)v951;
              *v951 = 1;
              do
              {
                v952 = __ldaxr(v663);
                v862 = --v952 == 0;
              }
              while (__stlxr(v952, v663));
LABEL_2042:
              if (!v862)
                goto LABEL_2524;
              __p[0] = v663 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_2045;
            case 5:
              v663 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v714 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v714, *a4);
              *a4 = (uint64_t)v714;
              *v714 = 1;
              do
              {
                v715 = __ldaxr(v663);
                v666 = --v715 == 0;
              }
              while (__stlxr(v715, v663));
LABEL_1728:
              if (!v666)
                goto LABEL_2524;
              __p[0] = v663 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_2045:
              v684 = v663;
              v685 = 0x1020C405E66F15BLL;
              goto LABEL_2096;
            case 8:
              v897 = *a4;
              if (*(_QWORD *)*a4 == 1)
                goto LABEL_2524;
              v973 = operator new();
              v974 = *a4;
              *(_QWORD *)v973 = *(_QWORD *)*a4;
              *(_QWORD *)(v973 + 8) = *(_QWORD *)(v974 + 8);
              v975 = *(_QWORD *)(v974 + 16);
              *(_QWORD *)(v973 + 16) = v975;
              if (v975)
              {
                v976 = (unsigned int *)(v975 + 8);
                do
                  v977 = __ldxr(v976);
                while (__stxr(v977 + 1, v976));
              }
              v978 = *(_OWORD *)(v974 + 24);
              v979 = *(_OWORD *)(v974 + 40);
              *(_OWORD *)(v973 + 56) = *(_OWORD *)(v974 + 56);
              *(_OWORD *)(v973 + 40) = v979;
              *(_OWORD *)(v973 + 24) = v978;
              *a4 = v973;
              *(_QWORD *)v973 = 1;
              do
              {
                v980 = __ldaxr((unint64_t *)v897);
                v906 = --v980 == 0;
              }
              while (__stlxr(v980, (unint64_t *)v897));
LABEL_2092:
              if (!v906)
                goto LABEL_2524;
              boost::detail::shared_count::~shared_count((unsigned int **)(v897 + 16));
              v684 = (_QWORD *)v897;
              v984 = -235920773;
LABEL_2095:
              v685 = v984 | 0x1030C4000000000;
LABEL_2096:
              MEMORY[0x219A19A08](v684, v685);
LABEL_2524:
              turi::flexible_type_fail(0);
              return;
            case 9:
              v567 = *(_QWORD *)a3;
              v568 = (unint64_t *)*a4;
              if (*(_QWORD *)*a4 != 1)
              {
                v569 = (_QWORD *)operator new();
                v570 = *a4 + 8;
                *v569 = *(_QWORD *)*a4;
                turi::flexible_type_impl::ndarray<double>::ndarray(v569 + 1, v570);
                *a4 = (uint64_t)v569;
                *v569 = 1;
                do
                {
                  v571 = __ldaxr(v568);
                  v572 = v571 - 1;
                }
                while (__stlxr(v572, v568));
                if (!v572)
                {
                  v573 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v568);
                  MEMORY[0x219A19A08](v573, 0x1030C407B73B9F7);
                }
              }
              v574 = *a4;
              v575 = (uint64_t *)(*a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v575, v567 + 8))
                turi::flexible_type_impl::ndarray<double>::operator%=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              v577 = *(uint64_t **)(v574 + 24);
              v576 = *(uint64_t **)(v574 + 32);
              if (v576 == v577)
                return;
              if (!*v575)
                return;
              v578 = 1;
              do
              {
                v579 = *v577++;
                v578 *= v579;
              }
              while (v577 != v576);
              if (!v578)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v575);
              v580 = (uint64_t)(*(_QWORD *)(v574 + 32) - *(_QWORD *)(v574 + 24)) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v580, &__str);
              do
              {
                v581 = (uint64_t *)__p[0];
                v582 = 0;
                if (__p[1] != __p[0])
                {
                  v583 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v584 = *(uint64_t **)(v574 + 48);
                  if (v583 <= 1)
                    v583 = 1;
                  do
                  {
                    v586 = *v581++;
                    v585 = v586;
                    v587 = *v584++;
                    v582 += v587 * v585;
                    --v583;
                  }
                  while (v583);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v575);
                v588 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  v589 = 0;
                }
                else
                {
                  v589 = 0;
                  v590 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v591 = *(uint64_t **)(v567 + 48);
                  if (v590 <= 1)
                    v590 = 1;
                  do
                  {
                    v593 = *v588++;
                    v592 = v593;
                    v594 = *v591++;
                    v589 += v594 * v592;
                    --v590;
                  }
                  while (v590);
                }
                v595 = *(_QWORD *)(v574 + 72) + v582;
                v596 = **(_QWORD **)(v574 + 8);
                *(long double *)(v596 + 8 * v595) = fmod(*(long double *)(v596 + 8 * v595), *(long double *)(**(_QWORD **)(v567 + 8)+ 8 * (*(_QWORD *)(v567 + 72) + v589)));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v575, (uint64_t *)__p));
              goto LABEL_2084;
            default:
              goto LABEL_2637;
          }
        default:
LABEL_2637:
          turi::flexible_type_fail(0);
          __break(1u);
          break;
      }
      return;
    default:
      *a4 = 0;
      *((_DWORD *)a4 + 2) = 0;
      *((_BYTE *)a4 + 12) = 0;
      if (a4 != &turi::FLEX_UNDEFINED)
      {
        *(uint64_t *)((char *)a4 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *a4 = turi::FLEX_UNDEFINED;
        v28 = byte_254FEDD1C;
        *((_BYTE *)a4 + 12) = byte_254FEDD1C;
        switch(v28)
        {
          case 2:
            v29 = (unint64_t *)*a4;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 + 1, v29));
            break;
          case 3:
            v46 = (unint64_t *)*a4;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 + 1, v46));
            break;
          case 4:
            v42 = (unint64_t *)*a4;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 + 1, v42));
            break;
          case 5:
            v48 = (unint64_t *)*a4;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 + 1, v48));
            break;
          case 8:
            v50 = (unint64_t *)*a4;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 + 1, v50));
            break;
          case 9:
            v44 = (unint64_t *)*a4;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 + 1, v44));
            break;
          default:
            return;
        }
      }
      return;
  }
  do
  {
    if (!v107 || *v102 > *v103)
      goto LABEL_2201;
    if (*v102 < *v103)
      goto LABEL_407;
    --v107;
    ++v102;
    ++v103;
    --v106;
  }
  while (v106);
LABEL_231:
  if (v105 > v104)
  {
LABEL_2201:
    v15 = 1;
    goto LABEL_690;
  }
LABEL_407:
  switch(a3[12])
  {
    case 0:
      v15 = 0;
      switch(*((_BYTE *)this + 12))
      {
        case 0:
LABEL_457:
          v235 = *(_QWORD *)this == *(_QWORD *)a3;
          goto LABEL_682;
        case 1:
LABEL_739:
          v365 = *(double *)this;
          v366 = *(_QWORD *)a3;
          goto LABEL_740;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_690;
        case 6:
LABEL_732:
          v235 = *(_QWORD *)a3 == (uint64_t)(*(_QWORD *)this << 8) >> 8 && *((_DWORD *)this + 2) == 0;
          goto LABEL_682;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      v15 = 0;
      switch(*((_BYTE *)this + 12))
      {
        case 0:
LABEL_686:
          v365 = *(double *)a3;
          v366 = *(_QWORD *)this;
LABEL_740:
          v235 = v365 == (double)v366;
          goto LABEL_682;
        case 1:
LABEL_741:
          v15 = *(double *)this == *(double *)a3;
          goto LABEL_690;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_690;
        case 6:
LABEL_735:
          v387 = *(double *)a3;
          v388 = (double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)this << 8) >> 8);
          goto LABEL_743;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v15 = 0;
      v354 = *((unsigned __int8 *)this + 12);
      if (v354 - 3 < 7 || v354 < 2)
        goto LABEL_690;
      if (v354 != 2)
        turi::apply_binary_op_ff();
      v355 = *(_QWORD *)a3;
      v356 = *(_QWORD *)this;
      if (*(char *)(*(_QWORD *)this + 31) < 0)
        v174 = *(_QWORD *)(v356 + 16);
      else
        v174 = *(unsigned __int8 *)(*(_QWORD *)this + 31);
      if (*(char *)(v355 + 31) < 0)
        v1840 = *(_QWORD *)(v355 + 16);
      else
        v1840 = *(unsigned __int8 *)(v355 + 31);
      if (v174 != v1840)
        goto LABEL_689;
      v1816 = (unsigned __int8 *)(v356 + 8);
      if ((*(_BYTE *)(*(_QWORD *)this + 31) & 0x80) != 0)
        v1816 = *(unsigned __int8 **)v1816;
      v1817 = (unsigned __int8 *)(v355 + 8);
      if ((*(_BYTE *)(v355 + 31) & 0x80) != 0)
        v1817 = *(unsigned __int8 **)v1817;
      if ((*(_BYTE *)(*(_QWORD *)this + 31) & 0x80) != 0)
      {
LABEL_2610:
        v235 = memcmp(v1816, v1817, v174) == 0;
LABEL_682:
        v15 = v235;
      }
      else
      {
        if (!v174)
          goto LABEL_2201;
        v1841 = v174 - 1;
        do
        {
          v1843 = *v1816++;
          v1842 = v1843;
          v1845 = *v1817++;
          v1844 = v1845;
          v314 = v1841-- != 0;
          v1846 = v314;
          v15 = v1842 == v1844;
        }
        while (v1842 == v1844 && (v1846 & 1) != 0);
      }
      goto LABEL_690;
    case 3:
      v357 = *((unsigned __int8 *)this + 12);
      if (v357 > 9)
        turi::apply_binary_op_ff();
      if (v357 != 3)
        goto LABEL_689;
      v358 = *(double **)(*(_QWORD *)this + 8);
      v359 = *(double **)(*(_QWORD *)this + 16);
      v186 = v359 - v358;
      v360 = *(double **)(*(_QWORD *)a3 + 8);
      if (v186 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v360) >> 3)
        goto LABEL_689;
      if (v359 == v358)
        goto LABEL_2201;
      if (v186 <= 1)
        v361 = 1;
      else
        v361 = v359 - v358;
      if (*v358 != *v360)
        goto LABEL_689;
      v362 = 1;
      do
      {
        v190 = v362;
        if (v361 == v362)
          break;
        v363 = v358[v362];
        v364 = v360[v362++];
      }
      while (v363 == v364);
LABEL_679:
      v15 = v190 >= v186;
      goto LABEL_690;
    case 4:
      v328 = *((unsigned __int8 *)this + 12);
      if (v328 > 9)
        turi::apply_binary_op_ff();
      if (v328 != 4)
        goto LABEL_689;
LABEL_636:
      v329 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)this + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
      goto LABEL_2526;
    case 5:
      v367 = *((unsigned __int8 *)this + 12);
      if (v367 > 9)
        turi::apply_binary_op_ff();
      if (v367 != 5)
        goto LABEL_689;
LABEL_2525:
      v329 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)__p, (uint64_t **)(*(_QWORD *)this + 8), (uint64_t **)(*(_QWORD *)a3 + 8));
      goto LABEL_2526;
    case 6:
      v15 = 0;
      switch(*((_BYTE *)this + 12))
      {
        case 0:
LABEL_692:
          v235 = *(_QWORD *)this == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && *((_DWORD *)a3 + 2) == 0;
          goto LABEL_682;
        case 1:
LABEL_742:
          v388 = *(double *)this;
          v387 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
LABEL_743:
          v15 = vabdd_f64(v388, v387) < 0.0000005;
          goto LABEL_690;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_690;
        case 6:
LABEL_736:
          v235 = ((*(_QWORD *)a3 ^ *(_QWORD *)this) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)this + 2) == *((_DWORD *)a3 + 2);
          goto LABEL_682;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v197 = *((unsigned __int8 *)this + 12);
      if (v197 >= 0xA)
        turi::apply_binary_op_ff();
LABEL_681:
      v235 = v197 == 7;
      goto LABEL_682;
    case 8:
      v15 = 0;
      v368 = *((unsigned __int8 *)this + 12);
      if (v368 < 8 || v368 == 9)
        goto LABEL_690;
      if (v368 != 8)
        turi::apply_binary_op_ff();
LABEL_698:
      v329 = turi::image_type::operator==(*(_QWORD *)this + 8, *(_QWORD *)a3 + 8);
LABEL_2526:
      v15 = v329;
      goto LABEL_690;
    case 9:
      v330 = *((unsigned __int8 *)this + 12);
      if (v330 < 9)
        goto LABEL_689;
      if (v330 != 9)
        turi::apply_binary_op_ff();
      v331 = *(_QWORD *)a3;
      v332 = *(_QWORD **)this;
      if (*(_QWORD **)a3 == v332)
        goto LABEL_2201;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v332 + 1), v331 + 8))
      {
LABEL_689:
        v15 = 0;
        goto LABEL_690;
      }
      v334 = (char *)v332[3];
      v333 = (char *)v332[4];
      v335 = v333 - v334;
      if (v333 == v334)
        goto LABEL_2201;
      if (!v332[1])
        goto LABEL_2201;
      v336 = 1;
      do
      {
        v337 = *(_QWORD *)v334;
        v334 += 8;
        v336 *= v337;
      }
      while (v334 != v333);
      if (!v336)
        goto LABEL_2201;
      v1866 = 0;
      std::vector<unsigned long>::vector(__p, v335 >> 3, &v1866);
      while (1)
      {
        v118 = __p[0];
        if (__p[1] == __p[0])
        {
          v346 = 0;
          v347 = *(double *)(*(_QWORD *)v332[1] + 8 * v332[9]);
        }
        else
        {
          v338 = 0;
          v339 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v340 = (uint64_t *)v332[6];
          if (v339 <= 1)
            v339 = 1;
          v341 = (uint64_t *)__p[0];
          v342 = v339;
          do
          {
            v344 = *v341++;
            v343 = v344;
            v345 = *v340++;
            v338 += v345 * v343;
            --v342;
          }
          while (v342);
          v346 = 0;
          v347 = *(double *)(*(_QWORD *)v332[1] + 8 * (v332[9] + v338));
          v348 = *(uint64_t **)(v331 + 48);
          v349 = (uint64_t *)__p[0];
          do
          {
            v351 = *v349++;
            v350 = v351;
            v352 = *v348++;
            v346 += v352 * v350;
            --v339;
          }
          while (v339);
        }
        v353 = *(double *)(**(_QWORD **)(v331 + 8) + 8 * (*(_QWORD *)(v331 + 72) + v346));
        v15 = v347 == v353;
        if (v347 != v353)
          break;
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v332 + 1), (uint64_t *)__p))goto LABEL_659;
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
LABEL_660:
  if (v118)
  {
    __p[1] = v118;
    operator delete(v118);
  }
LABEL_690:
  *((_BYTE *)a4 + 12) = 0;
  v19 = v15;
LABEL_2534:
  *((_DWORD *)a4 + 2) = 0;
LABEL_2535:
  *a4 = v19;
}

void sub_217EEFA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  uint64_t v49;

  v49 = 416;
  while (1)
  {
    if (*(char *)(v47 + v49 - 9) < 0)
      operator delete(*(void **)(v47 + v49 - 32));
    v49 -= 32;
    if (!v49)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t tc_ft_unary_op(uint64_t a1, char *__s, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  double *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned int v20;
  BOOL v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  double *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  std::string::size_type size;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  uint64_t v86;
  unint64_t *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  double v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  std::string::size_type v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  void *v124;
  double *v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  __int128 v136;
  __int128 v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int v145;
  unint64_t v146;
  void *v147;
  unint64_t v148;
  unint64_t v149;
  double v150;
  int v151;
  char v152;
  uint64_t i;
  _QWORD *v154;
  size_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  std::logic_error *exception;
  std::string v166;
  uint64_t v167;
  double v168[2];
  std::string __p;
  int v170;
  uint64_t v171[3];
  int v172;
  _QWORD v173[3];
  int v174;
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flexible_type\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  if ((v6 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "-");
    v170 = 0;
    std::string::basic_string[abi:ne180100]<0>(v171, "abs");
    v172 = 1;
    std::string::basic_string[abi:ne180100]<0>(v173, "!");
    v174 = 2;
    std::map<std::string,turi::unary_op>::map[abi:ne180100]((uint64_t)&turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map, (const void **)&__p.__r_.__value_.__l.__data_, 3);
    for (i = 0; i != -12; i -= 4)
    {
      if (SHIBYTE(v173[i + 2]) < 0)
        operator delete((void *)v173[i]);
    }
    __cxa_atexit((void (*)(void *))std::map<std::string,turi::unary_op>::~map[abi:ne180100], &turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map, &dword_217E69000);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map == v7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unary operator ", 15);
    v155 = strlen(__s);
    v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)__s, v155);
    v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)" not recognized. ", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)"Available operators are ", 24);
    v158 = turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map;
    if ((_UNKNOWN *)turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map != &unk_254FEDDB8)
    {
      do
      {
        v159 = *(char *)(v158 + 55);
        if (v159 >= 0)
          v160 = v158 + 32;
        else
          v160 = *(_QWORD *)(v158 + 32);
        if (v159 >= 0)
          v161 = *(unsigned __int8 *)(v158 + 55);
        else
          v161 = *(_QWORD *)(v158 + 40);
        v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v160, v161);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)" ", 1);
        v163 = *(_QWORD **)(v158 + 8);
        if (v163)
        {
          do
          {
            v164 = v163;
            v163 = (_QWORD *)*v163;
          }
          while (v163);
        }
        else
        {
          do
          {
            v164 = *(_QWORD **)(v158 + 16);
            v21 = *v164 == v158;
            v158 = (uint64_t)v164;
          }
          while (!v21);
        }
        v158 = (uint64_t)v164;
      }
      while (v164 != (_QWORD *)&unk_254FEDDB8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v166);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v8 = (double *)(a1 + 8);
  v9 = *(_DWORD *)(v7 + 56);
  if (v9 == 2)
  {
    v20 = 0;
    switch(*(_BYTE *)(a1 + 20))
    {
      case 0:
        v21 = *(_QWORD *)v8 == 0;
        goto LABEL_36;
      case 1:
        v21 = *v8 == 0.0;
        goto LABEL_36;
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
        goto LABEL_39;
      case 6:
        v21 = (*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(a1 + 16) == 0;
LABEL_36:
        v20 = v21;
LABEL_39:
        BYTE4(v168[1]) = 0;
        LODWORD(v168[1]) = 0;
        *(_QWORD *)&v168[0] = v20;
        goto LABEL_221;
      default:
LABEL_243:
        result = turi::flexible_type_fail(0);
LABEL_245:
        __break(1u);
        return result;
    }
  }
  if (v9)
  {
    memset(v168, 0, 13);
    if (v8 != v168)
    {
      *(double *)((char *)v168 + 5) = *(double *)(a1 + 13);
      v168[0] = *v8;
      BYTE4(v168[1]) = *(_BYTE *)(a1 + 20);
      switch(BYTE4(v168[1]))
      {
        case 2:
          v22 = *(unint64_t **)&v168[0];
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
          break;
        case 3:
          v29 = *(unint64_t **)&v168[0];
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
          break;
        case 4:
          v25 = *(unint64_t **)&v168[0];
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 + 1, v25));
          break;
        case 5:
          v31 = *(unint64_t **)&v168[0];
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 1, v31));
          break;
        case 8:
          v33 = *(unint64_t **)&v168[0];
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
          break;
        case 9:
          v27 = *(unint64_t **)&v168[0];
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
          break;
        default:
          goto LABEL_221;
      }
    }
    goto LABEL_221;
  }
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned __int8 *)(a1 + 20);
  v12 = *(_DWORD *)(a1 + 16);
  v13 = v10;
  switch(v11)
  {
    case 0u:
      v13 = -v10;
      goto LABEL_31;
    case 1u:
      v13 = v10 ^ 0x8000000000000000;
LABEL_31:
      *(_QWORD *)&v168[0] = v13;
      LODWORD(v168[1]) = v12;
      v24 = v11;
      BYTE4(v168[1]) = v11;
      goto LABEL_121;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 8u:
    case 9u:
      do
        v14 = __ldaxr((unint64_t *)v10);
      while (__stlxr(v14 + 1, (unint64_t *)v10));
      v13 = v10;
      switch(v11)
      {
        case 2u:
          if (*(_QWORD *)v10 == 1)
            goto LABEL_70;
          v15 = operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v15, v10);
          *(_QWORD *)v15 = 1;
          do
          {
            v16 = __ldaxr((unint64_t *)v10);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, (unint64_t *)v10));
          v13 = v15;
          if (v17)
            goto LABEL_116;
          v18 = 0x1012C404EF22A49;
          if (*(char *)(v10 + 31) < 0)
            operator delete(*(void **)(v10 + 8));
          goto LABEL_115;
        case 3u:
          if (*(_QWORD *)v10 == 1)
          {
            v13 = v10;
          }
          else
          {
            v39 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v39, v10);
            *v39 = 1;
            do
            {
              v40 = __ldaxr((unint64_t *)v10);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, (unint64_t *)v10));
            v13 = (unint64_t)v39;
            if (!v41)
            {
              v42 = *(void **)(v10 + 8);
              if (v42)
              {
                *(_QWORD *)(v10 + 16) = v42;
                operator delete(v42);
              }
              MEMORY[0x219A19A08](v10, 0x1080C409938AC02);
              v13 = (unint64_t)v39;
            }
          }
          v43 = *(double **)(v13 + 8);
          v44 = *(_QWORD *)(v13 + 16) - (_QWORD)v43;
          if (!v44)
            goto LABEL_107;
          v45 = v44 >> 3;
          if (v45 <= 1)
            v45 = 1;
          do
          {
            *v43 = -*v43;
            ++v43;
            --v45;
          }
          while (v45);
          goto LABEL_117;
        case 4u:
          if (*(_QWORD *)v10 == 1)
            goto LABEL_70;
          v15 = operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v15, v10);
          *(_QWORD *)v15 = 1;
          do
          {
            v35 = __ldaxr((unint64_t *)v10);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, (unint64_t *)v10));
          v13 = v15;
          if (v36)
            goto LABEL_116;
          v18 = 0x1020C405E66F15BLL;
          __p.__r_.__value_.__r.__words[0] = v10 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_115;
        case 5u:
          if (*(_QWORD *)v10 == 1)
            goto LABEL_70;
          v15 = operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v15, v10);
          *(_QWORD *)v15 = 1;
          do
          {
            v37 = __ldaxr((unint64_t *)v10);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, (unint64_t *)v10));
          v13 = v15;
          if (v38)
            goto LABEL_116;
          v18 = 0x1020C405E66F15BLL;
          __p.__r_.__value_.__r.__words[0] = v10 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_115;
        case 6u:
        case 7u:
          goto LABEL_116;
        case 8u:
          if (*(_QWORD *)v10 == 1)
          {
LABEL_70:
            v13 = v10;
          }
          else
          {
            v15 = operator new();
            *(_QWORD *)v15 = *(_QWORD *)v10;
            v73 = *(_QWORD *)(v10 + 16);
            *(_QWORD *)(v15 + 8) = *(_QWORD *)(v10 + 8);
            *(_QWORD *)(v15 + 16) = v73;
            if (v73)
            {
              v74 = (unsigned int *)(v73 + 8);
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
            }
            v76 = *(_OWORD *)(v10 + 24);
            v77 = *(_OWORD *)(v10 + 40);
            *(_OWORD *)(v15 + 56) = *(_OWORD *)(v10 + 56);
            *(_OWORD *)(v15 + 40) = v77;
            *(_OWORD *)(v15 + 24) = v76;
            *(_QWORD *)v15 = 1;
            do
            {
              v78 = __ldaxr((unint64_t *)v10);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, (unint64_t *)v10));
            v13 = v15;
            if (!v79)
            {
              v18 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)(v10 + 16));
LABEL_115:
              MEMORY[0x219A19A08](v10, v18);
              v13 = v15;
            }
          }
          goto LABEL_116;
        case 9u:
          if (*(_QWORD *)v10 == 1)
          {
            v13 = v10;
          }
          else
          {
            v46 = (_QWORD *)operator new();
            *v46 = *(_QWORD *)v10;
            turi::flexible_type_impl::ndarray<double>::ndarray(v46 + 1, v10 + 8);
            *v46 = 1;
            do
            {
              v47 = __ldaxr((unint64_t *)v10);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, (unint64_t *)v10));
            v13 = (unint64_t)v46;
            if (!v48)
            {
              v49 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v10);
              MEMORY[0x219A19A08](v49, 0x1030C407B73B9F7);
              v13 = (unint64_t)v46;
            }
          }
          v51 = *(uint64_t **)(v13 + 24);
          v50 = *(uint64_t **)(v13 + 32);
          if (v50 == v51 || !*(_QWORD *)(v13 + 8))
          {
LABEL_107:
            *(_QWORD *)&v168[0] = v13;
            LODWORD(v168[1]) = v12;
            BYTE4(v168[1]) = v11;
            goto LABEL_119;
          }
          v52 = 1;
          do
          {
            v53 = *v51++;
            v52 *= v53;
          }
          while (v51 != v50);
          if (!v52)
            goto LABEL_117;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v13 + 8));
          v54 = (uint64_t)(*(_QWORD *)(v13 + 32) - *(_QWORD *)(v13 + 24)) >> 3;
          v167 = 0;
          std::vector<unsigned long>::vector(&__p, v54, &v167);
          size = __p.__r_.__value_.__l.__size_;
          v55 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          break;
        default:
          goto LABEL_243;
      }
      break;
    case 6u:
    case 7u:
LABEL_116:
      turi::flexible_type_fail(0);
      goto LABEL_117;
    default:
      goto LABEL_243;
  }
  while (1)
  {
    v57 = 0;
    v58 = size - (_QWORD)v55;
    if (v58)
    {
      v59 = v58 >> 3;
      v60 = *(uint64_t **)(v13 + 48);
      if (v59 <= 1)
        v59 = 1;
      do
      {
        v62 = *v55++;
        v61 = v62;
        v63 = *v60++;
        v57 += v63 * v61;
        --v59;
      }
      while (v59);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v13 + 8));
    *(double *)(**(_QWORD **)(v13 + 8) + 8 * (*(_QWORD *)(v13 + 72) + v57)) = -*(double *)(**(_QWORD **)(v13 + 8)
                                                                                         + 8
                                                                                         * (*(_QWORD *)(v13 + 72) + v57));
    size = __p.__r_.__value_.__l.__size_;
    v55 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
    v64 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
    v65 = v64 - 1;
    if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) < 1)
      goto LABEL_103;
    v66 = *(_QWORD *)(v13 + 24);
    v67 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v65) + 1;
    *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v65) = v67;
    if (v67 >= *(_QWORD *)(v66 + 8 * v65))
      break;
LABEL_102:
    v64 = 1;
LABEL_103:
    if (v65 < 0 || !v64)
      goto LABEL_105;
  }
  v68 = (unint64_t *)&v55[v64 - 2];
  v69 = v66 - 16;
  while (1)
  {
    v70 = v64 - 1;
    v68[1] = 0;
    if (v64 - 1 <= 0)
      break;
    v71 = *v68 + 1;
    *v68-- = v71;
    v72 = *(_QWORD *)(v69 + 8 * v64--);
    if (v71 < v72)
    {
      v65 = v70 - 1;
      goto LABEL_102;
    }
  }
LABEL_105:
  if (v55)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
    operator delete(v55);
  }
LABEL_117:
  *(_QWORD *)&v168[0] = v13;
  LODWORD(v168[1]) = v12;
  BYTE4(v168[1]) = v11;
  if (v11 > 9)
  {
    v24 = v11;
  }
  else
  {
    v24 = v11;
    if (((1 << v11) & 0x33C) != 0)
    {
      do
LABEL_119:
        v80 = __ldaxr((unint64_t *)v13);
      while (__stlxr(v80 + 1, (unint64_t *)v13));
      v24 = BYTE4(v168[1]);
    }
  }
LABEL_121:
  switch(v24)
  {
    case 0u:
    case 6u:
      goto LABEL_189;
    case 1u:
      v168[0] = v168[0] + 0.0;
      goto LABEL_189;
    case 2u:
      v81 = *(_QWORD *)&v168[0];
      if (**(_QWORD **)&v168[0] == 1)
        goto LABEL_188;
      v82 = (_QWORD *)operator new();
      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v82, v81);
      *(_QWORD *)&v168[0] = v82;
      *v82 = 1;
      do
      {
        v83 = __ldaxr((unint64_t *)v81);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, (unint64_t *)v81));
      if (v84)
        goto LABEL_188;
      if (*(char *)(v81 + 31) < 0)
        operator delete(*(void **)(v81 + 8));
      v85 = *(double *)&v81;
      v86 = 0x1012C404EF22A49;
      goto LABEL_187;
    case 3u:
      v120 = *(unint64_t **)&v168[0];
      if (**(_QWORD **)&v168[0] != 1)
      {
        v121 = (_QWORD *)operator new();
        std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v121, (uint64_t)v120);
        *(_QWORD *)&v168[0] = v121;
        *v121 = 1;
        do
        {
          v122 = __ldaxr(v120);
          v123 = v122 - 1;
        }
        while (__stlxr(v123, v120));
        if (!v123)
        {
          v124 = (void *)v120[1];
          if (v124)
          {
            v120[2] = (unint64_t)v124;
            operator delete(v124);
          }
          MEMORY[0x219A19A08](v120, 0x1080C409938AC02);
        }
      }
      v125 = *(double **)(*(_QWORD *)&v168[0] + 8);
      v126 = *(_QWORD *)(*(_QWORD *)&v168[0] + 16) - (_QWORD)v125;
      if (v126)
      {
        v127 = v126 >> 3;
        if (v127 <= 1)
          v127 = 1;
        do
        {
          *v125 = *v125 + 0.0;
          ++v125;
          --v127;
        }
        while (v127);
      }
      goto LABEL_189;
    case 4u:
      v116 = *(_QWORD *)&v168[0];
      if (**(_QWORD **)&v168[0] == 1)
        goto LABEL_188;
      v128 = (_QWORD *)operator new();
      std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v128, v116);
      *(_QWORD *)&v168[0] = v128;
      *v128 = 1;
      do
      {
        v129 = __ldaxr((unint64_t *)v116);
        v130 = v129 - 1;
      }
      while (__stlxr(v130, (unint64_t *)v116));
      if (v130)
        goto LABEL_188;
      __p.__r_.__value_.__r.__words[0] = v116 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_178;
    case 5u:
      v116 = *(_QWORD *)&v168[0];
      if (**(_QWORD **)&v168[0] == 1)
        goto LABEL_188;
      v117 = (_QWORD *)operator new();
      std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v117, v116);
      *(_QWORD *)&v168[0] = v117;
      *v117 = 1;
      do
      {
        v118 = __ldaxr((unint64_t *)v116);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, (unint64_t *)v116));
      if (v119)
        goto LABEL_188;
      __p.__r_.__value_.__r.__words[0] = v116 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_178:
      v85 = *(double *)&v116;
      v86 = 0x1020C405E66F15BLL;
      goto LABEL_187;
    case 7u:
      goto LABEL_188;
    case 8u:
      v131 = v168[0];
      if (**(_QWORD **)&v168[0] == 1)
        goto LABEL_188;
      v132 = operator new();
      *(_QWORD *)v132 = **(_QWORD **)&v131;
      v133 = *(_QWORD *)(*(_QWORD *)&v131 + 16);
      *(_QWORD *)(v132 + 8) = *(_QWORD *)(*(_QWORD *)&v131 + 8);
      *(_QWORD *)(v132 + 16) = v133;
      if (v133)
      {
        v134 = (unsigned int *)(v133 + 8);
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
      }
      v136 = *(_OWORD *)(*(_QWORD *)&v131 + 24);
      v137 = *(_OWORD *)(*(_QWORD *)&v131 + 40);
      *(_OWORD *)(v132 + 56) = *(_OWORD *)(*(_QWORD *)&v131 + 56);
      *(_OWORD *)(v132 + 40) = v137;
      *(_OWORD *)(v132 + 24) = v136;
      *(_QWORD *)&v168[0] = v132;
      *(_QWORD *)v132 = 1;
      do
      {
        v138 = __ldaxr(*(unint64_t **)&v131);
        v139 = v138 - 1;
      }
      while (__stlxr(v139, *(unint64_t **)&v131));
      if (v139)
        goto LABEL_188;
      boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v131 + 16));
      v85 = v131;
      v86 = 0x1030C40F1F0227BLL;
LABEL_187:
      MEMORY[0x219A19A08](*(_QWORD *)&v85, v86);
LABEL_188:
      turi::flexible_type_fail(0);
      goto LABEL_189;
    case 9u:
      v87 = *(unint64_t **)&v168[0];
      if (**(_QWORD **)&v168[0] != 1)
      {
        v88 = (_QWORD *)operator new();
        *v88 = *v87;
        turi::flexible_type_impl::ndarray<double>::ndarray(v88 + 1, (uint64_t)(v87 + 1));
        *(_QWORD *)&v168[0] = v88;
        *v88 = 1;
        do
        {
          v89 = __ldaxr(v87);
          v90 = v89 - 1;
        }
        while (__stlxr(v90, v87));
        if (!v90)
        {
          v91 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v87);
          MEMORY[0x219A19A08](v91, 0x1030C407B73B9F7);
        }
      }
      v92 = v168[0];
      v94 = *(uint64_t **)(*(_QWORD *)&v168[0] + 24);
      v93 = *(uint64_t **)(*(_QWORD *)&v168[0] + 32);
      if (v93 == v94)
        goto LABEL_189;
      if (!*(_QWORD *)(*(_QWORD *)&v168[0] + 8))
        goto LABEL_189;
      v95 = 1;
      do
      {
        v96 = *v94++;
        v95 *= v96;
      }
      while (v94 != v93);
      if (!v95)
        goto LABEL_189;
      turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v168[0] + 8));
      v97 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v92 + 32) - *(_QWORD *)(*(_QWORD *)&v92 + 24)) >> 3;
      v167 = 0;
      std::vector<unsigned long>::vector(&__p, v97, &v167);
      v99 = __p.__r_.__value_.__l.__size_;
      v98 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
      break;
    default:
      result = turi::flexible_type_fail(0);
      goto LABEL_245;
  }
  do
  {
    v100 = 0;
    v101 = v99 - (_QWORD)v98;
    if (v101)
    {
      v102 = v101 >> 3;
      v103 = *(uint64_t **)(*(_QWORD *)&v92 + 48);
      if (v102 <= 1)
        v102 = 1;
      do
      {
        v105 = *v98++;
        v104 = v105;
        v106 = *v103++;
        v100 += v106 * v104;
        --v102;
      }
      while (v102);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v92 + 8));
    *(double *)(**(_QWORD **)(*(_QWORD *)&v92 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v92 + 72) + v100)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v92 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v92 + 72) + v100)) + 0.0;
    v99 = __p.__r_.__value_.__l.__size_;
    v98 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
    v107 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
    v108 = v107 - 1;
    if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
    {
      v109 = *(_QWORD *)(*(_QWORD *)&v92 + 24);
      v110 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v108) + 1;
      *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v108) = v110;
      if (v110 >= *(_QWORD *)(v109 + 8 * v108))
      {
        v111 = (unint64_t *)&v98[v107 - 2];
        v112 = v109 - 16;
        while (1)
        {
          v113 = v107 - 1;
          v111[1] = 0;
          if (v107 - 1 <= 0)
            goto LABEL_155;
          v114 = *v111 + 1;
          *v111-- = v114;
          v115 = *(_QWORD *)(v112 + 8 * v107--);
          if (v114 < v115)
          {
            v108 = v113 - 1;
            break;
          }
        }
      }
      v107 = 1;
    }
  }
  while ((v108 & 0x8000000000000000) == 0 && v107);
  if (!v98)
    goto LABEL_189;
LABEL_155:
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v98;
  operator delete(v98);
LABEL_189:
  switch(v11)
  {
    case 2u:
      do
        v140 = __ldaxr((unint64_t *)v13);
      while (__stlxr(v140 - 1, (unint64_t *)v13));
      if (v13 && v140 == 1)
      {
        if (*(char *)(v13 + 31) < 0)
          operator delete(*(void **)(v13 + 8));
        v141 = (_QWORD *)v13;
        v142 = 0x1012C404EF22A49;
        goto LABEL_220;
      }
      break;
    case 3u:
      do
        v146 = __ldaxr((unint64_t *)v13);
      while (__stlxr(v146 - 1, (unint64_t *)v13));
      if (v13 && v146 == 1)
      {
        v147 = *(void **)(v13 + 8);
        if (v147)
        {
          *(_QWORD *)(v13 + 16) = v147;
          operator delete(v147);
        }
        v141 = (_QWORD *)v13;
        v142 = 0x1080C409938AC02;
        goto LABEL_220;
      }
      break;
    case 4u:
      do
        v143 = __ldaxr((unint64_t *)v13);
      while (__stlxr(v143 - 1, (unint64_t *)v13));
      if (v13 && v143 == 1)
      {
        __p.__r_.__value_.__r.__words[0] = v13 + 8;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_214;
      }
      break;
    case 5u:
      do
        v148 = __ldaxr((unint64_t *)v13);
      while (__stlxr(v148 - 1, (unint64_t *)v13));
      if (v13 && v148 == 1)
      {
        __p.__r_.__value_.__r.__words[0] = v13 + 8;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_214:
        v141 = (_QWORD *)v13;
        v142 = 0x1020C405E66F15BLL;
        goto LABEL_220;
      }
      break;
    case 8u:
      do
        v149 = __ldaxr((unint64_t *)v13);
      while (__stlxr(v149 - 1, (unint64_t *)v13));
      if (v13 && v149 == 1)
      {
        boost::detail::shared_count::~shared_count((unsigned int **)(v13 + 16));
        v141 = (_QWORD *)v13;
        v145 = -235920773;
        goto LABEL_219;
      }
      break;
    case 9u:
      do
        v144 = __ldaxr((unint64_t *)v13);
      while (__stlxr(v144 - 1, (unint64_t *)v13));
      if (v13 && v144 == 1)
      {
        v141 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v13);
        v145 = 2071181815;
LABEL_219:
        v142 = v145 | 0x1030C4000000000;
LABEL_220:
        MEMORY[0x219A19A08](v141, v142);
      }
      break;
    default:
      break;
  }
LABEL_221:
  result = operator new();
  v150 = v168[0];
  v151 = LODWORD(v168[1]);
  v152 = BYTE4(v168[1]);
  *(_QWORD *)result = &capi_struct_type_info_tc_flexible_type_inst;
  *(double *)(result + 8) = v150;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 16) = v151;
  *(_BYTE *)(result + 20) = v152;
  return result;
}

void sub_217EF1948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v38;

  if (a2)
  {
    v38 = 0;
    while (1)
    {
      if (*(&a37 + v38) < 0)
        operator delete(*(void **)((char *)&a32 + v38));
      v38 -= 32;
      if (v38 == -96)
      {
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception(&a10);
        std::exception_ptr::~exception_ptr(&a10);
        __cxa_end_catch();
        JUMPOUT(0x217EF0A48);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *tc_sarray_unary_op(uint64_t a1, char *__s, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  _OWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string::size_type v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  std::string::size_type v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  BOOL v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  BOOL v39;
  unint64_t *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::string::size_type v47;
  uint64_t i;
  _QWORD *v50;
  size_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  std::logic_error *exception;
  _BYTE v62[40];
  std::string v63;
  std::string __p;
  int v65;
  _QWORD v66[3];
  int v67;
  _QWORD v68[3];
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (!turi::capi_server_initialized)
    turi::_tc_initialize((turi *)a1);
  if (a1)
  {
    if ((v6 & 1) == 0
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "-");
      v65 = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "abs");
      v67 = 1;
      std::string::basic_string[abi:ne180100]<0>(v68, "!");
      v69 = 2;
      std::map<std::string,turi::unary_op>::map[abi:ne180100]((uint64_t)&turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map, (const void **)&__p.__r_.__value_.__l.__data_, 3);
      for (i = 0; i != -12; i -= 4)
      {
        if (SHIBYTE(v68[i + 2]) < 0)
          operator delete((void *)v68[i]);
      }
      __cxa_atexit((void (*)(void *))std::map<std::string,turi::unary_op>::~map[abi:ne180100], &turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map, &dword_217E69000);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map == v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unary operator ", 15);
      v51 = strlen(__s);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)__s, v51);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" not recognized. ", 17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Available operators are ", 24);
      v54 = turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map;
      if ((_UNKNOWN *)turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map != &unk_254FEDDD8)
      {
        do
        {
          v55 = *(char *)(v54 + 55);
          if (v55 >= 0)
            v56 = v54 + 32;
          else
            v56 = *(_QWORD *)(v54 + 32);
          if (v55 >= 0)
            v57 = *(unsigned __int8 *)(v54 + 55);
          else
            v57 = *(_QWORD *)(v54 + 40);
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v56, v57);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" ", 1);
          v59 = *(_QWORD **)(v54 + 8);
          if (v59)
          {
            do
            {
              v60 = v59;
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = *(_QWORD **)(v54 + 16);
              v11 = *v60 == v54;
              v54 = (uint64_t)v60;
            }
            while (!v11);
          }
          v54 = (uint64_t)v60;
        }
        while (v60 != (_QWORD *)&unk_254FEDDD8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)".", 1);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v63);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v8 = *(_DWORD *)(v7 + 56);
    if (v8 == 2)
    {
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 5) = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      turi::gl_sarray::operator==(a1 + 8, (uint64_t)&__p, (uint64_t)v62);
      switch(__p.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v13 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v14 = __ldaxr(v13);
            v11 = --v14 == 0;
          }
          while (__stlxr(v14, v13));
LABEL_20:
          if (v11)
          {
            v15 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(__p.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(__p.__r_.__value_.__r.__words[0] + 8));
              v16 = (_QWORD *)v15;
              v17 = 0x1012C404EF22A49;
              goto LABEL_76;
            }
          }
          break;
        case 3:
          v33 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v34 = __ldaxr(v33);
            v32 = --v34 == 0;
          }
          while (__stlxr(v34, v33));
LABEL_50:
          if (v32)
          {
            v35 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              v36 = *(void **)(__p.__r_.__value_.__r.__words[0] + 8);
              if (v36)
              {
                *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) = v36;
                operator delete(v36);
              }
              v16 = (_QWORD *)v35;
              v17 = 0x1080C409938AC02;
              goto LABEL_76;
            }
          }
          break;
        case 4:
          v24 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v25 = __ldaxr(v24);
            v20 = --v25 == 0;
          }
          while (__stlxr(v25, v24));
LABEL_35:
          if (v20)
          {
            v26 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              v63.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
              goto LABEL_68;
            }
          }
          break;
        case 5:
          v43 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v44 = __ldaxr(v43);
            v39 = --v44 == 0;
          }
          while (__stlxr(v44, v43));
LABEL_64:
          if (v39)
          {
            v26 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              v63.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
LABEL_68:
              v16 = (_QWORD *)v26;
              v17 = 0x1020C405E66F15BLL;
              goto LABEL_76;
            }
          }
          break;
        case 8:
          v45 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v46 = __ldaxr(v45);
            v42 = --v46 == 0;
          }
          while (__stlxr(v46, v45));
LABEL_71:
          if (v42)
          {
            v47 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(__p.__r_.__value_.__r.__words[0] + 16));
              v16 = (_QWORD *)v47;
              v29 = -235920773;
              goto LABEL_75;
            }
          }
          break;
        case 9:
          v27 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v28 = __ldaxr(v27);
            v23 = --v28 == 0;
          }
          while (__stlxr(v28, v27));
LABEL_41:
          if (v23 && __p.__r_.__value_.__r.__words[0])
          {
            v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(__p.__r_.__value_.__l.__data_);
            v29 = 2071181815;
LABEL_75:
            v17 = v29 | 0x1030C4000000000;
LABEL_76:
            MEMORY[0x219A19A08](v16, v17);
          }
          break;
        default:
          break;
      }
    }
    else if (v8)
    {
      turi::gl_sarray::gl_sarray((turi::gl_sarray *)v62, (const turi::gl_sarray *)(a1 + 8));
    }
    else
    {
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 5) = 0;
      __p.__r_.__value_.__r.__words[0] = 0;
      turi::operator-((uint64_t)&__p, a1 + 8, (uint64_t)v62);
      switch(__p.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v9 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v10 = __ldaxr(v9);
            v11 = --v10 == 0;
          }
          while (__stlxr(v10, v9));
          goto LABEL_20;
        case 3:
          v30 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v31 = __ldaxr(v30);
            v32 = --v31 == 0;
          }
          while (__stlxr(v31, v30));
          goto LABEL_50;
        case 4:
          v18 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v19 = __ldaxr(v18);
            v20 = --v19 == 0;
          }
          while (__stlxr(v19, v18));
          goto LABEL_35;
        case 5:
          v37 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v38 = __ldaxr(v37);
            v39 = --v38 == 0;
          }
          while (__stlxr(v38, v37));
          goto LABEL_64;
        case 8:
          v40 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v41 = __ldaxr(v40);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v40));
          goto LABEL_71;
        case 9:
          v21 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          do
          {
            v22 = __ldaxr(v21);
            v23 = --v22 == 0;
          }
          while (__stlxr(v22, v21));
          goto LABEL_41;
        default:
          break;
      }
    }
    v12 = (_OWORD *)operator new();
    v12[1] = 0u;
    v12[2] = 0u;
    *v12 = 0u;
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)((char *)v12 + 8));
    *(_QWORD *)v12 = &capi_struct_type_info_tc_sarray_inst;
    turi::gl_sarray::gl_sarray(&__p, v62);
    turi::gl_sarray::operator=((uint64_t)v12 + 8, (uint64_t)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v62);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_sarray\" is null.");
    set_error(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v12;
}

void sub_217EF2764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,int a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v40;

  if (a2)
  {
    v40 = 0;
    while (1)
    {
      if (*(&a39 + v40) < 0)
        operator delete(*(void **)((char *)&a34 + v40));
      v40 -= 32;
      if (v40 == -96)
      {
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception(&a10);
        std::exception_ptr::~exception_ptr(&a10);
        __cxa_end_catch();
        JUMPOUT(0x217EF2258);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

const char *tc_v1_error_message(uint64_t a1)
{
  const char *result;

  if (!a1)
    return "No Error";
  result = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    return *(const char **)result;
  return result;
}

_QWORD *tc_v1_release(_QWORD *result)
{
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*result + 8))(*result, result);
  return result;
}

uint64_t tc_v1_ft_type(uint64_t a1)
{
  return *(char *)(a1 + 20);
}

BOOL tc_v1_ft_is_double(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == 1;
  return result;
}

BOOL tc_v1_ft_is_int64(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 20) == 0;
  return result;
}

BOOL tc_v1_ft_is_string(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == 2;
  return result;
}

BOOL tc_v1_ft_is_array(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == 3;
  return result;
}

BOOL tc_v1_ft_is_list(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == 4;
  return result;
}

BOOL tc_v1_ft_is_dict(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == 5;
  return result;
}

BOOL tc_v1_ft_is_datetime(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == 6;
  return result;
}

BOOL tc_v1_ft_is_undefined(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == 7;
  return result;
}

BOOL tc_v1_ft_is_image(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == 8;
  return result;
}

BOOL tc_v1_ft_is_ndarray(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == 9;
  return result;
}

BOOL tc_v1_ft_is_type(_BOOL8 result, unsigned __int8 a2)
{
  if (result)
    return *(unsigned __int8 *)(result + 20) == a2;
  return result;
}

uint64_t tc_v1_flex_list_size(uint64_t result)
{
  if (result)
    return (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 4;
  return result;
}

uint64_t tc_v1_flex_dict_size(uint64_t result)
{
  if (result)
    return (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 5;
  return result;
}

uint64_t tc_v1_flex_enum_list_size(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  return result;
}

uint64_t tc_v1_sarray_size(uint64_t result)
{
  if (result)
    return turi::gl_sarray::size((turi::gl_sarray *)(result + 8));
  return result;
}

uint64_t tc_v1_sarray_type(uint64_t a1)
{
  if (a1)
    return (int)turi::gl_sarray::dtype((turi::gl_sarray *)(a1 + 8));
  else
    return 7;
}

BOOL tc_v1_variant_is_int64(uint64_t a1)
{
  return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 0;
}

BOOL tc_v1_variant_is_double(uint64_t a1)
{
  return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 1;
}

BOOL tc_v1_variant_is_cstring(uint64_t a1)
{
  return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 2;
}

BOOL tc_v1_variant_is_string(uint64_t a1)
{
  return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 2;
}

BOOL tc_v1_variant_is_double_array(uint64_t a1)
{
  return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 3;
}

BOOL tc_v1_variant_is_flex_list(uint64_t a1)
{
  return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 4;
}

BOOL tc_v1_variant_is_flex_dict(uint64_t a1)
{
  return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 5;
}

BOOL tc_v1_variant_is_datetime(uint64_t a1)
{
  return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 6;
}

BOOL tc_v1_variant_is_image(uint64_t a1)
{
  return *(_BYTE *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 8;
}

BOOL tc_v1_variant_is_flexible_type(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == *(int *)(a1 + 8) >> 31;
}

BOOL tc_v1_variant_is_sarray(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) ^ (*(int *)(a1 + 8) >> 31)) == 5;
}

BOOL tc_v1_variant_is_sframe(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) ^ (*(int *)(a1 + 8) >> 31)) == 4;
}

BOOL tc_v1_variant_is_parameters(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) ^ (*(int *)(a1 + 8) >> 31)) == 6;
}

BOOL tc_v1_variant_is_model(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) ^ (*(int *)(a1 + 8) >> 31)) == 3;
}

uint64_t tc_v1_plot_render_next_into_context()
{
  return 0;
}

const char *capi_struct_type_info_tc_error::name(capi_struct_type_info_tc_error *this)
{
  return "tc_error";
}

_UNKNOWN **capi_struct_type_info_tc_error::free(_UNKNOWN **this, void **a2)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_error_inst)
      {
        if (*((char *)a2 + 31) < 0)
          operator delete(a2[1]);
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_datetime::name(capi_struct_type_info_tc_datetime *this)
{
  return "tc_datetime";
}

_UNKNOWN **capi_struct_type_info_tc_datetime::free(_UNKNOWN **this, _QWORD *a2)
{
  if (a2)
  {
    if ((_UNKNOWN **)*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_datetime_inst)
        JUMPOUT(0x219A19A08);
      capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_flex_dict::name(capi_struct_type_info_tc_flex_dict *this)
{
  return "tc_flex_dict";
}

_UNKNOWN **capi_struct_type_info_tc_flex_dict::free(_UNKNOWN **this, char *a2)
{
  void **v3;

  if (a2)
  {
    if (*(_UNKNOWN ***)a2 != this)
      capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#1}::operator()();
    if (this != &capi_struct_type_info_tc_flex_dict_inst)
      capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#2}::operator()();
    v3 = (void **)(a2 + 8);
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (_UNKNOWN **)MEMORY[0x219A19A08](a2, 0x20C40DC1BFBCFLL);
  }
  return this;
}

const char *capi_struct_type_info_tc_flex_list::name(capi_struct_type_info_tc_flex_list *this)
{
  return "tc_flex_list";
}

_UNKNOWN **capi_struct_type_info_tc_flex_list::free(_UNKNOWN **this, char *a2)
{
  void **v3;

  if (a2)
  {
    if (*(_UNKNOWN ***)a2 != this)
      capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#1}::operator()();
    if (this != &capi_struct_type_info_tc_flex_list_inst)
      capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#2}::operator()();
    v3 = (void **)(a2 + 8);
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (_UNKNOWN **)MEMORY[0x219A19A08](a2, 0x20C40DC1BFBCFLL);
  }
  return this;
}

const char *capi_struct_type_info_tc_flex_image::name(capi_struct_type_info_tc_flex_image *this)
{
  return "tc_flex_image";
}

unsigned int *capi_struct_type_info_tc_flex_image::free(unsigned int *this, unsigned int **a2)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == (unsigned int *)&capi_struct_type_info_tc_flex_image_inst)
      {
        boost::detail::shared_count::~shared_count(a2 + 2);
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_ndarray::name(capi_struct_type_info_tc_ndarray *this)
{
  return "tc_ndarray";
}

_UNKNOWN **capi_struct_type_info_tc_ndarray::free(_UNKNOWN **this, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    if ((_UNKNOWN **)*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_ndarray_inst)
      {
        v3 = (void *)a2[6];
        if (v3)
        {
          a2[7] = v3;
          operator delete(v3);
        }
        v4 = (void *)a2[3];
        if (v4)
        {
          a2[4] = v4;
          operator delete(v4);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 1));
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_flexible_type::name(capi_struct_type_info_tc_flexible_type *this)
{
  return "tc_flexible_type";
}

_UNKNOWN **capi_struct_type_info_tc_flexible_type::free(_UNKNOWN **this, tc_flexible_type_struct *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN ***)a2 == this)
    {
      if (this == &capi_struct_type_info_tc_flexible_type_inst)
      {
        tc_flexible_type_struct::~tc_flexible_type_struct(a2);
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_flex_enum_list::name(capi_struct_type_info_tc_flex_enum_list *this)
{
  return "tc_flex_enum_list";
}

_UNKNOWN **capi_struct_type_info_tc_flex_enum_list::free(_UNKNOWN **this, _QWORD *a2)
{
  void *v2;

  if (a2)
  {
    if ((_UNKNOWN **)*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_flex_enum_list_inst)
      {
        v2 = (void *)a2[1];
        if (v2)
        {
          a2[2] = v2;
          operator delete(v2);
        }
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_sarray::name(capi_struct_type_info_tc_sarray *this)
{
  return "tc_sarray";
}

_UNKNOWN **capi_struct_type_info_tc_sarray::free(_UNKNOWN **this, _QWORD *a2)
{
  if (a2)
  {
    if ((_UNKNOWN **)*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_sarray_inst)
      {
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)(a2 + 1));
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_sframe::name(capi_struct_type_info_tc_sframe *this)
{
  return "tc_sframe";
}

_UNKNOWN **capi_struct_type_info_tc_sframe::free(_UNKNOWN **this, _QWORD *a2)
{
  if (a2)
  {
    if ((_UNKNOWN **)*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_sframe_inst)
      {
        a2[1] = off_24D91E9C0;
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 2));
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_variant::name(capi_struct_type_info_tc_variant *this)
{
  return "tc_variant";
}

_UNKNOWN **capi_struct_type_info_tc_variant::free(_UNKNOWN **this, unsigned int *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN ***)a2 == this)
    {
      if (this == &capi_struct_type_info_tc_variant_inst)
      {
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(a2 + 2);
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_parameters::name(capi_struct_type_info_tc_parameters *this)
{
  return "tc_parameters";
}

char *capi_struct_type_info_tc_parameters::free(char *this, char **a2)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == (char *)&capi_struct_type_info_tc_parameters_inst)
      {
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)(a2 + 1), a2[2]);
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_model::name(capi_struct_type_info_tc_model *this)
{
  return "tc_model";
}

_UNKNOWN **capi_struct_type_info_tc_model::free(_UNKNOWN **this, _QWORD *a2)
{
  if (a2)
  {
    if ((_UNKNOWN **)*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_model_inst)
      {
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 1));
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_groupby_aggregator::name(capi_struct_type_info_tc_groupby_aggregator *this)
{
  return "tc_groupby_aggregator";
}

_UNKNOWN **capi_struct_type_info_tc_groupby_aggregator::free(_UNKNOWN **this, _QWORD **a2)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_groupby_aggregator_inst)
      {
        std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)(a2 + 1), a2[2]);
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_plot::name(capi_struct_type_info_tc_plot *this)
{
  return "tc_plot";
}

_UNKNOWN **capi_struct_type_info_tc_plot::free(_UNKNOWN **this, _QWORD *a2)
{
  if (a2)
  {
    if ((_UNKNOWN **)*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_plot_inst)
      {
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 1));
        JUMPOUT(0x219A19A08);
      }
      capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

_QWORD *std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(_QWORD *a1)
{
  void *__p;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  *a1 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  __p = 0;
  v4 = 0;
  v5 = 0;
  turi::flexible_type_impl::ndarray<double>::ndarray(a1 + 1, (uint64_t)&v9, (uint64_t)&v6, (uint64_t)&__p, 0);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_217EF3B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v13;

  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  tc_ft_to_type_cold_1((uint64_t)&__p, &a13, (void **)(v13 - 40));
  _Unwind_Resume(a1);
}

_QWORD *turi::flexible_type_impl::ndarray<double>::ndarray(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>(a2, &v13);
  turi::flexible_type_impl::ndarray<double>::ndarray(a1, &v13, a3, a4, a5);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_217EF3BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<std::vector<double> const&,std::allocator<std::vector<double>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_217EF3C1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<std::vector<double> const&,std::allocator<std::vector<double>>,0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_24D9195E8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 24), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return a1;
}

void sub_217EF3C84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9195E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9195E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<std::vector<double>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

_QWORD *turi::flexible_type_impl::ndarray<double>::ndarray(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v9 = a2[1];
  *a1 = *a2;
  a1[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a1[2] = 0;
  a1[3] = 0;
  v12 = a1 + 2;
  a1[4] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 5, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  a1[8] = a5;
  v13 = (char *)a1[2];
  v14 = (char *)a1[3];
  v15 = v14 - v13;
  if (v14 == v13)
  {
    v16 = ((uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 3) - a5;
    if (v16)
    {
      v17 = a1[4];
      if ((unint64_t)v14 >= v17)
      {
        v18 = v15 >> 3;
        v19 = v17 - (_QWORD)v13;
        if (v19 >> 2 <= (unint64_t)((v15 >> 3) + 1))
          v20 = v18 + 1;
        else
          v20 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 4), v21);
        v23 = (char *)a1[2];
        v24 = (char *)a1[3];
        v25 = &v22[8 * v18];
        v27 = &v22[8 * v26];
        *(_QWORD *)v25 = v16;
        v14 = v25 + 8;
        while (v24 != v23)
        {
          v28 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v25 - 1) = v28;
          v25 -= 8;
        }
        a1[2] = v25;
        a1[3] = v14;
        a1[4] = v27;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v14 = v16;
        v14 += 8;
      }
      a1[3] = v14;
    }
  }
  v29 = a1[5];
  if (a1[6] == v29)
  {
    if (v14 == (char *)*v12)
    {
      v29 = a1[6];
    }
    else
    {
      std::vector<unsigned long>::resize((uint64_t)(a1 + 5), (uint64_t)&v14[-*v12] >> 3);
      v42 = a1[2];
      v43 = a1[3] - v42;
      v29 = a1[5];
      *(_QWORD *)(v43 + v29 - 8) = 1;
      if (v43 >= 9)
      {
        v44 = v43 >> 3;
        v45 = v42 - 8;
        v46 = 1;
        do
        {
          v46 *= *(_QWORD *)(v45 + 8 * v44);
          *(_QWORD *)(v29 + 8 * v44 - 16) = v46;
          v47 = v44 - 2;
          --v44;
        }
        while (v47 > 0);
      }
    }
  }
  v30 = a1[2];
  v31 = a1[3];
  v32 = v31 - v30;
  if (v31 == v30)
    goto LABEL_27;
  v33 = 0;
  v34 = v32 >> 3;
  if (v34 <= 1)
    v34 = 1;
  v35 = (uint64_t *)a1[2];
  do
  {
    v36 = *v35++;
    v33 |= v36 == 0;
    --v34;
  }
  while (v34);
  if ((v33 & 1) != 0)
  {
LABEL_27:
    *(_QWORD *)(*a1 + 8) = *(_QWORD *)*a1;
    a1[3] = v30;
    a1[6] = v29;
    a1[8] = 0;
  }
  if (!turi::flexible_type_impl::ndarray<double>::is_valid(a1))
    turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()();
  v37 = (_QWORD *)a1[2];
  v38 = a1[3] - (_QWORD)v37;
  if (v38)
  {
    v39 = v38 >> 3;
    if (v39 <= 1)
      v39 = 1;
    do
    {
      if (!*v37++)
        turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#2}::operator()();
      --v39;
    }
    while (v39);
  }
  return a1;
}

void sub_217EF3F68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL turi::flexible_type_impl::ndarray<double>::is_valid(_QWORD *a1)
{
  char *v1;
  char *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)a1[2];
  v1 = (char *)a1[3];
  if (v1 - v2 != a1[6] - a1[5])
    return 0;
  v3 = (_QWORD *)*a1;
  if (v1 == v2 || v3 == 0)
  {
    v5 = 0;
  }
  else
  {
    v5 = 1;
    do
    {
      v6 = *(_QWORD *)v2;
      v2 += 8;
      v5 *= v6;
    }
    while (v2 != v1);
  }
  return a1[8] + v5 <= (unint64_t)((uint64_t)(v3[1] - *v3) >> 3)
      && a1[8] + turi::flexible_type_impl::ndarray<double>::last_index(a1) <= (unint64_t)((uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 3);
}

void turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 128, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF4158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_shape[i] > 0", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 130, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF42D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_impl::ndarray<double>::last_index(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (char *)a1[2];
  v2 = (char *)a1[3];
  v3 = v2 - v1;
  if (v2 == v1)
    return 0;
  v4 = 0;
  v5 = v3 >> 3;
  v6 = (uint64_t *)a1[5];
  if (v5 <= 1)
    v5 = 1;
  do
  {
    v7 = *(_QWORD *)v1;
    v1 += 8;
    v8 = v7 - 1;
    v9 = *v6++;
    v4 += v9 * v8;
    --v5;
  }
  while (v5);
  return v4 + 1;
}

_QWORD *std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = *(_QWORD *)a2;
  v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

_QWORD *std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

_QWORD *std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 1, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
  return a1;
}

_QWORD *std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(a1 + 1, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 5);
  return a1;
}

uint64_t turi::flexible_type_impl::ndarray<double>::operator=(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, (__int128 *)a2);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 16, (__n128 *)(a2 + 16));
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 40, (__n128 *)(a2 + 40));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

void std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(char **a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;

  v6 = a2;
  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = a1[2] - *a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,double const*,double const*,turi::flexible_type*>(v8, v6, a3, (uint64_t)a1[1]);
LABEL_15:
    a1[1] = (char *)v13;
    return;
  }
  v14 = (uint64_t)a1[1];
  v15 = (v14 - (uint64_t)v9) >> 4;
  if (v15 < a4)
  {
    v16 = &a2[v15];
    if ((char *)v14 != v9)
    {
      v17 = 8 * v15;
      do
      {
        turi::flexible_type::operator=<double>((uint64_t)v9, v6++);
        v9 += 16;
        v17 -= 8;
      }
      while (v17);
      v9 = a1[1];
    }
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,double const*,double const*,turi::flexible_type*>(v8, v16, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v18 = *a1;
  }
  else
  {
    v18 = *a1;
    do
    {
      turi::flexible_type::operator=<double>((uint64_t)v9, v6++);
      v9 += 16;
      v18 += 16;
    }
    while (v6 != a3);
    v14 = (uint64_t)a1[1];
  }
  while ((char *)v14 != v18)
  {
    v14 -= 16;
    std::allocator<turi::flexible_type>::destroy[abi:ne180100](v8, v14);
  }
  a1[1] = v18;
}

void sub_217EF4684(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,double const*,double const*,turi::flexible_type*>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      turi::flexible_type::flexible_type<double>(v4, v6++);
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_217EF4720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type::flexible_type<double>(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  turi::flexible_type::operator=<double>(a1, a2);
  return a1;
}

void sub_217EF4764(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type::operator=<double>(uint64_t a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  void **v34;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v4 = *(unint64_t **)a1;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v10 = *(unint64_t **)a1;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v15 = *(unint64_t **)a1;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v34 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v19 = *(unint64_t **)a1;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v34 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_26:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v22 = *(unint64_t **)a1;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v27 = *(unint64_t **)a1;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = (unint64_t)v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = (unint64_t)v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v8, v9);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)a1 = *a2;
  return a1;
}

BOOL turi::flexible_type_impl::ndarray<double>::is_full(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  if (a1[8])
    return 0;
  v2 = (uint64_t *)a1[2];
  v1 = (uint64_t *)a1[3];
  v3 = (_QWORD *)*a1;
  if (v1 == v2 || v3 == 0)
  {
    v5 = 0;
  }
  else
  {
    v5 = 1;
    do
    {
      v6 = *v2++;
      v5 *= v6;
    }
    while (v2 != v1);
  }
  return v5 == (uint64_t)(v3[1] - *v3) >> 3
      && turi::flexible_type_impl::ndarray<double>::last_index(a1) == (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 3;
}

void turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 305, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF4B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 490, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF4D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  char v6;

  v4 = 126 - 2 * __clz(((char *)a2 - (char *)a4) >> 4);
  if (a2 == a4)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(a1, a2, a3, a4, (uint64_t)&v6, v5, 1);
}

uint64_t turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v2 = *a2;
  v3 = a2[1] - *a2;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) - 1;
  if (v3 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v2 + 8 * v5) + 1;
    *(_QWORD *)(v2 + 8 * v5) = v7;
    if (v7 >= *(_QWORD *)(v6 + 8 * v5))
    {
      v8 = v4 - 2;
      v9 = (unint64_t *)(v2 + 8 * v4 - 16);
      do
      {
        v5 = v8;
        v4 = v8 + 1;
        v9[1] = 0;
        if (v8 + 1 <= 0)
          break;
        v10 = *v9 + 1;
        *v9-- = v10;
        v11 = *(_QWORD *)(v6 + 8 * v8--);
      }
      while (v10 >= v11);
    }
  }
  if (v5 >= 0)
    return v4;
  else
    return 0;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::vector<std::pair<unsigned long,unsigned long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_217EF4FF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  char v39;

LABEL_1:
  v14 = (uint64_t)(a4 + 2);
  v33 = (uint64_t)(a4 + 6);
  v34 = (uint64_t)(a4 + 4);
  v15 = 1 - a6;
  v36 = a4;
  while (2)
  {
    v16 = (char *)a2 - (char *)a4;
    v17 = ((char *)a2 - (char *)a4) >> 4;
    switch(v17)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v30 = *a4;
        v31 = *(a2 - 2);
        if (*a4 < v31 || v31 >= v30 && a4[1] < *(a2 - 1))
        {
          *(a2 - 2) = v30;
          *a4 = v31;
          v32 = *(a2 - 1);
          *(a2 - 1) = a4[1];
          a4[1] = v32;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), a3, (uint64_t)(a4 + 2));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), (uint64_t)(a2 - 4), (uint64_t)(a2 - 4), a3, (uint64_t)(a4 + 2));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), (uint64_t)(a2 - 4), (uint64_t)(a2 - 4), (uint64_t)(a2 - 6), (uint64_t)(a2 - 6), a3, (uint64_t)(a4 + 2));
        return;
      default:
        if (v16 <= 383)
        {
          if ((a7 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a3, a4);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a3, a4);
          return;
        }
        if (v15 == 1)
        {
          if (a2 != a4)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, a3, (uint64_t)a4, a3, (uint64_t)a4, a5);
          return;
        }
        v18 = v17 >> 1;
        v19 = (uint64_t)&a2[-2 * (v17 >> 1)];
        if ((unint64_t)v16 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>((uint64_t)&a2[-2 * (v17 >> 1)], (uint64_t)&a2[-2 * (v17 >> 1)], a1, (uint64_t)a2, v14, v14);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, (uint64_t)&a2[-2 * (v17 >> 1)], (uint64_t)&a2[-2 * (v17 >> 1)], v14, v14);
          v20 = a3;
          v21 = (uint64_t)&a2[2 * (1 - v18)];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>((uint64_t)(a2 - 2), (uint64_t)(a2 - 2), v21, v21, v34, v34);
          v22 = (uint64_t)&a2[2 * ~v18];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>((uint64_t)(a2 - 4), (uint64_t)(a2 - 4), v22, v22, v33, v33);
          v23 = v21;
          v24 = v21;
          a3 = v20;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(v23, v24, v19, v19, v22, v22);
          v25 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = *(_OWORD *)(v19 - 16);
          *(_OWORD *)(v19 - 16) = v25;
        }
        a4 = v36;
        if ((a7 & 1) == 0)
        {
          v26 = *(a2 - 2);
          if (*a2 >= v26 && (v26 < *a2 || a2[1] >= *(a2 - 1)))
          {
            std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::__less<void,void> &>(a1, a2, a3, v36);
            a1 = v27;
            a2 = v28;
            a7 = 0;
            ++v15;
            continue;
          }
        }
        std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::__less<void,void> &>(a2, v36, (uint64_t)&v37);
        v29 = v37;
        a4 = v38;
        a6 = -v15;
        if (!v39)
          goto LABEL_19;
        v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, v37, v38);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>((uint64_t)(a4 - 2), (uint64_t)(a4 - 2), a3, v36))
        {
          if ((v35 & 1) != 0)
          {
            a1 = v29;
            a2 = a4 - 2;
          }
          else
          {
LABEL_19:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(a1, a2, v29, a4, a5, -v15, a7 & 1);
            a7 = 0;
            a2 = a4 - 2;
            a1 = v29;
          }
          a4 = v36;
          goto LABEL_1;
        }
        a3 = v29;
        if ((v35 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = &a2[-2].n128_i64[1];
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (turi::query_eval::less_than_partial_function::operator()(a3, v9, v10, a6))
        {
          v29 = v10->n128_u64[0];
          v10->n128_u64[0] = a2[-2].n128_u64[1];
          a2[-2].n128_u64[1] = v29;
          v30 = v10->n128_u64[1];
          v10->n128_u64[1] = a2[-1].n128_u64[0];
          a2[-1].n128_u64[0] = v30;
          v31 = v10[1].n128_u64[0];
          v10[1].n128_u64[0] = a2[-1].n128_u64[1];
          a2[-1].n128_u64[1] = v31;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v10, &v10[1].n128_i64[1], v9, a3, a6);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v10, &v10[1].n128_i64[1], (uint64_t *)&v10[3], v9, a3, a6);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v10, &v10[1].n128_i64[1], (uint64_t *)&v10[3], &v10[4].n128_i64[1], v9, a3, a6);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(v10, a2, a3, a6);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(v10, a2, a3, a6);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (uint64_t *)v10 + 3 * (v14 >> 1);
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v10 + 3 * (v14 >> 1), (uint64_t *)v10, v9, a3, a6);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v10, (uint64_t *)v10 + 3 * (v14 >> 1), v9, a3, a6);
            v17 = v9;
            v18 = (uint64_t *)v10 + 3 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(&v10[1].n128_i64[1], v18 - 3, (uint64_t *)&a2[-3], a3, v19);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)&v10[3], &v10[1].n128_i64[3 * v15 + 1], &a2[-5].n128_i64[1], a3, v20);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(v18 - 3, v16, &v10[1].n128_i64[3 * v15 + 1], a3, v21);
            v22 = *v10;
            *v10 = *(__n128 *)v16;
            *(__n128 *)v16 = v22;
            v23 = v10[1].n128_u64[0];
            v10[1].n128_u64[0] = v18[2];
            v18[2] = v23;
            v9 = v17;
          }
          if ((a5 & 1) == 0
            && (turi::query_eval::less_than_partial_function::operator()(a3, &v10[-2].n128_u64[1], v10, v22) & 1) == 0)
          {
            v10 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<turi::flexible_type> *,turi::query_eval::less_than_partial_function &>(v10, a2, a3);
            goto LABEL_16;
          }
          v24 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<turi::flexible_type> *,turi::query_eval::less_than_partial_function &>(v10, (void **)a2, a3);
          if ((v26 & 1) == 0)
            goto LABEL_14;
          v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t *)v10, v24, a3, v25);
          v10 = (__n128 *)(v24 + 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(v24 + 3, (uint64_t *)a2, a3, v28))
          {
            v11 = v12 + 1;
            if ((v27 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *,false>(a1, v24, a3, -v12, a5 & 1);
            v10 = (__n128 *)(v24 + 3);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__n128 *)v24;
          if ((v27 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *>(v10, a2, a2->n128_u64, a3, a6);
        return;
    }
  }
}

  v9 = (uint64_t *)(a2 - 48);
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = a2 - v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 4);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (turi::query_eval::less_than_full_function::compare(a3, v9, v10, a6))
        {
          v32 = *(_QWORD *)v10;
          *(_QWORD *)v10 = *((_QWORD *)a2 - 6);
          *((_QWORD *)a2 - 6) = v32;
          v33 = *((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = *((_QWORD *)a2 - 5);
          *((_QWORD *)a2 - 5) = v33;
          v34 = *((_QWORD *)v10 + 2);
          *((_QWORD *)v10 + 2) = *((_QWORD *)a2 - 4);
          *((_QWORD *)a2 - 4) = v34;
          v35 = *((_QWORD *)v10 + 5);
          v36 = *(_OWORD *)(v10 + 24);
          v37 = *((_QWORD *)a2 - 1);
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 - 24);
          *((_QWORD *)v10 + 5) = v37;
          *(_OWORD *)(a2 - 24) = v36;
          *((_QWORD *)a2 - 1) = v35;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v10, (uint64_t *)v10 + 6, v9, a3, a6);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v10, (uint64_t)(v10 + 48), (uint64_t)(v10 + 96), (uint64_t)v9, a3, a6);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v10, (uint64_t)(v10 + 48), (uint64_t)(v10 + 96), (uint64_t)(v10 + 144), (uint64_t)v9, a3, a6);
        return;
      default:
        if (v13 <= 1151)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v10, a2, a3, a6);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v10, a2, a3, a6);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (uint64_t *)&v10[48 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(v16, (uint64_t *)v10, v9, a3, a6);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v10, v16, v9, a3, a6);
            v17 = v9;
            v18 = &v10[48 * v15];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v10 + 6, (uint64_t *)v18 - 6, (uint64_t *)a2 - 12, a3, v19);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v10 + 12, (uint64_t *)&v10[48 * v15 + 48], (uint64_t *)a2 - 18, a3, v20);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)v18 - 6, v16, (uint64_t *)&v10[48 * v15 + 48], a3, v21);
            v22 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v22;
            v23 = *((_QWORD *)v10 + 2);
            *((_QWORD *)v10 + 2) = v16[2];
            v16[2] = v23;
            v24 = *(__n128 *)(v10 + 24);
            v25 = *((_QWORD *)v10 + 5);
            v26 = *((_QWORD *)v18 + 5);
            *(_OWORD *)(v10 + 24) = *(_OWORD *)(v18 + 24);
            *((_QWORD *)v10 + 5) = v26;
            *((_QWORD *)v18 + 5) = v25;
            *(__n128 *)(v18 + 24) = v24;
            v9 = v17;
          }
          if ((a5 & 1) == 0
            && (turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)v10 - 6, v10, v24) & 1) == 0)
          {
            v10 = (char *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::vector<turi::flexible_type>,std::string> *,turi::query_eval::less_than_full_function &>((uint64_t)v10, (unint64_t)a2, a3);
            goto LABEL_16;
          }
          v27 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::vector<turi::flexible_type>,std::string> *,turi::query_eval::less_than_full_function &>((uint64_t)v10, a2, a3);
          if ((v29 & 1) == 0)
            goto LABEL_14;
          v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)v10, v27, a3, v28);
          v10 = (char *)(v27 + 48);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(v27 + 48, (uint64_t)a2, a3, v31))
          {
            v11 = v12 + 1;
            if (v30)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,false>(a1, v27, a3, -v12, a5 & 1);
            v10 = (char *)(v27 + 48);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (char *)v27;
          if (v30)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,std::pair<std::vector<turi::flexible_type>,std::string> *>(v10, a2, (uint64_t)a2, a3, a6);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = (__int128 *)(a2 - 2);
        if (v20 < *v9)
        {
          v28 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9, v9 + 2, v9 + 4, (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9, v9 + 2, v9 + 4, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9 + 1, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9 + 2, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v15 - 1, v15, &v9[2 * v14 + 2]);
            v27 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(v9 - 2) >= *v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>((__int128 *)v9, (__int128 *)a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)v9, (unint64_t *)v16);
          v9 = (unint64_t *)(v16 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)(v16 + 1), a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v16 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (unint64_t *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(v9, a2);
        }
        else if (v9 != a2)
        {
          v21 = v9 + 2;
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[2];
            if (v23 < *a1)
            {
              v24 = a1[3];
              v25 = v22;
              do
              {
                *(_OWORD *)v25 = *((_OWORD *)v25 - 1);
                v26 = *(v25 - 4);
                v25 -= 2;
              }
              while (v23 < v26);
              *v25 = v23;
              v25[1] = v24;
            }
            v21 = v22 + 2;
            a1 = v22;
          }
        }
        return;
    }
  }
}

  v10 = (double *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v26 = a2[-2].n128_f64[1];
        v25 = &a2[-2].n128_f64[1];
        if (v26 < *v10)
        {
          v36 = *((_QWORD *)v10 + 2);
          v33 = *(_OWORD *)v10;
          v27 = *(_OWORD *)v25;
          v10[2] = v25[2];
          *(_OWORD *)v10 = v27;
          *(_OWORD *)v25 = v33;
          *((_QWORD *)v25 + 2) = v36;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__int128 *)v10, (__int128 *)(v10 + 3), (__int128 *)&a2[-2].n128_i8[8]);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((uint64_t)v10, (uint64_t)(v10 + 3), (uint64_t)(v10 + 6), &a2[-2].n128_u64[1]);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__n128 *)v10, (__n128 *)(v10 + 3), (__n128 *)v10 + 3, (unint64_t *)v10 + 9, &a2[-2].n128_u64[1]);
        return;
      default:
        if (v13 > 575)
        {
          if (v12 == 1)
          {
            if (v10 != (double *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((uint64_t)v10, a2, a2, a3, a6);
            return;
          }
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__int128 *)&v10[3 * v15], (__int128 *)v10, (__int128 *)&a2[-2].n128_i8[8]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__int128 *)v10, (__int128 *)&v10[3 * v15], (__int128 *)&a2[-2].n128_i8[8]);
            v17 = 3 * v15;
            v18 = (__int128 *)&v10[3 * v15 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__int128 *)(v10 + 3), v18, (__int128 *)&a2[-3]);
            v19 = (__int128 *)(v10 + 6);
            v20 = (__int128 *)&v10[v17 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(v19, v20, (__int128 *)&a2[-5].n128_i8[8]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(v18, (__int128 *)v16, v20);
            v35 = *(_QWORD *)(a1 + 16);
            v32 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(double *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            *((_QWORD *)v16 + 2) = v35;
            *(_OWORD *)v16 = v32;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(double *)(a1 - 24) >= *(double *)a1)
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &>((double *)a1, a2->n128_f64);
            goto LABEL_16;
          }
LABEL_11:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &>(a1, (unint64_t)a2);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, v22);
          v10 = (double *)(v22 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(v22 + 24, (uint64_t)a2))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,false>(a1, v22, a3, -v12, a5 & 1);
            v10 = (double *)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__n128 *)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((uint64_t)v10, (uint64_t)a2);
        }
        else if (v10 != (double *)a2)
        {
          v28 = v10 + 3;
          while (v28 != (double *)a2)
          {
            v29 = (uint64_t)v28;
            v30 = *(double *)(a1 + 24);
            if (v30 < *(double *)a1)
            {
              v34 = *(_OWORD *)(a1 + 32);
              do
              {
                *(_OWORD *)v28 = *(_OWORD *)(v28 - 3);
                v28[2] = *(v28 - 1);
                v31 = *(v28 - 6);
                v28 -= 3;
              }
              while (v30 < v31);
              *v28 = v30;
              *(_OWORD *)(v28 + 1) = v34;
            }
            v28 = (double *)(v29 + 24);
            a1 = v29;
          }
        }
        return;
    }
  }
}

  v10 = (__int128 *)((char *)a2 - 24);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 24), v11))
        {
          v30 = *((_QWORD *)v11 + 2);
          v28 = *v11;
          v26 = *v10;
          *((_QWORD *)v11 + 2) = *((_QWORD *)a2 - 1);
          *v11 = v26;
          *v10 = v28;
          *((_QWORD *)a2 - 1) = v30;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v11, (__int128 *)((char *)v11 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)a2 - 24, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__n128 *)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)v11 + 72, (uint64_t)a2 - 24, a3);
        return;
      default:
        if (v14 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 24 * (v15 >> 1));
          if ((unint64_t)v14 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__int128 *)((char *)v11 + 24 * v16), v11, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v11, (__int128 *)((char *)v11 + 24 * v16), (__int128 *)((char *)a2 - 24), a3);
            v18 = 3 * v16;
            v19 = (__int128 *)((char *)v11 + 24 * v16 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__int128 *)((char *)v11 + 24), v19, a2 - 3, a3);
            v20 = v11 + 3;
            v21 = (__int128 *)((char *)v11 + 8 * v18 + 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v20, v21, (__int128 *)((char *)a2 - 72), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v19, v17, v21, a3);
            v29 = *(_QWORD *)(a1 + 16);
            v27 = *(_OWORD *)a1;
            v22 = *v17;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)a1 = v22;
            *((_QWORD *)v17 + 2) = v29;
            *v17 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&)>((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(a1, v23, a3);
          v11 = (__int128 *)(v23 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v23 + 24, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,false>(a1, v23, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v23 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__n128 *)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
        return;
    }
  }
}

  v9 = a2 - 3;
  v10 = (const void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::less<std::string>::operator()[abi:ne180100](a3, a2 - 3, v10))
        {
          v29 = v10[2];
          v27 = *(_OWORD *)v10;
          v25 = *(_OWORD *)v9;
          v10[2] = *(a2 - 1);
          *(_OWORD *)v10 = v25;
          *(_OWORD *)v9 = v27;
          *(a2 - 1) = v29;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(a2 - 3), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(v10 + 9), (__int128 *)(a2 - 3), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v10[3 * v15], v10, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, &v10[3 * v15], a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10 + 3, v18, a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v19, v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v18, v16, v20, a3);
            v28 = *(const void **)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 - 24), (const void **)a1))
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v22, a3);
          v10 = (const void **)(v22 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v22 + 24, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v22, a3, -v12, a5 & 1);
            v10 = (const void **)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (const void **)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

  v13 = (uint64_t)(a4 + 1);
  v48 = (uint64_t)(a4 + 3);
  v49 = (uint64_t)(a4 + 2);
  v14 = 1 - a6;
  v51 = a4;
  while (2)
  {
    v15 = (char *)a2 - (char *)a4;
    v16 = a2 - a4;
    switch(v16)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v31 = *(a2 - 1);
        if (*a4 < v31)
        {
          *(a2 - 1) = *a4;
          *a4 = v31;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), a3, (uint64_t)(a4 + 1));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), a3, (uint64_t)(a4 + 1));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 1), (uint64_t)(a2 - 1), (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), (uint64_t)(a2 - 3), (uint64_t)(a2 - 3), a3, (uint64_t)(a4 + 1));
        return;
      default:
        if (v15 <= 191)
        {
          v32 = a2 - 1;
          v34 = a2 == a4 || v32 == a4;
          if ((a7 & 1) != 0)
          {
            if (!v34)
            {
              v35 = 0;
              v36 = a2 - 1;
              do
              {
                v38 = *--v36;
                v37 = v38;
                v39 = *v32;
                if (v38 < v39)
                {
                  v40 = v35;
                  do
                  {
                    v41 = (char *)a2 + v40;
                    *(unint64_t *)((char *)a2 + v40 - 16) = v39;
                    if (!v40)
                      break;
                    v39 = *(unint64_t *)((char *)a2 + v40);
                    v40 += 8;
                  }
                  while (v37 < v39);
                  *((_QWORD *)v41 - 1) = v37;
                }
                v35 -= 8;
                v32 = v36;
              }
              while (v36 != a4);
            }
          }
          else if (!v34)
          {
            v42 = a2 - 2;
            v43 = a2 - 1;
            do
            {
              v45 = *--v43;
              v44 = v45;
              v46 = *v32;
              if (v45 < v46)
              {
                v47 = v42;
                do
                {
                  *v47 = v46;
                  v46 = v47[2];
                  ++v47;
                }
                while (v44 < v46);
                *v47 = v44;
              }
              --v42;
              v32 = v43;
            }
            while (v43 != a4);
          }
          return;
        }
        if (v14 == 1)
        {
          if (a2 != a4)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, a3, a4, a3, a4, a5);
          return;
        }
        v17 = v16 >> 1;
        v18 = (uint64_t)&a2[-(v16 >> 1)];
        if ((unint64_t)v15 < 0x401)
        {
          v19 = a7;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)&a2[-(v16 >> 1)], (uint64_t)&a2[-(v16 >> 1)], a1, (uint64_t)a2, v13, v13);
          if ((v19 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          v19 = a7;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, (uint64_t)&a2[-(v16 >> 1)], (uint64_t)&a2[-(v16 >> 1)], v13, v13);
          v20 = a3;
          v21 = (uint64_t)&a2[1 - v17];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)(a2 - 1), (uint64_t)(a2 - 1), v21, v21, v49, v49);
          v22 = (uint64_t)&a2[~v17];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)(a2 - 2), (uint64_t)(a2 - 2), v22, v22, v48, v48);
          v23 = v21;
          v24 = v21;
          a3 = v20;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(v23, v24, v18, v18, v22, v22);
          v25 = *(a2 - 1);
          *(a2 - 1) = *(_QWORD *)(v18 - 8);
          *(_QWORD *)(v18 - 8) = v25;
          if ((v19 & 1) != 0)
            goto LABEL_11;
        }
        if (*a2 >= *(a2 - 1))
        {
          a4 = v51;
          std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::__less<void,void> &>(a1, a2, a3, v51);
          a1 = v26;
          a2 = v27;
          a7 = 0;
          ++v14;
          continue;
        }
LABEL_11:
        v50 = v19;
        a4 = v51;
        std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::__less<void,void> &>(a2, v51, (uint64_t)&v52);
        v28 = v52;
        v29 = v53;
        a6 = -v14;
        if (!v54)
          goto LABEL_17;
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, (uint64_t)a2, v52, v53);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)(v29 - 1), (uint64_t)(v29 - 1), a3, v51))
        {
          if ((v30 & 1) != 0)
          {
            a1 = v28;
            a2 = v29 - 1;
            a7 = v50;
            goto LABEL_1;
          }
LABEL_17:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,false>(a1, a2, v28, v29, a5, a6, v50 & 1);
          a7 = 0;
          a2 = v29 - 1;
          a1 = v28;
          goto LABEL_1;
        }
        a3 = v28;
        a4 = v29;
        a7 = v50;
        if ((v30 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = *(a2 - 2);
        v23 = *v9;
        if (v22 < *v9)
        {
          v24 = *((double *)v9 + 1);
          v25 = *((double *)a2 - 1);
LABEL_33:
          *v9 = v22;
          *(a2 - 2) = v23;
          *((double *)v9 + 1) = v25;
          *((double *)a2 - 1) = v24;
          return;
        }
        if (v23 >= v22)
        {
          v25 = *((double *)a2 - 1);
          v24 = *((double *)v9 + 1);
          if (v25 < v24)
            goto LABEL_33;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v9, v9 + 2, (unint64_t *)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(v9 + 6), (unint64_t *)a2 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(&v9[2 * (v13 >> 1)], v9, (unint64_t *)a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v9, &v9[2 * (v13 >> 1)], (unint64_t *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v9 + 2, v15 - 2, (unint64_t *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v9 + 4, &v9[2 * v14 + 2], (unint64_t *)a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            v17 = v9[1];
            v9[1] = v15[1];
            v15[1] = v17;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v18 = *(v9 - 2);
          if (v18 >= *v9 && (*v9 < v18 || *((double *)v9 - 1) >= *((double *)v9 + 1)))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>(v9, (double *)a2);
            goto LABEL_18;
          }
LABEL_13:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>((double *)v9, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_16;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v9, (uint64_t)v19);
          v9 = (unint64_t *)(v19 + 2);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)(v19 + 2), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v19 + 2);
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (uint64_t *)v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != (unint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,std::pair<unsigned long long,double> *>((uint64_t)v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = *(a2 - 2);
        v23 = *v9;
        if (v22 < *v9)
        {
          v24 = *((double *)v9 + 1);
          v25 = *((double *)a2 - 1);
LABEL_33:
          *v9 = v22;
          *(a2 - 2) = v23;
          *((double *)v9 + 1) = v25;
          *((double *)a2 - 1) = v24;
          return;
        }
        if (v23 >= v22)
        {
          v25 = *((double *)a2 - 1);
          v24 = *((double *)v9 + 1);
          if (v25 < v24)
            goto LABEL_33;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v9, v9 + 2, (unint64_t *)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(v9 + 6), (unint64_t *)a2 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(&v9[2 * (v13 >> 1)], v9, (unint64_t *)a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v9, &v9[2 * (v13 >> 1)], (unint64_t *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v9 + 2, v15 - 2, (unint64_t *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v9 + 4, &v9[2 * v14 + 2], (unint64_t *)a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            v17 = v9[1];
            v9[1] = v15[1];
            v15[1] = v17;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v18 = *(v9 - 2);
          if (v18 >= *v9 && (*v9 < v18 || *((double *)v9 - 1) >= *((double *)v9 + 1)))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>(v9, (double *)a2);
            goto LABEL_18;
          }
LABEL_13:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>((double *)v9, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_16;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *>((uint64_t)v9, (uint64_t)v19);
          v9 = (unint64_t *)(v19 + 2);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *>((uint64_t)(v19 + 2), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v19 + 2);
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (uint64_t *)v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != (unint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,std::pair<unsigned long long,double> *>((uint64_t)v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - (char *)v9;
    v13 = (a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *((_QWORD *)a2 - 2);
        v19 = (__int128 *)(a2 - 16);
        if (v20 < (int64_t)v9->n128_u64[0])
        {
          v28 = (__int128)*v9;
          *v9 = (__n128)*v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v9, (uint64_t *)&v9[1], (uint64_t *)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v9, (uint64_t *)&v9[1], (uint64_t *)&v9[2], (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v9, (uint64_t *)&v9[1], (uint64_t *)&v9[2], v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != (__n128 *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((char *)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (uint64_t *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)&v9[v13 >> 1], (uint64_t *)v9, (uint64_t *)a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v9, (uint64_t *)&v9[v13 >> 1], (uint64_t *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)&v9[1], v15 - 2, (uint64_t *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)&v9[2], (uint64_t *)&v9[v14 + 1], (uint64_t *)a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v15 - 1, v15, (uint64_t *)&v9[v14 + 1]);
            v27 = (__int128)*v9;
            *v9 = *(__n128 *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((int64_t)v9[-1].n128_u64[0] >= (int64_t)v9->n128_u64[0])
          {
            v9 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>((uint64_t *)v9, (uint64_t *)a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((uint64_t)v9, v16);
          v9 = (__n128 *)(v16 + 2);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((uint64_t)(v16 + 2), a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (__n128 *)(v16 + 2);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (char *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(v9, a2);
        }
        else if (v9 != (__n128 *)a2)
        {
          v21 = (char *)&v9[1];
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[1].n128_i64[0];
            if (v23 < (int64_t)a1->n128_u64[0])
            {
              v24 = a1[1].n128_i64[1];
              v25 = v22;
              do
              {
                *(_OWORD *)v25 = *((_OWORD *)v25 - 1);
                v26 = *((_QWORD *)v25 - 4);
                v25 -= 16;
              }
              while (v23 < v26);
              *(_QWORD *)v25 = v23;
              *((_QWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 16;
            a1 = (__n128 *)v22;
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - (char *)v9;
    v13 = (a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *((_QWORD *)a2 - 2);
        v19 = (__int128 *)(a2 - 16);
        if (v20 < (int64_t)v9->n128_u64[0])
        {
          v28 = (__int128)*v9;
          *v9 = (__n128)*v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v9, (uint64_t *)&v9[1], (uint64_t *)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v9, (uint64_t *)&v9[1], (uint64_t *)&v9[2], (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v9, (uint64_t *)&v9[1], (uint64_t *)&v9[2], v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != (__n128 *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((char *)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (uint64_t *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)&v9[v13 >> 1], (uint64_t *)v9, (uint64_t *)a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v9, (uint64_t *)&v9[v13 >> 1], (uint64_t *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)&v9[1], v15 - 2, (uint64_t *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)&v9[2], (uint64_t *)&v9[v14 + 1], (uint64_t *)a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((__int128 *)v15 - 1, v15, (uint64_t *)&v9[v14 + 1]);
            v27 = (__int128)*v9;
            *v9 = *(__n128 *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((int64_t)v9[-1].n128_u64[0] >= (int64_t)v9->n128_u64[0])
          {
            v9 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>((uint64_t *)v9, (uint64_t *)a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*>((uint64_t)v9, v16);
          v9 = (__n128 *)(v16 + 2);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*>((uint64_t)(v16 + 2), a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (__n128 *)(v16 + 2);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (char *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(v9, a2);
        }
        else if (v9 != (__n128 *)a2)
        {
          v21 = (char *)&v9[1];
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[1].n128_i64[0];
            if (v23 < (int64_t)a1->n128_u64[0])
            {
              v24 = a1[1].n128_i64[1];
              v25 = v22;
              do
              {
                *(_OWORD *)v25 = *((_OWORD *)v25 - 1);
                v26 = *((_QWORD *)v25 - 4);
                v25 -= 16;
              }
              while (v23 < v26);
              *(_QWORD *)v25 = v23;
              *((_QWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 16;
            a1 = (__n128 *)v22;
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = a2[-2].n128_f32[0];
        v35 = a2 - 2;
        if (v36 > *(float *)v8)
        {
          v100 = *(__n128 *)v8;
          v109 = *(__n128 *)(v8 + 16);
          v37 = v35[1];
          *(__n128 *)v8 = *v35;
          *(__n128 *)(v8 + 16) = v37;
          *v35 = v100;
          v35[1] = v109;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((float *)v8, (float *)(v8 + 32), (float *)&a2[-2]);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((__n128 *)v8, (__n128 *)(v8 + 32), (__n128 *)(v8 + 64), a2 - 2);
        return;
      case 5uLL:
        v38 = (__n128 *)(v8 + 32);
        v39 = (__n128 *)(v8 + 64);
        v40 = (__n128 *)(v8 + 96);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((__n128 *)v8, (__n128 *)(v8 + 32), (__n128 *)(v8 + 64), (__n128 *)(v8 + 96));
        v42 = a2[-2].n128_f32[0];
        v41 = a2 - 2;
        if (v42 > *(float *)(v8 + 96))
        {
          v43 = *v40;
          v110 = *(__n128 *)(v8 + 112);
          v44 = v41[1];
          *v40 = *v41;
          *(__n128 *)(v8 + 112) = v44;
          *v41 = v43;
          v41[1] = v110;
          if (v40->n128_f32[0] > v39->n128_f32[0])
          {
            v46 = *v39;
            v45 = *(_OWORD *)(v8 + 80);
            v47 = *(_OWORD *)(v8 + 112);
            *v39 = *v40;
            *(_OWORD *)(v8 + 80) = v47;
            *v40 = v46;
            *(_OWORD *)(v8 + 112) = v45;
            if (v39->n128_f32[0] > v38->n128_f32[0])
            {
              v49 = *v38;
              v48 = *(_OWORD *)(v8 + 48);
              v50 = *(_OWORD *)(v8 + 80);
              *v38 = *v39;
              *(_OWORD *)(v8 + 48) = v50;
              *v39 = v49;
              *(_OWORD *)(v8 + 80) = v48;
              if (*(float *)(v8 + 32) > *(float *)v8)
              {
                v101 = *(__n128 *)v8;
                v111 = *(_OWORD *)(v8 + 16);
                v51 = *(_OWORD *)(v8 + 48);
                *(__n128 *)v8 = *v38;
                *(_OWORD *)(v8 + 16) = v51;
                *v38 = v101;
                *(_OWORD *)(v8 + 48) = v111;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v52 = (__n128 *)(v8 + 32);
          v54 = (__n128 *)v8 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v8;
              do
              {
                v57 = v52;
                v58 = *(float *)(v56 + 32);
                if (v58 > *(float *)v56)
                {
                  *(_OWORD *)v102 = *(_OWORD *)(v56 + 36);
                  *(_OWORD *)&v102[12] = *(_OWORD *)(v56 + 48);
                  v59 = v55;
                  while (1)
                  {
                    v60 = v8 + v59;
                    v61 = *(_OWORD *)(v8 + v59 + 16);
                    *(_OWORD *)(v60 + 32) = *(_OWORD *)(v8 + v59);
                    *(_OWORD *)(v60 + 48) = v61;
                    if (!v59)
                      break;
                    v59 -= 32;
                    if (v58 <= *(float *)(v60 - 32))
                    {
                      v62 = v8 + v59 + 32;
                      goto LABEL_75;
                    }
                  }
                  v62 = v8;
LABEL_75:
                  *(float *)v62 = v58;
                  *(_OWORD *)(v62 + 16) = *(_OWORD *)&v102[12];
                  *(_OWORD *)(v62 + 4) = *(_OWORD *)v102;
                }
                v52 = v57 + 2;
                v55 += 32;
                v56 = (unint64_t)v57;
              }
              while (&v57[2] != a2);
            }
          }
          else if (!v54)
          {
            do
            {
              v89 = (uint64_t)v52;
              v90 = *(float *)(a1 + 32);
              if (v90 > *(float *)a1)
              {
                *(_OWORD *)v105 = *(_OWORD *)(a1 + 36);
                *(_OWORD *)&v105[12] = *(_OWORD *)(a1 + 48);
                v91 = v52;
                do
                {
                  v92 = v91[-1];
                  *v91 = v91[-2];
                  v91[1] = v92;
                  v93 = v91[-4].n128_f32[0];
                  v91 -= 2;
                }
                while (v90 > v93);
                v91->n128_f32[0] = v90;
                v91[1] = *(__n128 *)&v105[12];
                *(__n128 *)((char *)v91 + 4) = *(__n128 *)v105;
              }
              v52 += 2;
              a1 = v89;
            }
            while ((__n128 *)(v89 + 32) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v63 = (v10 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = v8 + 32 * v66;
                if (2 * v65 + 2 < (uint64_t)v10 && *(float *)v67 > *(float *)(v67 + 32))
                {
                  v67 += 32;
                  v66 = 2 * v65 + 2;
                }
                v68 = v8 + 32 * v65;
                v69 = *(float *)v68;
                if (*(float *)v67 <= *(float *)v68)
                {
                  *(_OWORD *)&v103[12] = *(_OWORD *)(v68 + 16);
                  *(_OWORD *)v103 = *(_OWORD *)(v68 + 4);
                  do
                  {
                    v70 = (_OWORD *)v68;
                    v68 = v67;
                    v71 = *(_OWORD *)(v67 + 16);
                    *v70 = *(_OWORD *)v67;
                    v70[1] = v71;
                    if (v63 < v66)
                      break;
                    v72 = 2 * v66;
                    v66 = (2 * v66) | 1;
                    v67 = v8 + 32 * v66;
                    v73 = v72 + 2;
                    if (v73 < (uint64_t)v10 && *(float *)v67 > *(float *)(v67 + 32))
                    {
                      v67 += 32;
                      v66 = v73;
                    }
                  }
                  while (*(float *)v67 <= v69);
                  *(float *)v68 = v69;
                  *(_OWORD *)(v68 + 16) = *(_OWORD *)&v103[12];
                  *(_OWORD *)(v68 + 4) = *(_OWORD *)v103;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v74 = (unint64_t)v9 >> 5;
            do
            {
              v75 = 0;
              v104 = *(__n128 *)v8;
              v112 = *(__n128 *)(v8 + 16);
              v76 = (__n128 *)v8;
              do
              {
                v77 = v76;
                v76 += 2 * v75 + 2;
                v78 = 2 * v75;
                v75 = (2 * v75) | 1;
                v79 = v78 + 2;
                if (v79 < v74 && v76->n128_f32[0] > v76[2].n128_f32[0])
                {
                  v76 += 2;
                  v75 = v79;
                }
                v80 = v76[1];
                *v77 = *v76;
                v77[1] = v80;
              }
              while (v75 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
              a2 -= 2;
              if (v76 == a2)
              {
                *v76 = v104;
                v76[1] = v112;
              }
              else
              {
                v81 = a2[1];
                *v76 = *a2;
                v76[1] = v81;
                *a2 = v104;
                a2[1] = v112;
                v82 = (uint64_t)&v76[2] - v8;
                if (v82 >= 33)
                {
                  v83 = (((unint64_t)v82 >> 5) - 2) >> 1;
                  v84 = (__n128 *)(v8 + 32 * v83);
                  v85 = v76->n128_f32[0];
                  if (v84->n128_f32[0] > v76->n128_f32[0])
                  {
                    *(__n128 *)&v96[12] = v76[1];
                    *(__n128 *)v96 = *(__n128 *)((char *)v76 + 4);
                    do
                    {
                      v86 = v76;
                      v76 = v84;
                      v87 = v84[1];
                      *v86 = *v84;
                      v86[1] = v87;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = (__n128 *)(v8 + 32 * v83);
                    }
                    while (v84->n128_f32[0] > v85);
                    v76->n128_f32[0] = v85;
                    v76[1] = *(__n128 *)&v96[12];
                    *(__n128 *)((char *)v76 + 4) = *(__n128 *)v96;
                  }
                }
              }
            }
            while (v74-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + 32 * (v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((float *)(a1 + 32 * (v10 >> 1)), (float *)a1, (float *)&a2[-2]);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((float *)a1, (float *)(a1 + 32 * (v10 >> 1)), (float *)&a2[-2]);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((float *)(a1 + 32), (float *)(v12 - 32), (float *)&a2[-4]);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((float *)(a1 + 64), (float *)(a1 + 32 + 32 * v11), (float *)&a2[-6]);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((float *)(v12 - 32), (float *)v12, (float *)(a1 + 32 + 32 * v11));
          v97 = *(_OWORD *)a1;
          v106 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)v12 = v97;
          *(_OWORD *)(v12 + 16) = v106;
        }
        --a3;
        v14 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 32) <= v14)
        {
          *(_OWORD *)&v95[12] = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v95 = *(_OWORD *)(a1 + 4);
          if (v14 <= a2[-2].n128_f32[0])
          {
            v28 = a1 + 32;
            do
            {
              v8 = v28;
              if (v28 >= (unint64_t)a2)
                break;
              v28 += 32;
            }
            while (v14 <= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = *(float *)(v8 + 32);
              v8 += 32;
            }
            while (v14 <= v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
            {
              v30 = v29[-2].n128_f32[0];
              v29 -= 2;
            }
            while (v14 > v30);
          }
          while (v8 < (unint64_t)v29)
          {
            v99 = *(__n128 *)v8;
            v108 = *(__n128 *)(v8 + 16);
            v31 = v29[1];
            *(__n128 *)v8 = *v29;
            *(__n128 *)(v8 + 16) = v31;
            *v29 = v99;
            v29[1] = v108;
            do
            {
              v32 = *(float *)(v8 + 32);
              v8 += 32;
            }
            while (v14 <= v32);
            do
            {
              v33 = v29[-2].n128_f32[0];
              v29 -= 2;
            }
            while (v14 > v33);
          }
          if (v8 - 32 != a1)
          {
            v34 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 16) = v34;
          }
          a4 = 0;
          *(float *)(v8 - 32) = v14;
          *(_OWORD *)(v8 - 16) = *(_OWORD *)&v95[12];
          *(_OWORD *)(v8 - 28) = *(_OWORD *)v95;
          continue;
        }
        v15 = 0;
        *(_OWORD *)&v94[12] = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v94 = *(_OWORD *)(a1 + 4);
        do
        {
          v16 = *(float *)(a1 + v15 + 32);
          v15 += 32;
        }
        while (v16 > v14);
        v17 = a1 + v15;
        v18 = a2;
        if (v15 == 32)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = v18[-2].n128_f32[0];
            v18 -= 2;
          }
          while (v20 <= v14);
        }
        else
        {
          do
          {
            v19 = v18[-2].n128_f32[0];
            v18 -= 2;
          }
          while (v19 <= v14);
        }
        v8 = a1 + v15;
        if (v17 < (unint64_t)v18)
        {
          v21 = v18;
          do
          {
            v98 = *(__n128 *)v8;
            v107 = *(__n128 *)(v8 + 16);
            v22 = v21[1];
            *(__n128 *)v8 = *v21;
            *(__n128 *)(v8 + 16) = v22;
            *v21 = v98;
            v21[1] = v107;
            do
            {
              v23 = *(float *)(v8 + 32);
              v8 += 32;
            }
            while (v23 > v14);
            do
            {
              v24 = v21[-2].n128_f32[0];
              v21 -= 2;
            }
            while (v24 <= v14);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 32 != a1)
        {
          v25 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 16) = v25;
        }
        *(float *)(v8 - 32) = v14;
        *(_OWORD *)(v8 - 16) = *(_OWORD *)&v94[12];
        *(_OWORD *)(v8 - 28) = *(_OWORD *)v94;
        if (v17 < (unint64_t)v18)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *,false>(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>(a1, v8 - 32);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 32);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = ((char *)a2 - (char *)v10) >> 3;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 2, v10))
        {
          v23 = *v10;
          *v10 = *(a2 - 2);
          *(a2 - 2) = v23;
          v24 = v10[1];
          v10[1] = *(a2 - 1);
          *(a2 - 1) = v24;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v10, v10 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v10, v10 + 2, v10 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2, a3);
        return;
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>((uint64_t)v10, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>((uint64_t)v10, a2, (uint64_t (**)(_QWORD *, _DWORD *))a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[2 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(&v10[2 * (v14 >> 1)], v10, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v10, &v10[2 * (v14 >> 1)], a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v10 + 2, v16 - 2, a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v10 + 4, &v10[2 * v15 + 2], a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v16 - 2, v16, &v10[2 * v15 + 2], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            v18 = v10[1];
            v10[1] = v16[1];
            v16[1] = v18;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v10 - 2, v10) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned int> *,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&)>(v10, a2, (uint64_t (**)(uint64_t *, _DWORD *))a3);
            goto LABEL_16;
          }
LABEL_11:
          a6.n128_f32[0] = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned int> *,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&)>(v10, a2, (uint64_t (**)(_DWORD *, uint64_t *))a3);
          v20 = v19;
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v10, v19, a3);
          v10 = v20 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v20 + 2, a2, a3))
          {
            v11 = v12 + 1;
            if (v22)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>(a1, v20, a3, -v12, a5 & 1, a6);
            v10 = v20 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v20;
          if (v22)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*>((uint64_t)v10, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3, a6);
        return;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if (a2 == a4)
    return;
  v4 = a2 - 2;
  if (a2 - 2 == a4)
    return;
  v5 = 0;
  v6 = a2 - 2;
  do
  {
    v7 = v4 + 2;
    v8 = *v4;
    v10 = *(v6 - 2);
    v6 -= 2;
    v9 = v10;
    if (v10 >= *v4)
    {
      if (v8 < v9)
        goto LABEL_17;
      v11 = *(v4 - 1);
      v12 = v4[1];
      if (v11 >= v12)
        goto LABEL_17;
    }
    else
    {
      v11 = *(v4 - 1);
      v12 = v4[1];
    }
    *(v4 - 2) = v8;
    *(v4 - 1) = v12;
    if (v7 == a2)
    {
LABEL_13:
      v7 = a2;
      goto LABEL_14;
    }
    v13 = v5;
    while (1)
    {
      v14 = *(unint64_t *)((char *)a2 + v13);
      if (v9 >= v14)
        break;
      v15 = *(unint64_t *)((char *)a2 + v13 + 8);
LABEL_12:
      v7 += 2;
      v16 = (uint64_t)a2 + v13;
      *(_QWORD *)(v16 - 16) = v14;
      *(_QWORD *)(v16 - 8) = v15;
      v13 += 16;
      if (!v13)
        goto LABEL_13;
    }
    if (v14 < v9)
      goto LABEL_14;
    v15 = *(unint64_t *)((char *)a2 + v13 + 8);
    if (v11 < v15)
      goto LABEL_12;
    v7 = (unint64_t *)((char *)a2 + v13);
LABEL_14:
    *(v7 - 2) = v9;
    *(v7 - 1) = v11;
LABEL_17:
    v5 -= 16;
    v4 = v6;
  }
  while (v6 != a4);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *i;

  if (a2 != a4)
  {
    v4 = a2 - 2;
    if (a2 - 2 != a4)
    {
      v5 = a2 - 1;
      v6 = a2 - 2;
      while (1)
      {
        v8 = *(v6 - 2);
        v6 -= 2;
        v7 = v8;
        v9 = *v4;
        if (v8 < *v4)
          break;
        if (v9 >= v7)
        {
          v10 = *(v4 - 1);
          if (v10 < v4[1])
            goto LABEL_6;
        }
LABEL_14:
        v5 -= 2;
        v4 = v6;
        if (v6 == a4)
          return;
      }
      v10 = *(v4 - 1);
LABEL_6:
      for (i = v5; ; i += 2)
      {
        *(i - 3) = v9;
        v9 = i[1];
        *(i - 2) = *i;
        if (v7 >= v9 && (v9 < v7 || v10 >= i[2]))
          break;
      }
      *(i - 1) = v7;
      *i = v10;
      goto LABEL_14;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a4 - 16);
  v7 = *(_QWORD *)(a2 - 16);
  if (v6 < v7 || v7 >= v6 && *(_QWORD *)(a4 - 8) < *(_QWORD *)(a2 - 8))
  {
    v8 = *(_QWORD *)(a6 - 16);
    if (v8 < v6 || v6 >= v8 && *(_QWORD *)(a6 - 8) < *(_QWORD *)(a4 - 8))
    {
      *(_QWORD *)(a2 - 16) = v8;
      *(_QWORD *)(a6 - 16) = v7;
      v9 = (uint64_t *)(a2 - 8);
      v10 = (uint64_t *)(a6 - 8);
      result = 1;
LABEL_14:
      v20 = *v9;
      *v9 = *v10;
      *v10 = v20;
      return result;
    }
    *(_QWORD *)(a2 - 16) = v6;
    v9 = (uint64_t *)(a4 - 8);
    v16 = *(_QWORD *)(a4 - 8);
    *(_QWORD *)(a4 - 16) = v7;
    v17 = *(_QWORD *)(a2 - 8);
    *(_QWORD *)(a2 - 8) = v16;
    *(_QWORD *)(a4 - 8) = v17;
    v18 = *(_QWORD *)(a6 - 16);
    v19 = *(_QWORD *)(a4 - 16);
    if (v18 >= v19 && (v19 < v18 || *(_QWORD *)(a6 - 8) >= v17))
      return 1;
    *(_QWORD *)(a4 - 16) = v18;
    *(_QWORD *)(a6 - 16) = v19;
    v10 = (uint64_t *)(a6 - 8);
LABEL_13:
    result = 2;
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a6 - 16);
  if (v12 >= v6 && (v6 < v12 || *(_QWORD *)(a6 - 8) >= *(_QWORD *)(a4 - 8)))
    return 0;
  *(_QWORD *)(a4 - 16) = v12;
  *(_QWORD *)(a6 - 16) = v6;
  v10 = (uint64_t *)(a4 - 8);
  v13 = *(_QWORD *)(a4 - 8);
  *(_QWORD *)(a4 - 8) = *(_QWORD *)(a6 - 8);
  *(_QWORD *)(a6 - 8) = v13;
  v14 = *(_QWORD *)(a4 - 16);
  v15 = *(_QWORD *)(a2 - 16);
  if (v14 < v15 || v15 >= v14 && (unint64_t)*v10 < *(_QWORD *)(a2 - 8))
  {
    *(_QWORD *)(a2 - 16) = v14;
    *(_QWORD *)(a4 - 16) = v15;
    v9 = (uint64_t *)(a2 - 8);
    goto LABEL_13;
  }
  return 1;
}

void std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::__less<void,void> &>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v5 = a2 - 2;
  v4 = *(a2 - 2);
  v6 = *(a2 - 1);
  v7 = *a4;
  if (v4 >= *a4 && (v7 < v4 || v6 >= a4[1]))
  {
    while (v5 > a4)
    {
      v12 = *(v5 - 2);
      if (v4 < v12 || v12 >= v4 && v6 < *(v5 - 1))
        break;
      v5 -= 2;
    }
  }
  else
  {
    v8 = *(a2 - 4);
    if (v4 >= v8)
    {
      v9 = a2 - 6;
      do
      {
        if (v8 >= v4 && v6 < v9[3])
          break;
        v10 = *v9;
        v9 -= 2;
        v8 = v10;
      }
      while (v4 >= v10);
      v5 = v9 + 4;
    }
  }
  if (v5 > a4)
  {
    for (a4 += 2; v4 < v7 || v7 >= v4 && v6 < *(a4 - 1); a4 += 2)
    {
      v11 = *a4;
      v7 = v11;
    }
  }
  if (a4 >= v5)
  {
    v13 = v5;
  }
  else
  {
    v13 = v5;
    do
    {
      v14 = *(v13 - 2);
      v13 -= 2;
      *v13 = *(a4 - 2);
      *(a4 - 2) = v14;
      v15 = v13[1];
      v13[1] = *(a4 - 1);
      *(a4 - 1) = v15;
      v16 = *(v13 - 2);
      if (v4 >= v16)
      {
        v17 = v5 - 6;
        do
        {
          if (v16 >= v4 && v6 < v17[3])
            break;
          v18 = *v17;
          v17 -= 2;
          v16 = v18;
        }
        while (v4 >= v18);
        v13 = v17 + 4;
      }
      do
      {
        do
        {
          a4 += 2;
          v19 = *(a4 - 2);
        }
        while (v4 < v19);
      }
      while (v19 >= v4 && v6 < *(a4 - 1));
      v5 = v13;
    }
    while (a4 < v13);
  }
  if (v13 + 2 != a2)
  {
    *(a2 - 2) = *v13;
    *(a2 - 1) = v13[1];
  }
  *v13 = v4;
  v13[1] = v6;
}

void std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::__less<void,void> &>(unint64_t *a1@<X1>, unint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;

  v3 = 0;
  v4 = *(a1 - 2);
  v5 = *(a1 - 1);
  while (1)
  {
    v6 = a1[v3 - 4];
    if (v6 >= v4 && (v4 < v6 || a1[v3 - 3] >= v5))
      break;
    v3 -= 2;
  }
  v7 = (unint64_t)&a1[v3 - 2];
  if (v3 * 8)
  {
    do
    {
      v9 = *a2;
      a2 += 2;
      v8 = v9;
    }
    while (v9 >= v4 && (v4 < v8 || *(a2 - 1) >= v5));
  }
  else if (v7 > (unint64_t)a2)
  {
    while (1)
    {
      v11 = *a2;
      a2 += 2;
      v10 = v11;
      if (v11 < v4)
        break;
      if (v4 >= v10)
      {
        if (*(a2 - 1) < v5 || (unint64_t)a2 >= v7)
          break;
      }
      else if ((unint64_t)a2 >= v7)
      {
        break;
      }
    }
  }
  v13 = (unint64_t *)v7;
  if ((unint64_t)a2 < v7)
  {
    v14 = a2;
    do
    {
      v15 = *(v13 - 2);
      v13 -= 2;
      *v13 = *(v14 - 2);
      *(v14 - 2) = v15;
      v16 = v13[1];
      v13[1] = *(v14 - 1);
      *(v14 - 1) = v16;
      while (1)
      {
        v17 = *(v13 - 2);
        if (v17 >= v4 && (v4 < v17 || *(v13 - 1) >= v5))
          break;
        v13 -= 2;
      }
      do
      {
        v19 = *v14;
        v14 += 2;
        v18 = v19;
      }
      while (v19 >= v4 && (v4 < v18 || *(v14 - 1) >= v5));
    }
    while (v14 < v13);
  }
  v20 = v13 + 2;
  if (v13 + 2 != a1)
  {
    *(a1 - 2) = *v13;
    *(a1 - 1) = v13[1];
  }
  *v13 = v4;
  v13[1] = v5;
  *(_QWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = (unint64_t)a2 >= v7;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v24;

  v6 = 1;
  switch((a2 - (uint64_t)a4) >> 4)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      v7 = *a4;
      v8 = *(_QWORD *)(a2 - 16);
      if (*a4 < v8 || v8 >= v7 && a4[1] < *(_QWORD *)(a2 - 8))
      {
        *(_QWORD *)(a2 - 16) = v7;
        *a4 = v8;
        v9 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = a4[1];
        a4[1] = v9;
      }
      goto LABEL_27;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a2 - 16, a2 - 16, a3, (uint64_t)(a4 + 2));
      goto LABEL_27;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32, a3, (uint64_t)(a4 + 2));
      goto LABEL_27;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32, a2 - 48, a2 - 48, a3, (uint64_t)(a4 + 2));
LABEL_27:
      v6 = 1;
      return v6 & 1;
    default:
      v10 = a2 - 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32);
      v12 = a2 - 48;
      if ((unint64_t *)(a2 - 48) == a4)
        goto LABEL_29;
      v11 = 0;
      v13 = 0;
      v14 = (unint64_t *)(a2 - 48);
      break;
  }
  do
  {
    v16 = *(v14 - 2);
    v14 -= 2;
    v15 = v16;
    v17 = *(_QWORD *)(v10 - 16);
    if (v16 >= v17)
    {
      if (v17 < v15)
        goto LABEL_21;
      v18 = *(_QWORD *)(v12 - 8);
      if (v18 >= *(_QWORD *)(v10 - 8))
        goto LABEL_21;
    }
    else
    {
      v18 = *(_QWORD *)(v12 - 8);
    }
    *(_QWORD *)(v12 - 16) = v17;
    *(_QWORD *)(v12 - 8) = *(_QWORD *)(v10 - 8);
    if (v10 == a2)
    {
LABEL_19:
      v10 = a2;
      goto LABEL_20;
    }
    v19 = v11;
    while (1)
    {
      v20 = *(_QWORD *)(a2 + v19 - 32);
      if (v15 >= v20)
        break;
      v21 = *(_QWORD *)(a2 + v19 - 24);
LABEL_18:
      v10 += 16;
      v22 = a2 + v19;
      *(_QWORD *)(v22 - 48) = v20;
      *(_QWORD *)(v22 - 40) = v21;
      v19 += 16;
      if (v19 == 32)
        goto LABEL_19;
    }
    if (v20 < v15)
      goto LABEL_20;
    v21 = *(_QWORD *)(a2 + v19 - 24);
    if (v18 < v21)
      goto LABEL_18;
    v10 = a2 + v19 - 32;
LABEL_20:
    *(_QWORD *)(v10 - 16) = v15;
    *(_QWORD *)(v10 - 8) = v18;
    if (++v13 == 8)
    {
      v24 = 0;
      LOBYTE(v11) = v14 == a4;
      goto LABEL_31;
    }
LABEL_21:
    v11 -= 16;
    v10 = v12;
    v12 = (uint64_t)v14;
  }
  while (v14 != a4);
LABEL_29:
  v24 = 1;
LABEL_31:
  v6 = v24 | v11;
  return v6 & 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a3, a4, a5, a6);
  v13 = *(_QWORD *)(a8 - 16);
  v14 = *(_QWORD *)(a6 - 16);
  if (v13 < v14 || v14 >= v13 && *(_QWORD *)(a8 - 8) < *(_QWORD *)(a6 - 8))
  {
    *(_QWORD *)(a6 - 16) = v13;
    *(_QWORD *)(a8 - 16) = v14;
    v15 = *(_QWORD *)(a6 - 8);
    *(_QWORD *)(a6 - 8) = *(_QWORD *)(a8 - 8);
    *(_QWORD *)(a8 - 8) = v15;
    v16 = *(_QWORD *)(a6 - 16);
    v17 = *(_QWORD *)(a4 - 16);
    if (v16 < v17 || v17 >= v16 && *(_QWORD *)(a6 - 8) < *(_QWORD *)(a4 - 8))
    {
      *(_QWORD *)(a4 - 16) = v16;
      *(_QWORD *)(a6 - 16) = v17;
      v18 = *(_QWORD *)(a4 - 8);
      *(_QWORD *)(a4 - 8) = *(_QWORD *)(a6 - 8);
      *(_QWORD *)(a6 - 8) = v18;
      v19 = *(_QWORD *)(a4 - 16);
      v20 = *(_QWORD *)(a2 - 16);
      if (v19 < v20 || v20 >= v19 && *(_QWORD *)(a4 - 8) < *(_QWORD *)(a2 - 8))
      {
        *(_QWORD *)(a2 - 16) = v19;
        *(_QWORD *)(a4 - 16) = v20;
        v21 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = *(_QWORD *)(a4 - 8);
        *(_QWORD *)(a4 - 8) = v21;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)(a10 - 16);
  v16 = *(_QWORD *)(a8 - 16);
  if (v15 < v16 || v16 >= v15 && *(_QWORD *)(a10 - 8) < *(_QWORD *)(a8 - 8))
  {
    *(_QWORD *)(a8 - 16) = v15;
    *(_QWORD *)(a10 - 16) = v16;
    v17 = *(_QWORD *)(a8 - 8);
    *(_QWORD *)(a8 - 8) = *(_QWORD *)(a10 - 8);
    *(_QWORD *)(a10 - 8) = v17;
    v18 = *(_QWORD *)(a8 - 16);
    v19 = *(_QWORD *)(a6 - 16);
    if (v18 < v19 || v19 >= v18 && *(_QWORD *)(a8 - 8) < *(_QWORD *)(a6 - 8))
    {
      *(_QWORD *)(a6 - 16) = v18;
      *(_QWORD *)(a8 - 16) = v19;
      v20 = *(_QWORD *)(a6 - 8);
      *(_QWORD *)(a6 - 8) = *(_QWORD *)(a8 - 8);
      *(_QWORD *)(a8 - 8) = v20;
      v21 = *(_QWORD *)(a6 - 16);
      v22 = *(_QWORD *)(a4 - 16);
      if (v21 < v22 || v22 >= v21 && *(_QWORD *)(a6 - 8) < *(_QWORD *)(a4 - 8))
      {
        *(_QWORD *)(a4 - 16) = v21;
        *(_QWORD *)(a6 - 16) = v22;
        v23 = *(_QWORD *)(a4 - 8);
        *(_QWORD *)(a4 - 8) = *(_QWORD *)(a6 - 8);
        *(_QWORD *)(a6 - 8) = v23;
        v24 = *(_QWORD *)(a4 - 16);
        v25 = *(_QWORD *)(a2 - 16);
        if (v24 < v25 || v25 >= v24 && *(_QWORD *)(a4 - 8) < *(_QWORD *)(a2 - 8))
        {
          *(_QWORD *)(a2 - 16) = v24;
          *(_QWORD *)(a4 - 16) = v25;
          v26 = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = *(_QWORD *)(a4 - 8);
          *(_QWORD *)(a4 - 8) = v26;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = a2 - a4;
  if (a2 == a4)
    return a5;
  if (v8 >= 17)
  {
    v14 = (unint64_t)((v8 >> 4) - 2) >> 1;
    v15 = v14 + 1;
    v16 = a2 - 16 * v14;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a7, v8 >> 4, v16, v16);
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  if (a4 != a6)
  {
    v17 = a4;
    v18 = a4;
    do
    {
      v20 = *(_QWORD *)(v18 - 16);
      v18 -= 16;
      v19 = v20;
      v21 = *(_QWORD *)(a2 - 16);
      if (v20 < v21 || v21 >= v19 && *(_QWORD *)(v17 - 8) < *(_QWORD *)(a2 - 8))
      {
        *(_QWORD *)(v17 - 16) = v21;
        *(_QWORD *)(a2 - 16) = v19;
        v22 = *(_QWORD *)(v17 - 8);
        *(_QWORD *)(v17 - 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v22;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a7, v8 >> 4, a1, a2);
      }
      v17 = v18;
    }
    while (v18 != a6);
  }
  if (v8 >= 17)
  {
    v23 = (unint64_t)v8 >> 4;
    v24 = a4 + 16;
    do
    {
      v26 = *(_QWORD *)(a2 - 16);
      v25 = *(_QWORD *)(a2 - 8);
      std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a7, v23);
      if (v24 == v28)
      {
        *(_QWORD *)(v28 - 16) = v26;
        *(_QWORD *)(v28 - 8) = v25;
      }
      else
      {
        *(_QWORD *)(v28 - 16) = *(_QWORD *)(v24 - 16);
        *(_QWORD *)(v28 - 8) = *(_QWORD *)(v24 - 8);
        *(_QWORD *)(v24 - 16) = v26;
        *(_QWORD *)(v24 - 8) = v25;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, v27, (unint64_t *)(v28 - 16), a7, (a2 - (v28 - 16)) >> 4);
      }
      v24 += 16;
    }
    while (v23-- > 2);
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  if (a4 >= 2)
  {
    v6 = a2 - a6;
    v7 = (unint64_t)(a4 - 2) >> 1;
    if (v7 >= (a2 - a6) >> 4)
    {
      v8 = v6 >> 3;
      v9 = (v6 >> 3) | 1;
      v10 = a2 - 16 * v9;
      v11 = v8 + 2;
      if (v11 < a4)
      {
        v12 = *(_QWORD *)(v10 - 16);
        v13 = *(_QWORD *)(v10 - 32);
        if (v12 < v13 || v13 >= v12 && *(_QWORD *)(v10 - 8) < *(_QWORD *)(v10 - 24))
        {
          v10 -= 16;
          v9 = v11;
        }
      }
      v14 = *(_QWORD *)(v10 - 16);
      v15 = *(_QWORD *)(a6 - 16);
      if (v14 >= v15)
      {
        if (v15 >= v14)
        {
          v16 = *(_QWORD *)(a6 - 8);
          if (*(_QWORD *)(v10 - 8) < v16)
            return;
        }
        else
        {
          v16 = *(_QWORD *)(a6 - 8);
        }
        *(_QWORD *)(a6 - 16) = v14;
        *(_QWORD *)(a6 - 8) = *(_QWORD *)(v10 - 8);
        if (v7 >= v9)
        {
          while (1)
          {
            v18 = 2 * v9;
            v9 = (2 * v9) | 1;
            v17 = a2 - 16 * v9;
            v19 = v18 + 2;
            if (v19 < a4)
            {
              v20 = *(_QWORD *)(v17 - 16);
              v21 = *(_QWORD *)(v17 - 32);
              if (v20 < v21 || v21 >= v20 && *(_QWORD *)(v17 - 8) < *(_QWORD *)(v17 - 24))
              {
                v17 -= 16;
                v9 = v19;
              }
            }
            v22 = *(_QWORD *)(v17 - 16);
            if (v22 < v15 || v15 >= v22 && *(_QWORD *)(v17 - 8) < v16)
              break;
            *(_QWORD *)(v10 - 16) = v22;
            *(_QWORD *)(v10 - 8) = *(_QWORD *)(v17 - 8);
            v10 = v17;
            if (v7 < v9)
              goto LABEL_23;
          }
        }
        v17 = v10;
LABEL_23:
        *(_QWORD *)(v17 - 16) = v15;
        *(_QWORD *)(v17 - 8) = v16;
      }
    }
  }
}

void std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = 0;
  v5 = a4 - 2;
  if (a4 < 2)
    v5 = a4 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = a2;
    a2 += 16 * ~v4;
    v8 = 2 * v4;
    v4 = (2 * v4) | 1;
    v9 = v8 + 2;
    if (v9 < a4)
    {
      v10 = *(_QWORD *)(a2 - 16);
      v11 = *(_QWORD *)(a2 - 32);
      if (v10 < v11 || v11 >= v10 && *(_QWORD *)(a2 - 8) < *(_QWORD *)(a2 - 24))
      {
        a2 -= 16;
        v4 = v9;
      }
    }
    *(_QWORD *)(v7 - 16) = *(_QWORD *)(a2 - 16);
    *(_QWORD *)(v7 - 8) = *(_QWORD *)(a2 - 8);
  }
  while (v4 <= v6);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v6 = a6 - 2;
  if (a6 >= 2)
  {
    v7 = v6 >> 1;
    v8 = a2 - 16 * (v6 >> 1);
    v9 = *(_QWORD *)(v8 - 16);
    v10 = *a4;
    if (v9 >= *a4)
    {
      if (v10 < v9)
        return;
      v11 = a4[1];
      if (*(_QWORD *)(v8 - 8) >= v11)
        return;
    }
    else
    {
      v11 = a4[1];
    }
    *a4 = v9;
    a4[1] = *(_QWORD *)(v8 - 8);
    if (v6 >= 2)
    {
      while (1)
      {
        v13 = v7 - 1;
        v7 = (v7 - 1) >> 1;
        v12 = a2 - 16 * v7;
        v14 = *(_QWORD *)(v12 - 16);
        if (v14 >= v10 && (v10 < v14 || *(_QWORD *)(v12 - 8) >= v11))
          break;
        *(_QWORD *)(v8 - 16) = v14;
        *(_QWORD *)(v8 - 8) = *(_QWORD *)(v12 - 8);
        v8 = a2 - 16 * v7;
        if (v13 <= 1)
          goto LABEL_12;
      }
    }
    v12 = v8;
LABEL_12:
    *(_QWORD *)(v12 - 16) = v10;
    *(_QWORD *)(v12 - 8) = v11;
  }
}

void turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 297, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF6314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4;
  if (v14 < a4)
  {
    v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)&v19, a2, v15, (uint64_t)v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)&v20, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v8, v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_217EF64DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_217EF64E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  unint64_t *v40;
  unint64_t v41;
  void **v43;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
      {
        switch(*(_BYTE *)(a4 + 12))
        {
          case 2:
            v7 = *(unint64_t **)a4;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              v10 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              if (*((char *)v10 + 31) < 0)
                operator delete((void *)v10[1]);
              v11 = v10;
              v12 = 0x1012C404EF22A49;
              goto LABEL_44;
            }
            break;
          case 3:
            v13 = *(unint64_t **)a4;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              v17 = (void *)v16[1];
              if (v17)
              {
                v16[2] = (unint64_t)v17;
                operator delete(v17);
              }
              v11 = v16;
              v12 = 0x1080C409938AC02;
              goto LABEL_44;
            }
            break;
          case 4:
            v18 = *(unint64_t **)a4;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              v43 = (void **)(v21 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
              goto LABEL_28;
            }
            break;
          case 5:
            v22 = *(unint64_t **)a4;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v21 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              v43 = (void **)(v21 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_28:
              v11 = v21;
              v12 = 0x1020C405E66F15BLL;
              goto LABEL_44;
            }
            break;
          case 8:
            v25 = *(unint64_t **)a4;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
              v11 = v28;
              v29 = -235920773;
              goto LABEL_43;
            }
            break;
          case 9:
            v30 = *(unint64_t **)a4;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = *(unint64_t **)a4;
              if (*(_QWORD *)a4)
              {
                v34 = (void *)v33[6];
                if (v34)
                {
                  v33[7] = (unint64_t)v34;
                  operator delete(v34);
                }
                v35 = (void *)v33[3];
                if (v35)
                {
                  v33[4] = (unint64_t)v35;
                  operator delete(v35);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
                v11 = v33;
                v29 = 2071181815;
LABEL_43:
                v12 = v29 | 0x1030C4000000000;
LABEL_44:
                MEMORY[0x219A19A08](v11, v12);
              }
LABEL_45:
              *(_QWORD *)a4 = 0;
            }
            break;
          default:
            break;
        }
        v36 = *v5;
        *(_QWORD *)(a4 + 5) = *(uint64_t *)((char *)v5 + 5);
        *(_QWORD *)a4 = v36;
        LODWORD(v36) = *((unsigned __int8 *)v5 + 12);
        *(_BYTE *)(a4 + 12) = v36;
        v37 = v36 > 9;
        v38 = (1 << v36) & 0x33C;
        if (!v37 && v38 != 0)
        {
          v40 = *(unint64_t **)a4;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
        }
      }
      v5 += 2;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(char **a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v6 = a2;
  v8 = *a1;
  if (a4 <= (a1[2] - *a1) >> 5)
  {
    result = (uint64_t)a1[1];
    v14 = (result - (uint64_t)v8) >> 5;
    if (v14 >= a4)
    {
      if (a2 == a3)
      {
        v19 = v8;
      }
      else
      {
        v19 = v8;
        do
        {
          std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)v8, v6);
          v6 += 4;
          v8 += 32;
          v19 += 32;
        }
        while (v6 != a3);
        result = (uint64_t)a1[1];
      }
      while ((char *)result != v19)
        result = std::pair<turi::flexible_type,turi::flexible_type>::~pair(result - 32);
      a1[1] = v19;
    }
    else
    {
      v15 = &a2[4 * v14];
      if ((char *)result != v8)
      {
        v16 = 32 * v14;
        do
        {
          result = std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)v8, v6);
          v6 += 4;
          v8 += 32;
          v16 -= 32;
        }
        while (v16);
        v8 = a1[1];
      }
      v17 = v8;
      if (v15 != a3)
      {
        v17 = v8;
        result = (uint64_t)v8;
        do
        {
          v18 = std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100](result, v15);
          v15 += 4;
          result = v18 + 32;
          v17 += 32;
        }
        while (v15 != a3);
      }
      a1[1] = v17;
    }
  }
  else
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)a1);
    if (a4 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = a1[2] - *a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, v11);
    result = (uint64_t)a1[1];
    while (v6 != a3)
    {
      v13 = std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100](result, v6);
      v6 += 4;
      result = v13 + 32;
    }
    a1[1] = (char *)result;
  }
  return result;
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unint64_t *v37;
  unint64_t v38;
  unint64_t **v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  void *v68;
  unint64_t *v69;
  int v70;
  unint64_t *v72;
  unint64_t v73;
  void **v75;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v75 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v75 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v33;
    LODWORD(v33) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(a1 + 12) = v33;
    v34 = v33 > 9;
    v35 = (1 << v33) & 0x33C;
    if (!v34 && v35 != 0)
    {
      v37 = *(unint64_t **)a1;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
    v39 = (unint64_t **)(a1 + 16);
    switch(*(_BYTE *)(a1 + 28))
    {
      case 2:
        v40 = *v39;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v43 = *v39;
          if (!*v39)
            goto LABEL_93;
          if (*((char *)v43 + 31) < 0)
            operator delete((void *)v43[1]);
          v44 = v43;
          v45 = 0x1012C404EF22A49;
          goto LABEL_92;
        }
        break;
      case 3:
        v46 = *v39;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          v49 = *v39;
          if (!*v39)
            goto LABEL_93;
          v50 = (void *)v49[1];
          if (v50)
          {
            v49[2] = (unint64_t)v50;
            operator delete(v50);
          }
          v44 = v49;
          v45 = 0x1080C409938AC02;
          goto LABEL_92;
        }
        break;
      case 4:
        v51 = *v39;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          v54 = *v39;
          if (!*v39)
            goto LABEL_93;
          v75 = (void **)(v54 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
          goto LABEL_76;
        }
        break;
      case 5:
        v55 = *v39;
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          v54 = *v39;
          if (!*v39)
            goto LABEL_93;
          v75 = (void **)(v54 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
LABEL_76:
          v44 = v54;
          v45 = 0x1020C405E66F15BLL;
          goto LABEL_92;
        }
        break;
      case 8:
        v58 = *v39;
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (!v60)
        {
          v61 = *v39;
          if (!*v39)
            goto LABEL_93;
          boost::detail::shared_count::~shared_count((unsigned int **)v61 + 2);
          v44 = v61;
          v62 = -235920773;
          goto LABEL_91;
        }
        break;
      case 9:
        v63 = *v39;
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          v66 = *v39;
          if (*v39)
          {
            v67 = (void *)v66[6];
            if (v67)
            {
              v66[7] = (unint64_t)v67;
              operator delete(v67);
            }
            v68 = (void *)v66[3];
            if (v68)
            {
              v66[4] = (unint64_t)v68;
              operator delete(v68);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v66 + 1));
            v44 = v66;
            v62 = 2071181815;
LABEL_91:
            v45 = v62 | 0x1030C4000000000;
LABEL_92:
            MEMORY[0x219A19A08](v44, v45);
          }
LABEL_93:
          *v39 = 0;
        }
        break;
      default:
        break;
    }
    v69 = (unint64_t *)a2[2];
    *(_QWORD *)(a1 + 21) = *(uint64_t *)((char *)a2 + 21);
    *v39 = v69;
    LODWORD(v69) = *((unsigned __int8 *)a2 + 28);
    *(_BYTE *)(a1 + 28) = (_BYTE)v69;
    v34 = v69 > 9;
    v70 = (1 << (char)v69) & 0x33C;
    if (!v34 && v70 != 0)
    {
      v72 = *v39;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 + 1, v72));
    }
  }
  return a1;
}

{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  unint64_t **v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unsigned int v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  void *v62;
  void *v63;
  unint64_t *v64;
  void **v66;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v66 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v66);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v66 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v66);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
    v34 = (unint64_t **)(a1 + 16);
    switch(*(_BYTE *)(a1 + 28))
    {
      case 2:
        v35 = *v34;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = *v34;
          if (!*v34)
            goto LABEL_87;
          if (*((char *)v38 + 31) < 0)
            operator delete((void *)v38[1]);
          v39 = v38;
          v40 = 0x1012C404EF22A49;
          goto LABEL_86;
        }
        break;
      case 3:
        v41 = *v34;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          v44 = *v34;
          if (!*v34)
            goto LABEL_87;
          v45 = (void *)v44[1];
          if (v45)
          {
            v44[2] = (unint64_t)v45;
            operator delete(v45);
          }
          v39 = v44;
          v40 = 0x1080C409938AC02;
          goto LABEL_86;
        }
        break;
      case 4:
        v46 = *v34;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          v49 = *v34;
          if (!*v34)
            goto LABEL_87;
          v66 = (void **)(v49 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v66);
          goto LABEL_70;
        }
        break;
      case 5:
        v50 = *v34;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          v49 = *v34;
          if (!*v34)
            goto LABEL_87;
          v66 = (void **)(v49 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v66);
LABEL_70:
          v39 = v49;
          v40 = 0x1020C405E66F15BLL;
          goto LABEL_86;
        }
        break;
      case 8:
        v53 = *v34;
        do
        {
          v54 = __ldaxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (!v55)
        {
          v56 = *v34;
          if (!*v34)
            goto LABEL_87;
          boost::detail::shared_count::~shared_count((unsigned int **)v56 + 2);
          v39 = v56;
          v57 = -235920773;
          goto LABEL_85;
        }
        break;
      case 9:
        v58 = *v34;
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (!v60)
        {
          v61 = *v34;
          if (*v34)
          {
            v62 = (void *)v61[6];
            if (v62)
            {
              v61[7] = (unint64_t)v62;
              operator delete(v62);
            }
            v63 = (void *)v61[3];
            if (v63)
            {
              v61[4] = (unint64_t)v63;
              operator delete(v63);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v61 + 1));
            v39 = v61;
            v57 = 2071181815;
LABEL_85:
            v40 = v57 | 0x1030C4000000000;
LABEL_86:
            MEMORY[0x219A19A08](v39, v40);
          }
LABEL_87:
          *v34 = 0;
        }
        break;
      default:
        break;
    }
    v64 = (unint64_t *)a2[2];
    *(_QWORD *)(a1 + 21) = *(uint64_t *)((char *)a2 + 21);
    *v34 = v64;
    *(_BYTE *)(a1 + 28) = *((_BYTE *)a2 + 28);
    *((_BYTE *)a2 + 28) = 0;
  }
  return a1;
}

uint64_t *std::unique_ptr<turi::unity_server_options>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    std::default_delete<turi::unity_server_options>::operator()[abi:ne180100]((uint64_t)a1, v2);
  return a1;
}

void std::default_delete<turi::unity_server_options>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x219A19A08);
  }
}

_QWORD *std::function<void ()(int,char const*,unsigned long)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(int,char const*,unsigned long)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(int,char const*,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_217EF700C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_217EF707C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

uint64_t std::string::compare[abi:ne180100](const void **a1, _BYTE *a2)
{
  char v2;
  size_t v3;
  const void **v4;
  size_t v5;
  size_t v6;
  uint64_t result;
  unsigned int v8;

  v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    v4 = a1;
    a1 = (const void **)*a1;
    v3 = (size_t)v4[1];
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 >= 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  if (v2 < 0)
    a2 = *(_BYTE **)a2;
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  LODWORD(result) = memcmp(a1, a2, v6);
  if (v3 < v5)
    v8 = -1;
  else
    v8 = v5 < v3;
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

uint64_t turi::flexible_type::flexible_type<std::string>(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  turi::flexible_type::operator=<std::string>((uint64_t *)a1, a2);
  return a1;
}

void sub_217EF7198(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op,std::less<std::string>,std::allocator<std::pair<std::string const,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  const void **v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14[2];
  char v15;

  qword_254FEDDA0 = 0;
  qword_254FEDD98 = 0;
  turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map = (uint64_t)&qword_254FEDD98;
  if (a2)
  {
    v2 = result;
    v3 = &result[4 * a2];
    do
    {
      v5 = &qword_254FEDD98;
      v4 = qword_254FEDD98;
      if ((uint64_t *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map == &qword_254FEDD98)
        goto LABEL_10;
      if (qword_254FEDD98)
      {
        do
        {
          v5 = (uint64_t *)v4;
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4);
      }
      else
      {
        v6 = &qword_254FEDD98;
        do
        {
          v5 = (uint64_t *)v6[2];
          v7 = *v5 == (_QWORD)v6;
          v6 = v5;
        }
        while (v7);
      }
      result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDDA0, (const void **)v5 + 4, (const void **)v2);
      v4 = qword_254FEDD98;
      if ((_DWORD)result)
      {
LABEL_10:
        if (!v4)
          goto LABEL_22;
        v8 = v5 + 1;
      }
      else
      {
        if (!qword_254FEDD98)
        {
LABEL_22:
          v5 = &qword_254FEDD98;
          v8 = &qword_254FEDD98;
LABEL_23:
          v10 = (char *)operator new(0x40uLL);
          v14[0] = (uint64_t)v10;
          v14[1] = (uint64_t)&qword_254FEDD98;
          v15 = 0;
          v11 = (std::string *)(v10 + 32);
          if (*((char *)v2 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)*v2, v2[1]);
            v13 = (uint64_t *)v14[0];
          }
          else
          {
            v12 = *(_OWORD *)v2;
            *((_QWORD *)v10 + 6) = v2[2];
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
            v13 = (uint64_t *)v10;
          }
          *((_DWORD *)v10 + 14) = *((_DWORD *)v2 + 6);
          v15 = 1;
          *v13 = 0;
          v13[1] = 0;
          v13[2] = (uint64_t)v5;
          *v8 = (uint64_t)v13;
          if (*(_QWORD *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map)
          {
            turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map = *(_QWORD *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map;
            v13 = (uint64_t *)*v8;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_254FEDD98, v13);
          ++qword_254FEDDA0;
          v14[0] = 0;
          result = std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100](v14);
          goto LABEL_29;
        }
        v8 = &qword_254FEDD98;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t *)v4;
            v9 = (const void **)(v4 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDDA0, (const void **)v2, (const void **)(v4 + 32)))break;
            v4 = *v5;
            v8 = v5;
            if (!*v5)
              goto LABEL_23;
          }
          result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FEDDA0, v9, (const void **)v2);
          if (!(_DWORD)result)
            break;
          v8 = v5 + 1;
          v4 = v5[1];
          if (!v4)
            goto LABEL_23;
        }
      }
      if (!*v8)
        goto LABEL_23;
LABEL_29:
      v2 += 4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_217EF741C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy((char *)qword_254FEDD98);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op,std::less<std::string>,std::allocator<std::pair<std::string const,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 55) < 0)
      operator delete(*(void **)(v2 + 32));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

BOOL turi::flexible_type_impl::ndarray<double>::same_shape(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 24);
  v4 = v3 - v2;
  v5 = *(_QWORD **)(a2 + 16);
  if (v4 != (uint64_t)(*(_QWORD *)(a2 + 24) - (_QWORD)v5) >> 3)
    return 0;
  if (v3 == v2)
    return 1;
  v6 = v4 <= 1 ? 1 : v3 - v2;
  if (*v2 != *v5)
    return 0;
  v7 = 1;
  do
  {
    v8 = v7;
    if (v6 == v7)
      break;
    v9 = v2[v7];
    v10 = v5[v7++];
  }
  while (v9 == v10);
  return v8 >= v4;
}

BOOL turi::flexible_type_impl::lt_operator::operator()(__n128 a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  int v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  double v36;
  unint64_t *v37;
  uint64_t v38;
  double *v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  const void *v55;
  size_t v56;
  unsigned int v57;
  double v58;
  unint64_t *v59;
  uint64_t v60;
  double *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  double v73;
  const void *v74;
  size_t v75;
  size_t v76;
  const void *v77;
  size_t v78;
  const void *v79;
  size_t v80;
  int v81;
  BOOL v82;
  char v84;
  char v85;

  v8 = *a3;
  if (a3[1] == *a3)
  {
    v68 = 0;
    return (unint64_t)v68 < a4[1] - *a4;
  }
  else
  {
    v10 = 0;
LABEL_3:
    if (v10 < (uint64_t)(a4[1] - *a4) >> 4)
    {
      v11 = *a4 + 16 * v10;
      v12 = (uint64_t *)(v8 + 16 * v10);
      switch(*(_BYTE *)(v11 + 12))
      {
        case 0:
          switch(*((_BYTE *)v12 + 12))
          {
            case 0:
              if (*v12 > *(_QWORD *)v11)
                return 0;
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v12;
              v69 = (double)*(uint64_t *)v11;
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              if (*(_QWORD *)v11 < *v12 << 8 >> 8)
                return 0;
              goto LABEL_64;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*((_BYTE *)v12 + 12))
          {
            case 0:
              a1.n128_u64[0] = *(_QWORD *)v11;
              if (*(double *)v11 < (double)*v12)
                return 0;
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v12;
              v69 = *(double *)v11;
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              v69 = *(double *)v11;
              a1.n128_f64[0] = (double)*((int *)v12 + 2) / 1000000.0 + (double)(*v12 << 8 >> 8);
LABEL_114:
              if (a1.n128_f64[0] > v69)
                return 0;
              goto LABEL_64;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v13 = *((unsigned __int8 *)v12 + 12);
          if (v13 - 3 < 7 || v13 < 2)
            goto LABEL_63;
          if (v13 != 2)
            turi::apply_binary_op_ff();
          v15 = v6;
          v16 = v5;
          v17 = v4;
          v18 = *(double *)v11;
          v19 = *v12;
          v22 = *(const void **)(v19 + 8);
          v20 = v19 + 8;
          v21 = v22;
          v23 = *(char *)(v20 + 23);
          v26 = *(const void **)(*(_QWORD *)&v18 + 8);
          v24 = *(_QWORD *)&v18 + 8;
          v25 = v26;
          v27 = *(char *)(v24 + 23);
          if (v27 >= 0)
            v28 = *(unsigned __int8 *)(v24 + 23);
          else
            v28 = *(_QWORD *)(v24 + 8);
          if (v27 >= 0)
            v29 = (const void *)v24;
          else
            v29 = v25;
          if (v23 >= 0)
            v30 = *(unsigned __int8 *)(v20 + 23);
          else
            v30 = *(_QWORD *)(v20 + 8);
          if (v23 >= 0)
            v31 = (const void *)v20;
          else
            v31 = v21;
          if (v30 >= v28)
            v32 = v28;
          else
            v32 = v30;
          v33 = memcmp(v29, v31, v32);
          v34 = v28 < v30;
          if (v33)
            v34 = v33 < 0;
          v4 = v17;
          v5 = v16;
          v6 = v15;
          if (v34)
            return 0;
          goto LABEL_64;
        case 3:
          v35 = *((unsigned __int8 *)v12 + 12);
          if (v35 > 9)
            turi::apply_binary_op_ff();
          if (v35 != 3)
            goto LABEL_63;
          v36 = *(double *)v11;
          v37 = *(unint64_t **)(*v12 + 8);
          v38 = *(_QWORD *)(*v12 + 16);
          v39 = *(double **)(*(_QWORD *)&v36 + 8);
          v40 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v36 + 16) - (_QWORD)v39) >> 3;
          v42 = v38 - (_QWORD)v37;
          v41 = v42 == 0;
          v43 = v42 >> 3;
          if (v41)
            goto LABEL_47;
          if (v43 <= 1)
            v44 = 1;
          else
            v44 = v43;
          v45 = v40;
          break;
        case 4:
          v46 = *((unsigned __int8 *)v12 + 12);
          if (v46 > 9)
            turi::apply_binary_op_ff();
          if (v46 != 4)
            goto LABEL_63;
          if (turi::flexible_type_impl::gt_operator::operator()(a1, (uint64_t)&v85, (uint64_t *)(*v12 + 8), (_QWORD *)(*(_QWORD *)v11 + 8)))
          {
            return 0;
          }
          goto LABEL_64;
        case 5:
          if (*((unsigned __int8 *)v12 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_63;
        case 6:
          switch(*((_BYTE *)v12 + 12))
          {
            case 0:
              if (*v12 > (uint64_t)(*(_QWORD *)v11 << 8) >> 8)
                return 0;
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v12;
              if ((double)*(int *)(v11 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v11 << 8) >> 8) < *(double *)v12)
                return 0;
              goto LABEL_64;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              v70 = *v12 << 8 >> 8;
              if (v70 > (uint64_t)(*(_QWORD *)v11 << 8) >> 8
                || v70 == (uint64_t)(*(_QWORD *)v11 << 8) >> 8 && *((_DWORD *)v12 + 2) > *(_DWORD *)(v11 + 8))
              {
                return 0;
              }
              goto LABEL_64;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          if (*((unsigned __int8 *)v12 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_63;
        case 8:
          if (*((unsigned __int8 *)v12 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_63;
        case 9:
          if (*((unsigned __int8 *)v12 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
LABEL_63:
          turi::flexible_type_fail(0);
          goto LABEL_64;
        default:
          turi::apply_binary_op_ff();
      }
      while (v45)
      {
        a1.n128_u64[0] = *v37;
        if (*(double *)v37 > *v39)
          break;
        if (*(double *)v37 < *v39)
          goto LABEL_64;
        --v45;
        ++v37;
        ++v39;
        if (!--v44)
        {
LABEL_47:
          if (v43 > v40)
            return 0;
LABEL_64:
          v47 = *a4 + 16 * v10;
          v48 = *a3 + 16 * v10;
          switch(*(_BYTE *)(v47 + 12))
          {
            case 0:
              switch(*(_BYTE *)(v48 + 12))
              {
                case 0:
                  if (*(_QWORD *)v48 < *(_QWORD *)v47)
                    return 1;
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(_QWORD *)v48;
                  v71 = (double)*(uint64_t *)v47;
                  goto LABEL_127;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  if (*(_QWORD *)v47 > (uint64_t)(*(_QWORD *)v48 << 8) >> 8)
                    return 1;
                  goto LABEL_107;
                default:
                  turi::apply_binary_op_ff();
              }
            case 1:
              switch(*(_BYTE *)(v48 + 12))
              {
                case 0:
                  a1.n128_u64[0] = *(_QWORD *)v47;
                  if (*(double *)v47 > (double)*(uint64_t *)v48)
                    return 1;
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(_QWORD *)v48;
                  v71 = *(double *)v47;
                  goto LABEL_127;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  v71 = *(double *)v47;
                  a1.n128_f64[0] = (double)*(int *)(v48 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v48 << 8) >> 8);
LABEL_127:
                  if (a1.n128_f64[0] < v71)
                    return 1;
                  goto LABEL_107;
                default:
                  turi::apply_binary_op_ff();
              }
            case 2:
              v49 = *(unsigned __int8 *)(v48 + 12);
              if (v49 - 3 < 7 || v49 < 2)
                goto LABEL_106;
              if (v49 != 2)
                turi::apply_binary_op_ff();
              v51 = v6;
              v52 = v4;
              v53 = *(_QWORD *)v48;
              v54 = v5;
              if (*(char *)(v53 + 31) < 0)
              {
                v55 = *(const void **)(v53 + 8);
                v56 = *(_QWORD *)(v53 + 16);
              }
              else
              {
                v55 = (const void *)(v53 + 8);
                v56 = *(unsigned __int8 *)(v53 + 31);
              }
              v73 = *(double *)v47;
              v74 = (const void *)(*(_QWORD *)&v73 + 8);
              v75 = *(unsigned __int8 *)(*(_QWORD *)&v73 + 31);
              v77 = *(const void **)(*(_QWORD *)&v73 + 8);
              v76 = *(_QWORD *)(*(_QWORD *)&v73 + 16);
              if ((v75 & 0x80u) == 0)
                v78 = v75;
              else
                v78 = v76;
              if ((v75 & 0x80u) == 0)
                v79 = v74;
              else
                v79 = v77;
              if (v78 >= v56)
                v80 = v56;
              else
                v80 = v78;
              v81 = memcmp(v55, v79, v80);
              v82 = v56 < v78;
              if (v81)
                v82 = v81 < 0;
              v4 = v52;
              v5 = v54;
              v6 = v51;
              if (v82)
                return 1;
              goto LABEL_107;
            case 3:
              v57 = *(unsigned __int8 *)(v48 + 12);
              if (v57 > 9)
                turi::apply_binary_op_ff();
              if (v57 != 3)
                goto LABEL_106;
              v58 = *(double *)v47;
              v59 = *(unint64_t **)(*(_QWORD *)v48 + 8);
              v60 = *(_QWORD *)(*(_QWORD *)v48 + 16);
              v61 = *(double **)(*(_QWORD *)&v58 + 8);
              v62 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v58 + 16) - (_QWORD)v61) >> 3;
              v63 = v60 - (_QWORD)v59;
              v41 = v63 == 0;
              v64 = v63 >> 3;
              if (v41)
                goto LABEL_90;
              if (v64 <= 1)
                v65 = 1;
              else
                v65 = v64;
              v66 = v62;
              break;
            case 4:
              v67 = *(unsigned __int8 *)(v48 + 12);
              if (v67 > 9)
                turi::apply_binary_op_ff();
              if (v67 != 4)
                goto LABEL_106;
              if ((turi::flexible_type_impl::lt_operator::operator()(&v84, *(_QWORD *)v48 + 8, *(_QWORD *)v47 + 8, a1) & 1) != 0)return 1;
              goto LABEL_107;
            case 5:
              if (*(unsigned __int8 *)(v48 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_106;
            case 6:
              switch(*(_BYTE *)(v48 + 12))
              {
                case 0:
                  if (*(_QWORD *)v48 < (uint64_t)(*(_QWORD *)v47 << 8) >> 8)
                    return 1;
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(_QWORD *)v48;
                  if ((double)*(int *)(v47 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v47 << 8) >> 8) > *(double *)v48)
                    return 1;
                  goto LABEL_107;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  v72 = (uint64_t)(*(_QWORD *)v48 << 8) >> 8;
                  if (v72 < (uint64_t)(*(_QWORD *)v47 << 8) >> 8
                    || v72 == (uint64_t)(*(_QWORD *)v47 << 8) >> 8 && *(_DWORD *)(v48 + 8) < *(_DWORD *)(v47 + 8))
                  {
                    return 1;
                  }
                  goto LABEL_107;
                default:
                  turi::apply_binary_op_ff();
              }
            case 7:
              if (*(unsigned __int8 *)(v48 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_106;
            case 8:
              if (*(unsigned __int8 *)(v48 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_106;
            case 9:
              if (*(unsigned __int8 *)(v48 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
LABEL_106:
              turi::flexible_type_fail(0);
              goto LABEL_107;
            default:
              turi::apply_binary_op_ff();
          }
          while (v66)
          {
            a1.n128_u64[0] = *v59;
            if (*(double *)v59 > *v61)
              break;
            if (*(double *)v59 < *v61)
              return 1;
            --v66;
            ++v59;
            ++v61;
            if (!--v65)
            {
LABEL_90:
              if (v64 < v62)
                return 1;
              break;
            }
          }
LABEL_107:
          ++v10;
          v8 = *a3;
          v68 = a3[1] - *a3;
          if (v10 < v68 >> 4)
            goto LABEL_3;
          return (unint64_t)v68 < a4[1] - *a4;
        }
      }
    }
    return 0;
  }
}

BOOL turi::flexible_type_impl::gt_operator::operator()(__n128 a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  int v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  double v36;
  unint64_t *v37;
  uint64_t v38;
  double *v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  const void *v55;
  size_t v56;
  unsigned int v57;
  double v58;
  unint64_t *v59;
  uint64_t v60;
  double *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  double v73;
  const void *v74;
  size_t v75;
  size_t v76;
  const void *v77;
  size_t v78;
  const void *v79;
  size_t v80;
  int v81;
  BOOL v82;
  char v84;
  char v85;

  v8 = *a3;
  if (a3[1] == *a3)
  {
    v68 = 0;
    return (unint64_t)v68 > a4[1] - *a4;
  }
  else
  {
    v10 = 0;
LABEL_3:
    if (v10 < (uint64_t)(a4[1] - *a4) >> 4)
    {
      v11 = *a4 + 16 * v10;
      v12 = (uint64_t *)(v8 + 16 * v10);
      switch(*(_BYTE *)(v11 + 12))
      {
        case 0:
          switch(*((_BYTE *)v12 + 12))
          {
            case 0:
              if (*v12 > *(_QWORD *)v11)
                return 1;
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v12;
              v69 = (double)*(uint64_t *)v11;
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              if (*(_QWORD *)v11 < *v12 << 8 >> 8)
                return 1;
              goto LABEL_64;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*((_BYTE *)v12 + 12))
          {
            case 0:
              a1.n128_u64[0] = *(_QWORD *)v11;
              if (*(double *)v11 < (double)*v12)
                return 1;
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v12;
              v69 = *(double *)v11;
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              v69 = *(double *)v11;
              a1.n128_f64[0] = (double)*((int *)v12 + 2) / 1000000.0 + (double)(*v12 << 8 >> 8);
LABEL_114:
              if (a1.n128_f64[0] > v69)
                return 1;
              goto LABEL_64;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v13 = *((unsigned __int8 *)v12 + 12);
          if (v13 - 3 < 7 || v13 < 2)
            goto LABEL_63;
          if (v13 != 2)
            turi::apply_binary_op_ff();
          v15 = v6;
          v16 = v5;
          v17 = v4;
          v18 = *(double *)v11;
          v19 = *v12;
          v22 = *(const void **)(v19 + 8);
          v20 = v19 + 8;
          v21 = v22;
          v23 = *(char *)(v20 + 23);
          v26 = *(const void **)(*(_QWORD *)&v18 + 8);
          v24 = *(_QWORD *)&v18 + 8;
          v25 = v26;
          v27 = *(char *)(v24 + 23);
          if (v27 >= 0)
            v28 = *(unsigned __int8 *)(v24 + 23);
          else
            v28 = *(_QWORD *)(v24 + 8);
          if (v27 >= 0)
            v29 = (const void *)v24;
          else
            v29 = v25;
          if (v23 >= 0)
            v30 = *(unsigned __int8 *)(v20 + 23);
          else
            v30 = *(_QWORD *)(v20 + 8);
          if (v23 >= 0)
            v31 = (const void *)v20;
          else
            v31 = v21;
          if (v30 >= v28)
            v32 = v28;
          else
            v32 = v30;
          v33 = memcmp(v29, v31, v32);
          v34 = v28 < v30;
          if (v33)
            v34 = v33 < 0;
          v4 = v17;
          v5 = v16;
          v6 = v15;
          if (v34)
            return 1;
          goto LABEL_64;
        case 3:
          v35 = *((unsigned __int8 *)v12 + 12);
          if (v35 > 9)
            turi::apply_binary_op_ff();
          if (v35 != 3)
            goto LABEL_63;
          v36 = *(double *)v11;
          v37 = *(unint64_t **)(*v12 + 8);
          v38 = *(_QWORD *)(*v12 + 16);
          v39 = *(double **)(*(_QWORD *)&v36 + 8);
          v40 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v36 + 16) - (_QWORD)v39) >> 3;
          v42 = v38 - (_QWORD)v37;
          v41 = v42 == 0;
          v43 = v42 >> 3;
          if (v41)
            goto LABEL_47;
          if (v43 <= 1)
            v44 = 1;
          else
            v44 = v43;
          v45 = v40;
          break;
        case 4:
          v46 = *((unsigned __int8 *)v12 + 12);
          if (v46 > 9)
            turi::apply_binary_op_ff();
          if (v46 != 4)
            goto LABEL_63;
          if ((turi::flexible_type_impl::gt_operator::operator()(&v85, *v12 + 8, *(_QWORD *)v11 + 8) & 1) != 0)
            return 1;
          goto LABEL_64;
        case 5:
          if (*((unsigned __int8 *)v12 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_63;
        case 6:
          switch(*((_BYTE *)v12 + 12))
          {
            case 0:
              if (*v12 > (uint64_t)(*(_QWORD *)v11 << 8) >> 8)
                return 1;
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v12;
              if ((double)*(int *)(v11 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v11 << 8) >> 8) < *(double *)v12)
                return 1;
              goto LABEL_64;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              v70 = *v12 << 8 >> 8;
              if (v70 > (uint64_t)(*(_QWORD *)v11 << 8) >> 8
                || v70 == (uint64_t)(*(_QWORD *)v11 << 8) >> 8 && *((_DWORD *)v12 + 2) > *(_DWORD *)(v11 + 8))
              {
                return 1;
              }
              goto LABEL_64;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          if (*((unsigned __int8 *)v12 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_63;
        case 8:
          if (*((unsigned __int8 *)v12 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          goto LABEL_63;
        case 9:
          if (*((unsigned __int8 *)v12 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
LABEL_63:
          turi::flexible_type_fail(0);
          goto LABEL_64;
        default:
          turi::apply_binary_op_ff();
      }
      while (v45)
      {
        a1.n128_u64[0] = *v37;
        if (*(double *)v37 > *v39)
          break;
        if (*(double *)v37 < *v39)
          goto LABEL_64;
        --v45;
        ++v37;
        ++v39;
        if (!--v44)
        {
LABEL_47:
          if (v43 > v40)
            return 1;
LABEL_64:
          v47 = *a4 + 16 * v10;
          v48 = *a3 + 16 * v10;
          switch(*(_BYTE *)(v47 + 12))
          {
            case 0:
              switch(*(_BYTE *)(v48 + 12))
              {
                case 0:
                  if (*(_QWORD *)v48 < *(_QWORD *)v47)
                    return 0;
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(_QWORD *)v48;
                  v71 = (double)*(uint64_t *)v47;
                  goto LABEL_127;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  if (*(_QWORD *)v47 > (uint64_t)(*(_QWORD *)v48 << 8) >> 8)
                    return 0;
                  goto LABEL_107;
                default:
                  turi::apply_binary_op_ff();
              }
            case 1:
              switch(*(_BYTE *)(v48 + 12))
              {
                case 0:
                  a1.n128_u64[0] = *(_QWORD *)v47;
                  if (*(double *)v47 > (double)*(uint64_t *)v48)
                    return 0;
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(_QWORD *)v48;
                  v71 = *(double *)v47;
                  goto LABEL_127;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  v71 = *(double *)v47;
                  a1.n128_f64[0] = (double)*(int *)(v48 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v48 << 8) >> 8);
LABEL_127:
                  if (a1.n128_f64[0] < v71)
                    return 0;
                  goto LABEL_107;
                default:
                  turi::apply_binary_op_ff();
              }
            case 2:
              v49 = *(unsigned __int8 *)(v48 + 12);
              if (v49 - 3 < 7 || v49 < 2)
                goto LABEL_106;
              if (v49 != 2)
                turi::apply_binary_op_ff();
              v51 = v6;
              v52 = v4;
              v53 = *(_QWORD *)v48;
              v54 = v5;
              if (*(char *)(v53 + 31) < 0)
              {
                v55 = *(const void **)(v53 + 8);
                v56 = *(_QWORD *)(v53 + 16);
              }
              else
              {
                v55 = (const void *)(v53 + 8);
                v56 = *(unsigned __int8 *)(v53 + 31);
              }
              v73 = *(double *)v47;
              v74 = (const void *)(*(_QWORD *)&v73 + 8);
              v75 = *(unsigned __int8 *)(*(_QWORD *)&v73 + 31);
              v77 = *(const void **)(*(_QWORD *)&v73 + 8);
              v76 = *(_QWORD *)(*(_QWORD *)&v73 + 16);
              if ((v75 & 0x80u) == 0)
                v78 = v75;
              else
                v78 = v76;
              if ((v75 & 0x80u) == 0)
                v79 = v74;
              else
                v79 = v77;
              if (v78 >= v56)
                v80 = v56;
              else
                v80 = v78;
              v81 = memcmp(v55, v79, v80);
              v82 = v56 < v78;
              if (v81)
                v82 = v81 < 0;
              v4 = v52;
              v5 = v54;
              v6 = v51;
              if (v82)
                return 0;
              goto LABEL_107;
            case 3:
              v57 = *(unsigned __int8 *)(v48 + 12);
              if (v57 > 9)
                turi::apply_binary_op_ff();
              if (v57 != 3)
                goto LABEL_106;
              v58 = *(double *)v47;
              v59 = *(unint64_t **)(*(_QWORD *)v48 + 8);
              v60 = *(_QWORD *)(*(_QWORD *)v48 + 16);
              v61 = *(double **)(*(_QWORD *)&v58 + 8);
              v62 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v58 + 16) - (_QWORD)v61) >> 3;
              v63 = v60 - (_QWORD)v59;
              v41 = v63 == 0;
              v64 = v63 >> 3;
              if (v41)
                goto LABEL_90;
              if (v64 <= 1)
                v65 = 1;
              else
                v65 = v64;
              v66 = v62;
              break;
            case 4:
              v67 = *(unsigned __int8 *)(v48 + 12);
              if (v67 > 9)
                turi::apply_binary_op_ff();
              if (v67 != 4)
                goto LABEL_106;
              if ((turi::flexible_type_impl::lt_operator::operator()(&v84, *(_QWORD *)v48 + 8, *(_QWORD *)v47 + 8, a1) & 1) != 0)return 0;
              goto LABEL_107;
            case 5:
              if (*(unsigned __int8 *)(v48 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_106;
            case 6:
              switch(*(_BYTE *)(v48 + 12))
              {
                case 0:
                  if (*(_QWORD *)v48 < (uint64_t)(*(_QWORD *)v47 << 8) >> 8)
                    return 0;
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(_QWORD *)v48;
                  if ((double)*(int *)(v47 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v47 << 8) >> 8) > *(double *)v48)
                    return 0;
                  goto LABEL_107;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  v72 = (uint64_t)(*(_QWORD *)v48 << 8) >> 8;
                  if (v72 < (uint64_t)(*(_QWORD *)v47 << 8) >> 8
                    || v72 == (uint64_t)(*(_QWORD *)v47 << 8) >> 8 && *(_DWORD *)(v48 + 8) < *(_DWORD *)(v47 + 8))
                  {
                    return 0;
                  }
                  goto LABEL_107;
                default:
                  turi::apply_binary_op_ff();
              }
            case 7:
              if (*(unsigned __int8 *)(v48 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_106;
            case 8:
              if (*(unsigned __int8 *)(v48 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_106;
            case 9:
              if (*(unsigned __int8 *)(v48 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
LABEL_106:
              turi::flexible_type_fail(0);
              goto LABEL_107;
            default:
              turi::apply_binary_op_ff();
          }
          while (v66)
          {
            a1.n128_u64[0] = *v59;
            if (*(double *)v59 > *v61)
              break;
            if (*(double *)v59 < *v61)
              return 0;
            --v66;
            ++v59;
            ++v61;
            if (!--v65)
            {
LABEL_90:
              if (v64 < v62)
                return 0;
              break;
            }
          }
LABEL_107:
          ++v10;
          v8 = *a3;
          v68 = a3[1] - *a3;
          if (v10 < v68 >> 4)
            goto LABEL_3;
          return (unint64_t)v68 > a4[1] - *a4;
        }
      }
    }
    return 1;
  }
}

void turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 566, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF8594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 589, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF8714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 612, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF8894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 636, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF8A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::operator%=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 659, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator%=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EF8B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_217EF8DB4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *v18[2];
  char *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v21 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[16 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v19 = v11;
  v20 = &v10[16 * v9];
  *(_QWORD *)v11 = 0;
  *((_DWORD *)v11 + 2) = 0;
  v11[12] = 0;
  if (v11 != a2)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)(v11 + 5) = *(_QWORD *)(a2 + 5);
    *(_QWORD *)v11 = v12;
    v13 = a2[12];
    v11[12] = v13;
    if (v13 <= 9 && ((1 << v13) & 0x33C) != 0)
    {
      v14 = *(unint64_t **)v11;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      a2 = v19;
    }
    else
    {
      a2 = &v10[16 * v4];
    }
  }
  v19 = a2 + 16;
  std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<turi::flexible_type>::~__split_buffer(v18);
  return v16;
}

void sub_217EF8F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::flexible_type>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 16) = 0;
      *(_DWORD *)(v7 - 8) = 0;
      *(_BYTE *)(v7 - 4) = 0;
      v8 = *(_QWORD *)(a3 - 16);
      a3 -= 16;
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 + 5);
      *(_QWORD *)(v7 - 16) = v8;
      *(_BYTE *)(v7 - 4) = *(_BYTE *)(a3 + 12);
      *(_BYTE *)(a3 + 12) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 16;
      *((_QWORD *)&v14 + 1) -= 16;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v3, v1);
      v1 += 16;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::flexible_type>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::flexible_type>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::flexible_type>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 16;
    std::allocator<turi::flexible_type>::destroy[abi:ne180100](v4, i - 16);
  }
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void,void>(uint64_t a1, uint64_t a2)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  if (a2 != (uint64_t *)result)
  {
    v3 = *a2;
    *(_QWORD *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)result = v3;
    LODWORD(v3) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 12) = v3;
    v4 = v3 > 9;
    v5 = (1 << v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *(unint64_t **)result;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  *(_QWORD *)(result + 16) = 0;
  v9 = (unint64_t **)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  if (result + 16 != a3)
  {
    v10 = *(unint64_t **)a3;
    *(_QWORD *)(result + 21) = *(_QWORD *)(a3 + 5);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a3 + 12);
    *(_BYTE *)(result + 28) = v11;
    if (v11 <= 9 && ((1 << v11) & 0x33C) != 0)
    {
      v12 = *v9;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  return result;
}

void sub_217EF94CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v8 + 14, (uint64_t *)v9 + 7);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_multi<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_217EF96D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_multi<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_217EF9794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void,void>(*(_QWORD *)a1, (uint64_t)__p + 32);
  if (__p)
    operator delete(__p);
}

_OWORD *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x88uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_DWORD *)v7 + 18) = 0;
    *((_BYTE *)v7 + 76) = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919638;
  return result;
}

void std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919638;
}

uint64_t std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::operator()(uint64_t a1, uint64_t a2, char **a3, uint64_t *a4)
{
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  char v7;
  char v9;

  v4 = *a4;
  if (*a4)
  {
    v5 = *a3;
    v6 = (_QWORD *)MEMORY[0x24BEDB318];
    do
    {
      v7 = *v5++;
      v9 = v7;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
      --v4;
    }
    while (v4);
  }
  return std::ostream::flush();
}

uint64_t std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D9196C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D9196C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::operator()(uint64_t a1, unsigned int *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::target_type()
{
}

uint64_t turi::variant_converter<turi::flexible_type,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void **v38[3];
  uint64_t v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  memset(v39, 0, 13);
  v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((uint64_t *)v3 != v39)
  {
    v4 = *(_QWORD *)v3;
    *(uint64_t *)((char *)v39 + 5) = *(_QWORD *)(v3 + 5);
    v39[0] = v4;
    BYTE4(v39[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v39[1]) <= 9u && ((1 << SBYTE4(v39[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v39[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  result = turi::flexible_type_internals::ft_converter<1>::get(a2, v39);
  switch(BYTE4(v39[1]))
  {
    case 2:
      v9 = (unint64_t *)v39[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v39[0];
        if (v39[0])
        {
          if (*(char *)(v39[0] + 31) < 0)
            operator delete(*(void **)(v39[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v39[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v39[0];
        if (v39[0])
        {
          v30 = *(void **)(v39[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v39[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v39[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v38);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v39[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v38);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v39[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v39[0];
        if (v39[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v39[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v39[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v39[0];
        if (v39[0])
        {
          v23 = *(void **)(v39[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v39[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          result = MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_217EF9D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::string::value_type *__p, std::string::size_type a10, int a11, __int16 a12, char a13, unsigned __int8 a14, std::string *a15, __int128 a16, __int128 a17, std::string::size_type a18)
{
  int *v18;
  const std::string::value_type *p_p;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;

  if (!a2)
    _Unwind_Resume(a1);
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&a15, "Expecting a flexible_type. Got a ");
  turi::get_variant_which_name((turi *)(*v18 ^ (*v18 >> 31)), &__p);
  if ((a14 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = __p;
  if ((a14 & 0x80u) == 0)
    v20 = a14;
  else
    v20 = a10;
  v21 = std::string::append((std::string *)&a15, p_p, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  a18 = v21->__r_.__value_.__r.__words[2];
  a17 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((char)a14 < 0)
    operator delete(__p);
  if (SHIBYTE(a16) < 0)
    operator delete(a15);
  a15 = (std::string *)&a17;
  turi::variant_converter<std::string,void>::get(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&)::{lambda(void)#1}::operator()((const std::string **)&a15);
}

void sub_217EF9DC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _BYTE *v26;
  uint64_t v27;

  if (a26 < 0)
    operator delete(__p);
  __cxa_end_catch();
  turi::variant_converter<turi::flexible_type,void>::get(v26, (unint64_t **)(v27 - 56));
  JUMPOUT(0x217EF9D24);
}

void sub_217EF9E20()
{
  JUMPOUT(0x217EF9D24);
}

void sub_217EF9E28(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x217EF9D24);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_217EF9EA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

char *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_217EF9F1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long &,void>@<X0>(unint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<double>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217EF9F7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<double>>,0>(_QWORD *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24D9195E8;
  std::vector<double>::vector(a1 + 3, *a2);
  return a1;
}

void sub_217EF9FCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_217EFA038(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_217EFA0B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_impl::ndarray<double>::at(unsigned long)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_start + elem_index", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_elem->size()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 265, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::flexible_type_impl::ndarray<double>::at(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EFA260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double>&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<std::vector<double> const&,std::allocator<std::vector<double>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_217EFA32C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::at(unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_start + elem_index", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_elem->size()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 256, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::flexible_type_impl::ndarray<double>::at(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217EFA4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(unsigned int *a1, uint64_t *a2)
{
  boost::detail::variant *v3;
  boost::detail::variant *v4;
  uint64_t *v5;
  unsigned int v6;

  v3 = (boost::detail::variant *)*a1;
  v4 = (boost::detail::variant *)*(unsigned int *)a2;
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v5 = a2 + 1;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::assign_storage,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v3, v3 ^ ((int)v3 >> 31), &v5, (std::vector<std::string> *)(a1 + 2));
  }
  else
  {
    v5 = (uint64_t *)a1;
    v6 = v4 ^ ((int)v4 >> 31);
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v6, (uint64_t)&v5, a2 + 1);
  }
}

void *boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::assign_storage,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t **a3, std::vector<std::string> *a4)
{
  void *result;
  _QWORD *v5;

  switch(a2)
  {
    case 0:
      result = boost::detail::variant::assign_storage::internal_visit<turi::flexible_type>(a3, (uint64_t)a4);
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      result = std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a4, *a3);
      break;
    case 2:
      result = boost::detail::variant::assign_storage::internal_visit<turi::dataframe_t>(a3, a4);
      break;
    case 6:
      v5 = (_QWORD *)**a3;
      result = a4->__begin_;
      if (a4->__begin_ != (std::vector<std::string>::pointer)v5)
        result = (void *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>(result, *v5, v5 + 1);
      break;
    case 7:
      result = boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator=((uint64_t *)a4, (uint64_t **)*a3);
      break;
    case 8:
      result = boost::recursive_wrapper<turi::function_closure_info>::assign(&a4->__begin_, **a3);
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return result;
}

uint64_t **boost::detail::variant::assign_storage::internal_visit<turi::flexible_type>(uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unint64_t *v37;
  unint64_t v38;
  void **v39;

  v2 = *result;
  if (*result != (uint64_t *)a2)
  {
    switch(*(_BYTE *)(a2 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v39 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v39);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v39 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v39);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a2;
          if (*(_QWORD *)a2)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            result = (uint64_t **)MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a2 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *v2;
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)v2 + 5);
    *(_QWORD *)a2 = v33;
    LODWORD(v33) = *((unsigned __int8 *)v2 + 12);
    *(_BYTE *)(a2 + 12) = v33;
    v34 = v33 > 9;
    v35 = (1 << v33) & 0x33C;
    if (!v34 && v35 != 0)
    {
      v37 = *(unint64_t **)a2;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
  }
  return result;
}

uint64_t **boost::detail::variant::assign_storage::internal_visit<turi::dataframe_t>(uint64_t **result, std::vector<std::string> *this)
{
  std::vector<std::string> *v2;

  v2 = (std::vector<std::string> *)*result;
  if (*result != (uint64_t *)this)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, v2->__begin_, (__int128 *)v2->__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v2->__end_ - (char *)v2->__begin_) >> 3));
    std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>((uint64_t **)&this[1], v2[1].__begin_->__r_.__value_.__r.__words, &v2[1].__end_);
    return std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>((uint64_t **)&this[2], (__int128 *)v2[2].__begin_, (__int128 *)&v2[2].__end_);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_BYTE *)v8 + 56) = *((_BYTE *)v9 + 56);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_multi<std::pair<std::string const,turi::flex_type_enum> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_217EFAAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_multi<std::pair<std::string const,turi::flex_type_enum> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__construct_node<std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_217EFABA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::vector<turi::flexible_type> &>::operator=[abi:ne180100]<std::string const,std::vector<turi::flexible_type>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_multi<std::pair<std::string const,std::vector<turi::flexible_type>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_217EFAD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<turi::flexible_type> &>::operator=[abi:ne180100]<std::string const,std::vector<turi::flexible_type>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2 + 24)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v4, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4);
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_multi<std::pair<std::string const,std::vector<turi::flexible_type>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_217EFAE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator=(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;

  v3 = *a1;
  if ((uint64_t *)v3 != *a2)
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__assign_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(v3, **a2, (*a2)[1], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - **a2) >> 4));
  return a1;
}

void std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__assign_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  v6 = a2;
  v8 = a1 + 16;
  v9 = *(unsigned int **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vdeallocate((unsigned int **)a1);
    if (a4 > 0x333333333333333)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x199999999999999)
      v11 = 0x333333333333333;
    else
      v11 = v10;
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(v8, v6, a3, *(_QWORD *)(a1 + 8));
LABEL_15:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v13 = *(unsigned int **)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v13 - (char *)v9) >> 4) < a4)
  {
    v14 = a2 + 16 * (((char *)v13 - (char *)v9) >> 4);
    if (v13 != v9)
    {
      v15 = 16 * (((char *)v13 - (char *)v9) >> 4);
      do
      {
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v9, v6);
        v6 += 80;
        v9 += 20;
        v15 -= 80;
      }
      while (v15);
      v9 = *(unsigned int **)(a1 + 8);
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(v8, v14, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v16 = *(unsigned int **)a1;
  }
  else
  {
    v16 = *(unsigned int **)a1;
    do
    {
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v9, v6);
      v6 += 80;
      v9 += 20;
      v16 += 20;
    }
    while (v6 != a3);
    v13 = *(unsigned int **)(a1 + 8);
  }
  while (v13 != v16)
  {
    v13 -= 20;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v13);
  }
  *(_QWORD *)(a1 + 8) = v16;
}

void sub_217EFB060(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vdeallocate(unsigned int **a1)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 20;
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v3);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *boost::recursive_wrapper<turi::function_closure_info>::assign(std::string **a1, uint64_t a2)
{
  std::string *v3;
  std::string *result;

  v3 = *a1;
  result = std::string::operator=(*a1, (const std::string *)a2);
  if (v3 != (std::string *)a2)
    return (std::string *)std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((uint64_t)&v3[1], *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return result;
}

uint64_t std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2;
  v8 = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    result = (uint64_t)std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v10);
    v12 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v13 = v6[1];
      *v12 = *v6;
      v12[1] = v13;
      v14 = v6[2];
      v12[2] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 3;
      v12 += 3;
    }
LABEL_21:
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v17 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3];
    result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,0>(a2, v17, v8);
    v12 = *(uint64_t **)(a1 + 8);
    while (v17 != a3)
    {
      v18 = v17[1];
      *v12 = *v17;
      v12[1] = v18;
      v19 = v17[2];
      v12[2] = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v17 += 3;
      v12 += 3;
    }
    goto LABEL_21;
  }
  result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,0>(a2, a3, v8);
  v23 = v22;
  v24 = *(_QWORD *)(a1 + 8);
  if (v24 != v22)
  {
    do
    {
      v25 = v24 - 24;
      result = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v24 - 16);
      v24 = v25;
    }
    while (v25 != v23);
  }
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 24;
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,0>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = v4 + 1;
    v7 = *v4;
    v4 += 3;
    v8 = a3 + 1;
    *a3 = v7;
    a3 += 3;
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v8, v6);
  }
  while (v4 != v5);
  return v5;
}

void boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, uint64_t *a4)
{
  switch(a2)
  {
    case 0:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<turi::flexible_type,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(a3, a4);
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<std::shared_ptr<turi::unity_sgraph_base>,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(a3, a4);
      break;
    case 2:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<turi::dataframe_t,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(a3, (uint64_t)a4);
      break;
    case 6:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(a3, (const void ****)a4);
      break;
    case 7:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(a3, (uint64_t **)a4);
      break;
    case 8:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<turi::function_closure_info>>(a3, (__int128 **)a4);
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<turi::flexible_type,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, uint64_t *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  v4 = *(unsigned int **)a1;
  v5 = *(unsigned int **)a1;
  *((_QWORD *)v5 + 1) = 0;
  v6 = (uint64_t *)(v5 + 2);
  v4[4] = 0;
  *((_BYTE *)v4 + 20) = 0;
  if (v6 != a2)
  {
    v7 = *a2;
    *(uint64_t *)((char *)v6 + 5) = *(uint64_t *)((char *)a2 + 5);
    *v6 = v7;
    v8 = *((unsigned __int8 *)a2 + 12);
    *((_BYTE *)v4 + 20) = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0)
    {
      v9 = (unint64_t *)*v6;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<std::shared_ptr<turi::unity_sgraph_base>,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  v4 = *(unsigned int **)a1;
  v5 = a2[1];
  *((_QWORD *)v4 + 1) = *a2;
  *((_QWORD *)v4 + 2) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v4 = *(unsigned int **)a1;
  }
  *v4 = *(_DWORD *)(a1 + 8);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<turi::dataframe_t,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  char *v5;
  unsigned int *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  std::string v12;
  char **v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  std::string *v19;

  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)&v13, (const void ***)(a2 + 24));
  std::map<std::string,std::vector<turi::flexible_type>>::map[abi:ne180100]((uint64_t *)&v16, (const void ***)(a2 + 48));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  v4 = *(unsigned int **)a1;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *(std::string *)(v4 + 2) = v12;
  memset(&v12, 0, sizeof(v12));
  *((_QWORD *)v4 + 4) = v13;
  v5 = v14;
  *((_QWORD *)v4 + 5) = v14;
  v6 = v4 + 10;
  v7 = v15;
  *((_QWORD *)v4 + 6) = v15;
  if (v7)
  {
    *((_QWORD *)v5 + 2) = v6;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    *((_QWORD *)v4 + 4) = v6;
  }
  *((_QWORD *)v4 + 7) = v16;
  v8 = v17;
  *((_QWORD *)v4 + 8) = v17;
  v9 = v4 + 16;
  v10 = v18;
  *((_QWORD *)v4 + 9) = v18;
  if (v10)
  {
    v11 = 0;
    v8[2] = v9;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    *((_QWORD *)v4 + 7) = v9;
    v11 = v17;
  }
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)&v16, v11);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v13, v14);
  v19 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_217EFB6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v13, a13);
  *(_QWORD *)(v14 - 40) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

uint64_t **boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(uint64_t a1, const void ****a2)
{
  uint64_t **result;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  result = boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)(*(_QWORD *)a1 + 8), a2);
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_217EFB714(void *a1)
{
  _DWORD **v1;

  __cxa_begin_catch(a1);
  **v1 = 0;
  __cxa_rethrow();
}

void sub_217EFB728(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(uint64_t a1, uint64_t **a2)
{
  _QWORD *result;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  result = boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((_QWORD *)(*(_QWORD *)a1 + 8), a2);
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_217EFB780(void *a1)
{
  _DWORD **v1;

  __cxa_begin_catch(a1);
  **v1 = 0;
  __cxa_rethrow();
}

void sub_217EFB794(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::string **boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<turi::function_closure_info>>(uint64_t a1, __int128 **a2)
{
  std::string **result;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  result = boost::recursive_wrapper<turi::function_closure_info>::recursive_wrapper((std::string **)(*(_QWORD *)a1 + 8), a2);
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_217EFB7EC(void *a1)
{
  _DWORD **v1;

  __cxa_begin_catch(a1);
  **v1 = 0;
  __cxa_rethrow();
}

void sub_217EFB800(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_converter<long long>::set@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<1>::set<long long const&>(a2, a1);
}

void sub_217EFB844(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<1>::set<long long const&>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  void **v33;

  v3 = result;
  switch(*(_BYTE *)(result + 12))
  {
    case 2:
      v4 = *(unint64_t **)result;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v10 = *(unint64_t **)result;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v15 = *(unint64_t **)result;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v33 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v33);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v19 = *(unint64_t **)result;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v33 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v33);
LABEL_26:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v22 = *(unint64_t **)result;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v27 = *(unint64_t **)result;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = (unint64_t)v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = (unint64_t)v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          result = MEMORY[0x219A19A08](v8, v9);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)v3 = 0;
  *(_DWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 12) = 0;
  *(_QWORD *)v3 = *a2;
  return result;
}

uint64_t turi::flexible_type_converter<double>::set@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  return turi::flexible_type::operator=<double>(a2, a1);
}

void sub_217EFBB24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

char *turi::flexible_type_converter<std::vector<double>>::set@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<1>::set<std::vector<double> const&>((uint64_t *)a2, a1);
}

void sub_217EFBBF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

char *turi::flexible_type_internals::ft_converter<1>::set<std::vector<double> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t *v38;
  std::string *v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *result;
  void **v70;

  v4 = 0x1080C409938AC02;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v5 = (unint64_t *)*a1;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        if (*((char *)v8 + 31) < 0)
          operator delete((void *)v8[1]);
        v9 = v8;
        v10 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v11 = (unint64_t *)*a1;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v15 = (void *)v14[1];
        if (v15)
        {
          v14[2] = (unint64_t)v15;
          operator delete(v15);
        }
        v9 = v14;
        v10 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v16 = (unint64_t *)*a1;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v70 = (void **)(v19 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v70);
        goto LABEL_26;
      }
      break;
    case 5:
      v20 = (unint64_t *)*a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v70 = (void **)(v19 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v70);
LABEL_26:
        v9 = v19;
        v10 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v23 = (unint64_t *)*a1;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
        v9 = v26;
        v27 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v28 = (unint64_t *)*a1;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = (unint64_t *)*a1;
        if (*a1)
        {
          v32 = (void *)v31[6];
          if (v32)
          {
            v31[7] = (unint64_t)v32;
            operator delete(v32);
          }
          v33 = (void *)v31[3];
          if (v33)
          {
            v31[4] = (unint64_t)v33;
            operator delete(v33);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
          v9 = v31;
          v27 = 2071181815;
LABEL_41:
          v10 = v27 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v9, v10);
        }
LABEL_43:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 3;
  v34 = (_QWORD *)operator new();
  *v34 = 0;
  v34[1] = 0;
  v35 = (void **)(v34 + 1);
  v34[2] = 0;
  v34[3] = 0;
  *a1 = (uint64_t)v34;
  *v34 = 1;
  v36 = v34;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v34 != 1)
      {
        v4 = 0x1012C404EF22A49;
        v37 = (_QWORD *)operator new();
        v38 = (unint64_t *)*a1;
        *v37 = *(_QWORD *)*a1;
        v39 = (std::string *)(v37 + 1);
        if (*((char *)v38 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v39, (const std::string::value_type *)v38[1], v38[2]);
        }
        else
        {
          v40 = *(_OWORD *)(v38 + 1);
          v37[3] = v38[3];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        *a1 = (uint64_t)v37;
        *v37 = 1;
        do
        {
          v67 = __ldaxr(v36);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v36));
        if (!v68)
        {
          if ((*((char *)v36 + 31) & 0x80000000) == 0)
            goto LABEL_84;
          v45 = *v35;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (*v34 != 1)
      {
        v41 = (_QWORD *)operator new();
        v42 = (unint64_t *)*a1;
        *v41 = *(_QWORD *)*a1;
        v41[2] = 0;
        v41[3] = 0;
        v41[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v41 + 1, (const void *)v42[1], v42[2], (uint64_t)(v42[2] - v42[1]) >> 3);
        *a1 = (uint64_t)v41;
        *v41 = 1;
        do
        {
          v43 = __ldaxr(v36);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v36));
        if (!v44)
        {
          v45 = *v35;
          if (*v35)
          {
            v36[2] = v45;
LABEL_83:
            operator delete(v45);
          }
          goto LABEL_84;
        }
      }
      break;
    case 4:
      if (*v34 != 1)
      {
        v4 = 0x1020C405E66F15BLL;
        v46 = (_QWORD *)operator new();
        v47 = (unint64_t *)*a1;
        *v46 = *(_QWORD *)*a1;
        v46[2] = 0;
        v46[3] = 0;
        v46[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v46 + 1, (uint64_t *)v47[1], (uint64_t *)v47[2], (uint64_t)(v47[2] - v47[1]) >> 4);
        *a1 = (uint64_t)v46;
        *v46 = 1;
        do
        {
          v48 = __ldaxr(v36);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v36));
        if (!v49)
        {
          v70 = v35;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v70);
          goto LABEL_84;
        }
      }
      break;
    case 5:
      if (*v34 != 1)
      {
        v4 = 0x1020C405E66F15BLL;
        v50 = (_QWORD *)operator new();
        v51 = (unint64_t *)*a1;
        *v50 = *(_QWORD *)*a1;
        v50[2] = 0;
        v50[3] = 0;
        v50[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v50 + 1, (uint64_t *)v51[1], (uint64_t *)v51[2], (uint64_t)(v51[2] - v51[1]) >> 5);
        *a1 = (uint64_t)v50;
        *v50 = 1;
        do
        {
          v52 = __ldaxr(v36);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v36));
        if (!v53)
        {
          v70 = v35;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v70);
          goto LABEL_84;
        }
      }
      break;
    case 8:
      if (*v34 != 1)
      {
        v4 = 0x1030C40F1F0227BLL;
        v54 = operator new();
        v55 = (unint64_t *)*a1;
        *(_QWORD *)v54 = *(_QWORD *)*a1;
        *(_QWORD *)(v54 + 8) = v55[1];
        v56 = v55[2];
        *(_QWORD *)(v54 + 16) = v56;
        if (v56)
        {
          v57 = (unsigned int *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v59 = *(_OWORD *)(v55 + 3);
        v60 = *(_OWORD *)(v55 + 5);
        *(_OWORD *)(v54 + 56) = *(_OWORD *)(v55 + 7);
        *(_OWORD *)(v54 + 40) = v60;
        *(_OWORD *)(v54 + 24) = v59;
        *a1 = v54;
        *(_QWORD *)v54 = 1;
        do
        {
          v61 = __ldaxr(v36);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v36));
        if (!v62)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
          goto LABEL_84;
        }
      }
      break;
    case 9:
      if (*v34 != 1)
      {
        v4 = 0x1030C407B73B9F7;
        v63 = (_QWORD *)operator new();
        v64 = *a1 + 8;
        *v63 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v63 + 1, v64);
        *a1 = (uint64_t)v63;
        *v63 = 1;
        do
        {
          v65 = __ldaxr(v36);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v36));
        if (!v66)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v36);
LABEL_84:
          MEMORY[0x219A19A08](v36, v4);
        }
      }
      break;
    default:
      break;
  }
  result = (char *)(*a1 + 8);
  if (result != (char *)a2)
    return std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

void sub_217EFC294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void turi::flexible_type_converter<std::vector<turi::flexible_type>>::set(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<std::vector<turi::flexible_type> const&>((uint64_t *)a2, a1);
}

void sub_217EFC340(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<1>::set<std::vector<turi::flexible_type> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t *v38;
  std::string *v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void **v70;

  v4 = 0x1020C405E66F15BLL;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v5 = (unint64_t *)*a1;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        if (*((char *)v8 + 31) < 0)
          operator delete((void *)v8[1]);
        v9 = v8;
        v10 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v11 = (unint64_t *)*a1;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v15 = (void *)v14[1];
        if (v15)
        {
          v14[2] = (unint64_t)v15;
          operator delete(v15);
        }
        v9 = v14;
        v10 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v16 = (unint64_t *)*a1;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v70 = (void **)(v19 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v70);
        goto LABEL_26;
      }
      break;
    case 5:
      v20 = (unint64_t *)*a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v70 = (void **)(v19 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v70);
LABEL_26:
        v9 = v19;
        v10 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v23 = (unint64_t *)*a1;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
        v9 = v26;
        v27 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v28 = (unint64_t *)*a1;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = (unint64_t *)*a1;
        if (*a1)
        {
          v32 = (void *)v31[6];
          if (v32)
          {
            v31[7] = (unint64_t)v32;
            operator delete(v32);
          }
          v33 = (void *)v31[3];
          if (v33)
          {
            v31[4] = (unint64_t)v33;
            operator delete(v33);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
          v9 = v31;
          v27 = 2071181815;
LABEL_41:
          v10 = v27 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v9, v10);
        }
LABEL_43:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 4;
  v34 = (_QWORD *)operator new();
  *v34 = 0;
  v34[1] = 0;
  v35 = (void **)(v34 + 1);
  v34[2] = 0;
  v34[3] = 0;
  *a1 = (uint64_t)v34;
  *v34 = 1;
  v36 = v34;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v34 != 1)
      {
        v4 = 0x1012C404EF22A49;
        v37 = (_QWORD *)operator new();
        v38 = (unint64_t *)*a1;
        *v37 = *(_QWORD *)*a1;
        v39 = (std::string *)(v37 + 1);
        if (*((char *)v38 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v39, (const std::string::value_type *)v38[1], v38[2]);
        }
        else
        {
          v40 = *(_OWORD *)(v38 + 1);
          v37[3] = v38[3];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        *a1 = (uint64_t)v37;
        *v37 = 1;
        do
        {
          v67 = __ldaxr(v36);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v36));
        if (!v68)
        {
          if ((*((char *)v36 + 31) & 0x80000000) == 0)
            goto LABEL_84;
          v45 = *v35;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (*v34 != 1)
      {
        v4 = 0x1080C409938AC02;
        v41 = (_QWORD *)operator new();
        v42 = (unint64_t *)*a1;
        *v41 = *(_QWORD *)*a1;
        v41[2] = 0;
        v41[3] = 0;
        v41[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v41 + 1, (const void *)v42[1], v42[2], (uint64_t)(v42[2] - v42[1]) >> 3);
        *a1 = (uint64_t)v41;
        *v41 = 1;
        do
        {
          v43 = __ldaxr(v36);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v36));
        if (!v44)
        {
          v45 = *v35;
          if (*v35)
          {
            v36[2] = v45;
LABEL_83:
            operator delete(v45);
          }
          goto LABEL_84;
        }
      }
      break;
    case 4:
      if (*v34 != 1)
      {
        v46 = (_QWORD *)operator new();
        v47 = (unint64_t *)*a1;
        *v46 = *(_QWORD *)*a1;
        v46[2] = 0;
        v46[3] = 0;
        v46[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v46 + 1, (uint64_t *)v47[1], (uint64_t *)v47[2], (uint64_t)(v47[2] - v47[1]) >> 4);
        *a1 = (uint64_t)v46;
        *v46 = 1;
        do
        {
          v48 = __ldaxr(v36);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v36));
        if (!v49)
        {
          v70 = v35;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v70);
          goto LABEL_84;
        }
      }
      break;
    case 5:
      if (*v34 != 1)
      {
        v50 = (_QWORD *)operator new();
        v51 = (unint64_t *)*a1;
        *v50 = *(_QWORD *)*a1;
        v50[2] = 0;
        v50[3] = 0;
        v50[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v50 + 1, (uint64_t *)v51[1], (uint64_t *)v51[2], (uint64_t)(v51[2] - v51[1]) >> 5);
        *a1 = (uint64_t)v50;
        *v50 = 1;
        do
        {
          v52 = __ldaxr(v36);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v36));
        if (!v53)
        {
          v70 = v35;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v70);
          goto LABEL_84;
        }
      }
      break;
    case 8:
      if (*v34 != 1)
      {
        v4 = 0x1030C40F1F0227BLL;
        v54 = operator new();
        v55 = (unint64_t *)*a1;
        *(_QWORD *)v54 = *(_QWORD *)*a1;
        *(_QWORD *)(v54 + 8) = v55[1];
        v56 = v55[2];
        *(_QWORD *)(v54 + 16) = v56;
        if (v56)
        {
          v57 = (unsigned int *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v59 = *(_OWORD *)(v55 + 3);
        v60 = *(_OWORD *)(v55 + 5);
        *(_OWORD *)(v54 + 56) = *(_OWORD *)(v55 + 7);
        *(_OWORD *)(v54 + 40) = v60;
        *(_OWORD *)(v54 + 24) = v59;
        *a1 = v54;
        *(_QWORD *)v54 = 1;
        do
        {
          v61 = __ldaxr(v36);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v36));
        if (!v62)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
          goto LABEL_84;
        }
      }
      break;
    case 9:
      if (*v34 != 1)
      {
        v4 = 0x1030C407B73B9F7;
        v63 = (_QWORD *)operator new();
        v64 = *a1 + 8;
        *v63 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v63 + 1, v64);
        *a1 = (uint64_t)v63;
        *v63 = 1;
        do
        {
          v65 = __ldaxr(v36);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v36));
        if (!v66)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v36);
LABEL_84:
          MEMORY[0x219A19A08](v36, v4);
        }
      }
      break;
    default:
      break;
  }
  v69 = *a1 + 8;
  if ((uint64_t **)v69 != a2)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v69, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
}

void sub_217EFC9D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

char **turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::set@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<1>::set<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const&>((uint64_t *)a2, a1);
}

void sub_217EFCA7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

char **turi::flexible_type_internals::ft_converter<1>::set<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t *v38;
  std::string *v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char **result;
  void **v70;

  v4 = 0x1020C405E66F15BLL;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v5 = (unint64_t *)*a1;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        if (*((char *)v8 + 31) < 0)
          operator delete((void *)v8[1]);
        v9 = v8;
        v10 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v11 = (unint64_t *)*a1;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v15 = (void *)v14[1];
        if (v15)
        {
          v14[2] = (unint64_t)v15;
          operator delete(v15);
        }
        v9 = v14;
        v10 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v16 = (unint64_t *)*a1;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v70 = (void **)(v19 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v70);
        goto LABEL_26;
      }
      break;
    case 5:
      v20 = (unint64_t *)*a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v19 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        v70 = (void **)(v19 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v70);
LABEL_26:
        v9 = v19;
        v10 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v23 = (unint64_t *)*a1;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
        v9 = v26;
        v27 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v28 = (unint64_t *)*a1;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = (unint64_t *)*a1;
        if (*a1)
        {
          v32 = (void *)v31[6];
          if (v32)
          {
            v31[7] = (unint64_t)v32;
            operator delete(v32);
          }
          v33 = (void *)v31[3];
          if (v33)
          {
            v31[4] = (unint64_t)v33;
            operator delete(v33);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
          v9 = v31;
          v27 = 2071181815;
LABEL_41:
          v10 = v27 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v9, v10);
        }
LABEL_43:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 5;
  v34 = (_QWORD *)operator new();
  *v34 = 0;
  v34[1] = 0;
  v35 = (void **)(v34 + 1);
  v34[2] = 0;
  v34[3] = 0;
  *a1 = (uint64_t)v34;
  *v34 = 1;
  v36 = v34;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v34 != 1)
      {
        v4 = 0x1012C404EF22A49;
        v37 = (_QWORD *)operator new();
        v38 = (unint64_t *)*a1;
        *v37 = *(_QWORD *)*a1;
        v39 = (std::string *)(v37 + 1);
        if (*((char *)v38 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v39, (const std::string::value_type *)v38[1], v38[2]);
        }
        else
        {
          v40 = *(_OWORD *)(v38 + 1);
          v37[3] = v38[3];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        *a1 = (uint64_t)v37;
        *v37 = 1;
        do
        {
          v67 = __ldaxr(v36);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v36));
        if (!v68)
        {
          if ((*((char *)v36 + 31) & 0x80000000) == 0)
            goto LABEL_84;
          v45 = *v35;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (*v34 != 1)
      {
        v4 = 0x1080C409938AC02;
        v41 = (_QWORD *)operator new();
        v42 = (unint64_t *)*a1;
        *v41 = *(_QWORD *)*a1;
        v41[2] = 0;
        v41[3] = 0;
        v41[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v41 + 1, (const void *)v42[1], v42[2], (uint64_t)(v42[2] - v42[1]) >> 3);
        *a1 = (uint64_t)v41;
        *v41 = 1;
        do
        {
          v43 = __ldaxr(v36);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v36));
        if (!v44)
        {
          v45 = *v35;
          if (*v35)
          {
            v36[2] = v45;
LABEL_83:
            operator delete(v45);
          }
          goto LABEL_84;
        }
      }
      break;
    case 4:
      if (*v34 != 1)
      {
        v46 = (_QWORD *)operator new();
        v47 = (unint64_t *)*a1;
        *v46 = *(_QWORD *)*a1;
        v46[2] = 0;
        v46[3] = 0;
        v46[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v46 + 1, (uint64_t *)v47[1], (uint64_t *)v47[2], (uint64_t)(v47[2] - v47[1]) >> 4);
        *a1 = (uint64_t)v46;
        *v46 = 1;
        do
        {
          v48 = __ldaxr(v36);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v36));
        if (!v49)
        {
          v70 = v35;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v70);
          goto LABEL_84;
        }
      }
      break;
    case 5:
      if (*v34 != 1)
      {
        v50 = (_QWORD *)operator new();
        v51 = (unint64_t *)*a1;
        *v50 = *(_QWORD *)*a1;
        v50[2] = 0;
        v50[3] = 0;
        v50[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v50 + 1, (uint64_t *)v51[1], (uint64_t *)v51[2], (uint64_t)(v51[2] - v51[1]) >> 5);
        *a1 = (uint64_t)v50;
        *v50 = 1;
        do
        {
          v52 = __ldaxr(v36);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v36));
        if (!v53)
        {
          v70 = v35;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v70);
          goto LABEL_84;
        }
      }
      break;
    case 8:
      if (*v34 != 1)
      {
        v4 = 0x1030C40F1F0227BLL;
        v54 = operator new();
        v55 = (unint64_t *)*a1;
        *(_QWORD *)v54 = *(_QWORD *)*a1;
        *(_QWORD *)(v54 + 8) = v55[1];
        v56 = v55[2];
        *(_QWORD *)(v54 + 16) = v56;
        if (v56)
        {
          v57 = (unsigned int *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v59 = *(_OWORD *)(v55 + 3);
        v60 = *(_OWORD *)(v55 + 5);
        *(_OWORD *)(v54 + 56) = *(_OWORD *)(v55 + 7);
        *(_OWORD *)(v54 + 40) = v60;
        *(_OWORD *)(v54 + 24) = v59;
        *a1 = v54;
        *(_QWORD *)v54 = 1;
        do
        {
          v61 = __ldaxr(v36);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v36));
        if (!v62)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
          goto LABEL_84;
        }
      }
      break;
    case 9:
      if (*v34 != 1)
      {
        v4 = 0x1030C407B73B9F7;
        v63 = (_QWORD *)operator new();
        v64 = *a1 + 8;
        *v63 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v63 + 1, v64);
        *a1 = (uint64_t)v63;
        *v63 = 1;
        do
        {
          v65 = __ldaxr(v36);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v36));
        if (!v66)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v36);
LABEL_84:
          MEMORY[0x219A19A08](v36, v4);
        }
      }
      break;
    default:
      break;
  }
  result = (char **)(*a1 + 8);
  if (result != (char **)a2)
    return (char **)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 5);
  return result;
}

void sub_217EFD10C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_converter<turi::flex_date_time>::set@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<1>::set<turi::flex_date_time const&>(a2, a1);
}

void sub_217EFD1B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<1>::set<turi::flex_date_time const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void **v34;

  v3 = result;
  switch(*(_BYTE *)(result + 12))
  {
    case 2:
      v4 = *(unint64_t **)result;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v10 = *(unint64_t **)result;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v15 = *(unint64_t **)result;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v34 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v19 = *(unint64_t **)result;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v34 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_26:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v22 = *(unint64_t **)result;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v27 = *(unint64_t **)result;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = (unint64_t)v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = (unint64_t)v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          result = MEMORY[0x219A19A08](v8, v9);
        }
      }
      break;
    default:
      break;
  }
  *(_BYTE *)(v3 + 12) = 6;
  *(_QWORD *)v3 = 0x1900000000000000;
  *(_DWORD *)(v3 + 8) = 0;
  v33 = *a2;
  *(_DWORD *)(v3 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v3 = v33;
  return result;
}

__int128 *boost::shared_ptr<char []>::operator=(__int128 *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unsigned int *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *a1;
  *(_QWORD *)a1 = v4;
  *((_QWORD *)a1 + 1) = v3;
  *((_QWORD *)&v9 + 1) = *((_QWORD *)&v7 + 1);
  boost::detail::shared_count::~shared_count((unsigned int **)&v9 + 1);
  return a1;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<turi::flexible_type>(unsigned int *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  _QWORD v8[10];

  v8[9] = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v7 = (uint64_t **)&v6;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), &v7, (uint64_t)(a1 + 2)) & 1) == 0)
  {
    memset(v8, 0, 13);
    if (v8 != (_QWORD *)a2)
    {
      *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)(a2 + 5);
      v8[0] = *(_QWORD *)a2;
      BYTE4(v8[1]) = *(_BYTE *)(a2 + 12);
      if (BYTE4(v8[1]) <= 9u && ((1 << SBYTE4(v8[1])) & 0x33C) != 0)
      {
        v4 = (unint64_t *)v8[0];
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
      }
    }
    LODWORD(v7) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v7);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v7);
  }
}

void sub_217EFD5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t ***a3, uint64_t a4)
{
  if ((a2 - 1) < 8)
    return 0;
  if (a2)
    boost::detail::variant::forced_return<void>(a1);
  return boost::detail::variant::direct_assigner<turi::flexible_type>::operator()(*a3, a4);
}

uint64_t boost::detail::variant::direct_assigner<turi::flexible_type>::operator()(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unint64_t *v37;
  unint64_t v38;
  void **v40;

  v2 = *a1;
  if (*a1 != (uint64_t *)a2)
  {
    switch(*(_BYTE *)(a2 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v40 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v40);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v40 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v40);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a2;
          if (*(_QWORD *)a2)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a2 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *v2;
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)v2 + 5);
    *(_QWORD *)a2 = v33;
    LODWORD(v33) = *((unsigned __int8 *)v2 + 12);
    *(_BYTE *)(a2 + 12) = v33;
    v34 = v33 > 9;
    v35 = (1 << v33) & 0x33C;
    if (!v34 && v35 != 0)
    {
      v37 = *(unint64_t **)a2;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
  }
  return 1;
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
      return result;
    case 5:
      result = a4;
      break;
    default:
      boost::detail::variant::forced_return<void>(0);
  }
  return result;
}

void turi::full_type_name<std::shared_ptr<turi::unity_sarray_base>>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v8 = *a1;
  v9 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = 5;
  std::string::basic_string[abi:ne180100]<0>(a2, "SArray");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v7);
}

void sub_217EFD968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
      return result;
    case 4:
      result = a4;
      break;
    default:
      boost::detail::variant::forced_return<void>(0);
  }
  return result;
}

void turi::full_type_name<std::shared_ptr<turi::unity_sframe_base>>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v8 = *a1;
  v9 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = 4;
  std::string::basic_string[abi:ne180100]<0>(a2, "SFrame");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v7);
}

void sub_217EFDA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::model_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return result;
    case 3:
      result = a4;
      break;
    default:
      boost::detail::variant::forced_return<void>(0);
  }
  return result;
}

void turi::full_type_name<std::shared_ptr<turi::model_base>>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v8 = *a1;
  v9 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = 3;
  std::string::basic_string[abi:ne180100]<0>(a2, "Model");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v7);
}

void sub_217EFDB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_24D919748;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_217EFDBB4(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_217EFDBC8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

_QWORD *std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9197C8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9197C8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x219A19A08);
}

char *std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_24D9197C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24D9197C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *exception;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v23 = 0;
  memset(v24, 0, 13);
  if (v24 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v24 + 5) = *(_QWORD *)(a2 + 5);
    v24[0] = *(_QWORD *)a2;
    BYTE4(v24[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v24[1]) <= 9u && ((1 << SBYTE4(v24[1])) & 0x33C) != 0)
    {
      v4 = (unint64_t *)v24[0];
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t *, _QWORD, uint64_t *))(a1 + 8))(&v23, *(_QWORD *)(a1 + 16), &v21);
  v7 = (uint64_t *)v21;
  if (v21)
  {
    v15 = *(_QWORD *)(v21 + 8);
    v22[0] = *(_QWORD *)(v21 + 16);
    *(_QWORD *)((char *)v22 + 7) = *(_QWORD *)(v21 + 23);
    v16 = *(_BYTE *)(v21 + 31);
    *(_QWORD *)(v21 + 16) = 0;
    v7[3] = 0;
    v17 = *v7;
    v7[1] = 0;
    (*(void (**)(uint64_t *, uint64_t *))(v17 + 8))(v7, &v21);
    if (v6)
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v6 + 8))(*v6, v6);
    exception = __cxa_allocate_exception(0x18uLL);
    v19 = v22[0];
    *exception = v15;
    exception[1] = v19;
    *(_QWORD *)((char *)exception + 15) = *(_QWORD *)((char *)v22 + 7);
    *((_BYTE *)exception + 23) = v16;
  }
  if (!v6)
  {
    v20 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v20, "Callback provided to tc_sarray_apply returned null without setting error");
  }
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  if (v6 + 1 != (_QWORD *)a3)
  {
    v8 = v6[1];
    *(_QWORD *)(a3 + 5) = *(_QWORD *)((char *)v6 + 13);
    *(_QWORD *)a3 = v8;
    v9 = *((unsigned __int8 *)v6 + 20);
    *(_BYTE *)(a3 + 12) = v9;
    v10 = v9 > 9;
    v11 = (1 << v9) & 0x33C;
    if (!v10 && v11 != 0)
    {
      v13 = *(unint64_t **)a3;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v6 + 8))(*v6, v6);
  tc_flexible_type_struct::~tc_flexible_type_struct((tc_flexible_type_struct *)&v23);
}

void sub_217EFDF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  tc_flexible_type_struct::~tc_flexible_type_struct((tc_flexible_type_struct *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void tc_flexible_type_struct::~tc_flexible_type_struct(tc_flexible_type_struct *this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  switch(*((_BYTE *)this + 20))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 1);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 1);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 1);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 1);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 1);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
}

uint64_t *std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>(uint64_t *result, const std::string *a2, const std::string *a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,std::string *,std::string *,turi::flexible_type*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_217EFE308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,std::string *,std::string *,turi::flexible_type*>(uint64_t a1, const std::string *a2, const std::string *a3, uint64_t *a4)
{
  uint64_t *v4;
  const std::string *v6;
  _QWORD v9[3];
  char v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<turi::flexible_type>::construct[abi:ne180100]<turi::flexible_type,std::string &>(a1, v4, v6++);
      v4 = v12 + 2;
      v12 += 2;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_217EFE3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::allocator<turi::flexible_type>::construct[abi:ne180100]<turi::flexible_type,std::string &>(uint64_t a1, uint64_t *a2, const std::string *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void **v44;

  *(uint64_t *)((char *)a2 + 5) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 12) = 2;
  v5 = (_QWORD *)operator new();
  v6 = v5;
  *v5 = 0;
  v5[1] = 0;
  v7 = (void **)(v5 + 1);
  v5[2] = 0;
  v5[3] = 0;
  *a2 = (uint64_t)v5;
  *v5 = 1;
  switch(*((_BYTE *)a2 + 12))
  {
    case 2:
      if (*v5 != 1)
      {
        v8 = (_QWORD *)operator new();
        v9 = *a2;
        *v8 = *(_QWORD *)*a2;
        v10 = (std::string *)(v8 + 1);
        if (*(char *)(v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
        }
        else
        {
          v11 = *(_OWORD *)(v9 + 8);
          v8[3] = *(_QWORD *)(v9 + 24);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
        }
        *a2 = (uint64_t)v8;
        *v8 = 1;
        do
        {
          v41 = __ldaxr(v6);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v6));
        if (!v42)
        {
          if (*((char *)v6 + 31) < 0)
            operator delete(*v7);
          v17 = v6;
          v18 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v5 != 1)
      {
        v12 = (_QWORD *)operator new();
        v13 = (_QWORD *)*a2;
        *v12 = *(_QWORD *)*a2;
        v12[2] = 0;
        v12[3] = 0;
        v12[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v12 + 1, (const void *)v13[1], v13[2], (uint64_t)(v13[2] - v13[1]) >> 3);
        *a2 = (uint64_t)v12;
        *v12 = 1;
        do
        {
          v14 = __ldaxr(v6);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v6));
        if (!v15)
        {
          v16 = *v7;
          if (*v7)
          {
            v6[2] = v16;
            operator delete(v16);
          }
          v17 = v6;
          v18 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v5 != 1)
      {
        v19 = (_QWORD *)operator new();
        v20 = (_QWORD *)*a2;
        *v19 = *(_QWORD *)*a2;
        v19[2] = 0;
        v19[3] = 0;
        v19[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v19 + 1, (uint64_t *)v20[1], (uint64_t *)v20[2], (uint64_t)(v20[2] - v20[1]) >> 4);
        *a2 = (uint64_t)v19;
        *v19 = 1;
        do
        {
          v21 = __ldaxr(v6);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v6));
        if (!v22)
        {
          v44 = v7;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v44);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v5 != 1)
      {
        v23 = (_QWORD *)operator new();
        v24 = (_QWORD *)*a2;
        *v23 = *(_QWORD *)*a2;
        v23[2] = 0;
        v23[3] = 0;
        v23[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v23 + 1, (uint64_t *)v24[1], (uint64_t *)v24[2], (uint64_t)(v24[2] - v24[1]) >> 5);
        *a2 = (uint64_t)v23;
        *v23 = 1;
        do
        {
          v25 = __ldaxr(v6);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v6));
        if (!v26)
        {
          v44 = v7;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v44);
LABEL_22:
          v17 = v6;
          v18 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v5 != 1)
      {
        v27 = operator new();
        v28 = (_QWORD *)*a2;
        *(_QWORD *)v27 = *(_QWORD *)*a2;
        *(_QWORD *)(v27 + 8) = v28[1];
        v29 = v28[2];
        *(_QWORD *)(v27 + 16) = v29;
        if (v29)
        {
          v30 = (unsigned int *)(v29 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v32 = *(_OWORD *)(v28 + 3);
        v33 = *(_OWORD *)(v28 + 5);
        *(_OWORD *)(v27 + 56) = *(_OWORD *)(v28 + 7);
        *(_OWORD *)(v27 + 40) = v33;
        *(_OWORD *)(v27 + 24) = v32;
        *a2 = v27;
        *(_QWORD *)v27 = 1;
        do
        {
          v34 = __ldaxr(v6);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v6));
        if (!v35)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v6 + 2);
          v17 = v6;
          v36 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v5 != 1)
      {
        v37 = (_QWORD *)operator new();
        v38 = *a2 + 8;
        *v37 = *(_QWORD *)*a2;
        turi::flexible_type_impl::ndarray<double>::ndarray(v37 + 1, v38);
        *a2 = (uint64_t)v37;
        *v37 = 1;
        do
        {
          v39 = __ldaxr(v6);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v6));
        if (!v40)
        {
          v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v6);
          v36 = 2071181815;
LABEL_36:
          v18 = v36 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v17, v18);
        }
      }
      break;
    default:
      return std::string::operator=((std::string *)(*a2 + 8), a3);
  }
  return std::string::operator=((std::string *)(*a2 + 8), a3);
}

void sub_217EFE7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t **v10;
  uint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*((_BYTE *)v10 + 12))
  {
    case 2:
      v13 = *v10;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (v15)
        goto LABEL_40;
      v16 = *v10;
      if (!*v10)
        goto LABEL_39;
      if (*((char *)v16 + 31) < 0)
        operator delete((void *)v16[1]);
      v17 = v16;
      v18 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v19 = *v10;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_40;
      v22 = *v10;
      if (!*v10)
        goto LABEL_39;
      v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (unint64_t)v23;
        operator delete(v23);
      }
      v17 = v22;
      v18 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v24 = *v10;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_40;
      v27 = *v10;
      if (!*v10)
        goto LABEL_39;
      a10 = (void **)(v27 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v28 = *v10;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (v30)
        goto LABEL_40;
      v27 = *v10;
      if (!*v10)
        goto LABEL_39;
      a10 = (void **)(v27 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v17 = v27;
      v18 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v31 = *v10;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v10;
      if (!*v10)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v34 + 2);
      v17 = v34;
      v35 = -235920773;
      goto LABEL_37;
    case 9:
      v36 = *v10;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      if (!*v10)
        goto LABEL_39;
      v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v10);
      v35 = 2071181815;
LABEL_37:
      v18 = v35 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v17, v18);
LABEL_39:
      *v10 = 0;
LABEL_40:
      *v10 = 0;
      *((_DWORD *)v10 + 2) = 0;
      *((_BYTE *)v10 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      return a4;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      a4 = 0;
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217EFEB3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  v5 = *((_QWORD *)a2 + 3);
  *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(_QWORD *)((char *)a2 + 29);
  this[1].__r_.__value_.__r.__words[0] = v5;
  this[1].__r_.__value_.__s.__data_[12] = *((_BYTE *)a2 + 36);
  *((_BYTE *)a2 + 36) = 0;
  return this;
}

uint64_t *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;

  v4 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, a2);
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void,void>((uint64_t)(a1 + 1), (uint64_t)(a2 + 4));
  operator delete(a2);
  return v4;
}

uint64_t *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::string&,0>(uint64_t a1, char *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void **v46;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 2;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v46 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v46 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*v6 + 8), a3);
  return a1;
}

void sub_217EFF424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[13],std::string&,0>(uint64_t a1, char *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void **v46;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 2;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v46 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v46 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*v6 + 8), a3);
  return a1;
}

void sub_217EFFA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[12],std::string&,0>(uint64_t a1, char *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void **v46;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 2;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v46 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v46 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*v6 + 8), a3);
  return a1;
}

void sub_217F000F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(uint64_t a1, char *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void **v46;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 2;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v46 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v46 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*v6 + 8), a3);
  return a1;
}

void sub_217F0075C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

char **turi::variant_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  char **result;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void **v38[3];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  memset(v39, 0, 13);
  v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((_QWORD *)v3 != v39)
  {
    v4 = *(_QWORD *)v3;
    *(_QWORD *)((char *)v39 + 5) = *(_QWORD *)(v3 + 5);
    v39[0] = v4;
    BYTE4(v39[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v39[1]) <= 9u && ((1 << SBYTE4(v39[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v39[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  result = turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::get((char *)v39, a2);
  switch(BYTE4(v39[1]))
  {
    case 2:
      v9 = (unint64_t *)v39[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v39[0];
        if (v39[0])
        {
          if (*(char *)(v39[0] + 31) < 0)
            operator delete(*(void **)(v39[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v39[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v39[0];
        if (v39[0])
        {
          v30 = *(void **)(v39[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v39[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v39[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v38);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v39[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v38);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v39[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v39[0];
        if (v39[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v39[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v39[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v39[0];
        if (v39[0])
        {
          v23 = *(void **)(v39[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v39[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          result = (char **)MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_217F00C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

char **turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::get@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return turi::flexible_type_internals::ft_converter<1>::get<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>((char **)a2, a1);
}

void sub_217F00F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char **turi::flexible_type_internals::ft_converter<1>::get<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(char **result, char *a2)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  unint64_t v7;
  const std::string::value_type *v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  _QWORD *exception;
  uint64_t v13;
  std::string v14;
  std::string v15;
  std::string v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  if (a2[12] != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "Expecting ");
    v3 = std::string::append(&v14, "dictionary");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    v5 = std::string::append(&v15, ". But we got a ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = a2[12];
    if (v7 > 9)
      v8 = "undefined";
    else
      v8 = off_24D919EF0[v7];
    v9 = std::string::append(&v16, v8);
    v10 = v9->__r_.__value_.__r.__words[0];
    v17[0] = v9->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
    v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x18uLL);
    v13 = v17[0];
    *exception = v10;
    exception[1] = v13;
    *(_QWORD *)((char *)exception + 15) = *(_QWORD *)((char *)v17 + 7);
    *((_BYTE *)exception + 23) = v11;
  }
  if ((char **)(*(_QWORD *)a2 + 8) != result)
    return (char **)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(result, *(uint64_t **)(*(_QWORD *)a2 + 8), *(uint64_t **)(*(_QWORD *)a2 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - *(_QWORD *)(*(_QWORD *)a2 + 8)) >> 5);
  return result;
}

void sub_217F010E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_BYTE *)v7 + 56) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::vector<turi::flexible_type> &,0>(uint64_t a1, char *a2, uint64_t **a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void **v47;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 4;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v47 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v47);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v47 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v47);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  v45 = *v6 + 8;
  if ((uint64_t **)v45 != a3)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v45, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_217F01604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[16],std::string&,0>(uint64_t a1, char *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void **v46;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 2;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v46 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v46 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*v6 + 8), a3);
  return a1;
}

void sub_217F01C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[15],std::vector<turi::flexible_type> &,0>(uint64_t a1, char *a2, uint64_t **a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void **v47;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 4;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v47 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v47);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v47 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v47);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  v45 = *v6 + 8;
  if ((uint64_t **)v45 != a3)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v45, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_217F022E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_217F02594(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217F02690(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_217F02720(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(std::string *result, turi::flexible_type_impl *a2, turi::flexible_type_impl *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,turi::flexible_type const*,turi::flexible_type const*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_217F028B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,turi::flexible_type const*,turi::flexible_type const*,std::string*>(uint64_t a1, turi::flexible_type_impl *a2, turi::flexible_type_impl *a3, std::string *this)
{
  std::string *v4;
  turi::flexible_type_impl *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<std::string>::construct[abi:ne180100]<std::string,turi::flexible_type const&>(v7, v4, v6);
      v6 = (turi::flexible_type_impl *)((char *)v6 + 16);
      v4 = ++v12;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_217F02964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<std::string>::construct[abi:ne180100]<std::string,turi::flexible_type const&>(int a1, std::string *this, turi::flexible_type_impl *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v6[13];
  char v7;
  uint64_t v8;

  switch(*((_BYTE *)a3 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_4;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_4:
      v6[0] = *MEMORY[0x24BEDB7F0];
      v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v6[2] = v3;
      v6[3] = MEMORY[0x24BEDB848] + 16;
      if (v7 < 0)
        operator delete((void *)v6[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v8);
      break;
    case 2:
      v4 = *(_QWORD *)a3;
      if (*(char *)(*(_QWORD *)a3 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
      }
      else
      {
        v5 = *(_OWORD *)(v4 + 8);
        this->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v6, (_QWORD *)(*(_QWORD *)a3 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v6, (uint64_t *)(*(_QWORD *)a3 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v6, (_QWORD *)(*(_QWORD *)a3 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(a3, this);
      break;
    case 7:
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
      this->__r_.__value_.__r.__words[2] = 0;
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v6, (_QWORD *)(*(_QWORD *)a3 + 8));
      break;
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_217F02B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919858;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919858;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::string v7;
  std::__shared_weak_count *v8;
  char *v9;
  std::string *v10;

  v9 = *a3;
  turi::aggregate::COUNT(&v7);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v9, (uint64_t)&v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v10 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_217F02C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v14 - 24) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(uint64_t **a1, char **a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<char const*&,turi::aggregate::groupby_descriptor_type>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_217F02D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<char const*&,turi::aggregate::groupby_descriptor_type>@<Q0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  __n128 result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 4, *a2);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)a3;
  *((_QWORD *)v8 + 9) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = *(__n128 *)(a3 + 24);
  *((__n128 *)v8 + 5) = result;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217F02DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 48);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D9198E8;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D9198E8;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::SUM((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F02F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919968;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919968;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::MAX((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F03118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D9199E8;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D9199E8;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::MIN((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F032A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919A68;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919A68;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::AVG((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F03428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919AE8;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919AE8;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::VAR((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F035B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919B68;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919B68;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::STD((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F03738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919BE8;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919BE8;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::STDV((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F038C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919C68;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919C68;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::SELECT_ONE((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F03A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919CE8;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919CE8;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::COUNT_DISTINCT((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F03BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D919D68;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D919D68;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;

  v5 = *a4;
  v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::CONCAT((uint64_t)__p, &v11);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v13, (uint64_t)&v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_217F03D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  *(_QWORD *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

uint64_t std::map<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 56 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 7;
      v6 -= 56;
    }
    while (v6);
  }
  return a1;
}

void sub_217F03E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::__construct_node<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::__construct_node<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217F03F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_217F03FB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217F041A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  return this;
}

{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  v5 = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  this[2].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

_QWORD *std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D919DE8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D919DE8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x219A19A08);
}

char *std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_24D919DE8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24D919DE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  _QWORD *exception;
  _QWORD *v12;
  _OWORD v13[2];
  uint64_t v14;
  void **v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  turi::sframe_rows::row::operator std::vector<turi::flexible_type>(a2, (uint64_t *)&v16);
  std::vector<turi::flexible_type>::__vdeallocate((void **)v13 + 1);
  *(_OWORD *)((char *)v13 + 8) = v16;
  *((_QWORD *)&v13[1] + 1) = v17;
  v17 = 0;
  v15 = (void **)&v16;
  v16 = 0uLL;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
  v5 = (_QWORD *)(*(uint64_t (**)(_OWORD *, _QWORD, uint64_t *))(a1 + 8))(v13, *(_QWORD *)(a1 + 16), &v14);
  v6 = (_QWORD *)v14;
  if (v14)
  {
    v8 = v5;
    v9 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)&v16 = *(_QWORD *)(v14 + 16);
    *(_QWORD *)((char *)&v16 + 7) = *(_QWORD *)(v14 + 23);
    v10 = *(_BYTE *)(v14 + 31);
    *(_QWORD *)(v14 + 16) = 0;
    v6[3] = 0;
    v6[1] = 0;
    (*(void (**)(_QWORD *, uint64_t *))(*v6 + 8))(v6, &v14);
    if (v8)
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v8 + 8))(*v8, v8);
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = v9;
    exception[1] = v16;
    *(_QWORD *)((char *)exception + 15) = *(_QWORD *)((char *)&v16 + 7);
    *((_BYTE *)exception + 23) = v10;
  }
  if (!v5)
  {
    v12 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "Callback provided to tc_sframe_apply returned null without setting error");
  }
  v7 = v5[1];
  *(_QWORD *)(a3 + 5) = *(_QWORD *)((char *)v5 + 13);
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 12) = *((_BYTE *)v5 + 20);
  *((_BYTE *)v5 + 20) = 0;
  (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
  *(_QWORD *)&v16 = (char *)v13 + 8;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_217F04514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

_QWORD *turi::sframe_rows::row::operator std::vector<turi::flexible_type>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  unint64_t *v42;
  unint64_t v43;
  void **v44;

  result = std::vector<turi::flexible_type>::vector(a2, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4);
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v6 = 0;
    do
    {
      v7 = **(_QWORD **)(*(_QWORD *)*a1 + 16 * v6) + 16 * a1[1];
      v8 = v5 + 16 * v6;
      if (v7 != v8)
      {
        switch(*(_BYTE *)(v8 + 12))
        {
          case 2:
            v9 = *(unint64_t **)v8;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v12 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_46;
              if (*((char *)v12 + 31) < 0)
                operator delete((void *)v12[1]);
              v13 = v12;
              v14 = 0x1012C404EF22A49;
              goto LABEL_45;
            }
            break;
          case 3:
            v15 = *(unint64_t **)v8;
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v18 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_46;
              v19 = (void *)v18[1];
              if (v19)
              {
                v18[2] = (unint64_t)v19;
                operator delete(v19);
              }
              v13 = v18;
              v14 = 0x1080C409938AC02;
              goto LABEL_45;
            }
            break;
          case 4:
            v20 = *(unint64_t **)v8;
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              v23 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_46;
              v44 = (void **)(v23 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v44);
              goto LABEL_29;
            }
            break;
          case 5:
            v24 = *(unint64_t **)v8;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v23 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_46;
              v44 = (void **)(v23 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v44);
LABEL_29:
              v13 = v23;
              v14 = 0x1020C405E66F15BLL;
              goto LABEL_45;
            }
            break;
          case 8:
            v27 = *(unint64_t **)v8;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              v30 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_46;
              boost::detail::shared_count::~shared_count((unsigned int **)v30 + 2);
              v13 = v30;
              v31 = -235920773;
              goto LABEL_44;
            }
            break;
          case 9:
            v32 = *(unint64_t **)v8;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              v35 = *(unint64_t **)v8;
              if (*(_QWORD *)v8)
              {
                v36 = (void *)v35[6];
                if (v36)
                {
                  v35[7] = (unint64_t)v36;
                  operator delete(v36);
                }
                v37 = (void *)v35[3];
                if (v37)
                {
                  v35[4] = (unint64_t)v37;
                  operator delete(v37);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 1));
                v13 = v35;
                v31 = 2071181815;
LABEL_44:
                v14 = v31 | 0x1030C4000000000;
LABEL_45:
                result = (_QWORD *)MEMORY[0x219A19A08](v13, v14);
              }
LABEL_46:
              *(_QWORD *)v8 = 0;
            }
            break;
          default:
            break;
        }
        v38 = *(_QWORD *)v7;
        *(_QWORD *)(v8 + 5) = *(_QWORD *)(v7 + 5);
        *(_QWORD *)v8 = v38;
        LODWORD(v38) = *(unsigned __int8 *)(v7 + 12);
        *(_BYTE *)(v8 + 12) = v38;
        v39 = v38 > 9;
        v40 = (1 << v38) & 0x33C;
        if (!v39 && v40 != 0)
        {
          v42 = *(unint64_t **)v8;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
      }
      ++v6;
      v5 = *a2;
    }
    while (v6 < (a2[1] - *a2) >> 4);
  }
  return result;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<double>>(uint64_t a1, __n128 *a2)
{
  _QWORD *v4;
  unint64_t *v5;
  void **v6;
  _QWORD *v7;
  const void *v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;

  v4 = (_QWORD *)operator new();
  v5 = v4;
  *v4 = 0;
  v4[1] = 0;
  v6 = (void **)(v4 + 1);
  v4[2] = 0;
  v4[3] = 0;
  *v4 = 1;
  if (*v4 == 1)
  {
    v7 = v4;
  }
  else
  {
    v7 = (_QWORD *)operator new();
    v8 = (const void *)v5[1];
    *v7 = *v5;
    v7[2] = 0;
    v7[3] = 0;
    v7[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v7 + 1, v8, v5[2], (uint64_t)(v5[2] - (_QWORD)v8) >> 3);
    *v7 = 1;
    do
    {
      v9 = __ldaxr(v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v5));
    if (!v10)
    {
      v11 = *v6;
      if (*v6)
      {
        v5[2] = (unint64_t)v11;
        operator delete(v11);
      }
      MEMORY[0x219A19A08](v5, 0x1080C409938AC02);
    }
  }
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)(v7 + 1), a2);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 3;
  *(_DWORD *)a1 = 0;
}

void sub_217F04A14(_Unwind_Exception *a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  void *v5;

  MEMORY[0x219A19A08](v2, 0x1080C409938AC02);
  do
    v4 = __ldaxr(v1);
  while (__stlxr(v4 - 1, v1));
  if (v1 && v4 == 1)
  {
    v5 = (void *)v1[1];
    if (v5)
    {
      v1[2] = (unint64_t)v5;
      operator delete(v5);
    }
    MEMORY[0x219A19A08](v1, 0x1080C409938AC02);
  }
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<turi::flexible_type> const>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = 1;
  v5 = (_QWORD *)v4;
  if (*(_QWORD *)v4 != 1)
  {
    v6 = (_QWORD *)operator new();
    v7 = *(uint64_t **)(v4 + 8);
    *v6 = *(_QWORD *)v4;
    v6[2] = 0;
    v6[3] = 0;
    v6[1] = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v6 + 1, v7, *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - (_QWORD)v7) >> 4);
    *v6 = 1;
    do
    {
      v8 = __ldaxr((unint64_t *)v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unint64_t *)v4));
    v5 = v6;
    if (!v9)
    {
      v10 = (void **)(v4 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v10);
      MEMORY[0x219A19A08](v4, 0x1020C405E66F15BLL);
      v5 = v6;
    }
  }
  if (v5 + 1 != a2)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v5 + 1), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 4;
  *(_DWORD *)a1 = 0;
}

void sub_217F04BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  MEMORY[0x219A19A08](v11, 0x1020C405E66F15BLL);
  do
    v13 = __ldaxr((unint64_t *)v10);
  while (__stlxr(v13 - 1, (unint64_t *)v10));
  if (v10)
  {
    if (v13 == 1)
    {
      a10 = (void **)(v10 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      MEMORY[0x219A19A08](v10, 0x1020C405E66F15BLL);
    }
  }
  _Unwind_Resume(a1);
}

char **boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  char **result;
  void **v11;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = 1;
  v5 = (_QWORD *)v4;
  if (*(_QWORD *)v4 != 1)
  {
    v6 = (_QWORD *)operator new();
    v7 = *(uint64_t **)(v4 + 8);
    *v6 = *(_QWORD *)v4;
    v6[2] = 0;
    v6[3] = 0;
    v6[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v6 + 1, v7, *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - (_QWORD)v7) >> 5);
    *v6 = 1;
    do
    {
      v8 = __ldaxr((unint64_t *)v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unint64_t *)v4));
    v5 = v6;
    if (!v9)
    {
      v11 = (void **)(v4 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v11);
      MEMORY[0x219A19A08](v4, 0x1020C405E66F15BLL);
      v5 = v6;
    }
  }
  result = (char **)(v5 + 1);
  if (v5 + 1 != a2)
    result = (char **)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 5);
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 5;
  *(_DWORD *)a1 = 0;
  return result;
}

void sub_217F04D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  MEMORY[0x219A19A08](v11, 0x1020C405E66F15BLL);
  do
    v13 = __ldaxr((unint64_t *)v10);
  while (__stlxr(v13 - 1, (unint64_t *)v10));
  if (v10)
  {
    if (v13 == 1)
    {
      a10 = (void **)(v10 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
      MEMORY[0x219A19A08](v10, 0x1020C405E66F15BLL);
    }
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::Plot>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D919E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::Plot>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D919E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::Plot>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

uint64_t std::map<std::string,turi::unary_op>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,turi::unary_op>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::unary_op> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_217F04F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::unary_op> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__construct_node<std::pair<std::string const,turi::unary_op> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__construct_node<std::pair<std::string const,turi::unary_op> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_217F05094(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 78, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F051A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_error_inst)", 46);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 78, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F05328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 79, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F054A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_datetime_inst)", 49);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 79, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F05628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 80, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F057A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flex_dict_inst)", 50);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 80, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F05928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 81, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F05AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flex_list_inst)", 50);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 81, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F05C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 82, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F05DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flex_image_inst)", 51);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 82, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F05F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 83, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F060A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_ndarray_inst)", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 83, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F06228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 84, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F063A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flexible_type_inst)", 54);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 84, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F06528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 85, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F066A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flex_enum_list_inst)", 55);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 85, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F06828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 86, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F069A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_sarray_inst)", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 86, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F06B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 87, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F06CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_sframe_inst)", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 87, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F06E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F06FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_variant_inst)", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F07128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 89, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F072A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_parameters_inst)", 51);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 89, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F07428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 90, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F075A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_model_inst)", 46);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 90, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F07728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 91, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F078A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_groupby_aggregator_inst)", 59);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 91, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F07A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F07BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_plot_inst)", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F07D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_3()
{
  JUMPOUT(0x219A19A08);
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return turi::flexible_type_fail(0);
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void OUTLINED_FUNCTION_27_0(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_28_0()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 8));
}

void OUTLINED_FUNCTION_29()
{
  JUMPOUT(0x219A19A08);
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_32()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void OUTLINED_FUNCTION_43(uint64_t a1)
{
  boost::detail::shared_count::~shared_count((unsigned int **)(a1 + 16));
}

void OUTLINED_FUNCTION_56(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_57(void *__p, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = __p;
  operator delete(__p);
}

void __cxx_global_var_init_170()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_TuriCore_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  return __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &turi::_capi_server_initializer_lock, &dword_217E69000);
}

_QWORD *turi::capi_server_initializer@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &unk_24D919F50;
  a1[1] = v3;
  v3[3] = &unk_24D919FA0;
  result = v3 + 3;
  *a1 = result;
  return result;
}

void sub_217F081B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::prop_capi_unity_server_initializer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D919F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::prop_capi_unity_server_initializer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D919F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::prop_capi_unity_server_initializer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::prop_capi_unity_server_initializer::~prop_capi_unity_server_initializer(turi::prop_capi_unity_server_initializer *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x219A19A08);
}

void turi::prop_capi_unity_server_initializer::init_toolkits(uint64_t a1, uint64_t **a2)
{
  void *v3[2];
  char v4;
  std::string::size_type v5[3];
  void *__p[2];
  char v7;
  std::string::size_type v8[3];
  const void *v9[2];
  char v10;
  std::string::size_type v11[3];
  std::string::size_type *v12;

  turi::supervised::get_toolkit_function_registration((uint64_t *)v11);
  std::string::basic_string[abi:ne180100]<0>(v9, "_supervised_learning");
  turi::toolkit_function_registry::register_toolkit_function(a2, v11, v9);
  if (v10 < 0)
    operator delete((void *)v9[0]);
  v12 = v11;
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  turi::evaluation::get_toolkit_function_registration((uint64_t *)v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "evaluation");
  turi::toolkit_function_registry::register_toolkit_function(a2, v8, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  v12 = v8;
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  turi::supervised_2::get_toolkit_function_registration((uint64_t *)v5);
  std::string::basic_string[abi:ne180100]<0>(v3, "_supervised_learning_2");
  turi::toolkit_function_registry::register_toolkit_function(a2, v5, (const void **)v3);
  if (v4 < 0)
    operator delete(v3[0]);
  v12 = v5;
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_217F083C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;

  if (a15 < 0)
    operator delete(__p);
  *(_QWORD *)(v25 - 24) = &a16;
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 24));
  _Unwind_Resume(a1);
}

void turi::prop_capi_unity_server_initializer::init_models(turi::prop_capi_unity_server_initializer *this, uint64_t **a2)
{
  void *v3[2];
  char v4;
  uint64_t v5[3];
  void *__p[2];
  char v7;
  uint64_t v8[3];
  const void *v9[2];
  char v10;
  uint64_t v11[3];
  void **v12;

  turi::supervised::get_toolkit_class_registration(v11);
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  turi::toolkit_class_registry::register_toolkit_class(a2, v11, v9);
  if (v10 < 0)
    operator delete((void *)v9[0]);
  v12 = (void **)v11;
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100](&v12);
  turi::proprietary::style_transfer::get_toolkit_class_registration(v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::toolkit_class_registry::register_toolkit_class(a2, v8, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  v12 = (void **)v8;
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100](&v12);
  turi::supervised_2::get_toolkit_class_registration(v5);
  std::string::basic_string[abi:ne180100]<0>(v3, "");
  turi::toolkit_class_registry::register_toolkit_class(a2, v5, (const void **)v3);
  if (v4 < 0)
    operator delete(v3[0]);
  v12 = (void **)v5;
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_217F08538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;

  if (a15 < 0)
    operator delete(__p);
  *(_QWORD *)(v25 - 24) = &a16;
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 24));
  _Unwind_Resume(a1);
}

void std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD **)(a2 + 128);
  if (v3 == (_QWORD *)(a2 + 104))
  {
    v4 = 4;
    v3 = (_QWORD *)(a2 + 104);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a2 + 96);
  if (v5 == (_QWORD *)(a2 + 72))
  {
    v6 = 4;
    v5 = (_QWORD *)(a2 + 72);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a2 + 48, *(_QWORD **)(a2 + 56));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a2 + 24, *(char **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void __cxx_global_var_init_4()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_capi_prop_initialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/GLMRegressor.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_GLMRegressor_DoubleArray_default_instance_ = (uint64_t)&off_24D919FF0;
  unk_254FF5FD0 = 0;
  qword_254FF5FD8 = 0;
  unk_254FF5FE0 = 0;
  dword_254FF5FEC = 0;
  byte_254FF5FF0 = 1;
  CoreML::Specification::_GLMRegressor_default_instance_ = (uint64_t)&off_24D91A088;
  result = 0.0;
  unk_254FF6000 = 0u;
  unk_254FF6010 = 0u;
  unk_254FF6020 = 0u;
  dword_254FF6034 = 0;
  unk_254FF6038 = 0;
  byte_254FF6040 = 1;
  return result;
}

void CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(CoreML::Specification::protobuf_GLMRegressor_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_217F088AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMRegressor_DoubleArray *CoreML::Specification::GLMRegressor_DoubleArray::GLMRegressor_DoubleArray(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D919FF0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::GLMRegressor_DoubleArray *)&CoreML::Specification::_GLMRegressor_DoubleArray_default_instance_)
    CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_217F08918(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GLMRegressor_DoubleArray::~GLMRegressor_DoubleArray(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D919FF0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::GLMRegressor_DoubleArray::~GLMRegressor_DoubleArray(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::GLMRegressor_DoubleArray *CoreML::Specification::GLMRegressor_DoubleArray::New(CoreML::Specification::GLMRegressor_DoubleArray *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::GLMRegressor_DoubleArray *v3;

  v3 = (CoreML::Specification::GLMRegressor_DoubleArray *)operator new();
  CoreML::Specification::GLMRegressor_DoubleArray::GLMRegressor_DoubleArray(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::GLMRegressor_DoubleArray>(a2, v3);
  return v3;
}

void sub_217F08A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GLMRegressor_DoubleArray>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMRegressor_DoubleArray>);
  return result;
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::GLMRegressor_DoubleArray::MergePartialFromCodedStream(CoreML::Specification::GLMRegressor_DoubleArray *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  signed int v21;
  uint64_t v22;
  _BOOL8 result;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *v5;
      v14 = VarintSizeAsIntFallback >> 3;
      v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v15 == -1)
        v17 = v16;
      if (v17 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1)
          v18 = 1;
        else
          v18 = VarintSizeAsIntFallback >> 3;
        do
        {
          v28 = 0;
          v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result)
              return result;
            v20 = v28;
          }
          else
          {
            v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            v21 = *v5;
          }
          v22 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_QWORD *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      v25 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      v25 = *((_QWORD *)this + 3);
      v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1)
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
    }
    *v5 = v24;
    v27 = v25 + 8;
    if (!v25)
      v27 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v13;
    return result;
  }
  return 0;
}

BOOL _tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(int a1, unsigned int a2, unint64_t **this, uint64_t a4)
{
  unint64_t *v8;
  unint64_t v9;
  signed int v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  _BOOL8 result;
  unint64_t v27;

  v27 = 0;
  v8 = *this;
  if ((int)(*((_DWORD *)this + 2) - *this) < 8)
  {
    result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v27);
    if (!result)
      return result;
    v9 = v27;
  }
  else
  {
    v9 = *v8;
    *this = v8 + 1;
  }
  v10 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 4))
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a4, v10 + 1);
    v10 = *(_DWORD *)a4;
  }
  v11 = *(_QWORD *)(a4 + 8);
  v12 = v10 + 1;
  *(_DWORD *)a4 = v10 + 1;
  *(_QWORD *)(v11 + 8 * v10 + 8) = v9;
  v13 = *this;
  v14 = *((_DWORD *)this + 2) - *this;
  if (v14 >= 1)
  {
    v15 = a1 + 8;
    v16 = *(_DWORD *)(a4 + 4) - v12;
    v17 = v14 / (a1 + 8);
    if (v17 >= v16)
      v18 = *(_DWORD *)(a4 + 4) - v12;
    else
      v18 = v14 / (a1 + 8);
    if (v18 < 1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      v19 = 0;
      v20 = v10 + 2;
      v21 = v11 + 8 * v12 + 8;
      v22 = v17;
      if (v17 >= (uint64_t)v16)
        v22 = v16;
      do
      {
        if (a2 > 0x7F)
        {
          if (a2 >> 14
            || (a2 & 0x7F | 0x80) != *(unsigned __int8 *)v13
            || *((unsigned __int8 *)v13 + 1) != (a2 >> 7))
          {
            goto LABEL_22;
          }
          v23 = (unint64_t *)((char *)v13 + 2);
        }
        else
        {
          v24 = *(unsigned __int8 *)v13;
          v23 = (unint64_t *)((char *)v13 + 1);
          if (v24 != a2)
            goto LABEL_22;
        }
        v25 = *v23;
        v13 = v23 + 1;
        *(_DWORD *)a4 = v20 + v19;
        *(_QWORD *)(v21 + 8 * v19++) = v25;
      }
      while (v22 != (_DWORD)v19);
      LODWORD(v19) = v18;
    }
LABEL_22:
    if ((int)v19 * v15 >= 1)
      _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)this, v19 * v15);
  }
  return 1;
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, (const double *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::ByteSizeLong(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t *CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(uint64_t *this, const CoreML::Specification::GLMRegressor_DoubleArray *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v7 = *((_DWORD *)v3 + 4);
    v6 = (unsigned int *)(v3 + 2);
    _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v7 + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v6 + 1) + 8 * (int)*v6 + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::IsInitialized(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  return 1;
}

_QWORD *CoreML::Specification::GLMRegressor_DoubleArray::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMRegressor.DoubleArray");
}

CoreML::Specification::GLMRegressor *CoreML::Specification::GLMRegressor::GLMRegressor(CoreML::Specification::GLMRegressor *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24D91A088;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != (CoreML::Specification::GLMRegressor *)&CoreML::Specification::_GLMRegressor_default_instance_)
    CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(this);
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_217F090B4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  v4 = v2;
  v6 = *(_QWORD **)(v4 + 48);
  if (v6)
  {
    if (!*v6)
      operator delete(v6);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMRegressor *CoreML::Specification::GLMRegressor::GLMRegressor(CoreML::Specification::GLMRegressor *this, const CoreML::Specification::GLMRegressor *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  signed int v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int *v10;
  int v11;
  uint64_t v12;

  *(_QWORD *)this = &off_24D91A088;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (uint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::GLMRegressor *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v5, (CoreML::Specification::GLMRegressor_DoubleArray **)v8, (CoreML::Specification::GLMRegressor_DoubleArray **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    v10 = (int *)*((_QWORD *)this + 4);
    if (*v10 < v9)
      *v10 = v9;
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v11 = *((_DWORD *)a2 + 10);
  if (v11)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 10, v11);
    memcpy((void *)(*((_QWORD *)this + 6) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  }
  *((_DWORD *)this + 16) = 0;
  v12 = *((_QWORD *)a2 + 1);
  if ((v12 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v12 & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  return this;
}

void sub_217F091F8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;

  v5 = *(_QWORD **)(v3 + 48);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GLMRegressor::~GLMRegressor(CoreML::Specification::GLMRegressor *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D91A088;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::GLMRegressor::~GLMRegressor(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::GLMRegressor::default_instance(CoreML::Specification::GLMRegressor *this)
{
  CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(this);
  return &CoreML::Specification::_GLMRegressor_default_instance_;
}

CoreML::Specification::GLMRegressor *CoreML::Specification::GLMRegressor::New(CoreML::Specification::GLMRegressor *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::GLMRegressor *v3;

  v3 = (CoreML::Specification::GLMRegressor *)operator new();
  CoreML::Specification::GLMRegressor::GLMRegressor(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::GLMRegressor>(a2, v3);
  return v3;
}

void sub_217F09328(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C404133E315);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GLMRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMRegressor>);
  return result;
}

uint64_t CoreML::Specification::GLMRegressor::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

BOOL CoreML::Specification::GLMRegressor::MergePartialFromCodedStream(CoreML::Specification::GLMRegressor *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  unsigned int v11;
  CoreML::Specification::GLMRegressor_DoubleArray *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  char *v16;
  int v17;
  char *v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  _BOOL8 result;
  signed int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  signed int v33;
  uint64_t v34;
  signed int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Varint32Fallback;
  unint64_t v40;

  v5 = (unsigned int *)((char *)this + 40);
  v6 = (char *)this + 16;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              v7 = *a2;
              if (*a2 < a2[1])
                break;
              v8 = 0;
LABEL_7:
              TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
              v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
              if ((v9 & 0x100000000) != 0)
                goto LABEL_8;
LABEL_27:
              if ((_DWORD)v9)
                v20 = (v9 & 7) == 4;
              else
                v20 = 1;
              if (v20)
                return 1;
              if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
            }
            v8 = *v7;
            if (*v7 < 1)
              goto LABEL_7;
            *a2 = v7 + 1;
            v9 = v8 | 0x100000000;
            if ((v9 & 0x100000000) == 0)
              goto LABEL_27;
LABEL_8:
            v11 = v9 >> 3;
            if (v9 >> 3 != 3)
              break;
            if (v9 != 24)
              goto LABEL_27;
            v16 = *a2;
            if (*a2 >= a2[1])
            {
              v17 = 0;
            }
            else
            {
              v17 = *v16;
              if ((*v16 & 0x80000000) == 0)
              {
                *a2 = v16 + 1;
                goto LABEL_70;
              }
            }
            Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v17);
            v17 = Varint32Fallback;
            if (Varint32Fallback < 0)
              return 0;
LABEL_70:
            *((_DWORD *)this + 15) = v17;
          }
          if (v11 == 2)
            break;
          if (v11 != 1 || v9 != 10)
            goto LABEL_27;
          v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((uint64_t)v6);
          v14 = *a2;
          if (*a2 >= a2[1] || *v14 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v14;
            *a2 = v14 + 1;
          }
          v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v21 & 0x8000000000000000) == 0)
          {
            v23 = v21;
            result = CoreML::Specification::GLMRegressor_DoubleArray::MergePartialFromCodedStream(v13, a2, v22);
            if (!result)
              return result;
            if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v23))
            {
              continue;
            }
          }
          return 0;
        }
        if (v9 != 17)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0x12u, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v9 != 18)
        goto LABEL_27;
      v18 = *a2;
      if (*a2 >= a2[1] || *v18 < 0)
      {
        v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v19 & 0x80000000) != 0)
          return 0;
      }
      else
      {
        v19 = *v18;
        *a2 = v18 + 1;
      }
      if ((v19 & 7) != 0)
        return 0;
      v25 = *v5;
      v26 = v19 >> 3;
      v27 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v28 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v28 >= v27)
        v29 = v27;
      else
        v29 = v28;
      if (v27 == -1)
        v29 = v28;
      if (v29 >= (uint64_t)v19)
        break;
      if (v19 >= 8)
      {
        if (v26 <= 1)
          v30 = 1;
        else
          v30 = v19 >> 3;
        do
        {
          v40 = 0;
          v31 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v40);
            if (!result)
              return result;
            v32 = v40;
          }
          else
          {
            v32 = *v31;
            *a2 = (char *)(v31 + 1);
          }
          v33 = *((_DWORD *)this + 10);
          if (v33 == *((_DWORD *)this + 11))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v33 + 1);
            v33 = *v5;
          }
          v34 = *((_QWORD *)this + 6);
          *((_DWORD *)this + 10) = v33 + 1;
          *(_QWORD *)(v34 + 8 * v33 + 8) = v32;
          --v30;
        }
        while (v30);
      }
    }
    v35 = v25 + v26;
    if ((int)*v5 >= (int)(v25 + v26))
    {
      v36 = *((_QWORD *)this + 6);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + v26);
      v36 = *((_QWORD *)this + 6);
      v37 = 8 * v35 - 8 * *((int *)this + 10);
      if (v37 >= 1)
        bzero((void *)(v36 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v37 >> 3) - ((unint64_t)v37 > 7)) + 8);
    }
    *v5 = v35;
    v38 = v36 + 8;
    if (!v36)
      v38 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v38 + 8 * v25), v19));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v25;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::GLMRegressor::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  _tc_google::protobuf::internal::WireFormatLite *v16;
  signed int v17;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  if (*(int *)(v5 + 40) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      v8 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v8 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v8;
    }
    v9 = *(_DWORD *)(v5 + 56);
    if (v8 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v9);
    }
    else
    {
      v10 = *((_QWORD *)a2 + 1);
      if (v9 < 0x80)
      {
        v12 = *(_DWORD *)(v5 + 56);
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v11++ = v9 | 0x80;
          v12 = v9 >> 7;
          v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
      }
      *v11 = v12;
      v14 = (_DWORD)v11 - v10 + 1;
      *((_QWORD *)a2 + 1) += v14;
      *((_DWORD *)a2 + 4) -= v14;
    }
    v15 = *(_QWORD *)(v5 + 48);
    if (v15)
      v16 = (_tc_google::protobuf::internal::WireFormatLite *)(v15 + 8);
    else
      v16 = 0;
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v16, (const double *)*(unsigned int *)(v5 + 40), a2, a4);
  }
  v17 = *(_DWORD *)(v5 + 60);
  if (v17)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt32(3, v17, a2, a4);
  return this;
}

uint64_t CoreML::Specification::GLMRegressor::ByteSizeLong(CoreML::Specification::GLMRegressor *this)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 4);
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = *(unsigned int **)(v3 + 8 * v2 + 8);
      v6 = v5[4];
      v7 = 8 * v6;
      if ((_DWORD)v6)
      {
        if ((v7 & 0x80000000) != 0)
          v8 = 11;
        else
          v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v8 = 0;
      }
      v9 = v8 + v7;
      v5[8] = v7;
      v5[9] = v9;
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v2;
    }
    while (v1 != v2);
  }
  else
  {
    v4 = 0;
  }
  v10 = *((unsigned int *)this + 10);
  v11 = 8 * v10;
  if ((_DWORD)v10)
  {
    if ((v11 & 0x80000000) != 0)
      v12 = 11;
    else
      v12 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v4 += v12;
  }
  *((_DWORD *)this + 14) = v11;
  v13 = v4 + v11;
  v14 = *((_DWORD *)this + 15);
  if (v14)
  {
    if (v14 < 0)
      v15 = 11;
    else
      v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v13 += v15;
  }
  *((_DWORD *)this + 16) = v13;
  return v13;
}

uint64_t *CoreML::Specification::GLMRegressor::MergeFrom(uint64_t *this, const CoreML::Specification::GLMRegressor *a2)
{
  uint64_t *v3;
  uint64_t v4;
  signed int v5;
  CoreML::Specification::GLMRegressor_DoubleArray **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3 + 2, (CoreML::Specification::GLMRegressor_DoubleArray **)v7, v6, v5, *(_DWORD *)v3[4] - *((_DWORD *)v3 + 6));
    v8 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v8;
    v9 = (int *)v3[4];
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 10);
  if (v10)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)v3 + 10, *((_DWORD *)v3 + 10) + v10);
    this = (uint64_t *)memcpy((void *)(v3[6] + 8 * *((int *)v3 + 10) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)v3 + 10) += *((_DWORD *)a2 + 10);
  }
  v11 = *((_DWORD *)a2 + 15);
  if (v11)
    *((_DWORD *)v3 + 15) = v11;
  return this;
}

uint64_t CoreML::Specification::GLMRegressor::IsInitialized(CoreML::Specification::GLMRegressor *this)
{
  return 1;
}

_QWORD *CoreML::Specification::GLMRegressor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMRegressor");
}

CoreML::Specification::GLMRegressor_DoubleArray *CoreML::Specification::GLMRegressor_DoubleArray::New(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  return CoreML::Specification::GLMRegressor_DoubleArray::New(this, 0);
}

uint64_t _tc_google::protobuf::MessageLite::GetMaybeArenaPointer(_tc_google::protobuf::MessageLite *this)
{
  return (*(uint64_t (**)(_tc_google::protobuf::MessageLite *))(*(_QWORD *)this + 40))(this);
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::GetCachedSize(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  return *((unsigned int *)this + 9);
}

CoreML::Specification::GLMRegressor *CoreML::Specification::GLMRegressor::New(CoreML::Specification::GLMRegressor *this)
{
  return CoreML::Specification::GLMRegressor::New(this, 0);
}

uint64_t CoreML::Specification::GLMRegressor::GetCachedSize(CoreML::Specification::GLMRegressor *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t *_tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 24) && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      MEMORY[0x219A19A08](v3, 0x1032C402ED93987);
    }
  }
  *a1 = 0;
  return a1;
}

void _tc_google::protobuf::RepeatedField<double>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  _tc_google::protobuf::Arena **v4;
  _tc_google::protobuf::Arena *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *Aligned;
  uint64_t v10;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (_tc_google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    v8 = 8 * v7;
    if (v5)
      Aligned = _tc_google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x24BEDB778], v8 + 8);
    else
      Aligned = operator new(v8 + 8);
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v10 = *a1;
    if ((int)v10 >= 1)
      memcpy(Aligned + 1, v4 + 1, 8 * v10);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

CoreML::Specification::GLMRegressor_DoubleArray *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::GLMRegressor_DoubleArray *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::GLMRegressor_DoubleArray **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::GLMRegressor_DoubleArray::GLMRegressor_DoubleArray(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMRegressor_DoubleArray>);
  }
  else
  {
    Aligned = (CoreML::Specification::GLMRegressor_DoubleArray *)operator new();
    CoreML::Specification::GLMRegressor_DoubleArray::GLMRegressor_DoubleArray(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217F09CF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMRegressor_DoubleArray>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

std::string *_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(uint64_t *a1, uint64_t a2)
{
  std::string *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;

  if ((*a1 & 1) != 0)
    v3 = (std::string *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = (std::string *)_tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(a1);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  return std::string::append(v3, v5, v6);
}

uint64_t _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(uint64_t *a1)
{
  _tc_google::protobuf::Arena *v2;
  uint64_t Aligned;

  v2 = (_tc_google::protobuf::Arena *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  if ((*a1 & 1) != 0)
  {
    v2 = (_tc_google::protobuf::Arena *)*((_QWORD *)v2 + 3);
    if (v2)
      goto LABEL_3;
LABEL_5:
    Aligned = operator new();
    *(_OWORD *)Aligned = 0u;
    *(_OWORD *)(Aligned + 16) = 0u;
    goto LABEL_6;
  }
  if (!v2)
    goto LABEL_5;
LABEL_3:
  *(_OWORD *)Aligned = 0u;
  *(_OWORD *)(Aligned + 16) = 0u;
  _tc_google::protobuf::Arena::AddListNode(v2, (void *)Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::Container>);
LABEL_6:
  *a1 = Aligned | 1;
  *(_QWORD *)(Aligned + 24) = v2;
  return Aligned;
}

void _tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::Container>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMRegressor_DoubleArray>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMRegressor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(uint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::GLMRegressor_DoubleArray **v11;
  CoreML::Specification::GLMRegressor_DoubleArray **v12;
  CoreML::Specification::GLMRegressor_DoubleArray *v13;
  CoreML::Specification::GLMRegressor_DoubleArray *v14;
  CoreML::Specification::GLMRegressor_DoubleArray *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::GLMRegressor_DoubleArray **v18;
  CoreML::Specification::GLMRegressor_DoubleArray **v19;
  CoreML::Specification::GLMRegressor_DoubleArray *v20;
  CoreML::Specification::GLMRegressor_DoubleArray *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::GLMRegressor_DoubleArray::GLMRegressor_DoubleArray(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMRegressor_DoubleArray>);
      }
      else
      {
        Aligned = (CoreML::Specification::GLMRegressor_DoubleArray *)operator new();
        CoreML::Specification::GLMRegressor_DoubleArray::GLMRegressor_DoubleArray(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_217F09FC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(CoreML::Specification::GLMRegressor_DoubleArray *a1, CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  return CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)this, a1);
}

uint64_t _GLOBAL__sub_I_GLMRegressor_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_217F0A1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_0()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *std::seed_seq::seed_seq[abi:ne180100]<int,(void *)0>(_QWORD *a1, int *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::seed_seq::__init[abi:ne180100]<int const*>((uint64_t)a1, a2, &a2[a3]);
  return a1;
}

void sub_217F0A378(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::seed_seq::__init[abi:ne180100]<int const*>(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  _QWORD *v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_DWORD **)(a1 + 8);
    do
    {
      v8 = *v4;
      if ((unint64_t)v7 >= *v6)
      {
        v10 = *(_DWORD **)a1;
        v11 = ((uint64_t)v7 - *(_QWORD *)a1) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v13 = *v6 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v14);
          v10 = *(_DWORD **)a1;
          v7 = *(_DWORD **)(a1 + 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        *(_DWORD *)v16 = v8;
        v9 = v16 + 4;
        while (v7 != v10)
        {
          v17 = *--v7;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a1 + 16) = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v7 = v8;
        v9 = v7 + 1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      ++v4;
      v7 = v9;
    }
    while (v4 != a3);
  }
}

void *std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::__seed<std::seed_seq>(_QWORD *a1, unint64_t a2)
{
  void *result;
  uint64_t v4;
  unsigned int __src[624];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  std::seed_seq::generate[abi:ne180100]<unsigned int *>(a2, __src, (unsigned int *)&v6);
  result = memcpy(a1, __src, 0x9C0uLL);
  a1[312] = 0;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    v4 = 4;
    while (!*(_DWORD *)((char *)a1 + v4))
    {
      v4 += 4;
      if (v4 == 2496)
      {
        *(_DWORD *)a1 = 0x80000000;
        return result;
      }
    }
  }
  return result;
}

unint64_t std::seed_seq::generate[abi:ne180100]<unsigned int *>(unint64_t result, unsigned int *__b, unsigned int *a3)
{
  int **v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;

  if (__b != a3)
  {
    v4 = (int **)result;
    v5 = (char *)a3 - (char *)__b;
    if ((char *)a3 - (char *)__b >= 1)
      memset(__b, 139, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    v6 = v5 >> 2;
    v8 = *v4;
    v7 = v4[1];
    v9 = (char *)v7 - (char *)*v4;
    v10 = v9 >> 2;
    v11 = 11;
    v12 = 7;
    v13 = 5;
    v14 = 3;
    v15 = (v5 >> 2) - 1;
    if ((unint64_t)v5 <= 0x18)
      v14 = v15 >> 1;
    if ((unint64_t)v5 <= 0x98)
      v13 = v14;
    if ((unint64_t)v5 <= 0x10C)
      v12 = v13;
    if ((unint64_t)v5 <= 0x9B8)
      v11 = v12;
    v16 = (unint64_t)v9 >> 2;
    v17 = (v6 - v11) >> 1;
    v18 = v11 + v17;
    v19 = v10 + 1;
    if (v10 + 1 > v6)
      v20 = v10 + 1;
    else
      v20 = v5 >> 2;
    v21 = __b[v17];
    v22 = 1664525 * (*__b ^ __b[v15] ^ v21 ^ ((*__b ^ __b[v15] ^ v21) >> 27));
    __b[v17] = v22 + v21;
    v23 = v22 + v16;
    __b[v18] += v23;
    *__b = v23;
    v24 = v17 % v6;
    result = v18 / v6;
    v25 = v18 % v6;
    if (v7 == v8)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v27 = 2;
      if (v19 > 2)
        v27 = v10 + 1;
      result = v27 - 1;
      do
      {
        if (v26 + 1 == v6)
          v26 = 0;
        else
          ++v26;
        if (v15 + 1 == v6)
          v15 = 0;
        else
          ++v15;
        if (v24 + 1 == v6)
          v24 = 0;
        else
          ++v24;
        if (v25 + 1 == v6)
          v25 = 0;
        else
          ++v25;
        v28 = __b[v24];
        v29 = 1664525 * (__b[v26] ^ __b[v15] ^ v28 ^ ((__b[v26] ^ __b[v15] ^ v28) >> 27));
        __b[v24] = v29 + v28;
        v30 = *v8++;
        v31 = v30 + v26 + v29;
        __b[v25] += v31;
        __b[v26] = v31;
        --result;
      }
      while (result);
    }
    if (v19 < v6)
    {
      v32 = ~v10 + v20;
      do
      {
        if (v26 + 1 == v6)
          v26 = 0;
        else
          ++v26;
        if (v15 + 1 == v6)
          v15 = 0;
        else
          ++v15;
        if (v24 + 1 == v6)
          v24 = 0;
        else
          ++v24;
        if (v25 + 1 == v6)
          v25 = 0;
        else
          ++v25;
        v33 = __b[v24];
        result = __b[v15];
        v34 = __b[v26] ^ result ^ v33;
        v35 = 1664525 * (v34 ^ (v34 >> 27));
        __b[v24] = v35 + v33;
        v36 = v35 + v26;
        __b[v25] += v36;
        __b[v26] = v36;
        --v32;
      }
      while (v32);
    }
    if (v20 < v20 + v6)
    {
      v37 = v5 >> 2;
      do
      {
        if (v26 + 1 == v6)
          v26 = 0;
        else
          ++v26;
        if (v15 + 1 == v6)
          v15 = 0;
        else
          ++v15;
        if (v24 + 1 == v6)
          v24 = 0;
        else
          ++v24;
        if (v25 + 1 == v6)
          v25 = 0;
        else
          ++v25;
        v38 = __b[v24];
        v39 = v38 + __b[v26] + __b[v15];
        v40 = 1566083941 * (v39 ^ (v39 >> 27));
        __b[v24] = v40 ^ v38;
        v41 = v40 - v26;
        __b[v25] ^= v41;
        __b[v26] = v41;
        --v37;
      }
      while (v37);
    }
  }
  return result;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_217F0A8F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_har_data_augmenter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

char *std::vector<unsigned long>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_217F0AB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_impl::ndarray<double>::canonicalize(uint64_t **a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *__p;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t *v52;
  uint64_t v53;

  if (turi::flexible_type_impl::ndarray<double>::is_full(a1)
    && turi::flexible_type_impl::ndarray<double>::has_canonical_stride((uint64_t)a1))
  {
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)a1);
  }
  else
  {
    if (!turi::flexible_type_impl::ndarray<double>::is_valid(a1))
      turi::flexible_type_impl::ndarray<double>::canonicalize(void)const::{lambda(void)#1}::operator()();
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    __p = 0;
    v46 = 0;
    v47 = 0;
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)&v51, (uint64_t)&v48, (uint64_t)&__p, 0);
    if (__p)
    {
      v46 = __p;
      operator delete(__p);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = (uint64_t *)v51;
      operator delete(v51);
    }
    a2[8] = 0;
    if (a2 != a1)
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2 + 16, (char *)a1[2], (uint64_t)a1[3], a1[3] - a1[2]);
    v5 = a1[2];
    v4 = a1[3];
    if (v4 == v5 || !*a1)
    {
      v6 = 0;
    }
    else
    {
      v6 = 1;
      do
      {
        v7 = *v5++;
        v6 *= v7;
      }
      while (v5 != v4);
    }
    std::vector<double>::resize((uint64_t)*a2, v6);
    v8 = (uint64_t *)(a2 + 5);
    std::vector<unsigned long>::resize((uint64_t)(a2 + 5), a1[3] - a1[2]);
    v10 = (char *)a2[2];
    v9 = (char *)a2[3];
    v11 = v9 - v10;
    if (v9 != v10 && (*a2)[1] != **a2)
    {
      v12 = v11 >> 3;
      v13 = *v8;
      *(_QWORD *)(*v8 + 8 * (v11 >> 3) - 8) = 1;
      if (v11 >= 9)
      {
        v14 = v10 - 8;
        v15 = v13 - 16;
        v16 = 1;
        do
        {
          v16 *= *(_QWORD *)&v14[8 * v12];
          *(_QWORD *)(v15 + 8 * v12) = v16;
          v17 = v12 - 2;
          --v12;
        }
        while (v17 > 0);
      }
      v18 = a1[3] - a1[2];
      v48 = 0;
      std::vector<unsigned long>::vector(&v51, v18, &v48);
      v19 = 0;
      v20 = (uint64_t *)v51;
      v21 = v52;
      v22 = **a1;
      v23 = **a2;
      v24 = (char *)v52 - (_BYTE *)v51;
      v25 = ((char *)v52 - (_BYTE *)v51) >> 3;
      v26 = v25 - 1;
      if (v25 <= 1)
        v27 = 1;
      else
        v27 = ((char *)v52 - (_BYTE *)v51) >> 3;
      do
      {
        if (v21 == v20)
        {
          v28 = 0;
        }
        else
        {
          v28 = 0;
          v29 = a1[5];
          v30 = v20;
          v31 = v27;
          do
          {
            v33 = *v30++;
            v32 = v33;
            v34 = *v29++;
            v28 += v34 * v32;
            --v31;
          }
          while (v31);
        }
        *(_QWORD *)(v23 + 8 * v19) = *(_QWORD *)(v22 + 8 * ((_QWORD)a1[8] + v28));
        v35 = v25;
        v36 = v25 - 1;
        if (v24 >= 1)
        {
          v37 = a1[2];
          v38 = v20[v26] + 1;
          v20[v26] = v38;
          if (v38 >= v37[v26])
          {
            v39 = v37 - 2;
            v40 = v25;
            v41 = (unint64_t *)((char *)v20 + (v24 & 0xFFFFFFFFFFFFFFF8) - 16);
            while (1)
            {
              v42 = v40 - 1;
              v41[1] = 0;
              if ((uint64_t)(v40 - 1) <= 0)
                goto LABEL_43;
              v43 = *v41 + 1;
              *v41-- = v43;
              v44 = v39[v40--];
              if (v43 < v44)
              {
                v35 = 1;
                if (((v42 - 1) & 0x8000000000000000) == 0)
                  goto LABEL_36;
                goto LABEL_42;
              }
            }
          }
          v35 = 1;
          v36 = v25 - 1;
        }
        if ((v36 & 0x8000000000000000) != 0)
          break;
LABEL_36:
        ++v19;
      }
      while (v35);
LABEL_42:
      if (!v20)
        return;
LABEL_43:
      v52 = v20;
      operator delete(v20);
    }
  }
}

void sub_217F0AE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  _QWORD *v16;

  turi::flexible_type_impl::ndarray<double>::~ndarray(v16);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_impl::ndarray<double>::elements(uint64_t *a1)
{
  turi::flexible_type_impl::ndarray<double>::ensure_unique(a1);
  if (!turi::flexible_type_impl::ndarray<double>::is_full(a1))
    turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
  return *a1;
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void turi::flexible_type_impl::ndarray<double>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 436, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F0B0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::flexible_type_impl::ndarray<double>::has_canonical_stride(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD **)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48) - (_QWORD)v1;
  if (!v2)
    return 1;
  if (!*v1)
    return 0;
  if ((unint64_t)v2 < 0x10)
    return 1;
  v4 = v2 >> 3;
  v5 = (unint64_t)(v2 >> 3) <= 2 ? 2 : v2 >> 3;
  v6 = v1[1];
  if (!v6)
    return 0;
  v7 = 0;
  v3 = 0;
  v8 = v5 - 2;
  do
  {
    if (v1[v7] < v6)
      break;
    v3 = v7 + 2 >= v4;
    if (v8 == v7)
      break;
    v6 = v1[v7++ + 2];
  }
  while (v6);
  return v3;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_217F0B208(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(unsigned __int8 *a1)
{
  int v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  turi::cityhash_local *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned int *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;

  v1 = a1[12];
  result = 0;
  switch(v1)
  {
    case 0:
      v4 = *(_QWORD *)a1;
      return 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * (v4 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995 * (v4 ^ 0xC3A5C85C97CB3127)) >> 47));
    case 1:
      v4 = *(_QWORD *)a1;
      return 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * (v4 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995 * (v4 ^ 0xC3A5C85C97CB3127)) >> 47));
    case 2:
      v5 = *(_QWORD *)a1;
      if (*(char *)(v5 + 31) < 0)
        return turi::cityhash_local::CityHash64(*(turi::cityhash_local **)(v5 + 8), *(_QWORD *)(v5 + 16));
      else
        return turi::cityhash_local::CityHash64((turi::cityhash_local *)(v5 + 8), *(unsigned __int8 *)(v5 + 31));
    case 3:
      v6 = *(_QWORD *)a1;
      v7 = *(turi::cityhash_local **)(v6 + 8);
      v8 = *(_QWORD *)(v6 + 16);
      return turi::cityhash_local::CityHash64(v7, v8 - (_QWORD)v7);
    case 4:
      return turi::flexible_type_impl::city_hash_visitor::operator()((uint64_t)&v29, (uint64_t *)(*(_QWORD *)a1 + 8));
    case 5:
      return turi::flexible_type_impl::city_hash_visitor::operator()((uint64_t)&v29, (uint64_t *)(*(_QWORD *)a1 + 8));
    case 6:
      v9 = *(_QWORD *)a1;
      v10 = *((int *)a1 + 2);
      v11 = (0xC6A4A7935BD1E995 * ((v9 << 8 >> 8) ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                               * ((v9 << 8 >> 8) ^ 0xC3A5C85C97CB3127)) >> 47);
      v12 = -25;
      if (v9 >> 56 < 0)
        v12 = 25;
      v13 = (0xC6A4A7935BD1E995 * ((v12 + (v9 >> 56)) ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                                   * ((v12 + (v9 >> 56)) ^ 0xC3A5C85C97CB3127)) >> 47);
      v14 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x23994FF200000000 * v11) | ((0x309B56691CCA7F9 * v11) >> 31))) ^ 0x73A3916AE45D01E5, 27);
      v15 = (5
           * (__ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v13) | ((0x60004CFCBE6C6FEBLL * v13) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v14+ 0x4231D716C8ADF0A2)+ 944331445) ^ (v14 + 0x4231D716C8ADF0A2);
      v16 = (0xC6A4A7935BD1E995 * (v10 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995 * (v10 ^ 0xC3A5C85C97CB3127)) >> 47);
      v17 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v15) | ((0x87C37B91114253D5 * v15) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
      return (5
            * (v17
             + __ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v16) | ((0x60004CFCBE6C6FEBLL * v16) >> 33))) ^ 0x73A3916AE45D01E5, 31))+ 944331445) ^ v17;
    case 7:
      return result;
    case 8:
      v18 = *(_QWORD *)a1;
      v19 = *(unsigned int **)(v18 + 16);
      v25 = v19;
      if (v19)
      {
        v20 = v19 + 2;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = *(_OWORD *)(v18 + 24);
      v23 = *(_OWORD *)(v18 + 40);
      v28 = *(_OWORD *)(v18 + 56);
      v27 = v23;
      v26 = v22;
      boost::detail::shared_count::~shared_count(&v25);
      return 0;
    case 9:
      v24 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v7 = *(turi::cityhash_local **)v24;
      v8 = *(_QWORD *)(v24 + 8);
      return turi::cityhash_local::CityHash64(v7, v8 - (_QWORD)v7);
    default:
      turi::apply_binary_op_ff();
  }
}

unint64_t turi::cityhash_local::CityHash64(turi::cityhash_local *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;

  if (a2 <= 0x20)
  {
    v2 = 0x9AE16A3B2F90404FLL;
    if (a2 > 0x10)
    {
      v3 = 2 * a2 - 0x651E95C4D06FBFB1;
      v17 = *((_QWORD *)this + 1);
      v6 = __ROR8__(v17 - 0x651E95C4D06FBFB1, 18)
         - 0x4B6D499041670D8DLL * *(_QWORD *)this
         + *(_QWORD *)((char *)this + a2 - 8) * v3;
      v7 = (__ROR8__(*(_QWORD *)((char *)this + a2 - 8) * v3, 30)
          + __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)this + v17, 43)
          - 0x651E95C4D06FBFB1 * *(_QWORD *)((char *)this + a2 - 16)) ^ v6;
      return (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3)) * v3) ^ (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3))
                                                                              * v3) >> 47))
           * v3;
    }
    if (a2 >= 8)
    {
      v3 = 2 * a2 - 0x651E95C4D06FBFB1;
      v4 = *(_QWORD *)this - 0x651E95C4D06FBFB1;
      v5 = v4 + __ROR8__(*(_QWORD *)((char *)this + a2 - 8), 37) * v3;
      v6 = (__ROR8__(v4, 25) + *(_QWORD *)((char *)this + a2 - 8)) * v3;
      v7 = v6 ^ v5;
      return (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3)) * v3) ^ (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3))
                                                                              * v3) >> 47))
           * v3;
    }
    if (a2 < 4)
    {
      if (!a2)
        return v2;
      v56 = (0xC3A5C85C97CB3127 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8)));
      goto LABEL_13;
    }
    v2 = 2 * a2 - 0x651E95C4D06FBFB1;
    v54 = *(unsigned int *)((char *)this + a2 - 4);
    v55 = (a2 + 8 * *(unsigned int *)this) ^ v54;
LABEL_12:
    v56 = (v54 ^ ((v55 * v2) >> 47) ^ (v55 * v2)) * v2;
LABEL_13:
    v2 *= v56 ^ (v56 >> 47);
    return v2;
  }
  if (a2 > 0x40)
  {
    v2 = 0x9DDFEA08EB382D69;
    v18 = *(_QWORD *)((char *)this + a2 - 48);
    v19 = *(_QWORD *)((char *)this + a2 - 40);
    v20 = *(_QWORD *)((char *)this + a2 - 24);
    v22 = *(_QWORD *)((char *)this + a2 - 64);
    v21 = *(_QWORD *)((char *)this + a2 - 56);
    v23 = *(_QWORD *)((char *)this + a2 - 16);
    v24 = *(_QWORD *)((char *)this + a2 - 8);
    v25 = v21 + v23;
    v26 = 0x9DDFEA08EB382D69
        * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ (v18 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ (v18 + a2))));
    v27 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
    v28 = (const char *)(v22 + a2 + v21 + v18);
    v29 = (unint64_t)&v28[v19];
    v30 = __ROR8__(v28, 44) + v22 + a2 + __ROR8__(v19 + v22 + a2 - 0x622015F714C7D297 * (v26 ^ (v26 >> 47)), 21);
    v31 = v21 + v23 + *(_QWORD *)((char *)this + a2 - 32) - 0x4B6D499041670D8DLL;
    v32 = v31 + v20 + v23;
    v33 = __ROR8__(v32, 44);
    v34 = v32 + v24;
    v35 = v33 + v31 + __ROR8__(v31 + v19 + v24, 21);
    v37 = *(_QWORD *)this;
    v36 = (_QWORD *)((char *)this + 32);
    v38 = v37 - 0x4B6D499041670D8DLL * v19;
    v39 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v40 = *(v36 - 3);
      v41 = (const char *)(v38 + v29 + v25 + v40);
      v42 = v36[2];
      v43 = v36[3];
      v44 = v36[1];
      v25 = v44 + v29 - 0x4B6D499041670D8DLL * __ROR8__(v25 + v30 + v42, 42);
      v45 = v27 + v34;
      v46 = *(v36 - 2);
      v47 = *(v36 - 1);
      v48 = *(v36 - 4) - 0x4B6D499041670D8DLL * v30;
      v49 = v48 + v34 + v47;
      v50 = v48 + v40 + v46;
      v29 = v50 + v47;
      v51 = __ROR8__(v50, 44) + v48;
      v52 = (0xB492B66FBE98F273 * __ROR8__(v41, 37)) ^ v35;
      v38 = 0xB492B66FBE98F273 * __ROR8__(v45, 33);
      v30 = v51 + __ROR8__(v49 + v52, 21);
      v53 = v38 + v35 + *v36;
      v34 = v53 + v44 + v42 + v43;
      v35 = __ROR8__(v53 + v44 + v42, 44) + v53 + __ROR8__(v25 + v46 + v53 + v43, 21);
      v36 += 8;
      v27 = v52;
      v39 += 64;
    }
    while (v39);
    v54 = v38
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)))) >> 47));
    v55 = v54 ^ (v52
               - 0x4B6D499041670D8DLL * (v25 ^ (v25 >> 47))
               - 0x622015F714C7D297
               * ((0x9DDFEA08EB382D69
                 * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ v29)))) ^ ((0x9DDFEA08EB382D69 * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ v29)))) >> 47)));
    goto LABEL_12;
  }
  v8 = 2 * a2 - 0x651E95C4D06FBFB1;
  v10 = *(_QWORD *)((char *)this + a2 - 32);
  v9 = *(_QWORD *)((char *)this + a2 - 24);
  v11 = 9 * *((_QWORD *)this + 3);
  v12 = *(_QWORD *)((char *)this + a2 - 8);
  v13 = *(_QWORD *)((char *)this + a2 - 16) * v8;
  v14 = v11 - 0x651E95C4D06FBFB1 * *((_QWORD *)this + 2);
  v15 = __ROR8__(v14, 42);
  v16 = v14
      + v9
      + *((_QWORD *)this + 1)
      + bswap64((v14+ v9+ v12+ v15+ v9+ bswap64((v11+ ((v12 - 0x651E95C4D06FBFB1 * *(_QWORD *)this) ^ v10)+ 1+ v13+ bswap64((__ROR8__(v12 - 0x651E95C4D06FBFB1 * *(_QWORD *)this, 43)+ 9 * (__ROR8__(*((_QWORD *)this + 1), 30) + v9)+ v11+ ((v12 - 0x651E95C4D06FBFB1 * *(_QWORD *)this) ^ v10)+ 1)* v8))* v8))* v8);
  return v15 + v9 + ((v13 + v10 + v16 * v8) ^ ((v13 + v10 + v16 * v8) >> 47)) * v8;
}

uint64_t std::equal_to<turi::flexible_type>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _BOOL8 v3;
  double v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  char v11;
  size_t v12;
  unsigned int v13;
  double *v14;
  double *v15;
  unint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  size_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;

  switch(*(_BYTE *)(a3 + 12))
  {
    case 0:
      v3 = 0;
      switch(a2[12])
      {
        case 0u:
          return *(_QWORD *)a2 == *(_QWORD *)a3;
        case 1u:
          v5 = *(double *)a2;
          v6 = *(_QWORD *)a3;
          return v5 == (double)v6;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          return *(_QWORD *)a3 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *((_DWORD *)a2 + 2) == 0;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      v3 = 0;
      switch(a2[12])
      {
        case 0u:
          v5 = *(double *)a3;
          v6 = *(_QWORD *)a2;
          return v5 == (double)v6;
        case 1u:
          return *(double *)a2 == *(double *)a3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          v71 = *(double *)a3;
          v72 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
          return vabdd_f64(v72, v71) < 0.0000005;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v7 = a2[12];
      v8 = v7 - 3 >= 7 && v7 >= 2;
      if (!v8)
        return 0;
      if (v7 != 2)
        turi::apply_binary_op_ff();
      v9 = *(_QWORD *)a3;
      v10 = *(double *)a2;
      v11 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      v12 = v11 < 0 ? *(_QWORD *)(*(_QWORD *)&v10 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      v73 = *(char *)(v9 + 31) < 0 ? *(_QWORD *)(v9 + 16) : *(unsigned __int8 *)(v9 + 31);
      if (v12 != v73)
        return 0;
      v74 = (_QWORD *)(*(_QWORD *)&v10 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        v74 = (_QWORD *)*v74;
      v75 = (_QWORD *)(v9 + 8);
      if ((*(_BYTE *)(v9 + 31) & 0x80) != 0)
        v75 = (_QWORD *)*v75;
      if (v11 < 0)
      {
        return memcmp(v74, v75, v12) == 0;
      }
      else
      {
        if (!v12)
          return 1;
        v76 = v12 - 1;
        do
        {
          v78 = *(unsigned __int8 *)v74;
          v74 = (_QWORD *)((char *)v74 + 1);
          v77 = v78;
          v80 = *(unsigned __int8 *)v75;
          v75 = (_QWORD *)((char *)v75 + 1);
          v79 = v80;
          v8 = v76-- != 0;
          v81 = v8;
          v3 = v77 == v79;
        }
        while (v77 == v79 && (v81 & 1) != 0);
      }
      return v3;
    case 3:
      v13 = a2[12];
      if (v13 > 9)
        turi::apply_binary_op_ff();
      if (v13 != 3)
        return 0;
      v14 = *(double **)(*(_QWORD *)a2 + 8);
      v15 = *(double **)(*(_QWORD *)a2 + 16);
      v16 = v15 - v14;
      v17 = *(double **)(*(_QWORD *)a3 + 8);
      if (v16 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v17) >> 3)
        return 0;
      if (v15 == v14)
        return 1;
      if (v16 <= 1)
        v18 = 1;
      else
        v18 = v15 - v14;
      if (*v14 != *v17)
        return 0;
      v19 = 1;
      do
      {
        v20 = v19;
        if (v18 == v19)
          break;
        v21 = v14[v19];
        v22 = v17[v19++];
      }
      while (v21 == v22);
      return v20 >= v16;
    case 4:
      v23 = a2[12];
      if (v23 > 9)
        turi::apply_binary_op_ff();
      if (v23 != 4)
        return 0;
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v83, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
    case 5:
      v25 = a2[12];
      if (v25 > 9)
        turi::apply_binary_op_ff();
      if (v25 != 5)
        return 0;
      return turi::flexible_type_impl::approx_equality_operator::operator()(&v83, *(_QWORD *)a2 + 8, *(_QWORD *)a3 + 8);
    case 6:
      v3 = 0;
      switch(a2[12])
      {
        case 0u:
          return *(_QWORD *)a2 == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && *(_DWORD *)(a3 + 8) == 0;
        case 1u:
          v72 = *(double *)a2;
          v71 = (double)*(int *)(a3 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
          return vabdd_f64(v72, v71) < 0.0000005;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          return ((*(_QWORD *)a3 ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a2 + 2) == *(_DWORD *)(a3 + 8);
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v26 = a2[12];
      if (v26 >= 0xA)
        turi::apply_binary_op_ff();
      return v26 == 7;
    case 8:
      v27 = a2[12];
      if (v27 < 8 || v27 == 9)
        return 0;
      if (v27 != 8)
        turi::apply_binary_op_ff();
      return turi::image_type::operator==(*(_QWORD *)a2 + 8, *(_QWORD *)a3 + 8);
    case 9:
      v30 = a2[12];
      if (v30 < 9)
        return 0;
      if (v30 != 9)
        turi::apply_binary_op_ff();
      v31 = *(_QWORD *)a3;
      v32 = *(_QWORD **)a2;
      if (*(_QWORD *)a3 == *(_QWORD *)a2)
        return 1;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v32 + 1), v31 + 8))
        return 0;
      v34 = (char *)v32[3];
      v33 = (char *)v32[4];
      v35 = v33 - v34;
      if (v33 == v34)
        return 1;
      if (!v32[1])
        return 1;
      v36 = 1;
      do
      {
        v37 = *(_QWORD *)v34;
        v34 += 8;
        v36 *= v37;
      }
      while (v34 != v33);
      if (!v36)
        return 1;
      v82 = 0;
      std::vector<unsigned long>::vector(&v83, v35 >> 3, &v82);
      v38 = v83;
      v39 = v84;
      v40 = **(_QWORD **)(v31 + 8);
      v41 = (char *)v84 - (char *)v83;
      v42 = v84 - v83;
      v43 = v42 - 1;
      if (v42 <= 1)
        v44 = 1;
      else
        v44 = v84 - v83;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (v39 == v38)
    {
      v52 = 0;
      v53 = *(double *)(*(_QWORD *)v32[1] + 8 * v32[9]);
    }
    else
    {
      v45 = 0;
      v46 = (uint64_t *)v32[6];
      v47 = v38;
      v48 = v44;
      do
      {
        v50 = *v47++;
        v49 = v50;
        v51 = *v46++;
        v45 += v51 * v49;
        --v48;
      }
      while (v48);
      v52 = 0;
      v53 = *(double *)(*(_QWORD *)v32[1] + 8 * (v32[9] + v45));
      v54 = *(uint64_t **)(v31 + 48);
      v55 = v38;
      v56 = v44;
      do
      {
        v58 = *v55++;
        v57 = v58;
        v59 = *v54++;
        v52 += v59 * v57;
        --v56;
      }
      while (v56);
    }
    v60 = *(double *)(v40 + 8 * (*(_QWORD *)(v31 + 72) + v52));
    v3 = v53 == v60;
    if (v53 != v60)
    {
LABEL_80:
      if (!v38)
        return v3;
      goto LABEL_115;
    }
    v61 = v42;
    v62 = v42 - 1;
    if (v41 >= 1)
      break;
LABEL_78:
    if ((v62 & 0x8000000000000000) != 0 || !v61)
      goto LABEL_80;
  }
  v63 = v32[3];
  v64 = v38[v43] + 1;
  v38[v43] = v64;
  if (v64 < *(_QWORD *)(v63 + 8 * v43))
  {
    v61 = 1;
    v62 = v42 - 1;
    goto LABEL_78;
  }
  v65 = v63 - 16;
  v66 = v42;
  v67 = (unint64_t *)((char *)v38 + (v41 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    v68 = v66 - 1;
    v67[1] = 0;
    if ((uint64_t)(v66 - 1) <= 0)
      break;
    v69 = *v67 + 1;
    *v67-- = v69;
    v70 = *(_QWORD *)(v65 + 8 * v66--);
    if (v69 < v70)
    {
      v62 = v68 - 1;
      v61 = 1;
      goto LABEL_78;
    }
  }
  v3 = 1;
LABEL_115:
  v84 = v38;
  operator delete(v38);
  return v3;
}

uint64_t _GLOBAL__sub_I_har_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)2006>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _DWORD *v5;
  _BOOL8 v6;
  uint64_t *v7;
  void *v8;
  int v9;
  int v10;
  _DWORD *v11;
  void *v12;
  void *v13;
  _DWORD *v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  __int128 __p;
  uint64_t v20;

  if (*(_QWORD *)(a1 + 16))
    v3 = *(uint64_t **)(a1 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) != 2006)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "Model not an audio feature print.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0)
      return;
    v8 = v18;
    goto LABEL_31;
  }
  CoreML::Result::Result((CoreML::Result *)&v18);
  v5 = operator new(4uLL);
  v12 = v5;
  *v5 = 5;
  v13 = v5 + 1;
  v14 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v12, (uint64_t)&v15);
  v18 = v15;
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
  __p = v16;
  v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v18);
  if (v6)
  {
    if (*(_DWORD *)(a1 + 44) == 2006)
      v7 = *(uint64_t **)(a1 + 32);
    else
      v7 = CoreML::Specification::CoreMLModels::AudioFeaturePrint::default_instance((CoreML::Specification::CoreMLModels::AudioFeaturePrint *)v6);
    v9 = *((_DWORD *)v7 + 7);
    if (!v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&v15, "Type for audio feature print not set");
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_21:
      if (SHIBYTE(v16) < 0)
        operator delete(v15);
      goto LABEL_29;
    }
    if (v9 == 20)
    {
      v10 = *(_DWORD *)(v7[2] + 16);
      if (v10 == 1)
      {
        v11 = operator new(4uLL);
        v12 = v11;
        *v11 = 5;
        v13 = v11 + 1;
        v14 = v11 + 1;
        CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v12, (uint64_t)&v15);
        v18 = v15;
        if (SHIBYTE(v20) < 0)
          operator delete((void *)__p);
        __p = v16;
        v20 = v17;
        HIBYTE(v17) = 0;
        LOBYTE(v16) = 0;
        if (v12)
        {
          v13 = v12;
          operator delete(v12);
        }
        CoreML::Result::good((CoreML::Result *)&v18);
      }
      else if (!v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, "Version for sound is invalid");
        CoreML::Result::Result((_DWORD *)a2, 13);
        goto LABEL_21;
      }
    }
  }
  *(_QWORD *)a2 = v18;
  *(_OWORD *)(a2 + 8) = __p;
  *(_QWORD *)(a2 + 24) = v20;
  __p = 0uLL;
  v20 = 0;
LABEL_29:
  if ((SHIBYTE(v20) & 0x80000000) == 0)
    return;
  v8 = (void *)__p;
LABEL_31:
  operator delete(v8);
}

void sub_217F0C108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(uint64_t a1@<X0>, int a2@<W1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE __p[24];
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  void *v17[2];
  uint64_t v18;

  CoreML::Result::Result((CoreML::Result *)&v16);
  v8 = *(_DWORD *)(a1 + 8);
  if (a2 && v8 > a2)
  {
    std::to_string(&v15, a2);
    v9 = std::string::insert(&v15, 0, "Feature descriptions exceeded ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a4, 9);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  else
  {
    if (v8 < 1)
    {
LABEL_15:
      *(_QWORD *)a4 = v16;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)v17;
      v12 = v18;
    }
    else
    {
      v11 = 0;
      while (1)
      {
        CoreML::validateSchemaTypes(a3, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11 + 8), (CoreML::Result *)__p);
        v16 = *(_QWORD *)__p;
        if (SHIBYTE(v18) < 0)
          operator delete(v17[0]);
        *(_OWORD *)v17 = *(_OWORD *)&__p[8];
        v18 = v14;
        if (!CoreML::Result::good((CoreML::Result *)&v16))
          break;
        if (++v11 >= *(int *)(a1 + 8))
          goto LABEL_15;
      }
      *(_QWORD *)a4 = v16;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)v17;
      v12 = v18;
    }
    *(_QWORD *)(a4 + 24) = v12;
  }
}

void sub_217F0C2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateSchemaTypes@<X0>(int **a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t *v6;
  int *v7;
  int *v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const void **v17;
  size_t v18;
  void **v19;
  const void *v20;
  void **v21;
  uint64_t v22;
  int *v23;
  int *v24;
  char v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  uint64_t v31;
  void *__p[2];
  unsigned __int8 v34;
  _QWORD v35[2];
  _QWORD v36[11];
  char v37;
  uint64_t v38;

  if (*(_QWORD *)(a2 + 32))
    v6 = *(uint64_t **)(a2 + 32);
  else
    v6 = &CoreML::Specification::_FeatureType_default_instance_;
  v7 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
  {
LABEL_8:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v35);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Unsupported type \"", 18);
    v11 = *(uint64_t **)(a2 + 32);
    if (!v11)
      v11 = &CoreML::Specification::_FeatureType_default_instance_;
    v12 = *((int *)v11 + 9);
    if (v12 > 7)
      v13 = "INVALID";
    else
      v13 = off_24D91A150[v12];
    v14 = strlen(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\" for feature \"", 15);
    v17 = *(const void ***)(a2 + 16);
    if (*((char *)v17 + 23) >= 0)
      v18 = *((unsigned __int8 *)v17 + 23);
    else
      v18 = (size_t)v17[1];
    v19 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 21);
    if ((v34 & 0x80u) != 0)
      v19 = (void **)__p[0];
    if (v18)
    {
      if (*((char *)v17 + 23) >= 0)
        v20 = v17;
      else
        v20 = *v17;
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "\". Should be one of: ");
    if ((v34 & 0x80u) == 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if ((v34 & 0x80u) == 0)
      v22 = v34;
    else
      v22 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v21, v22);
    if ((char)v34 < 0)
      operator delete(__p[0]);
    v23 = *a1;
    v24 = a1[1];
    if (*a1 != v24)
    {
      v25 = 1;
      do
      {
        if ((v25 & 1) == 0)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
        v26 = *v23;
        v27 = "INVALID";
        if (v26 <= 7)
          v27 = off_24D91A150[v26];
        v28 = strlen(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v27, v28);
        v25 = 0;
        ++v23;
      }
      while (v23 != v24);
    }
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
    v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result(a3, 8);
    if ((char)v34 < 0)
      operator delete(__p[0]);
    v35[0] = *MEMORY[0x24BEDB7F0];
    v31 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v36[0] = v31;
    v36[1] = MEMORY[0x24BEDB848] + 16;
    if (v37 < 0)
      operator delete((void *)v36[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (CoreML::Result *)MEMORY[0x219A198F4](&v38);
  }
  else
  {
    v9 = *((_DWORD *)v6 + 9);
    while (v9 != *v7)
    {
      if (++v7 == v8)
        goto LABEL_8;
    }
    return CoreML::Result::Result(a3);
  }
}

void sub_217F0C69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_AudioFeaturePrintValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::proprietary::human_action_recognition::init_human_action_recognition(turi::neural_net::model_spec **a1@<X8>)
{
  std::make_unique<turi::neural_net::model_spec>(a1);
}

void sub_217F0C78C(_Unwind_Exception *a1)
{
  turi::neural_net::model_spec **v1;

  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique<turi::neural_net::model_spec>@<X0>(turi::neural_net::model_spec **a1@<X8>)
{
  turi::neural_net::model_spec *v2;
  uint64_t result;

  v2 = (turi::neural_net::model_spec *)operator new();
  result = turi::neural_net::model_spec::model_spec(v2);
  *a1 = v2;
  return result;
}

void sub_217F0C7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void turi::proprietary::human_action_recognition::`anonymous namespace'::define_har_network()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t i;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  char *v17;
  int64x2_t *v18;
  _OWORD *v19;
  char *v20;
  int64x2_t *v21;
  _QWORD *v22;
  char *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t j;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  char **v35;
  uint64_t v36;
  char *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t k;
  char *v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  char *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t m;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  void **v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t n;
  char *v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  char **v79;
  uint64_t v80;
  char *v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  void **v85;
  uint64_t v86;
  void *v87;
  _QWORD *v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  uint64_t ii;
  void *v93;
  _QWORD *v94;
  uint64_t v95;
  void **v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t jj;
  char *v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  char **v104;
  uint64_t v105;
  char *v106;
  void *v107;
  _QWORD *v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  void *v112;
  _QWORD *v113;
  uint64_t v114;
  void **v115;
  uint64_t v116;
  uint64_t kk;
  void *v118;
  _QWORD *v119;
  uint64_t v120;
  void **v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t mm;
  _OWORD *v125;
  char *v126;
  _QWORD *v127;
  uint64_t v128;
  char **v129;
  uint64_t v130;
  _OWORD *v131;
  void *v132;
  _QWORD *v133;
  uint64_t v134;
  void **v135;
  uint64_t v136;
  uint64_t nn;
  void *v138;
  _QWORD *v139;
  uint64_t v140;
  void **v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t i1;
  _OWORD *v145;
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  char **v149;
  uint64_t v150;
  _OWORD *v151;
  void *v152;
  _QWORD *v153;
  uint64_t v154;
  void **v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t i2;
  void *v162;
  _QWORD *v163;
  uint64_t v164;
  void **v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t i3;
  _OWORD *v169;
  char *v170;
  _QWORD *v171;
  uint64_t v172;
  char **v173;
  uint64_t v174;
  _OWORD *v175;
  void *v176;
  _QWORD *v177;
  uint64_t v178;
  void **v179;
  uint64_t v180;
  void *v181;
  _QWORD *v182;
  uint64_t v183;
  void **v184;
  uint64_t v185;
  uint64_t i4;
  uint64_t v187;
  void *v188;
  _QWORD *v189;
  uint64_t v190;
  void **v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t i5;
  _QWORD *v197;
  void **v198;
  int64x2_t *v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t i6;
  uint64_t i7;
  std::string *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  void *v210;
  void *v211;
  _OWORD *v212;
  void *v213;
  void *v214;
  _OWORD *v215;
  void *v216;
  void *v217;
  _OWORD *v218;
  void *v219;
  void *v220;
  _OWORD *v221;
  void *v222;
  void *v223;
  _OWORD *v224;
  void *__p;
  void *v226;
  _OWORD *v227;
  uint64_t *v228;
  uint64_t *v229;
  char *v230;
  uint64_t *v231;
  uint64_t *v232;
  char *v233;
  uint64_t *v234;
  uint64_t *v235;
  char *v236;
  uint64_t *v237;
  uint64_t *v238;
  char *v239;
  uint64_t *v240;
  uint64_t *v241;
  char *v242;
  uint64_t *v243;
  uint64_t *v244;
  char *v245;
  uint64_t *v246;
  uint64_t *v247;
  char *v248;
  uint64_t *v249;
  uint64_t *v250;
  char *v251;
  uint64_t *v252;
  uint64_t *v253;
  char *v254;
  int64x2_t *v255;
  unint64_t *v256;
  uint64_t *i64;
  void **v258;
  void **v259;
  void **v260;
  __int128 v261;
  _QWORD v262[2];
  uint64_t *v263;
  uint64_t *v264;
  uint64_t *v265;
  std::string v266;
  void *v267[3];
  _QWORD __dst[313];
  _QWORD v269[3];
  _QWORD *v270;
  void *v271;
  __int128 v272;
  void **v273;
  _QWORD v274[3];
  _QWORD *v275;
  void *v276;
  __int128 v277;
  void **v278;
  _QWORD v279[3];
  _QWORD *v280;
  void *v281;
  __int128 v282;
  void **v283;
  _BYTE v284[24];
  _BYTE *v285;
  char *v286;
  __int128 v287;
  char **v288;
  _QWORD v289[3];
  _QWORD *v290;
  void *v291;
  __int128 v292;
  void **v293;
  _QWORD v294[3];
  _QWORD *v295;
  _QWORD v296[3];
  _QWORD *v297;
  _QWORD v298[3];
  _QWORD *v299;
  void *v300;
  __int128 v301;
  void **v302;
  _BYTE v303[24];
  _BYTE *v304;
  char *v305;
  __int128 v306;
  char **v307;
  _QWORD v308[3];
  _QWORD *v309;
  void *v310;
  __int128 v311;
  void **v312;
  _QWORD v313[3];
  _QWORD *v314;
  void *v315;
  __int128 v316;
  void **v317;
  _BYTE v318[24];
  _BYTE *v319;
  char *v320;
  __int128 v321;
  char **v322;
  _QWORD v323[3];
  _QWORD *v324;
  void *v325;
  __int128 v326;
  void **v327;
  _QWORD v328[3];
  _QWORD *v329;
  void *v330;
  __int128 v331;
  void **v332;
  _QWORD v333[3];
  _QWORD *v334;
  void *v335;
  __int128 v336;
  void **v337;
  _BYTE v338[24];
  _BYTE *v339;
  char *v340;
  __int128 v341;
  char **v342;
  _QWORD v343[3];
  _QWORD *v344;
  void *v345;
  __int128 v346;
  void **v347;
  _QWORD v348[3];
  _QWORD *v349;
  void *v350;
  __int128 v351;
  void **v352;
  _QWORD v353[3];
  _QWORD *v354;
  void *v355;
  __int128 v356;
  void **v357;
  _BYTE v358[24];
  _BYTE *v359;
  char *v360;
  __int128 v361;
  char **v362;
  _QWORD v363[3];
  _QWORD *v364;
  void *v365;
  __int128 v366;
  void **v367;
  _QWORD v368[3];
  _QWORD *v369;
  void *v370;
  __int128 v371;
  void **v372;
  _QWORD v373[3];
  _QWORD *v374;
  void *v375;
  __int128 v376;
  void **v377;
  _BYTE v378[24];
  _BYTE *v379;
  char *v380;
  __int128 v381;
  char **v382;
  _QWORD v383[3];
  _QWORD *v384;
  void *v385;
  __int128 v386;
  void **v387;
  _QWORD v388[3];
  _QWORD *v389;
  void *v390;
  __int128 v391;
  void **v392;
  _BYTE v393[24];
  _BYTE *v394;
  char *v395;
  __int128 v396;
  char **v397;
  _QWORD v398[3];
  _QWORD *v399;
  void *v400;
  __int128 v401;
  void **v402;
  _BYTE v403[2504];
  uint64_t v404;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v5 = v4;
  v208 = v6;
  v8 = v7;
  v205 = v9;
  v10 = (_QWORD *)v0;
  v404 = *MEMORY[0x24BDAC8D0];
  v11 = 5489;
  LODWORD(__dst[0]) = 5489;
  for (i = 1; i != 624; ++i)
  {
    v11 = i + 1812433253 * (v11 ^ (v11 >> 30));
    *((_DWORD *)__dst + i) = v11;
  }
  __dst[312] = 0;
  *(_DWORD *)v403 = v1;
  std::seed_seq::seed_seq[abi:ne180100]<int,(void *)0>(v267, (int *)v403, 1);
  std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::__seed<std::seed_seq>(v403, (unint64_t)v267);
  memcpy(__dst, v403, sizeof(__dst));
  std::string::basic_string[abi:ne180100]<0>(v403, "input_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "poses");
  v13 = (uint64_t *)operator new(0x18uLL);
  v264 = v13 + 3;
  v265 = v13 + 3;
  v13[2] = 0;
  *(_OWORD *)v13 = xmmword_2186C49C0;
  v263 = v13;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v263);
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_reshape0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "input_transpose0");
  v206 = v8;
  v14 = operator new(0x18uLL);
  *((_QWORD *)&v261 + 1) = v14 + 3;
  v262[0] = v14 + 3;
  v15 = 3 * v208;
  *v14 = 1;
  v14[1] = 3 * v208;
  v14[2] = v5;
  *(_QWORD *)&v261 = v14;
  turi::neural_net::model_spec::add_reshape_static(v10, (std::string *)v403, &v266, (uint64_t *)&v261);
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_expand_dims0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_reshape0");
  v16 = operator new(0x10uLL);
  *(_QWORD *)&v261 = v16;
  *v16 = xmmword_2186C4B80;
  *((_QWORD *)&v261 + 1) = v16 + 1;
  v262[0] = v16 + 1;
  v17 = (char *)operator new(0x18uLL);
  v259 = (void **)(v17 + 24);
  v260 = (void **)(v17 + 24);
  *(_QWORD *)v17 = 1;
  *((_QWORD *)v17 + 1) = v15;
  *((_QWORD *)v17 + 2) = v5;
  v258 = (void **)v17;
  v18 = (int64x2_t *)operator new(0x28uLL);
  v256 = &v18[2].u64[1];
  i64 = &v18[2].i64[1];
  *v18 = vdupq_n_s64(1uLL);
  v18[1].i64[0] = v15;
  v18[1].i64[1] = 1;
  v18[2].i64[0] = v5;
  v255 = v18;
  turi::neural_net::model_spec::add_expand_dims(v10, (std::string *)v403, &v266, (uint64_t *)&v261, (uint64_t *)&v258, (uint64_t *)&v255);
  if (v255)
  {
    v256 = (unint64_t *)v255;
    operator delete(v255);
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_expand_dims0");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, v15, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_squeeze0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_batch_norm_1");
  v19 = operator new(0x10uLL);
  *(_QWORD *)&v261 = v19;
  *v19 = xmmword_2186C4B80;
  *((_QWORD *)&v261 + 1) = v19 + 1;
  v262[0] = v19 + 1;
  v20 = (char *)operator new(0x28uLL);
  v259 = (void **)(v20 + 40);
  v260 = (void **)(v20 + 40);
  *(int64x2_t *)v20 = vdupq_n_s64(1uLL);
  *((_QWORD *)v20 + 2) = v15;
  *((_QWORD *)v20 + 3) = 1;
  *((_QWORD *)v20 + 4) = v5;
  v258 = (void **)v20;
  v21 = (int64x2_t *)operator new(0x18uLL);
  v256 = &v21[1].u64[1];
  i64 = &v21[1].i64[1];
  v21->i64[0] = 1;
  v21->i64[1] = v15;
  v21[1].i64[0] = v5;
  v255 = v21;
  turi::neural_net::model_spec::add_squeeze(v10, (std::string *)v403, &v266, (uint64_t *)&v261, (uint64_t *)&v258, (uint64_t *)&v255);
  if (v255)
  {
    v256 = (unint64_t *)v255;
    operator delete(v255);
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_reshape1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_squeeze0");
  v22 = operator new(0x20uLL);
  *((_QWORD *)&v261 + 1) = v22 + 4;
  v262[0] = v22 + 4;
  *(_OWORD *)v22 = xmmword_2186C4B90;
  v22[2] = v208;
  v22[3] = v5;
  *(_QWORD *)&v261 = v22;
  turi::neural_net::model_spec::add_reshape_static(v10, (std::string *)v403, &v266, (uint64_t *)&v261);
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_reshape1");
  v23 = (char *)operator new(0x20uLL);
  v253 = (uint64_t *)(v23 + 32);
  v254 = v23 + 32;
  *(_OWORD *)v23 = xmmword_2186C49D8;
  *((_OWORD *)v23 + 1) = unk_2186C49E8;
  v252 = (uint64_t *)v23;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v252);
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_0graph_conv_conv_1");
  v207 = v5;
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_transpose0");
  v24 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 3uLL, 0x18uLL, (uint64_t)__dst);
    v401 = v261;
    v24 = &unk_24D91A1A0;
  }
  v402 = &v400;
  v398[0] = &unk_24D91A230;
  v399 = v398;
  v400 = v24;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 24, 3, 1, 1, 1, 1, 0, (uint64_t)&v400, (uint64_t)v398);
  v25 = v399;
  if (v399 == v398)
  {
    v26 = 4;
    v25 = v398;
  }
  else
  {
    if (!v399)
      goto LABEL_58;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_58:
  v27 = v402;
  if (v402 == &v400)
  {
    v28 = 4;
    v27 = &v400;
  }
  else
  {
    if (!v402)
      goto LABEL_63;
    v28 = 5;
  }
  (*((void (**)(void))*v27 + v28))();
LABEL_63:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_split0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_0graph_conv_conv_1");
  v29 = operator new(0x18uLL);
  *((_QWORD *)&v261 + 1) = v29 + 3;
  v262[0] = v29 + 3;
  v29[2] = 8;
  *(_OWORD *)v29 = xmmword_2186C49F8;
  *(_QWORD *)&v261 = v29;
  turi::neural_net::model_spec::add_split_nd(v10, (uint64_t)v403, &v266, 1, 3, (uint64_t **)&v261);
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_concat0");
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "encode_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[48], "encode_split0_2");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x48uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 72;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[72], (std::string *)v261);
  turi::neural_net::model_spec::add_concat_nd(v10, &v266, (std::string **)&v261, 3);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (j = 0; j != -72; j -= 24)
  {
    if ((char)v403[j + 71] < 0)
      operator delete(*(void **)&v403[j + 48]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_concat0");
  v31 = (char *)operator new(0x20uLL);
  v250 = (uint64_t *)(v31 + 32);
  v251 = v31 + 32;
  *(_OWORD *)v31 = xmmword_2186C4A88;
  *((_OWORD *)v31 + 1) = unk_2186C4A98;
  v249 = (uint64_t *)v31;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v249);
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_0graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_transpose1");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, v15, v208, (uint64_t)__dst);
    v396 = v261;
  }
  else
  {
  }
  v397 = &v395;
  v394 = 0;
  v395 = v32 + 16;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, v208, v15, 1, 1, 1, 1, 0, (uint64_t)&v395, (uint64_t)v393);
  v33 = v394;
  if (v394 == v393)
  {
    v34 = 4;
    v33 = v393;
  }
  else
  {
    if (!v394)
      goto LABEL_93;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_93:
  v35 = v397;
  if (v397 == &v395)
  {
    v36 = 4;
    v35 = &v395;
  }
  else
  {
    if (!v397)
      goto LABEL_98;
    v36 = 5;
  }
  (*(void (**)(void))&(*v35)[8 * v36])();
LABEL_98:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_transpose2");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_0graph_conv_conv_2");
  v37 = (char *)operator new(0x20uLL);
  v247 = (uint64_t *)(v37 + 32);
  v248 = v37 + 32;
  *(_OWORD *)v37 = xmmword_2186C4A88;
  *((_OWORD *)v37 + 1) = unk_2186C4A98;
  v246 = (uint64_t *)v37;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v246);
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_0graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_transpose2");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 8, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_activation0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_0graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "encode_pad");
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_activation0");
  turi::neural_net::model_spec::add_padding(v10, (std::string *)v403, &v266, 4, 4, 0, 0, 2);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_0graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "encode_pad");
  v38 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x48uLL, 0x48uLL, (uint64_t)__dst);
    v391 = v261;
    v38 = &unk_24D91A1A0;
  }
  v390 = v38;
  v392 = &v390;
  v388[0] = &unk_24D91A230;
  v389 = v388;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 8, 8, 9, 1, 1, 1, 0, (uint64_t)&v390, (uint64_t)v388);
  v39 = v389;
  if (v389 == v388)
  {
    v40 = 4;
    v39 = v388;
  }
  else
  {
    if (!v389)
      goto LABEL_127;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_127:
  v41 = v392;
  if (v392 == &v390)
  {
    v42 = 4;
    v41 = &v390;
  }
  else
  {
    if (!v392)
      goto LABEL_132;
    v42 = 5;
  }
  (*((void (**)(void))*v41 + v42))();
LABEL_132:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_0graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_0graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 8, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_0_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_0graph_conv_tcn_batch_norm_1");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_0_relu_0");
  v43 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 8uLL, 0x30uLL, (uint64_t)__dst);
    v386 = v261;
    v43 = &unk_24D91A1A0;
  }
  v387 = &v385;
  v383[0] = &unk_24D91A230;
  v384 = v383;
  v385 = v43;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 48, 8, 1, 1, 1, 1, 0, (uint64_t)&v385, (uint64_t)v383);
  v44 = v384;
  if (v384 == v383)
  {
    v45 = 4;
    v44 = v383;
  }
  else
  {
    if (!v384)
      goto LABEL_151;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_151:
  v46 = v387;
  if (v387 == &v385)
  {
    v47 = 4;
    v46 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_156;
    v47 = 5;
  }
  (*((void (**)(void))*v46 + v47))();
LABEL_156:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual1_split0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_1graph_conv_conv_1");
  v48 = operator new(0x18uLL);
  *((_QWORD *)&v261 + 1) = v48 + 3;
  v262[0] = v48 + 3;
  v48[2] = 16;
  *(_OWORD *)v48 = xmmword_2186C4A10;
  *(_QWORD *)&v261 = v48;
  turi::neural_net::model_spec::add_split_nd(v10, (uint64_t)v403, &v266, 1, 3, (uint64_t **)&v261);
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual1_concat0");
  std::string::basic_string[abi:ne180100]<0>(v403, "residual1_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "residual1_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[48], "residual1_split0_2");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x48uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 72;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[72], (std::string *)v261);
  turi::neural_net::model_spec::add_concat_nd(v10, &v266, (std::string **)&v261, 3);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (k = 0; k != -72; k -= 24)
  {
    if ((char)v403[k + 71] < 0)
      operator delete(*(void **)&v403[k + 48]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual1_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual1_concat0");
  v50 = (char *)operator new(0x20uLL);
  v244 = (uint64_t *)(v50 + 32);
  v245 = v50 + 32;
  *(_OWORD *)v50 = xmmword_2186C4A88;
  *((_OWORD *)v50 + 1) = unk_2186C4A98;
  v243 = (uint64_t *)v50;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v243);
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual1_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, v15, v208, (uint64_t)__dst);
    v381 = v261;
  }
  else
  {
  }
  v382 = &v380;
  v379 = 0;
  v380 = v51 + 16;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, v208, v15, 1, 1, 1, 1, 0, (uint64_t)&v380, (uint64_t)v378);
  v52 = v379;
  if (v379 == v378)
  {
    v53 = 4;
    v52 = v378;
  }
  else
  {
    if (!v379)
      goto LABEL_186;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_186:
  v54 = v382;
  if (v382 == &v380)
  {
    v55 = 4;
    v54 = &v380;
  }
  else
  {
    if (!v382)
      goto LABEL_191;
    v55 = 5;
  }
  (*(void (**)(void))&(*v54)[8 * v55])();
LABEL_191:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual1_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_1graph_conv_conv_2");
  v56 = (char *)operator new(0x20uLL);
  v241 = (uint64_t *)(v56 + 32);
  v242 = v56 + 32;
  *(_OWORD *)v56 = xmmword_2186C4A88;
  *((_OWORD *)v56 + 1) = unk_2186C4A98;
  v240 = (uint64_t *)v56;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v240);
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual1_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 16, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_1graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual1_pad");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_1graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v10, (std::string *)v403, &v266, 4, 4, 0, 0, 2);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual1_pad");
  v57 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x90uLL, 0x90uLL, (uint64_t)__dst);
    v376 = v261;
    v57 = &unk_24D91A1A0;
  }
  v377 = &v375;
  v373[0] = &unk_24D91A230;
  v374 = v373;
  v375 = v57;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 16, 16, 9, 1, 1, 1, 0, (uint64_t)&v375, (uint64_t)v373);
  v58 = v374;
  if (v374 == v373)
  {
    v59 = 4;
    v58 = v373;
  }
  else
  {
    if (!v374)
      goto LABEL_220;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_220:
  v60 = v377;
  if (v377 == &v375)
  {
    v61 = 4;
    v60 = &v375;
  }
  else
  {
    if (!v377)
      goto LABEL_225;
    v61 = 5;
  }
  (*((void (**)(void))*v60 + v61))();
LABEL_225:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_1graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 16, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_0_relu_0");
  v62 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 8uLL, 0x10uLL, (uint64_t)__dst);
    v371 = v261;
    v62 = &unk_24D91A1A0;
  }
  v370 = v62;
  v372 = &v370;
  v368[0] = &unk_24D91A230;
  v369 = v368;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 16, 8, 1, 1, 1, 1, 0, (uint64_t)&v370, (uint64_t)v368);
  v63 = v369;
  if (v369 == v368)
  {
    v64 = 4;
    v63 = v368;
  }
  else
  {
    if (!v369)
      goto LABEL_240;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_240:
  v65 = v372;
  if (v372 == &v370)
  {
    v66 = 4;
    v65 = &v370;
  }
  else
  {
    if (!v372)
      goto LABEL_245;
    v66 = 5;
  }
  (*((void (**)(void))*v65 + v66))();
LABEL_245:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_1residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 16, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual1_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "stgcn_action_stgcn_1residual_batch_norm_1");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x30uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 48;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[48], (std::string *)v261);
  turi::neural_net::model_spec::add_add_broadcastable(v10, &v266, (std::string **)&v261);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (m = 0; m != -48; m -= 24)
  {
    if ((char)v403[m + 47] < 0)
      operator delete(*(void **)&v403[m + 24]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_1_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual1_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_1_relu_0");
  v68 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x10uLL, 0x60uLL, (uint64_t)__dst);
    v366 = v261;
    v68 = &unk_24D91A1A0;
  }
  v367 = &v365;
  v363[0] = &unk_24D91A230;
  v364 = v363;
  v365 = v68;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 96, 16, 1, 1, 1, 1, 0, (uint64_t)&v365, (uint64_t)v363);
  v69 = v364;
  if (v364 == v363)
  {
    v70 = 4;
    v69 = v363;
  }
  else
  {
    if (!v364)
      goto LABEL_270;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_270:
  v71 = v367;
  if (v367 == &v365)
  {
    v72 = 4;
    v71 = &v365;
  }
  else
  {
    if (!v367)
      goto LABEL_275;
    v72 = 5;
  }
  (*((void (**)(void))*v71 + v72))();
LABEL_275:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual2_split0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_2graph_conv_conv_1");
  v73 = operator new(0x18uLL);
  *((_QWORD *)&v261 + 1) = v73 + 3;
  v262[0] = v73 + 3;
  v73[2] = 32;
  *(_OWORD *)v73 = xmmword_2186C4A28;
  *(_QWORD *)&v261 = v73;
  turi::neural_net::model_spec::add_split_nd(v10, (uint64_t)v403, &v266, 1, 3, (uint64_t **)&v261);
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual2_concat0");
  std::string::basic_string[abi:ne180100]<0>(v403, "residual2_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "residual2_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[48], "residual2_split0_2");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x48uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 72;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[72], (std::string *)v261);
  turi::neural_net::model_spec::add_concat_nd(v10, &v266, (std::string **)&v261, 3);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (n = 0; n != -72; n -= 24)
  {
    if ((char)v403[n + 71] < 0)
      operator delete(*(void **)&v403[n + 48]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual2_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual2_concat0");
  v75 = (char *)operator new(0x20uLL);
  v238 = (uint64_t *)(v75 + 32);
  v239 = v75 + 32;
  *(_OWORD *)v75 = xmmword_2186C4A88;
  *((_OWORD *)v75 + 1) = unk_2186C4A98;
  v237 = (uint64_t *)v75;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v237);
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual2_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, v15, v208, (uint64_t)__dst);
    v361 = v261;
  }
  else
  {
  }
  v362 = &v360;
  v359 = 0;
  v360 = v76 + 16;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, v208, v15, 1, 1, 1, 1, 0, (uint64_t)&v360, (uint64_t)v358);
  v77 = v359;
  if (v359 == v358)
  {
    v78 = 4;
    v77 = v358;
  }
  else
  {
    if (!v359)
      goto LABEL_305;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_305:
  v79 = v362;
  if (v362 == &v360)
  {
    v80 = 4;
    v79 = &v360;
  }
  else
  {
    if (!v362)
      goto LABEL_310;
    v80 = 5;
  }
  (*(void (**)(void))&(*v79)[8 * v80])();
LABEL_310:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual2_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_2graph_conv_conv_2");
  v81 = (char *)operator new(0x20uLL);
  v235 = (uint64_t *)(v81 + 32);
  v236 = v81 + 32;
  *(_OWORD *)v81 = xmmword_2186C4A88;
  *((_OWORD *)v81 + 1) = unk_2186C4A98;
  v234 = (uint64_t *)v81;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v234);
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual2_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 32, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_2graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual2_pad");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_2graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v10, (std::string *)v403, &v266, 4, 4, 0, 0, 2);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual2_pad");
  v82 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x120uLL, 0x120uLL, (uint64_t)__dst);
    v356 = v261;
    v82 = &unk_24D91A1A0;
  }
  v357 = &v355;
  v353[0] = &unk_24D91A230;
  v354 = v353;
  v355 = v82;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 32, 32, 9, 1, 1, 1, 0, (uint64_t)&v355, (uint64_t)v353);
  v83 = v354;
  if (v354 == v353)
  {
    v84 = 4;
    v83 = v353;
  }
  else
  {
    if (!v354)
      goto LABEL_339;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_339:
  v85 = v357;
  if (v357 == &v355)
  {
    v86 = 4;
    v85 = &v355;
  }
  else
  {
    if (!v357)
      goto LABEL_344;
    v86 = 5;
  }
  (*((void (**)(void))*v85 + v86))();
LABEL_344:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_2graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 32, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_1_relu_0");
  v87 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x10uLL, 0x20uLL, (uint64_t)__dst);
    v351 = v261;
    v87 = &unk_24D91A1A0;
  }
  v350 = v87;
  v352 = &v350;
  v348[0] = &unk_24D91A230;
  v349 = v348;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 32, 16, 1, 1, 1, 1, 0, (uint64_t)&v350, (uint64_t)v348);
  v88 = v349;
  if (v349 == v348)
  {
    v89 = 4;
    v88 = v348;
  }
  else
  {
    if (!v349)
      goto LABEL_359;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_359:
  v90 = v352;
  if (v352 == &v350)
  {
    v91 = 4;
    v90 = &v350;
  }
  else
  {
    if (!v352)
      goto LABEL_364;
    v91 = 5;
  }
  (*((void (**)(void))*v90 + v91))();
LABEL_364:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_2residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 32, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual2_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "stgcn_action_stgcn_2residual_batch_norm_1");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x30uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 48;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[48], (std::string *)v261);
  turi::neural_net::model_spec::add_add_broadcastable(v10, &v266, (std::string **)&v261);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (ii = 0; ii != -48; ii -= 24)
  {
    if ((char)v403[ii + 47] < 0)
      operator delete(*(void **)&v403[ii + 24]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_2_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual2_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_2_relu_0");
  v93 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x20uLL, 0xC0uLL, (uint64_t)__dst);
    v346 = v261;
    v93 = &unk_24D91A1A0;
  }
  v347 = &v345;
  v343[0] = &unk_24D91A230;
  v344 = v343;
  v345 = v93;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 192, 32, 1, 1, 1, 1, 0, (uint64_t)&v345, (uint64_t)v343);
  v94 = v344;
  if (v344 == v343)
  {
    v95 = 4;
    v94 = v343;
  }
  else
  {
    if (!v344)
      goto LABEL_389;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_389:
  v96 = v347;
  if (v347 == &v345)
  {
    v97 = 4;
    v96 = &v345;
  }
  else
  {
    if (!v347)
      goto LABEL_394;
    v97 = 5;
  }
  (*((void (**)(void))*v96 + v97))();
LABEL_394:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual3_split0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_3graph_conv_conv_1");
  v98 = operator new(0x18uLL);
  *((_QWORD *)&v261 + 1) = v98 + 3;
  v262[0] = v98 + 3;
  v98[2] = 64;
  *(_OWORD *)v98 = xmmword_2186C4A40;
  *(_QWORD *)&v261 = v98;
  turi::neural_net::model_spec::add_split_nd(v10, (uint64_t)v403, &v266, 1, 3, (uint64_t **)&v261);
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual3_concat0");
  std::string::basic_string[abi:ne180100]<0>(v403, "residual3_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "residual3_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[48], "residual3_split0_2");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x48uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 72;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[72], (std::string *)v261);
  turi::neural_net::model_spec::add_concat_nd(v10, &v266, (std::string **)&v261, 3);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (jj = 0; jj != -72; jj -= 24)
  {
    if ((char)v403[jj + 71] < 0)
      operator delete(*(void **)&v403[jj + 48]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual3_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual3_concat0");
  v100 = (char *)operator new(0x20uLL);
  v232 = (uint64_t *)(v100 + 32);
  v233 = v100 + 32;
  *(_OWORD *)v100 = xmmword_2186C4A88;
  *((_OWORD *)v100 + 1) = unk_2186C4A98;
  v231 = (uint64_t *)v100;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v231);
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual3_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, v15, v208, (uint64_t)__dst);
    v341 = v261;
  }
  else
  {
  }
  v342 = &v340;
  v339 = 0;
  v340 = v101 + 16;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, v208, v15, 1, 1, 1, 1, 0, (uint64_t)&v340, (uint64_t)v338);
  v102 = v339;
  if (v339 == v338)
  {
    v103 = 4;
    v102 = v338;
  }
  else
  {
    if (!v339)
      goto LABEL_424;
    v103 = 5;
  }
  (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_424:
  v104 = v342;
  if (v342 == &v340)
  {
    v105 = 4;
    v104 = &v340;
  }
  else
  {
    if (!v342)
      goto LABEL_429;
    v105 = 5;
  }
  (*(void (**)(void))&(*v104)[8 * v105])();
LABEL_429:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual3_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_3graph_conv_conv_2");
  v106 = (char *)operator new(0x20uLL);
  v229 = (uint64_t *)(v106 + 32);
  v230 = v106 + 32;
  *(_OWORD *)v106 = xmmword_2186C4A88;
  *((_OWORD *)v106 + 1) = unk_2186C4A98;
  v228 = (uint64_t *)v106;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, &v228);
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual3_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 64, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_3graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual3_pad");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_3graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v10, (std::string *)v403, &v266, 4, 4, 0, 0, 2);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual3_pad");
  v107 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x240uLL, 0x240uLL, (uint64_t)__dst);
    v336 = v261;
    v107 = &unk_24D91A1A0;
  }
  v337 = &v335;
  v333[0] = &unk_24D91A230;
  v334 = v333;
  v335 = v107;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 64, 64, 9, 1, 2, 1, 0, (uint64_t)&v335, (uint64_t)v333);
  v108 = v334;
  if (v334 == v333)
  {
    v109 = 4;
    v108 = v333;
  }
  else
  {
    if (!v334)
      goto LABEL_458;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_458:
  v110 = v337;
  if (v337 == &v335)
  {
    v111 = 4;
    v110 = &v335;
  }
  else
  {
    if (!v337)
      goto LABEL_463;
    v111 = 5;
  }
  (*((void (**)(void))*v110 + v111))();
LABEL_463:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_3graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 64, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_2_relu_0");
  v112 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x20uLL, 0x40uLL, (uint64_t)__dst);
    v331 = v261;
    v112 = &unk_24D91A1A0;
  }
  v330 = v112;
  v332 = &v330;
  v328[0] = &unk_24D91A230;
  v329 = v328;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 64, 32, 1, 1, 2, 1, 0, (uint64_t)&v330, (uint64_t)v328);
  v113 = v329;
  if (v329 == v328)
  {
    v114 = 4;
    v113 = v328;
  }
  else
  {
    if (!v329)
      goto LABEL_478;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_478:
  v115 = v332;
  if (v332 == &v330)
  {
    v116 = 4;
    v115 = &v330;
  }
  else
  {
    if (!v332)
      goto LABEL_483;
    v116 = 5;
  }
  (*((void (**)(void))*v115 + v116))();
LABEL_483:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_3residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 64, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual3_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "stgcn_action_stgcn_3residual_batch_norm_1");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x30uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 48;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[48], (std::string *)v261);
  turi::neural_net::model_spec::add_add_broadcastable(v10, &v266, (std::string **)&v261);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (kk = 0; kk != -48; kk -= 24)
  {
    if ((char)v403[kk + 47] < 0)
      operator delete(*(void **)&v403[kk + 24]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_3_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual3_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_4graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_3_relu_0");
  v118 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x40uLL, 0xC0uLL, (uint64_t)__dst);
    v326 = v261;
    v118 = &unk_24D91A1A0;
  }
  v327 = &v325;
  v323[0] = &unk_24D91A230;
  v324 = v323;
  v325 = v118;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 192, 64, 1, 1, 1, 1, 0, (uint64_t)&v325, (uint64_t)v323);
  v119 = v324;
  if (v324 == v323)
  {
    v120 = 4;
    v119 = v323;
  }
  else
  {
    if (!v324)
      goto LABEL_508;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_508:
  v121 = v327;
  if (v327 == &v325)
  {
    v122 = 4;
    v121 = &v325;
  }
  else
  {
    if (!v327)
      goto LABEL_513;
    v122 = 5;
  }
  (*((void (**)(void))*v121 + v122))();
LABEL_513:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual4_split0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_4graph_conv_conv_1");
  v123 = operator new(0x18uLL);
  *((_QWORD *)&v261 + 1) = v123 + 3;
  v262[0] = v123 + 3;
  v123[2] = 64;
  *(_OWORD *)v123 = xmmword_2186C4A40;
  *(_QWORD *)&v261 = v123;
  turi::neural_net::model_spec::add_split_nd(v10, (uint64_t)v403, &v266, 1, 3, (uint64_t **)&v261);
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual4_concat0");
  std::string::basic_string[abi:ne180100]<0>(v403, "residual4_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "residual4_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[48], "residual4_split0_2");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x48uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 72;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[72], (std::string *)v261);
  turi::neural_net::model_spec::add_concat_nd(v10, &v266, (std::string **)&v261, 3);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (mm = 0; mm != -72; mm -= 24)
  {
    if ((char)v403[mm + 71] < 0)
      operator delete(*(void **)&v403[mm + 48]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual4_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual4_concat0");
  v125 = operator new(0x20uLL);
  __p = v125;
  *v125 = xmmword_2186C4A88;
  v125[1] = unk_2186C4A98;
  v226 = v125 + 2;
  v227 = v125 + 2;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, (uint64_t **)&__p);
  if (__p)
  {
    v226 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_4graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual4_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, v15, v208, (uint64_t)__dst);
    v321 = v261;
  }
  else
  {
  }
  v322 = &v320;
  v319 = 0;
  v320 = v126 + 16;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, v208, v15, 1, 1, 1, 1, 0, (uint64_t)&v320, (uint64_t)v318);
  v127 = v319;
  if (v319 == v318)
  {
    v128 = 4;
    v127 = v318;
  }
  else
  {
    if (!v319)
      goto LABEL_543;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_543:
  v129 = v322;
  if (v322 == &v320)
  {
    v130 = 4;
    v129 = &v320;
  }
  else
  {
    if (!v322)
      goto LABEL_548;
    v130 = 5;
  }
  (*(void (**)(void))&(*v129)[8 * v130])();
LABEL_548:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual4_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_4graph_conv_conv_2");
  v131 = operator new(0x20uLL);
  v223 = v131 + 2;
  v224 = v131 + 2;
  *v131 = xmmword_2186C4A88;
  v131[1] = unk_2186C4A98;
  v222 = v131;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, (uint64_t **)&v222);
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_4graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual4_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 64, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_4graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_4graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual4_pad");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_4graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v10, (std::string *)v403, &v266, 4, 4, 0, 0, 2);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_4graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual4_pad");
  v132 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x240uLL, 0x240uLL, (uint64_t)__dst);
    v316 = v261;
    v132 = &unk_24D91A1A0;
  }
  v317 = &v315;
  v313[0] = &unk_24D91A230;
  v314 = v313;
  v315 = v132;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 64, 64, 9, 1, 1, 1, 0, (uint64_t)&v315, (uint64_t)v313);
  v133 = v314;
  if (v314 == v313)
  {
    v134 = 4;
    v133 = v313;
  }
  else
  {
    if (!v314)
      goto LABEL_577;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_577:
  v135 = v317;
  if (v317 == &v315)
  {
    v136 = 4;
    v135 = &v315;
  }
  else
  {
    if (!v317)
      goto LABEL_582;
    v136 = 5;
  }
  (*((void (**)(void))*v135 + v136))();
LABEL_582:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_4graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_4graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 64, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual4_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_4graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "stgcn_action_stgcn_3_relu_0");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x30uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 48;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[48], (std::string *)v261);
  turi::neural_net::model_spec::add_add_broadcastable(v10, &v266, (std::string **)&v261);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (nn = 0; nn != -48; nn -= 24)
  {
    if ((char)v403[nn + 47] < 0)
      operator delete(*(void **)&v403[nn + 24]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_4_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual4_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_4_relu_0");
  v138 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x40uLL, 0x180uLL, (uint64_t)__dst);
    v311 = v261;
    v138 = &unk_24D91A1A0;
  }
  v310 = v138;
  v312 = &v310;
  v308[0] = &unk_24D91A230;
  v309 = v308;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 384, 64, 1, 1, 1, 1, 0, (uint64_t)&v310, (uint64_t)v308);
  v139 = v309;
  if (v309 == v308)
  {
    v140 = 4;
    v139 = v308;
  }
  else
  {
    if (!v309)
      goto LABEL_607;
    v140 = 5;
  }
  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_607:
  v141 = v312;
  if (v312 == &v310)
  {
    v142 = 4;
    v141 = &v310;
  }
  else
  {
    if (!v312)
      goto LABEL_612;
    v142 = 5;
  }
  (*((void (**)(void))*v141 + v142))();
LABEL_612:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual5_split0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_5graph_conv_conv_1");
  v143 = operator new(0x18uLL);
  *((_QWORD *)&v261 + 1) = v143 + 3;
  v262[0] = v143 + 3;
  v143[2] = 128;
  *(_OWORD *)v143 = xmmword_2186C4A58;
  *(_QWORD *)&v261 = v143;
  turi::neural_net::model_spec::add_split_nd(v10, (uint64_t)v403, &v266, 1, 3, (uint64_t **)&v261);
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual5_concat0");
  std::string::basic_string[abi:ne180100]<0>(v403, "residual5_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "residual5_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[48], "residual5_split0_2");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x48uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 72;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[72], (std::string *)v261);
  turi::neural_net::model_spec::add_concat_nd(v10, &v266, (std::string **)&v261, 3);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (i1 = 0; i1 != -72; i1 -= 24)
  {
    if ((char)v403[i1 + 71] < 0)
      operator delete(*(void **)&v403[i1 + 48]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual5_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual5_concat0");
  v145 = operator new(0x20uLL);
  v220 = v145 + 2;
  v221 = v145 + 2;
  *v145 = xmmword_2186C4A88;
  v145[1] = unk_2186C4A98;
  v219 = v145;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, (uint64_t **)&v219);
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual5_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, v15, v208, (uint64_t)__dst);
    v306 = v261;
  }
  else
  {
  }
  v307 = &v305;
  v304 = 0;
  v305 = v146 + 16;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, v208, v15, 1, 1, 1, 1, 0, (uint64_t)&v305, (uint64_t)v303);
  v147 = v304;
  if (v304 == v303)
  {
    v148 = 4;
    v147 = v303;
  }
  else
  {
    if (!v304)
      goto LABEL_642;
    v148 = 5;
  }
  (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_642:
  v149 = v307;
  if (v307 == &v305)
  {
    v150 = 4;
    v149 = &v305;
  }
  else
  {
    if (!v307)
      goto LABEL_647;
    v150 = 5;
  }
  (*(void (**)(void))&(*v149)[8 * v150])();
LABEL_647:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual5_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_5graph_conv_conv_2");
  v151 = operator new(0x20uLL);
  v217 = v151 + 2;
  v218 = v151 + 2;
  *v151 = xmmword_2186C4A88;
  v151[1] = unk_2186C4A98;
  v216 = v151;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, (uint64_t **)&v216);
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual5_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 128, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_5graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual5_pad");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_5graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v10, (std::string *)v403, &v266, 4, 4, 0, 0, 2);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual5_pad");
  v152 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x480uLL, 0x480uLL, (uint64_t)__dst);
    v301 = v261;
    v152 = &unk_24D91A1A0;
  }
  v302 = &v300;
  v298[0] = &unk_24D91A230;
  v299 = v298;
  v300 = v152;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 128, 128, 9, 1, 2, 1, 0, (uint64_t)&v300, (uint64_t)v298);
  v153 = v299;
  if (v299 == v298)
  {
    v154 = 4;
    v153 = v298;
  }
  else
  {
    if (!v299)
      goto LABEL_676;
    v154 = 5;
  }
  (*(void (**)(void))(*v153 + 8 * v154))();
LABEL_676:
  v155 = v302;
  if (v302 == &v300)
  {
    v156 = 4;
    v155 = &v300;
  }
  else
  {
    if (!v302)
      goto LABEL_681;
    v156 = 5;
  }
  (*((void (**)(void))*v155 + v156))();
LABEL_681:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_5graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 128, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_4_relu_0");
  v297 = v296;
  v294[0] = &unk_24D91A230;
  v295 = v294;
  v296[0] = &unk_24D91A230;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 128, 64, 1, 1, 2, 1, 0, (uint64_t)v296, (uint64_t)v294);
  v157 = v295;
  if (v295 == v294)
  {
    v158 = 4;
    v157 = v294;
  }
  else
  {
    if (!v295)
      goto LABEL_694;
    v158 = 5;
  }
  (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_694:
  v159 = v297;
  if (v297 == v296)
  {
    v160 = 4;
    v159 = v296;
  }
  else
  {
    if (!v297)
      goto LABEL_699;
    v160 = 5;
  }
  (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_699:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_5residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 128, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual5_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "stgcn_action_stgcn_5residual_batch_norm_1");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x30uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 48;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[48], (std::string *)v261);
  turi::neural_net::model_spec::add_add_broadcastable(v10, &v266, (std::string **)&v261);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (i2 = 0; i2 != -48; i2 -= 24)
  {
    if ((char)v403[i2 + 47] < 0)
      operator delete(*(void **)&v403[i2 + 24]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_5_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual5_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_6graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_5_relu_0");
  v162 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x80uLL, 0x300uLL, (uint64_t)__dst);
    v292 = v261;
    v162 = &unk_24D91A1A0;
  }
  v291 = v162;
  v293 = &v291;
  v289[0] = &unk_24D91A230;
  v290 = v289;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 768, 128, 1, 1, 1, 1, 0, (uint64_t)&v291, (uint64_t)v289);
  v163 = v290;
  if (v290 == v289)
  {
    v164 = 4;
    v163 = v289;
  }
  else
  {
    if (!v290)
      goto LABEL_724;
    v164 = 5;
  }
  (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_724:
  v165 = v293;
  if (v293 == &v291)
  {
    v166 = 4;
    v165 = &v291;
  }
  else
  {
    if (!v293)
      goto LABEL_729;
    v166 = 5;
  }
  (*((void (**)(void))*v165 + v166))();
LABEL_729:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual6_split0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_6graph_conv_conv_1");
  v167 = operator new(0x18uLL);
  *((_QWORD *)&v261 + 1) = v167 + 3;
  v262[0] = v167 + 3;
  v167[2] = 256;
  *(_OWORD *)v167 = xmmword_2186C4A70;
  *(_QWORD *)&v261 = v167;
  turi::neural_net::model_spec::add_split_nd(v10, (uint64_t)v403, &v266, 1, 3, (uint64_t **)&v261);
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual6_concat0");
  std::string::basic_string[abi:ne180100]<0>(v403, "residual6_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "residual6_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[48], "residual6_split0_2");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x48uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 72;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[72], (std::string *)v261);
  turi::neural_net::model_spec::add_concat_nd(v10, &v266, (std::string **)&v261, 3);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (i3 = 0; i3 != -72; i3 -= 24)
  {
    if ((char)v403[i3 + 71] < 0)
      operator delete(*(void **)&v403[i3 + 48]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual6_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual6_concat0");
  v169 = operator new(0x20uLL);
  v214 = v169 + 2;
  v215 = v169 + 2;
  *v169 = xmmword_2186C4A88;
  v169[1] = unk_2186C4A98;
  v213 = v169;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, (uint64_t **)&v213);
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_6graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual6_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, v15, v208, (uint64_t)__dst);
    v287 = v261;
  }
  else
  {
  }
  v288 = &v286;
  v285 = 0;
  v286 = v170 + 16;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, v208, v15, 1, 1, 1, 1, 0, (uint64_t)&v286, (uint64_t)v284);
  v171 = v285;
  if (v285 == v284)
  {
    v172 = 4;
    v171 = v284;
  }
  else
  {
    if (!v285)
      goto LABEL_759;
    v172 = 5;
  }
  (*(void (**)(void))(*v171 + 8 * v172))();
LABEL_759:
  v173 = v288;
  if (v288 == &v286)
  {
    v174 = 4;
    v173 = &v286;
  }
  else
  {
    if (!v288)
      goto LABEL_764;
    v174 = 5;
  }
  (*(void (**)(void))&(*v173)[8 * v174])();
LABEL_764:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual6_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_6graph_conv_conv_2");
  v175 = operator new(0x20uLL);
  v211 = v175 + 2;
  v212 = v175 + 2;
  *v175 = xmmword_2186C4A88;
  v175[1] = unk_2186C4A98;
  v210 = v175;
  turi::neural_net::model_spec::add_transpose(v10, (std::string *)v403, &v266, (uint64_t **)&v210);
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_6graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual6_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 256, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_6graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_6graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "residual6_pad");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_6graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v10, (std::string *)v403, &v266, 4, 4, 0, 0, 2);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_6graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual6_pad");
  v176 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x900uLL, 0x900uLL, (uint64_t)__dst);
    v282 = v261;
    v176 = &unk_24D91A1A0;
  }
  v283 = &v281;
  v279[0] = &unk_24D91A230;
  v280 = v279;
  v281 = v176;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 256, 256, 9, 1, 1, 1, 0, (uint64_t)&v281, (uint64_t)v279);
  v177 = v280;
  if (v280 == v279)
  {
    v178 = 4;
    v177 = v279;
  }
  else
  {
    if (!v280)
      goto LABEL_793;
    v178 = 5;
  }
  (*(void (**)(void))(*v177 + 8 * v178))();
LABEL_793:
  v179 = v283;
  if (v283 == &v281)
  {
    v180 = 4;
    v179 = &v281;
  }
  else
  {
    if (!v283)
      goto LABEL_798;
    v180 = 5;
  }
  (*((void (**)(void))*v179 + v180))();
LABEL_798:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_6graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_6graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 256, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_6residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_5_relu_0");
  v181 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x80uLL, 0x100uLL, (uint64_t)__dst);
    v277 = v261;
    v181 = &unk_24D91A1A0;
  }
  v278 = &v276;
  v274[0] = &unk_24D91A230;
  v275 = v274;
  v276 = v181;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, 256, 128, 1, 1, 1, 1, 0, (uint64_t)&v276, (uint64_t)v274);
  v182 = v275;
  if (v275 == v274)
  {
    v183 = 4;
    v182 = v274;
  }
  else
  {
    if (!v275)
      goto LABEL_813;
    v183 = 5;
  }
  (*(void (**)(void))(*v182 + 8 * v183))();
LABEL_813:
  v184 = v278;
  if (v278 == &v276)
  {
    v185 = 4;
    v184 = &v276;
  }
  else
  {
    if (!v278)
      goto LABEL_818;
    v185 = 5;
  }
  (*((void (**)(void))*v184 + v185))();
LABEL_818:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_6residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_stgcn_6residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v10, (std::string *)v403, &v266, 256, 0.00001);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual6_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_stgcn_6graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "stgcn_action_stgcn_6residual_batch_norm_1");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x30uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 48;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[48], (std::string *)v261);
  turi::neural_net::model_spec::add_add_broadcastable(v10, &v266, (std::string **)&v261);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (i4 = 0; i4 != -48; i4 -= 24)
  {
    if ((char)v403[i4 + 47] < 0)
      operator delete(*(void **)&v403[i4 + 24]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "decode_activation0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "residual6_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "decode_pooling0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "decode_activation0");
  v187 = (int)vcvtpd_s64_f64((double)v207 * 0.25);
  turi::neural_net::model_spec::add_pooling(v10, (std::string *)v403, &v266, v187, v208, v187, v208, 0, 1, 1u);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v266, "decode_pooling0");
  v188 = &unk_24D91A230;
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v261, 0x100uLL, v206, (uint64_t)__dst);
    v272 = v261;
    v188 = &unk_24D91A1A0;
  }
  v271 = v188;
  v273 = &v271;
  v269[0] = &unk_24D91A230;
  v270 = v269;
  turi::neural_net::model_spec::add_convolution(v10, (std::string *)v403, &v266, v206, 256, 1, 1, 1, 1, 0, (uint64_t)&v271, (uint64_t)v269);
  v189 = v270;
  if (v270 == v269)
  {
    v190 = 4;
    v189 = v269;
  }
  else
  {
    if (!v270)
      goto LABEL_847;
    v190 = 5;
  }
  (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_847:
  v191 = v273;
  if (v273 == &v271)
  {
    v192 = 4;
    v191 = &v271;
  }
  else
  {
    if (!v273)
      goto LABEL_852;
    v192 = 5;
  }
  (*((void (**)(void))*v191 + v192))();
LABEL_852:
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "decode_constant0");
  v193 = operator new(8uLL);
  *(_QWORD *)&v261 = v193;
  *v193 = 1;
  *((_QWORD *)&v261 + 1) = v193 + 1;
  v262[0] = v193 + 1;
  *(_QWORD *)v403 = &unk_24D91A230;
  *(_QWORD *)&v403[24] = v403;
  turi::neural_net::model_spec::add_constant_nd(v10, &v266, (uint64_t *)&v261, (uint64_t)v403);
  v194 = *(_QWORD **)&v403[24];
  if (*(_BYTE **)&v403[24] == v403)
  {
    v195 = 4;
    v194 = v403;
  }
  else
  {
    if (!*(_QWORD *)&v403[24])
      goto LABEL_861;
    v195 = 5;
  }
  (*(void (**)(void))(*v194 + 8 * v195))();
LABEL_861:
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "decode_getshape0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "stgcn_action_conv_1");
  turi::neural_net::model_spec::add_get_shape(v10, (std::string *)v403, &v266);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "decode_gather0");
  std::string::basic_string[abi:ne180100]<0>(v403, "decode_getshape0");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "decode_constant0");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x30uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 48;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[48], (std::string *)v261);
  turi::neural_net::model_spec::add_gather(v10, &v266, (std::string **)&v261);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (i5 = 0; i5 != -48; i5 -= 24)
  {
    if ((char)v403[i5 + 47] < 0)
      operator delete(*(void **)&v403[i5 + 24]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "decode_expand_dims0");
  std::string::basic_string[abi:ne180100]<0>(&v266, "decode_gather0");
  v197 = operator new(8uLL);
  *(_QWORD *)&v261 = v197;
  *v197 = 0;
  *((_QWORD *)&v261 + 1) = v197 + 1;
  v262[0] = v197 + 1;
  v198 = (void **)operator new(8uLL);
  v258 = v198;
  *v198 = (void *)v206;
  v259 = v198 + 1;
  v260 = v198 + 1;
  v199 = (int64x2_t *)operator new(0x10uLL);
  v256 = (unint64_t *)&v199[1];
  i64 = v199[1].i64;
  v199->i64[0] = 1;
  v199->i64[1] = v206;
  v255 = v199;
  turi::neural_net::model_spec::add_expand_dims(v10, (std::string *)v403, &v266, (uint64_t *)&v261, (uint64_t *)&v258, (uint64_t *)&v255);
  if (v255)
  {
    v256 = (unint64_t *)v255;
    operator delete(v255);
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  std::string::basic_string[abi:ne180100]<0>(&v266, "decode_constant1");
  v200 = operator new(8uLL);
  *(_QWORD *)&v261 = v200;
  *v200 = 1;
  *((_QWORD *)&v261 + 1) = v200 + 1;
  v262[0] = v200 + 1;
  turi::neural_net::scalar_weight_initializer::scalar_weight_initializer((float *)&v209, -1.0);
  *(_QWORD *)v403 = &unk_24D91A2B0;
  *(_DWORD *)&v403[8] = v209;
  *(_QWORD *)&v403[24] = v403;
  turi::neural_net::model_spec::add_constant_nd(v10, &v266, (uint64_t *)&v261, (uint64_t)v403);
  v201 = *(_QWORD **)&v403[24];
  if (*(_BYTE **)&v403[24] == v403)
  {
    v202 = 4;
    v201 = v403;
  }
  else
  {
    if (!*(_QWORD *)&v403[24])
      goto LABEL_890;
    v202 = 5;
  }
  (*(void (**)(void))(*v201 + 8 * v202))();
LABEL_890:
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v266, "decode_concat0");
  std::string::basic_string[abi:ne180100]<0>(v403, "decode_expand_dims0");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "decode_constant1");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x30uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 48;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[48], (std::string *)v261);
  turi::neural_net::model_spec::add_concat_nd(v10, &v266, (std::string **)&v261, 0);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (i6 = 0; i6 != -48; i6 -= 24)
  {
    if ((char)v403[i6 + 47] < 0)
      operator delete(*(void **)&v403[i6 + 24]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v266, "decode_reshape0");
  std::string::basic_string[abi:ne180100]<0>(v403, "stgcn_action_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v403[24], "decode_concat0");
  v261 = 0uLL;
  v262[0] = 0;
  v258 = (void **)&v261;
  LOBYTE(v259) = 0;
  *(_QWORD *)&v261 = operator new(0x30uLL);
  *((_QWORD *)&v261 + 1) = v261;
  v262[0] = v261 + 48;
  *((_QWORD *)&v261 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v262, (__int128 *)v403, (__int128 *)&v403[48], (std::string *)v261);
  turi::neural_net::model_spec::add_reshape_dynamic(v10, &v266, (std::string **)&v261);
  v258 = (void **)&v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v258);
  for (i7 = 0; i7 != -48; i7 -= 24)
  {
    if ((char)v403[i7 + 47] < 0)
      operator delete(*(void **)&v403[i7 + 24]);
  }
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v403, "decode_reshape0");
  turi::neural_net::model_spec::add_softmax(v10, v205, (std::string *)v403);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  if (v267[0])
  {
    v267[1] = v267[0];
    operator delete(v267[0]);
  }
}

void sub_217F11C48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete(*(void **)(v1 + 344));
  if (*(char *)(v2 + 183) < 0)
    operator delete(*(void **)(v2 + 160));
  v4 = *(void **)(v1 + 368);
  if (v4)
  {
    *(_QWORD *)(v1 + 376) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_217F13230()
{
  JUMPOUT(0x217F13228);
}

void sub_217F13238()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1310])
      JUMPOUT(0x217F13078);
  }
}

void sub_217F13264()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1310])
      JUMPOUT(0x217F13078);
  }
}

void sub_217F13290()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1310])
      JUMPOUT(0x217F13078);
  }
}

void sub_217F132BC()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1310])
      JUMPOUT(0x217F13078);
  }
}

void sub_217F132E8()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1310])
      JUMPOUT(0x217F13078);
  }
}

void sub_217F13314()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1310])
      JUMPOUT(0x217F13078);
  }
}

void sub_217F13340()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1310])
      JUMPOUT(0x217F13078);
  }
}

void std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24D91A1A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D91A1A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::operator()(uint64_t a1, float **a2, float **a3)
{
  return turi::neural_net::xavier_weight_initializer::operator()(a1 + 8, *a2, *a3);
}

uint64_t std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::target_type()
{
}

void std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24D91A230;
  return result;
}

void std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91A230;
}

uint64_t std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::target_type()
{
}

_DWORD *std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &unk_24D91A2B0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &unk_24D91A2B0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::operator()(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  return turi::neural_net::scalar_weight_initializer::operator()((float *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_har_model_definition_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_217F1376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_1()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_human_action_recognition_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validateSizeRange(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string __p;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  std::string::size_type v23;

  v4 = *((_QWORD *)this + 3);
  if (v4 < 1 || (v6 = *((_QWORD *)this + 2), v6 <= v4))
  {
    CoreML::Result::Result(a2);
  }
  else
  {
    std::to_string(&v18, v6);
    v7 = std::string::insert(&v18, 0, "Size range is invalid (");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v19, ", ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((_QWORD *)this + 3));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v21, ").");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v23 = v15->__r_.__value_.__r.__words[2];
    v22 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a2, 12);
    if (SHIBYTE(v23) < 0)
      operator delete((void *)v22);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_217F15064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void CoreML::validateFeatureDescription(CoreML *this@<X0>, const CoreML::Specification::FeatureDescription *a2@<X1>, int a3@<W2>, CoreML::Result *a4@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  std::string *v9;
  __int128 v10;
  void *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  void *v69;
  std::string *v70;
  __int128 v71;
  CoreML *v72;
  _BOOL8 v73;
  uint64_t *v74;
  std::string *v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t i;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  _BOOL8 v98;
  uint64_t *v99;
  int v100;
  uint64_t *v103;
  int v104;
  uint64_t *v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  __int128 v123;
  uint64_t v124;
  int v125;
  const std::string::value_type *v126;
  std::string::size_type v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  uint64_t *v134;
  uint64_t *v135;
  std::string *v136;
  __int128 v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  std::string::size_type v141;
  std::string *v142;
  __int128 v143;
  std::string *v144;
  __int128 v145;
  uint64_t v146;
  int v147;
  const std::string::value_type *v148;
  std::string::size_type v149;
  std::string *v150;
  __int128 v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  std::string *v156;
  __int128 v157;
  std::string *v158;
  std::string::size_type v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  __int128 v163;
  void *v164;
  std::string *v165;
  __int128 v166;
  uint64_t v167;
  int v168;
  const std::string::value_type *v169;
  std::string::size_type v170;
  std::string *v171;
  __int128 v172;
  char v173;
  uint64_t *v174;
  std::string *v175;
  __int128 v176;
  uint64_t *v177;
  std::string *v178;
  __int128 v179;
  uint64_t *v180;
  unsigned int v181;
  std::string *v182;
  std::string::size_type v183;
  std::string *v184;
  __int128 v185;
  std::string *v186;
  __int128 v187;
  std::string *v188;
  __int128 v189;
  std::string *v190;
  __int128 v191;
  std::string *v192;
  std::string::size_type v193;
  std::string *v194;
  __int128 v195;
  std::string *v196;
  __int128 v197;
  std::string *v198;
  std::string::size_type v199;
  std::string *v200;
  __int128 v201;
  std::string *v202;
  __int128 v203;
  std::string *v204;
  __int128 v205;
  std::string *v206;
  __int128 v207;
  unint64_t v208;
  std::string *v209;
  __int128 v210;
  std::string *v211;
  std::string::size_type v212;
  std::string *v213;
  __int128 v214;
  std::string *v215;
  __int128 v216;
  std::string __p;
  uint64_t v218;
  std::string v219;
  std::string v220;
  std::string v221;
  std::string v222;
  std::string v223;
  _BYTE v224[24];
  uint64_t v225;
  std::string v226;

  v4 = (int)a2;
  v6 = *((_QWORD *)this + 2);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v6 + 23))
      goto LABEL_3;
LABEL_14:
    std::string::basic_string[abi:ne180100]<0>(v224, "Feature description must have a non-empty name.");
    CoreML::Result::Result(a4, 12);
    if ((v224[23] & 0x80000000) == 0)
      return;
    v11 = *(void **)v224;
    goto LABEL_16;
  }
  if (!*(_QWORD *)(v6 + 8))
    goto LABEL_14;
LABEL_3:
  v7 = *((_QWORD *)this + 4);
  if (this == (CoreML *)&CoreML::Specification::_FeatureDescription_default_instance_ || v7 == 0)
  {
    std::operator+<char>();
    v9 = std::string::append(&__p, " must specify a valid feature type.");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&v224[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)v224 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a4, 12);
    goto LABEL_9;
  }
  switch(*(_DWORD *)(v7 + 36))
  {
    case 0:
      std::operator+<char>();
      v12 = std::string::append(&__p, "'.");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      *(_QWORD *)&v224[16] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
      *(_OWORD *)v224 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(a4, 12);
      goto LABEL_9;
    case 4:
      v34 = *(_QWORD *)(v7 + 24);
      v36 = *(_QWORD *)(v34 + 16);
      v35 = *(_QWORD *)(v34 + 24);
      v38 = v36 > 0 && v35 > 0;
      if (v4 < 3)
        goto LABEL_271;
      v39 = *(_DWORD *)(v34 + 52);
      if (v39 != 31)
      {
        if (v39 == 21)
        {
          v40 = *(_QWORD *)(v34 + 40);
          v41 = *(int *)(v40 + 24);
          if (!(_DWORD)v41)
            goto LABEL_188;
          v42 = *(_QWORD *)(v40 + 32);
          if (v38)
          {
            if (v42)
              v43 = v42 + 8;
            else
              v43 = 0;
            v44 = 8 * v41;
            while (v36 != *(_QWORD *)(*(_QWORD *)v43 + 16) || v35 != *(_QWORD *)(*(_QWORD *)v43 + 24))
            {
              v43 += 8;
              v44 -= 8;
              if (!v44)
              {
                std::operator+<char>();
                v45 = std::string::append(&v221, "' has a default size of ");
                v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
                v222.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v46;
                v45->__r_.__value_.__l.__size_ = 0;
                v45->__r_.__value_.__r.__words[2] = 0;
                v45->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v220, v36);
                if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v47 = &v220;
                else
                  v47 = (std::string *)v220.__r_.__value_.__r.__words[0];
                if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v220.__r_.__value_.__r.__words[2]);
                else
                  size = v220.__r_.__value_.__l.__size_;
                v49 = std::string::append(&v222, (const std::string::value_type *)v47, size);
                v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
                v223.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v50;
                v49->__r_.__value_.__l.__size_ = 0;
                v49->__r_.__value_.__r.__words[2] = 0;
                v49->__r_.__value_.__r.__words[0] = 0;
                v51 = std::string::append(&v223, " × ");
                v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
                v226.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v52;
                v51->__r_.__value_.__l.__size_ = 0;
                v51->__r_.__value_.__r.__words[2] = 0;
                v51->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v219, v35);
                if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53 = &v219;
                else
                  v53 = (std::string *)v219.__r_.__value_.__r.__words[0];
                if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v54 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
                else
                  v54 = v219.__r_.__value_.__l.__size_;
                v55 = std::string::append(&v226, (const std::string::value_type *)v53, v54);
                v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                v57 = std::string::append(&__p, " which is not within the allowed enumerated sizes specified.");
                v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
                *(_QWORD *)&v224[16] = *((_QWORD *)&v57->__r_.__value_.__l + 2);
                *(_OWORD *)v224 = v58;
                v57->__r_.__value_.__l.__size_ = 0;
                v57->__r_.__value_.__r.__words[2] = 0;
                v57->__r_.__value_.__r.__words[0] = 0;
                CoreML::Result::Result(a4, 12);
                goto LABEL_323;
              }
            }
          }
          else
          {
            v152 = *(_QWORD *)(v42 + 8);
            v36 = *(_QWORD *)(v152 + 16);
            v35 = *(_QWORD *)(v152 + 24);
          }
        }
        goto LABEL_271;
      }
      v95 = *(uint64_t **)(*(_QWORD *)(v34 + 40) + 16);
      v96 = &CoreML::Specification::_SizeRange_default_instance_;
      if (v95)
        v97 = v95;
      else
        v97 = &CoreML::Specification::_SizeRange_default_instance_;
      CoreML::validateSizeRange((CoreML *)v97, (CoreML::Result *)v224);
      v98 = CoreML::Result::good((CoreML::Result *)v224);
      if (v98)
      {
        if (*(_DWORD *)(v7 + 36) == 4)
          v99 = *(uint64_t **)(v7 + 24);
        else
          v99 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v98);
        if (*((_DWORD *)v99 + 13) == 31)
          v153 = (uint64_t *)v99[5];
        else
          v153 = CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance((CoreML::Specification::ImageFeatureType_ImageSizeRange *)v99);
        if (v153[3])
          v96 = (uint64_t *)v153[3];
        CoreML::validateSizeRange((CoreML *)v96, (CoreML::Result *)&__p);
        *(_QWORD *)v224 = __p.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v225) < 0)
          operator delete(*(void **)&v224[8]);
        *(_OWORD *)&v224[8] = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
        v225 = v218;
        this = (CoreML *)CoreML::Result::good((CoreML::Result *)v224);
        if ((this & 1) != 0)
        {
          v154 = v97[2];
          if (v38)
          {
            if (v36 < v154 || (v155 = v97[3], (v155 & 0x8000000000000000) == 0) && v36 > v155)
            {
              std::operator+<char>();
              v156 = std::string::append(&v222, "' default width ");
              v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
              v223.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v157;
              v156->__r_.__value_.__l.__size_ = 0;
              v156->__r_.__value_.__r.__words[2] = 0;
              v156->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v221, v36);
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v158 = &v221;
              else
                v158 = (std::string *)v221.__r_.__value_.__r.__words[0];
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v159 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
              else
                v159 = v221.__r_.__value_.__l.__size_;
              v160 = std::string::append(&v223, (const std::string::value_type *)v158, v159);
              v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
              v226.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v161;
              v160->__r_.__value_.__l.__size_ = 0;
              v160->__r_.__value_.__r.__words[2] = 0;
              v160->__r_.__value_.__r.__words[0] = 0;
              v162 = std::string::append(&v226, " is not within specified flexible width range");
              v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v163;
              v162->__r_.__value_.__l.__size_ = 0;
              v162->__r_.__value_.__r.__words[2] = 0;
              v162->__r_.__value_.__r.__words[0] = 0;
              this = (CoreML *)CoreML::Result::Result(a4, 12);
LABEL_243:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v226.__r_.__value_.__l.__data_);
              if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v221.__r_.__value_.__l.__data_);
              if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v223.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_267;
              v164 = (void *)v222.__r_.__value_.__r.__words[0];
LABEL_266:
              operator delete(v164);
LABEL_267:
              v173 = 0;
              goto LABEL_268;
            }
            if (v35 < v96[2] || (v208 = v96[3], v173 = 1, (v208 & 0x8000000000000000) == 0) && v35 > v208)
            {
              std::operator+<char>();
              v209 = std::string::append(&v222, "' default height ");
              v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
              v223.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v210;
              v209->__r_.__value_.__l.__size_ = 0;
              v209->__r_.__value_.__r.__words[2] = 0;
              v209->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v221, v35);
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v211 = &v221;
              else
                v211 = (std::string *)v221.__r_.__value_.__r.__words[0];
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v212 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
              else
                v212 = v221.__r_.__value_.__l.__size_;
              v213 = std::string::append(&v223, (const std::string::value_type *)v211, v212);
              v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
              v226.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v214;
              v213->__r_.__value_.__l.__size_ = 0;
              v213->__r_.__value_.__r.__words[2] = 0;
              v213->__r_.__value_.__r.__words[0] = 0;
              v215 = std::string::append(&v226, " is not within specified flexible height range");
              v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v216;
              v215->__r_.__value_.__l.__size_ = 0;
              v215->__r_.__value_.__r.__words[2] = 0;
              v215->__r_.__value_.__r.__words[0] = 0;
              this = (CoreML *)CoreML::Result::Result(a4, 12);
              goto LABEL_243;
            }
          }
          else
          {
            v35 = v96[2];
            v173 = 1;
            v36 = v154;
          }
LABEL_268:
          if (SHIBYTE(v225) < 0)
            operator delete(*(void **)&v224[8]);
          if ((v173 & 1) == 0)
            return;
LABEL_271:
          if (v36 <= 0)
          {
            std::operator+<char>();
            v175 = std::string::append(&v223, "' has missing or non-positive width ");
            v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
            v226.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v176;
            v175->__r_.__value_.__l.__size_ = 0;
            v175->__r_.__value_.__r.__words[2] = 0;
            v175->__r_.__value_.__r.__words[0] = 0;
            if (*(_DWORD *)(v7 + 36) == 4)
              v177 = *(uint64_t **)(v7 + 24);
            else
              v177 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v175);
            std::to_string(&v222, v177[2]);
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v182 = &v222;
            else
              v182 = (std::string *)v222.__r_.__value_.__r.__words[0];
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v183 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
            else
              v183 = v222.__r_.__value_.__l.__size_;
          }
          else
          {
            if (v35 > 0)
            {
              if (*(_DWORD *)(v7 + 36) == 4)
                v174 = *(uint64_t **)(v7 + 24);
              else
                v174 = CoreML::Specification::ImageFeatureType::default_instance(this);
              v181 = *((_DWORD *)v174 + 8);
              if (v181 > 0x1E || ((1 << v181) & 0x40100400) == 0)
              {
                std::operator+<char>();
                v188 = std::string::append(&__p, "' has missing or invalid colorspace. It must be RGB, BGR or GRAYSCALE.");
                v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
                *(_QWORD *)&v224[16] = *((_QWORD *)&v188->__r_.__value_.__l + 2);
                *(_OWORD *)v224 = v189;
                v188->__r_.__value_.__l.__size_ = 0;
                v188->__r_.__value_.__r.__words[2] = 0;
                v188->__r_.__value_.__r.__words[0] = 0;
                CoreML::Result::Result(a4, 12);
                goto LABEL_9;
              }
              goto LABEL_282;
            }
            std::operator+<char>();
            v178 = std::string::append(&v223, "' has missing or non-positive height ");
            v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
            v226.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v179;
            v178->__r_.__value_.__l.__size_ = 0;
            v178->__r_.__value_.__r.__words[2] = 0;
            v178->__r_.__value_.__r.__words[0] = 0;
            if (*(_DWORD *)(v7 + 36) == 4)
              v180 = *(uint64_t **)(v7 + 24);
            else
              v180 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v178);
            std::to_string(&v222, v180[3]);
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v182 = &v222;
            else
              v182 = (std::string *)v222.__r_.__value_.__r.__words[0];
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v183 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
            else
              v183 = v222.__r_.__value_.__l.__size_;
          }
          v184 = std::string::append(&v226, (const std::string::value_type *)v182, v183);
          v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v185;
          v184->__r_.__value_.__l.__size_ = 0;
          v184->__r_.__value_.__r.__words[2] = 0;
          v184->__r_.__value_.__r.__words[0] = 0;
          v186 = std::string::append(&__p, ".");
          v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
          *(_QWORD *)&v224[16] = *((_QWORD *)&v186->__r_.__value_.__l + 2);
          *(_OWORD *)v224 = v187;
          v186->__r_.__value_.__l.__size_ = 0;
          v186->__r_.__value_.__r.__words[2] = 0;
          v186->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          if ((v224[23] & 0x80000000) != 0)
            operator delete(*(void **)v224);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
          {
            v69 = (void *)v222.__r_.__value_.__r.__words[0];
            goto LABEL_303;
          }
          goto LABEL_304;
        }
        std::operator+<char>();
        v165 = std::string::append(&v223, "' has an invalid flexible height range. ");
        v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
        v226.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v166;
        v165->__r_.__value_.__l.__size_ = 0;
        v165->__r_.__value_.__r.__words[2] = 0;
        v165->__r_.__value_.__r.__words[0] = 0;
        v167 = turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)v224);
        v168 = *(char *)(v167 + 23);
        if (v168 >= 0)
          v169 = (const std::string::value_type *)v167;
        else
          v169 = *(const std::string::value_type **)v167;
        if (v168 >= 0)
          v170 = *(unsigned __int8 *)(v167 + 23);
        else
          v170 = *(_QWORD *)(v167 + 8);
        v171 = std::string::append(&v226, v169, v170);
        v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v172;
        v171->__r_.__value_.__l.__size_ = 0;
        v171->__r_.__value_.__r.__words[2] = 0;
        v171->__r_.__value_.__r.__words[0] = 0;
        this = (CoreML *)CoreML::Result::Result(a4, 12);
      }
      else
      {
        std::operator+<char>();
        v122 = std::string::append(&v223, "' has an invalid flexible width range. ");
        v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
        v226.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v123;
        v122->__r_.__value_.__l.__size_ = 0;
        v122->__r_.__value_.__r.__words[2] = 0;
        v122->__r_.__value_.__r.__words[0] = 0;
        v124 = turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)v224);
        v125 = *(char *)(v124 + 23);
        if (v125 >= 0)
          v126 = (const std::string::value_type *)v124;
        else
          v126 = *(const std::string::value_type **)v124;
        if (v125 >= 0)
          v127 = *(unsigned __int8 *)(v124 + 23);
        else
          v127 = *(_QWORD *)(v124 + 8);
        v128 = std::string::append(&v226, v126, v127);
        v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v129;
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        this = (CoreML *)CoreML::Result::Result(a4, 12);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v226.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_267;
      v164 = (void *)v223.__r_.__value_.__r.__words[0];
      goto LABEL_266;
    case 5:
      v14 = *(_QWORD *)(v7 + 24);
      v15 = *(_DWORD *)(v14 + 16);
      if (v4 < 3)
        goto LABEL_89;
      v16 = *(_DWORD *)(v14 + 60);
      if (v16 == 31)
      {
        v84 = *(_QWORD *)(v14 + 40);
        LODWORD(v85) = *(_DWORD *)(v84 + 24);
        if ((int)v85 >= 1)
        {
          v86 = 0;
          while (1)
          {
            CoreML::validateSizeRange(*(CoreML **)(*(_QWORD *)(v84 + 32) + 8 * v86 + 8), (CoreML::Result *)v224);
            this = (CoreML *)CoreML::Result::good((CoreML::Result *)v224);
            if ((this & 1) == 0)
              break;
            if (SHIBYTE(v225) < 0)
              operator delete(*(void **)&v224[8]);
            ++v86;
            v85 = *(int *)(v84 + 24);
            if (v86 >= v85)
              goto LABEL_116;
          }
          std::operator+<char>();
          v138 = std::string::append(&v221, "' has an invalid range for dimension ");
          v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
          v222.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v139;
          v138->__r_.__value_.__l.__size_ = 0;
          v138->__r_.__value_.__r.__words[2] = 0;
          v138->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v220, v86);
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v140 = &v220;
          else
            v140 = (std::string *)v220.__r_.__value_.__r.__words[0];
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v141 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          else
            v141 = v220.__r_.__value_.__l.__size_;
          v142 = std::string::append(&v222, (const std::string::value_type *)v140, v141);
          v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
          v223.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v143;
          v142->__r_.__value_.__l.__size_ = 0;
          v142->__r_.__value_.__r.__words[2] = 0;
          v142->__r_.__value_.__r.__words[0] = 0;
          v144 = std::string::append(&v223, ". ");
          v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
          v226.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v145;
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          v146 = turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)v224);
          v147 = *(char *)(v146 + 23);
          if (v147 >= 0)
            v148 = (const std::string::value_type *)v146;
          else
            v148 = *(const std::string::value_type **)v146;
          if (v147 >= 0)
            v149 = *(unsigned __int8 *)(v146 + 23);
          else
            v149 = *(_QWORD *)(v146 + 8);
          v150 = std::string::append(&v226, v148, v149);
          v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v151;
          v150->__r_.__value_.__l.__size_ = 0;
          v150->__r_.__value_.__r.__words[2] = 0;
          v150->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v226.__r_.__value_.__l.__data_);
          if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v223.__r_.__value_.__l.__data_);
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v220.__r_.__value_.__l.__data_);
          if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v222.__r_.__value_.__l.__data_);
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          {
            v83 = (void *)v221.__r_.__value_.__r.__words[0];
            goto LABEL_219;
          }
          goto LABEL_220;
        }
LABEL_116:
        if (!v15)
          goto LABEL_135;
        if (*(_DWORD *)(v14 + 16) != (_DWORD)v85)
        {
          std::operator+<char>();
          v190 = std::string::append(&v221, "' has a default ");
          v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
          v222.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v191;
          v190->__r_.__value_.__l.__size_ = 0;
          v190->__r_.__value_.__r.__words[2] = 0;
          v190->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v220, *(_DWORD *)(v14 + 16));
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v192 = &v220;
          else
            v192 = (std::string *)v220.__r_.__value_.__r.__words[0];
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v193 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          else
            v193 = v220.__r_.__value_.__l.__size_;
          v194 = std::string::append(&v222, (const std::string::value_type *)v192, v193);
          v195 = *(_OWORD *)&v194->__r_.__value_.__l.__data_;
          v223.__r_.__value_.__r.__words[2] = v194->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v195;
          v194->__r_.__value_.__l.__size_ = 0;
          v194->__r_.__value_.__r.__words[2] = 0;
          v194->__r_.__value_.__r.__words[0] = 0;
          v196 = std::string::append(&v223, "-d shape but a ");
          v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
          v226.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v197;
          v196->__r_.__value_.__l.__size_ = 0;
          v196->__r_.__value_.__r.__words[2] = 0;
          v196->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v219, *(_DWORD *)(v84 + 24));
          if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v198 = &v219;
          else
            v198 = (std::string *)v219.__r_.__value_.__r.__words[0];
          if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v199 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
          else
            v199 = v219.__r_.__value_.__l.__size_;
          v200 = std::string::append(&v226, (const std::string::value_type *)v198, v199);
          v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v201;
          v200->__r_.__value_.__l.__size_ = 0;
          v200->__r_.__value_.__r.__words[2] = 0;
          v200->__r_.__value_.__r.__words[0] = 0;
          v202 = std::string::append(&__p, "-d shape range");
          v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
          *(_QWORD *)&v224[16] = *((_QWORD *)&v202->__r_.__value_.__l + 2);
          *(_OWORD *)v224 = v203;
          v202->__r_.__value_.__l.__size_ = 0;
          v202->__r_.__value_.__r.__words[2] = 0;
          v202->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
LABEL_323:
          if ((v224[23] & 0x80000000) != 0)
            operator delete(*(void **)v224);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v219.__r_.__value_.__l.__data_);
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v226.__r_.__value_.__l.__data_);
          if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v223.__r_.__value_.__l.__data_);
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v220.__r_.__value_.__l.__data_);
          if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v222.__r_.__value_.__l.__data_);
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          {
            v11 = (void *)v221.__r_.__value_.__r.__words[0];
            goto LABEL_16;
          }
          return;
        }
        if ((int)v85 < 1)
        {
LABEL_125:
          for (i = 0; ; ++i)
          {
            if (*(_DWORD *)(v7 + 36) == 5)
              this = *(CoreML **)(v7 + 24);
            else
              this = (CoreML *)CoreML::Specification::ArrayFeatureType::default_instance(this);
            if (i >= *((int *)this + 4))
              goto LABEL_135;
            this = *(_DWORD *)(v7 + 36) == 5
                 ? *(CoreML **)(v7 + 24)
                 : (CoreML *)CoreML::Specification::ArrayFeatureType::default_instance(this);
            v93 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * i + 8);
            if (v93 < 0)
              break;
          }
          std::operator+<char>();
          v106 = std::string::append(&v221, "' has an invalid shape. Element ");
          v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          v222.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v220, i);
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = &v220;
          else
            v108 = (std::string *)v220.__r_.__value_.__r.__words[0];
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v109 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          else
            v109 = v220.__r_.__value_.__l.__size_;
          v110 = std::string::append(&v222, (const std::string::value_type *)v108, v109);
          v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          v223.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          v112 = std::string::append(&v223, " has non-positive value ");
          v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v226.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v219, v93);
          if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v114 = &v219;
          else
            v114 = (std::string *)v219.__r_.__value_.__r.__words[0];
          if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v115 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
          else
            v115 = v219.__r_.__value_.__l.__size_;
          v116 = std::string::append(&v226, (const std::string::value_type *)v114, v115);
          v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          v118 = std::string::append(&__p, ".");
          v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          *(_QWORD *)&v224[16] = *((_QWORD *)&v118->__r_.__value_.__l + 2);
          *(_OWORD *)v224 = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          goto LABEL_323;
        }
        v85 = v85;
        v87 = *(_QWORD *)(v84 + 32) + 8;
        v88 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 8);
        while (1)
        {
          v90 = *v88++;
          v89 = v90;
          if (v90 < *(int *)(*(_QWORD *)v87 + 16))
            break;
          v91 = *(_QWORD *)(*(_QWORD *)v87 + 24);
          if ((v91 & 0x8000000000000000) == 0 && v89 > v91)
            break;
          v87 += 8;
          if (!--v85)
            goto LABEL_124;
        }
        std::operator+<char>();
        v206 = std::string::append(&__p, "' has a default shape that is out of the specified shape range");
        v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
        *(_QWORD *)&v224[16] = *((_QWORD *)&v206->__r_.__value_.__l + 2);
        *(_OWORD *)v224 = v207;
        v206->__r_.__value_.__l.__size_ = 0;
        v206->__r_.__value_.__r.__words[2] = 0;
        v206->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
LABEL_9:
        if ((v224[23] & 0x80000000) != 0)
          operator delete(*(void **)v224);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v11 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_16;
      }
      if (v16 != 21)
      {
LABEL_89:
        if (a3 && !v15)
        {
          std::operator+<char>();
          v70 = std::string::append(&__p, "' has missing shape constraints.");
          v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          *(_QWORD *)&v224[16] = *((_QWORD *)&v70->__r_.__value_.__l + 2);
          *(_OWORD *)v224 = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          goto LABEL_9;
        }
LABEL_124:
        if (!v15)
        {
LABEL_135:
          if (*(_DWORD *)(v7 + 36) == 5)
            v94 = *(uint64_t **)(v7 + 24);
          else
            v94 = CoreML::Specification::ArrayFeatureType::default_instance(this);
          v100 = *((_DWORD *)v94 + 9);
          if (v100 != 65568 && v100 != 65600 && v100 != 131104)
          {
            std::operator+<char>();
            v130 = std::string::append(&__p, "' has an invalid or unspecified dataType. It must be specified as DOUBLE, FLOAT32 or INT32");
            v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
            *(_QWORD *)&v224[16] = *((_QWORD *)&v130->__r_.__value_.__l + 2);
            *(_OWORD *)v224 = v131;
            v130->__r_.__value_.__l.__size_ = 0;
            v130->__r_.__value_.__r.__words[2] = 0;
            v130->__r_.__value_.__r.__words[0] = 0;
            CoreML::Result::Result(a4, 12);
            goto LABEL_9;
          }
          if (*(_DWORD *)(v7 + 36) == 5)
            v103 = *(uint64_t **)(v7 + 24);
          else
            v103 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v94);
          v104 = *((_DWORD *)v103 + 16);
          switch(v104)
          {
            case ')':
              if (*(_DWORD *)(v7 + 36) == 5)
                v134 = *(uint64_t **)(v7 + 24);
              else
                v134 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v103);
              if (*((_DWORD *)v134 + 9) != 131104)
                goto LABEL_347;
              break;
            case '3':
              if (*(_DWORD *)(v7 + 36) == 5)
                v135 = *(uint64_t **)(v7 + 24);
              else
                v135 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v103);
              if (*((_DWORD *)v135 + 9) != 65568)
                goto LABEL_347;
              break;
            case '=':
              v105 = *(_DWORD *)(v7 + 36) == 5
                   ? *(uint64_t **)(v7 + 24)
                   : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v103);
              if (*((_DWORD *)v105 + 9) != 65600)
              {
LABEL_347:
                std::operator+<char>();
                v204 = std::string::append(&__p, "' has mistmatch between dataType and the type of default optional value.");
                v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
                *(_QWORD *)&v224[16] = *((_QWORD *)&v204->__r_.__value_.__l + 2);
                *(_OWORD *)v224 = v205;
                v204->__r_.__value_.__l.__size_ = 0;
                v204->__r_.__value_.__r.__words[2] = 0;
                v204->__r_.__value_.__r.__words[0] = 0;
                CoreML::Result::Result(a4, 12);
                goto LABEL_9;
              }
              break;
          }
LABEL_282:
          CoreML::Result::Result(a4);
          return;
        }
        goto LABEL_125;
      }
      v17 = *(_QWORD *)(v14 + 40);
      v18 = *(int *)(v17 + 24);
      if (!(_DWORD)v18)
      {
LABEL_188:
        std::operator+<char>();
        v132 = std::string::append(&__p, "' has enumerated zero permitted sizes.");
        v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
        *(_QWORD *)&v224[16] = *((_QWORD *)&v132->__r_.__value_.__l + 2);
        *(_OWORD *)v224 = v133;
        v132->__r_.__value_.__l.__size_ = 0;
        v132->__r_.__value_.__r.__words[2] = 0;
        v132->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
        goto LABEL_9;
      }
      v19 = *(_QWORD *)(v17 + 32);
      if (v19)
        v20 = v19 + 8;
      else
        v20 = 0;
      v21 = v20 + 8 * v18;
      v22 = 8 * v18;
      v23 = v20;
      do
      {
        if (!*(_DWORD *)(*(_QWORD *)v23 + 16))
        {
          std::operator+<char>();
          v136 = std::string::append(&__p, "' has enumerated shapes with zero dimensions.");
          v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          *(_QWORD *)&v224[16] = *((_QWORD *)&v136->__r_.__value_.__l + 2);
          *(_OWORD *)v224 = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          goto LABEL_9;
        }
        v23 += 8;
        v22 -= 8;
      }
      while (v22);
      if (!v15)
        goto LABEL_135;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)v20 + 16) == v15)
        {
          if (v15 < 1)
            goto LABEL_124;
          v24 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v20 + 24) + 8);
          v25 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 8);
          v26 = *(unsigned int *)(v14 + 16);
          while (1)
          {
            v28 = *v25++;
            v27 = v28;
            v29 = *v24++;
            if (v27 != v29)
              break;
            if (!--v26)
              goto LABEL_124;
          }
        }
        v20 += 8;
      }
      while (v20 != v21);
      std::operator+<char>();
      v30 = std::string::append(&v226, "' has a default shape specified ");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = std::string::append(&__p, " which is not within the allowed enumerated shapes specified.");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      *(_QWORD *)&v224[16] = *((_QWORD *)&v32->__r_.__value_.__l + 2);
      *(_OWORD *)v224 = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(a4, 12);
      if ((v224[23] & 0x80000000) != 0)
        operator delete(*(void **)v224);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
      {
        v11 = (void *)v226.__r_.__value_.__r.__words[0];
        goto LABEL_16;
      }
      return;
    case 6:
      if (*(_DWORD *)(*(_QWORD *)(v7 + 24) + 28))
        goto LABEL_282;
      std::operator+<char>();
      v59 = std::string::append(&__p, "' must contain a key type of either Int64 or String.");
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      *(_QWORD *)&v224[16] = *((_QWORD *)&v59->__r_.__value_.__l + 2);
      *(_OWORD *)v224 = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(a4, 12);
      goto LABEL_9;
    case 7:
      if (v4 <= 2)
      {
        std::to_string(&v223, 3);
        v61 = std::string::insert(&v223, 0, "Sequence types are only valid in specification verison >= ");
        v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v226.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        v63 = std::string::append(&v226, ". This model has version ");
        v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v222, v4);
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = &v222;
        else
          v65 = (std::string *)v222.__r_.__value_.__r.__words[0];
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
        else
          v66 = v222.__r_.__value_.__l.__size_;
        v67 = std::string::append(&__p, (const std::string::value_type *)v65, v66);
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        *(_QWORD *)&v224[16] = *((_QWORD *)&v67->__r_.__value_.__l + 2);
        *(_OWORD *)v224 = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
        if ((v224[23] & 0x80000000) != 0)
          operator delete(*(void **)v224);
        if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v222.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v69 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_303:
          operator delete(v69);
        }
LABEL_304:
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v11 = (void *)v223.__r_.__value_.__r.__words[0];
LABEL_16:
        operator delete(v11);
        return;
      }
      if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 16))
        v72 = *(CoreML **)(*(_QWORD *)(v7 + 24) + 16);
      else
        v72 = (CoreML *)&CoreML::Specification::_SizeRange_default_instance_;
      CoreML::validateSizeRange(v72, (CoreML::Result *)v224);
      v73 = CoreML::Result::good((CoreML::Result *)v224);
      if (v73)
      {
        if (*(_DWORD *)(v7 + 36) == 7)
          v74 = *(uint64_t **)(v7 + 24);
        else
          v74 = CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v73);
        if (*((_DWORD *)v74 + 9))
        {
          if (SHIBYTE(v225) < 0)
            operator delete(*(void **)&v224[8]);
          goto LABEL_282;
        }
        std::operator+<char>();
        v120 = std::string::append(&v226, "' has invalid or missing type. Only Int64 and String sequences are currently supported");
        v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
        {
          v83 = (void *)v226.__r_.__value_.__r.__words[0];
          goto LABEL_219;
        }
      }
      else
      {
        std::operator+<char>();
        v75 = std::string::append(&v223, "' has invalid allowed sizes. ");
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v226.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        v77 = turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)v224);
        v78 = *(char *)(v77 + 23);
        if (v78 >= 0)
          v79 = (const std::string::value_type *)v77;
        else
          v79 = *(const std::string::value_type **)v77;
        if (v78 >= 0)
          v80 = *(unsigned __int8 *)(v77 + 23);
        else
          v80 = *(_QWORD *)(v77 + 8);
        v81 = std::string::append(&v226, v79, v80);
        v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
        {
          v83 = (void *)v223.__r_.__value_.__r.__words[0];
LABEL_219:
          operator delete(v83);
        }
      }
LABEL_220:
      if ((SHIBYTE(v225) & 0x80000000) == 0)
        return;
      v11 = *(void **)&v224[8];
      goto LABEL_16;
    default:
      goto LABEL_282;
  }
}

void sub_217F16854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 121) < 0)
    operator delete(*(void **)(v47 - 144));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  _Unwind_Resume(exception_object);
}

void CoreML::validateFeatureDescriptions(CoreML *this@<X0>, const CoreML::Specification::ModelDescription *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  CoreML **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CoreML **v12;
  uint64_t v13;
  void *__p[2];
  char v15;

  v4 = *((unsigned int *)this + 6);
  if ((int)v4 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Models must have one or more inputs.");
    CoreML::Result::Result((_DWORD *)a3, 12);
    goto LABEL_23;
  }
  if (*((int *)this + 12) <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Models must have one or more outputs.");
    CoreML::Result::Result((_DWORD *)a3, 12);
LABEL_23:
    if (v15 < 0)
      operator delete(__p[0]);
    return;
  }
  v7 = *((_QWORD *)this + 4);
  if (v7)
    v8 = (CoreML **)(v7 + 8);
  else
    v8 = 0;
  v9 = 8 * v4;
  while (1)
  {
    CoreML::validateFeatureDescription(*v8, a2, 1, (CoreML::Result *)a3);
    if (!CoreML::Result::good((CoreML::Result *)a3))
      break;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*(void **)(a3 + 8));
    ++v8;
    v9 -= 8;
    if (!v9)
    {
      v10 = *((int *)this + 12);
      v11 = *((_QWORD *)this + 7);
      if (v11)
        v12 = (CoreML **)(v11 + 8);
      else
        v12 = 0;
      if ((_DWORD)v10)
      {
        v13 = 8 * v10;
        while (1)
        {
          CoreML::validateFeatureDescription(*v12, a2, 0, (CoreML::Result *)a3);
          if (!CoreML::Result::good((CoreML::Result *)a3))
            break;
          if (*(char *)(a3 + 31) < 0)
            operator delete(*(void **)(a3 + 8));
          ++v12;
          v13 -= 8;
          if (!v13)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        CoreML::Result::Result((CoreML::Result *)a3);
      }
      return;
    }
  }
}

void sub_217F16E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CoreML::validateModelDescription@<W0>(CoreML *this@<X0>, const CoreML::Specification::ModelDescription *a2@<X1>, CoreML::Result *a3@<X8>)
{
  CoreML::validateFeatureDescriptions(this, a2, (uint64_t)a3);
  return CoreML::Result::good(a3);
}

void sub_217F16EBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::validateRegressorInterface(CoreML *this@<X0>, const CoreML::Specification::ModelDescription *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const void **v6;
  _QWORD *v7;
  void **v8;
  void *__p;
  void *v10;
  _QWORD *v11;
  void *v12;
  __int128 v13;
  uint64_t v14;

  v5 = *((_QWORD *)this + 11);
  if (*(char *)(v5 + 23) < 0)
  {
    if (*(_QWORD *)(v5 + 8))
    {
LABEL_3:
      CoreML::validateFeatureDescriptions(this, a2, a3);
      if (CoreML::Result::good((CoreML::Result *)a3))
      {
        v6 = (const void **)*((_QWORD *)this + 11);
        v7 = operator new(8uLL);
        __p = v7;
        *v7 = 0x500000002;
        v10 = v7 + 1;
        v11 = v7 + 1;
        CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)this + 40, v6, (int **)&__p, (CoreML::Result *)&v12);
        *(_QWORD *)a3 = v12;
        v8 = (void **)(a3 + 8);
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v8);
        *(_OWORD *)v8 = v13;
        *(_QWORD *)(a3 + 24) = v14;
        HIBYTE(v14) = 0;
        LOBYTE(v13) = 0;
        if (__p)
        {
          v10 = __p;
          operator delete(__p);
        }
        CoreML::Result::good((CoreML::Result *)a3);
      }
      return;
    }
  }
  else if (*(_BYTE *)(v5 + 23))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, "Specification is missing regressor predictedFeatureName.");
  CoreML::Result::Result((_DWORD *)a3, 12);
  if (SHIBYTE(v13) < 0)
    operator delete(v12);
}

void sub_217F16FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (__p)
    operator delete(__p);
  if (*(char *)(v18 + 31) < 0)
    operator delete(*(void **)(v18 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(uint64_t a1@<X0>, const void **a2@<X1>, int **a3@<X2>, CoreML::Result *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void *v11;
  const void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void *v17;
  const void *v18;
  size_t v19;
  std::string *v21;
  __int128 v22;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;
  char v26[8];
  void *v27;
  char v28;

  CoreML::Result::Result((CoreML::Result *)v26);
  v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1)
  {
LABEL_23:
    std::operator+<char>();
    v21 = std::string::append(&v23, "' to the model is not present in the model description.");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v25 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a4, 10);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *((char *)a2 + 23);
    if (v10 >= 0)
      v11 = (const void *)*((unsigned __int8 *)a2 + 23);
    else
      v11 = a2[1];
    if (v10 >= 0)
      v12 = a2;
    else
      v12 = *a2;
    v13 = (uint64_t *)(v9 + 8);
    while (1)
    {
      v14 = *v13;
      v15 = *(_QWORD *)(*v13 + 16);
      v16 = *(char *)(v15 + 23);
      v17 = v16 >= 0 ? (const void *)*(unsigned __int8 *)(v15 + 23) : *(const void **)(v15 + 8);
      v18 = v16 >= 0 ? *(const void **)(*v13 + 16) : *(const void **)v15;
      v19 = (size_t)(v17 >= v11 ? v11 : v17);
      if (!memcmp(v12, v18, v19) && v17 == v11)
        break;
      ++v13;
      if (!--v8)
        goto LABEL_23;
    }
    CoreML::validateSchemaTypes(a3, v14, a4);
  }
  if (v28 < 0)
    operator delete(v27);
}

void sub_217F17198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::validateClassifierFeatureDescriptions(CoreML *this@<X0>, const CoreML::Specification::ModelDescription *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  int v9;
  _QWORD *v10;
  void *__p;
  void *v12;
  _QWORD *v13;

  v3 = (int)a2;
  v5 = *((_QWORD *)this + 11);
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v5 + 23))
      goto LABEL_3;
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Specification is missing classifier predictedFeatureName");
    CoreML::Result::Result((_DWORD *)a3, 12);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    return;
  }
  if (!*(_QWORD *)(v5 + 8))
    goto LABEL_15;
LABEL_3:
  v6 = *((_QWORD *)this + 12);
  v7 = (char *)this + 40;
  v8 = operator new(4uLL);
  if (v3)
    v9 = 1;
  else
    v9 = 3;
  __p = v8;
  *v8 = v9;
  v12 = v8 + 1;
  v13 = v8 + 1;
  CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v7, (const void **)v5, (int **)&__p, (CoreML::Result *)a3);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    if (*(char *)(a3 + 31) < 0)
      operator delete(*(void **)(a3 + 8));
    if (*(char *)(v6 + 23) < 0)
    {
      if (!*(_QWORD *)(v6 + 8))
      {
LABEL_23:
        CoreML::Result::Result((CoreML::Result *)a3);
        return;
      }
    }
    else if (!*(_BYTE *)(v6 + 23))
    {
      goto LABEL_23;
    }
    v10 = operator new(8uLL);
    __p = v10;
    *v10 = 0x600000005;
    v12 = v10 + 1;
    v13 = v10 + 1;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v7, (const void **)v6, (int **)&__p, (CoreML::Result *)a3);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      if (*(char *)(a3 + 31) < 0)
        operator delete(*(void **)(a3 + 8));
      goto LABEL_23;
    }
  }
}

void sub_217F17358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::validateOptional(CoreML *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  __int128 __p;
  uint64_t v34;
  void *v35[2];
  char v36;

  CoreML::Result::Result((CoreML::Result *)&v32);
  CoreML::validateDefaultOptionalValues(this, (CoreML::Result *)&v29);
  v32 = v29;
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
  __p = v30;
  v34 = v31;
  if (!CoreML::Result::good((CoreML::Result *)&v32))
    goto LABEL_75;
  v5 = *((_DWORD *)this + 11);
  if (v5 <= 402)
  {
    if (v5 > 301)
    {
      switch(v5)
      {
        case 302:
          goto LABEL_62;
        case 303:
          goto LABEL_23;
        case 402:
          goto LABEL_62;
      }
    }
    else if ((v5 - 200) < 3)
    {
      goto LABEL_62;
    }
    goto LABEL_38;
  }
  if (v5 <= 501)
  {
    if (v5 == 403 || v5 == 500)
      goto LABEL_23;
    if (v5 == 501)
      goto LABEL_62;
LABEL_38:
    v12 = (uint64_t *)*((_QWORD *)this + 2);
    if (!v12)
      v12 = &CoreML::Specification::_ModelDescription_default_instance_;
    v13 = v12[4];
    if (v13)
      v14 = v13 + 8;
    else
      v14 = 0;
    v15 = *((int *)v12 + 6);
    if ((_DWORD)v15)
    {
      v16 = 8 * v15;
      while (1)
      {
        v17 = *(uint64_t **)(*(_QWORD *)v14 + 32);
        if (!v17)
          v17 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_BYTE *)v17 + 16))
          break;
        v14 += 8;
        v16 -= 8;
        if (!v16)
          goto LABEL_49;
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "Features cannot be optional to this type of model.");
      CoreML::Result::Result(&v29, 13);
      goto LABEL_35;
    }
LABEL_49:
    v18 = v12[7];
    if (v18)
      v19 = v18 + 8;
    else
      v19 = 0;
    v20 = *((int *)v12 + 12);
    if ((_DWORD)v20)
    {
      v21 = 8 * v20;
      while (1)
      {
        v22 = *(uint64_t **)(*(_QWORD *)v19 + 32);
        if (!v22)
          v22 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_BYTE *)v22 + 16))
          break;
        v19 += 8;
        v21 -= 8;
        if (!v21)
          goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "Outputs cannot be optional.");
      CoreML::Result::Result(&v29, 12);
      goto LABEL_35;
    }
    goto LABEL_58;
  }
  if (v5 > 899)
  {
    if (v5 == 900)
      goto LABEL_62;
    if (v5 == 3000)
      goto LABEL_23;
    goto LABEL_38;
  }
  if (v5 != 502)
  {
    if (v5 == 601)
      goto LABEL_62;
    goto LABEL_38;
  }
LABEL_23:
  v6 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*((_QWORD *)this + 2))
    v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = v6[4];
  if (v7)
    v8 = v7 + 8;
  else
    v8 = 0;
  v9 = *((int *)v6 + 6);
  if (!(_DWORD)v9)
  {
LABEL_34:
    std::string::basic_string[abi:ne180100]<0>(v35, "At least one feature for a neural network must NOT be optional.");
    CoreML::Result::Result(&v29, 13);
LABEL_35:
    if (v36 < 0)
      operator delete(v35[0]);
    goto LABEL_59;
  }
  v10 = 8 * v9;
  while (1)
  {
    v11 = *(uint64_t **)(*(_QWORD *)v8 + 32);
    if (!v11)
      v11 = &CoreML::Specification::_FeatureType_default_instance_;
    if (!*((_BYTE *)v11 + 16))
      break;
    v8 += 8;
    v10 -= 8;
    if (!v10)
      goto LABEL_34;
  }
LABEL_58:
  CoreML::Result::Result((CoreML::Result *)&v29);
LABEL_59:
  v32 = v29;
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
  __p = v30;
  v34 = v31;
LABEL_62:
  if (!CoreML::Result::good((CoreML::Result *)&v32))
  {
LABEL_75:
    *(_QWORD *)a2 = v32;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v34;
    __p = 0uLL;
    v34 = 0;
    goto LABEL_76;
  }
  v23 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*((_QWORD *)this + 2))
    v23 = (uint64_t *)*((_QWORD *)this + 2);
  v24 = v23[7];
  if (v24)
    v25 = v24 + 8;
  else
    v25 = 0;
  v26 = *((int *)v23 + 12);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    while (1)
    {
      v28 = *(uint64_t **)(*(_QWORD *)v25 + 32);
      if (!v28)
        v28 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_BYTE *)v28 + 16))
        break;
      v25 += 8;
      v27 -= 8;
      if (!v27)
        goto LABEL_74;
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, "Outputs cannot be optional.");
    CoreML::Result::Result((_DWORD *)a2, 12);
    if (SHIBYTE(v30) < 0)
      operator delete(v29);
  }
  else
  {
LABEL_74:
    CoreML::Result::Result((CoreML::Result *)a2);
  }
LABEL_76:
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
}

void sub_217F17744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::validateDefaultOptionalValues(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CoreML *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  int v15;
  void *__p[2];
  char v17;

  v4 = (uint64_t *)*((_QWORD *)this + 2);
  if (!v4)
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  v5 = v4[4];
  if (v5)
    v6 = v5 + 8;
  else
    v6 = 0;
  v7 = *((int *)v4 + 6);
  if (!(_DWORD)v7)
  {
LABEL_27:
    CoreML::Result::Result(a2);
    return;
  }
  v8 = this;
  v9 = 8 * v7;
  while (1)
  {
    v10 = *(uint64_t **)(*(_QWORD *)v6 + 32);
    if (!v10)
      v10 = &CoreML::Specification::_FeatureType_default_instance_;
    if (!*((_BYTE *)v10 + 16))
      goto LABEL_26;
    this = *((_DWORD *)v10 + 9) == 5
         ? (CoreML *)v10[3]
         : (CoreML *)CoreML::Specification::ArrayFeatureType::default_instance(this);
    v11 = *((_DWORD *)this + 16);
    v12 = v11 > 0x3D;
    v13 = (1 << v11) & 0x2008020000000000;
    if (v12 || v13 == 0)
      goto LABEL_26;
    v15 = *((_DWORD *)v8 + 11);
    if (v15 > 499)
    {
      if (v15 != 500 && v15 != 502 && v15 != 3000)
        break;
      goto LABEL_25;
    }
    if (v15 != 303 && v15 != 403)
      break;
LABEL_25:
    if (*((int *)v8 + 6) <= 4)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Default value for optional inputs is supported from specification 5 (iOS 14) onwards!");
      CoreML::Result::Result(a2, 12);
      goto LABEL_29;
    }
LABEL_26:
    v6 += 8;
    v9 -= 8;
    if (!v9)
      goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Default optional values are only allowed for neural networks.");
  CoreML::Result::Result(a2, 13);
LABEL_29:
  if (v17 < 0)
    operator delete(__p[0]);
}

void sub_217F17930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::validateCanModelBeUpdatable(CoreML *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  void *__p[2];
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;

  CoreML::Result::Result((CoreML::Result *)&v8);
  v5 = *((_DWORD *)this + 11);
  if (v5 > 402)
  {
    if ((v5 - 403) >= 2 && v5 != 500)
      goto LABEL_9;
LABEL_7:
    *(_QWORD *)a2 = v8;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)v9;
    *(_QWORD *)(a2 + 24) = v10;
    return;
  }
  if ((v5 - 200) < 3 || v5 == 303)
    goto LABEL_7;
LABEL_9:
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  MEMORY[0x219A19390](__p, "This model type is not supported for on-device update.");
  CoreML::Result::Result((_DWORD *)a2, 14);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
}

void sub_217F17A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_InterfaceValidators_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)604>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  _DWORD *v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  void *v25;
  char *v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  __int128 __p;
  uint64_t v32;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(uint64_t **)(a1 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v30);
  CoreML::validateModelDescription((CoreML *)v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v27);
  v30 = v27;
  if (SHIBYTE(v32) < 0)
    operator delete((void *)__p);
  __p = v28;
  v32 = v29;
  if (!CoreML::Result::good((CoreML::Result *)&v30))
    goto LABEL_41;
  v5 = operator new(0xCuLL);
  v25 = v5 + 3;
  v26 = (char *)(v5 + 3);
  *(_QWORD *)v5 = 0x200000001;
  v5[2] = 5;
  v24 = v5;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 2), 1, (int **)&v24, (uint64_t)&v27);
  v30 = v27;
  if (SHIBYTE(v32) < 0)
    operator delete((void *)__p);
  __p = v28;
  v32 = v29;
  HIBYTE(v29) = 0;
  LOBYTE(v28) = 0;
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v30))
    goto LABEL_41;
  v6 = operator new(0xCuLL);
  v25 = v6 + 3;
  v26 = (char *)(v6 + 3);
  *(_QWORD *)v6 = 0x200000001;
  v6[2] = 5;
  v24 = v6;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 5), 1, (int **)&v24, (uint64_t)&v27);
  v30 = v27;
  if (SHIBYTE(v32) < 0)
    operator delete((void *)__p);
  __p = v28;
  v32 = v29;
  HIBYTE(v29) = 0;
  LOBYTE(v28) = 0;
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  v7 = CoreML::Result::good((CoreML::Result *)&v30);
  if (!v7)
    goto LABEL_41;
  v8 = *(_QWORD *)(v4[4] + 8);
  v9 = *(uint64_t **)(v8 + 32);
  if (!v9)
    v9 = &CoreML::Specification::_FeatureType_default_instance_;
  v10 = *((_DWORD *)v9 + 9);
  v11 = *(uint64_t **)(*(_QWORD *)(v4[7] + 8) + 32);
  if (!v11)
    v11 = &CoreML::Specification::_FeatureType_default_instance_;
  v12 = *((_DWORD *)v11 + 9);
  if (v10 == 1)
  {
    if ((v12 - 1) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v27, "Input type Int64 must output to Int64 or Double.");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_48;
    }
  }
  else
  {
    if (v12 != v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v27, "Type of input feature does not match the output type feature.");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_48;
    }
    if (v10 == 5)
    {
      v13 = v9[3];
      if (*(_DWORD *)(v13 + 16) == 1)
      {
        v14 = v11[3];
        if (*(_DWORD *)(v14 + 16) == 1
          && *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) == *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8))
        {
          if (*(_DWORD *)(a1 + 44) == 604)
            v15 = *(uint64_t **)(a1 + 32);
          else
            v15 = CoreML::Specification::Scaler::default_instance((CoreML::Specification::Scaler *)v7);
          v18 = *((int *)v15 + 4);
          if (v18 < 2)
            goto LABEL_58;
          v19 = *(uint64_t **)(v8 + 32);
          if (!v19)
            v19 = &CoreML::Specification::_FeatureType_default_instance_;
          v15 = *((_DWORD *)v19 + 9) == 5
              ? (uint64_t *)v19[3]
              : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v15);
          if (*(_QWORD *)(v15[3] + 8) == v18)
          {
LABEL_58:
            if (*(_DWORD *)(a1 + 44) == 604)
              v20 = *(int **)(a1 + 32);
            else
              v20 = (int *)CoreML::Specification::Scaler::default_instance((CoreML::Specification::Scaler *)v15);
            v21 = v20[10];
            if (v21 < 2)
              goto LABEL_41;
            v22 = *(uint64_t **)(v8 + 32);
            if (!v22)
              v22 = &CoreML::Specification::_FeatureType_default_instance_;
            v23 = *((_DWORD *)v22 + 9) == 5
                ? (uint64_t *)v22[3]
                : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v20);
            if (*(_QWORD *)(v23[3] + 8) == v21)
              goto LABEL_41;
            std::string::basic_string[abi:ne180100]<0>(&v27, "For input type array, specified scale values must be empty, a scalar, or a vector of the matching length.");
            CoreML::Result::Result((_DWORD *)a2, 13);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v27, "For input type array, specified shift values must be empty, a scalar, or a vector of the matching length.");
            CoreML::Result::Result((_DWORD *)a2, 13);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v27, "Shape of output array does not match shape of input array.");
          CoreML::Result::Result((_DWORD *)a2, 13);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v27, "Only 1 dimensional arrays input features are supported by the scaler.");
        CoreML::Result::Result((_DWORD *)a2, 13);
      }
      goto LABEL_48;
    }
  }
  if (*(_DWORD *)(a1 + 44) == 604)
    v16 = *(uint64_t **)(a1 + 32);
  else
    v16 = CoreML::Specification::Scaler::default_instance((CoreML::Specification::Scaler *)v7);
  if (*((_DWORD *)v16 + 4) >= 2u)
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, "For a scalar imput type, specified shift value must be empty or a scalar.");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  else
  {
    if (*(_DWORD *)(a1 + 44) == 604)
      v17 = *(uint64_t **)(a1 + 32);
    else
      v17 = CoreML::Specification::Scaler::default_instance((CoreML::Specification::Scaler *)v16);
    if (*((_DWORD *)v17 + 10) < 2u)
    {
LABEL_41:
      *(_QWORD *)a2 = v30;
      *(_OWORD *)(a2 + 8) = __p;
      *(_QWORD *)(a2 + 24) = v32;
      __p = 0uLL;
      v32 = 0;
      goto LABEL_42;
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, "For input type array, specified scale values must be empty or a scalar.");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
LABEL_48:
  if (SHIBYTE(v28) < 0)
    operator delete(v27);
LABEL_42:
  if (SHIBYTE(v32) < 0)
    operator delete((void *)__p);
}

void sub_217F17F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_ScalarValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

TCModelTrainerBackendGraphs *turi::proprietary::neural_net::mlc_activity_classifier_backend::create_graphs(int *a1, uint64_t a2)
{
  TCMLComputeActivityClassifierDescriptor *v3;
  int v4;
  uint64_t v5;
  int v6;
  double v7;
  int *v8;
  int *v9;
  void *v10;
  int *v11;
  int *v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  char v65;
  void *exception;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *context;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  TCMLComputeActivityClassifierDescriptor *v81;
  TCModelTrainerBackendGraphs *v82;
  _QWORD v83[3];
  _QWORD v84[3];
  _QWORD v85[3];
  _QWORD v86[3];
  id v87[6];
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  _QWORD v93[2];
  _QWORD v94[2];
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  _QWORD v101[3];

  v101[1] = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x219A19FE4]();
  v82 = objc_alloc_init(TCModelTrainerBackendGraphs);
  v3 = objc_alloc_init(TCMLComputeActivityClassifierDescriptor);
  v4 = a1[4];
  v5 = *a1;
  v6 = a1[2];
  v81 = v3;
  -[TCMLComputeActivityClassifierDescriptor setOutputChannels:](v3, "setOutputChannels:", a1[3]);
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", v4 * (uint64_t)v6, 1, a1[1], v5);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v80, "setLabel:", CFSTR("input"));
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", a1[4], 1, a1[3], v5);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v78, "setLabel:", CFSTR("labels"));
  LODWORD(v7) = 0;
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:fillWithData:dataType:", a1[4], 1, a1[3], v5, 1, v7);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "setLabel:", CFSTR("weights"));
  turi::neural_net::mlc_layer_weights::mlc_layer_weights((turi::neural_net::mlc_layer_weights *)v87);
  v8 = (int *)*((_QWORD *)a1 + 4);
  if (v8 != a1 + 10)
  {
    while (1)
    {
      v9 = v8 + 8;
      if (*((char *)v8 + 55) < 0)
        v9 = (int *)*((_QWORD *)v8 + 4);
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v10, "hasPrefix:", CFSTR("conv")))
        break;
      if ((objc_msgSend(v10, "hasSuffix:", CFSTR("_weight")) & 1) != 0)
        goto LABEL_6;
      if ((objc_msgSend(v10, "hasSuffix:", CFSTR("_bias")) & 1) != 0)
        goto LABEL_10;
LABEL_19:

      v11 = (int *)*((_QWORD *)v8 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v8 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v13);
      }
      v8 = v12;
      if (v12 == a1 + 10)
        goto LABEL_25;
    }
    if ((objc_msgSend(v10, "hasPrefix:", CFSTR("bn")) & 1) != 0)
      goto LABEL_8;
    if (objc_msgSend(v10, "hasPrefix:", CFSTR("lstm")))
    {
      if (objc_msgSend(v10, "hasSuffix:", CFSTR("_weight")))
      {
        turi::neural_net::mlc_layer_weights::add_lstm_weight((uint64_t)v87, (__int128 *)v8 + 2, (uint64_t)(v8 + 14));
        goto LABEL_19;
      }
      if (!objc_msgSend(v10, "hasSuffix:", CFSTR("_bias")))
        goto LABEL_19;
LABEL_8:
      turi::neural_net::mlc_layer_weights::add_flat_array((uint64_t)v87, (__int128 *)v8 + 2, (uint64_t)(v8 + 14));
      goto LABEL_19;
    }
    if (!objc_msgSend(v10, "hasPrefix:", CFSTR("dense")))
      goto LABEL_19;
    if (!objc_msgSend(v10, "hasSuffix:", CFSTR("_weight")))
    {
      if (!objc_msgSend(v10, "hasSuffix:", CFSTR("_bias")))
        goto LABEL_19;
LABEL_10:
      turi::neural_net::mlc_layer_weights::add_conv_bias((uint64_t)v87, (__int128 *)v8 + 2, (uint64_t)(v8 + 14));
      goto LABEL_19;
    }
LABEL_6:
    turi::neural_net::mlc_layer_weights::add_conv_weight((uint64_t)v87, (__int128 *)v8 + 2, (uint64_t)(v8 + 14));
    goto LABEL_19;
  }
LABEL_25:
  -[TCMLComputeActivityClassifierDescriptor setWeights:](v81, "setWeights:", v87[5]);
  -[TCMLComputeActivityClassifierDescriptor setInputTensor:](v81, "setInputTensor:", v80);
  objc_msgSend(MEMORY[0x24BDDAB10], "descriptorWithType:reductionType:", 2, 1);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDAB18], "layerWithDescriptor:weights:");
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v14) = 981668463;
  LODWORD(v15) = 1.0;
  LODWORD(v16) = 1.0;
  objc_msgSend(MEMORY[0x24BDDAB20], "descriptorWithLearningRate:gradientRescale:regularizationType:regularizationScale:", 0, v14, v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  LODWORD(v18) = 1063675494;
  LODWORD(v19) = 1065336439;
  LODWORD(v20) = 841731191;
  v72 = (void *)v17;
  objc_msgSend(MEMORY[0x24BDDAAA0], "optimizerWithDescriptor:beta1:beta2:epsilon:timeStep:", v18, v19, v20);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDAAE8], "tc_graphForActivityClassifierDescriptor:seed:", v81, a1[5]);
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = (void *)MEMORY[0x24BDDAB80];
  v101[0] = v21;
  v75 = (void *)v21;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v101, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "graphWithGraphObjects:lossLayer:optimizer:", v23, 0, v77);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setTrainingGraph:](v82, "setTrainingGraph:", v24);

  objc_msgSend(MEMORY[0x24BDDAB50], "layerWithOperation:", 0);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs trainingGraph](v82, "trainingGraph");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCMLComputeActivityClassifierDescriptor outputTensor](v81, "outputTensor");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "nodeWithLayer:source:", v25, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v28, "setLabel:", CFSTR("output"));
  -[TCModelTrainerBackendGraphs trainingGraph](v82, "trainingGraph");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCMLComputeActivityClassifierDescriptor outputTensor](v81, "outputTensor");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "nodeWithLayer:source:", v76, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v31, "setLabel:", CFSTR("loss"));
  objc_msgSend(v80, "label");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v99 = v32;
  v100 = v80;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v100, &v99, 1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setTrainingInputs:](v82, "setTrainingInputs:", v33);

  objc_msgSend(v78, "label");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v97 = v34;
  v98 = v78;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v98, &v97, 1);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setTrainingLossLabels:](v82, "setTrainingLossLabels:", v35);

  objc_msgSend(v79, "label");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = v36;
  v96 = v79;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v96, &v95, 1);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setTrainingLossLabelWeights:](v82, "setTrainingLossLabelWeights:", v37);

  -[TCModelTrainerBackendGraphs trainingGraph](v82, "trainingGraph");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs trainingInputs](v82, "trainingInputs");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs trainingLossLabels](v82, "trainingLossLabels");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs trainingLossLabelWeights](v82, "trainingLossLabelWeights");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = objc_msgSend(v38, "addInputs:lossLabels:lossLabelWeights:", v39, v40, v41);

  if ((v42 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v86, "training graph");
    turi::TuriException::TuriException(exception, 7, v86);
  }
  objc_msgSend(v28, "label");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v93[0] = v43;
  v94[0] = v28;
  objc_msgSend(v31, "label");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v93[1] = v44;
  v94[1] = v31;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v94, v93, 2);
  v45 = objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setTrainingOutputs:](v82, "setTrainingOutputs:", v45);

  -[TCModelTrainerBackendGraphs trainingGraph](v82, "trainingGraph");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs trainingOutputs](v82, "trainingOutputs");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v45) = objc_msgSend(v46, "addOutputs:", v47);

  if ((v45 & 1) == 0)
  {
    v68 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v85, "training graph");
    turi::TuriException::TuriException(v68, 8, v85);
  }
  objc_msgSend(MEMORY[0x24BDDAB50], "layerWithOperation:", 0);
  v48 = objc_claimAutoreleasedReturnValue();

  v49 = (void *)v48;
  v50 = (void *)MEMORY[0x24BDDAAF0];
  v92 = v75;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v92, 1);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "graphWithGraphObjects:", v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setInferenceGraph:](v82, "setInferenceGraph:", v52);

  -[TCModelTrainerBackendGraphs inferenceGraph](v82, "inferenceGraph");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCMLComputeActivityClassifierDescriptor outputTensor](v81, "outputTensor");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "nodeWithLayer:source:", v49, v54);
  v55 = objc_claimAutoreleasedReturnValue();

  v56 = (void *)v55;
  objc_msgSend((id)v55, "setLabel:", CFSTR("output"));
  objc_msgSend(v80, "label");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = v57;
  v91 = v80;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v91, &v90, 1);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setInferenceInputs:](v82, "setInferenceInputs:", v58);

  -[TCModelTrainerBackendGraphs inferenceGraph](v82, "inferenceGraph");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs inferenceInputs](v82, "inferenceInputs");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v55) = objc_msgSend(v59, "addInputs:", v60);

  if ((v55 & 1) == 0)
  {
    v69 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v84, "inference graph");
    turi::TuriException::TuriException(v69, 7, v84);
  }
  objc_msgSend(v56, "label");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = v61;
  v89 = v56;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v89, &v88, 1);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setInferenceOutputs:](v82, "setInferenceOutputs:", v62);

  -[TCModelTrainerBackendGraphs inferenceGraph](v82, "inferenceGraph");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs inferenceOutputs](v82, "inferenceOutputs");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = objc_msgSend(v63, "addOutputs:", v64);

  if ((v65 & 1) == 0)
  {
    v70 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v83, "inference graph");
    turi::TuriException::TuriException(v70, 8, v83);
  }
  if (a2)
    turi::neural_net::mlc_layer_weights::operator=(a2, (uint64_t *)v87);

  turi::neural_net::mlc_layer_weights::~mlc_layer_weights(v87);
  objc_autoreleasePoolPop(context);
  return v82;
}

void sub_217F22054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,id a45)
{
  int v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:

      turi::neural_net::mlc_layer_weights::~mlc_layer_weights(&a45);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void _GLOBAL__sub_I_mlc_ac_backend_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

turi::neural_net::mlc_layer_weights *turi::neural_net::mlc_layer_weights::mlc_layer_weights(turi::neural_net::mlc_layer_weights *this)
{
  void *v2;
  id v3;
  void *v4;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_QWORD *)this + 5) = 0;
  v2 = (void *)MEMORY[0x219A19FE4]();
  v3 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  v4 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v3;

  objc_autoreleasePoolPop(v2);
  return this;
}

void sub_217F2241C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mlc_layer_weights::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__move_assign(a1, a2);
  v4 = a2[5];
  a2[5] = 0;
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;

  return a1;
}

void turi::neural_net::mlc_layer_weights::~mlc_layer_weights(id *this)
{

  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::~__hash_table((uint64_t)this);
}

void turi::neural_net::mlc_layer_weights::export_weights(turi::neural_net::mlc_layer_weights *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *i;
  uint64_t *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  __int128 v10[3];
  __int128 *v11;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  for (i = (uint64_t *)*((_QWORD *)this + 2); i; i = (uint64_t *)*i)
  {
    turi::neural_net::shared_float_array::copy((uint64_t)(i + 5), (uint64_t)&v9);
    v11 = (__int128 *)(i + 2);
    v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)i + 2, (uint64_t)&std::piecewise_construct, &v11);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v4 + 8), v10);
    v5 = v10[2];
    *((_OWORD *)v4 + 5) = v10[1];
    *((_OWORD *)v4 + 6) = v5;
    v9 = &unk_24D9175B8;
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v10[0] + 1);
    if (*((_QWORD *)&v10[0] + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v10[0] + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_217F22594(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::shared_float_array::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,turi::neural_net::float_array const&,void>(a1, &v9);
  v10 = v9;
  v9 = 0uLL;
  turi::neural_net::shared_float_array::shared_float_array(a2, &v10);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_217F22680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::neural_net::mlc_layer_weights::export_weights_and_optimizer_data(turi::neural_net::mlc_layer_weights *this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  void *v5;
  _QWORD v6[5];
  uint64_t v7;
  const void ***v8;
  uint64_t v9;
  _QWORD *(*v10)(_QWORD *, _QWORD *);
  void (*v11)(uint64_t);
  const char *v12;
  _QWORD *v13[3];

  v4 = (void *)MEMORY[0x219A19FE4]();
  v7 = 0;
  v8 = (const void ***)&v7;
  v9 = 0x4812000000;
  v10 = __Block_byref_object_copy_;
  v11 = __Block_byref_object_dispose_;
  v12 = "";
  turi::neural_net::mlc_layer_weights::export_weights(this, (uint64_t)v13);
  v5 = (void *)*((_QWORD *)this + 5);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = ___ZNK4turi10neural_net17mlc_layer_weights33export_weights_and_optimizer_dataEv_block_invoke;
  v6[3] = &unk_24D91A350;
  v6[4] = &v7;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v6);
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a2, v8 + 6);
  _Block_object_dispose(&v7, 8);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v13, v13[1]);
  objc_autoreleasePoolPop(v4);
}

void sub_217F2278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  uint64_t v21;

  _Block_object_dispose(&a14, 8);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v21, a21);
  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy_(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
}

void ___ZNK4turi10neural_net17mlc_layer_weights33export_weights_and_optimizer_dataEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;

  v10 = a2;
  v5 = a3;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@"), v10, CFSTR("_optimizer_data"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "optimizerData");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = ___ZNK4turi10neural_net17mlc_layer_weights33export_weights_and_optimizer_dataEv_block_invoke_2;
  v11[3] = &unk_24D91A328;
  v8 = v6;
  v9 = *(_QWORD *)(a1 + 32);
  v12 = v8;
  v13 = v9;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v11);

}

void sub_217F228E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void ___ZNK4turi10neural_net17mlc_layer_weights33export_weights_and_optimizer_dataEv_block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  std::string *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  void *v23;
  _QWORD *v24;
  std::string v25;
  __int128 v26;
  __int128 v27;
  std::string v28;
  __int128 *v29[2];
  char v30;
  __int128 v31;
  std::string::size_type v32;

  v5 = a2;
  v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v29, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
  v7 = std::string::append(v6, "_");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v28, a3 + 1);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v28;
  else
    v9 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    size = v28.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v25, (const std::string::value_type *)v9, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v32 = v11->__r_.__value_.__r.__words[2];
  v31 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (v30 < 0)
    operator delete(v29[0]);
  v13 = objc_msgSend(v5, "bytes");
  v14 = objc_msgSend(v5, "length");
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14 >> 2;
  v23 = v15 + 1;
  v24 = v15 + 1;
  turi::neural_net::shared_float_array::copy(v13, (uint64_t)&__p, (uint64_t)&v25);
  v16 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  v29[0] = &v31;
  v17 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (const void **)&v31, (uint64_t)&std::piecewise_construct, v29);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v17 + 8), (__int128 *)&v25.__r_.__value_.__r.__words[1]);
  v18 = v27;
  *((_OWORD *)v17 + 5) = v26;
  *((_OWORD *)v17 + 6) = v18;
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D9175B8;
  v19 = (std::__shared_weak_count *)v25.__r_.__value_.__r.__words[2];
  if (v25.__r_.__value_.__r.__words[2])
  {
    v20 = (unint64_t *)(v25.__r_.__value_.__r.__words[2] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);

}

void sub_217F22B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  uint64_t v30;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (__p)
    operator delete(__p);
  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));

  _Unwind_Resume(a1);
}

id turi::neural_net::mlc_layer_weights::tensor_weights(turi::neural_net::mlc_layer_weights *this)
{
  void *v2;
  uint64_t *i;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *context;
  _QWORD v19[5];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t);
  const char *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  __int128 v30;

  context = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", *((_QWORD *)this + 3));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = (uint64_t *)*((_QWORD *)this + 2); i; i = (uint64_t *)*i)
  {
    v4 = i + 2;
    if (*((char *)i + 39) < 0)
      v4 = (_QWORD *)*v4;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 0;
    v21 = &v20;
    v22 = 0x6812000000;
    v23 = __Block_byref_object_copy__16;
    v24 = __Block_byref_object_dispose__17;
    v25 = "";
    v26 = &unk_24D9175B8;
    v27 = i[6];
    v6 = (std::__shared_weak_count *)i[7];
    v28 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = *((_OWORD *)i + 5);
    v29 = *((_OWORD *)i + 4);
    v30 = v9;
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = ___ZN4turi10neural_net12_GLOBAL__N_114WrapFloatArrayERKNS0_18shared_float_arrayE_block_invoke;
    v19[3] = &unk_24D91A378;
    v19[4] = &v20;
    v10 = (void *)MEMORY[0x219A1A134](v19);
    v11 = v21[12];
    v12 = objc_alloc(MEMORY[0x24BDBCE50]);
    v13 = (void *)objc_msgSend(v12, "initWithBytesNoCopy:length:deallocator:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21[7] + 16))(v21[7]) + 4 * v21[9], 4 * v11, v10);

    _Block_object_dispose(&v20, 8);
    v26 = &unk_24D9175B8;
    v14 = v28;
    if (v28)
    {
      v15 = (unint64_t *)&v28->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, v5);

  }
  objc_autoreleasePoolPop(context);
  return v2;
}

void sub_217F22DD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id turi::neural_net::mlc_layer_weights::copy_float_array(uint64_t a1, __int128 *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v15;
  __int128 v16[3];

  v15 = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v15);
  turi::neural_net::shared_float_array::copy(a3, (uint64_t)&v15);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v4 + 48), v16);
  v5 = v16[2];
  *((_OWORD *)v4 + 4) = v16[1];
  *((_OWORD *)v4 + 5) = v5;
  v15 = (__int128 *)&unk_24D9175B8;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v16[0] + 1);
  if (*((_QWORD *)&v16[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16[0] + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (void *)MEMORY[0x24BDDAB68];
  v11 = *((_QWORD *)v4 + 5);
  v10 = v4 + 40;
  v12 = (*(uint64_t (**)(unsigned __int8 *))(v11 + 16))(v10);
  v13 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 24))(v10);
  objc_msgSend(v9, "dataWithImmutableBytesNoCopy:length:", v12, 4 * v13, v15);
  return (id)objc_claimAutoreleasedReturnValue();
}

void turi::neural_net::mlc_layer_weights::add_conv_weight(uint64_t a1, __int128 *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  void *v14;
  void *exception;
  _QWORD v16[3];

  v6 = (void *)MEMORY[0x219A19FE4]();
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3) != 4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v16, 0, sizeof(v16));
    turi::TuriException::TuriException(exception, 6, v16);
  }
  v7 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 8);
  v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 16);
  objc_msgSend(MEMORY[0x24BDDAB78], "convolutionWeightsDescriptorWithWidth:height:inputFeatureChannelCount:outputFeatureChannelCount:dataType:", *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 24), v9, v8, v7, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v11 = (uint64_t *)a2;
  else
    v11 = *(uint64_t **)a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::mlc_layer_weights::copy_float_array(a1, a2, a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithDescriptor:data:", v10, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v14, v12);

  objc_autoreleasePoolPop(v6);
}

void sub_217F230B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_217F230E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
    operator delete(__p);
  if (v16)
    __cxa_free_exception(v15);
  JUMPOUT(0x217F230DCLL);
}

void turi::neural_net::mlc_layer_weights::add_conv_bias(uint64_t a1, __int128 *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  void *exception;
  _QWORD v13[3];

  v6 = (void *)MEMORY[0x219A19FE4]();
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v13, 0, sizeof(v13));
    turi::TuriException::TuriException(exception, 6, v13);
  }
  objc_msgSend(MEMORY[0x24BDDAB78], "convolutionBiasesDescriptorWithFeatureChannelCount:dataType:", *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3), 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v8 = (uint64_t *)a2;
  else
    v8 = *(uint64_t **)a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::mlc_layer_weights::copy_float_array(a1, a2, a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithDescriptor:data:", v7, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v11, v9);

  objc_autoreleasePoolPop(v6);
}

void sub_217F23250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_217F23284(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
    operator delete(__p);
  if (v16)
    __cxa_free_exception(v15);
  JUMPOUT(0x217F2327CLL);
}

void turi::neural_net::mlc_layer_weights::add_flat_array(uint64_t a1, __int128 *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;

  v6 = (void *)MEMORY[0x219A19FE4]();
  v7 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if (*((char *)a2 + 23) >= 0)
    v8 = (uint64_t *)a2;
  else
    v8 = *(uint64_t **)a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::mlc_layer_weights::copy_float_array(a1, a2, a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:data:", 1, 1, v7, 1, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v11, v9);

  objc_autoreleasePoolPop(v6);
}

void sub_217F2337C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void turi::neural_net::mlc_layer_weights::add_lstm_weight(uint64_t a1, __int128 *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;

  v6 = (void *)MEMORY[0x219A19FE4]();
  v7 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 8);
  if (*((char *)a2 + 23) >= 0)
    v9 = (uint64_t *)a2;
  else
    v9 = *(uint64_t **)a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::mlc_layer_weights::copy_float_array(a1, a2, a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:data:", 1, 1, v8 * v7, 1, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v12, v10);

  objc_autoreleasePoolPop(v6);
}

void sub_217F23494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void turi::neural_net::mlc_layer_weights::add_optimizer_data(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  void *v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  _QWORD *exception;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v12 = (void *)MEMORY[0x219A19FE4]();
  if (*((char *)a2 + 23) >= 0)
    v13 = a2;
  else
    v13 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::mlc_layer_weights::copy_float_array(a1, a3, a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::mlc_layer_weights::copy_float_array(a1, a5, a6);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v14);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = v15;
    v22[1] = v16;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v22, 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v18, "bindOptimizerData:deviceData:", v19, 0);

    if ((v20 & 1) == 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = "Failed to bind optimizer data with tensor";
      __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
    }
  }

  objc_autoreleasePoolPop(v12);
}

void sub_217F23640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,turi::neural_net::float_array const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<turi::neural_net::float_array const&,std::allocator<turi::neural_net::float_buffer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217F236D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<turi::neural_net::float_array const&,std::allocator<turi::neural_net::float_buffer>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24D917568;
  a1[1] = 0;
  turi::neural_net::float_buffer::float_buffer((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_217F2371C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::float_buffer::float_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  void *v10;
  uint64_t v11;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v5, v6 + 8 * v7, (v6 + 8 * v7 - (uint64_t)v5) >> 3);
  turi::neural_net::float_buffer::float_buffer(a1, v4, &__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_217F237F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a1 + 48) = &unk_24D9175B8;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = *(__n128 *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t __Block_byref_object_dispose__17(uint64_t a1)
{
  *(_QWORD *)(a1 + 48) = &unk_24D9175B8;
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 56);
}

void ___ZN4turi10neural_net12_GLOBAL__N_114WrapFloatArrayERKNS0_18shared_float_arrayE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  __int128 v9[3];

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 16))(*(_QWORD *)(v3 + 56))
     + 4 * *(_QWORD *)(v3 + 72) == a2)
  {
    turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)&v8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v4 + 56, v9);
    *(_OWORD *)(v4 + 72) = v9[1];
    *(_OWORD *)(v4 + 88) = v9[2];
    v8 = &unk_24D9175B8;
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v9[0] + 1);
    if (*((_QWORD *)&v9[0] + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v9[0] + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_217F23D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217F23D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void _GLOBAL__sub_I_mlc_layer_weights_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

TCModelTrainerBackendGraphs *turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, float a7)
{
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  _QWORD *v13;
  void *v14;
  __int128 *v15;
  __int128 *v16;
  BOOL v17;
  void *v18;
  void *v19;
  double v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  char v51;
  void *v52;
  void *v53;
  id v54;
  void *v56;
  void *v57;
  void *context;
  void *v60;
  void *v61;
  id v62;
  void *v64;
  void *v66;
  void *v68;
  TCModelTrainerBackendGraphs *v69;
  id v70[6];
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  _QWORD v80[3];

  v80[1] = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x219A19FE4]();
  v69 = objc_alloc_init(TCModelTrainerBackendGraphs);
  turi::neural_net::mlc_layer_weights::mlc_layer_weights((turi::neural_net::mlc_layer_weights *)v70);
  v12 = (__int128 *)*a5;
  v11 = (__int128 *)(a5 + 1);
  v10 = v12;
  if (v12 != v11)
  {
    do
    {
      v13 = v10 + 2;
      if (*((char *)v10 + 55) < 0)
        v13 = (_QWORD *)*((_QWORD *)v10 + 4);
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v14, "containsString:", CFSTR("conv"))
        && objc_msgSend(v14, "containsString:", CFSTR("_weight")))
      {
        turi::neural_net::mlc_layer_weights::add_conv_weight((uint64_t)v70, v10 + 2, (uint64_t)v10 + 56);
      }
      else if (objc_msgSend(v14, "containsString:", CFSTR("conv"))
             && objc_msgSend(v14, "containsString:", CFSTR("_bias")))
      {
        turi::neural_net::mlc_layer_weights::add_conv_bias((uint64_t)v70, v10 + 2, (uint64_t)v10 + 56);
      }
      else if (objc_msgSend(v14, "containsString:", CFSTR("batch_norm")))
      {
        turi::neural_net::mlc_layer_weights::add_flat_array((uint64_t)v70, v10 + 2, (uint64_t)v10 + 56);
      }

      v15 = (__int128 *)*((_QWORD *)v10 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(__int128 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (__int128 *)*((_QWORD *)v10 + 2);
          v17 = *(_QWORD *)v16 == (_QWORD)v10;
          v10 = v16;
        }
        while (!v17);
      }
      v10 = v16;
    }
    while (v16 != v11);
  }
  v62 = v70[5];
  turi::neural_net::mlc_layer_weights::tensor_weights((turi::neural_net::mlc_layer_weights *)v70);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setLayerWeights:](v69, "setLayerWeights:", v18);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "stgcn_action_");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(float *)&v20 = a7;
  +[TCMLCHARDescriptor defineSTGCNActionDescriptor:inputChannels:batchSize:numFrames:numKeypoints:numClass:dropout:](TCMLCHARDescriptor, "defineSTGCNActionDescriptor:inputChannels:batchSize:numFrames:numKeypoints:numClass:dropout:", v19, 3, a1, a2, a3, a4, v20);
  v61 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", a3, 3, a2, a1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setLabel:", CFSTR("input"));
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", 1, 1, a4, a1);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "setLabel:", CFSTR("labels"));
  LODWORD(v22) = 0;
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:fillWithData:dataType:", 1, 1, a4, a1, 1, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setLabel:", CFSTR("weights"));
  v24 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "stgcn_action_");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  +[TCMLCHARGraph defineSTGCNAction:input:graph:descriptor:weights:](TCMLCHARGraph, "defineSTGCNAction:input:graph:descriptor:weights:", v25, v21, v24, v61, v62);
  v60 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDDAB10], "descriptorWithType:reductionType:", 2, 2);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDAB18], "layerWithDescriptor:weights:");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v26) = 1008981770;
  LODWORD(v27) = 981668463;
  LODWORD(v28) = 1.0;
  objc_msgSend(MEMORY[0x24BDDAB20], "descriptorWithLearningRate:gradientRescale:regularizationType:regularizationScale:", 2, v26, v28, v27);
  v29 = objc_claimAutoreleasedReturnValue();
  LODWORD(v30) = 1063675494;
  v57 = (void *)v29;
  objc_msgSend(MEMORY[0x24BDDAB48], "optimizerWithDescriptor:momentumScale:usesNesterovMomentum:", v30);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = (void *)MEMORY[0x24BDDAB80];
  v80[0] = v24;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v80, 1);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "graphWithGraphObjects:lossLayer:optimizer:", v32, v64, v68);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setTrainingGraph:](v69, "setTrainingGraph:", v33);

  objc_msgSend(v21, "label");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = v34;
  v79 = v21;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setTrainingInputs:](v69, "setTrainingInputs:", v35);

  objc_msgSend(v66, "label");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = v36;
  v77 = v66;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v77, &v76, 1);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setTrainingLossLabels:](v69, "setTrainingLossLabels:", v37);

  objc_msgSend(v23, "label");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v38;
  v75 = v23;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v75, &v74, 1);
  v39 = objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setTrainingLossLabelWeights:](v69, "setTrainingLossLabelWeights:", v39);

  -[TCModelTrainerBackendGraphs trainingGraph](v69, "trainingGraph");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs trainingInputs](v69, "trainingInputs");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs trainingLossLabels](v69, "trainingLossLabels");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs trainingLossLabelWeights](v69, "trainingLossLabelWeights");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v39) = objc_msgSend(v40, "addInputs:lossLabels:lossLabelWeights:", v41, v42, v43);

  if ((v39 & 1) == 0)
    turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(unsigned long,unsigned long,unsigned long,unsigned long,float,std::map<std::string,turi::neural_net::shared_float_array> const&,turi::neural_net::mlc_layer_weights *)::$_0::operator()();
  v44 = (void *)MEMORY[0x24BDDAAF0];
  v73 = v24;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v73, 1);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "graphWithGraphObjects:", v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setInferenceGraph:](v69, "setInferenceGraph:", v46);

  objc_msgSend(v21, "label");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = v47;
  v72 = v21;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v72, &v71, 1);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs setInferenceInputs:](v69, "setInferenceInputs:", v48);

  -[TCModelTrainerBackendGraphs inferenceGraph](v69, "inferenceGraph");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs inferenceInputs](v69, "inferenceInputs");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v49, "addInputs:", v50);

  if ((v51 & 1) == 0)
    turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(unsigned long,unsigned long,unsigned long,unsigned long,float,std::map<std::string,turi::neural_net::shared_float_array> const&,turi::neural_net::mlc_layer_weights *)::$_1::operator()();
  objc_msgSend(MEMORY[0x24BDDAB50], "layerWithOperation:", 0);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  -[TCModelTrainerBackendGraphs inferenceGraph](v69, "inferenceGraph");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = (id)objc_msgSend(v53, "nodeWithLayer:source:", v52, v60);

  if (a6)
    turi::neural_net::mlc_layer_weights::operator=(a6, (uint64_t *)v70);

  turi::neural_net::mlc_layer_weights::~mlc_layer_weights(v70);
  objc_autoreleasePoolPop(context);
  return v69;
}

void sub_217F2450C(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a13);

  turi::neural_net::mlc_layer_weights::~mlc_layer_weights((id *)va);
  _Unwind_Resume(a1);
}

TCModelTrainerBackendGraphs *turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, float a6)
{
  return turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(a1, a2, a3, a4, a5, 0, a6);
}

void _GLOBAL__sub_I_mlc_char_backend_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/SoundAnalysisPreprocessing.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_ = (uint64_t)&off_24D91A3A8;
  qword_254FF6050 = 0;
  dword_254FF6058 = 0;
  byte_254FF6060 = 1;
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_ = (uint64_t)&off_24D91A440;
  *(_QWORD *)algn_254FF6070 = 0;
  qword_254FF6080 = 0;
  byte_254FF6088 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_217F24850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(_QWORD *)this = &off_24D91A3A8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_217F248B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::~SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(_QWORD *)this = &off_24D91A3A8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D91A3A8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *v3;

  v3 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)operator new();
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(a2, v3);
  return v3;
}

void sub_217F24984(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish");
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  *(_QWORD *)this = &off_24D91A440;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_217F24AC4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D91A440;
  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 20)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 7) = 0;
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::default_instance(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  return &CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_;
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *v3;

  v3 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)operator new();
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(a2, v3);
  return v3;
}

void sub_217F24BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;
  unsigned int TagFallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v6)
        break;
      v8 = 0;
LABEL_21:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_22;
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0)
        goto LABEL_22;
      if (*((_DWORD *)this + 7) != 20)
      {
        *((_DWORD *)this + 7) = 20;
        v11 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)operator new();
        CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream((CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)v14, (char **)a2, v15);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v16))
          continue;
      }
      return 0;
    }
    v7 = v5 + 1;
    v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(_QWORD *)a2 = v5 + 2;
          v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_21;
    }
    *(_QWORD *)a2 = v7;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_22:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
  }
}

void sub_217F24DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(this + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 7) == 20)
  {
    *(_DWORD *)(*((_QWORD *)this + 2) + 16) = 0;
    v1 = 3;
  }
  else
  {
    v1 = 0;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (*((_DWORD *)this + 7) == 20)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 2);
    }
    else
    {
      *((_DWORD *)this + 7) = 20;
      v5 = (uint64_t *)operator new();
      v6 = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish((CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)v5);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) != 20)
      {
        CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(v6);
        v7 = &CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_;
LABEL_9:
        v8 = v7[1];
        if ((v8 & 1) != 0)
          _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v5 + 1, v8 & 0xFFFFFFFFFFFFFFFELL);
        return;
      }
    }
    v7 = (uint64_t *)*((_QWORD *)a2 + 2);
    goto LABEL_9;
  }
}

void sub_217F24F14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing");
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(this, 0);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return *((unsigned int *)this + 4);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(this, 0);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_SoundAnalysisPreprocessing_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _GLOBAL__sub_I_mlc_char_backend_factory_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void sub_217F251F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_217F252E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v4 = a3 - a2;
  if (a3 == a2)
    return a2;
  if (v4 == 0x7FFFFFFF)
  {
    v6 = (0x5DEECE66DLL * *a1 + 11) & 0xFFFFFFFFFFFFLL;
    *a1 = v6;
    return a2 + (v6 >> 17);
  }
  else if (v4 >> 31)
  {
    if (v4 == -1)
      v8 = 0x200000000;
    else
      v8 = (v4 + 1) >> 31;
    while (1)
    {
      v7 = 0;
      if (v8)
        break;
      v10 = 1;
LABEL_15:
      v13 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>(a1, 0, v4 / v10);
      if (is_mul_ok(v10, v13))
      {
        v14 = v13 * v10 + v7;
        if (!__CFADD__(v13 * v10, v7) && v14 <= v4)
          return v14 + a2;
      }
    }
    v9 = *a1;
    v10 = 1;
    while (1)
    {
      v11 = v10;
      v12 = 0x5DEECE66DLL * v9 + 11;
      v9 = v12 & 0xFFFFFFFFFFFFLL;
      v7 += ((v12 >> 17) & 0x7FFFFFFF) * v10;
      v10 <<= 31;
      if (v10 - v11 == v4 + 1 - v11)
        break;
      if (v10 > v8)
      {
        *a1 = v9;
        goto LABEL_15;
      }
    }
    *a1 = v9;
  }
  else
  {
    v15 = *a1;
    do
    {
      v16 = 0x5DEECE66DLL * v15 + 11;
      v15 = v16 & 0xFFFFFFFFFFFFLL;
      v17 = ((v16 >> 17) & 0x7FFFFFFF) / (0x80000000 / ((int)v4 + 1));
    }
    while (v17 > v4);
    *a1 = v15;
    return a2 + v17;
  }
  return v7;
}

uint64_t _GLOBAL__sub_I_testing_utils_cpp()
{
  uint64_t v0;
  const char *v1;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  qword_254FEDF08 = 0;
  unk_254FEDF10 = 0;
  turi::__list_of_directories_to_clean_up = 0;
  __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &turi::__list_of_directories_to_clean_up, &dword_217E69000);
  v0 = pthread_mutex_init(&turi::__list_of_directories_lock, 0);
  assert_msg((_DWORD)v0 == 0, v1, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::__list_of_directories_lock, &dword_217E69000);
}

turi::neural_net::mlc_compute_context *turi::proprietary::neural_net::mlc_internal_compute_context::mlc_internal_compute_context(turi::proprietary::neural_net::mlc_internal_compute_context *this, MLCDevice *a2)
{
  turi::neural_net::mlc_compute_context *result;

  result = turi::neural_net::mlc_compute_context::mlc_compute_context(this, a2);
  *(_QWORD *)result = &off_24D91A508;
  return result;
}

void turi::proprietary::neural_net::mlc_internal_compute_context::create_style_transfer(turi::neural_net::mlc_compute_context *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  uint64_t v8;

  turi::neural_net::mlc_compute_context::GetDevice(a1);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  std::make_unique<turi::proprietary::neural_net::mlc_style_transfer_backend,MLCDevice * {__strong},std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&>(&v7, a2, a3, &v8);
  *a4 = v8;
  v8 = 0;

}

void sub_217F25588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

uint64_t std::make_unique<turi::proprietary::neural_net::mlc_style_transfer_backend,MLCDevice * {__strong},std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = operator new();
  result = turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(v8, *a1, a2, a3);
  *a4 = v8;
  return result;
}

void sub_217F25604(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B1C4036CF6ECBLL);
  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_internal_compute_context::~mlc_internal_compute_context(id *this)
{
  turi::neural_net::mlc_compute_context::~mlc_compute_context(this);
  JUMPOUT(0x219A19A08);
}

void _GLOBAL__sub_I_mlc_internal_compute_context_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void _GLOBAL__sub_I_mlc_dc_backend_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void _GLOBAL__sub_I_mlc_mlp_backend_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void _GLOBAL__sub_I_mlc_od_sn_backend_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

uint64_t turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  float array_map_scalar;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  double v29;
  uint64_t v30;
  void *v31;
  __int128 *v32;
  __int128 *v33;
  _QWORD *v34;
  void *v35;
  size_t v36;
  void **v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  void **v42;
  const void *v43;
  uint64_t v44;
  __int128 *v45;
  __int128 *v46;
  BOOL v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  size_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103;
  id v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v120;
  void *v121;
  void *context;
  unsigned int v123;
  void *v124;
  uint64_t v125;
  id *v126;
  void *v127;
  void *v128;
  id v129;
  void *v131;
  uint64_t v132;
  id v133;
  void *__p[2];
  char v135;
  void *v136[2];
  char v137;
  _QWORD v138[2];
  _QWORD v139[2];
  uint64_t v140;
  _QWORD v141[2];
  _QWORD v142[2];
  _QWORD v143[7];
  _QWORD v144[7];
  uint64_t v145;
  __int128 __src;
  __int128 v147;
  _QWORD v148[6];

  v148[3] = *MEMORY[0x24BDAC8D0];
  v129 = a2;
  *(_QWORD *)a1 = &off_24D91A580;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v125 = a1 + 192;
  v132 = a1;
  v6 = turi::neural_net::mlc_layer_weights::mlc_layer_weights((turi::neural_net::mlc_layer_weights *)(a1 + 192));
  context = (void *)MEMORY[0x219A19FE4](v6);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_training");
  *(_BYTE *)(a1 + 8) = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 0.0) != 0.0;
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  __src = xmmword_2186C4DE0;
  v147 = xmmword_2186C4DF0;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 144), (char *)&__src, (uint64_t)v148, 4uLL);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_textel_density");
  array_map_scalar = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 256.0);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_width");
  v8 = (float)(int)array_map_scalar;
  v9 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, v8);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_height");
  v10 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, v8);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_batch_size");
  v11 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 1.0);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_style_strength");
  v12 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 5.0);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_algorithm");
  v13 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 0.0);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  v126 = (id *)(a1 + 16);
  v123 = (int)v13;
  v133 = -[TCMLComputeStyleTransferDescriptor initTrain:algorithmType:]([TCMLComputeStyleTransferDescriptor alloc], "initTrain:algorithmType:", *(unsigned __int8 *)(a1 + 8));
  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", (uint64_t)v9, (uint64_t)v10, 3, (uint64_t)v11);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v14;

  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", (uint64_t)v9, (uint64_t)v10, 3, (uint64_t)v11);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16;

  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", (uint64_t)v9, (uint64_t)v10, 3, (uint64_t)v11);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v18;

  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", (uint64_t)v9, (uint64_t)v10, 3, (uint64_t)v11);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v20;

  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", (uint64_t)v9, (uint64_t)v10, 3, (uint64_t)v11);
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v22;

  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", 512, 512, 3, (uint64_t)v11);
  v24 = objc_claimAutoreleasedReturnValue();
  v25 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v24;

  objc_msgSend(MEMORY[0x24BDDAB60], "tensorWithWidth:height:featureChannelCount:batchSize:", 512, 512, 3, (uint64_t)v11);
  v26 = objc_claimAutoreleasedReturnValue();
  v27 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v26;

  v28 = (void *)MEMORY[0x24BDDAB60];
  v29 = __exp10(v12);
  *(float *)&v29 = v29;
  objc_msgSend(v28, "tensorWithWidth:height:featureChannelCount:batchSize:fillWithData:dataType:", 1, 1, 1, (uint64_t)v11, 1, v29);
  v30 = objc_claimAutoreleasedReturnValue();
  v31 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v30;

  objc_msgSend(v133, "setContentTensor:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v133, "setStyleTensor:", *(_QWORD *)(a1 + 40));
  objc_msgSend(v133, "setMeanTensor:", *(_QWORD *)(a1 + 56));
  objc_msgSend(v133, "setVarianceTensor:", *(_QWORD *)(a1 + 64));
  objc_msgSend(v133, "setStyleLossWeightTensor:", *(_QWORD *)(a1 + 168));
  objc_msgSend(v133, "setPixelScaleTensor:", *(_QWORD *)(a1 + 48));
  objc_msgSend(v133, "setInferenceContentTensor:", *(_QWORD *)(a1 + 80));
  objc_msgSend(v133, "setInferencePixelScaleTensor:", *(_QWORD *)(a1 + 88));
  objc_msgSend(*(id *)(a1 + 32), "setLabel:", CFSTR("content_tensor"));
  objc_msgSend(*(id *)(a1 + 40), "setLabel:", CFSTR("style_tensor"));
  objc_msgSend(*(id *)(a1 + 56), "setLabel:", CFSTR("mean_tensor"));
  objc_msgSend(*(id *)(a1 + 168), "setLabel:", CFSTR("style_loss_weight_tensor"));
  objc_msgSend(*(id *)(a1 + 48), "setLabel:", CFSTR("pixel_scale_tensor"));
  objc_msgSend(*(id *)(a1 + 64), "setLabel:", CFSTR("variance_tensor"));
  objc_msgSend(*(id *)(a1 + 80), "setLabel:", CFSTR("inference_content_tensor"));
  objc_msgSend(*(id *)(a1 + 88), "setLabel:", CFSTR("inference_pixel_scale_tensor"));
  turi::neural_net::mlc_layer_weights::mlc_layer_weights((turi::neural_net::mlc_layer_weights *)&__src);
  v32 = (__int128 *)(a4 + 1);
  v33 = (__int128 *)*a4;
  if ((_QWORD *)*a4 != a4 + 1)
  {
    do
    {
      v34 = v33 + 2;
      if (*((char *)v33 + 55) < 0)
        v34 = (_QWORD *)*((_QWORD *)v33 + 4);
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v35, "containsString:", CFSTR("_optimizer_data")) & 1) == 0)
      {
        if (objc_msgSend(v35, "containsString:", CFSTR("conv")))
        {
          if (objc_msgSend(v35, "containsString:", CFSTR("_weight")))
          {
            turi::neural_net::mlc_layer_weights::add_conv_weight((uint64_t)&__src, v33 + 2, (uint64_t)v33 + 56);
          }
          else if (objc_msgSend(v35, "containsString:", CFSTR("_bias")))
          {
            turi::neural_net::mlc_layer_weights::add_conv_bias((uint64_t)&__src, v33 + 2, (uint64_t)v33 + 56);
          }
        }
        else if (objc_msgSend(v35, "containsString:", CFSTR("inst")))
        {
          turi::neural_net::mlc_layer_weights::add_flat_array((uint64_t)&__src, v33 + 2, (uint64_t)v33 + 56);
        }
        if (*((char *)v33 + 55) >= 0)
          v36 = *((unsigned __int8 *)v33 + 55);
        else
          v36 = *((_QWORD *)v33 + 5);
        std::string::basic_string[abi:ne180100]((uint64_t)v136, v36 + 17);
        if (v137 >= 0)
          v37 = v136;
        else
          v37 = (void **)v136[0];
        if (v36)
        {
          if (*((char *)v33 + 55) >= 0)
            v38 = v33 + 2;
          else
            v38 = (const void *)*((_QWORD *)v33 + 4);
          memmove(v37, v38, v36);
        }
        strcpy((char *)v37 + v36, "_optimizer_data_1");
        v39 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a4, (const void **)v136);
        v40 = (uint64_t)a4;
        if (*((char *)v33 + 55) >= 0)
          v41 = *((unsigned __int8 *)v33 + 55);
        else
          v41 = *((_QWORD *)v33 + 5);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v41 + 17);
        if (v135 >= 0)
          v42 = __p;
        else
          v42 = (void **)__p[0];
        if (v41)
        {
          if (*((char *)v33 + 55) >= 0)
            v43 = v33 + 2;
          else
            v43 = (const void *)*((_QWORD *)v33 + 4);
          memmove(v42, v43, v41);
        }
        strcpy((char *)v42 + v41, "_optimizer_data_2");
        a4 = (_QWORD *)v40;
        v44 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v40, (const void **)__p);
        if (v32 != (__int128 *)v39 && v32 != (__int128 *)v44)
          turi::neural_net::mlc_layer_weights::add_optimizer_data((uint64_t)&__src, (uint64_t *)v33 + 4, (__int128 *)v136, v39 + 56, (__int128 *)__p, v44 + 56);
        a1 = v132;
        if (v135 < 0)
          operator delete(__p[0]);
        if (v137 < 0)
          operator delete(v136[0]);
      }

      v45 = (__int128 *)*((_QWORD *)v33 + 1);
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = *(__int128 **)v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (__int128 *)*((_QWORD *)v33 + 2);
          v47 = *(_QWORD *)v46 == (_QWORD)v33;
          v33 = v46;
        }
        while (!v47);
      }
      v33 = v46;
    }
    while (v46 != v32);
  }
  turi::neural_net::mlc_layer_weights::operator=(v125, (uint64_t *)&__src);
  turi::neural_net::mlc_layer_weights::~mlc_layer_weights((id *)&__src);
  objc_msgSend(v133, "setWeights:", *(_QWORD *)(a1 + 232));
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_learning_rate");
  v48 = turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, 0.001);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_training_iterations");
  v49 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 0.0);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_beta1");
  v50 = turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, 0.9);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_beta2");
  v51 = turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, 0.999);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_epsilon");
  v52 = turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, 0.00000001);
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_time_step");
  turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, (float)((unint64_t)v49 + 1));
  if (SBYTE7(v147) < 0)
    operator delete((void *)__src);
  LODWORD(v54) = 1.0;
  LODWORD(v55) = 0;
  *(float *)&v53 = v48;
  objc_msgSend(MEMORY[0x24BDDAB20], "descriptorWithLearningRate:gradientRescale:regularizationType:regularizationScale:", 0, v53, v54, v55);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  *(float *)&v56 = v50;
  *(float *)&v57 = v51;
  *(float *)&v58 = v52;
  objc_msgSend(MEMORY[0x24BDDAAA0], "optimizerWithDescriptor:beta1:beta2:epsilon:timeStep:", v56, v57, v58);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(a1 + 8))
  {
    v131 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy");
    v127 = (void *)objc_msgSend(MEMORY[0x24BDBD1B8], "mutableCopy");
    objc_msgSend(MEMORY[0x24BDDAAE8], "tc_trainingGraphForStyleTransferDescriptor:stopGradientList:lossTensorDictionary:algorithm:", v133, v131);
    v59 = objc_claimAutoreleasedReturnValue();
    v60 = (void *)MEMORY[0x24BDDAB80];
    v120 = (void *)v59;
    v145 = v59;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v145, 1);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "graphWithGraphObjects:lossLayer:optimizer:", v61, 0, v128);
    v62 = objc_claimAutoreleasedReturnValue();
    v63 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v62;

    objc_msgSend(*(id *)(a1 + 24), "stopGradientForTensors:", v131);
    objc_msgSend(*(id *)(a1 + 24), "layers");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 24), "layers");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "objectAtIndexedSubscript:", objc_msgSend(v65, "count") - 1);
    v124 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 24), "sourceGradientTensorsForLayer:", v124);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "firstObject");
    v67 = objc_claimAutoreleasedReturnValue();
    v68 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v67;

    v69 = *(void **)(a1 + 24);
    objc_msgSend(*(id *)(a1 + 32), "label");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v143[0] = v70;
    v71 = *(void **)(a1 + 40);
    v144[0] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v71, "label");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v143[1] = v72;
    v73 = *(void **)(a1 + 48);
    v144[1] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v73, "label");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v143[2] = v74;
    v75 = *(void **)(a1 + 56);
    v144[2] = *(_QWORD *)(a1 + 48);
    objc_msgSend(v75, "label");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v143[3] = v76;
    v77 = *(void **)(a1 + 64);
    v144[3] = *(_QWORD *)(a1 + 56);
    objc_msgSend(v77, "label");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v143[4] = v78;
    v144[4] = *(_QWORD *)(a1 + 64);
    objc_msgSend(*(id *)(a1 + 168), "label");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v143[5] = v79;
    v144[5] = *(_QWORD *)(a1 + 168);
    objc_msgSend(*(id *)(a1 + 72), "label");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v143[6] = v80;
    v144[6] = *(_QWORD *)(a1 + 72);
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v144, v143, 7);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v69) = objc_msgSend(v69, "addInputs:lossLabels:", v81, 0);

    if ((v69 & 1) == 0)
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()();
    objc_msgSend(v127, "objectForKeyedSubscript:", CFSTR("style_loss"));
    v82 = objc_claimAutoreleasedReturnValue();
    v83 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v82;

    objc_msgSend(v127, "objectForKeyedSubscript:", CFSTR("content_loss"));
    v84 = objc_claimAutoreleasedReturnValue();
    v85 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v84;

    objc_msgSend(*(id *)(a1 + 96), "setLabel:", CFSTR("style_loss"));
    objc_msgSend(*(id *)(a1 + 104), "setLabel:", CFSTR("content_loss"));
    v86 = *(void **)(a1 + 24);
    objc_msgSend(*(id *)(a1 + 96), "label");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v141[0] = v87;
    v88 = *(void **)(a1 + 104);
    v142[0] = *(_QWORD *)(a1 + 96);
    objc_msgSend(v88, "label");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    v141[1] = v89;
    v142[1] = *(_QWORD *)(a1 + 104);
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v142, v141, 2);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v86) = objc_msgSend(v86, "addOutputs:", v90);

    if ((v86 & 1) == 0)
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_1::operator()();
    objc_msgSend(*(id *)(a1 + 96), "descriptor");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = objc_msgSend(v91, "tensorAllocationSizeInBytes");

    v93 = malloc_type_malloc(v92, 0x6A333FAFuLL);
    *(_QWORD *)(a1 + 128) = v93;
    objc_msgSend(MEMORY[0x24BDDAB68], "dataWithBytesNoCopy:length:", v93, v92);
    v94 = objc_claimAutoreleasedReturnValue();
    v95 = *(void **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v94;

    objc_msgSend(*(id *)(a1 + 104), "descriptor");
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = objc_msgSend(v96, "tensorAllocationSizeInBytes");

    v98 = malloc_type_malloc(v97, 0xCEC65F58uLL);
    *(_QWORD *)(a1 + 136) = v98;
    objc_msgSend(MEMORY[0x24BDDAB68], "dataWithBytesNoCopy:length:", v98, v97);
    v99 = objc_claimAutoreleasedReturnValue();
    v100 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v99;

    objc_msgSend(*(id *)(a1 + 168), "descriptor");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    v102 = objc_msgSend(v101, "tensorAllocationSizeInBytes");

    v103 = (void *)MEMORY[0x24BDBCEC8];
    objc_msgSend(*(id *)(a1 + 168), "data");
    v104 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v103, "dataWithBytes:length:", objc_msgSend(v104, "bytes"), v102);
    v105 = objc_claimAutoreleasedReturnValue();
    v106 = *(void **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v105;

    TCMLComputeWrapBuffer(*(void **)(a1 + 184));
    v107 = objc_claimAutoreleasedReturnValue();
    v108 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v107;

    if ((objc_msgSend(*(id *)(a1 + 24), "compileWithOptions:device:", 0, v129) & 1) == 0)
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_2::operator()();

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDDAAE8], "tc_inferenceGraphForStyleTransferDescriptor:algorithm:", v133, v123);
    v109 = objc_claimAutoreleasedReturnValue();
    v110 = (void *)MEMORY[0x24BDDAAF0];
    v131 = (void *)v109;
    v140 = v109;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v140, 1);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v110, "graphWithGraphObjects:", v111);
    v112 = objc_claimAutoreleasedReturnValue();
    v113 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v112;

    v114 = *(void **)(a1 + 16);
    objc_msgSend(*(id *)(a1 + 80), "label");
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    v138[0] = v115;
    v116 = *(void **)(a1 + 88);
    v139[0] = *(_QWORD *)(a1 + 80);
    objc_msgSend(v116, "label");
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    v138[1] = v117;
    v139[1] = *(_QWORD *)(a1 + 88);
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v139, v138, 2);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v114) = objc_msgSend(v114, "addInputs:", v118);

    if ((v114 & 1) == 0)
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_3::operator()();
    if ((objc_msgSend(*v126, "compileWithOptions:device:", 0, v129) & 1) == 0)
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_4::operator()();
  }

  objc_autoreleasePoolPop(context);
  return a1;
}

void sub_217F26660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, id *a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v32;

  turi::neural_net::mlc_layer_weights::~mlc_layer_weights(a13);
  v32 = *(void **)(a18 + 144);
  if (v32)
  {
    *(_QWORD *)(a18 + 152) = v32;
    operator delete(v32);
  }

  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::export_weights(id *this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  _QWORD **v5;
  uint64_t *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD **v11;
  _QWORD *v12[2];
  __int128 *v13;

  v4 = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(this[3], "synchronizeUpdates");
  turi::neural_net::mlc_layer_weights::export_weights_and_optimizer_data((turi::neural_net::mlc_layer_weights *)(this + 24), a2);
  turi::proprietary::neural_net::mlc_style_transfer_backend::get_optimizer_state(this, (uint64_t)&v11);
  v5 = v11;
  if (v11 != v12)
  {
    do
    {
      v13 = (__int128 *)(v5 + 4);
      v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v5 + 4, (uint64_t)&std::piecewise_construct, &v13);
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v6 + 8, (uint64_t *)v5 + 8);
      v7 = *((_OWORD *)v5 + 6);
      *((_OWORD *)v6 + 5) = *((_OWORD *)v5 + 5);
      *((_OWORD *)v6 + 6) = v7;
      v8 = v5[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v5[2];
          v10 = *v9 == v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v12);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v11, v12[0]);
  objc_autoreleasePoolPop(v4);
}

void sub_217F26AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::get_optimizer_state(id *this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  int v4;
  int v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  float *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  objc_msgSend(this[3], "optimizer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "learningRate");
  v5 = v4;
  v6 = operator new(0x28uLL);
  v6[2] = 0;
  *v6 = &unk_24D917810;
  v6[1] = 0;
  v6[3] = &unk_24D917860;
  *((_DWORD *)v6 + 8) = v5;
  *(_QWORD *)&v33 = v6 + 3;
  *((_QWORD *)&v33 + 1) = v6;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_learning_rate", &v33);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  objc_msgSend(v3, "beta1");
  v11 = v10;
  v12 = operator new(0x28uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &unk_24D917810;
  v12[3] = &unk_24D917860;
  *((_DWORD *)v12 + 8) = v11;
  *(_QWORD *)&v33 = v12 + 3;
  *((_QWORD *)&v33 + 1) = v12;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_beta1", &v33);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  objc_msgSend(v3, "beta2");
  v17 = v16;
  v18 = operator new(0x28uLL);
  v18[1] = 0;
  v18[2] = 0;
  *v18 = &unk_24D917810;
  v18[3] = &unk_24D917860;
  *((_DWORD *)v18 + 8) = v17;
  *(_QWORD *)&v33 = v18 + 3;
  *((_QWORD *)&v33 + 1) = v18;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_beta2", &v33);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  objc_msgSend(v3, "epsilon");
  v23 = v22;
  v24 = operator new(0x28uLL);
  v24[1] = 0;
  v24[2] = 0;
  *v24 = &unk_24D917810;
  v24[3] = &unk_24D917860;
  *((_DWORD *)v24 + 8) = v23;
  *(_QWORD *)&v33 = v24 + 3;
  *((_QWORD *)&v33 + 1) = v24;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_epsilon", &v33);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = objc_msgSend(v3, "timeStep");
  v29 = (float *)operator new(0x28uLL);
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *(_QWORD *)v29 = &unk_24D917810;
  *((_QWORD *)v29 + 3) = &unk_24D917860;
  v29[8] = (float)v28;
  *(_QWORD *)&v33 = v29 + 6;
  *((_QWORD *)&v33 + 1) = v29;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_time_step", &v33);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

}

void sub_217F26E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v10, *(_QWORD **)(v10 + 8));
  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::set_learning_rate(id *this, float a2)
{
  void *v4;
  void *v5;
  double v6;

  v4 = (void *)MEMORY[0x219A19FE4]();
  if (*((_BYTE *)this + 8))
  {
    objc_msgSend(this[3], "optimizer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(float *)&v6 = a2;
    objc_msgSend(v5, "setLearningRate:", v6);

  }
  objc_autoreleasePoolPop(v4);
}

void sub_217F26EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::train(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t i;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *context;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  std::__shared_weak_count *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _QWORD v110[2];
  std::__shared_weak_count *v111;
  __int128 v112;
  __int128 v113;
  _QWORD v114[9];
  int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t);
  uint64_t *(*v120)(uint64_t);
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t);
  uint64_t *(*v127)(uint64_t);
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t, uint64_t);
  uint64_t *(*v134)(uint64_t);
  const char *v135;
  uint64_t v136;
  void *__p;
  void *v138;
  _QWORD *v139;
  void *v140;
  _QWORD v141[2];
  __int128 v142;
  __int128 v143;
  _QWORD v144[6];
  __int128 v145;
  __int128 v146;
  _QWORD v147[3];
  void *v148;
  _QWORD v149[2];
  __int128 v150;
  __int128 v151;
  _QWORD v152[2];
  _QWORD v153[2];
  _QWORD v154[7];
  _QWORD v155[10];

  v155[7] = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x219A19FE4]();
  if (*(_BYTE *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "input");
    v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
    if (SHIBYTE(v139) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
    v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
    if (SHIBYTE(v139) < 0)
      operator delete(__p);
    if (a2 + 8 == v5)
      turi::proprietary::neural_net::mlc_style_transfer_backend::train(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()();
    if (a2 + 8 == v6)
      turi::proprietary::neural_net::mlc_style_transfer_backend::train(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_1::operator()();
    objc_msgSend(*(id *)(a1 + 48), "descriptor");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "shape");
    v96 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v96, "objectAtIndexedSubscript:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v7) = objc_msgSend(v8, "intValue");

    objc_msgSend(v96, "objectAtIndexedSubscript:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v8) = objc_msgSend(v9, "intValue");

    objc_msgSend(v96, "objectAtIndexedSubscript:", 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v9) = objc_msgSend(v10, "intValue");

    objc_msgSend(v96, "objectAtIndexedSubscript:", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "intValue");

    v13 = 4 * (int)v7 * (uint64_t)(int)v8 * (int)v9 * v12;
    objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", v13);
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", v13);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", v13);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    +[TCMPSStyleTransfer populateMeanCWH:height:width:](TCMPSStyleTransfer, "populateMeanCWH:height:width:", v94, (int)v8, (int)v7);
    +[TCMPSStyleTransfer populateVarianceCWH:height:width:](TCMPSStyleTransfer, "populateVarianceCWH:height:width:", v93, (int)v8, (int)v7);
    +[TCMPSStyleTransfer populateMultiplication:](TCMPSStyleTransfer, "populateMultiplication:", v95);
    v14 = (uint64_t *)(v5 + 56);
    turi::neural_net::convert_hwc_array_to_chw_data(v14);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    turi::neural_net::convert_hwc_array_to_chw_data((uint64_t *)(v6 + 56));
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = *(_QWORD *)(*(uint64_t (**)(uint64_t *))(*v14 + 32))(v14);
    v130 = 0;
    v131 = &v130;
    v132 = 0x3812000000;
    v133 = __Block_byref_object_copy__0;
    v134 = __Block_byref_object_dispose__0;
    v135 = "";
    v15 = operator new();
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 850045863;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    *(_QWORD *)(v15 + 80) = 0;
    *(_QWORD *)(v15 + 88) = 1018212795;
    *(_OWORD *)(v15 + 96) = 0u;
    *(_OWORD *)(v15 + 112) = 0u;
    *(_OWORD *)(v15 + 124) = 0u;
    *(_QWORD *)v15 = &off_24D917700;
    *(_QWORD *)(v15 + 8) = 0;
    v136 = v15;
    v123 = 0;
    v124 = &v123;
    v125 = 0x3812000000;
    v126 = __Block_byref_object_copy__0;
    v127 = __Block_byref_object_dispose__0;
    v128 = "";
    v16 = operator new();
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 850045863;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_QWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 88) = 1018212795;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 124) = 0u;
    *(_QWORD *)v16 = &off_24D917700;
    *(_QWORD *)(v16 + 8) = 0;
    v129 = v16;
    v116 = 0;
    v117 = &v116;
    v118 = 0x3812000000;
    v119 = __Block_byref_object_copy__0;
    v120 = __Block_byref_object_dispose__0;
    v121 = "";
    v17 = operator new();
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 850045863;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_QWORD *)(v17 + 80) = 0;
    *(_QWORD *)(v17 + 88) = 1018212795;
    *(_OWORD *)(v17 + 96) = 0u;
    *(_OWORD *)(v17 + 112) = 0u;
    *(_OWORD *)(v17 + 124) = 0u;
    *(_QWORD *)v17 = &off_24D917700;
    *(_QWORD *)(v17 + 8) = 0;
    v122 = v17;
    v115 = 1065353216;
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", &v115, 4);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = *(void **)(a1 + 24);
    v86 = v18;
    objc_msgSend(*(id *)(a1 + 32), "label");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v154[0] = v85;
    TCMLComputeWrapData(v89);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v155[0] = v84;
    objc_msgSend(*(id *)(a1 + 40), "label");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v154[1] = v83;
    TCMLComputeWrapData(v90);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    v155[1] = v82;
    objc_msgSend(*(id *)(a1 + 48), "label");
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    v154[2] = v81;
    TCMLComputeWrapData(v95);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v155[2] = v80;
    objc_msgSend(*(id *)(a1 + 56), "label");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v154[3] = v79;
    TCMLComputeWrapData(v94);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v155[3] = v78;
    objc_msgSend(*(id *)(a1 + 64), "label");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v154[4] = v87;
    TCMLComputeWrapData(v93);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v155[4] = v20;
    objc_msgSend(*(id *)(a1 + 168), "label");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v154[5] = v21;
    v155[5] = *(_QWORD *)(a1 + 176);
    objc_msgSend(*(id *)(a1 + 72), "label");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v154[6] = v22;
    TCMLComputeWrapData(v18);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v155[6] = v23;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v155, v154, 7);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 96), "label");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v152[0] = v25;
    v26 = *(void **)(a1 + 104);
    v153[0] = *(_QWORD *)(a1 + 112);
    objc_msgSend(v26, "label");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v152[1] = v27;
    v153[1] = *(_QWORD *)(a1 + 120);
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v153, v152, 2);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v114[0] = MEMORY[0x24BDAC760];
    v114[1] = 3221225472;
    v114[2] = ___ZN4turi11proprietary10neural_net26mlc_style_transfer_backend5trainERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10neural_net18shared_float_arrayENS3_4lessISA_EENS8_INS3_4pairIKSA_SC_EEEEEE_block_invoke;
    v114[3] = &unk_24D91A5B8;
    v114[7] = a1;
    v114[8] = v88;
    v114[4] = &v130;
    v114[5] = &v123;
    v114[6] = &v116;
    objc_msgSend(v19, "executeWithInputsData:lossLabelsData:lossLabelWeightsData:outputsData:batchSize:options:completionHandler:", v24, 0, 0, v28, v88, 0, v114);

    v29 = v131[6];
    if (!v29)
      std::__throw_future_error[abi:ne180100](3u);
    *(_QWORD *)&v100 = v131[6];
    std::__assoc_sub_state::__attach_future[abi:ne180100](v29);
    v30 = operator new(8uLL);
    __p = v30;
    *v30 = v88;
    v139 = v30 + 1;
    v138 = v30 + 1;
    std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,void>((uint64_t *)&v100, (uint64_t)&__p, &v105);
    v109 = v105;
    v105 = 0uLL;
    turi::neural_net::shared_float_array::shared_float_array((uint64_t)v110, &v109);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (__p)
    {
      v138 = __p;
      operator delete(__p);
    }
    v37 = v100;
    if ((_QWORD)v100)
    {
      v38 = (unint64_t *)(v100 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
    }
    v40 = v124[6];
    if (!v40)
      std::__throw_future_error[abi:ne180100](3u);
    *(_QWORD *)&v98 = v124[6];
    std::__assoc_sub_state::__attach_future[abi:ne180100](v40);
    v41 = operator new(8uLL);
    __p = v41;
    *v41 = v88;
    v139 = v41 + 1;
    v138 = v41 + 1;
    std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,void>((uint64_t *)&v98, (uint64_t)&__p, &v100);
    v104 = v100;
    v100 = 0uLL;
    turi::neural_net::shared_float_array::shared_float_array((uint64_t)&v105, &v104);
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
    if (*((_QWORD *)&v104 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
    if (*((_QWORD *)&v100 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (__p)
    {
      v138 = __p;
      operator delete(__p);
    }
    v48 = v98;
    if ((_QWORD)v98)
    {
      v49 = (unint64_t *)(v98 + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
    }
    v51 = v117[6];
    if (!v51)
      std::__throw_future_error[abi:ne180100](3u);
    v97 = v117[6];
    std::__assoc_sub_state::__attach_future[abi:ne180100](v51);
    v52 = operator new(8uLL);
    __p = v52;
    *v52 = v88;
    v139 = v52 + 1;
    v138 = v52 + 1;
    std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,void>(&v97, (uint64_t)&__p, &v98);
    v99 = v98;
    v98 = 0uLL;
    turi::neural_net::shared_float_array::shared_float_array((uint64_t)&v100, &v99);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    if (*((_QWORD *)&v98 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (__p)
    {
      v138 = __p;
      operator delete(__p);
    }
    v59 = v97;
    if (v97)
    {
      v60 = (unint64_t *)(v97 + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "loss");
    v140 = &unk_24D9175B8;
    v141[0] = v110[1];
    v141[1] = v111;
    if (v111)
    {
      p_shared_owners = (unint64_t *)&v111->__shared_owners_;
      do
        v63 = __ldxr(p_shared_owners);
      while (__stxr(v63 + 1, p_shared_owners));
    }
    v142 = v112;
    v143 = v113;
    std::string::basic_string[abi:ne180100]<0>(v144, "style_loss");
    v144[3] = &unk_24D9175B8;
    v144[4] = *((_QWORD *)&v105 + 1);
    v144[5] = v106;
    if (v106)
    {
      v64 = (unint64_t *)&v106->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v145 = v107;
    v146 = v108;
    std::string::basic_string[abi:ne180100]<0>(v147, "content_loss");
    v148 = &unk_24D9175B8;
    v149[0] = *((_QWORD *)&v100 + 1);
    v149[1] = v101;
    if (v101)
    {
      v66 = (unint64_t *)&v101->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v150 = v102;
    v151 = v103;
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a3, (const void **)&__p, 3);
    for (i = 0; i != -30; i -= 10)
    {
      v149[i - 1] = &unk_24D9175B8;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v149[i]);
      if (SHIBYTE(v147[i + 2]) < 0)
        operator delete((void *)v147[i]);
    }
    *(_QWORD *)&v100 = &unk_24D9175B8;
    v69 = v101;
    if (v101)
    {
      v70 = (unint64_t *)&v101->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    *(_QWORD *)&v105 = &unk_24D9175B8;
    v72 = v106;
    if (v106)
    {
      v73 = (unint64_t *)&v106->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v110[0] = &unk_24D9175B8;
    v75 = v111;
    if (v111)
    {
      v76 = (unint64_t *)&v111->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }

    _Block_object_dispose(&v116, 8);
    std::promise<turi::neural_net::shared_float_array>::~promise(&v122);
    _Block_object_dispose(&v123, 8);
    std::promise<turi::neural_net::shared_float_array>::~promise(&v129);
    _Block_object_dispose(&v130, 8);
    std::promise<turi::neural_net::shared_float_array>::~promise(&v136);

  }
  else
  {
    std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<true,0>(&__p);
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a3, (const void **)&__p, 1);
    v140 = &unk_24D9175B8;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v141);
    if (SHIBYTE(v139) < 0)
      operator delete(__p);
  }
  objc_autoreleasePoolPop(context);
}

void sub_217F27B4C(_Unwind_Exception *a1)
{
  std::pair<std::string const,turi::neural_net::shared_float_array>::~pair((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t *__Block_byref_object_dispose__0(uint64_t a1)
{
  return std::promise<turi::neural_net::shared_float_array>::~promise((uint64_t *)(a1 + 48));
}

void ___ZN4turi11proprietary10neural_net26mlc_style_transfer_backend5trainERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10neural_net18shared_float_arrayENS3_4lessISA_EENS8_INS3_4pairIKSA_SC_EEEEEE_block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  std::runtime_error *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void *__p;
  void *v38;
  _QWORD *v39;
  _QWORD v40[2];
  std::__shared_weak_count *v41;
  std::runtime_error v42;

  v5 = a3;
  if (v5)
  {
    objc_msgSend(v5, "localizedDescription");
    v6 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    v7 = std::runtime_error::runtime_error(&v42, v6);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(v7);
  }
  v8 = a1[7];
  objc_msgSend(a2, "data");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v10 = objc_msgSend(v9, "bytes");

  v11 = *(_QWORD *)(a1[4] + 8);
  v12 = a1[8];
  v13 = operator new(8uLL);
  __p = v13;
  *v13 = v12;
  v38 = v13 + 1;
  v39 = v13 + 1;
  turi::neural_net::shared_float_array::copy(v10, (uint64_t)&__p, (uint64_t)v40);
  std::promise<turi::neural_net::shared_float_array>::set_value((uint64_t *)(v11 + 48), (uint64_t)v40);
  v40[0] = &unk_24D9175B8;
  v14 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  v17 = objc_msgSend(*(id *)(v8 + 112), "bytes");
  v18 = *(_QWORD *)(a1[5] + 8);
  v19 = a1[8];
  v20 = operator new(8uLL);
  v34 = v20;
  *v20 = v19;
  v35 = v20 + 1;
  v36 = v20 + 1;
  turi::neural_net::shared_float_array::copy(v17, (uint64_t)&v34, (uint64_t)v40);
  std::promise<turi::neural_net::shared_float_array>::set_value((uint64_t *)(v18 + 48), (uint64_t)v40);
  v40[0] = &unk_24D9175B8;
  v21 = v41;
  if (v41)
  {
    v22 = (unint64_t *)&v41->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v24 = objc_msgSend(*(id *)(v8 + 120), "bytes");
  v25 = *(_QWORD *)(a1[6] + 8);
  v26 = a1[8];
  v27 = operator new(8uLL);
  v31 = v27;
  *v27 = v26;
  v32 = v27 + 1;
  v33 = v27 + 1;
  turi::neural_net::shared_float_array::copy(v24, (uint64_t)&v31, (uint64_t)v40);
  std::promise<turi::neural_net::shared_float_array>::set_value((uint64_t *)(v25 + 48), (uint64_t)v40);
  v40[0] = &unk_24D9175B8;
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }

}

void sub_217F28238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  uint64_t v20;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v20 + 8);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  _QWORD v39[2];
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[6];
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  __n128 (*v47)(__n128 *, __n128 *);
  void (*v48)(uint64_t);
  const char *v49;
  void *__p;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t *(*v57)(uint64_t);
  const char *v58;
  uint64_t v59;
  _QWORD v60[2];
  _QWORD v61[2];
  __int128 v62;
  char v63;
  void *v64;
  _QWORD v65[2];
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v6 = (void *)MEMORY[0x219A19FE4]();
  if (*(_BYTE *)(a1 + 8))
  {
    std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<true,0>(&v62);
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a3, (const void **)&v62, 1);
    v64 = &unk_24D9175B8;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v65);
    if (v63 < 0)
      operator delete((void *)v62);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v62, "input");
    v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&v62);
    if (v63 < 0)
      operator delete((void *)v62);
    if (a2 + 8 == v7)
      turi::proprietary::neural_net::mlc_style_transfer_backend::predict(std::map<std::string,turi::neural_net::shared_float_array> const&)const::$_0::operator()();
    turi::neural_net::convert_hwc_array_to_chw_data((uint64_t *)(v7 + 56));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = 0;
    v54 = &v53;
    v55 = 0x3812000000;
    v56 = __Block_byref_object_copy__0;
    v57 = __Block_byref_object_dispose__0;
    v58 = "";
    v9 = operator new();
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 850045863;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = 1018212795;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_OWORD *)(v9 + 124) = 0u;
    *(_QWORD *)v9 = &off_24D917700;
    *(_QWORD *)(v9 + 8) = 0;
    v59 = v9;
    v44 = 0;
    v45 = &v44;
    v46 = 0x4812000000;
    v47 = __Block_byref_object_copy__56;
    v48 = __Block_byref_object_dispose__57;
    v49 = "";
    __p = 0;
    v10 = *(const void **)(a1 + 144);
    v11 = *(_QWORD *)(a1 + 152);
    v51 = 0;
    v52 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v10, v11, (v11 - (uint64_t)v10) >> 3);
    v12 = (int *)v45[6];
    v13 = 1;
    while (v12 != (int *)v45[7])
    {
      v14 = *v12;
      v12 += 2;
      v13 *= v14;
    }
    objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", 4 * v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[TCMPSStyleTransfer populateMultiplication:](TCMPSStyleTransfer, "populateMultiplication:", v15);
    v16 = *(void **)(a1 + 16);
    objc_msgSend(*(id *)(a1 + 80), "label");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v60[0] = v17;
    TCMLComputeWrapData(v8);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v61[0] = v18;
    objc_msgSend(*(id *)(a1 + 88), "label");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v60[1] = v19;
    TCMLComputeWrapData(v15);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v61[1] = v20;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v61, v60, 2);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v43[0] = MEMORY[0x24BDAC760];
    v43[1] = 3221225472;
    v43[2] = ___ZNK4turi11proprietary10neural_net26mlc_style_transfer_backend7predictERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10neural_net18shared_float_arrayENS3_4lessISA_EENS8_INS3_4pairIKSA_SC_EEEEEE_block_invoke;
    v43[3] = &unk_24D91A5E0;
    v43[4] = &v53;
    v43[5] = &v44;
    objc_msgSend(v16, "executeWithInputsData:batchSize:options:completionHandler:", v21, 1, 0, v43);

    v22 = v54[6];
    if (!v22)
      std::__throw_future_error[abi:ne180100](3u);
    v37 = v54[6];
    std::__assoc_sub_state::__attach_future[abi:ne180100](v22);
    std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> &,void>(&v37, (uint64_t)(v45 + 6), &v62);
    v38 = v62;
    v62 = 0uLL;
    turi::neural_net::shared_float_array::shared_float_array((uint64_t)v39, &v38);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v37;
    if (v37)
    {
      v30 = (unint64_t *)(v37 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
    }
    std::string::basic_string[abi:ne180100]<0>(&v62, "output");
    v64 = &unk_24D9175B8;
    v65[0] = v39[1];
    v65[1] = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    v66 = v41;
    v67 = v42;
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a3, (const void **)&v62, 1);
    v64 = &unk_24D9175B8;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v65);
    if (v63 < 0)
      operator delete((void *)v62);
    v39[0] = &unk_24D9175B8;
    v34 = v40;
    if (v40)
    {
      v35 = (unint64_t *)&v40->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }

    _Block_object_dispose(&v44, 8);
    if (__p)
    {
      v51 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v53, 8);
    std::promise<turi::neural_net::shared_float_array>::~promise(&v59);

  }
  objc_autoreleasePoolPop(v6);
}

void sub_217F28834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  void *v36;
  uint64_t v37;

  std::pair<std::string const,turi::neural_net::shared_float_array>::~pair(v37 - 192);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);

  _Block_object_dispose(&a26, 8);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a35, 8);
  std::promise<turi::neural_net::shared_float_array>::~promise(a9);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__56(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__57(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZNK4turi11proprietary10neural_net26mlc_style_transfer_backend7predictERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10neural_net18shared_float_arrayENS3_4lessISA_EENS8_INS3_4pairIKSA_SC_EEEEEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  std::runtime_error *v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];
  std::__shared_weak_count *v17;
  std::runtime_error v18;

  v5 = a3;
  if (v5)
  {
    objc_msgSend(v5, "localizedDescription");
    v6 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    v7 = std::runtime_error::runtime_error(&v18, v6);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(v7);
  }
  objc_msgSend(a2, "data");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v9 + 48), *(_QWORD *)(v9 + 56), (uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3);
  turi::neural_net::convert_chw_data_to_hwc_array(v8, (uint64_t)&__p, (uint64_t)v16);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }

  std::promise<turi::neural_net::shared_float_array>::set_value((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), (uint64_t)v16);
  v16[0] = &unk_24D9175B8;
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

}

void sub_217F28B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  uint64_t v14;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 8);

  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::~mlc_style_transfer_backend(void **this)
{
  void *v2;

  *this = &off_24D91A580;
  if (*((_BYTE *)this + 8))
  {
    free(this[16]);
    free(this[17]);
  }
  turi::neural_net::mlc_layer_weights::~mlc_layer_weights(this + 24);

  v2 = this[18];
  if (v2)
  {
    this[19] = v2;
    operator delete(v2);
  }

}

{
  turi::proprietary::neural_net::mlc_style_transfer_backend::~mlc_style_transfer_backend(this);
  JUMPOUT(0x219A19A08);
}

_QWORD *std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<true,0>(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)(a1 + 3));
  return a1;
}

void sub_217F28CC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&,std::allocator<turi::neural_net::deferred_float_array>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_217F28D2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *OUTLINED_FUNCTION_17_1(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 44);
}

void _GLOBAL__sub_I_mlc_st_backend_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217F28F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_0()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_1()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_217F29310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_217F294CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, _QWORD *a10, int a11, __int16 a12, char a13, char a14, turi::neural_net::model_spec *a15)
{
  void *v15;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&__p, a10);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a15, 0);

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_TCHumanActionRecognitionTrainer_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void sub_217F29710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_26_0()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_object_recognizer_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

uint64_t turi::Span<float,18446744073709551615ul>::SliceByDimension(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  void *exception;
  _QWORD v6[3];

  v3 = a1[1];
  if (v3 % a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v6, 0, sizeof(v6));
    turi::TuriException::TuriException(exception, 2, v6);
  }
  return turi::Span<float,18446744073709551615ul>::Slice(a1, v3 / a2 * a3, v3 / a2);
}

void sub_217F2991C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
    operator delete(__p);
  if (v16)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t turi::Span<float,18446744073709551615ul>::Slice(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  void *exception;
  _QWORD v7[3];

  if (!a3 || ((v3 = a1[1], v3 > a2) ? (v4 = a3 + a2 > v3) : (v4 = 1), v4))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v7, 0, sizeof(v7));
    turi::TuriException::TuriException(exception, 2, v7);
  }
  return *a1 + 4 * a2;
}

void sub_217F299D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
    operator delete(__p);
  if (v16)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_od_scenenet_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *std::vector<unsigned long>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_217F29A9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<turi::neural_net::image_annotation>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::neural_net::image_annotation>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_217F29CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::neural_net::image_annotation>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<turi::neural_net::image_annotation>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_217F29ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::neural_net::image_annotation>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::neural_net::image_annotation>>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::neural_net::image_annotation>>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::neural_net::image_annotation>>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::neural_net::image_annotation>>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t *boost::function0<void>::~function0(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<turi::neural_net::model_backend  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::neural_net::model_backend  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::neural_net::Completion::Failure(std::exception_ptr *this@<X0>, std::exception_ptr a2@<0:X1>, std::exception_ptr *a3@<X8>)
{
  std::exception_ptr v4;

  std::exception_ptr::exception_ptr(&v4, this);
  std::exception_ptr::exception_ptr(a3, &v4);
  std::exception_ptr::~exception_ptr(&v4);
}

void std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[5];
  if (v3)
  {
    a2[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[2];
  if (v4)
  {
    a2[3] = v4;
    operator delete(v4);
  }
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a2);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

void __cxx_global_var_init_13()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_od_scenenet_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

CoreML::Specification::Model *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::Model *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::Model **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::Model::Model(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>);
  }
  else
  {
    Aligned = (CoreML::Specification::Model *)operator new();
    CoreML::Specification::Model::Model(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217F2A3E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::FeatureDescription *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::FeatureDescription *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::FeatureDescription **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>);
  }
  else
  {
    Aligned = (CoreML::Specification::FeatureDescription *)operator new();
    CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217F2A50C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

__n128 _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  __n128 result;
  uint64_t v7;

  v4 = *a1;
  if (*a1 == a2)
  {
    v7 = operator new();
    result = *a3;
    *(__n128 *)v7 = *a3;
    *(_QWORD *)(v7 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *a1 = v7;
  }
  else
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    result = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    *(__n128 *)v4 = result;
    a3[1].n128_u8[7] = 0;
    a3->n128_u8[0] = 0;
  }
  return result;
}

void _tc_google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;

  v4 = (std::string *)operator new();
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *a1 = v5;
}

void sub_217F2A654(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

CoreML::Specification::SizeRange *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SizeRange>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::SizeRange *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::SizeRange **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::SizeRange::SizeRange(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SizeRange>);
  }
  else
  {
    Aligned = (CoreML::Specification::SizeRange *)operator new();
    CoreML::Specification::SizeRange::SizeRange(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217F2A770(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SizeRange>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void sub_217F2A93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_81()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_od_scenenet_serialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)556>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML *v3;
  void *v5;
  _BOOL8 v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  char v13;
  void *__p;
  __int128 v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 16))
    v3 = *(CoreML **)(a1 + 16);
  else
    v3 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) != 556)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Model not an a LinkedModel.");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_8:
    if (SHIBYTE(v15) < 0)
    {
      v5 = __p;
LABEL_10:
      operator delete(v5);
      return;
    }
    return;
  }
  if (*(_BYTE *)(a1 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LinkedModel cannot be marked as updatable");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_8;
  }
  CoreML::Result::Result((CoreML::Result *)&v17);
  CoreML::validateModelDescription(v3, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&__p);
  v17 = __p;
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  v18 = v15;
  v19 = v16;
  v6 = CoreML::Result::good((CoreML::Result *)&v17);
  if (!v6)
  {
    *(_QWORD *)a2 = v17;
    *(_OWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 24) = v19;
    v18 = 0uLL;
    v19 = 0;
    goto LABEL_36;
  }
  if (*(_DWORD *)(a1 + 44) == 556)
    v7 = *(uint64_t **)(a1 + 32);
  else
    v7 = CoreML::Specification::LinkedModel::default_instance((CoreML::Specification::LinkedModel *)v6);
  if (*((_DWORD *)v7 + 7))
  {
    if (*(_DWORD *)(a1 + 44) == 556)
      v8 = *(uint64_t **)(a1 + 32);
    else
      v8 = CoreML::Specification::LinkedModel::default_instance((CoreML::Specification::LinkedModel *)v7);
    if (*((_DWORD *)v8 + 7) == 1)
      v9 = (uint64_t *)v8[2];
    else
      v9 = CoreML::Specification::LinkedModelFile::default_instance((CoreML::Specification::LinkedModelFile *)v8);
    CoreML::Specification::LinkedModelFile::LinkedModelFile((CoreML::Specification::LinkedModelFile *)&__p, (const CoreML::Specification::LinkedModelFile *)v9);
    v10 = (uint64_t *)*((_QWORD *)&v15 + 1);
    if (!*((_QWORD *)&v15 + 1))
      v10 = &CoreML::Specification::_StringParameter_default_instance_;
    v11 = v10[2];
    if (*(char *)(v11 + 23) < 0)
    {
      if (*(_QWORD *)(v11 + 8))
        goto LABEL_31;
    }
    else if (*(_BYTE *)(v11 + 23))
    {
LABEL_31:
      *(_QWORD *)a2 = v17;
      *(_OWORD *)(a2 + 8) = v18;
      *(_QWORD *)(a2 + 24) = v19;
      v18 = 0uLL;
      v19 = 0;
LABEL_35:
      CoreML::Specification::LinkedModelFile::~LinkedModelFile((CoreML::Specification::LinkedModelFile *)&__p);
      goto LABEL_36;
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "LinkedModel.linkedModelFile.linkedModeFileName.defaultValue cannot be empty.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (v13 < 0)
      operator delete(v12);
    goto LABEL_35;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "LinkedModel.LinkType not set.");
  CoreML::Result::Result((_DWORD *)a2, 13);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
LABEL_36:
  if (SHIBYTE(v19) < 0)
  {
    v5 = (void *)v18;
    goto LABEL_10;
  }
}

void sub_217F2AD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  CoreML::Specification::LinkedModelFile::~LinkedModelFile((CoreML::Specification::LinkedModelFile *)&a15);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_LinkedModelValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Gazetteer.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_ = (uint64_t)&off_24D91A6A8;
  unk_254FF60A0 = 0;
  qword_254FF60A8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FF60B0 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF60B8 = 0;
  qword_254FF60C8 = 0;
  byte_254FF60D0 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_217F2AE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::Gazetteer *CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  *(_QWORD *)this = &off_24D91A6A8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::Gazetteer *)&CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_217F2AEFC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::Gazetteer::~Gazetteer(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  *(_QWORD *)this = &off_24D91A6A8;
  CoreML::Specification::CoreMLModels::Gazetteer::SharedDtor(this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::CoreMLModels::Gazetteer::~Gazetteer(this);
  JUMPOUT(0x219A19A08);
}

_QWORD *CoreML::Specification::CoreMLModels::Gazetteer::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  int v6;

  v1 = this;
  v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = v1[3];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (_QWORD *)MEMORY[0x219A19A08](v4, 0x1012C40EC159624);
  }
  v6 = *((_DWORD *)v1 + 13);
  if (v6)
  {
    if (v6 == 200)
    {
      this = (_QWORD *)v1[5];
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
    *((_DWORD *)v1 + 13) = 0;
  }
  return this;
}

uint64_t *CoreML::Specification::CoreMLModels::Gazetteer::default_instance(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(this);
  return &CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_;
}

CoreML::Specification::CoreMLModels::Gazetteer *CoreML::Specification::CoreMLModels::Gazetteer::New(CoreML::Specification::CoreMLModels::Gazetteer *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CoreMLModels::Gazetteer *v3;

  v3 = (CoreML::Specification::CoreMLModels::Gazetteer *)operator new();
  CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::Gazetteer>(a2, v3);
  return v3;
}

void sub_217F2B0A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C43D3D65);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::Gazetteer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::Gazetteer>);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(_QWORD *)(this + 24);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(_DWORD *)(this + 52) == 200)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

BOOL CoreML::Specification::CoreMLModels::Gazetteer::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::Gazetteer *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  std::string *v14;
  _BOOL8 result;
  std::string *v16;
  const char *size;
  CoreML::Specification::StringVector *v18;
  char *v19;
  int v20;
  std::string *v21;
  char *v22;
  int VarintSizeAsIntFallback;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int TagFallback;
  uint64_t Varint32Fallback;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v7 = *(unsigned __int8 **)a2;
      v8 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v8)
      {
        v10 = 0;
LABEL_45:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
        v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v11 & 0x100000000) == 0)
          goto LABEL_46;
        goto LABEL_9;
      }
      v9 = v7 + 1;
      v10 = *v7;
      if ((char)*v7 >= 1)
        break;
      if ((unint64_t)v9 >= v8)
        goto LABEL_45;
      v12 = *v9;
      if ((v10 & ~v12) < 0x80)
        goto LABEL_45;
      *(_QWORD *)a2 = v7 + 2;
      v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
      v13 = v11 >> 3;
      if (v11 >> 3 > 0x63)
      {
        if (v13 == 100)
        {
          if (v11 != 34)
            goto LABEL_46;
          v21 = *v5;
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v21 = *v5;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v21))
            return 0;
        }
        else
        {
          if (v13 != 200 || v11 != 66)
            goto LABEL_46;
          if (*((_DWORD *)this + 13) == 200)
          {
            v18 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
          }
          else
          {
            *((_DWORD *)this + 13) = 200;
            v18 = (CoreML::Specification::StringVector *)operator new();
            CoreML::Specification::StringVector::StringVector(v18);
            *((_QWORD *)this + 5) = v18;
          }
          v22 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v22;
            *(_QWORD *)a2 = v22 + 1;
          }
          v24 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v24 & 0x8000000000000000) != 0)
            return 0;
          v26 = v24;
          result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v18, (char **)a2, v25);
          if (!result)
            return result;
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
            return 0;
        }
      }
      else if (v13 == 1)
      {
        if (v11 != 8)
          goto LABEL_46;
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v20 = 0;
          goto LABEL_53;
        }
        v20 = *v19;
        if (*v19 < 0)
        {
LABEL_53:
          Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v20);
          *((_DWORD *)this + 8) = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
        }
        else
        {
          *((_DWORD *)this + 8) = v20;
          *(_QWORD *)a2 = v19 + 1;
        }
      }
      else
      {
        if (v13 != 10 || v11 != 82)
          goto LABEL_46;
        v14 = *v6;
        if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v14 = *v6;
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v14);
        if (!result)
          return result;
        v16 = *v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
          size = (const char *)(*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v16, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.Gazetteer.language"))return 0;
      }
    }
    *(_QWORD *)a2 = v9;
    v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_46:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)return 0;
  }
}

void sub_217F2B450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::Gazetteer *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t result;
  const char *v8;
  uint64_t v9;

  v6 = *((_DWORD *)this + 8);
  if (v6)
    _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v8 = *(const char **)(result + 8);
    if (!v8)
      goto LABEL_9;
    result = *(_QWORD *)result;
    goto LABEL_8;
  }
  v8 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_8:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.Gazetteer.language");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((_QWORD *)this + 2), a2);
  }
LABEL_9:
  v9 = *((_QWORD *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v9 + 23))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (*(_QWORD *)(v9 + 8))
LABEL_11:
    result = _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(100, v9, a2);
LABEL_12:
  if (*((_DWORD *)this + 13) == 200)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, *((_QWORD *)this + 5), a2, a4);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::ByteSizeLong(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v9 = *((_DWORD *)this + 8);
  if (v9)
    v5 += ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (*((_DWORD *)this + 13) == 200)
  {
    v10 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 5));
    v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(CoreML::Specification::CoreMLModels::Gazetteer *this, const CoreML::Specification::CoreMLModels::Gazetteer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  CoreML::Specification::StringVector *v10;
  CoreML::Specification::StringVector *v11;
  uint64_t *v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 8);
  if (v9)
    *((_DWORD *)this + 8) = v9;
  if (*((_DWORD *)a2 + 13) == 200)
  {
    if (*((_DWORD *)this + 13) == 200)
    {
      v10 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
    }
    else
    {
      *((_DWORD *)this + 13) = 200;
      v10 = (CoreML::Specification::StringVector *)operator new();
      v11 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v10);
      *((_QWORD *)this + 5) = v10;
      if (*((_DWORD *)a2 + 13) != 200)
      {
        v12 = CoreML::Specification::StringVector::default_instance(v11);
        goto LABEL_28;
      }
    }
    v12 = (uint64_t *)*((_QWORD *)a2 + 5);
LABEL_28:
    CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v10, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v12);
  }
}

void sub_217F2B7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::IsInitialized(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CoreMLModels::Gazetteer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.Gazetteer");
}

CoreML::Specification::CoreMLModels::Gazetteer *CoreML::Specification::CoreMLModels::Gazetteer::New(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  return CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0);
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::GetCachedSize(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::Gazetteer>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_Gazetteer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::proprietary::style_transfer::get_toolkit_class_registration(uint64_t *a1@<X8>)
{
  _QWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __int128 **properties;
  _OWORD *v66;
  _OWORD *v67;
  char *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  unsigned int v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  __int128 **v127;
  _OWORD *v128;
  _OWORD *v129;
  char *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t *v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  void *v145;
  void *v146;
  unsigned int v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t *v151;
  void *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  unsigned int v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unsigned __int8 v189;
  _OWORD *v190;
  _OWORD *v191;
  char *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t *v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t *v206;
  void *v207;
  void *v208;
  unsigned int v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t *v213;
  void *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  unsigned int v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  void *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  void *__p[2];
  char v254;
  _QWORD v255[3];
  char v256;
  _QWORD *v257;
  _QWORD v258[3];
  _QWORD v259[3];
  _QWORD v260[3];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[3];
  _QWORD v264[6];
  _QWORD v265[3];
  _QWORD v266[2];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  uint64_t v278;
  uint64_t *v279;
  _QWORD *v280[3];
  void **v281;
  _BYTE v282[13];
  uint64_t v283;

  v283 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v277 = 0uLL;
  v280[0] = 0;
  v280[1] = 0;
  v278 = 0;
  v279 = (uint64_t *)v280;
  v255[2] = 0;
  v256 = 0;
  v257 = v258;
  v258[0] = 0;
  v259[0] = 0;
  v259[1] = 0;
  v258[1] = 0;
  v258[2] = v259;
  v259[2] = v260;
  v260[0] = 0;
  memset(v261, 0, 40);
  v260[1] = 0;
  v260[2] = v261;
  memset(v262, 0, 40);
  v261[5] = v262;
  v263[0] = 0;
  v263[1] = 0;
  v262[5] = v263;
  v263[2] = v264;
  memset(v264, 0, 40);
  v264[5] = v265;
  v265[0] = 0;
  v266[0] = 0;
  v266[1] = 0;
  v265[1] = 0;
  v265[2] = v266;
  v271 = 0u;
  v272 = 0u;
  v269 = 0u;
  v270 = 0u;
  v267 = 0u;
  v268 = 0u;
  v255[0] = off_24D91A7E8;
  v255[1] = 0;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  v276 = 0;
  MEMORY[0x219A19390](&v277, "style_transfer");
  v280[2] = turi::proprietary::style_transfer::get_toolkit_class_registration(void)::$_0::__invoke;
  v3 = (_QWORD *)turi::model_base::list_functions((turi::model_base *)v255);
  turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set(v3, (uint64_t)v282);
  std::string::basic_string[abi:ne180100]<0>(__p, "functions");
  v281 = __p;
  v4 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v279, (const void **)__p, (uint64_t)std::piecewise_construct, (_OWORD **)&v281);
  v5 = v4;
  v6 = (char *)v4 + 56;
  if (v282 != (char *)v4 + 56)
  {
    switch(*((_BYTE *)v4 + 68))
    {
      case 2:
        v7 = *(unint64_t **)v6;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          v10 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          if (*((char *)v10 + 31) < 0)
            operator delete((void *)v10[1]);
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v24 = *(unint64_t **)v6;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          v28 = (void *)v27[1];
          if (v28)
          {
            v27[2] = (unint64_t)v28;
            operator delete(v28);
          }
          v11 = v27;
          v12 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v13 = *(unint64_t **)v6;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          v281 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v281);
          goto LABEL_36;
        }
        break;
      case 5:
        v29 = *(unint64_t **)v6;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v16 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          v281 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v281);
LABEL_36:
          v11 = v16;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v32 = *(unint64_t **)v6;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
          v11 = v35;
          v23 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v17 = *(unint64_t **)v6;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)v6;
          if (*(_QWORD *)v6)
          {
            v21 = (void *)v20[6];
            if (v21)
            {
              v20[7] = (unint64_t)v21;
              operator delete(v21);
            }
            v22 = (void *)v20[3];
            if (v22)
            {
              v20[4] = (unint64_t)v22;
              operator delete(v22);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v20 + 1));
            v11 = v20;
            v23 = 2071181815;
LABEL_42:
            v12 = v23 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v11, v12);
          }
LABEL_44:
          *(_QWORD *)v6 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v6 = *(_QWORD *)v282;
    *(_QWORD *)(v6 + 5) = *(_QWORD *)&v282[5];
    *((_BYTE *)v5 + 68) = v282[12];
    v282[12] = 0;
  }
  if (v254 < 0)
    operator delete(__p[0]);
  switch(v282[12])
  {
    case 2:
      v36 = *(unint64_t **)v282;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          if (*(char *)(*(_QWORD *)v282 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v282 + 8));
          v40 = v39;
          v41 = 0x1012C404EF22A49;
          goto LABEL_89;
        }
      }
      break;
    case 3:
      v53 = *(unint64_t **)v282;
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v56 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          v57 = *(void **)(*(_QWORD *)v282 + 8);
          if (v57)
          {
            *(_QWORD *)(*(_QWORD *)v282 + 16) = v57;
            operator delete(v57);
          }
          v40 = v56;
          v41 = 0x1080C409938AC02;
          goto LABEL_89;
        }
      }
      break;
    case 4:
      v42 = *(unint64_t **)v282;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          __p[0] = (void *)(*(_QWORD *)v282 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_82;
        }
      }
      break;
    case 5:
      v58 = *(unint64_t **)v282;
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v45 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          __p[0] = (void *)(*(_QWORD *)v282 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_82:
          v40 = v45;
          v41 = 0x1020C405E66F15BLL;
          goto LABEL_89;
        }
      }
      break;
    case 8:
      v61 = *(unint64_t **)v282;
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v64 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v282 + 16));
          v40 = v64;
          v52 = -235920773;
          goto LABEL_88;
        }
      }
      break;
    case 9:
      v46 = *(unint64_t **)v282;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          v50 = *(void **)(*(_QWORD *)v282 + 48);
          if (v50)
          {
            *(_QWORD *)(*(_QWORD *)v282 + 56) = v50;
            operator delete(v50);
          }
          v51 = *(void **)(v49 + 24);
          if (v51)
          {
            *(_QWORD *)(v49 + 32) = v51;
            operator delete(v51);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v49 + 8);
          v40 = v49;
          v52 = 2071181815;
LABEL_88:
          v41 = v52 | 0x1030C4000000000;
LABEL_89:
          MEMORY[0x219A19A08](v40, v41);
        }
      }
      break;
    default:
      break;
  }
  properties = (__int128 **)turi::model_base::list_get_properties((turi::model_base *)v255);
  turi::flexible_type_converter<std::vector<std::string>>::set(properties, (uint64_t)v282);
  std::string::basic_string[abi:ne180100]<0>(__p, "get_properties");
  v281 = __p;
  v66 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v279, (const void **)__p, (uint64_t)std::piecewise_construct, (_OWORD **)&v281);
  v67 = v66;
  v68 = (char *)v66 + 56;
  if (v282 != (char *)v66 + 56)
  {
    switch(*((_BYTE *)v66 + 68))
    {
      case 2:
        v69 = *(unint64_t **)v68;
        do
        {
          v70 = __ldaxr(v69);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, v69));
        if (!v71)
        {
          v72 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          if (*((char *)v72 + 31) < 0)
            operator delete((void *)v72[1]);
          v73 = v72;
          v74 = 0x1012C404EF22A49;
          goto LABEL_132;
        }
        break;
      case 3:
        v86 = *(unint64_t **)v68;
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          v89 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          v90 = (void *)v89[1];
          if (v90)
          {
            v89[2] = (unint64_t)v90;
            operator delete(v90);
          }
          v73 = v89;
          v74 = 0x1080C409938AC02;
          goto LABEL_132;
        }
        break;
      case 4:
        v75 = *(unint64_t **)v68;
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          v78 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          v281 = (void **)(v78 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v281);
          goto LABEL_125;
        }
        break;
      case 5:
        v91 = *(unint64_t **)v68;
        do
        {
          v92 = __ldaxr(v91);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, v91));
        if (!v93)
        {
          v78 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          v281 = (void **)(v78 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v281);
LABEL_125:
          v73 = v78;
          v74 = 0x1020C405E66F15BLL;
          goto LABEL_132;
        }
        break;
      case 8:
        v94 = *(unint64_t **)v68;
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          v97 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          boost::detail::shared_count::~shared_count((unsigned int **)v97 + 2);
          v73 = v97;
          v85 = -235920773;
          goto LABEL_131;
        }
        break;
      case 9:
        v79 = *(unint64_t **)v68;
        do
        {
          v80 = __ldaxr(v79);
          v81 = v80 - 1;
        }
        while (__stlxr(v81, v79));
        if (!v81)
        {
          v82 = *(unint64_t **)v68;
          if (*(_QWORD *)v68)
          {
            v83 = (void *)v82[6];
            if (v83)
            {
              v82[7] = (unint64_t)v83;
              operator delete(v83);
            }
            v84 = (void *)v82[3];
            if (v84)
            {
              v82[4] = (unint64_t)v84;
              operator delete(v84);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v82 + 1));
            v73 = v82;
            v85 = 2071181815;
LABEL_131:
            v74 = v85 | 0x1030C4000000000;
LABEL_132:
            MEMORY[0x219A19A08](v73, v74);
          }
LABEL_133:
          *(_QWORD *)v68 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v68 = *(_QWORD *)v282;
    *(_QWORD *)(v68 + 5) = *(_QWORD *)&v282[5];
    *((_BYTE *)v67 + 68) = v282[12];
    v282[12] = 0;
  }
  if (v254 < 0)
    operator delete(__p[0]);
  switch(v282[12])
  {
    case 2:
      v98 = *(unint64_t **)v282;
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        v101 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          if (*(char *)(*(_QWORD *)v282 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v282 + 8));
          v102 = v101;
          v103 = 0x1012C404EF22A49;
          goto LABEL_178;
        }
      }
      break;
    case 3:
      v115 = *(unint64_t **)v282;
      do
      {
        v116 = __ldaxr(v115);
        v117 = v116 - 1;
      }
      while (__stlxr(v117, v115));
      if (!v117)
      {
        v118 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          v119 = *(void **)(*(_QWORD *)v282 + 8);
          if (v119)
          {
            *(_QWORD *)(*(_QWORD *)v282 + 16) = v119;
            operator delete(v119);
          }
          v102 = v118;
          v103 = 0x1080C409938AC02;
          goto LABEL_178;
        }
      }
      break;
    case 4:
      v104 = *(unint64_t **)v282;
      do
      {
        v105 = __ldaxr(v104);
        v106 = v105 - 1;
      }
      while (__stlxr(v106, v104));
      if (!v106)
      {
        v107 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          __p[0] = (void *)(*(_QWORD *)v282 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_171;
        }
      }
      break;
    case 5:
      v120 = *(unint64_t **)v282;
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        v107 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          __p[0] = (void *)(*(_QWORD *)v282 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_171:
          v102 = v107;
          v103 = 0x1020C405E66F15BLL;
          goto LABEL_178;
        }
      }
      break;
    case 8:
      v123 = *(unint64_t **)v282;
      do
      {
        v124 = __ldaxr(v123);
        v125 = v124 - 1;
      }
      while (__stlxr(v125, v123));
      if (!v125)
      {
        v126 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v282 + 16));
          v102 = v126;
          v114 = -235920773;
          goto LABEL_177;
        }
      }
      break;
    case 9:
      v108 = *(unint64_t **)v282;
      do
      {
        v109 = __ldaxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
      {
        v111 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          v112 = *(void **)(*(_QWORD *)v282 + 48);
          if (v112)
          {
            *(_QWORD *)(*(_QWORD *)v282 + 56) = v112;
            operator delete(v112);
          }
          v113 = *(void **)(v111 + 24);
          if (v113)
          {
            *(_QWORD *)(v111 + 32) = v113;
            operator delete(v113);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v111 + 8);
          v102 = v111;
          v114 = 2071181815;
LABEL_177:
          v103 = v114 | 0x1030C4000000000;
LABEL_178:
          MEMORY[0x219A19A08](v102, v103);
        }
      }
      break;
    default:
      break;
  }
  v127 = (__int128 **)turi::model_base::list_set_properties((turi::model_base *)v255);
  turi::flexible_type_converter<std::vector<std::string>>::set(v127, (uint64_t)v282);
  std::string::basic_string[abi:ne180100]<0>(__p, "set_properties");
  v281 = __p;
  v128 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v279, (const void **)__p, (uint64_t)std::piecewise_construct, (_OWORD **)&v281);
  v129 = v128;
  v130 = (char *)v128 + 56;
  if (v282 != (char *)v128 + 56)
  {
    switch(*((_BYTE *)v128 + 68))
    {
      case 2:
        v131 = *(unint64_t **)v130;
        do
        {
          v132 = __ldaxr(v131);
          v133 = v132 - 1;
        }
        while (__stlxr(v133, v131));
        if (!v133)
        {
          v134 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          if (*((char *)v134 + 31) < 0)
            operator delete((void *)v134[1]);
          v135 = v134;
          v136 = 0x1012C404EF22A49;
          goto LABEL_221;
        }
        break;
      case 3:
        v148 = *(unint64_t **)v130;
        do
        {
          v149 = __ldaxr(v148);
          v150 = v149 - 1;
        }
        while (__stlxr(v150, v148));
        if (!v150)
        {
          v151 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          v152 = (void *)v151[1];
          if (v152)
          {
            v151[2] = (unint64_t)v152;
            operator delete(v152);
          }
          v135 = v151;
          v136 = 0x1080C409938AC02;
          goto LABEL_221;
        }
        break;
      case 4:
        v137 = *(unint64_t **)v130;
        do
        {
          v138 = __ldaxr(v137);
          v139 = v138 - 1;
        }
        while (__stlxr(v139, v137));
        if (!v139)
        {
          v140 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          v281 = (void **)(v140 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v281);
          goto LABEL_214;
        }
        break;
      case 5:
        v153 = *(unint64_t **)v130;
        do
        {
          v154 = __ldaxr(v153);
          v155 = v154 - 1;
        }
        while (__stlxr(v155, v153));
        if (!v155)
        {
          v140 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          v281 = (void **)(v140 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v281);
LABEL_214:
          v135 = v140;
          v136 = 0x1020C405E66F15BLL;
          goto LABEL_221;
        }
        break;
      case 8:
        v156 = *(unint64_t **)v130;
        do
        {
          v157 = __ldaxr(v156);
          v158 = v157 - 1;
        }
        while (__stlxr(v158, v156));
        if (!v158)
        {
          v159 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          boost::detail::shared_count::~shared_count((unsigned int **)v159 + 2);
          v135 = v159;
          v147 = -235920773;
          goto LABEL_220;
        }
        break;
      case 9:
        v141 = *(unint64_t **)v130;
        do
        {
          v142 = __ldaxr(v141);
          v143 = v142 - 1;
        }
        while (__stlxr(v143, v141));
        if (!v143)
        {
          v144 = *(unint64_t **)v130;
          if (*(_QWORD *)v130)
          {
            v145 = (void *)v144[6];
            if (v145)
            {
              v144[7] = (unint64_t)v145;
              operator delete(v145);
            }
            v146 = (void *)v144[3];
            if (v146)
            {
              v144[4] = (unint64_t)v146;
              operator delete(v146);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v144 + 1));
            v135 = v144;
            v147 = 2071181815;
LABEL_220:
            v136 = v147 | 0x1030C4000000000;
LABEL_221:
            MEMORY[0x219A19A08](v135, v136);
          }
LABEL_222:
          *(_QWORD *)v130 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v130 = *(_QWORD *)v282;
    *(_QWORD *)(v130 + 5) = *(_QWORD *)&v282[5];
    *((_BYTE *)v129 + 68) = v282[12];
    v282[12] = 0;
  }
  if (v254 < 0)
    operator delete(__p[0]);
  switch(v282[12])
  {
    case 2:
      v160 = *(unint64_t **)v282;
      do
      {
        v161 = __ldaxr(v160);
        v162 = v161 - 1;
      }
      while (__stlxr(v162, v160));
      if (!v162)
      {
        v163 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          if (*(char *)(*(_QWORD *)v282 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v282 + 8));
          v164 = v163;
          v165 = 0x1012C404EF22A49;
          goto LABEL_267;
        }
      }
      break;
    case 3:
      v177 = *(unint64_t **)v282;
      do
      {
        v178 = __ldaxr(v177);
        v179 = v178 - 1;
      }
      while (__stlxr(v179, v177));
      if (!v179)
      {
        v180 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          v181 = *(void **)(*(_QWORD *)v282 + 8);
          if (v181)
          {
            *(_QWORD *)(*(_QWORD *)v282 + 16) = v181;
            operator delete(v181);
          }
          v164 = v180;
          v165 = 0x1080C409938AC02;
          goto LABEL_267;
        }
      }
      break;
    case 4:
      v166 = *(unint64_t **)v282;
      do
      {
        v167 = __ldaxr(v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, v166));
      if (!v168)
      {
        v169 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          __p[0] = (void *)(*(_QWORD *)v282 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_260;
        }
      }
      break;
    case 5:
      v182 = *(unint64_t **)v282;
      do
      {
        v183 = __ldaxr(v182);
        v184 = v183 - 1;
      }
      while (__stlxr(v184, v182));
      if (!v184)
      {
        v169 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          __p[0] = (void *)(*(_QWORD *)v282 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_260:
          v164 = v169;
          v165 = 0x1020C405E66F15BLL;
          goto LABEL_267;
        }
      }
      break;
    case 8:
      v185 = *(unint64_t **)v282;
      do
      {
        v186 = __ldaxr(v185);
        v187 = v186 - 1;
      }
      while (__stlxr(v187, v185));
      if (!v187)
      {
        v188 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v282 + 16));
          v164 = v188;
          v176 = -235920773;
          goto LABEL_266;
        }
      }
      break;
    case 9:
      v170 = *(unint64_t **)v282;
      do
      {
        v171 = __ldaxr(v170);
        v172 = v171 - 1;
      }
      while (__stlxr(v172, v170));
      if (!v172)
      {
        v173 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          v174 = *(void **)(*(_QWORD *)v282 + 48);
          if (v174)
          {
            *(_QWORD *)(*(_QWORD *)v282 + 56) = v174;
            operator delete(v174);
          }
          v175 = *(void **)(v173 + 24);
          if (v175)
          {
            *(_QWORD *)(v173 + 32) = v175;
            operator delete(v175);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v173 + 8);
          v164 = v173;
          v176 = 2071181815;
LABEL_266:
          v165 = v176 | 0x1030C4000000000;
LABEL_267:
          MEMORY[0x219A19A08](v164, v165);
        }
      }
      break;
    default:
      break;
  }
  if ((v189 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&turi::proprietary::style_transfer::style_transfer::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/proprietary/src/style_transfer/style_transfer.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::proprietary::style_transfer::style_transfer::uid(void)::_uid, &dword_217E69000);
  }
  turi::flexible_type_converter<std::string>::set(&turi::proprietary::style_transfer::style_transfer::uid(void)::_uid, (uint64_t)v282);
  std::string::basic_string[abi:ne180100]<0>(__p, "uid");
  v281 = __p;
  v190 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v279, (const void **)__p, (uint64_t)std::piecewise_construct, (_OWORD **)&v281);
  v191 = v190;
  v192 = (char *)v190 + 56;
  if (v282 != (char *)v190 + 56)
  {
    switch(*((_BYTE *)v190 + 68))
    {
      case 2:
        v193 = *(unint64_t **)v192;
        do
        {
          v194 = __ldaxr(v193);
          v195 = v194 - 1;
        }
        while (__stlxr(v195, v193));
        if (!v195)
        {
          v196 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          if (*((char *)v196 + 31) < 0)
            operator delete((void *)v196[1]);
          v197 = v196;
          v198 = 0x1012C404EF22A49;
          goto LABEL_311;
        }
        break;
      case 3:
        v210 = *(unint64_t **)v192;
        do
        {
          v211 = __ldaxr(v210);
          v212 = v211 - 1;
        }
        while (__stlxr(v212, v210));
        if (!v212)
        {
          v213 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          v214 = (void *)v213[1];
          if (v214)
          {
            v213[2] = (unint64_t)v214;
            operator delete(v214);
          }
          v197 = v213;
          v198 = 0x1080C409938AC02;
          goto LABEL_311;
        }
        break;
      case 4:
        v199 = *(unint64_t **)v192;
        do
        {
          v200 = __ldaxr(v199);
          v201 = v200 - 1;
        }
        while (__stlxr(v201, v199));
        if (!v201)
        {
          v202 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          v281 = (void **)(v202 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v281);
          goto LABEL_304;
        }
        break;
      case 5:
        v215 = *(unint64_t **)v192;
        do
        {
          v216 = __ldaxr(v215);
          v217 = v216 - 1;
        }
        while (__stlxr(v217, v215));
        if (!v217)
        {
          v202 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          v281 = (void **)(v202 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v281);
LABEL_304:
          v197 = v202;
          v198 = 0x1020C405E66F15BLL;
          goto LABEL_311;
        }
        break;
      case 8:
        v218 = *(unint64_t **)v192;
        do
        {
          v219 = __ldaxr(v218);
          v220 = v219 - 1;
        }
        while (__stlxr(v220, v218));
        if (!v220)
        {
          v221 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          boost::detail::shared_count::~shared_count((unsigned int **)v221 + 2);
          v197 = v221;
          v209 = -235920773;
          goto LABEL_310;
        }
        break;
      case 9:
        v203 = *(unint64_t **)v192;
        do
        {
          v204 = __ldaxr(v203);
          v205 = v204 - 1;
        }
        while (__stlxr(v205, v203));
        if (!v205)
        {
          v206 = *(unint64_t **)v192;
          if (*(_QWORD *)v192)
          {
            v207 = (void *)v206[6];
            if (v207)
            {
              v206[7] = (unint64_t)v207;
              operator delete(v207);
            }
            v208 = (void *)v206[3];
            if (v208)
            {
              v206[4] = (unint64_t)v208;
              operator delete(v208);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v206 + 1));
            v197 = v206;
            v209 = 2071181815;
LABEL_310:
            v198 = v209 | 0x1030C4000000000;
LABEL_311:
            MEMORY[0x219A19A08](v197, v198);
          }
LABEL_312:
          *(_QWORD *)v192 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v192 = *(_QWORD *)v282;
    *(_QWORD *)(v192 + 5) = *(_QWORD *)&v282[5];
    *((_BYTE *)v191 + 68) = v282[12];
    v282[12] = 0;
  }
  if (v254 < 0)
    operator delete(__p[0]);
  switch(v282[12])
  {
    case 2:
      v222 = *(unint64_t **)v282;
      do
      {
        v223 = __ldaxr(v222);
        v224 = v223 - 1;
      }
      while (__stlxr(v224, v222));
      if (!v224)
      {
        v225 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          if (*(char *)(*(_QWORD *)v282 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v282 + 8));
          v226 = v225;
          v227 = 0x1012C404EF22A49;
          goto LABEL_357;
        }
      }
      break;
    case 3:
      v239 = *(unint64_t **)v282;
      do
      {
        v240 = __ldaxr(v239);
        v241 = v240 - 1;
      }
      while (__stlxr(v241, v239));
      if (!v241)
      {
        v242 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          v243 = *(void **)(*(_QWORD *)v282 + 8);
          if (v243)
          {
            *(_QWORD *)(*(_QWORD *)v282 + 16) = v243;
            operator delete(v243);
          }
          v226 = v242;
          v227 = 0x1080C409938AC02;
          goto LABEL_357;
        }
      }
      break;
    case 4:
      v228 = *(unint64_t **)v282;
      do
      {
        v229 = __ldaxr(v228);
        v230 = v229 - 1;
      }
      while (__stlxr(v230, v228));
      if (!v230)
      {
        v231 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          __p[0] = (void *)(*(_QWORD *)v282 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_350;
        }
      }
      break;
    case 5:
      v244 = *(unint64_t **)v282;
      do
      {
        v245 = __ldaxr(v244);
        v246 = v245 - 1;
      }
      while (__stlxr(v246, v244));
      if (!v246)
      {
        v231 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          __p[0] = (void *)(*(_QWORD *)v282 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_350:
          v226 = v231;
          v227 = 0x1020C405E66F15BLL;
          goto LABEL_357;
        }
      }
      break;
    case 8:
      v247 = *(unint64_t **)v282;
      do
      {
        v248 = __ldaxr(v247);
        v249 = v248 - 1;
      }
      while (__stlxr(v249, v247));
      if (!v249)
      {
        v250 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v282 + 16));
          v226 = v250;
          v238 = -235920773;
          goto LABEL_356;
        }
      }
      break;
    case 9:
      v232 = *(unint64_t **)v282;
      do
      {
        v233 = __ldaxr(v232);
        v234 = v233 - 1;
      }
      while (__stlxr(v234, v232));
      if (!v234)
      {
        v235 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          v236 = *(void **)(*(_QWORD *)v282 + 48);
          if (v236)
          {
            *(_QWORD *)(*(_QWORD *)v282 + 56) = v236;
            operator delete(v236);
          }
          v237 = *(void **)(v235 + 24);
          if (v237)
          {
            *(_QWORD *)(v235 + 32) = v237;
            operator delete(v237);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v235 + 8);
          v226 = v235;
          v238 = 2071181815;
LABEL_356:
          v227 = v238 | 0x1030C4000000000;
LABEL_357:
          MEMORY[0x219A19A08](v226, v227);
        }
      }
      break;
    default:
      break;
  }
  v251 = a1[1];
  if (v251 >= a1[2])
  {
    v252 = std::vector<turi::toolkit_class_specification>::__push_back_slow_path<turi::toolkit_class_specification const&>(a1, &v277);
  }
  else
  {
    std::allocator<turi::toolkit_class_specification>::construct[abi:ne180100]<turi::toolkit_class_specification,turi::toolkit_class_specification const&>((_DWORD)a1 + 16, (std::string *)a1[1], &v277);
    v252 = v251 + 56;
    a1[1] = v251 + 56;
  }
  a1[1] = v252;
  v255[0] = off_24D91A7E8;
  if (SHIBYTE(v276) < 0)
    operator delete(v274);
  turi::style_transfer::style_transfer::~style_transfer((turi::style_transfer::style_transfer *)v255);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v279, v280[0]);
  if (SHIBYTE(v278) < 0)
    operator delete((void *)v277);
}

void sub_217F2CB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  turi::proprietary::style_transfer::style_transfer::~style_transfer((void **)&a16);
  turi::toolkit_class_specification::~toolkit_class_specification((turi::toolkit_class_specification *)(v16 - 160));
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::~style_transfer(void **this)
{
  *this = off_24D91A7E8;
  if (*((char *)this + 447) < 0)
    operator delete(this[53]);
  turi::style_transfer::style_transfer::~style_transfer((turi::style_transfer::style_transfer *)this);
}

{
  *this = off_24D91A7E8;
  if (*((char *)this + 447) < 0)
    operator delete(this[53]);
  turi::style_transfer::style_transfer::~style_transfer((turi::style_transfer::style_transfer *)this);
  JUMPOUT(0x219A19A08);
}

double turi::proprietary::style_transfer::get_toolkit_class_registration(void)::$_0::__invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = v0 + 40;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = v0 + 64;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = v0 + 88;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = v0 + 112;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 152) = v0 + 160;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 208) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 200) = v0 + 208;
  *(_QWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = v0 + 232;
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 248) = 0;
  *(_QWORD *)(v0 + 256) = 0;
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 272) = v0 + 280;
  *(_QWORD *)(v0 + 280) = 0;
  *(_QWORD *)(v0 + 304) = 0;
  *(_QWORD *)(v0 + 312) = 0;
  *(_QWORD *)(v0 + 288) = 0;
  *(_QWORD *)(v0 + 296) = v0 + 304;
  result = 0.0;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_OWORD *)(v0 + 400) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  *(_OWORD *)(v0 + 368) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_OWORD *)(v0 + 336) = 0u;
  *(_QWORD *)v0 = off_24D91A7E8;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 416) = 0;
  *(_QWORD *)(v0 + 424) = 0;
  *(_QWORD *)(v0 + 432) = 0;
  *(_QWORD *)(v0 + 440) = 0;
  return result;
}

void turi::style_transfer::style_transfer::~style_transfer(turi::style_transfer::style_transfer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = &unk_24D945EE8;
  std::unique_ptr<turi::table_printer>::reset[abi:ne180100]((turi::table_printer **)this + 52, 0);
  v2 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100]((turi::neural_net::model_spec **)this + 48, 0);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100]((turi::neural_net::model_spec **)this + 47, 0);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  v5 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &unk_24D918858;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 296, *((char **)this + 38));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  v6 = (void **)((char *)this + 248);
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 224, *((char **)this + 29));
  turi::model_base::~model_base(this);
}

{
  turi::style_transfer::style_transfer::~style_transfer(this);
  JUMPOUT(0x219A19A08);
}

void sub_217F2D3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_1()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_2()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::proprietary::style_transfer::style_transfer::init_training(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  turi::flexible_type_impl *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::string *v12;
  BOOL v13;
  int data;
  int v15;
  __CFString *v17;
  uint64_t v18;
  char *v20;
  uint64_t *v21;
  void *v22;
  void **v23;
  void *v24;
  void *v25;
  void **v26;
  void *v27;
  uint64_t v28;
  turi::flexible_type_impl *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  std::runtime_error *exception;
  std::string *v76;
  __int128 v77;
  std::runtime_error *v78;
  std::string *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  __int128 v88;
  __int128 v89;
  std::runtime_error *v90;
  std::string *v91;
  __int128 v92;
  void *context;
  id v96;
  uint64_t *v97;
  _QWORD *v98;
  _BYTE v100[40];
  _BYTE v101[40];
  uint64_t v102;
  int v103;
  void *v104[2];
  char v105;
  void *v106[2];
  char v107;
  std::string v108;
  _BYTE v109[32];
  __int128 v110;
  __int128 v111;
  _QWORD v112[3];
  _QWORD v113[2];
  uint64_t v114;
  _QWORD v115[3];
  std::string v116;
  std::string __idx;
  size_t v118;
  void *__p[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  void *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  char v128;
  uint64_t v129[3];
  int v130;
  uint64_t v131;
  int v132;
  char v133;
  uint64_t v134[3];
  int v135;
  uint64_t v136;
  int v137;
  char v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x219A19FE4]();
  std::string::basic_string[abi:ne180100]<0>(__p, "algorithm");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a4, (const void **)__p);
  if (SBYTE7(v120) < 0)
    operator delete(__p[0]);
  v7 = (_QWORD *)(a4 + 8);
  if (a4 + 8 == v6)
    turi::proprietary::style_transfer::style_transfer::init_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  v8 = (turi::flexible_type_impl *)(v6 + 56);
  switch(*(_BYTE *)(v6 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_13;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_13:
      __p[0] = *(void **)MEMORY[0x24BEDB7F0];
      v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      *(_QWORD *)&v120 = v11;
      *((_QWORD *)&v120 + 1) = MEMORY[0x24BEDB848] + 16;
      if (SHIBYTE(v124) < 0)
        operator delete(v123);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v125);
      break;
    case 2:
      v9 = *(_QWORD *)v8;
      if (*(char *)(*(_QWORD *)v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
      }
      else
      {
        v10 = *(_OWORD *)(v9 + 8);
        v108.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
        *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v10;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v8 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v8 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v8 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v8, &v108);
      break;
    case 7:
      memset(&v108, 0, sizeof(v108));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v8 + 8));
      break;
    default:
      turi::apply_binary_op_ff();
  }
  if ((*((_BYTE *)&v108.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v108.__r_.__value_.__l.__size_ != 3
      || (*(_WORD *)v108.__r_.__value_.__l.__data_ == 28259
        ? (v13 = *(_BYTE *)(v108.__r_.__value_.__r.__words[0] + 2) == 110)
        : (v13 = 0),
          !v13))
    {
      if (v108.__r_.__value_.__l.__size_ != 7)
        goto LABEL_189;
      v12 = (std::string *)v108.__r_.__value_.__r.__words[0];
      goto LABEL_31;
    }
LABEL_42:
    v18 = 0;
    v17 = CFSTR("maml-image");
    goto LABEL_43;
  }
  if (HIBYTE(v108.__r_.__value_.__r.__words[2]) == 3)
  {
    if (LOWORD(v108.__r_.__value_.__l.__data_) != 28259 || v108.__r_.__value_.__s.__data_[2] != 110)
LABEL_189:
      turi::proprietary::style_transfer::style_transfer::init_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_1::operator()();
    goto LABEL_42;
  }
  if (HIBYTE(v108.__r_.__value_.__r.__words[2]) != 7)
    goto LABEL_189;
  v12 = &v108;
LABEL_31:
  data = (int)v12->__r_.__value_.__l.__data_;
  v15 = *(_DWORD *)((char *)v12->__r_.__value_.__r.__words + 3);
  if (data != 1282305635 || v15 != 1702127948)
    goto LABEL_189;
  v17 = CFSTR("maml-video-light");
  v18 = 1;
LABEL_43:
  v20 = (char *)-[__CFString UTF8String](v17, "UTF8String");
  std::string::basic_string[abi:ne180100]<0>(__p, "model");
  *(_QWORD *)v109 = __p;
  v21 = (uint64_t *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v109);
  turi::flexible_type::operator=(v21 + 7, v20);
  if (SBYTE7(v120) < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a4, (uint64_t *)v6);
  std::pair<std::string const,turi::flexible_type>::~pair(v6 + 32);
  operator delete((void *)v6);
  v22 = (void *)MEMORY[0x24BDD17C8];
  std::string::basic_string[abi:ne180100]<0>(v106, (char *)-[__CFString UTF8String](v17, "UTF8String"));
  turi::proprietary::style_transfer::style_transfer::get_mlmodel((const std::string::value_type *)v106, __p);
  if ((SBYTE7(v120) & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  objc_msgSend(v22, "stringWithUTF8String:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v120) < 0)
    operator delete(__p[0]);
  if (v107 < 0)
  {
    operator delete(v106[0]);
    if (!v24)
      goto LABEL_55;
    goto LABEL_54;
  }
  if (v24)
  {
LABEL_54:
    __p[0] = (void *)objc_msgSend(objc_retainAutorelease(v24), "UTF8String");
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[20],char const*>((uint64_t **)a4, "resnet_mlmodel_path", (char **)__p);
    LOBYTE(__p[0]) = 1;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[19],BOOL>((uint64_t **)a4, "pretrained_weights", (unsigned __int8 *)__p);
  }
LABEL_55:
  v25 = (void *)MEMORY[0x24BDD17C8];
  std::string::basic_string[abi:ne180100]<0>(v104, (char *)objc_msgSend(CFSTR("vgg16-397923af"), "UTF8String"));
  turi::proprietary::style_transfer::style_transfer::get_mlmodel((const std::string::value_type *)v104, __p);
  if ((SBYTE7(v120) & 0x80u) == 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  objc_msgSend(v25, "stringWithUTF8String:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v120) < 0)
    operator delete(__p[0]);
  if (v105 < 0)
    operator delete(v104[0]);
  if (!v27)
    turi::proprietary::style_transfer::style_transfer::init_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_2::operator()();
  v96 = objc_retainAutorelease(v27);
  __p[0] = (void *)objc_msgSend(v96, "UTF8String");
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[20],char const*>((uint64_t **)a4, "vgg_mlmodel_path", (char **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "device_policy");
  v28 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a4, (const void **)__p);
  if (SBYTE7(v120) < 0)
    operator delete(__p[0]);
  if (v7 != (_QWORD *)v28)
  {
    v29 = (turi::flexible_type_impl *)(v28 + 56);
    switch(*(_BYTE *)(v28 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_75;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_75:
        __p[0] = *(void **)MEMORY[0x24BEDB7F0];
        v32 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
        *(_QWORD *)&v120 = v32;
        *((_QWORD *)&v120 + 1) = MEMORY[0x24BEDB848] + 16;
        if (SHIBYTE(v124) < 0)
          operator delete(v123);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v125);
        goto LABEL_82;
      case 2:
        v30 = *(_QWORD *)v29;
        if (*(char *)(*(_QWORD *)v29 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v109, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
        }
        else
        {
          v31 = *(_OWORD *)(v30 + 8);
          *(_QWORD *)&v109[16] = *(_QWORD *)(v30 + 24);
          *(_OWORD *)v109 = v31;
        }
        goto LABEL_82;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v29 + 8));
        goto LABEL_82;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v29 + 8));
        goto LABEL_82;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v29 + 8));
        goto LABEL_82;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v29, (std::string *)v109);
        goto LABEL_82;
      case 7:
        memset(v109, 0, 24);
        goto LABEL_82;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_82;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v29 + 8));
LABEL_82:
        v33 = (void **)(a1 + 424);
        if (*(char *)(a1 + 447) < 0)
          operator delete(*v33);
        *(_OWORD *)v33 = *(_OWORD *)v109;
        *(_QWORD *)(a1 + 440) = *(_QWORD *)&v109[16];
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a4, (uint64_t *)v28);
        std::pair<std::string const,turi::flexible_type>::~pair(v28 + 32);
        operator delete((void *)v28);
        break;
      default:
        turi::flexible_type_fail(0);
        goto LABEL_209;
    }
  }
  v103 = 1;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[11],int &>((uint64_t **)a4, "num_styles", &v103);
  std::string::basic_string[abi:ne180100]<0>(__p, "style_strength");
  v34 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a4, (const void **)__p);
  if (SBYTE7(v120) < 0)
    operator delete(__p[0]);
  if (v7 == (_QWORD *)v34)
    turi::proprietary::style_transfer::style_transfer::init_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_3::operator()();
  v35 = 0;
  switch(*(_BYTE *)(v34 + 68))
  {
    case 0:
      v35 = *(_QWORD *)(v34 + 56);
      goto LABEL_116;
    case 1:
      v35 = (uint64_t)*(double *)(v34 + 56);
      goto LABEL_116;
    case 2:
      v40 = *(_QWORD *)(v34 + 56);
      __idx.__r_.__value_.__r.__words[0] = 0;
      v41 = (char *)(v40 + 8);
      if (*(char *)(v40 + 31) < 0)
        v41 = *(char **)(v40 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v41);
      v35 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
      if (SBYTE7(v120) < 0)
        operator delete(__p[0]);
      if (*(char *)(v40 + 31) < 0)
        v42 = *(_QWORD *)(v40 + 16);
      else
        v42 = *(unsigned __int8 *)(v40 + 31);
      if (__idx.__r_.__value_.__r.__words[0] != v42)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v76 = std::string::append((std::string *)v109, " cannot be interpreted as an integer");
        v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        *(_QWORD *)&v120 = *((_QWORD *)&v76->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_116;
    case 3:
      v36 = *(_QWORD *)(v34 + 56);
      __p[1] = 0;
      *(_QWORD *)&v120 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v36 + 8), *(_QWORD *)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_115;
    case 4:
      v43 = *(_QWORD *)(v34 + 56);
      __p[1] = 0;
      *(_QWORD *)&v120 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(_QWORD *)(v43 + 16) - *(_QWORD *)(v43 + 8)) >> 4);
      turi::flexible_type_fail(0);
      *(_QWORD *)v109 = __p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
      goto LABEL_115;
    case 5:
      v44 = *(_QWORD *)(v34 + 56);
      __p[1] = 0;
      *(_QWORD *)&v120 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 5);
      turi::flexible_type_fail(0);
      *(_QWORD *)v109 = __p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
      goto LABEL_115;
    case 6:
      v35 = (uint64_t)(*(_QWORD *)(v34 + 56) << 8) >> 8;
      goto LABEL_116;
    case 7:
      goto LABEL_116;
    case 8:
      v45 = *(_QWORD *)(v34 + 56);
      v46 = *(unsigned int **)(v45 + 16);
      __p[0] = *(void **)(v45 + 8);
      __p[1] = v46;
      if (v46)
      {
        v47 = v46 + 2;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = *(_OWORD *)(v45 + 24);
      v50 = *(_OWORD *)(v45 + 56);
      v121 = *(_OWORD *)(v45 + 40);
      v122 = v50;
      v120 = v49;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_115;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)(v34 + 56) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v121 + 1))
      {
        *(_QWORD *)&v122 = *((_QWORD *)&v121 + 1);
        operator delete(*((void **)&v121 + 1));
      }
      if ((_QWORD)v120)
      {
        *((_QWORD *)&v120 + 1) = v120;
        operator delete((void *)v120);
      }
      v37 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v38 = (unint64_t *)((char *)__p[1] + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
LABEL_115:
      v35 = 0;
LABEL_116:
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a4, (uint64_t *)v34);
      std::pair<std::string const,turi::flexible_type>::~pair(v34 + 32);
      operator delete((void *)v34);
      std::string::basic_string[abi:ne180100]<0>(__p, "textel_density");
      v51 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a4, (const void **)__p);
      if (SBYTE7(v120) < 0)
        operator delete(__p[0]);
      if (v7 != (_QWORD *)v51)
      {
        v102 = 0;
        switch(*(_BYTE *)(v51 + 68))
        {
          case 0:
            v52 = *(_QWORD *)(v51 + 56);
            goto LABEL_131;
          case 1:
            v52 = (uint64_t)*(double *)(v51 + 56);
            goto LABEL_131;
          case 2:
            v53 = *(_QWORD *)(v51 + 56);
            v118 = 0;
            v54 = (char *)(v53 + 8);
            if (*(char *)(v53 + 31) < 0)
              v54 = *(char **)(v53 + 8);
            std::string::basic_string[abi:ne180100]<0>(&__idx, v54);
            v52 = std::stoll(&__idx, &v118, 10);
            if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__idx.__r_.__value_.__l.__data_);
            if (*(char *)(v53 + 31) < 0)
              v55 = *(_QWORD *)(v53 + 16);
            else
              v55 = *(unsigned __int8 *)(v53 + 31);
            if (v118 != v55)
            {
              v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v91 = std::string::append(&v116, " cannot be interpreted as an integer");
              v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
              __idx.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v92;
              v91->__r_.__value_.__l.__size_ = 0;
              v91->__r_.__value_.__r.__words[2] = 0;
              v91->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v90, &__idx);
              __cxa_throw(v90, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_131;
          case 3:
            v83 = *(_QWORD *)(v51 + 56);
            memset(v115, 0, sizeof(v115));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v115, *(const void **)(v83 + 8), *(_QWORD *)(v83 + 16), (uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)(v83 + 8)) >> 3);
            turi::flexible_type_fail(0);
            turi::proprietary::style_transfer::style_transfer::init_training((uint64_t)v115);
            goto LABEL_203;
          case 4:
            v82 = *(_QWORD *)(v51 + 56);
            v113[1] = 0;
            v114 = 0;
            v113[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v113, *(uint64_t **)(v82 + 8), *(uint64_t **)(v82 + 16), (uint64_t)(*(_QWORD *)(v82 + 16) - *(_QWORD *)(v82 + 8)) >> 4);
            turi::flexible_type_fail(0);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
            goto LABEL_203;
          case 5:
            v81 = *(_QWORD *)(v51 + 56);
            memset(v112, 0, sizeof(v112));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v112, *(uint64_t **)(v81 + 8), *(uint64_t **)(v81 + 16), (uint64_t)(*(_QWORD *)(v81 + 16) - *(_QWORD *)(v81 + 8)) >> 5);
            turi::flexible_type_fail(0);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
            goto LABEL_203;
          case 6:
            v52 = (uint64_t)(*(_QWORD *)(v51 + 56) << 8) >> 8;
LABEL_131:
            v102 = v52;
            if ((unint64_t)(v52 - 1025) <= 0xFFFFFFFFFFFFFC3ELL)
              goto LABEL_204;
            std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[13],unsigned long &>((uint64_t **)a4, "image_height", &v102);
            std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[13],unsigned long &>((uint64_t **)a4, "image_width", &v102);
            std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a4, (uint64_t *)v51);
            std::pair<std::string const,turi::flexible_type>::~pair(v51 + 32);
            operator delete((void *)v51);
            std::string::basic_string[abi:ne180100]<0>(__p, "reporting_interval");
            v56 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a4, (const void **)__p);
            if (SBYTE7(v120) < 0)
              operator delete(__p[0]);
            if (v7 == (_QWORD *)v56)
            {
              v57 = 10;
            }
            else
            {
              switch(*(_BYTE *)(v56 + 68))
              {
                case 0:
                  if (!*(_QWORD *)(v56 + 56))
                    goto LABEL_145;
                  goto LABEL_136;
                case 1:
                  if (*(double *)(v56 + 56) == 0.0)
                    goto LABEL_145;
                  goto LABEL_136;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_136;
                case 6:
                  if ((*(_QWORD *)(v56 + 56) & 0xFFFFFFFFFFFFFFLL) != 0 || *(_DWORD *)(v56 + 64))
                  {
LABEL_136:
                    v57 = 0;
                    switch(*(_BYTE *)(v56 + 68))
                    {
                      case 0:
                        v57 = *(_QWORD *)(v56 + 56);
                        goto LABEL_172;
                      case 1:
                        v57 = (uint64_t)*(double *)(v56 + 56);
                        goto LABEL_172;
                      case 2:
                        v62 = *(_QWORD *)(v56 + 56);
                        __idx.__r_.__value_.__r.__words[0] = 0;
                        v63 = (char *)(v62 + 8);
                        if (*(char *)(v62 + 31) < 0)
                          v63 = *(char **)(v62 + 8);
                        std::string::basic_string[abi:ne180100]<0>(__p, v63);
                        v57 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
                        if (SBYTE7(v120) < 0)
                          operator delete(__p[0]);
                        if (*(char *)(v62 + 31) < 0)
                          v64 = *(_QWORD *)(v62 + 16);
                        else
                          v64 = *(unsigned __int8 *)(v62 + 31);
                        if (__idx.__r_.__value_.__r.__words[0] != v64)
                        {
                          v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::operator+<char>();
                          v79 = std::string::append((std::string *)v109, " cannot be interpreted as an integer");
                          v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
                          *(_QWORD *)&v120 = *((_QWORD *)&v79->__r_.__value_.__l + 2);
                          *(_OWORD *)__p = v80;
                          v79->__r_.__value_.__l.__size_ = 0;
                          v79->__r_.__value_.__r.__words[2] = 0;
                          v79->__r_.__value_.__r.__words[0] = 0;
                          std::runtime_error::runtime_error(v78, (const std::string *)__p);
                          __cxa_throw(v78, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                        }
                        goto LABEL_172;
                      case 3:
                        v58 = *(_QWORD *)(v56 + 56);
                        __p[1] = 0;
                        *(_QWORD *)&v120 = 0;
                        __p[0] = 0;
                        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v58 + 8), *(_QWORD *)(v58 + 16), (uint64_t)(*(_QWORD *)(v58 + 16) - *(_QWORD *)(v58 + 8)) >> 3);
                        turi::flexible_type_fail(0);
                        if (__p[0])
                        {
                          __p[1] = __p[0];
                          operator delete(__p[0]);
                        }
                        break;
                      case 4:
                        v65 = *(_QWORD *)(v56 + 56);
                        __p[1] = 0;
                        *(_QWORD *)&v120 = 0;
                        __p[0] = 0;
                        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v65 + 8), *(uint64_t **)(v65 + 16), (uint64_t)(*(_QWORD *)(v65 + 16) - *(_QWORD *)(v65 + 8)) >> 4);
                        turi::flexible_type_fail(0);
                        *(_QWORD *)v109 = __p;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
                        break;
                      case 5:
                        v66 = *(_QWORD *)(v56 + 56);
                        __p[1] = 0;
                        *(_QWORD *)&v120 = 0;
                        __p[0] = 0;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v66 + 8), *(uint64_t **)(v66 + 16), (uint64_t)(*(_QWORD *)(v66 + 16) - *(_QWORD *)(v66 + 8)) >> 5);
                        turi::flexible_type_fail(0);
                        *(_QWORD *)v109 = __p;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
                        break;
                      case 6:
                        v57 = (uint64_t)(*(_QWORD *)(v56 + 56) << 8) >> 8;
                        goto LABEL_172;
                      case 7:
                        goto LABEL_172;
                      case 8:
                        v67 = *(_QWORD *)(v56 + 56);
                        v68 = *(unsigned int **)(v67 + 16);
                        __p[0] = *(void **)(v67 + 8);
                        __p[1] = v68;
                        if (v68)
                        {
                          v69 = v68 + 2;
                          do
                            v70 = __ldxr(v69);
                          while (__stxr(v70 + 1, v69));
                        }
                        v71 = *(_OWORD *)(v67 + 24);
                        v72 = *(_OWORD *)(v67 + 56);
                        v121 = *(_OWORD *)(v67 + 40);
                        v122 = v72;
                        v120 = v71;
                        turi::flexible_type_fail(0);
                        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
                        break;
                      case 9:
                        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)(v56 + 56) + 8);
                        turi::flexible_type_fail(0);
                        if (*((_QWORD *)&v121 + 1))
                        {
                          *(_QWORD *)&v122 = *((_QWORD *)&v121 + 1);
                          operator delete(*((void **)&v121 + 1));
                        }
                        if ((_QWORD)v120)
                        {
                          *((_QWORD *)&v120 + 1) = v120;
                          operator delete((void *)v120);
                        }
                        v59 = (std::__shared_weak_count *)__p[1];
                        if (__p[1])
                        {
                          v60 = (unint64_t *)((char *)__p[1] + 8);
                          do
                            v61 = __ldaxr(v60);
                          while (__stlxr(v61 - 1, v60));
                          if (!v61)
                          {
                            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                            std::__shared_weak_count::__release_weak(v59);
                          }
                        }
                        break;
                      default:
                        goto LABEL_208;
                    }
                    v57 = 0;
                  }
                  else
                  {
LABEL_145:
                    v57 = 10;
                  }
LABEL_172:
                  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a4, (uint64_t *)v56);
                  std::pair<std::string const,turi::flexible_type>::~pair(v56 + 32);
                  operator delete((void *)v56);
                  break;
                default:
LABEL_208:
                  turi::flexible_type_fail(0);
                  goto LABEL_209;
              }
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "algorithm");
            *(_QWORD *)&v121 = v18;
            DWORD2(v121) = 0;
            BYTE12(v121) = 0;
            DWORD2(v120) = 0;
            std::string::basic_string[abi:ne180100]<0>(&v124, "style_strength");
            v126 = v35;
            v127 = 0;
            v128 = 0;
            v125 = 0;
            std::string::basic_string[abi:ne180100]<0>(v129, "textel_density");
            v131 = v102;
            v132 = 0;
            v133 = 0;
            v130 = 0;
            std::string::basic_string[abi:ne180100]<0>(v134, "reporting_interval");
            v136 = v57;
            v137 = 0;
            v138 = 0;
            v135 = 0;
            std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v109, (const void **)__p, 4);
            turi::ml_model_base::add_or_update_state(a1, v109);
            std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v109, *(char **)&v109[8]);
            v73 = 52;
            do
            {
              boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v115[v73]);
              if (*((char *)&v114 + v73 * 8 + 7) < 0)
                operator delete((void *)v113[v73]);
              v73 -= 13;
            }
            while (v73 * 8);
            turi::gl_sarray::gl_sarray(v101, a2);
            turi::gl_sarray::gl_sarray(v100, a3);
            v74 = *(_QWORD **)(a4 + 8);
            v97 = *(uint64_t **)a4;
            v98 = v74;
            if (*(_QWORD *)(a4 + 16))
            {
              v74[2] = &v98;
              *(_QWORD *)a4 = v7;
              *v7 = 0;
              *(_QWORD *)(a4 + 16) = 0;
            }
            else
            {
              v97 = (uint64_t *)&v98;
            }
            turi::style_transfer::style_transfer::init_training((turi::ml_model_base *)a1, (const turi::gl_sarray *)v101, (turi::gl_sarray *)v100, &v97);
            std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v97, v98);
            turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v100);
            turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v101);

            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
            objc_autoreleasePoolPop(context);
            return;
          case 7:
            goto LABEL_203;
          case 8:
            v84 = *(_QWORD *)(v51 + 56);
            v85 = *(_QWORD *)(v84 + 16);
            *(_QWORD *)v109 = *(_QWORD *)(v84 + 8);
            *(_QWORD *)&v109[8] = v85;
            if (v85)
            {
              v86 = (unsigned int *)(v85 + 8);
              do
                v87 = __ldxr(v86);
              while (__stxr(v87 + 1, v86));
            }
            v88 = *(_OWORD *)(v84 + 24);
            v89 = *(_OWORD *)(v84 + 56);
            v110 = *(_OWORD *)(v84 + 40);
            v111 = v89;
            *(_OWORD *)&v109[16] = v88;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&v109[8]);
            goto LABEL_203;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)(v51 + 56) + 8);
            turi::flexible_type_fail(0);
            turi::proprietary::style_transfer::style_transfer::init_training(__p);
LABEL_203:
            v102 = 0;
LABEL_204:
            turi::proprietary::style_transfer::style_transfer::init_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_5::operator()();
          default:
            goto LABEL_197;
        }
      }
      turi::proprietary::style_transfer::style_transfer::init_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_4::operator()();
    default:
LABEL_197:
      turi::flexible_type_fail(0);
      break;
  }
LABEL_209:
  __break(1u);
}

void sub_217F2E7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  void *v72;
  int v73;
  void *v74;

  if (a72 < 0)
    operator delete(__p);
  if (a47 < 0)
  {
    operator delete(a42);
    if ((v73 & 1) == 0)
    {
LABEL_8:

      if (a40 < 0)
        operator delete(a35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v74);
  goto LABEL_8;
}

uint64_t *turi::flexible_type::operator=(uint64_t *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  turi::flexible_type::operator=<std::string>(a1, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_217F2EBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::proprietary::style_transfer::style_transfer::get_mlmodel(const std::string::value_type *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  size_t v10;
  std::string *v11;
  void **v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  std::string v21;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  char v25;

  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.TuriCore"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  v5 = (uint64_t *)a1;
  if (a1[23] < 0)
    v5 = *(uint64_t **)a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "pathForResource:ofType:", v6, CFSTR("mlmodel"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "fileExistsAtPath:", v7);

  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"));
    goto LABEL_29;
  }
  turi::proprietary::style_transfer::style_transfer::request_assets((uint64_t)v24, __p);
  if (v25 < 0)
  {
    if (!v24[1])
      goto LABEL_7;
LABEL_33:
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    turi::proprietary::style_transfer::style_transfer::get_mlmodel(std::string)const::$_0::operator()((const std::string **)&v21);
  }
  if (v25)
    goto LABEL_33;
LABEL_7:
  if ((v23 & 0x80u) == 0)
    v10 = v23;
  else
    v10 = (size_t)__p[1];
  v11 = &v20;
  std::string::basic_string[abi:ne180100]((uint64_t)&v20, v10 + 1);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if ((v23 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
  v13 = a1[23];
  if (v13 >= 0)
    v14 = a1;
  else
    v14 = *(const std::string::value_type **)a1;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a1 + 23);
  else
    v15 = *((_QWORD *)a1 + 1);
  v16 = std::string::append(&v20, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v21, ".mlmodel");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if ((char)v23 < 0)
    operator delete(__p[0]);
LABEL_29:

  if (v25 < 0)
    operator delete(v24[0]);

}

void sub_217F2EE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);

  if (a33 < 0)
    operator delete(a28);

  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::resume_training(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  void **v10;
  void *v11;
  id v12;
  void *v13;
  void **v14;
  void *v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  turi::flexible_type_impl *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  _BYTE v30[40];
  _BYTE v31[40];
  std::string v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *__p[2];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;

  v8 = (void *)MEMORY[0x219A19FE4]();
  v9 = (void *)MEMORY[0x24BDD17C8];
  std::string::basic_string[abi:ne180100]<0>(v35, (char *)objc_msgSend(CFSTR("vgg16-397923af"), "UTF8String"));
  turi::proprietary::style_transfer::style_transfer::get_mlmodel((const std::string::value_type *)v35, __p);
  if (v38 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  objc_msgSend(v9, "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  if (!v11)
    turi::proprietary::style_transfer::style_transfer::resume_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  v12 = objc_retainAutorelease(v11);
  __p[0] = (void *)objc_msgSend(v12, "UTF8String");
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[20],char const*>((uint64_t **)a4, "vgg_mlmodel_path", (char **)__p);
  v13 = (void *)MEMORY[0x24BDD17C8];
  std::string::basic_string[abi:ne180100]<0>(v33, (char *)objc_msgSend(CFSTR("resnet-16"), "UTF8String"));
  turi::proprietary::style_transfer::style_transfer::get_mlmodel((const std::string::value_type *)v33, __p);
  if (v38 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  objc_msgSend(v13, "stringWithUTF8String:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (!v15)
    turi::proprietary::style_transfer::style_transfer::resume_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_1::operator()();
  v16 = objc_retainAutorelease(v12);
  __p[0] = (void *)objc_msgSend(v16, "UTF8String");
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[20],char const*>((uint64_t **)a4, "resnet_mlmodel_path", (char **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "device_policy");
  v17 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a4, (const void **)__p);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  v18 = (_QWORD *)(a4 + 8);
  if (a4 + 8 != v17)
  {
    v19 = (turi::flexible_type_impl *)(v17 + 56);
    v26 = a3;
    switch(*(_BYTE *)(v17 + 68))
    {
      case 0:
        v20 = v8;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_29;
      case 1:
        v20 = v8;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_29:
        __p[0] = *(void **)MEMORY[0x24BEDB7F0];
        v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
        v38 = v23;
        v39 = MEMORY[0x24BEDB848] + 16;
        if (v41 < 0)
          operator delete(v40);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v42);
        goto LABEL_36;
      case 2:
        v20 = v8;
        v21 = *(_QWORD *)v19;
        if (*(char *)(*(_QWORD *)v19 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v21 + 8), *(_QWORD *)(v21 + 16));
        }
        else
        {
          v22 = *(_OWORD *)(v21 + 8);
          v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 24);
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v22;
        }
        goto LABEL_36;
      case 3:
        v20 = v8;
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v19 + 8));
        goto LABEL_36;
      case 4:
        v20 = v8;
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v19 + 8));
        goto LABEL_36;
      case 5:
        v20 = v8;
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v19 + 8));
        goto LABEL_36;
      case 6:
        v20 = v8;
        turi::flexible_type_impl::get_string_visitor::operator()(v19, &v32);
        goto LABEL_36;
      case 7:
        v20 = v8;
        memset(&v32, 0, sizeof(v32));
        goto LABEL_36;
      case 8:
        v20 = v8;
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_36;
      case 9:
        v20 = v8;
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v19 + 8));
LABEL_36:
        v24 = (void **)(a1 + 424);
        if (*(char *)(a1 + 447) < 0)
          operator delete(*v24);
        *(_OWORD *)v24 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 440) = *((_QWORD *)&v32.__r_.__value_.__l + 2);
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a4, (uint64_t *)v17);
        std::pair<std::string const,turi::flexible_type>::~pair(v17 + 32);
        operator delete((void *)v17);
        v8 = v20;
        a3 = v26;
        break;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
  turi::gl_sarray::gl_sarray(v31, a2);
  turi::gl_sarray::gl_sarray(v30, a3);
  v25 = *(_QWORD **)(a4 + 8);
  v27 = *(uint64_t **)a4;
  v28 = v25;
  if (*(_QWORD *)(a4 + 16))
  {
    v25[2] = &v28;
    *(_QWORD *)a4 = v18;
    *v18 = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    v27 = (uint64_t *)&v28;
  }
  turi::style_transfer::style_transfer::resume_training((turi::style_transfer::style_transfer *)a1, (uint64_t)v31, (uint64_t)v30, (uint64_t)&v27);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v27, v28);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v30);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v31);

  objc_autoreleasePoolPop(v8);
}

void sub_217F2F380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  void *v45;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void sub_217F2F468()
{
  JUMPOUT(0x217F2F460);
}

void turi::proprietary::style_transfer::style_transfer::create_compute_context(turi::proprietary::style_transfer::style_transfer *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  turi::proprietary::neural_net::mlc_internal_compute_context *v10;
  MLCDevice *v11;

  v4 = (void *)MEMORY[0x219A19FE4]();
  v5 = (_QWORD *)((char *)this + 424);
  if (*((char *)this + 447) < 0)
    v5 = (_QWORD *)*v5;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = DevicePolicyFromString(v6);

  +[TCComputeDeviceManager sharedInstance](TCComputeDeviceManager, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "defaultDevice");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "asMLCDevice:", v7);
  v11 = (MLCDevice *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    objc_msgSend(MEMORY[0x24BDDAAC8], "deviceWithType:", 2);
    v11 = (MLCDevice *)objc_claimAutoreleasedReturnValue();
  }
  std::make_unique<turi::proprietary::neural_net::mlc_internal_compute_context,MLCDevice * {__strong}&>(&v11, &v10);
  *a2 = v10;

  objc_autoreleasePoolPop(v4);
}

void sub_217F2F55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

turi::neural_net::mlc_compute_context *std::make_unique<turi::proprietary::neural_net::mlc_internal_compute_context,MLCDevice * {__strong}&>@<X0>(MLCDevice **a1@<X0>, turi::proprietary::neural_net::mlc_internal_compute_context **a2@<X8>)
{
  turi::proprietary::neural_net::mlc_internal_compute_context *v4;
  turi::neural_net::mlc_compute_context *result;

  v4 = (turi::proprietary::neural_net::mlc_internal_compute_context *)operator new();
  result = turi::proprietary::neural_net::mlc_internal_compute_context::mlc_internal_compute_context(v4, *a1);
  *a2 = v4;
  return result;
}

void sub_217F2F5E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x81C40803F642BLL);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::load_checkpoint(turi::ml_model_base *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *v6;
  void *v7;
  void *v8;
  id v9;
  void **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v16[3];
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v22[2];
  char v23;
  void *__p[2];
  char v25;
  const void *v26[2];
  char v27;
  std::string v28;

  std::string::basic_string[abi:ne180100]<0>(v26, "model");
  turi::style_transfer::style_transfer::read_state<std::string>(a1, v26, &v28);
  if (v27 < 0)
    operator delete((void *)v26[0]);
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v28;
  else
    v6 = (std::string *)v28.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x24BDD17C8];
  v9 = objc_retainAutorelease(v7);
  std::string::basic_string[abi:ne180100]<0>(v22, (char *)objc_msgSend(v9, "UTF8String"));
  turi::proprietary::style_transfer::style_transfer::get_mlmodel((const std::string::value_type *)v22, __p);
  if (v25 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  objc_msgSend(v8, "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v25 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
  {
    operator delete(v22[0]);
    if (v11)
      goto LABEL_13;
  }
  else if (v11)
  {
LABEL_13:
    turi::style_transfer::style_transfer::get_config(a1, (uint64_t)__p);
    v17 = (char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
    turi::proprietary::style_transfer::style_transfer::get_config_options(a1, (uint64_t)v16);
    std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config,char const*,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array>>((__int128 *)__p, &v17, a2, v16, &v18);
    *a3 = v18;
    v18 = 0;
    v12 = (_QWORD *)v16[1];
    v13 = v16;
    goto LABEL_19;
  }
  v14 = a2 + 1;
  v15 = (_QWORD *)a2[1];
  v19 = (_QWORD *)*a2;
  v20 = v15;
  if (a2[2])
  {
    v15[2] = &v20;
    *a2 = v14;
    *v14 = 0;
    a2[2] = 0;
  }
  else
  {
    v19 = &v20;
  }
  turi::style_transfer::style_transfer::load_checkpoint(a1, &v19, a3);
  v12 = v20;
  v13 = &v19;
LABEL_19:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v13, v12);

  if (v27 < 0)
    operator delete((void *)v26[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_217F2F7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a14, a15);

  if (*(char *)(v29 - 73) < 0)
    operator delete(*(void **)(v29 - 96));
  if (*(char *)(v29 - 49) < 0)
    operator delete(*(void **)(v29 - 72));
  _Unwind_Resume(a1);
}

std::string *turi::style_transfer::style_transfer::read_state<std::string>@<X0>(turi::ml_model_base *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t state;
  int *v6;

  state = turi::ml_model_base::get_state(a1);
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(state, a2);
  return turi::variant_converter<std::string,void>::get(v6, a3);
}

void std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config,char const*,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array>>(__int128 *a1@<X0>, char **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD **v15;
  _QWORD *v16;
  _QWORD **v18;
  _QWORD *v19;
  void *__p[2];
  char v22;
  __int128 v23;
  uint64_t v24;

  v10 = operator new();
  v23 = *a1;
  v24 = *((_QWORD *)a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  v11 = a3 + 1;
  v12 = (_QWORD *)a3[1];
  v18 = (_QWORD **)*a3;
  v19 = v12;
  if (a3[2])
  {
    v12[2] = &v19;
    *a3 = v11;
    *v11 = 0;
    a3[2] = 0;
  }
  else
  {
    v18 = &v19;
  }
  v13 = a4 + 1;
  v14 = (_QWORD *)a4[1];
  v15 = (_QWORD **)*a4;
  v16 = v14;
  if (a4[2])
  {
    v14[2] = &v16;
    *a4 = v13;
    *v13 = 0;
    a4[2] = 0;
  }
  else
  {
    v15 = &v16;
  }
  turi::proprietary::style_transfer::MAMLCheckpoint::MAMLCheckpoint(v10, &v23, __p, &v18, &v15);
  *a5 = v10;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v15, v16);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v18, v19);
  if (v22 < 0)
    operator delete(__p[0]);
}

void sub_217F2FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a13, a14);
  if (a21 < 0)
    operator delete(__p);
  MEMORY[0x219A19A08](v21, 0x10B3C40CED99292);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::get_config_options(turi::proprietary::style_transfer::style_transfer *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  void *v38[2];
  std::__shared_weak_count *v39;
  char *v40;
  std::__shared_weak_count *v41;
  void *v42[2];
  std::__shared_weak_count *v43;
  char *v44;
  std::__shared_weak_count *v45;
  void *__p[2];
  std::__shared_weak_count *v47;
  char *v48;
  std::__shared_weak_count *v49;
  const void *v50[2];
  std::__shared_weak_count *v51;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  std::string::basic_string[abi:ne180100]<0>(v50, "algorithm");
  v4 = turi::style_transfer::style_transfer::read_state<int>(this, v50);
  if (SHIBYTE(v51) < 0)
    operator delete((void *)v50[0]);
  v5 = operator new(0x28uLL);
  v5[2] = 0;
  v5[3] = &unk_24D917860;
  *v5 = &unk_24D917810;
  v5[1] = 0;
  *((float *)v5 + 8) = (float)v4;
  v48 = (char *)(v5 + 3);
  v49 = (std::__shared_weak_count *)v5;
  __p[0] = 0;
  __p[1] = 0;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)v50, &v48);
  v6 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t **)a2, "algorithm", (uint64_t)v50);
  std::string::basic_string[abi:ne180100]<0>(__p, "style_strength");
  v9 = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)__p);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  v10 = operator new(0x28uLL);
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = &unk_24D917860;
  *v10 = &unk_24D917810;
  *((float *)v10 + 8) = (float)v9;
  v44 = (char *)(v10 + 3);
  v45 = (std::__shared_weak_count *)v10;
  v42[0] = 0;
  v42[1] = 0;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)__p, &v44);
  v11 = v45;
  if (v45)
  {
    v12 = (unint64_t *)&v45->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t **)a2, "style_strength", (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(v42, "textel_density");
  v14 = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)v42);
  if (SHIBYTE(v43) < 0)
    operator delete(v42[0]);
  v15 = operator new(0x28uLL);
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = &unk_24D917860;
  *v15 = &unk_24D917810;
  *((float *)v15 + 8) = (float)v14;
  v40 = (char *)(v15 + 3);
  v41 = (std::__shared_weak_count *)v15;
  v38[0] = 0;
  v38[1] = 0;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)v42, &v40);
  v16 = v41;
  if (v41)
  {
    v17 = (unint64_t *)&v41->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t **)a2, "textel_density", (uint64_t)v42);
  std::string::basic_string[abi:ne180100]<0>(v38, "training_iterations");
  v19 = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)v38);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  v20 = operator new(0x28uLL);
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = &unk_24D917860;
  *v20 = &unk_24D917810;
  *((float *)v20 + 8) = (float)v19;
  v36 = (char *)(v20 + 3);
  v37 = (std::__shared_weak_count *)v20;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)v38, &v36);
  v21 = v37;
  if (v37)
  {
    v22 = (unint64_t *)&v37->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t **)a2, "training_iterations", (uint64_t)v38);
  v38[0] = &unk_24D9175B8;
  v24 = v39;
  if (v39)
  {
    v25 = (unint64_t *)&v39->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v42[0] = &unk_24D9175B8;
  v27 = v43;
  if (v43)
  {
    v28 = (unint64_t *)&v43->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  __p[0] = &unk_24D9175B8;
  v30 = v47;
  if (v47)
  {
    v31 = (unint64_t *)&v47->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v50[0] = &unk_24D9175B8;
  v33 = v51;
  if (v51)
  {
    v34 = (unint64_t *)&v51->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_217F2FF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v43 + 8);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  a37 = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  *(_QWORD *)(v44 - 104) = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v44 - 96);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v42, *(_QWORD **)(v42 + 8));
  _Unwind_Resume(a1);
}

void sub_217F300D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v31 - 120);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  JUMPOUT(0x217F300C0);
}

void sub_217F300EC()
{
  JUMPOUT(0x217F300C0);
}

void turi::proprietary::style_transfer::style_transfer::create_checkpoint(turi::proprietary::style_transfer::style_transfer *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD v7[3];
  _QWORD **v8;
  _QWORD *v9[2];
  uint64_t v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  turi::proprietary::style_transfer::style_transfer::get_config_options(a1, (uint64_t)v7);
  std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config,std::string const&,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array>>(a2, a3, &v8, v7, &v10);
  *a4 = v10;
  v10 = 0;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v7, (_QWORD *)v7[1]);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_217F30198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config,std::string const&,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array>>(__int128 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD **v15;
  _QWORD *v16;
  _QWORD **v18;
  _QWORD *v19;
  std::string v21;
  __int128 v22;
  uint64_t v23;

  v10 = operator new();
  v22 = *a1;
  v23 = *((_QWORD *)a1 + 2);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v21 = *(std::string *)a2;
  v11 = a3 + 1;
  v12 = (_QWORD *)a3[1];
  v18 = (_QWORD **)*a3;
  v19 = v12;
  if (a3[2])
  {
    v12[2] = &v19;
    *a3 = v11;
    *v11 = 0;
    a3[2] = 0;
  }
  else
  {
    v18 = &v19;
  }
  v13 = a4 + 1;
  v14 = (_QWORD *)a4[1];
  v15 = (_QWORD **)*a4;
  v16 = v14;
  if (a4[2])
  {
    v14[2] = &v16;
    *a4 = v13;
    *v13 = 0;
    a4[2] = 0;
  }
  else
  {
    v15 = &v16;
  }
  turi::proprietary::style_transfer::MAMLCheckpoint::MAMLCheckpoint(v10, &v22, &v21, &v18, &v15);
  *a5 = v10;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v15, v16);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v18, v19);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_217F30310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x219A19A08](v20, 0x10B3C40CED99292);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::export_to_coreml(turi::style_transfer::style_transfer *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t checkpoint;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string __p;
  std::string v11;
  __int128 v12;
  const CoreML::Specification::NeuralNetwork *v13;
  std::string v14;
  std::string v15;

  *a3 = 0;
  a3[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v15, "image");
  std::string::basic_string[abi:ne180100]<0>(&v14, "stylizedImage");
  checkpoint = turi::style_transfer::style_transfer::read_checkpoint(a1);
  (*(void (**)(const CoreML::Specification::NeuralNetwork **__return_ptr))(*(_QWORD *)checkpoint + 24))(&v13);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v11 = v15;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    __p = v14;
  turi::proprietary::style_transfer::style_transfer::export_style_transfer_model(&v13, 512, 512, (uint64_t)&v11, (uint64_t)&__p, &v12);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v12);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_21;
    goto LABEL_20;
  }
  if (*(_BYTE *)(a2 + 23))
LABEL_20:
    turi::coreml::MLModelWrapper::save(*a3);
LABEL_21:
  turi::neural_net::model_spec::~model_spec((turi::neural_net::model_spec *)&v13);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_217F304F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  if (a21 < 0)
    operator delete(__p);
  turi::neural_net::model_spec::~model_spec((turi::neural_net::model_spec *)&a24);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::export_style_transfer_model(const CoreML::Specification::NeuralNetwork **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, _QWORD *a6@<X8>)
{
  CoreML::Specification::ModelDescription *v12;
  CoreML::Specification::FeatureDescription *v13;
  CoreML::Specification::FeatureDescription *v14;
  uint64_t v15;
  uint64_t v16;
  std::string **v17;
  std::string *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  void *v26[2];
  char v27;
  std::string v28;
  void *__p[2];
  char v30;
  std::string __str;
  _BYTE v32[16];
  CoreML::Specification::ModelDescription *v33;
  int v34;
  CoreML::Specification::NeuralNetwork *v35;
  int v36;

  CoreML::Specification::Model::Model((CoreML::Specification::Model *)v32);
  v34 = 6;
  v12 = v33;
  if (!v33)
  {
    v12 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v12);
    v33 = v12;
  }
  v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)v12 + 16);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __str = *(std::string *)a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "Input image");
  turi::proprietary::style_transfer::set_image_feature((uint64_t)v13, a2, a3, &__str, (uint64_t)__p, 20);
  if (v30 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v14 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)v12 + 40);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v28 = *(std::string *)a5;
  std::string::basic_string[abi:ne180100]<0>(v26, "Stylized image");
  turi::proprietary::style_transfer::set_image_feature((uint64_t)v14, a2, a3, &v28, (uint64_t)v26, 20);
  if (v27 < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v36 == 500)
  {
    v15 = (uint64_t)v35;
  }
  else
  {
    CoreML::Specification::Model::clear_Type((uint64_t)v32);
    v36 = 500;
    v15 = operator new();
    CoreML::Specification::NeuralNetwork::NeuralNetwork((CoreML::Specification::NeuralNetwork *)v15);
    v35 = (CoreML::Specification::NeuralNetwork *)v15;
  }
  CoreML::Specification::NeuralNetwork::MergeFrom((CoreML::Specification::NeuralNetwork *)v15, *a1);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8);
  v19 = *(uint64_t **)(v16 + 16);
  v17 = (std::string **)(v16 + 16);
  v18 = (std::string *)v19;
  if (v19 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v17, a4);
  else
    std::string::operator=(v18, (const std::string *)a4);
  v20 = *(_QWORD *)(v15 + 32);
  v21 = *(_QWORD *)(v20 + 8 * *(int *)(v15 + 24));
  std::string::operator=(*(std::string **)(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 32) + 8), (const std::string *)a4);
  std::string::operator=(*(std::string **)(*(_QWORD *)(v21 + 56) + 8), (const std::string *)a5);
  std::allocate_shared[abi:ne180100]<CoreML::Model,std::allocator<CoreML::Model>,CoreML::Specification::Model &,void>((const CoreML::Specification::Model *)v32, &v25);
  std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Model>,void>(&v25, a6);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)v32);
}

void sub_217F30838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  MEMORY[0x219A19A08](v36, 0x10A1C40FD9EAC30);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a36);
  _Unwind_Resume(a1);
}

uint64_t turi::proprietary::style_transfer::set_image_feature(uint64_t a1, uint64_t a2, uint64_t a3, std::string *__str, uint64_t a5, int a6)
{
  std::string **v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(uint64_t **)(a1 + 16);
  v11 = (std::string **)(a1 + 16);
  v12 = (std::string *)v13;
  if (v13 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)__str);
  else
    std::string::operator=(v12, __str);
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(_QWORD *)(a5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a5 + 23))
  {
    goto LABEL_11;
  }
  if (*(uint64_t **)(a1 + 24) == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), a5);
  else
    std::string::operator=(*(std::string **)(a1 + 24), (const std::string *)a5);
LABEL_11:
  v14 = *(_QWORD *)(a1 + 32);
  if (!v14)
  {
    v14 = operator new();
    CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)v14);
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (*(_DWORD *)(v14 + 36) == 4)
  {
    v15 = *(_QWORD *)(v14 + 24);
  }
  else
  {
    CoreML::Specification::FeatureType::clear_Type(v14);
    *(_DWORD *)(v14 + 36) = 4;
    v15 = operator new();
    CoreML::Specification::ImageFeatureType::ImageFeatureType((CoreML::Specification::ImageFeatureType *)v15);
    *(_QWORD *)(v14 + 24) = v15;
  }
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  *(_DWORD *)(v15 + 32) = a6;
  return v15;
}

void sub_217F30A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::prepare_prediction(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *__p[2];
  char v78;
  uint64_t v79;
  unsigned int *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[3];

  v84[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::read_image(a1, (uint64_t *)__p, (uint64_t)&v79);
  if (v78 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v84 + 5) = 0x800000000000000;
  v84[0] = 0;
  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  v6 = (void **)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 3;
  v84[0] = v4;
  *(_QWORD *)v4 = 1;
  switch(BYTE4(v84[1]))
  {
    case 2:
      if (*(_QWORD *)v4 != 1)
      {
        v7 = (_QWORD *)operator new();
        v8 = v84[0];
        *v7 = *(_QWORD *)v84[0];
        v9 = (std::string *)(v7 + 1);
        if (*(char *)(v8 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
        }
        else
        {
          v10 = *(_OWORD *)(v8 + 8);
          v7[3] = *(_QWORD *)(v8 + 24);
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
        }
        v84[0] = v7;
        *v7 = 1;
        do
        {
          v38 = __ldaxr((unint64_t *)v5);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, (unint64_t *)v5));
        if (!v39)
        {
          v15 = 0x1012C404EF22A49;
          if ((*(char *)(v5 + 31) & 0x80000000) == 0)
            goto LABEL_43;
          v16 = *v6;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      if (*(_QWORD *)v4 != 1)
      {
        v11 = (_QWORD *)operator new();
        v12 = v84[0];
        *v11 = *(_QWORD *)v84[0];
        v11[2] = 0;
        v11[3] = 0;
        v11[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11 + 1, *(const void **)(v12 + 8), *(_QWORD *)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 3);
        v84[0] = v11;
        *v11 = 1;
        do
        {
          v13 = __ldaxr((unint64_t *)v5);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unint64_t *)v5));
        if (!v14)
        {
          v15 = 0x1080C409938AC02;
          v16 = *v6;
          if (*v6)
          {
            *(_QWORD *)(v5 + 16) = v16;
LABEL_42:
            operator delete(v16);
          }
          goto LABEL_43;
        }
      }
      break;
    case 4:
      if (*(_QWORD *)v4 != 1)
      {
        v17 = (_QWORD *)operator new();
        v18 = v84[0];
        *v17 = *(_QWORD *)v84[0];
        v17[2] = 0;
        v17[3] = 0;
        v17[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v17 + 1, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 4);
        v84[0] = v17;
        *v17 = 1;
        do
        {
          v19 = __ldaxr((unint64_t *)v5);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, (unint64_t *)v5));
        if (!v20)
        {
          v15 = 0x1020C405E66F15BLL;
          __p[0] = v6;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_43;
        }
      }
      break;
    case 5:
      if (*(_QWORD *)v4 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = v84[0];
        *v21 = *(_QWORD *)v84[0];
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v21 + 1, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 5);
        v84[0] = v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr((unint64_t *)v5);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, (unint64_t *)v5));
        if (!v24)
        {
          v15 = 0x1020C405E66F15BLL;
          __p[0] = v6;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_43;
        }
      }
      break;
    case 8:
      if (*(_QWORD *)v4 != 1)
      {
        v25 = operator new();
        v26 = v84[0];
        *(_QWORD *)v25 = *(_QWORD *)v84[0];
        *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
        v27 = *(_QWORD *)(v26 + 16);
        *(_QWORD *)(v25 + 16) = v27;
        if (v27)
        {
          v28 = (unsigned int *)(v27 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = *(_OWORD *)(v26 + 24);
        v31 = *(_OWORD *)(v26 + 40);
        *(_OWORD *)(v25 + 56) = *(_OWORD *)(v26 + 56);
        *(_OWORD *)(v25 + 40) = v31;
        *(_OWORD *)(v25 + 24) = v30;
        v84[0] = v25;
        *(_QWORD *)v25 = 1;
        do
        {
          v32 = __ldaxr((unint64_t *)v5);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, (unint64_t *)v5));
        if (!v33)
        {
          v15 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)(v5 + 16));
          goto LABEL_43;
        }
      }
      break;
    case 9:
      if (*(_QWORD *)v4 != 1)
      {
        v34 = (_QWORD *)operator new();
        v35 = v84[0] + 8;
        *v34 = *(_QWORD *)v84[0];
        turi::flexible_type_impl::ndarray<double>::ndarray(v34 + 1, v35);
        v84[0] = v34;
        *v34 = 1;
        do
        {
          v36 = __ldaxr((unint64_t *)v5);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, (unint64_t *)v5));
        if (!v37)
        {
          v15 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v5);
LABEL_43:
          MEMORY[0x219A19A08](v5, v15);
        }
      }
      break;
    default:
      break;
  }
  v40 = v84[0];
  v42 = v79;
  v41 = v80;
  if (v80)
  {
    v43 = v80 + 2;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = *(_OWORD *)(v40 + 8);
  *(_QWORD *)(v40 + 8) = v42;
  *(_QWORD *)(v40 + 16) = v41;
  *(_OWORD *)__p = v45;
  boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
  v46 = v81;
  v47 = v82;
  *(_OWORD *)(v40 + 56) = v83;
  *(_OWORD *)(v40 + 40) = v47;
  *(_OWORD *)(v40 + 24) = v46;
  turi::image_util::resize_image((turi::image_util *)v84, (const turi::flexible_type *)0x200, 512, 3, 1, 0, a2);
  switch(BYTE4(v84[1]))
  {
    case 2:
      v48 = (unint64_t *)v84[0];
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        v51 = v84[0];
        if (v84[0])
        {
          if (*(char *)(v84[0] + 31) < 0)
            operator delete(*(void **)(v84[0] + 8));
          v52 = v51;
          v53 = 0x1012C404EF22A49;
          goto LABEL_88;
        }
      }
      break;
    case 3:
      v54 = (unint64_t *)v84[0];
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = v84[0];
        if (v84[0])
        {
          v58 = *(void **)(v84[0] + 8);
          if (v58)
          {
            *(_QWORD *)(v84[0] + 16) = v58;
            operator delete(v58);
          }
          v52 = v57;
          v53 = 0x1080C409938AC02;
          goto LABEL_88;
        }
      }
      break;
    case 4:
      v59 = (unint64_t *)v84[0];
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        v62 = v84[0];
        if (v84[0])
        {
          __p[0] = (void *)(v84[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_72;
        }
      }
      break;
    case 5:
      v63 = (unint64_t *)v84[0];
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        v62 = v84[0];
        if (v84[0])
        {
          __p[0] = (void *)(v84[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_72:
          v52 = v62;
          v53 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        }
      }
      break;
    case 8:
      v66 = (unint64_t *)v84[0];
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        v69 = v84[0];
        if (v84[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v84[0] + 16));
          v52 = v69;
          v70 = -235920773;
          goto LABEL_87;
        }
      }
      break;
    case 9:
      v71 = (unint64_t *)v84[0];
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        v74 = v84[0];
        if (v84[0])
        {
          v75 = *(void **)(v84[0] + 48);
          if (v75)
          {
            *(_QWORD *)(v84[0] + 56) = v75;
            operator delete(v75);
          }
          v76 = *(void **)(v74 + 24);
          if (v76)
          {
            *(_QWORD *)(v74 + 32) = v76;
            operator delete(v76);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v74 + 8);
          v52 = v74;
          v70 = 2071181815;
LABEL_87:
          v53 = v70 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v52, v53);
        }
      }
      break;
    default:
      break;
  }
  boost::detail::shared_count::~shared_count(&v80);
}

void sub_217F31128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, unsigned int *a16)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;

  MEMORY[0x219A19A08](v16, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v17 - 44))
  {
    case 2:
      v19 = *(unint64_t **)(v17 - 56);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = *(_QWORD *)(v17 - 56);
        if (v22)
        {
          if (*(char *)(v22 + 31) < 0)
            operator delete(*(void **)(v22 + 8));
          MEMORY[0x219A19A08](v22, 0x1012C404EF22A49);
        }
      }
      goto LABEL_40;
    case 3:
      v23 = *(unint64_t **)(v17 - 56);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *(_QWORD **)(v17 - 56);
      if (!v26)
        goto LABEL_39;
      v27 = (void *)v26[1];
      if (v27)
      {
        v26[2] = v27;
        operator delete(v27);
      }
      v28 = v26;
      v29 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v30 = *(unint64_t **)(v17 - 56);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_40;
      v33 = *(_QWORD **)(v17 - 56);
      if (!v33)
        goto LABEL_39;
      __p = v33 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_26;
    case 5:
      v34 = *(unint64_t **)(v17 - 56);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_40;
      v33 = *(_QWORD **)(v17 - 56);
      if (!v33)
        goto LABEL_39;
      __p = v33 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_26:
      v28 = v33;
      v29 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v37 = *(unint64_t **)(v17 - 56);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      v40 = *(_QWORD *)(v17 - 56);
      if (!v40)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v40 + 16));
      v28 = (_QWORD *)v40;
      v41 = -235920773;
      goto LABEL_37;
    case 9:
      v42 = *(unint64_t **)(v17 - 56);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_40;
      v45 = *(_QWORD **)(v17 - 56);
      if (!v45)
        goto LABEL_39;
      v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v45);
      v41 = 2071181815;
LABEL_37:
      v29 = v41 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v28, v29);
LABEL_39:
      *(_QWORD *)(v17 - 56) = 0;
LABEL_40:
      boost::detail::shared_count::~shared_count(&a16);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void turi::proprietary::style_transfer::style_transfer::stylize_validation_image(turi::ml_model_base *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t i;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17[2];
  char v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  _BYTE v24[40];
  std::vector<unsigned int> __p;
  void **v26;
  _BYTE v27[40];
  _QWORD v28[3];
  _QWORD *v29;
  __int128 v30;
  uint64_t v31[3];
  void *v32[2];
  char v33;
  __int128 v34;
  __int128 *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v34 = &unk_24D91B3E8;
  *((_QWORD *)&v34 + 1) = turi::proprietary::style_transfer::prepare_prediction;
  v35 = &v34;
  turi::gl_sarray::apply(a2, (uint64_t)&v34, 8, 1, (uint64_t)v27);
  v5 = v35;
  if (v35 == &v34)
  {
    v6 = 4;
    v5 = &v34;
  }
  else
  {
    if (!v35)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(&v30, "row_id");
  std::string::basic_string[abi:ne180100]<0>(v31, "style");
  std::string::basic_string[abi:ne180100]<0>(v32, "stylized_image");
  v19 = 0;
  v20 = 0;
  v21 = 0;
  __p.__begin_ = (std::vector<unsigned int>::pointer)&v19;
  LOBYTE(__p.__end_) = 0;
  v19 = (std::string *)operator new(0x48uLL);
  v20 = v19;
  v21 = v19 + 3;
  v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, &v30, &v34, v19);
  v7 = (unsigned int *)operator new(3uLL);
  __p.__end_ = (unsigned int *)((char *)v7 + 3);
  __p.__end_cap_.__value_ = (unsigned int *)((char *)v7 + 3);
  *(_WORD *)v7 = 0;
  *((_BYTE *)v7 + 2) = 8;
  __p.__begin_ = v7;
  turi::gl_sframe_writer::gl_sframe_writer(&v26, &v19, &__p, 1);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  __p.__begin_ = (std::vector<unsigned int>::pointer)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 0; i != -9; i -= 3)
  {
    if (*(&v33 + i * 8) < 0)
      operator delete(v32[i]);
  }
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::resize(&__p, 1uLL);
  begin = __p.__begin_;
  end = __p.__end_;
  if (__p.__begin_ != __p.__end_)
  {
    v11 = 0;
    do
      *begin++ = v11++;
    while (begin != end);
  }
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v24, (const turi::gl_sarray *)v27);
  turi::style_transfer::style_transfer::perform_predict(a1, (turi::gl_sarray *)v24, (turi::gl_sframe_writer_impl **)&v26, (int **)&__p, 0);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v24);
  turi::gl_sframe_writer::close((turi::gl_sframe_writer_impl **)&v26, v22);
  std::string::basic_string[abi:ne180100]<0>(v17, "stylized_image");
  turi::gl_sframe::operator[]((uint64_t)v22, (uint64_t)v17, (turi::gl_sarray *)&v30);
  turi::gl_sarray::gl_sarray(&v19, &v30);
  *(_QWORD *)&v30 = off_24D91EA30;
  if (v33 < 0)
    operator delete(v32[0]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v30);
  if (v18 < 0)
    operator delete(v17[0]);
  v28[0] = &unk_24D91B488;
  v28[1] = turi::proprietary::style_transfer::vectorize_image;
  v29 = v28;
  turi::gl_sarray::apply((uint64_t)&v19, (uint64_t)v28, 9, 1, a3);
  v12 = v29;
  if (v29 == v28)
  {
    v13 = 4;
    v12 = v28;
    goto LABEL_23;
  }
  if (v29)
  {
    v13 = 5;
LABEL_23:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v19);
  v22[0] = off_24D91E9C0;
  v14 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  turi::gl_sframe_writer::~gl_sframe_writer(&v26);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v27);
}

void sub_217F317F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (**a21)(turi::gl_sframe *__hidden this),uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void **a32,__int16 a33,char a34,char a35)
{
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;

  v38 = *(_QWORD **)(v36 - 168);
  if (v38 == v35)
  {
    v39 = 4;
    v38 = (_QWORD *)(v36 - 192);
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_6:
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a16);
  a21 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::gl_sframe_writer::~gl_sframe_writer(&a32);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a33);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void turi::proprietary::style_transfer::vectorize_image(turi::proprietary::style_transfer *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *image_data;
  unint64_t v6;
  uint64_t v7;
  double *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *__p;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  void *v19[3];

  image_data = (unsigned __int8 *)turi::image_type::get_image_data(this);
  v6 = *((_QWORD *)this + 5);
  v16 = 0;
  std::vector<double>::vector(v19, v6, &v16);
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    v8 = (double *)v19[0];
    do
    {
      v9 = *image_data++;
      *v8++ = (double)v9;
      --v7;
    }
    while (v7);
  }
  v11 = *((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v12 = operator new(0x18uLL);
  v17 = v12 + 3;
  v18 = v12 + 3;
  *v12 = v11;
  v12[1] = v10;
  v12[2] = 3;
  v15 = 0;
  v16 = v12;
  __p = 0;
  v14 = 0;
  turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)v19, (uint64_t)&v16, (uint64_t)&__p, 0);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
}

void sub_217F31A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t turi::proprietary::style_transfer::style_transfer::print_training_progress(turi::proprietary::style_transfer::style_transfer *this)
{
  uint64_t result;
  unint64_t *v3;
  int v4;
  unint64_t training_iterations;
  float training_loss;
  float training_style_loss;
  float training_content_loss;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  void *__p;
  char v19;
  char v20;

  result = turi::style_transfer::style_transfer::get_table_printer(this);
  if (result)
  {
    v3 = (unint64_t *)result;
    std::string::basic_string[abi:ne180100]<0>(&__p, "reporting_interval");
    v4 = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)&__p);
    if (v20 < 0)
      operator delete(__p);
    training_iterations = turi::style_transfer::style_transfer::get_training_iterations(this);
    v17 = training_iterations;
    training_loss = turi::style_transfer::style_transfer::get_training_loss(this);
    v16 = training_loss;
    if (turi::style_transfer::style_transfer::supports_loss_components(this))
    {
      training_style_loss = turi::style_transfer::style_transfer::get_training_style_loss(this);
      *(float *)&v14 = training_style_loss;
      training_content_loss = turi::style_transfer::style_transfer::get_training_content_loss(this);
      v15 = training_content_loss;
      if (v17 == 1
        || !(v17 % v4)
        || (result = turi::style_transfer::style_transfer::get_max_iterations(this), v17 == result))
      {
        __p = (void *)0xBFF0000000000000;
        return turi::table_printer::print_row<long long,float,float,float,turi::progress_time>((uint64_t)v3, &v17, &v16, (float *)&v14, &v15, (double *)&__p);
      }
    }
    else
    {
      v14 = 0xBFF0000000000000;
      v9 = v3 + 9;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      result = turi::table_printer::register_tick((turi::table_printer *)v3, training_iterations, v10 + 1);
      if ((_DWORD)result)
      {
        __p = v3 + 12;
        v19 = 0;
        v11 = std::unique_lock<turi::mutex>::try_lock((uint64_t)&__p);
        v12 = v11;
        if (v11)
          turi::table_printer::_print_progress_row<long long,float,turi::progress_time>(v3, &v17, &v16, &v14);
        result = std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&__p);
      }
      else
      {
        v12 = 0;
      }
      v13 = v3[93];
      if (v13 && !(v10 % v13))
        return turi::table_printer::_track_progress<long long,float,turi::progress_time>((uint64_t)v3, v12, &v17, &v16, (double *)&v14);
    }
  }
  return result;
}

void sub_217F31C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::style_transfer::read_state<int>(turi::ml_model_base *a1, const void **a2)
{
  uint64_t state;
  int *v4;
  char v6;

  state = turi::ml_model_base::get_state(a1);
  v4 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(state, a2);
  return turi::variant_converter<int,void>::get((uint64_t)&v6, v4);
}

uint64_t turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(uint64_t a1, uint64_t *a2, float *a3, float *a4, float *a5, double *a6)
{
  uint64_t v6;
  double v13;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  timeval v18;

  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v15[0] = v6 >> 5;
  if (v6 != 160)
  {
    v18.tv_sec = (__darwin_time_t)v15;
    turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(long long,float,float,float,turi::progress_time const&)const::{lambda(void)#1}::operator()();
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  LOBYTE(v18.tv_sec) = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v18, 1);
  turi::table_printer::os_log_value(0, *a2);
  turi::table_internal::_print_long(v15, *(_QWORD *)(*(_QWORD *)a1 + 24), *a2);
  turi::table_printer::os_log_value((turi::table_printer *)1, *a3);
  turi::table_internal::_print_double(v15, *(_QWORD *)(*(_QWORD *)a1 + 56), *a3);
  turi::table_printer::os_log_value((turi::table_printer *)2, *a4);
  turi::table_internal::_print_double(v15, *(_QWORD *)(*(_QWORD *)a1 + 88), *a4);
  turi::table_printer::os_log_value((turi::table_printer *)3, *a5);
  turi::table_internal::_print_double(v15, *(_QWORD *)(*(_QWORD *)a1 + 120), *a5);
  turi::table_printer::os_log_value(a1, 4, a6);
  v13 = *a6;
  if (*a6 < 0.0)
  {
    gettimeofday(&v18, 0);
    v13 = (double)(v18.tv_usec - *(_DWORD *)(a1 + 32)) / 1000000.0 + (double)(v18.tv_sec - *(_QWORD *)(a1 + 24));
  }
  turi::table_internal::_print_time(v15, *(_QWORD *)(*(_QWORD *)a1 + 152), v13);
  turi::table_printer::_p(a1);
  v15[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v17);
}

void sub_217F31EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::request_assets(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  unsigned int v5;
  BOOL v6;
  void *v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  BOOL v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  _QWORD v24[5];
  __CFString *v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[128];
  uint64_t v48;

  v20 = a1;
  v48 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE66BB0]), "initWithType:", CFSTR("com.apple.MobileAsset.TuriCoreAsset"));
  objc_msgSend(v3, "returnTypes:", 2);
  objc_msgSend(v3, "setDoNotBlockBeforeFirstUnlock:", 1);
  objc_msgSend(v3, "setDoNotBlockOnNetworkStatus:", 1);
  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "setDiscretionary:", 0);
  objc_msgSend(v3, "addKeyValuePair:with:", CFSTR("Type"), CFSTR("Filter"));
  v22 = a2;
  v43 = 0;
  v44 = &v43;
  v45 = 0x2020000000;
  v46 = 32;
  v42[0] = MEMORY[0x24BDAC760];
  v42[1] = 3221225472;
  v42[2] = ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke;
  v42[3] = &unk_24D91A750;
  v42[4] = &v43;
  v23 = v4;
  objc_msgSend(MEMORY[0x24BE66B90], "startCatalogDownload:options:then:", CFSTR("com.apple.MobileAsset.TuriCoreAsset"), v4, v42);
  if (v44[3])
  {
    v5 = 30;
    do
    {
      objc_msgSend(MEMORY[0x24BDD17F0], "sleepForTimeInterval:", 1.0, v20);
      if (v44[3])
        v6 = v5 > 1;
      else
        v6 = 0;
      --v5;
    }
    while (v6);
  }
  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 32;
  v32 = 0;
  v33 = &v32;
  v34 = 0x3032000000;
  v35 = __Block_byref_object_copy__1;
  v36 = __Block_byref_object_dispose__1;
  v37 = 0;
  objc_msgSend(v3, "queryMetaDataSync", v20);
  objc_msgSend(v3, "results");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7 == 0;

  if (!v8)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    objc_msgSend(v3, "results");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v28, v47, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v29 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
          objc_msgSend(v13, "logAsset");
          if (objc_msgSend(v13, "state") == 2)
          {
            objc_msgSend(v13, "getLocalUrl");
            v14 = objc_claimAutoreleasedReturnValue();
            v15 = (void *)v33[5];
            v33[5] = v14;

            v39[3] = 0;
          }
          else
          {
            objc_msgSend(v13, "attachProgressCallBack:", &__block_literal_global_3);
            v24[0] = MEMORY[0x24BDAC760];
            v24[1] = 3221225472;
            v24[2] = ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke_2;
            v24[3] = &unk_24D91A7B8;
            v24[4] = v13;
            v25 = CFSTR("com.apple.MobileAsset.TuriCoreAsset");
            v26 = &v32;
            v27 = &v38;
            objc_msgSend(v13, "startDownload:then:", v4, v24);

          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v28, v47, 16);
      }
      while (v10);
    }

  }
  if (v39[3])
  {
    v16 = 120;
    do
    {
      objc_msgSend(MEMORY[0x24BDD17F0], "sleepForTimeInterval:", 1.0);
      if (v39[3])
        v17 = v16 > 1;
      else
        v17 = 0;
      --v16;
    }
    while (v17);
  }
  v18 = (void *)v33[5];
  if (v18)
  {
    objc_msgSend(v18, "path");
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(v22, (char *)objc_msgSend(v19, "UTF8String"));

  }
  else
  {
    MEMORY[0x219A19390](v21, "Unsuccessfully downloaded Style Transfer assets.");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
  }
  _Block_object_dispose(&v32, 8);

  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v43, 8);

}

void sub_217F322F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a45, 8);

  _Unwind_Resume(a1);
}

void ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  NSLog(CFSTR("Got the download meta data reply %ld"), a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke_256(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  NSLog(CFSTR("Progress callback: %lld %lld"), objc_msgSend(v2, "totalWritten"), objc_msgSend(v2, "totalExpected"));

}

void sub_217F32440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  objc_msgSend(*(id *)(a1 + 32), "getLocalUrl");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  NSLog(CFSTR("Got the download asset reply: %@, and %@"), *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a2;
}

void turi::proprietary::style_transfer::style_transfer::request_style_transfer_assets(uint64_t a1@<X8>)
{
  char v3;
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "");
  turi::proprietary::style_transfer::style_transfer::request_assets((uint64_t)v6, __p);
  v3 = HIBYTE(v7);
  if (SHIBYTE(v7) < 0)
  {
    if (v6[1])
      goto LABEL_3;
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 16) = v5;
    if ((v3 & 0x80) == 0)
      return;
    goto LABEL_8;
  }
  if (!HIBYTE(v7))
    goto LABEL_7;
LABEL_3:
  *(_OWORD *)a1 = *(_OWORD *)v6;
  *(_QWORD *)(a1 + 16) = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[0]);
    if (v7 < 0)
LABEL_8:
      operator delete(v6[0]);
  }
}

void sub_217F32568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *turi::proprietary::style_transfer::style_transfer::name(turi::proprietary::style_transfer::style_transfer *this)
{
  return "style_transfer";
}

std::string *turi::proprietary::style_transfer::style_transfer::uid(turi::proprietary::style_transfer::style_transfer *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&turi::proprietary::style_transfer::style_transfer::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/proprietary/src/style_transfer/style_transfer.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::proprietary::style_transfer::style_transfer::uid(void)::_uid, &dword_217E69000);
  }
  return &turi::proprietary::style_transfer::style_transfer::uid(void)::_uid;
}

void sub_217F32660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::perform_registration(turi::proprietary::style_transfer::style_transfer *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::string __str;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string __p;
  std::string **v11;
  char v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  __int128 v17;
  char v18;
  __int128 v19;

  *(_QWORD *)&v19 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 24))
    return;
  turi::style_transfer::style_transfer::perform_registration(this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "predict");
  std::string::basic_string[abi:ne180100]<0>(&v17, "data");
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  v12 = 0;
  v7 = (std::string *)operator new(0x18uLL);
  v8 = v7;
  v9 = v7 + 1;
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, &v17, &v19, v7);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>("data", (std::string::size_type)turi::proprietary::style_transfer::style_transfer::stylize_validation_image, 0, (uint64_t)v15);
  turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v7, (uint64_t)v15);
  v2 = v16;
  if (v16 == v15)
  {
    v3 = 4;
    v2 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  v11 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v18 < 0)
    operator delete((void *)v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "request_style_transfer_assets");
  v7 = 0;
  v8 = 0;
  v9 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_11proprietary14style_transfer14style_transferENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEJEJEEENS5_8functionIFN5boost7variantINSD_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS5_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSK_INS_10model_baseEEENSK_INS_17unity_sframe_baseEEENSK_INS_17unity_sarray_baseEEENS5_3mapISB_NSD_18recursive_variant_ENS5_4lessISB_EENS9_INS5_4pairIKSB_SV_EEEEEENS5_6vectorISV_NS9_ISV_EEEENSD_17recursive_wrapperINS_21function_closure_infoEEEEEEPSO_NSU_ISB_S19_SX_NS9_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_((std::string::size_type)turi::proprietary::style_transfer::style_transfer::request_style_transfer_assets, 0, (uint64_t)v13);
  turi::model_base::register_function((uint64_t)this, &__str, (uint64_t)&v7, (uint64_t)v13);
  v4 = v14;
  if (v14 == v13)
  {
    v5 = 4;
    v4 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v5 = 5;
LABEL_15:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  *(_QWORD *)&v17 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *((_BYTE *)this + 24) = 1;
}

void sub_217F3286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  *(_QWORD *)(v28 - 64) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 64));
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_217F329C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_217F32A44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_217F32A68(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void turi::style_transfer::style_transfer::perform_registration(turi::style_transfer::style_transfer *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;
  _QWORD *v8;
  uint64_t v9;
  uint64_t k;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t m;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t n;
  _QWORD *v24;
  uint64_t v25;
  uint64_t ii;
  _QWORD *v27;
  uint64_t v28;
  std::string v29;
  std::string v30;
  std::string v31;
  _QWORD **v32;
  _QWORD *v33[2];
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  _QWORD **v38;
  _QWORD *v39[2];
  void *v40[2];
  char v41;
  std::string v42;
  std::string __str;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  std::string __p;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[21];
  _BYTE v56[57];
  __int128 v57;
  uint64_t v58;
  std::string v59;
  void *v60[2];
  _BYTE v61[265];
  _QWORD v62[3];
  _QWORD v63[3];
  __int128 v64[7];
  uint64_t v65;
  _BYTE v66[24];
  _BYTE *v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  _BYTE v72[24];
  _BYTE *v73;
  std::string *v74;
  __int128 v75;
  __int128 v76[3];
  _BYTE v77[24];
  _BYTE *v78;
  _BYTE v79[24];
  _BYTE *v80;
  _BYTE v81[24];
  _BYTE *v82;
  _BYTE v83[13];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 24))
    return;
  turi::ml_model_base::perform_registration(this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "style_transfer::train");
  std::string::basic_string[abi:ne180100]<0>(&v59, "style");
  std::string::basic_string[abi:ne180100]<0>(v60, "content");
  std::string::basic_string[abi:ne180100]<0>(v62, "opts");
  v74 = 0;
  v75 = 0uLL;
  *(_QWORD *)v55 = &v74;
  v55[8] = 0;
  v74 = (std::string *)operator new(0x48uLL);
  *(_QWORD *)&v75 = v74;
  *((_QWORD *)&v75 + 1) = v74 + 3;
  *(_QWORD *)&v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75 + 8, (__int128 *)&v59, (__int128 *)v63, v74);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>("style", (std::string::size_type)turi::style_transfer::style_transfer::train, 0, "content", "opts", (uint64_t)v81);
  turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v74, (uint64_t)v81);
  v2 = v82;
  if (v82 == v81)
  {
    v3 = 4;
    v2 = v81;
    goto LABEL_6;
  }
  if (v82)
  {
    v3 = 5;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  *(_QWORD *)v55 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v62[i + 2]) < 0)
      operator delete((void *)v62[i]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v46, "style_transfer::train");
  std::string::basic_string[abi:ne180100]<0>(v44, "\nOptions\n-------\nresnet_mlmodel_path : string\n    Path to the Resnet CoreML specification with the pre-trained model\n    parameters.\nvgg_mlmodel_path: string\n    Path to the VGG16 CoreML specification with the pre-trained model\n    parameters.\nnum_styles: int\n    The defined number of styles for the style transfer model\nbatch_size : int\n    The number of images per training iteration. If 0, then it will be\n    automatically determined based on resource availability.\nmax_iterations : int\n    The number of training iterations. If 0, then it will be automatically\n    be determined based on the amount of data you provide.\nimage_width : int\n"
    "    The input image width to the model\n"
    "image_height : int\n"
    "    The input image height to the model\n");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v59, (__int128 *)v46, (__int128 *)v44);
  turi::model_base::register_docstring((uint64_t)this, &v59);
  if ((v61[0] & 0x80000000) != 0)
    operator delete(v60[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (v45 < 0)
    operator delete(v44[0]);
  if (v47 < 0)
    operator delete(v46[0]);
  std::string::basic_string[abi:ne180100]<0>(&__str, "style_transfer::init_training");
  std::string::basic_string[abi:ne180100]<0>(&v59, "style");
  std::string::basic_string[abi:ne180100]<0>(v60, "content");
  std::string::basic_string[abi:ne180100]<0>(v62, "opts");
  v74 = 0;
  v75 = 0uLL;
  *(_QWORD *)v55 = &v74;
  v55[8] = 0;
  v74 = (std::string *)operator new(0x48uLL);
  *(_QWORD *)&v75 = v74;
  *((_QWORD *)&v75 + 1) = v74 + 3;
  *(_QWORD *)&v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75 + 8, (__int128 *)&v59, (__int128 *)v63, v74);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>("style", 0x50uLL, 1uLL, "content", "opts", (uint64_t)v79);
  turi::model_base::register_function((uint64_t)this, &__str, (uint64_t)&v74, (uint64_t)v79);
  v5 = v80;
  if (v80 == v79)
  {
    v6 = 4;
    v5 = v79;
    goto LABEL_25;
  }
  if (v80)
  {
    v6 = 5;
LABEL_25:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)v55 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  for (j = 0; j != -9; j -= 3)
  {
    if (SHIBYTE(v62[j + 2]) < 0)
      operator delete((void *)v62[j]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v42, "style_transfer::resume_training");
  std::string::basic_string[abi:ne180100]<0>(&v59, "style");
  std::string::basic_string[abi:ne180100]<0>(v60, "content");
  std::string::basic_string[abi:ne180100]<0>(v62, "opts");
  v74 = 0;
  v75 = 0uLL;
  *(_QWORD *)v55 = &v74;
  v55[8] = 0;
  v74 = (std::string *)operator new(0x48uLL);
  *(_QWORD *)&v75 = v74;
  *((_QWORD *)&v75 + 1) = v74 + 3;
  *(_QWORD *)&v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75 + 8, (__int128 *)&v59, (__int128 *)v63, v74);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>("style", 0x58uLL, 1uLL, "content", "opts", (uint64_t)v77);
  turi::model_base::register_function((uint64_t)this, &v42, (uint64_t)&v74, (uint64_t)v77);
  v8 = v78;
  if (v78 == v77)
  {
    v9 = 4;
    v8 = v77;
    goto LABEL_36;
  }
  if (v78)
  {
    v9 = 5;
LABEL_36:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  *(_QWORD *)v55 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  for (k = 0; k != -9; k -= 3)
  {
    if (SHIBYTE(v62[k + 2]) < 0)
      operator delete((void *)v62[k]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v55, "resume_training");
  v39[0] = 0;
  v39[1] = 0;
  v38 = v39;
  turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::set(&v38, (uint64_t)&v57);
  *(_QWORD *)((char *)&v75 + 5) = *(_QWORD *)((char *)&v57 + 5);
  *(_QWORD *)&v75 = v57;
  BYTE12(v75) = BYTE12(v57);
  LODWORD(v74) = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v59, "opts", (unsigned int *)&v74);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v40, (const void **)&v59.__r_.__value_.__l.__data_, 1);
  turi::model_base::register_defaults((uint64_t)this, (__int128 *)v55, (uint64_t)v40);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v40, (char *)v40[1]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v60);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v74);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v38, v39[0]);
  if ((v56[0] & 0x80000000) != 0)
    operator delete(*(void **)v55);
  std::string::basic_string[abi:ne180100]<0>(&v37, "style_transfer::iterate_training");
  memset(&v59, 0, sizeof(v59));
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_14style_transfer14style_transferEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_(0x60uLL, 1uLL, (uint64_t)v72);
  turi::model_base::register_function((uint64_t)this, &v37, (uint64_t)&v59, (uint64_t)v72);
  v11 = v73;
  if (v73 == v72)
  {
    v12 = 4;
    v11 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_52;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_52:
  v74 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v36, "style_transfer::synchronize_training");
  memset(&v59, 0, sizeof(v59));
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_14style_transfer14style_transferEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_(0x68uLL, 1uLL, (uint64_t)v70);
  turi::model_base::register_function((uint64_t)this, &v36, (uint64_t)&v59, (uint64_t)v70);
  v13 = v71;
  if (v71 == v70)
  {
    v14 = 4;
    v13 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_59;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_59:
  v74 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v35, "style_transfer::finalize_training");
  memset(&v59, 0, sizeof(v59));
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_14style_transfer14style_transferEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_(0x70uLL, 1uLL, (uint64_t)v68);
  turi::model_base::register_function((uint64_t)this, &v35, (uint64_t)&v59, (uint64_t)v68);
  v15 = v69;
  if (v69 == v68)
  {
    v16 = 4;
    v15 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_66;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_66:
  v74 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v34, "style_transfer::export_to_coreml");
  std::string::basic_string[abi:ne180100]<0>(&v59, "filename");
  std::string::basic_string[abi:ne180100]<0>(v60, "short_description");
  std::string::basic_string[abi:ne180100]<0>(v62, "additional_user_defined");
  std::string::basic_string[abi:ne180100]<0>(v63, "options");
  v74 = 0;
  v75 = 0uLL;
  *(_QWORD *)v55 = &v74;
  v55[8] = 0;
  v74 = (std::string *)operator new(0x60uLL);
  *(_QWORD *)&v75 = v74;
  *((_QWORD *)&v75 + 1) = v74 + 4;
  *(_QWORD *)&v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75 + 8, (__int128 *)&v59, v64, v74);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>("filename", 0x48uLL, 1uLL, "short_description", "additional_user_defined", "options", (uint64_t)v66);
  turi::model_base::register_function((uint64_t)this, &v34, (uint64_t)&v74, (uint64_t)v66);
  v17 = v67;
  if (v67 == v66)
  {
    v18 = 4;
    v17 = v66;
    goto LABEL_72;
  }
  if (v67)
  {
    v18 = 5;
LABEL_72:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  *(_QWORD *)v55 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  for (m = 0; m != -12; m -= 3)
  {
    if (SHIBYTE(v63[m + 2]) < 0)
      operator delete((void *)v63[m]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v40, "export_to_coreml");
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[18],char const(&)[1],0>((uint64_t)&v59, "short_description", "");
  v58 = 0;
  *((_QWORD *)&v57 + 1) = 0;
  *(_QWORD *)&v57 = (char *)&v57 + 8;
  turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::set(&v57, (uint64_t)v55);
  *(_QWORD *)((char *)&v75 + 5) = *(_QWORD *)&v55[5];
  *(_QWORD *)&v75 = *(_QWORD *)v55;
  BYTE12(v75) = v55[12];
  LODWORD(v74) = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)v64 + 8, "additional_user_defined", (unsigned int *)&v74);
  v33[0] = 0;
  v33[1] = 0;
  v32 = v33;
  turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::set(&v32, (uint64_t)v83);
  *(_QWORD *)&v55[13] = *(_QWORD *)&v83[5];
  *(_QWORD *)&v55[8] = *(_QWORD *)v83;
  v55[20] = v83[12];
  *(_DWORD *)v55 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v65, "options", (unsigned int *)v55);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v38, (const void **)&v59.__r_.__value_.__l.__data_, 3);
  turi::model_base::register_defaults((uint64_t)this, (__int128 *)v40, (uint64_t)&v38);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v38, (char *)v39[0]);
  v20 = 312;
  do
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v56[v20 + 1]);
    if ((char)v56[v20] < 0)
      operator delete(*(void **)&v55[v20]);
    v20 -= 104;
  }
  while (v20);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v55);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v32, v33[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v74);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v57, *((_QWORD **)&v57 + 1));
  if (v41 < 0)
    operator delete(v40[0]);
  std::string::basic_string[abi:ne180100]<0>(&v31, "style_transfer::predict");
  std::string::basic_string[abi:ne180100]<0>(&v59, "data");
  std::string::basic_string[abi:ne180100]<0>(v60, "options");
  v74 = 0;
  v75 = 0uLL;
  *(_QWORD *)v55 = &v74;
  v55[8] = 0;
  v74 = (std::string *)operator new(0x30uLL);
  *(_QWORD *)&v75 = v74;
  *((_QWORD *)&v75 + 1) = v74 + 2;
  *(_QWORD *)&v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75 + 8, (__int128 *)&v59, (__int128 *)v62, v74);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>("data", (std::string::size_type)turi::style_transfer::style_transfer::predict, 0, "options", (uint64_t)v53);
  turi::model_base::register_function((uint64_t)this, &v31, (uint64_t)&v74, (uint64_t)v53);
  v21 = v54;
  if (v54 == v53)
  {
    v22 = 4;
    v21 = v53;
    goto LABEL_89;
  }
  if (v54)
  {
    v22 = 5;
LABEL_89:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  *(_QWORD *)v55 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  for (n = 0; n != -48; n -= 24)
  {
    if ((char)v61[n] < 0)
      operator delete(*(void **)((char *)&v59 + n + 24));
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v30, "style_transfer::import_from_custom_model");
  std::string::basic_string[abi:ne180100]<0>(&v59, "model_data");
  std::string::basic_string[abi:ne180100]<0>(v60, "version");
  v74 = 0;
  v75 = 0uLL;
  *(_QWORD *)v55 = &v74;
  v55[8] = 0;
  v74 = (std::string *)operator new(0x30uLL);
  *(_QWORD *)&v75 = v74;
  *((_QWORD *)&v75 + 1) = v74 + 2;
  *(_QWORD *)&v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75 + 8, (__int128 *)&v59, (__int128 *)v62, v74);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>("model_data", (std::string::size_type)turi::style_transfer::style_transfer::import_from_custom_model, 0, "version", (uint64_t)v51);
  turi::model_base::register_function((uint64_t)this, &v30, (uint64_t)&v74, (uint64_t)v51);
  v24 = v52;
  if (v52 == v51)
  {
    v25 = 4;
    v24 = v51;
    goto LABEL_100;
  }
  if (v52)
  {
    v25 = 5;
LABEL_100:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  *(_QWORD *)v55 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  for (ii = 0; ii != -48; ii -= 24)
  {
    if ((char)v61[ii] < 0)
      operator delete(*(void **)((char *)&v59 + ii + 24));
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v29, "style_transfer::get_styles");
  std::string::basic_string[abi:ne180100]<0>(&v74, "style_index");
  memset(&v59, 0, sizeof(v59));
  *(_QWORD *)v55 = &v59;
  v55[8] = 0;
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
  v59.__r_.__value_.__r.__words[2] = v59.__r_.__value_.__r.__words[0] + 24;
  v59.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v59.__r_.__value_.__r.__words[2], (__int128 *)&v74, v76, (std::string *)v59.__r_.__value_.__l.__data_);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>("style_index", (std::string::size_type)turi::style_transfer::style_transfer::get_styles, 0, (uint64_t)v49);
  turi::model_base::register_function((uint64_t)this, &v29, (uint64_t)&v59, (uint64_t)v49);
  v27 = v50;
  if (v50 == v49)
  {
    v28 = 4;
    v27 = v49;
    goto LABEL_111;
  }
  if (v50)
  {
    v28 = 5;
LABEL_111:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  *(_QWORD *)v55 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  if (SHIBYTE(v75) < 0)
    operator delete(v74);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v74, "get_styles");
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],turi::flexible_type&,0>(&v59, "style_index", (uint64_t)&turi::FLEX_UNDEFINED);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v55, (const void **)&v59.__r_.__value_.__l.__data_, 1);
  turi::model_base::register_defaults((uint64_t)this, (__int128 *)&v74, (uint64_t)v55);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v55, *(char **)&v55[8]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v60);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75) < 0)
    operator delete(v74);
  *((_BYTE *)this + 24) = 1;
}

void sub_217F33894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t a69;
  uint64_t v69;

  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a68, (char *)a69);
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair((uint64_t)&STACK[0x240]);
  if (*(char *)(v69 - 225) < 0)
    operator delete(*(void **)(v69 - 248));
  _Unwind_Resume(a1);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 *result;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  void *__p[2];
  char v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = &v13;
  v17 = 0;
  v13 = (std::string *)operator new(0x18uLL);
  v14 = v13;
  v15 = v13 + 1;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)__p, &v22, v13);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(a2, a3, (uint64_t)&v13, (uint64_t)&v22);
  v16 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  if (v21 < 0)
    operator delete(__p[0]);
  v7 = (uint64_t)v23;
  if (!v23)
    goto LABEL_6;
  if (v23 != &v22)
  {
    v7 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v23 + 16))(v23);
LABEL_6:
    v19 = (_BYTE *)v7;
    goto LABEL_8;
  }
  v19 = v18;
  (*(void (**)(__int128 *, _BYTE *))(v22 + 24))(&v22, v18);
LABEL_8:
  *(_QWORD *)(a4 + 24) = 0;
  v8 = operator new(0x28uLL);
  *v8 = &unk_24D91AF50;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v8 + 1), (uint64_t)v18);
  *(_QWORD *)(a4 + 24) = v8;
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  result = v23;
  if (v23 == &v22)
  {
    v12 = 4;
    result = &v22;
  }
  else
  {
    if (!v23)
      return result;
    v12 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
}

void sub_217F341F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 64);
  if (v26 == (_QWORD *)(v24 - 88))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 88);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_11proprietary14style_transfer14style_transferENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEJEJEEENS5_8functionIFN5boost7variantINSD_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS5_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSK_INS_10model_baseEEENSK_INS_17unity_sframe_baseEEENSK_INS_17unity_sarray_baseEEENS5_3mapISB_NSD_18recursive_variant_ENS5_4lessISB_EENS9_INS5_4pairIKSB_SV_EEEEEENS5_6vectorISV_NS9_ISV_EEEENSD_17recursive_wrapperINS_21function_closure_infoEEEEEEPSO_NSU_ISB_S19_SX_NS9_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D91B050;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_217F343F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 *result;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string **v21;
  char v22;
  _BYTE v23[24];
  _BYTE *v24;
  __int128 v25;
  _QWORD v26[3];
  _QWORD v27[3];
  __int128 v28;
  __int128 *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v25, __s);
  std::string::basic_string[abi:ne180100]<0>(v26, a4);
  std::string::basic_string[abi:ne180100]<0>(v27, a5);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = &v18;
  v22 = 0;
  v18 = (std::string *)operator new(0x48uLL);
  v19 = v18;
  v20 = v18 + 3;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, &v25, &v28, v18);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(a2, a3, (uint64_t)&v18, (uint64_t)&v28);
  v21 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v27[i + 2]) < 0)
      operator delete((void *)v27[i]);
  }
  v12 = (uint64_t)v29;
  if (!v29)
    goto LABEL_8;
  if (v29 != &v28)
  {
    v12 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v29 + 16))(v29);
LABEL_8:
    v24 = (_BYTE *)v12;
    goto LABEL_10;
  }
  v24 = v23;
  (*(void (**)(__int128 *, _BYTE *))(v28 + 24))(&v28, v23);
LABEL_10:
  *(_QWORD *)(a6 + 24) = 0;
  v13 = operator new(0x28uLL);
  *v13 = &unk_24D91A940;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v13 + 1), (uint64_t)v23);
  *(_QWORD *)(a6 + 24) = v13;
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_15;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
  result = v29;
  if (v29 == &v28)
  {
    v17 = 4;
    result = &v28;
  }
  else
  {
    if (!v29)
      return result;
    v17 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v17))();
}

void sub_217F3468C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;

  v21 = *(_QWORD **)(v19 - 80);
  if (v21 == (_QWORD *)(v19 - 104))
  {
    v22 = 4;
    v21 = (_QWORD *)(v19 - 104);
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_14style_transfer14style_transferEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D91AA40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_217F348CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t i;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *result;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string **v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  __int128 v27;
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  __int128 v31;
  __int128 *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v27, __s);
  std::string::basic_string[abi:ne180100]<0>(v28, a4);
  std::string::basic_string[abi:ne180100]<0>(v29, a5);
  std::string::basic_string[abi:ne180100]<0>(v30, a6);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = &v20;
  v24 = 0;
  v20 = (std::string *)operator new(0x60uLL);
  v21 = v20;
  v22 = v20 + 4;
  v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, &v27, &v31, v20);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(a2, a3, (uint64_t)&v20, (uint64_t)&v31);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v30[i + 2]) < 0)
      operator delete((void *)v30[i]);
  }
  v14 = (uint64_t)v32;
  if (!v32)
    goto LABEL_8;
  if (v32 != &v31)
  {
    v14 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v32 + 16))(v32);
LABEL_8:
    v26 = (_BYTE *)v14;
    goto LABEL_10;
  }
  v26 = v25;
  (*(void (**)(__int128 *, _BYTE *))(v31 + 24))(&v31, v25);
LABEL_10:
  *(_QWORD *)(a7 + 24) = 0;
  v15 = operator new(0x28uLL);
  *v15 = &unk_24D91AB40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v15 + 1), (uint64_t)v25);
  *(_QWORD *)(a7 + 24) = v15;
  v16 = v26;
  if (v26 == v25)
  {
    v17 = 4;
    v16 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_15:
  result = v32;
  if (v32 == &v31)
  {
    v19 = 4;
    result = &v31;
  }
  else
  {
    if (!v32)
      return result;
    v19 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v19))();
}

void sub_217F34B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 80);
  if (v20 == (_QWORD *)(v18 - 104))
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 104);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 *result;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string **v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  __int128 *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v23, __s);
  std::string::basic_string[abi:ne180100]<0>(v24, a4);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = &v16;
  v20 = 0;
  v16 = (std::string *)operator new(0x30uLL);
  v17 = v16;
  v18 = v16 + 2;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v23, &v25, v16);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(a2, a3, (uint64_t)&v16, (uint64_t)&v25);
  v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v24[i + 2]) < 0)
      operator delete((void *)v24[i]);
  }
  v10 = (uint64_t)v26;
  if (!v26)
    goto LABEL_8;
  if (v26 != &v25)
  {
    v10 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v26 + 16))(v26);
LABEL_8:
    v22 = (_BYTE *)v10;
    goto LABEL_10;
  }
  v22 = v21;
  (*(void (**)(__int128 *, _BYTE *))(v25 + 24))(&v25, v21);
LABEL_10:
  *(_QWORD *)(a5 + 24) = 0;
  v11 = operator new(0x28uLL);
  *v11 = &unk_24D91AC40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v21);
  *(_QWORD *)(a5 + 24) = v11;
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  result = v26;
  if (v26 == &v25)
  {
    v15 = 4;
    result = &v25;
  }
  else
  {
    if (!v26)
      return result;
    v15 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
}

void sub_217F34E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 64);
  if (v25 == (_QWORD *)(v23 - 88))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 88);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 *result;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string **v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  __int128 *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v23, __s);
  std::string::basic_string[abi:ne180100]<0>(v24, a4);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = &v16;
  v20 = 0;
  v16 = (std::string *)operator new(0x30uLL);
  v17 = v16;
  v18 = v16 + 2;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v23, &v25, v16);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(a2, a3, (uint64_t)&v16, (uint64_t)&v25);
  v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v24[i + 2]) < 0)
      operator delete((void *)v24[i]);
  }
  v10 = (uint64_t)v26;
  if (!v26)
    goto LABEL_8;
  if (v26 != &v25)
  {
    v10 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v26 + 16))(v26);
LABEL_8:
    v22 = (_BYTE *)v10;
    goto LABEL_10;
  }
  v22 = v21;
  (*(void (**)(__int128 *, _BYTE *))(v25 + 24))(&v25, v21);
LABEL_10:
  *(_QWORD *)(a5 + 24) = 0;
  v11 = operator new(0x28uLL);
  *v11 = &unk_24D91AD40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v21);
  *(_QWORD *)(a5 + 24) = v11;
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  result = v26;
  if (v26 == &v25)
  {
    v15 = 4;
    result = &v25;
  }
  else
  {
    if (!v26)
      return result;
    v15 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
}

void sub_217F3511C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 64);
  if (v25 == (_QWORD *)(v23 - 88))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 88);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 *result;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  void *__p[2];
  char v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = &v13;
  v17 = 0;
  v13 = (std::string *)operator new(0x18uLL);
  v14 = v13;
  v15 = v13 + 1;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)__p, &v22, v13);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(a2, a3, (uint64_t)&v13, (uint64_t)&v22);
  v16 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  if (v21 < 0)
    operator delete(__p[0]);
  v7 = (uint64_t)v23;
  if (!v23)
    goto LABEL_6;
  if (v23 != &v22)
  {
    v7 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v23 + 16))(v23);
LABEL_6:
    v19 = (_BYTE *)v7;
    goto LABEL_8;
  }
  v19 = v18;
  (*(void (**)(__int128 *, _BYTE *))(v22 + 24))(&v22, v18);
LABEL_8:
  *(_QWORD *)(a4 + 24) = 0;
  v8 = operator new(0x28uLL);
  *v8 = &unk_24D91AE40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v8 + 1), (uint64_t)v18);
  *(_QWORD *)(a4 + 24) = v8;
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  result = v23;
  if (v23 == &v22)
  {
    v12 = 4;
    result = &v22;
  }
  else
  {
    if (!v23)
      return result;
    v12 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
}

void sub_217F353BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 64);
  if (v26 == (_QWORD *)(v24 - 88))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 88);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91A8B0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F3568C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91A8B0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91A8B0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91A8B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F357E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91A8B0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((__int128 *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(__int128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F35964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  uint64_t *v10;
  std::string v11;
  uint64_t v12;
  uint64_t *v13;
  std::vector<std::string> v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[40];
  _BYTE v18[40];
  _QWORD *v19[3];
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  char *v25[3];
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v20 = 1;
  v21 = 0;
  v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v23 = 0;
  v24 = v25;
  boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul>,turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::vector_data(&v16);
  v15 = a3;
  v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 1))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *((std::string **)a1 + 2), *((__int128 **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 3));
    begin = (__int128 *)v14.__begin_;
    end = (__int128 *)v14.__end_;
  }
  v13 = &v16;
  v10 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v12 = v15;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v10);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(&v10);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(&v10);
  *(_QWORD *)&v26 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26 = *a1;
  std::__invoke[abi:ne180100]<void (turi::style_transfer::style_transfer::* const&)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,turi::gl_sarray&,turi::gl_sarray&,std::map<std::string,turi::flexible_type>&,void>((uint64_t)&v26, &v16, (turi::gl_sarray *)v17, (const turi::gl_sarray *)v18, (uint64_t)v19);
  *(_QWORD *)&v26 = 0;
  DWORD2(v26) = 0;
  BYTE12(v26) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v26, &turi::FLEX_UNDEFINED);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)((char *)&v26 + 5);
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 20) = BYTE12(v26);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)&v26 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v19, v19[1]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v18);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v17);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v24, v25[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(v21);
}

void sub_217F35B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  *(_QWORD *)(v12 - 104) = v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 104));
  boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::~vector((_QWORD **)va);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v12 - 160));
  _Unwind_Resume(a1);
}

_QWORD **boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::~vector(_QWORD **a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)(a1 + 11), a1[12]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)(a1 + 6));
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)(a1 + 1));
  return a1;
}

_QWORD *boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul>,turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::vector_data(_QWORD *a1)
{
  turi::gl_sarray *v2;

  *a1 = 0;
  v2 = (turi::gl_sarray *)(a1 + 6);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 1));
  turi::gl_sarray::gl_sarray(v2);
  a1[13] = 0;
  a1[12] = 0;
  a1[11] = a1 + 12;
  return a1;
}

void sub_217F35C50(_Unwind_Exception *a1)
{
  turi::gl_sarray *v1;

  turi::gl_sarray::~gl_sarray(v1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[5];

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      v4[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sarray,void>::get((int *)(v3 + 56), (uint64_t)v4);
    turi::gl_sarray::operator=(*a1 + 8, (uint64_t)v4);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[5];

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      v4[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sarray,void>::get((int *)(v3 + 56), (uint64_t)v4);
    turi::gl_sarray::operator=(*a1 + 48, (uint64_t)v4);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    v4 = *a1 + 96;
    v5 = (uint64_t *)(*a1 + 88);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(_QWORD **)v4);
    v6 = v9;
    *(_QWORD *)(v4 - 8) = v8;
    *(_QWORD *)v4 = v6;
    v7 = v10;
    *(_QWORD *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      v8 = &v9;
      v9 = 0;
      v10 = 0;
      v6 = 0;
    }
    else
    {
      *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void std::__invoke[abi:ne180100]<void (turi::style_transfer::style_transfer::* const&)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,turi::gl_sarray&,turi::gl_sarray&,std::map<std::string,turi::flexible_type>&,void>(uint64_t a1, _QWORD *a2, turi::gl_sarray *a3, const turi::gl_sarray *a4, uint64_t a5)
{
  uint64_t v7;
  void (*v8)(_QWORD *, _BYTE *, _BYTE *, uint64_t *);
  _QWORD *v9;
  uint64_t v10[3];
  _BYTE v11[40];
  _BYTE v12[40];

  v8 = *(void (**)(_QWORD *, _BYTE *, _BYTE *, uint64_t *))a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = (_QWORD *)(*a2 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v8 = *(void (**)(_QWORD *, _BYTE *, _BYTE *, uint64_t *))(*v9 + v8);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v12, a3);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v11, a4);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v10, a5);
  v8(v9, v12, v11, v10);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v10, (_QWORD *)v10[1]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v11);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v12);
}

void sub_217F35F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va, v5);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va1);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va2);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91A940;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91A940;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91A940;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F36070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91A940;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = (_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(char ***)a3;
  v8 = (char *)v6;
  if (*(_QWORD *)(a3 + 16))
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *(_QWORD *)a3 = v5;
    *v5 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F3624C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  uint64_t v8;
  uint64_t v9[3];
  std::string *v10;
  uint64_t v11;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  if (lpsrc)
  else
    v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a3);
  v10 = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string **, uint64_t *))(*(_QWORD *)v8 + 48))(&v11, v8, &v10, v9);
  v10 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v11, v11 ^ ((int)v11 >> 31), &v10, (uint64_t)v12);
  *(_DWORD *)a4 = v11 ^ ((int)v11 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
}

void sub_217F36374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91A9C0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F365C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED1Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91A9C0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED0Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91A9C0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91A9C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F3671C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91A9C0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7destroyEv(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE18destroy_deallocateEv(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EEclEOS1P_OS1F_(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F36898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void (*v8)(_QWORD *);
  uint64_t v9;
  _QWORD *v10;
  std::string v11;
  uint64_t v12;
  uint64_t *v13;
  std::vector<std::string> v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22[2];
  void **v23[3];

  v23[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v17 = 1;
  __p = 0;
  v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  v20 = 0;
  v21 = v22;
  v15 = a3;
  v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v14.__begin_;
    end = (__int128 *)v14.__end_;
  }
  v13 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v12 = v15;
  v23[0] = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  v8 = *(void (**)(_QWORD *))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)(v16 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(void (**)(_QWORD *))(*v10 + v8);
  v8(v10);
  memset(v23, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v23, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v23 + 5);
  *(void ***)(a4 + 8) = v23[0];
  *(_BYTE *)(a4 + 20) = BYTE4(v23[1]);
  *(_DWORD *)a4 = 0;
  v23[0] = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v21, v22[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
}

void sub_217F36A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  *(_QWORD *)(v14 - 72) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91AA40;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91AA40;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91AA40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F36B84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEPNS0_6__baseIS1F_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91AA40;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_EclEOS1B_OS1E_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_14style_transfer14style_transferEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS19_S1C_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_14style_transfer14style_transferEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS19_S1C_E_;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91AAC0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F36EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91AAC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91AAC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91AAC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F37004(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91AAC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F37180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void **p_data;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  uint64_t *v17;
  std::string v18;
  uint64_t v19;
  uint64_t *v20;
  std::vector<std::string> v21;
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  void *__p[2];
  __int128 v26;
  _QWORD **v27;
  _QWORD *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char **v35;
  char *v36[2];
  char v37;

  v31 = 1;
  v32 = 0;
  v33 = 0;
  v36[0] = 0;
  v36[1] = 0;
  v34 = 0;
  v35 = v36;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)__p = 0u;
  v26 = 0u;
  v27 = v28;
  v28[0] = 0;
  v30[0] = 0;
  v30[1] = 0;
  v28[1] = 0;
  v29 = v30;
  v22 = a3;
  v23 = a2;
  memset(&v21, 0, sizeof(v21));
  if (&v21 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v21.__begin_;
    end = (__int128 *)v21.__end_;
  }
  v20 = &v23;
  v17 = &v23;
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v19 = v22;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>>((uint64_t)&v37, (uint64_t *)&v17);
  v15 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15 = 0;
  v16 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::coreml::MLModelWrapper>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v15, (__int128 *)a1, &v23);
  p_data = (void **)&v15->__r_.__value_.__l.__data_;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = v16;
    *(_QWORD *)(a4 + 8) = p_data;
    *(_QWORD *)(a4 + 16) = v9;
    *(_DWORD *)a4 = 3;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v15;
    *(_QWORD *)(a4 + 16) = 0;
    *(_DWORD *)a4 = 3;
  }
  v15 = (std::string *)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v24[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v35, v36[0]);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
}

void sub_217F373A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>::~vector((uint64_t)va1);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v2 - 128));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::coreml::MLModelWrapper>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;

  v8 = *a2;
  std::__invoke[abi:ne180100]<std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::* const&)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,std::string&,std::string&,std::map<std::string,turi::flexible_type>&,std::map<std::string,turi::flexible_type>&,void>((uint64_t)&v8, a3, (uint64_t)(a3 + 1), (uint64_t)(a3 + 4), (uint64_t)(a3 + 7), (uint64_t)(a3 + 10));
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>::~vector(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 80, *(_QWORD **)(a1 + 88));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, uint64_t *a2)
{
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<3>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(a2);
}

double turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  double result;
  std::string v7;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      v7.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::string,void>::get((int *)(v3 + 56), &v7);
    v4 = *a1;
    v5 = (void **)(*a1 + 32);
    if (*(char *)(v4 + 55) < 0)
      operator delete(*v5);
    result = *(double *)&v7.__r_.__value_.__l.__data_;
    *(std::string *)v5 = v7;
  }
  return result;
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<3>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    v4 = *a1 + 64;
    v5 = (uint64_t *)(*a1 + 56);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(_QWORD **)v4);
    v6 = v9;
    *(_QWORD *)(v4 - 8) = v8;
    *(_QWORD *)v4 = v6;
    v7 = v10;
    *(_QWORD *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      v8 = &v9;
      v9 = 0;
      v10 = 0;
      v6 = 0;
    }
    else
    {
      *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 5)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 96));
    if (a1[4] + 8 == v3)
    {
      v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(mpl_::integral_c<int,4>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    v4 = *a1 + 88;
    v5 = (uint64_t *)(*a1 + 80);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(_QWORD **)v4);
    v6 = v9;
    *(_QWORD *)(v4 - 8) = v8;
    *(_QWORD *)v4 = v6;
    v7 = v10;
    *(_QWORD *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      v8 = &v9;
      v9 = 0;
      v10 = 0;
      v6 = 0;
    }
    else
    {
      *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void std::__invoke[abi:ne180100]<std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::* const&)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,std::string&,std::string&,std::map<std::string,turi::flexible_type>&,std::map<std::string,turi::flexible_type>&,void>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  void (*v10)(_QWORD *, std::string *, std::string *, uint64_t *, uint64_t *);
  _QWORD *v11;
  uint64_t v12[3];
  uint64_t v13[3];
  std::string v14;
  std::string v15;

  v10 = *(void (**)(_QWORD *, std::string *, std::string *, uint64_t *, uint64_t *))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = (_QWORD *)(*a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v10 = *(void (**)(_QWORD *, std::string *, std::string *, uint64_t *, uint64_t *))(*v11 + v10);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v15 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v14 = *(std::string *)a4;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v13, a5);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v12, a6);
  v10(v11, &v15, &v14, v13, v12);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v12, (_QWORD *)v12[1]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v13, (_QWORD *)v13[1]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_217F3787C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91AB40;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91AB40;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91AB40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F379EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91AB40;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91ABC0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F37D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91ABC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91ABC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91ABC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F37E6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91ABC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F37FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  uint64_t *v17;
  std::string v18;
  uint64_t v19;
  uint64_t *v20;
  std::vector<std::string> v21;
  uint64_t v22;
  char v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  void **v29[2];
  std::__shared_weak_count *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  char v35;
  _QWORD **v36;
  _QWORD *v37[3];

  v37[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v23 = 1;
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v37[0] = 0;
  v37[1] = 0;
  v36 = v37;
  v31 = a2;
  memset(&v21, 0, sizeof(v21));
  v22 = a3;
  if (&v21 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v21.__begin_;
    end = (__int128 *)v21.__end_;
  }
  v20 = &v31;
  v17 = &v31;
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v19 = v22;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v17);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<2>(&v17);
  v29[0] = (void **)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v15);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v15, (__int128 *)a1, (uint64_t)&v31);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v29, (const turi::gl_sframe *)v15);
  v8.n128_f64[0] = turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)v29, a4);
  v29[0] = (void **)off_24D91E9C0;
  v9 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v15[0] = off_24D91E9C0;
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v8);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v29[0] = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v36, v37[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v32);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F38250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>::~vector(v2 - 184);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (**v7)(turi::gl_sframe *__hidden);
  std::__shared_weak_count *v8;
  __int128 v9;

  v9 = *a2;
  std::__invoke[abi:ne180100]<turi::gl_sframe (turi::style_transfer::style_transfer::* const&)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&,void>((uint64_t)&v9, (_QWORD *)a3, (int *)(a3 + 8), a3 + 88);
  turi::gl_sframe::operator=(a1, (uint64_t)&v7);
  v7 = off_24D91E9C0;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_217F38378(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>::~vector(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a1 + 8));
  return a1;
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  boost::detail::variant *v4;
  int *v5;
  std::string *v6;
  _QWORD *v7;
  _QWORD v8[10];

  v8[9] = *MEMORY[0x24BDAC8D0];
  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    v5 = (int *)(v3 + 56);
    v4 = (boost::detail::variant *)*(unsigned int *)(v3 + 56);
    v6 = (std::string *)v8;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v4 ^ ((int)v4 >> 31), &v6, (uint64_t)(v5 + 2));
    LODWORD(v7) = *v5 ^ (*v5 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(*a1 + 8), (unsigned int *)&v7);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v7);
  }
}

void sub_217F384BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<2>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    v4 = *a1 + 96;
    v5 = (uint64_t *)(*a1 + 88);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(_QWORD **)v4);
    v6 = v9;
    *(_QWORD *)(v4 - 8) = v8;
    *(_QWORD *)v4 = v6;
    v7 = v10;
    *(_QWORD *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      v8 = &v9;
      v9 = 0;
      v10 = 0;
      v6 = 0;
    }
    else
    {
      *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void std::__invoke[abi:ne180100]<turi::gl_sframe (turi::style_transfer::style_transfer::* const&)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&,void>(uint64_t a1, _QWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(_QWORD *, int *, uint64_t *);
  _QWORD *v8;
  uint64_t v9[3];
  std::string *v10;
  int v11;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(void (**)(_QWORD *, int *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = (_QWORD *)(*a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v7 = *(void (**)(_QWORD *, int *, uint64_t *))(*v8 + v7);
  v10 = (std::string *)v12;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a3, *a3 ^ (*a3 >> 31), &v10, (uint64_t)(a3 + 2));
  v11 = *a3 ^ (*a3 >> 31);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v9, a4);
  v7(v8, &v11, v9);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v9, (_QWORD *)v9[1]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
}

void sub_217F38694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va, v5);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91AC40;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91AC40;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91AC40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F387D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91AC40;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91ACC0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F38AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91ACC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91ACC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91ACC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F38C58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91ACC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((__int128 *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(__int128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F38DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  char *v8;
  std::string v9;
  uint64_t v10;
  uint64_t *v11;
  std::vector<std::string> v12;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  char *v16[2];
  uint64_t v17;
  char v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23[3];
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v18 = 1;
  __p = 0;
  v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v21 = 0;
  v22 = v23;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v14 = a2;
  v15 = v16;
  memset(&v12, 0, sizeof(v12));
  v13 = a3;
  if (&v12 == (std::vector<std::string> *)(a1 + 1))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *((std::string **)a1 + 2), *((__int128 **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 3));
    begin = (__int128 *)v12.__begin_;
    end = (__int128 *)v12.__end_;
  }
  v11 = &v14;
  v8 = (char *)&v14;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v10 = v13;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<1>(&v8);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<2>(&v8);
  *(_QWORD *)&v24 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24 = *a1;
  std::__mem_fn<void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long)>::operator()[abi:ne180100]<turi::style_transfer::style_transfer*&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>&,unsigned long &>((uint64_t)&v24, &v14, (const void ***)&v15, &v17);
  *(_QWORD *)&v24 = 0;
  DWORD2(v24) = 0;
  BYTE12(v24) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v24, &turi::FLEX_UNDEFINED);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)((char *)&v24 + 5);
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 20) = BYTE12(v24);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)&v24 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v15, v16[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_217F38FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va;

  va_start(va, a17);
  *(_QWORD *)(v19 - 120) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 120));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v17, a15);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<1>(char **a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a1[4], (const void **)v1 + 3);
    if (a1[4] + 8 == (char *)v3)
    {
      v9 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::toolkit_function_wrapper_impl::read_arg<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t *)(v3 + 56), (uint64_t)&v9);
    v4 = (uint64_t)(*a1 + 16);
    v5 = (uint64_t *)(*a1 + 8);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v5, *(char **)v4);
    *(_QWORD *)(v4 - 8) = v9;
    v6 = v10;
    *(_QWORD *)v4 = v10;
    v7 = v11;
    *(_QWORD *)(v4 + 8) = v11;
    if (v7)
    {
      v8 = 0;
      *((_QWORD *)v6 + 2) = v4;
      v9 = &v10;
      v10 = 0;
      v11 = 0;
    }
    else
    {
      *v5 = v4;
      v8 = v10;
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v9, v8);
  }
}

_QWORD *turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<2>(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;

  v1 = result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - v1) >> 3) >= 3)
  {
    v2 = result;
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(result[4], (const void **)(v1 + 48));
    if (v2[4] + 8 == v3)
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    result = (_QWORD *)turi::variant_converter<unsigned long,void>::get((uint64_t)&v4, (int *)(v3 + 56));
    *(_QWORD *)(*v2 + 32) = result;
  }
  return result;
}

void std::__mem_fn<void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long)>::operator()[abi:ne180100]<turi::style_transfer::style_transfer*&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>&,unsigned long &>(uint64_t a1, _QWORD *a2, const void ***a3, _QWORD *a4)
{
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t *, _QWORD);
  _QWORD *v7;
  uint64_t v8[3];

  v6 = *(void (**)(_QWORD *, uint64_t *, _QWORD))a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(_QWORD *, uint64_t *, _QWORD))(*v7 + v6);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v8, a3);
  v6(v7, v8, *a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v8, (char *)v8[1]);
}

void sub_217F391D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91AD40;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91AD40;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91AD40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F39304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91AD40;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91ADC0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F39628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91ADC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91ADC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91ADC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F39784(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91ADC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F39900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  uint64_t *v17;
  std::string v18;
  uint64_t v19;
  uint64_t *v20;
  std::vector<std::string> v21;
  uint64_t v22;
  char v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  void **v29[2];
  std::__shared_weak_count *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v23 = 1;
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v31 = a2;
  v22 = a3;
  memset(&v21, 0, sizeof(v21));
  if (&v21 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v21.__begin_;
    end = (__int128 *)v21.__end_;
  }
  v20 = &v31;
  v17 = &v31;
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v19 = v22;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v17);
  v29[0] = (void **)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v15);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v15, (__int128 *)a1, (uint64_t)&v31);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v29, (const turi::gl_sframe *)v15);
  v8.n128_f64[0] = turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)v29, a4);
  v29[0] = (void **)off_24D91E9C0;
  v9 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v15[0] = off_24D91E9C0;
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v8);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v29[0] = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v32);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F39B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  unsigned int *v22;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v22);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a22);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (**v7)(turi::gl_sframe *__hidden);
  std::__shared_weak_count *v8;
  __int128 v9;

  v9 = *a2;
  std::__mem_fn<turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>)>::operator()[abi:ne180100]<turi::style_transfer::style_transfer*&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&>((uint64_t)&v9, (_QWORD *)a3, (int *)(a3 + 8));
  turi::gl_sframe::operator=(a1, (uint64_t)&v7);
  v7 = off_24D91E9C0;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_217F39C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

void std::__mem_fn<turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>)>::operator()[abi:ne180100]<turi::style_transfer::style_transfer*&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&>(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v4;
  void (*v5)(_QWORD *, int *);
  _QWORD *v6;
  std::string *v7;
  int v8;
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  v5 = *(void (**)(_QWORD *, int *))a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(*a2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *, int *))(*v6 + v5);
  v7 = (std::string *)v9;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a3, *a3 ^ (*a3 >> 31), &v7, (uint64_t)(a3 + 2));
  v8 = *a3 ^ (*a3 >> 31);
  v5(v6, &v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v8);
}

void sub_217F39D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91AE40;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91AE40;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91AE40;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F39E7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91AE40;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

_QWORD *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],turi::flexible_type&,0>(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *result;
  unint64_t **v5;
  unint64_t *v6;
  BOOL v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  result = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  result[4] = 0;
  v5 = (unint64_t **)(result + 4);
  *((_DWORD *)result + 10) = 0;
  *((_BYTE *)result + 44) = 0;
  if (result + 4 != (_QWORD *)a3)
  {
    v6 = *(unint64_t **)a3;
    *(_QWORD *)((char *)result + 37) = *(_QWORD *)(a3 + 5);
    *v5 = v6;
    LODWORD(v6) = *(unsigned __int8 *)(a3 + 12);
    *((_BYTE *)result + 44) = (_BYTE)v6;
    v7 = v6 > 9;
    v8 = (1 << (char)v6) & 0x33C;
    if (!v7 && v8 != 0)
    {
      v10 = *v5;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  *((_DWORD *)result + 6) = 0;
  return result;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91AEC0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F3A224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91AEC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91AEC0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91AEC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F3A380(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91AEC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F3A4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  _BYTE v10[40];
  uint64_t *v11;
  std::string v12;
  uint64_t v13;
  uint64_t *v14;
  std::vector<std::string> v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[48];
  void *__p;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23[2];
  void **v24[5];

  v18[40] = 1;
  __p = 0;
  v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v21 = 0;
  v22 = v23;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v18);
  v16 = a3;
  v17 = a2;
  memset(&v15, 0, sizeof(v15));
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v15.__begin_;
    end = (__int128 *)v15.__end_;
  }
  v14 = &v17;
  v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v11);
  v24[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v10);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sarray>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v10, (__int128 *)a1, &v17);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v24, (const turi::gl_sarray *)v10);
  turi::variant_converter<turi::gl_sarray,void>::set((const turi::gl_sarray *)v24, a4);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v24);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  v24[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v18);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_217F3A6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  turi::gl_sarray *v30;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  turi::gl_sarray::~gl_sarray(v30);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a30);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sarray>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  _BYTE v4[40];
  __int128 v5;

  v5 = *a2;
  std::__mem_fn<turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray)>::operator()[abi:ne180100]<turi::proprietary::style_transfer::style_transfer*&,turi::gl_sarray&>((uint64_t)&v5, a3, (turi::gl_sarray *)(a3 + 1));
  turi::gl_sarray::operator=(a1, (uint64_t)v4);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
}

void sub_217F3A768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

void std::__mem_fn<turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray)>::operator()[abi:ne180100]<turi::proprietary::style_transfer::style_transfer*&,turi::gl_sarray&>(uint64_t a1, _QWORD *a2, turi::gl_sarray *a3)
{
  uint64_t v3;
  void (*v4)(_QWORD *, _BYTE *);
  _QWORD *v5;
  _BYTE v6[40];

  v4 = *(void (**)(_QWORD *, _BYTE *))a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = (_QWORD *)(*a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(void (**)(_QWORD *, _BYTE *))(*v5 + v4);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v6, a3);
  v4(v5, v6);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v6);
}

void sub_217F3A7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91AF50;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91AF50;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91AF50;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F3A90C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91AF50;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = (_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(char ***)a3;
  v8 = (char *)v6;
  if (*(_QWORD *)(a3 + 16))
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *(_QWORD *)a3 = v5;
    *v5 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F3AAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  uint64_t v8;
  uint64_t v9[3];
  std::string *v10;
  uint64_t v11;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  if (lpsrc)
  else
    v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a3);
  v10 = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string **, uint64_t *))(*(_QWORD *)v8 + 48))(&v11, v8, &v10, v9);
  v10 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v11, v11 ^ ((int)v11 >> 31), &v10, (uint64_t)v12);
  *(_DWORD *)a4 = v11 ^ ((int)v11 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
}

void sub_217F3AC10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91AFD0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F3AE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EED1Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91AFD0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EED0Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91AFD0;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91AFD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F3AFB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE7__cloneEPNS0_6__baseIS1T_EE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91AFD0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE7destroyEv(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE18destroy_deallocateEv(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EEclEOS1Q_OS1G_(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F3B134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::string __p;
  uint64_t *v9;
  std::string v10;
  uint64_t v11;
  uint64_t *v12;
  std::vector<std::string> v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21[2];
  _BYTE v22[13];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v16 = 1;
  v17 = 0;
  v18 = 0;
  v21[0] = 0;
  v21[1] = 0;
  v19 = 0;
  v20 = v21;
  v14 = a3;
  v15 = a2;
  memset(&v13, 0, sizeof(v13));
  if (&v13 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v13.__begin_;
    end = (__int128 *)v13.__end_;
  }
  v12 = &v15;
  v9 = &v15;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v11 = v14;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  memset(&__p, 0, sizeof(__p));
  _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_11proprietary14style_transfer14style_transferES8_JEEENS2_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSN_INS_10model_baseEEENSN_INS_17unity_sframe_baseEEENSN_INS_17unity_sarray_baseEEENS2_3mapIS8_NSG_18recursive_variant_ENS2_4lessIS8_EENS6_INS2_4pairIKS8_SY_EEEEEENS2_6vectorISY_NS6_ISY_EEEENSG_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NSX_IS8_S1C_S10_NS6_INS11_IS12_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_IS8_NS6_IS8_EEEEENKUlPSE_S1H_E_clES1R_S1H_EUlvE_EEvT_((uint64_t)&__p, a1, &v15);
  turi::flexible_type_converter<std::string>::set(&__p, (uint64_t)v22);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)&v22[5];
  *(_QWORD *)(a4 + 8) = *(_QWORD *)v22;
  *(_BYTE *)(a4 + 20) = v22[12];
  *(_DWORD *)a4 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v17);
}

void sub_217F3B2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a27);
  _Unwind_Resume(a1);
}

double _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_11proprietary14style_transfer14style_transferES8_JEEENS2_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSN_INS_10model_baseEEENSN_INS_17unity_sframe_baseEEENSN_INS_17unity_sarray_baseEEENS2_3mapIS8_NSG_18recursive_variant_ENS2_4lessIS8_EENS6_INS2_4pairIKS8_SY_EEEEEENS2_6vectorISY_NS6_ISY_EEEENSG_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NSX_IS8_S1C_S10_NS6_INS11_IS12_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_IS8_NS6_IS8_EEEEENKUlPSE_S1H_E_clES1R_S1H_EUlvE_EEvT_(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(*a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + v5);
  v5(&v8, v6);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  result = *(double *)&v8;
  *(_OWORD *)a1 = v8;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91B050;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91B050;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91B050;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F3B498(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91B050;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_EclEOS1C_OS1F_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_11proprietary14style_transfer14style_transferENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEJEJEEENS5_8functionIFN5boost7variantINSD_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS5_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSK_INS_10model_baseEEENSK_INS_17unity_sframe_baseEEENSK_INS_17unity_sarray_baseEEENS5_3mapISB_NSD_18recursive_variant_ENS5_4lessISB_EENS9_INS5_4pairIKSB_SV_EEEEEENS5_6vectorISV_NS9_ISV_EEEENSD_17recursive_wrapperINS_21function_closure_infoEEEEEEPSO_NSU_ISB_S19_SX_NS9_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_11proprietary14style_transfer14style_transferENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEJEJEEENS5_8functionIFN5boost7variantINSD_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS5_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSK_INS_10model_baseEEENSK_INS_17unity_sframe_baseEEENSK_INS_17unity_sarray_baseEEENS5_3mapISB_NSD_18recursive_variant_ENS5_4lessISB_EENS9_INS5_4pairIKSB_SV_EEEEEENS5_6vectorISV_NS9_ISV_EEEENSD_17recursive_wrapperINS_21function_closure_infoEEEEEEPSO_NSU_ISB_S19_SX_NS9_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_;
}

void sub_217F3B734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

char *std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[20],char const*>(uint64_t **a1, char *a2, char **a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[20],char const*>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_217F3B888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[20],char const*>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(v8 + 4, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217F3B8F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(_QWORD *a1, char *a2, char **a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::flexible_type::flexible_type((turi::flexible_type *)(v5 + 3), *a3);
  return a1;
}

void sub_217F3B944(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[19],BOOL>(uint64_t **a1, char *a2, unsigned __int8 *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[19],BOOL>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_217F3B9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[19],BOOL>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::string::basic_string[abi:ne180100]<0>(v8 + 4, a2);
  *((_BYTE *)v8 + 68) = 0;
  *((_DWORD *)v8 + 16) = 0;
  v8[7] = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217F3BA68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[11],int &>(uint64_t **a1, char *a2, int *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[11],int &>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_217F3BB00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[11],int &>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::string::basic_string[abi:ne180100]<0>(v8 + 4, a2);
  *((_BYTE *)v8 + 68) = 0;
  *((_DWORD *)v8 + 16) = 0;
  v8[7] = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217F3BB88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[13],unsigned long &>(uint64_t **a1, char *a2, _QWORD *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[13],unsigned long &>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_217F3BC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[13],unsigned long &>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::string::basic_string[abi:ne180100]<0>(v8 + 4, a2);
  *((_BYTE *)v8 + 68) = 0;
  *((_DWORD *)v8 + 16) = 0;
  v8[7] = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217F3BCA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<CoreML::Model,std::allocator<CoreML::Model>,CoreML::Specification::Model &,void>@<X0>(const CoreML::Specification::Model *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<CoreML::Model>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::Model &,std::allocator<CoreML::Model>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217F3BD04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CoreML::Model>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::Model &,std::allocator<CoreML::Model>,0>(_QWORD *a1, const CoreML::Specification::Model *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D91B0D0;
  a1[1] = 0;
  CoreML::Model::Model((CoreML::Model *)(a1 + 3), a2);
  return a1;
}

void sub_217F3BD50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91B0D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91B0D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<CoreML::Model>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Model>,void>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x108uLL);
  std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<CoreML::Model>,std::allocator<turi::coreml::MLModelWrapper>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_217F3BE08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<CoreML::Model>,std::allocator<turi::coreml::MLModelWrapper>,0>(uint64_t a1, __int128 *a2)
{
  double result;
  __int128 v3;

  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_24D91B120;
  v3 = *a2;
  *a2 = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 24) = &unk_24D91B170;
  *(_OWORD *)(a1 + 248) = v3;
  return result;
}

void std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91B120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91B120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::coreml::MLModelWrapper::~MLModelWrapper(turi::coreml::MLModelWrapper *this)
{
  *(_QWORD *)this = &unk_24D91B170;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  turi::model_base::~model_base(this);
}

{
  *(_QWORD *)this = &unk_24D91B170;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  turi::model_base::~model_base(this);
  JUMPOUT(0x219A19A08);
}

const char *turi::coreml::MLModelWrapper::name(turi::coreml::MLModelWrapper *this)
{
  return "_MLModelWrapper";
}

_QWORD *turi::coreml::MLModelWrapper::uid(turi::coreml::MLModelWrapper *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(turi::coreml::MLModelWrapper::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/coreml_export/mlmodel_wrapper.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::coreml::MLModelWrapper::uid(void)::_uid, &dword_217E69000);
  }
  return turi::coreml::MLModelWrapper::uid(void)::_uid;
}

void sub_217F3C00C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::coreml::MLModelWrapper::perform_registration(turi::coreml::MLModelWrapper *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::string __str;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string __p;
  std::string **v11;
  char v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  __int128 v17;
  char v18;
  __int128 v19;

  *(_QWORD *)&v19 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 24))
    return;
  std::string::basic_string[abi:ne180100]<0>(&__p, "MLModelWrapper::save");
  std::string::basic_string[abi:ne180100]<0>(&v17, "path");
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  v12 = 0;
  v7 = (std::string *)operator new(0x18uLL);
  v8 = v7;
  v9 = v7 + 1;
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, &v17, &v19, v7);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>("path", (std::string::size_type)turi::coreml::MLModelWrapper::save, 0, (uint64_t)v15);
  turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v7, (uint64_t)v15);
  v2 = v16;
  if (v16 == v15)
  {
    v3 = 4;
    v2 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  v11 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v18 < 0)
    operator delete((void *)v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "MLModelWrapper::add_metadata");
  std::string::basic_string[abi:ne180100]<0>(&v17, "context_metadata");
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  v12 = 0;
  v7 = (std::string *)operator new(0x18uLL);
  v8 = v7;
  v9 = v7 + 1;
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, &v17, &v19, v7);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>("context_metadata", (std::string::size_type)turi::coreml::MLModelWrapper::add_metadata, 0, (uint64_t)v13);
  turi::model_base::register_function((uint64_t)this, &__str, (uint64_t)&v7, (uint64_t)v13);
  v4 = v14;
  if (v14 == v13)
  {
    v5 = 4;
    v4 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v5 = 5;
LABEL_15:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v11 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v18 < 0)
    operator delete((void *)v17);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *((_BYTE *)this + 24) = 1;
}

void sub_217F3C27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  a22 = (void **)&a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 *result;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  void *__p[2];
  char v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = &v13;
  v17 = 0;
  v13 = (std::string *)operator new(0x18uLL);
  v14 = v13;
  v15 = v13 + 1;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)__p, &v22, v13);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(a2, a3, (uint64_t)&v13, (uint64_t)&v22);
  v16 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  if (v21 < 0)
    operator delete(__p[0]);
  v7 = (uint64_t)v23;
  if (!v23)
    goto LABEL_6;
  if (v23 != &v22)
  {
    v7 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v23 + 16))(v23);
LABEL_6:
    v19 = (_BYTE *)v7;
    goto LABEL_8;
  }
  v19 = v18;
  (*(void (**)(__int128 *, _BYTE *))(v22 + 24))(&v22, v18);
LABEL_8:
  *(_QWORD *)(a4 + 24) = 0;
  v8 = operator new(0x28uLL);
  *v8 = &unk_24D91B268;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v8 + 1), (uint64_t)v18);
  *(_QWORD *)(a4 + 24) = v8;
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  result = v23;
  if (v23 == &v22)
  {
    v12 = 4;
    result = &v22;
  }
  else
  {
    if (!v23)
      return result;
    v12 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
}

void sub_217F3C554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 64);
  if (v26 == (_QWORD *)(v24 - 88))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 88);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 *result;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  void *__p[2];
  char v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = &v13;
  v17 = 0;
  v13 = (std::string *)operator new(0x18uLL);
  v14 = v13;
  v15 = v13 + 1;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)__p, &v22, v13);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(a2, a3, (uint64_t)&v13, (uint64_t)&v22);
  v16 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  if (v21 < 0)
    operator delete(__p[0]);
  v7 = (uint64_t)v23;
  if (!v23)
    goto LABEL_6;
  if (v23 != &v22)
  {
    v7 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v23 + 16))(v23);
LABEL_6:
    v19 = (_BYTE *)v7;
    goto LABEL_8;
  }
  v19 = v18;
  (*(void (**)(__int128 *, _BYTE *))(v22 + 24))(&v22, v18);
LABEL_8:
  *(_QWORD *)(a4 + 24) = 0;
  v8 = operator new(0x28uLL);
  *v8 = &unk_24D91B368;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v8 + 1), (uint64_t)v18);
  *(_QWORD *)(a4 + 24) = v8;
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  result = v23;
  if (v23 == &v22)
  {
    v12 = 4;
    result = &v22;
  }
  else
  {
    if (!v23)
      return result;
    v12 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
}

void sub_217F3C7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 64);
  if (v26 == (_QWORD *)(v24 - 88))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 88);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91B1D8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F3CA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91B1D8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91B1D8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91B1D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F3CBF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91B1D8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F3CD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void (*v8)(_QWORD *, void **);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  std::string v12;
  uint64_t v13;
  uint64_t *v14;
  std::vector<std::string> v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  char *v25[2];
  void **v26[3];

  v26[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v20 = 1;
  v21 = 0;
  v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v23 = 0;
  v24 = v25;
  __p[1] = 0;
  v19 = 0;
  v17 = a2;
  __p[0] = 0;
  memset(&v15, 0, sizeof(v15));
  v16 = a3;
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v15.__begin_;
    end = (__int128 *)v15.__end_;
  }
  v14 = &v17;
  v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v11);
  v26[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  v8 = *(void (**)(_QWORD *, void **))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)(v17 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(void (**)(_QWORD *, void **))(*v10 + v8);
  v8(v10, __p);
  memset(v26, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v26, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v26 + 5);
  *(void ***)(a4 + 8) = v26[0];
  *(_BYTE *)(a4 + 20) = BYTE4(v26[1]);
  *(_DWORD *)a4 = 0;
  v26[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v24, v25[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(v21);
}

void sub_217F3CF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 88) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 88));
  if (a25 < 0)
    operator delete(__p);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a26);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91B268;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91B268;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91B268;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F3D0A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91B268;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = (_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(char ***)a3;
  v8 = (char *)v6;
  if (*(_QWORD *)(a3 + 16))
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *(_QWORD *)a3 = v5;
    *v5 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F3D284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  uint64_t v8;
  uint64_t v9[3];
  std::string *v10;
  uint64_t v11;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  if (lpsrc)
  else
    v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a3);
  v10 = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string **, uint64_t *))(*(_QWORD *)v8 + 48))(&v11, v8, &v10, v9);
  v10 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v11, v11 ^ ((int)v11 >> 31), &v10, (uint64_t)v12);
  *(_DWORD *)a4 = v11 ^ ((int)v11 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
}

void sub_217F3D3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D91B2E8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_217F3D5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91B2E8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D91B2E8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D91B2E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_217F3D754(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D91B2E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_217F3D8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void (*v8)(_QWORD *, _QWORD ***);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  std::string v12;
  uint64_t v13;
  uint64_t *v14;
  std::vector<std::string> v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD *v19[2];
  char v20;
  void *__p;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  char *v25[2];
  void **v26[3];

  v26[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v20 = 1;
  __p = 0;
  v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v23 = 0;
  v24 = v25;
  v19[0] = 0;
  v19[1] = 0;
  v17 = a2;
  v18 = v19;
  memset(&v15, 0, sizeof(v15));
  v16 = a3;
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v15.__begin_;
    end = (__int128 *)v15.__end_;
  }
  v14 = &v17;
  v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v11);
  v26[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  v8 = *(void (**)(_QWORD *, _QWORD ***))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)(v17 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(void (**)(_QWORD *, _QWORD ***))(*v10 + v8);
  v8(v10, &v18);
  memset(v26, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v26, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v26 + 5);
  *(void ***)(a4 + 8) = v26[0];
  *(_BYTE *)(a4 + 20) = BYTE4(v26[1]);
  *(_DWORD *)a4 = 0;
  v26[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v18, v19[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v24, v25[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
}

void sub_217F3DAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a15);
  *(_QWORD *)(v17 - 88) = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 88));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v15, a14);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D91B368;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D91B368;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D91B368;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217F3DC08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D91B368;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

_QWORD *std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D91B3E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D91B3E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1, turi::flexible_type_impl *a2)
{
  std::__invoke[abi:ne180100]<turi::flexible_type (*&)(std::string const&),turi::flexible_type const&>((void (**)(std::string *))(a1 + 8), a2);
}

uint64_t std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__invoke[abi:ne180100]<turi::flexible_type (*&)(std::string const&),turi::flexible_type const&>(void (**a1)(std::string *), turi::flexible_type_impl *a2)
{
  void (*v2)(std::string *);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  std::string v6;
  _QWORD v7[13];
  char v8;
  uint64_t v9;

  v2 = *a1;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_4;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_4:
      v7[0] = *MEMORY[0x24BEDB7F0];
      v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v7[2] = v3;
      v7[3] = MEMORY[0x24BEDB848] + 16;
      if (v8 < 0)
        operator delete((void *)v7[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v9);
      break;
    case 2:
      v4 = *(_QWORD *)a2;
      if (*(char *)(*(_QWORD *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
      }
      else
      {
        v5 = *(_OWORD *)(v4 + 8);
        v6.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
        *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v5;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (_QWORD *)(*(_QWORD *)a2 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (uint64_t *)(*(_QWORD *)a2 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (_QWORD *)(*(_QWORD *)a2 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(a2, &v6);
      break;
    case 7:
      memset(&v6, 0, sizeof(v6));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (_QWORD *)(*(_QWORD *)a2 + 8));
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v2(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_217F3DFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D91B488;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D91B488;
  a2[1] = v2;
  return result;
}

void std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  std::__invoke_void_return_wrapper<turi::flexible_type,false>::__call[abi:ne180100]<turi::flexible_type_impl::ndarray<double> (*&)(turi::image_type const&),turi::flexible_type const&>((void (**)(__int128 *))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__invoke_void_return_wrapper<turi::flexible_type,false>::__call[abi:ne180100]<turi::flexible_type_impl::ndarray<double> (*&)(turi::image_type const&),turi::flexible_type const&>(void (**a1)(__int128 *)@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  void *__p[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  std::__invoke[abi:ne180100]<turi::flexible_type_impl::ndarray<double> (*&)(turi::image_type const&),turi::flexible_type const&>(a1, a2);
  *(_QWORD *)(a3 + 5) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 12) = 9;
  v4 = (unint64_t *)operator new();
  std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v4);
  *(_QWORD *)a3 = v4;
  *v4 = 1;
  if (*v4 != 1)
  {
    v5 = (_QWORD *)operator new();
    *v5 = *v4;
    turi::flexible_type_impl::ndarray<double>::ndarray(v5 + 1, (uint64_t)(v4 + 1));
    *(_QWORD *)a3 = v5;
    *v5 = 1;
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      v8 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v4);
      MEMORY[0x219A19A08](v8, 0x1030C407B73B9F7);
    }
  }
  v9 = *(_QWORD **)a3;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v9 + 1), &v15);
  v10 = (void *)v9[3];
  if (v10)
  {
    v9[4] = v10;
    operator delete(v10);
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = 0;
  }
  v11 = (void *)v9[6];
  *(_OWORD *)(v9 + 3) = *(_OWORD *)__p;
  v9[5] = v17;
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  if (v11)
  {
    v9[7] = v11;
    operator delete(v11);
    v9[6] = 0;
    v9[7] = 0;
    v9[8] = 0;
    v11 = __p[0];
  }
  *((_OWORD *)v9 + 3) = v18;
  v9[8] = v19;
  v18 = 0uLL;
  v19 = 0;
  v9[9] = v20;
  if (v11)
  {
    __p[1] = v11;
    operator delete(v11);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_217F3E358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  va_list va;

  va_start(va, a2);
  v5 = v4;
  MEMORY[0x219A19A08](v5, 0x1030C407B73B9F7);
  do
  {
    v7 = __ldaxr(v3);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v3));
  if (!v8)
  {
    if (*(_QWORD *)v2)
    {
      v9 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v2);
      MEMORY[0x219A19A08](v9, 0x1030C407B73B9F7);
    }
    *(_QWORD *)v2 = 0;
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 12) = 0;
  turi::flexible_type_impl::ndarray<double>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__invoke[abi:ne180100]<turi::flexible_type_impl::ndarray<double> (*&)(turi::image_type const&),turi::flexible_type const&>(void (**a1)(__int128 *), _BYTE *a2)
{
  void (*v2)(__int128 *);
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string v19;
  std::string *v20;

  v2 = *a1;
  switch(a2[12])
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_3;
    case 2:
      v3 = *(_QWORD *)a2;
      if (*(char *)(*(_QWORD *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
      }
      else
      {
        v4 = *(_OWORD *)(v3 + 8);
        v19.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v4;
      }
      turi::flexible_type_fail(0);
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      *(_QWORD *)&v18 = 0;
      *((_QWORD *)&v18 + 1) = 3;
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      v7 = (void *)v19.__r_.__value_.__r.__words[0];
      goto LABEL_18;
    case 3:
      v6 = *(_QWORD *)a2;
      memset(&v19, 0, sizeof(v19));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v19, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      *(_QWORD *)&v18 = 0;
      *((_QWORD *)&v18 + 1) = 3;
      v7 = (void *)v19.__r_.__value_.__r.__words[0];
      if (!v19.__r_.__value_.__r.__words[0])
        break;
      v19.__r_.__value_.__l.__size_ = v19.__r_.__value_.__r.__words[0];
LABEL_18:
      operator delete(v7);
      break;
    case 4:
      v8 = *(_QWORD *)a2;
      memset(&v19, 0, sizeof(v19));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v19, *(uint64_t **)(v8 + 8), *(uint64_t **)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      *(_QWORD *)&v18 = 0;
      *((_QWORD *)&v18 + 1) = 3;
      v20 = &v19;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
      break;
    case 5:
      v5 = *(_QWORD *)a2;
      memset(&v19, 0, sizeof(v19));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v19, *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      *(_QWORD *)&v18 = 0;
      *((_QWORD *)&v18 + 1) = 3;
      v20 = &v19;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
      break;
    case 7:
LABEL_3:
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      *(_QWORD *)&v18 = 0;
      *((_QWORD *)&v18 + 1) = 3;
      break;
    case 8:
      v9 = *(_QWORD *)a2;
      v10 = *(_QWORD *)(*(_QWORD *)a2 + 16);
      *(_QWORD *)&v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      *((_QWORD *)&v15 + 1) = v10;
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = *(_OWORD *)(v9 + 24);
      v14 = *(_OWORD *)(v9 + 56);
      v17 = *(_OWORD *)(v9 + 40);
      v18 = v14;
      v16 = v13;
      break;
    case 9:
      turi::flexible_type_impl::get_img_visitor::operator()(*(_QWORD *)a2 + 8, (turi::image_type *)&v15);
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v2(&v15);
  boost::detail::shared_count::~shared_count((unsigned int **)&v15 + 1);
}

void sub_217F3E624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 40) = v22;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 40));
  _Unwind_Resume(a1);
}

uint64_t turi::variant_converter<int,void>::get(uint64_t a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v39[6];
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((_QWORD *)v2 != v41)
  {
    v4 = *(_QWORD *)v2;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v2 + 5);
    v41[0] = v4;
    BYTE4(v41[1]) = *(_BYTE *)(v2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v41[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v39[0] = 0;
  turi::flexible_type_internals::ft_converter<3>::get<int>((int *)v39, (turi::flexible_type_internals *)v41, v3);
  v8 = v39[0];
  switch(BYTE4(v41[1]))
  {
    case 2:
      v9 = (unint64_t *)v41[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          v30 = *(void **)(v41[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v41[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v41[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v41[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v23 = *(void **)(v41[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v41[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_217F3E928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

int *turi::flexible_type_internals::ft_converter<3>::get<int>(int *result, turi::flexible_type_internals *this, const char *a3)
{
  int v3;

  if (*((_BYTE *)this + 12))
  {
    if (*((_BYTE *)this + 12) != 1)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer", a3);
    v3 = (int)*(double *)this;
    if (*(double *)this != (double)v3)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / convertable float", a3);
  }
  else
  {
    v3 = *(_DWORD *)this;
  }
  *result = v3;
  return result;
}

void sub_217F3EC58()
{
  turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(long long,float,float,float,turi::progress_time const&)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"size_t(sizeof...(Args))", 23);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", "operator()", 272, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  void turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(long long,float,float,float,turi::progress_time const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F3EDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::table_printer::_p(uint64_t a1)
{
  _QWORD *v1;
  void *locale;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  void *v6;
  int *v7;
  file_logger *v8;
  file_logger *started;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *exception;
  std::locale v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *__p;
  char v18;
  std::locale v19;

  v1 = *(_QWORD **)(a1 + 48);
  if (v1)
  {
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0)
      locale = &v14;
    else
      locale = v14.__locale_;
    if ((v16 & 0x80u) == 0)
      v3 = v16;
    else
      v3 = v15;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)locale, v3);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
    v5 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v16 < 0)
    {
      v6 = v14.__locale_;
LABEL_17:
      operator delete(v6);
    }
  }
  else
  {
    v7 = (int *)global_logger();
    if (v7[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v7))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v8 = (file_logger *)global_logger();
      started = file_logger::start_stream(v8, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", "_p", 516, 1);
      std::stringbuf::str();
      v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
      if (v11)
      {
        if (*((_BYTE *)v11 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
          v12 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
          std::locale::~locale(&v14);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v10);
          if (*(_DWORD *)(v10 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (v18 < 0)
      {
        v6 = __p;
        goto LABEL_17;
      }
    }
  }
}

void sub_217F3F060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::locale::~locale(&a10);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL turi::table_printer::register_tick(turi::table_printer *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _BOOL8 v9;
  uint64_t v11;
  unint64_t v12;
  timeval v13;

  v3 = a2;
  if (a3 == 1)
  {
    v13.tv_sec = a2;
    *((_QWORD *)this + 8) = a2;
    gettimeofday(&v13, 0);
    *(double *)&v13.tv_sec = (double)(v13.tv_usec - *((_DWORD *)this + 8)) / 1000000.0
                           + (double)(v13.tv_sec - *((_QWORD *)this + 3));
    *((_QWORD *)this + 7) = v13.tv_sec;
    return 1;
  }
  if (a3 < 5)
    return 1;
  if (a3 == 5)
  {
    while (*((double *)this + 7) == -1.0)
      ;
    v5 = turi::table_printer::set_up_time_printing_interval(this, a2);
    *((_QWORD *)this + 11) = v5;
    v6 = (v3 + v5 + 1) / v5 * v5;
    if (v6 <= v3)
      v7 = v5;
    else
      v7 = 0;
    v13.tv_sec = v7 + v6;
    *((_QWORD *)this + 10) = v7 + v6;
    return 1;
  }
  v8 = (unint64_t *)((char *)this + 80);
  while (!*v8)
    ;
  if (*v8 <= a2)
  {
    v13.tv_sec = (__darwin_time_t)this + 160;
    LOBYTE(v13.tv_usec) = 0;
    if (std::unique_lock<turi::mutex>::try_lock((uint64_t)&v13))
    {
      if (*v8 <= v3)
      {
        while (*v8 <= v3)
        {
          v11 = *((_QWORD *)this + 11);
          do
            v12 = __ldaxr(v8);
          while (__stlxr(v12 + v11, v8));
        }
      }
      else if (v3 >= 6)
      {
        if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v3, 1) <= 0x1999999999999999uLL)
        {
          do
            v3 /= 0xAuLL;
          while (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v3, 1) < 0x199999999999999AuLL);
        }
        v9 = (v3 & 0xFFFFFFFFFFFFFFFBLL) == 1;
        goto LABEL_27;
      }
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
LABEL_27:
    std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v13);
    return v9;
  }
  if (a2 < 6)
    return 1;
  if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * a2, 1) <= 0x1999999999999999uLL)
  {
    do
      v3 /= 0xAuLL;
    while (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v3, 1) < 0x199999999999999AuLL);
  }
  return (v3 & 0xFFFFFFFFFFFFFFFBLL) == 1;
}

void sub_217F3F2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<turi::mutex>::try_lock(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t result;

  v2 = *(pthread_mutex_t **)a1;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      result = pthread_mutex_trylock(v2) == 0;
      *(_BYTE *)(a1 + 8) = result;
      return result;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::try_lock: already locked");
  return turi::table_printer::_print_progress_row<long long,float,turi::progress_time>();
}

uint64_t turi::table_printer::_track_progress<long long,float,turi::progress_time>(uint64_t a1, char a2, uint64_t *a3, float *a4, double *a5)
{
  pthread_mutex_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42;
  void *v43;
  double v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  void *v105;
  void *v106;
  timeval v108;

  v10 = (pthread_mutex_t *)(a1 + 232);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 232));
  if (!*(_BYTE *)(a1 + 592))
  {
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 696), 3uLL);
    v11 = *(_QWORD *)(a1 + 720);
    v12 = *(_QWORD *)(a1 + 728) - v11;
    if (v12 > 2)
    {
      if (v12 != 3)
        *(_QWORD *)(a1 + 728) = v11 + 3;
    }
    else
    {
      std::vector<turi::table_internal::table_printer_element_base::style_type>::__append(a1 + 720, 3 - v12);
    }
  }
  v13 = *a3;
  v14 = *(_QWORD *)(a1 + 696);
  switch(*(_BYTE *)(v14 + 12))
  {
    case 2:
      v15 = *(unint64_t **)v14;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        if (*((char *)v18 + 31) < 0)
          operator delete((void *)v18[1]);
        v19 = v18;
        v20 = 0x1012C404EF22A49;
        goto LABEL_47;
      }
      break;
    case 3:
      v21 = *(unint64_t **)v14;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        v25 = (void *)v24[1];
        if (v25)
        {
          v24[2] = (unint64_t)v25;
          operator delete(v25);
        }
        v19 = v24;
        v20 = 0x1080C409938AC02;
        goto LABEL_47;
      }
      break;
    case 4:
      v26 = *(unint64_t **)v14;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        v108.tv_sec = (__darwin_time_t)(v29 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
        goto LABEL_31;
      }
      break;
    case 5:
      v30 = *(unint64_t **)v14;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v29 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        v108.tv_sec = (__darwin_time_t)(v29 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
LABEL_31:
        v19 = v29;
        v20 = 0x1020C405E66F15BLL;
        goto LABEL_47;
      }
      break;
    case 8:
      v33 = *(unint64_t **)v14;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
        v19 = v36;
        v37 = -235920773;
        goto LABEL_46;
      }
      break;
    case 9:
      v38 = *(unint64_t **)v14;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = *(unint64_t **)v14;
        if (*(_QWORD *)v14)
        {
          v42 = (void *)v41[6];
          if (v42)
          {
            v41[7] = (unint64_t)v42;
            operator delete(v42);
          }
          v43 = (void *)v41[3];
          if (v43)
          {
            v41[4] = (unint64_t)v43;
            operator delete(v43);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v41 + 1));
          v19 = v41;
          v37 = 2071181815;
LABEL_46:
          v20 = v37 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v19, v20);
        }
LABEL_48:
        *(_QWORD *)v14 = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)v14 = v13;
  *(_DWORD *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 12) = 0;
  **(_BYTE **)(a1 + 720) = 0;
  v44 = *a4;
  v45 = *(_QWORD *)(a1 + 696);
  switch(*(_BYTE *)(v45 + 28))
  {
    case 2:
      v46 = *(unint64_t **)(v45 + 16);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)(v45 + 16);
        if (!v49)
          goto LABEL_91;
        if (*(char *)(v49 + 31) < 0)
          operator delete(*(void **)(v49 + 8));
        v50 = (_QWORD *)v49;
        v51 = 0x1012C404EF22A49;
        goto LABEL_90;
      }
      break;
    case 3:
      v52 = *(unint64_t **)(v45 + 16);
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = *(_QWORD **)(v45 + 16);
        if (!v55)
          goto LABEL_91;
        v56 = (void *)v55[1];
        if (v56)
        {
          v55[2] = v56;
          operator delete(v56);
        }
        v50 = v55;
        v51 = 0x1080C409938AC02;
        goto LABEL_90;
      }
      break;
    case 4:
      v57 = *(unint64_t **)(v45 + 16);
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        v60 = *(_QWORD **)(v45 + 16);
        if (!v60)
          goto LABEL_91;
        v108.tv_sec = (__darwin_time_t)(v60 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
        goto LABEL_74;
      }
      break;
    case 5:
      v61 = *(unint64_t **)(v45 + 16);
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v60 = *(_QWORD **)(v45 + 16);
        if (!v60)
          goto LABEL_91;
        v108.tv_sec = (__darwin_time_t)(v60 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
LABEL_74:
        v50 = v60;
        v51 = 0x1020C405E66F15BLL;
        goto LABEL_90;
      }
      break;
    case 8:
      v64 = *(unint64_t **)(v45 + 16);
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        v67 = *(_QWORD *)(v45 + 16);
        if (!v67)
          goto LABEL_91;
        boost::detail::shared_count::~shared_count((unsigned int **)(v67 + 16));
        v50 = (_QWORD *)v67;
        v68 = -235920773;
        goto LABEL_89;
      }
      break;
    case 9:
      v69 = *(unint64_t **)(v45 + 16);
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        v72 = *(_QWORD **)(v45 + 16);
        if (v72)
        {
          v73 = (void *)v72[6];
          if (v73)
          {
            v72[7] = v73;
            operator delete(v73);
          }
          v74 = (void *)v72[3];
          if (v74)
          {
            v72[4] = v74;
            operator delete(v74);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v72 + 1));
          v50 = v72;
          v68 = 2071181815;
LABEL_89:
          v51 = v68 | 0x1030C4000000000;
LABEL_90:
          MEMORY[0x219A19A08](v50, v51);
        }
LABEL_91:
        *(_QWORD *)(v45 + 16) = 0;
      }
      break;
    default:
      break;
  }
  v75 = a1 + 696;
  *(double *)(v45 + 16) = v44;
  *(_DWORD *)(v45 + 24) = 0;
  *(_BYTE *)(v45 + 28) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 720) + 1) = 0;
  v76 = *a5;
  if (*a5 < 0.0)
  {
    gettimeofday(&v108, 0);
    v76 = (double)(v108.tv_usec - *(_DWORD *)(a1 + 32)) / 1000000.0 + (double)(v108.tv_sec - *(_QWORD *)(a1 + 24));
  }
  v77 = *(_QWORD *)v75;
  switch(*(_BYTE *)(*(_QWORD *)v75 + 44))
  {
    case 2:
      v78 = *(unint64_t **)(v77 + 32);
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v81 = *(_QWORD *)(v77 + 32);
        if (!v81)
          goto LABEL_136;
        if (*(char *)(v81 + 31) < 0)
          operator delete(*(void **)(v81 + 8));
        v82 = (_QWORD *)v81;
        v83 = 0x1012C404EF22A49;
        goto LABEL_135;
      }
      break;
    case 3:
      v84 = *(unint64_t **)(v77 + 32);
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = *(_QWORD **)(v77 + 32);
        if (!v87)
          goto LABEL_136;
        v88 = (void *)v87[1];
        if (v88)
        {
          v87[2] = v88;
          operator delete(v88);
        }
        v82 = v87;
        v83 = 0x1080C409938AC02;
        goto LABEL_135;
      }
      break;
    case 4:
      v89 = *(unint64_t **)(v77 + 32);
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = *(_QWORD **)(v77 + 32);
        if (!v92)
          goto LABEL_136;
        v108.tv_sec = (__darwin_time_t)(v92 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
        goto LABEL_119;
      }
      break;
    case 5:
      v93 = *(unint64_t **)(v77 + 32);
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
      {
        v92 = *(_QWORD **)(v77 + 32);
        if (!v92)
          goto LABEL_136;
        v108.tv_sec = (__darwin_time_t)(v92 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
LABEL_119:
        v82 = v92;
        v83 = 0x1020C405E66F15BLL;
        goto LABEL_135;
      }
      break;
    case 8:
      v96 = *(unint64_t **)(v77 + 32);
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        v99 = *(_QWORD *)(v77 + 32);
        if (!v99)
          goto LABEL_136;
        boost::detail::shared_count::~shared_count((unsigned int **)(v99 + 16));
        v82 = (_QWORD *)v99;
        v100 = -235920773;
        goto LABEL_134;
      }
      break;
    case 9:
      v101 = *(unint64_t **)(v77 + 32);
      do
      {
        v102 = __ldaxr(v101);
        v103 = v102 - 1;
      }
      while (__stlxr(v103, v101));
      if (!v103)
      {
        v104 = *(_QWORD **)(v77 + 32);
        if (v104)
        {
          v105 = (void *)v104[6];
          if (v105)
          {
            v104[7] = v105;
            operator delete(v105);
          }
          v106 = (void *)v104[3];
          if (v106)
          {
            v104[4] = v106;
            operator delete(v106);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v104 + 1));
          v82 = v104;
          v100 = 2071181815;
LABEL_134:
          v83 = v100 | 0x1030C4000000000;
LABEL_135:
          MEMORY[0x219A19A08](v82, v83);
        }
LABEL_136:
        *(_QWORD *)(v77 + 32) = 0;
      }
      break;
    default:
      break;
  }
  *(double *)(v77 + 32) = v76;
  *(_DWORD *)(v77 + 40) = 0;
  *(_BYTE *)(v77 + 44) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 720) + 2) = 2;
  turi::table_printer::track_progress_row(a1, (uint64_t *)(a1 + 696));
  *(_BYTE *)(a1 + 593) = a2;
  return pthread_mutex_unlock(v10);
}

void sub_217F3FA34(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::table_printer::print_row<long long,float,turi::progress_time>(uint64_t a1, uint64_t *a2, float *a3, double *a4)
{
  uint64_t v4;
  double v9;
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  timeval v14;

  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v11[0] = v4 >> 5;
  if (v4 != 96)
  {
    v14.tv_sec = (__darwin_time_t)v11;
    turi::table_printer::print_row<long long,float,turi::progress_time>(long long,float,turi::progress_time const&)const::{lambda(void)#1}::operator()();
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  LOBYTE(v14.tv_sec) = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v14, 1);
  turi::table_printer::os_log_value(0, *a2);
  turi::table_internal::_print_long(v11, *(_QWORD *)(*(_QWORD *)a1 + 24), *a2);
  turi::table_printer::os_log_value((turi::table_printer *)1, *a3);
  turi::table_internal::_print_double(v11, *(_QWORD *)(*(_QWORD *)a1 + 56), *a3);
  turi::table_printer::os_log_value(a1, 2, a4);
  v9 = *a4;
  if (*a4 < 0.0)
  {
    gettimeofday(&v14, 0);
    v9 = (double)(v14.tv_usec - *(_DWORD *)(a1 + 32)) / 1000000.0 + (double)(v14.tv_sec - *(_QWORD *)(a1 + 24));
  }
  turi::table_internal::_print_time(v11, *(_QWORD *)(*(_QWORD *)a1 + 88), v9);
  turi::table_printer::_p(a1);
  v11[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v13);
}

void sub_217F3FBF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::table_printer::print_row<long long,float,turi::progress_time>(long long,float,turi::progress_time const&)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"size_t(sizeof...(Args))", 23);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", "operator()", 272, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  void turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(long long,float,float,float,turi::progress_time const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F3FD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return a1;
}

void std::vector<turi::flexible_type>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 16 * a2;
      while (v3 != v5)
      {
        v3 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<turi::flexible_type>::__append(a1, a2 - v4);
  }
}

uint64_t turi::table_printer::track_progress_row(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::vector<std::string>::size_type v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::string *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v19[3];
  std::vector<std::string> v20;
  std::string __p;
  std::string *v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 592))
    goto LABEL_27;
  v5 = *a2;
  v4 = a2[1];
  turi::sframe::sframe((turi::sframe *)&__p);
  turi::sframe::operator=(a1 + 296, (uint64_t)&__p);
  v6 = (v4 - v5) >> 4;
  turi::sframe::~sframe((turi::sframe *)&__p);
  std::vector<std::string>::vector(&v20, v6);
  std::vector<turi::flex_type_enum>::vector(v19, v6);
  if (v4 != v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (v6 <= 1)
      v6 = 1;
    v10 = 12;
    do
    {
      std::string::operator=(&v20.__begin_[v7], (const std::string *)(*(_QWORD *)a1 + v8));
      *((_BYTE *)v19[0] + v9++) = *(_BYTE *)(*a2 + v10);
      v8 += 32;
      ++v7;
      v10 += 16;
    }
    while (v6 != v9);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write(a1 + 296, &v20, v19, &__p, 1, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::sframe::get_output_iterator((size_t *)(a1 + 296), 0, (uint64_t)&__p);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(a1 + 600), (uint64_t)&__p);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(a1 + 632), (uint64_t)v23);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(a1 + 664), (uint64_t)v25);
  v11 = v26;
  if (v26 == v25)
  {
    v12 = 4;
    v11 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_14;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_14:
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_19;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_19:
  p_p = v22;
  if (v22 == &__p)
  {
    v16 = 4;
    p_p = &__p;
    goto LABEL_23;
  }
  if (v22)
  {
    v16 = 5;
LABEL_23:
    (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v16))();
  }
  *(_BYTE *)(a1 + 592) = 1;
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_27:
  v17 = *(_QWORD *)(a1 + 624);
  if (!v17)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, a2);
}

void sub_217F4013C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void **std::vector<turi::flexible_type>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v14 = v7 + 16 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(_BYTE *)(v7 + 12) = 0;
        v7 += 16;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v17[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[16 * v12];
    v16 = &v15[16 * a2];
    do
    {
      *(_QWORD *)v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      v15[12] = 0;
      v15 += 16;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<turi::flexible_type>::~__split_buffer(v17);
  }
  return result;
}

void sub_217F402C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<turi::table_internal::table_printer_element_base::style_type>::__append(uint64_t a1, size_t a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD *)a1;
    v7 = &v5[-*(_QWORD *)a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = operator new(v10);
    else
      v11 = 0;
    v12 = &v7[(_QWORD)v11];
    v13 = (char *)v11 + v10;
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (v5 != (char *)v6);
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = &v12[a2];
    *(_QWORD *)(a1 + 16) = v13;
    if (v6)
      operator delete((void *)v6);
  }
}

turi::sframe *turi::sframe::sframe(turi::sframe *this)
{
  int v2;

  *(_QWORD *)this = &off_24D931248;
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 224), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *((_WORD *)this + 144) = 0;
  return this;
}

void sub_217F404C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;

  v14 = v12;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 159) < 0)
    operator delete(*(void **)(v10 + 136));
  if (*(char *)(v10 + 135) < 0)
    operator delete(*v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, *(_QWORD **)(v10 + 96));
  a10 = (void **)(v10 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::open_for_write(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::string *a4, uint64_t a5, int a6)
{
  int *v12;
  file_logger *v13;
  file_logger *started;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD *exception;
  std::locale v20;

  v12 = (int *)global_logger();
  if (v12[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v12))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", "open_for_write", 270, 1);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Function entry", 14);
    v16 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v16)
    {
      if (*((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet(&v20, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v20);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*(_BYTE *)(a1 + 288) == 0, "Attempting to init an SFrame which has already been inited.");
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) != a3[1] - *a3)
    turi::sframe::open_for_write(std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,std::string const&,unsigned long,BOOL)::{lambda(void)#1}::operator()();
  *(_BYTE *)(a1 + 288) = 1;
  return turi::sframe::create_arrays_for_writing(a1, a2, a3, a5, a4, a6);
}

void sub_217F40718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_217F407B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::flex_type_enum>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_217F40820(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>(uint64_t **a1, char *a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_217F4094C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const(&)[10],turi::neural_net::shared_float_array&>@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  __n128 v14;

  v7 = a1 + 8;
  v8 = (__n128 *)operator new(0x70uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((__n128 *)v8[2].n128_u64, a2);
  v10 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  v8[3].n128_u64[1] = (unint64_t)&unk_24D9175B8;
  v8[4].n128_u64[0] = v10;
  v8[4].n128_u64[1] = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  result = *(__n128 *)(a3 + 24);
  v14 = *(__n128 *)(a3 + 40);
  v8[5] = result;
  v8[6] = v14;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217F40A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_263()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_style_transfer_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

uint64_t turi::flexible_type_impl::ptime_from_time_t(unint64_t this, int a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;

  if ((v4 & 1) == 0
  {
    turi::flexible_type_impl::ptime_from_time_t(long,int)::time_t_epoch = boost::posix_time::from_time_t(0);
  }
  v10 = turi::flexible_type_impl::ptime_from_time_t(long,int)::time_t_epoch;
  if ((this & 0x8000000000000000) == 0)
  {
    if (this >> 31)
    {
      do
      {
        v9 = 2147483647000000;
        boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v10, (unint64_t *)&v9);
        v5 = this - 0x7FFFFFFF;
        v6 = this > 0xFFFFFFFE;
        this -= 0x7FFFFFFFLL;
      }
      while (v6);
      goto LABEL_11;
    }
LABEL_10:
    v5 = this;
    goto LABEL_11;
  }
  if (this > 0xFFFFFFFF80000000)
    goto LABEL_10;
  do
  {
    v9 = -2147483647000000;
    boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v10, (unint64_t *)&v9);
    v5 = this + 0x7FFFFFFF;
    v7 = this >= 0xFFFFFFFF00000002;
    this += 0x7FFFFFFFLL;
  }
  while (!v7);
LABEL_11:
  v9 = 1000000 * v5;
  boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v10, (unint64_t *)&v9);
  v9 = a2;
  boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v10, (unint64_t *)&v9);
  return v10;
}

void sub_217F40C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t boost::posix_time::from_time_t(boost::posix_time *this)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  boost::gregorian::date::date(&v3, 0x7B2u, 1u, 1u);
  v5 = v3;
  v6 = 0;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v4, &v5, &v6);
  v6 = 1000000 * (_QWORD)this;
  return boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration(&v4, &v6);
}

uint64_t boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v9 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(a1);
  v4 = *a1;
  v5 = 0x7FFFFFFFFFFFFFFELL;
  if (*a1 == 0x8000000000000000)
    v5 = 0x8000000000000000;
  if (v4 != 0x7FFFFFFFFFFFFFFFLL)
    v4 = v5;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
    v4 = *a1 % 86400000000;
  v7 = v4;
  boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator+(&v7, a2, &v8);
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v10, &v9, (uint64_t *)&v8);
  result = v10;
  *a1 = v10;
  return result;
}

uint64_t turi::flexible_type_impl::ptime_to_time_t(uint64_t *a1)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v4 = 2440588;
  v5 = 0;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep((uint64_t *)&v3, &v4, &v5);
  v5 = 0;
  v3 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration((uint64_t *)&v3, &v5);
  boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::subtract_times(a1, (uint64_t *)&v3, (unint64_t *)&v5);
  return v5 / 1000000;
}

uint64_t turi::flexible_type_impl::ptime_to_fractional_microseconds(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = turi::flexible_type_impl::ptime_to_time_t(a1);
  v5 = 2440588;
  v6 = 0;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep((uint64_t *)&v4, &v5, &v6);
  v6 = 1000000 * v2;
  v4 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration((uint64_t *)&v4, &v6);
  boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::subtract_times(a1, (uint64_t *)&v4, (unint64_t *)&v6);
  return (uint64_t)((double)v6 / 1000000.0 * 1000000.0);
}

void turi::flexible_type_impl::date_time_to_string(turi::flexible_type_impl *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v4 = *(uint64_t *)this >> 56;
  if ((int)v4 < 0)
    v5 = 25;
  else
    v5 = -25;
  v6 = v5 + v4;
  if (v6 == 64)
    v7 = 0;
  else
    v7 = 900 * v6;
  v8 = turi::flexible_type_impl::ptime_from_time_t(((uint64_t)(*(_QWORD *)this << 8) >> 8) + v7, *((_DWORD *)this + 2));
  boost::posix_time::to_iso_string_type<char>(v8, a2);
}

uint64_t turi::flexible_type_impl::date_time_string_reader::date_time_string_reader(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  _QWORD *v4;
  std::locale::facet *v5;
  std::ios_base *v6;
  uint64_t v7;
  std::locale *rdbuf;
  std::locale *v9;
  std::ios_base *v10;
  std::locale v12;
  std::locale __loc;
  std::locale v14;
  std::locale v15;
  std::locale v16;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v4 = (_QWORD *)(a1 + 24);
  std::istringstream::basic_istringstream[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_6;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_6;
  }
  MEMORY[0x219A19390](a1, "%Y%m%dT%H%M%S%F%q");
LABEL_6:
  v5 = (std::locale::facet *)operator new();
  boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::time_input_facet((uint64_t)v5, a1, 0);
  v6 = (std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24));
  std::ios_base::getloc(v6);
  v7 = std::locale::id::__get(&boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::id);
  std::locale::__install_ctor(&__loc, &v12, v5, v7);
  std::ios_base::getloc(v6);
  std::ios_base::imbue(v6, &__loc);
  std::locale::~locale(&v16);
  rdbuf = (std::locale *)v6->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
    v9 = rdbuf + 1;
    std::locale::locale(&v15, v9);
    std::locale::operator=(v9, &__loc);
    std::locale::~locale(&v15);
  }
  std::locale::~locale(&v14);
  std::locale::~locale(&__loc);
  std::locale::~locale(&v12);
  v10 = (std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24));
  v10->__exceptions_ = 4;
  std::ios_base::clear(v10, v10->__rdstate_);
  return a1;
}

void sub_217F41090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, std::locale a11, std::locale a12)
{
  uint64_t v12;
  uint64_t v13;

  std::istringstream::~istringstream(v13);
  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::basic_istringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB868];
  v3 = MEMORY[0x24BEDB868] + 64;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BEDB868] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 16));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 120) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  return a1;
}

void sub_217F411D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x219A198F4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x219A198F4](a1 + 120);
  return a1;
}

uint64_t turi::flexible_type_impl::date_time_string_reader::read(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21[2];
  unsigned int *v22;
  uint64_t time_rep;
  uint64_t v24;
  unsigned int *v25;

  v21[1] = 0;
  v22 = 0;
  time_rep = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(0);
  v24 = 0;
  v25 = 0;
  boost::detail::shared_count::~shared_count(&v22);
  std::string::operator=((std::string *)(a1 + 104), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1 + 40);
  boost::local_time::operator>><char,std::char_traits<char>>((uint64_t *)(a1 + 24), (uint64_t)&time_rep);
  v21[0] = time_rep;
  v4 = turi::flexible_type_impl::ptime_to_time_t(v21);
  v5 = turi::flexible_type_impl::ptime_to_fractional_microseconds(v21);
  v6 = v24;
  v19 = v24;
  v20 = v25;
  if (v25)
  {
    v7 = v25 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  boost::detail::shared_count::~shared_count(&v20);
  if (v6)
  {
    v9 = v24;
    v19 = v24;
    v20 = v25;
    if (v25)
    {
      v10 = v25 + 2;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v9 + 72))(&v18);
    v12 = v18 / 1000000;
    v13 = (int)(v18 / 1000000) / 900;
    boost::detail::shared_count::~shared_count(&v20);
    if ((v12 - 58500) <= 0xFFFFFC7B && (v13 - 49) <= 0xFFFFFF9E)
      turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
    if ((int)v12 >= -899)
      v14 = 25;
    else
      v14 = 231;
    v15 = (unint64_t)(v14 + v13) << 56;
  }
  else
  {
    v15 = 0x5900000000000000;
  }
  if (v5 >= 0xF4240)
    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
  v16 = v15 | v4 & 0xFFFFFFFFFFFFFFLL;
  boost::detail::shared_count::~shared_count(&v25);
  return v16;
}

void sub_217F41474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unsigned int **v17;
  unsigned int **v18;

  boost::detail::shared_count::~shared_count(v18);
  boost::detail::shared_count::~shared_count(v17);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    turi::flexible_type_impl::date_time_string_reader::read(std::string const&)::$_0::operator()();
  }
  _Unwind_Resume(a1);
}

void sub_217F414D8()
{
  __cxa_end_catch();
  JUMPOUT(0x217F414E0);
}

uint64_t *boost::local_time::operator>><char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 has_facet;
  const std::locale::facet *v9;
  std::locale *p_loc;
  std::locale::facet *v11;
  uint64_t v12;
  std::ios_base *v13;
  std::locale *rdbuf;
  std::locale *v15;
  std::string::size_type size;
  uint64_t v17;
  std::string *p_p;
  std::string::size_type v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  unsigned int *v25;
  unsigned int v26;
  std::string::size_type v27;
  std::string::size_type v28;
  unsigned int *v29;
  unsigned int v30;
  __int128 v31;
  std::locale::__imp *locale;
  unsigned int *v34;
  int64_t v35[2];
  unsigned int *v36;
  std::string v37;
  std::locale __loc;
  unsigned int *v39;
  std::locale v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t time_rep;
  std::string __p;
  char v45;
  std::locale v46[2];

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *((_DWORD *)v4 + 2);
  MEMORY[0x219A194D4](&v45, a1, 0);
  if (v45)
  {
    memset(&__p, 0, sizeof(__p));
    time_rep = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(0);
    v6 = *a1;
    v7 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v41 = 0;
    v42 = v7;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v6 - 24)));
    has_facet = std::locale::has_facet((const std::locale *)&v37, &boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)&v37);
    if (has_facet)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v9 = std::locale::use_facet((const std::locale *)&v37, &boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::id);
      boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::get((uint64_t)v9, &v42, &v41, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), &time_rep, &__p, 1);
      p_loc = (std::locale *)&v37;
    }
    else
    {
      v11 = (std::locale::facet *)operator new();
      boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::time_input_facet(v11, 0);
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v12 = std::locale::id::__get(&boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::id);
      std::locale::__install_ctor(&__loc, (const std::locale *)&v37, v11, v12);
      std::locale::~locale((std::locale *)&v37);
      v13 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      std::ios_base::getloc(v13);
      std::ios_base::imbue(v13, &__loc);
      std::locale::~locale((std::locale *)&v37);
      rdbuf = (std::locale *)v13->__rdbuf_;
      if (rdbuf)
      {
        (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
        v15 = rdbuf + 1;
        std::locale::locale(v46, v15);
        std::locale::operator=(v15, &__loc);
        std::locale::~locale(v46);
      }
      std::locale::~locale(&v40);
      boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::get((uint64_t)v11, &v42, &v41, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), &time_rep, &__p, 1);
      p_loc = &__loc;
    }
    std::locale::~locale(p_loc);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      v17 = operator new();
      memset(&v37, 0, sizeof(v37));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v19 = __p.__r_.__value_.__l.__size_;
      std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v37, (uint64_t)&v37, (char *)p_p, (char *)p_p + v19, v19);
      boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(v17, (uint64_t *)&v37);
      boost::shared_ptr<boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::shared_ptr<boost::local_time::posix_time_zone_base<char>>((uint64_t *)&__loc, v17);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v20 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&time_rep);
      v21 = time_rep;
      if ((unint64_t)(time_rep - 0x7FFFFFFFFFFFFFFELL) > 2)
      {
        v21 = time_rep % 86400000000;
      }
      else
      {
        v22 = 0x7FFFFFFFFFFFFFFELL;
        if (time_rep == 0x8000000000000000)
          v22 = 0x8000000000000000;
        if (time_rep != 0x7FFFFFFFFFFFFFFFLL)
          v21 = v22;
      }
      v35[0] = v21;
      locale = __loc.__locale_;
      v34 = v39;
      if (v39)
      {
        v25 = v39 + 2;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::local_date_time_base(&v37, v20, v35, (uint64_t *)&locale, 0);
      v27 = v37.__r_.__value_.__l.__size_;
      *(_QWORD *)a2 = v37.__r_.__value_.__r.__words[0];
      v28 = v37.__r_.__value_.__r.__words[2];
      if (v37.__r_.__value_.__r.__words[2])
      {
        v29 = (unsigned int *)(v37.__r_.__value_.__r.__words[2] + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v27;
      *(_QWORD *)(a2 + 16) = v28;
      *(_OWORD *)&v46[0].__locale_ = v31;
      boost::detail::shared_count::~shared_count((unsigned int **)&v46[1]);
      boost::detail::shared_count::~shared_count((unsigned int **)&v37.__r_.__value_.__r.__words[2]);
      boost::detail::shared_count::~shared_count(&v34);
    }
    else
    {
      __loc.__locale_ = 0;
      v39 = 0;
      v23 = time_rep;
      v35[1] = 0;
      v36 = 0;
      v37.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = (unint64_t)time_rep;
      v24 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = v23;
      *(_OWORD *)&v46[0].__locale_ = v24;
      boost::detail::shared_count::~shared_count((unsigned int **)&v46[1]);
      boost::detail::shared_count::~shared_count((unsigned int **)&v37.__r_.__value_.__r.__words[2]);
      boost::detail::shared_count::~shared_count(&v36);
    }
    boost::detail::shared_count::~shared_count(&v39);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((_DWORD *)v4 + 2) = v5;
  return a1;
}

void sub_217F41928(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::locale a20,uint64_t a21,std::locale a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  _QWORD *v31;
  char *v33;
  std::ios_base::iostate v34;

  if (a31 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  v33 = (char *)v31 + *(_QWORD *)(*v31 - 24);
  v34 = *((_DWORD *)v33 + 8) | 4;
  if ((v33[36] & 4) == 0)
  {
    std::ios_base::clear((std::ios_base *)v33, v34);
    __cxa_end_catch();
    JUMPOUT(0x217F41904);
  }
  std::ios_base::clear((std::ios_base *)v33, v34);
  __cxa_rethrow();
}

void sub_217F41A68()
{
  JUMPOUT(0x217F41A70);
}

uint64_t turi::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[", 1);
  if (a2[1] != *a2)
  {
    v3 = 0;
    do
    {
      std::ostream::operator<<();
      ++v3;
      v4 = a2[1] - *a2;
      if (v3 < v4 >> 3)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
        v4 = a2[1] - *a2;
      }
    }
    while (v3 < v4 >> 3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v8[0] = v5;
  v8[1] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v10);
}

{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  turi::flexible_type_impl::ndarray<double>::print(a2, v6);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v8);
}

{
  _BYTE *v3;
  unint64_t v4;
  turi::flexible_type_impl *v5;
  unint64_t v6;
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v10;
  std::string *v11;
  std::string::size_type v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  _BYTE *v19;
  uint64_t v20;
  std::string __p;
  _QWORD v23[2];
  _QWORD v24[11];
  char v25;
  uint64_t v26;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"{", 1);
  v3 = (_BYTE *)a2[1];
  if (v3 != (_BYTE *)*a2)
  {
    v4 = (uint64_t)&v3[-*a2] >> 5;
    v5 = (turi::flexible_type_impl *)(*a2 + 16);
    v6 = 1;
    do
    {
      if (*((_BYTE *)v5 - 4) == 2)
      {
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v5 - 16), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"", 1);
      }
      else
      {
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v5 - 16), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &__p;
        else
          v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v12 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v11, v12);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)":", 1);
      if (*((_BYTE *)v5 + 12) == 2)
      {
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v5, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &__p;
        else
          v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v15 = __p.__r_.__value_.__l.__size_;
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
      }
      else
      {
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v5, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &__p;
        else
          v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v18 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v17, v18);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v6 < v4)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
      ++v6;
      v19 = (char *)v5 + 16;
      v5 = (turi::flexible_type_impl *)((char *)v5 + 32);
    }
    while (v19 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"}", 1);
  std::stringbuf::str();
  v23[0] = *MEMORY[0x24BEDB7F0];
  v20 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v24[0] = v20;
  v24[1] = MEMORY[0x24BEDB848] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v26);
}

void sub_217F41BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217F41C94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::get_string_visitor::operator()(turi::flexible_type_impl *this@<X1>, std::string *a2@<X8>)
{
  turi::flexible_type_impl::date_time_to_string(this, a2);
}

uint64_t turi::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"[", 1);
  v3 = *a2;
  if (a2[1] != *a2)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if (*(_BYTE *)(v3 + v4 + 12) == 2)
      {
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)(*a2 + v4), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"", 1);
      }
      else
      {
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)(v3 + v4), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v10, v11);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v5;
      v3 = *a2;
      v12 = a2[1] - *a2;
      if (v5 < v12 >> 4)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
        v3 = *a2;
        v12 = a2[1] - *a2;
      }
      v4 += 16;
    }
    while (v5 < v12 >> 4);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v17[0] = v13;
  v17[1] = MEMORY[0x24BEDB848] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v19);
}

void sub_217F41EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_217F4216C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_impl::get_string_visitor::operator()()
{
  uint64_t v0;
  _QWORD v2[2];
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Height: ", 8);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" Width: ", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x24BEDB7F0];
  v0 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v3[0] = v0;
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v5);
}

void sub_217F422A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::get_vec_visitor::operator()(uint64_t *a1@<X1>, double **a2@<X8>, unint64_t a3@<D0>)
{
  double *v5;
  unint64_t v6;
  _QWORD *v7;
  double v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  double v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  double *v25;
  double v26;
  double *v27;
  double *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  double *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[7] == 2)
  {
    if (a1[5])
    {
      v5 = 0;
      v6 = 0;
      v7 = a2 + 2;
      do
      {
        LOBYTE(a3) = *(_BYTE *)(*a1 + v6);
        v8 = (double)a3;
        if ((unint64_t)v5 >= *v7)
        {
          v10 = *a2;
          v11 = v5 - *a2;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v13 = *v7 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v14);
            v10 = *a2;
            v5 = a2[1];
          }
          else
          {
            v15 = 0;
          }
          v16 = (double *)&v15[8 * v11];
          *v16 = v8;
          v9 = v16 + 1;
          while (v5 != v10)
          {
            v17 = *--v5;
            *(double *)&a3 = v17;
            *--v16 = v17;
          }
          *a2 = v16;
          a2[1] = v9;
          a2[2] = (double *)&v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v5 = v8;
          v9 = v5 + 1;
        }
        a2[1] = v9;
        ++v6;
        v5 = v9;
      }
      while (v6 < a1[5]);
    }
  }
  else
  {
    v18 = (unsigned int *)a1[1];
    v36 = *a1;
    v37 = v18;
    if (v18)
    {
      v19 = v18 + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *((_OWORD *)a1 + 2);
    v38 = *((_OWORD *)a1 + 1);
    v39 = v21;
    v40 = *((_OWORD *)a1 + 3);
    turi::decode_image_inplace((turi *)&v36, (turi::image_type *)a1);
    if (*((_QWORD *)&v40 + 1) != 2)
      turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)const::$_0::operator()();
    if (*((_QWORD *)&v39 + 1))
    {
      v23 = 0;
      v24 = a2 + 2;
      v25 = a2[1];
      do
      {
        LOBYTE(v22) = *(_BYTE *)(v36 + v23);
        v26 = (double)v22;
        if ((unint64_t)v25 >= *v24)
        {
          v28 = *a2;
          v29 = v25 - *a2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v31 = *v24 - (_QWORD)v28;
          if (v31 >> 2 > v30)
            v30 = v31 >> 2;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v32);
            v28 = *a2;
            v25 = a2[1];
          }
          else
          {
            v33 = 0;
          }
          v34 = (double *)&v33[8 * v29];
          *v34 = v26;
          v27 = v34 + 1;
          while (v25 != v28)
          {
            v35 = *((_QWORD *)v25-- - 1);
            v22 = v35;
            *((_QWORD *)v34-- - 1) = v35;
          }
          *a2 = v34;
          a2[1] = v27;
          a2[2] = (double *)&v33[8 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v25 = v26;
          v27 = v25 + 1;
        }
        a2[1] = v27;
        ++v23;
        v25 = v27;
      }
      while (v23 < *((_QWORD *)&v39 + 1));
    }
    boost::detail::shared_count::~shared_count(&v37);
  }
}

void sub_217F4253C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  void *v4;

  boost::detail::shared_count::~shared_count(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"newimg.m_format == Format::RAW_ARRAY", 36);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type.cpp", "operator()", 188, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F42670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::get_ndvec_visitor::operator()(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *__p;
  uint64_t *v60;
  char *v61;

  v4 = 0;
  v5 = 0;
  __p = 0;
  v60 = 0;
  v61 = 0;
  v6 = a1;
  while (1)
  {
    v7 = (v6[1] - *v6) >> 4;
    if ((unint64_t)v5 >= v4)
    {
      v9 = (uint64_t *)__p;
      v10 = ((char *)v5 - (_BYTE *)__p) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v12 = v4 - (_QWORD)__p;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v61, v13);
        v9 = (uint64_t *)__p;
        v5 = v60;
      }
      else
      {
        v14 = 0;
      }
      v15 = (uint64_t *)&v14[8 * v10];
      *v15 = v7;
      v8 = v15 + 1;
      while (v5 != v9)
      {
        v16 = *--v5;
        *--v15 = v16;
      }
      __p = v15;
      v60 = v8;
      v61 = &v14[8 * v13];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v5 = v7;
      v8 = v5 + 1;
    }
    v60 = v8;
    v17 = (unsigned __int8 *)*v6;
    if (v6[1] == *v6)
      break;
    v18 = v17[12];
    if (v18 != 4)
    {
      if (v18 == 9)
      {
        v21 = *(_QWORD *)v17;
        v22 = *(_QWORD *)(*(_QWORD *)v17 + 24);
        if (*(_QWORD *)(*(_QWORD *)v17 + 32) != v22)
        {
          v23 = 0;
          v24 = v8;
          do
          {
            if (v24 >= (uint64_t *)v61)
            {
              v25 = (uint64_t *)__p;
              v26 = ((char *)v24 - (_BYTE *)__p) >> 3;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v28 = v61 - (_BYTE *)__p;
              if ((v61 - (_BYTE *)__p) >> 2 > v27)
                v27 = v28 >> 2;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                v29 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v29 = v27;
              if (v29)
              {
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v61, v29);
                v25 = (uint64_t *)__p;
                v24 = v60;
              }
              else
              {
                v30 = 0;
              }
              v31 = (uint64_t *)&v30[8 * v26];
              *v31 = *(_QWORD *)(v22 + 8 * v23);
              v8 = v31 + 1;
              while (v24 != v25)
              {
                v32 = *--v24;
                *--v31 = v32;
              }
              __p = v31;
              v60 = v8;
              v61 = &v30[8 * v29];
              if (v25)
                operator delete(v25);
            }
            else
            {
              *v24 = *(_QWORD *)(v22 + 8 * v23);
              v8 = v24 + 1;
            }
            v60 = v8;
            ++v23;
            v22 = *(_QWORD *)(v21 + 24);
            v24 = v8;
          }
          while (v23 < (*(_QWORD *)(v21 + 32) - v22) >> 3);
        }
      }
      else if (v18 == 3)
      {
        v19 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v17 + 16) - *(_QWORD *)(*(_QWORD *)v17 + 8)) >> 3;
        if (v8 >= (uint64_t *)v61)
        {
          v33 = (uint64_t *)__p;
          v34 = ((char *)v8 - (_BYTE *)__p) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v36 = v61 - (_BYTE *)__p;
          if ((v61 - (_BYTE *)__p) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v61, v37);
            v33 = (uint64_t *)__p;
            v8 = v60;
          }
          else
          {
            v38 = 0;
          }
          v39 = (uint64_t *)&v38[8 * v34];
          v40 = &v38[8 * v37];
          *v39 = v19;
          v20 = v39 + 1;
          while (v8 != v33)
          {
            v41 = *--v8;
            *--v39 = v41;
          }
          __p = v39;
          v60 = v20;
          v61 = v40;
          if (v33)
            operator delete(v33);
        }
        else
        {
          *v8 = v19;
          v20 = v8 + 1;
        }
        v60 = v20;
        v8 = v20;
      }
      else if (((0x3BCuLL >> v18) & 1) != 0)
      {
        turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_0::operator()();
      }
      break;
    }
    v6 = (uint64_t *)(*(_QWORD *)v17 + 8);
    v4 = (unint64_t)v61;
    v5 = v8;
  }
  v42 = (uint64_t *)__p;
  if (v8 == __p)
  {
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)&v56, (uint64_t)&v53, (uint64_t)&v50, 0);
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
  }
  else
  {
    v43 = ((char *)v8 - (_BYTE *)__p) >> 3;
    if (v43 <= 1)
      v43 = 1;
    v44 = 1;
    do
    {
      v45 = *v42++;
      v44 *= v45;
      --v43;
    }
    while (v43);
    if (v44)
    {
      v46 = (std::__shared_weak_count *)operator new(0x30uLL);
      v46->__shared_weak_owners_ = 0;
      v46->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9195E8;
      v46->__shared_owners_ = 0;
      v46[1].__shared_owners_ = 0;
      v46[1].__shared_weak_owners_ = 0;
      v46[1].__vftable = 0;
      v53 = &v46[1];
      v54 = v46;
      std::vector<double>::reserve((void **)&v46[1].__vftable, v44);
      if ((turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(a1, &__p, 0, (double **)v53) & 1) == 0)
        turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_1::operator()();
      v56 = 0;
      v57 = 0;
      v58 = 0;
      turi::flexible_type_impl::ndarray<double>::ndarray(a2, &v53, (uint64_t)&__p, (uint64_t)&v56, 0);
      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      v47 = v54;
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v49 = __ldaxr(p_shared_owners);
        while (__stlxr(v49 - 1, p_shared_owners));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      goto LABEL_83;
    }
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)&v56, (uint64_t)&__p, (uint64_t)&v53, 0);
  }
  if (v53)
  {
    v54 = (std::__shared_weak_count *)v53;
    operator delete(v53);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
LABEL_83:
  if (__p)
  {
    v60 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_217F42BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(uint64_t *a1, _QWORD *a2, unint64_t a3, double **a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  char v11;
  _BOOL8 v12;
  double v13;
  uint64_t v14;
  char **v15;
  char *v16;
  double v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  char v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  double *v67;
  double *v68;
  double *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  __int128 v94;
  __int128 v95;
  std::runtime_error *exception;
  std::string *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE __str[32];
  __int128 v102;
  __int128 v103;
  std::string v104;
  size_t __idx;

  v4 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v4 <= a3)
    return 0;
  v6 = *a1;
  v7 = a1[1];
  if (*(_QWORD *)(*a2 + 8 * a3) != (v7 - *a1) >> 4)
    return 0;
  if (v4 - 1 != a3)
  {
    if (v7 != v6)
    {
      v32 = 0;
      v33 = a3 + 1;
      v34 = a3 + 2;
      v99 = 8 * a3 + 8;
      v100 = (uint64_t)(a4 + 2);
      while (1)
      {
        v35 = (unsigned __int8 *)(v6 + 16 * v32);
        v36 = v35[12];
        switch(v36)
        {
          case 9:
            v41 = *(_QWORD *)v35;
            v42 = (uint64_t)(a2[1] - *a2) >> 3;
            v43 = v42 - v33;
            v45 = *(uint64_t **)(*(_QWORD *)v35 + 24);
            v44 = *(uint64_t **)(*(_QWORD *)v35 + 32);
            if (v42 - v33 != v44 - v45)
              return 0;
            if (v42 > v33)
            {
              v46 = (uint64_t *)(*a2 + v99);
              v47 = 1;
              v48 = v45;
              v49 = v43;
              do
              {
                v51 = *v46++;
                v50 = v51;
                v52 = *v48++;
                v47 &= v50 == v52;
                --v49;
              }
              while (v49);
              if ((v47 & 1) == 0)
                return 0;
            }
            if (v44 != v45)
            {
              if (*(_QWORD *)(v41 + 8))
              {
                v53 = 1;
                do
                {
                  v54 = *v45++;
                  v53 *= v54;
                }
                while (v45 != v44);
                if (v53)
                {
                  v104.__r_.__value_.__r.__words[0] = 0;
                  std::vector<unsigned long>::vector(__str, v43, &v104);
                  v56 = *(char **)&__str[8];
                  v55 = *(char **)__str;
                  do
                  {
                    v57 = v56 - v55;
                    if (v56 == v55)
                    {
                      v58 = 0;
                    }
                    else
                    {
                      v58 = 0;
                      v59 = v57 >> 3;
                      v60 = *(uint64_t **)(v41 + 48);
                      if (v59 <= 1)
                        v59 = 1;
                      do
                      {
                        v62 = *(_QWORD *)v55;
                        v55 += 8;
                        v61 = v62;
                        v63 = *v60++;
                        v58 += v63 * v61;
                        --v59;
                      }
                      while (v59);
                    }
                    v64 = *(_QWORD *)(v41 + 72) + v58;
                    v65 = **(_QWORD **)(v41 + 8);
                    v67 = a4[1];
                    v66 = (unint64_t)a4[2];
                    if ((unint64_t)v67 >= v66)
                    {
                      v69 = *a4;
                      v70 = v67 - *a4;
                      v71 = v70 + 1;
                      if ((unint64_t)(v70 + 1) >> 61)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      v72 = v66 - (_QWORD)v69;
                      if (v72 >> 2 > v71)
                        v71 = v72 >> 2;
                      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                        v73 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v73 = v71;
                      if (v73)
                      {
                        v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v100, v73);
                        v69 = *a4;
                        v67 = a4[1];
                      }
                      else
                      {
                        v74 = 0;
                      }
                      v75 = &v74[8 * v70];
                      *(_QWORD *)v75 = *(_QWORD *)(v65 + 8 * v64);
                      v68 = (double *)(v75 + 8);
                      while (v67 != v69)
                      {
                        v76 = *((_QWORD *)v67-- - 1);
                        *((_QWORD *)v75 - 1) = v76;
                        v75 -= 8;
                      }
                      *a4 = (double *)v75;
                      a4[1] = v68;
                      a4[2] = (double *)&v74[8 * v73];
                      if (v69)
                        operator delete(v69);
                    }
                    else
                    {
                      *v67 = *(double *)(v65 + 8 * v64);
                      v68 = v67 + 1;
                    }
                    a4[1] = v68;
                    v56 = *(char **)&__str[8];
                    v55 = *(char **)__str;
                    v77 = (uint64_t)(*(_QWORD *)&__str[8] - *(_QWORD *)__str) >> 3;
                    v78 = v77 - 1;
                    if ((uint64_t)(*(_QWORD *)&__str[8] - *(_QWORD *)__str) >= 1)
                    {
                      v79 = *(_QWORD *)(v41 + 24);
                      v80 = *(_QWORD *)(*(_QWORD *)__str + 8 * v78) + 1;
                      *(_QWORD *)(*(_QWORD *)__str + 8 * v78) = v80;
                      if (v80 >= *(_QWORD *)(v79 + 8 * v78))
                      {
                        v81 = (unint64_t *)&v55[8 * v77 - 16];
                        v82 = v79 - 16;
                        while (1)
                        {
                          v83 = v77 - 1;
                          v81[1] = 0;
                          if (v77 - 1 <= 0)
                            goto LABEL_94;
                          v84 = *v81 + 1;
                          *v81-- = v84;
                          v85 = *(_QWORD *)(v82 + 8 * v77--);
                          if (v84 < v85)
                          {
                            v78 = v83 - 1;
                            break;
                          }
                        }
                      }
                      v77 = 1;
                    }
                  }
                  while ((v78 & 0x8000000000000000) == 0 && v77);
                  if (!v55)
                    break;
LABEL_94:
                  *(_QWORD *)&__str[8] = v55;
                  operator delete(v55);
                }
              }
            }
            break;
          case 4:
            if (!turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(*(_QWORD *)v35 + 8, a2, v33, a4))return 0;
            break;
          case 3:
            if (v34 != (uint64_t)(a2[1] - *a2) >> 3)
              return 0;
            v37 = *(_QWORD *)v35;
            v39 = *(char **)(v37 + 8);
            v38 = *(char **)(v37 + 16);
            if (*(_QWORD *)(*a2 + 8 * v33) != (v38 - v39) >> 3)
              return 0;
            if (v39 != v38)
            {
              v40 = (char *)a4[1];
              do
              {
                v40 = std::vector<double>::insert((uint64_t)a4, v40, v39) + 8;
                v39 += 8;
              }
              while (v39 != v38);
            }
            break;
          default:
            return 0;
        }
        ++v32;
        v6 = *a1;
        v12 = 1;
        if (v32 >= (a1[1] - *a1) >> 4)
          return v12;
      }
    }
    return 1;
  }
  if (v7 == v6)
    return 1;
  v9 = 0;
  do
  {
    v10 = v6 + 16 * v9;
    v11 = *(_BYTE *)(v10 + 12);
    v12 = ((0x3BCuLL >> v11) & 1) == 0;
    if (((0x3BCuLL >> v11) & 1) != 0)
      break;
    v13 = 0.0;
    switch(*(_BYTE *)(v10 + 12))
    {
      case 0:
        v13 = (double)*(uint64_t *)v10;
        break;
      case 1:
        v13 = *(double *)v10;
        break;
      case 2:
        v14 = *(_QWORD *)v10;
        v15 = (char **)(*(_QWORD *)v10 + 8);
        __idx = 0;
        v16 = (char *)v15;
        if (*(char *)(v14 + 31) < 0)
          v16 = *v15;
        std::string::basic_string[abi:ne180100]<0>(__str, v16);
        v17 = std::stod((const std::string *)__str, &__idx);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        if (*(char *)(v14 + 31) < 0)
          v18 = *(_QWORD *)(v14 + 16);
        else
          v18 = *(unsigned __int8 *)(v14 + 31);
        if (__idx != v18)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v97 = std::string::append(&v104, " cannot be interpreted as a float");
          v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          *(_QWORD *)&__str[16] = *((_QWORD *)&v97->__r_.__value_.__l + 2);
          *(_OWORD *)__str = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__str);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v19 = v17;
        v13 = v19;
        break;
      case 3:
        v89 = *(_QWORD *)v10;
        memset(__str, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v89 + 8), *(_QWORD *)(v89 + 16), (uint64_t)(*(_QWORD *)(v89 + 16) - *(_QWORD *)(v89 + 8)) >> 3);
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      case 4:
        v88 = *(_QWORD *)v10;
        memset(__str, 0, 24);
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v88 + 8), *(uint64_t **)(v88 + 16), (uint64_t)(*(_QWORD *)(v88 + 16) - *(_QWORD *)(v88 + 8)) >> 4);
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      case 5:
        v87 = *(_QWORD *)v10;
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v87 + 8), *(uint64_t **)(v87 + 16), (uint64_t)(*(_QWORD *)(v87 + 16) - *(_QWORD *)(v87 + 8)) >> 5);
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      case 6:
        v13 = (double)*(int *)(v10 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v10 << 8) >> 8);
        break;
      case 7:
        break;
      case 8:
        v90 = *(_QWORD *)v10;
        v91 = *(_QWORD *)(v90 + 16);
        *(_QWORD *)__str = *(_QWORD *)(v90 + 8);
        *(_QWORD *)&__str[8] = v91;
        if (v91)
        {
          v92 = (unsigned int *)(v91 + 8);
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
        v94 = *(_OWORD *)(v90 + 24);
        v95 = *(_OWORD *)(v90 + 56);
        v102 = *(_OWORD *)(v90 + 40);
        v103 = v95;
        *(_OWORD *)&__str[16] = v94;
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)v10 + 8);
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      default:
        turi::flexible_type_fail(BOOL)::$_0::operator()();
    }
    v21 = a4[1];
    v20 = (unint64_t)a4[2];
    if ((unint64_t)v21 >= v20)
    {
      v23 = *a4;
      v24 = v21 - *a4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v26 = v20 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v25;
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v27);
        v23 = *a4;
        v21 = a4[1];
      }
      else
      {
        v28 = 0;
      }
      v29 = (double *)&v28[8 * v24];
      *v29 = v13;
      v22 = v29 + 1;
      while (v21 != v23)
      {
        v30 = *((_QWORD *)v21-- - 1);
        *((_QWORD *)v29-- - 1) = v30;
      }
      *a4 = v29;
      a4[1] = v22;
      a4[2] = (double *)&v28[8 * v27];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v21 = v13;
      v22 = v21 + 1;
    }
    a4[1] = v22;
    ++v9;
    v6 = *a1;
  }
  while (v9 < (a1[1] - *a1) >> 4);
  return v12;
}

void sub_217F43398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a16 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void turi::flexible_type_impl::get_ndvec_visitor::operator()(uint64_t *a1@<X1>, _QWORD *a2@<X8>, unint64_t a3@<D0>)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  char *v21;
  std::__shared_weak_count *v22;
  void *v23[2];
  uint64_t v24;

  turi::flexible_type_impl::get_vec_visitor::operator()(a1, (double **)v23, a3);
  v5 = (char *)operator new(0x30uLL);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_24D9195E8;
  *((_QWORD *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)v23;
  v21 = v5 + 24;
  v22 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 5) = v24;
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  v6 = a1[4];
  if (v6 == 1)
  {
    v8 = a1[2];
    v7 = a1[3];
    v9 = operator new(0x10uLL);
    v19 = v9 + 2;
    v20 = v9 + 2;
    *v9 = v8;
    v9[1] = v7;
  }
  else
  {
    v11 = a1[2];
    v10 = a1[3];
    v9 = operator new(0x18uLL);
    v19 = v9 + 3;
    v20 = v9 + 3;
    *v9 = v11;
    v9[1] = v10;
    v9[2] = v6;
  }
  v17 = 0;
  v18 = v9;
  __p = 0;
  v16 = 0;
  turi::flexible_type_impl::ndarray<double>::ndarray(a2, &v21, (uint64_t)&v18, (uint64_t)&__p, 0);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  v12 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
}

void sub_217F435D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::get_img_visitor::operator()(uint64_t a1@<X1>, turi::image_type *a2@<X8>)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *__p;
  char *v34;
  void *v35;
  _BYTE *v36;

  assert_msg(((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF7) == 16, "Cannot convert nd array to image");
  v4 = *(unint64_t **)(a1 + 16);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v4) >> 3;
  if (v5 == 3)
  {
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[2];
  }
  else
  {
    if (v5 == 2)
    {
      v6 = *v4;
      v7 = v4[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v8 = 1;
  }
  v10 = v8 == 4 || (v8 & 0xFFFFFFFFFFFFFFFDLL) == 1;
  assert_msg(v10, "Channels must be 1, 3 or 4");
  v11 = v6 * v8 * v7;
  if (!v11)
  {
    turi::image_type::image_type(a2, 0, v6, v7, v8, 0, 0, 2);
    return;
  }
  LOBYTE(__p) = 0;
  std::vector<unsigned char>::vector(&v35, v11, &__p);
  v12 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  v32 = 0;
  std::vector<unsigned long>::vector(&__p, v12, &v32);
  v13 = 0;
  v14 = (char *)__p;
  v15 = v34;
  while (1)
  {
    v16 = v15 - v14;
    if (v15 == v14)
    {
      v17 = 0;
    }
    else
    {
      v17 = 0;
      v18 = v16 >> 3;
      v19 = *(uint64_t **)(a1 + 40);
      if (v18 <= 1)
        v18 = 1;
      do
      {
        v21 = *(_QWORD *)v14;
        v14 += 8;
        v20 = v21;
        v22 = *v19++;
        v17 += v22 * v20;
        --v18;
      }
      while (v18);
    }
    *((_BYTE *)v35 + v13) = (int)*(double *)(**(_QWORD **)a1 + 8 * (*(_QWORD *)(a1 + 64) + v17));
    v14 = (char *)__p;
    v15 = v34;
    v23 = (v34 - (_BYTE *)__p) >> 3;
    v24 = v23 - 1;
    if (v34 - (_BYTE *)__p < 1)
      goto LABEL_28;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *((_QWORD *)__p + v24) + 1;
    *((_QWORD *)__p + v24) = v26;
    if (v26 >= *(_QWORD *)(v25 + 8 * v24))
      break;
LABEL_27:
    v23 = 1;
LABEL_28:
    if ((v24 & 0x8000000000000000) == 0)
    {
      ++v13;
      if (v23)
        continue;
    }
    goto LABEL_30;
  }
  v27 = (unint64_t *)&v14[8 * v23 - 16];
  v28 = v25 - 16;
  while (1)
  {
    v29 = v23 - 1;
    v27[1] = 0;
    if (v23 - 1 <= 0)
      break;
    v30 = *v27 + 1;
    *v27-- = v30;
    v31 = *(_QWORD *)(v28 + 8 * v23--);
    if (v30 < v31)
    {
      v24 = v29 - 1;
      goto LABEL_27;
    }
  }
LABEL_30:
  turi::image_type::image_type(a2, (const char *)v35, v6, v7, v8, v36 - (_BYTE *)v35, 0, 2);
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
}

void sub_217F43870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_impl::soft_assignment_visitor::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  unint64_t v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  double v12;
  double v13;
  std::string *v14;
  __int128 v15;
  char *v16;
  char ***v17;
  unint64_t *v18;
  double v19;
  double v20;
  std::string *v21;
  __int128 v22;
  _QWORD *v23;
  unint64_t *v24;
  double v25;
  double v26;
  std::string *v27;
  __int128 v28;
  _QWORD *v29;
  char **v30;
  unint64_t *v31;
  double v32;
  double v33;
  std::string *v34;
  __int128 v35;
  _QWORD *v36;
  unint64_t *v37;
  double v38;
  double v39;
  std::string *v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t *v43;
  unint64_t *v44;
  double v45;
  double v46;
  std::string *v47;
  __int128 v48;
  unint64_t *v49;
  double v50;
  double v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  double v55;
  double v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  double v60;
  double *v61;
  unint64_t v62;
  double v63;
  std::string::size_type v64;
  double *v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  char *v69;
  double *v70;
  double v71;
  unint64_t *v72;
  double v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  double v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t *v84;
  double v85;
  double v86;
  std::string *v87;
  __int128 v88;
  unint64_t *v89;
  double v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  double v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  double v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  unint64_t v120;
  double v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  double v127;
  double v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  double v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  char *v137;
  unint64_t *v138;
  double v139;
  double v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;
  unint64_t *v144;
  double v145;
  double v146;
  unint64_t v147;
  unint64_t v148;
  void *v149;
  char *v150;
  uint64_t *v151;
  uint64_t *v152;
  _QWORD *v153;
  unint64_t *v155;
  double v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  double v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  void *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  double v171;
  double v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  double v176;
  double v177;
  unint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t *v181;
  int v182;
  unint64_t *v183;
  double v184;
  double v185;
  std::string *v186;
  __int128 v187;
  unint64_t *v188;
  double v189;
  double v190;
  std::string *v191;
  __int128 v192;
  double v193;
  int v194;
  unint64_t *v195;
  double v196;
  double v197;
  std::string *v198;
  __int128 v199;
  unint64_t v200;
  unint64_t v201;
  double v202;
  __int128 v203;
  uint64_t v204;
  std::string::size_type v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  __int128 v209;
  __int128 v210;
  unint64_t v211;
  unint64_t v212;
  double *v213;
  double v214;
  std::string::size_type v215;
  double *v216;
  uint64_t v217;
  unint64_t v218;
  int64_t v219;
  unint64_t v220;
  char *v221;
  double *v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *p_shared_owners;
  unint64_t v229;
  void *v230;
  void *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  double v235;
  uint64_t v236;
  _BYTE *v237;
  unint64_t v238;
  turi::flexible_type_impl *v239;
  unint64_t v240;
  _QWORD *v241;
  std::string *v242;
  std::string::size_type v243;
  _QWORD *v244;
  std::string *v245;
  std::string::size_type v246;
  _QWORD *v247;
  std::string *v248;
  std::string::size_type v249;
  _QWORD *v250;
  std::string *v251;
  std::string::size_type v252;
  _BYTE *v253;
  void **v254;
  unint64_t v255;
  _BOOL8 v257;
  size_t v258;
  unint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  unint64_t v283;
  unint64_t v284;
  double v285;
  unint64_t v286;
  unint64_t v287;
  void **v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  uint64_t v294;
  unint64_t v295;
  int64_t v296;
  unint64_t v297;
  char *v298;
  char *v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t **v303;
  uint64_t *v304;
  uint64_t v305;
  unint64_t v306;
  _QWORD *v307;
  std::string *v308;
  std::string::size_type size;
  _QWORD *v310;
  std::string *v311;
  std::string::size_type v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  _QWORD *v326;
  unint64_t v327;
  uint64_t v328;
  std::string::size_type v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  void **v379;
  __int128 v380;
  unint64_t v381;
  unint64_t v382;
  double v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  __int128 v387;
  void *v388;
  unint64_t v389;
  unint64_t v390;
  int v391;
  _QWORD *v392;
  uint64_t v393;
  unint64_t v394;
  int64_t v395;
  unint64_t v396;
  char *v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  char *v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  void *v408;
  void *v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  unint64_t *v413;
  unint64_t v414;
  unint64_t v415;
  double v416;
  double v417;
  uint64_t v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t v421;
  double v422;
  unint64_t *v423;
  unint64_t v424;
  unint64_t v425;
  double v426;
  void *v427;
  void *v428;
  unsigned int v429;
  unint64_t *v430;
  unint64_t v431;
  unint64_t v432;
  double v433;
  void *v434;
  unint64_t *v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  double v441;
  unint64_t *v442;
  double v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t *v446;
  double v447;
  unint64_t v448;
  BOOL v449;
  double v450;
  unint64_t v451;
  BOOL v452;
  double v453;
  unint64_t v454;
  unint64_t *v455;
  double v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t *v459;
  double v460;
  unint64_t v461;
  unint64_t v462;
  double v463;
  unint64_t v464;
  double v465;
  unint64_t v466;
  double v467;
  unint64_t v468;
  double v469;
  unint64_t v470;
  double v471;
  unint64_t v472;
  unint64_t *v473;
  double v474;
  unint64_t v475;
  unint64_t v476;
  double v477;
  unint64_t v478;
  double v479;
  unint64_t v480;
  _QWORD *v481;
  _QWORD *v482;
  unint64_t *v483;
  double v484;
  unint64_t v485;
  unint64_t v486;
  double v487;
  unint64_t v488;
  double v489;
  unint64_t v490;
  double v491;
  unint64_t v492;
  double v493;
  unint64_t v494;
  _QWORD *v495;
  double v496;
  unint64_t v497;
  unint64_t *v498;
  double v499;
  unint64_t v500;
  unint64_t v501;
  double v502;
  unint64_t v503;
  double v504;
  unint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  char v512;
  char *v513;
  uint64_t **v514;
  uint64_t v515[3];
  void *v516;
  std::__shared_weak_count *v517;
  uint64_t v518;
  _BYTE v519[32];
  _BYTE v520[32];
  uint64_t v521;
  void *v522;
  char v523;
  _BYTE v524[160];
  double **v525;
  double **v526;
  uint64_t v527;
  uint64_t *v528;
  uint64_t *v529;
  _QWORD *v530;
  std::string v531;
  double v532;
  int v533;
  char v534;
  uint64_t v535;

  v3 = a3;
  v535 = *MEMORY[0x24BDAC8D0];
  std::vector<double>::resize((uint64_t)a2, (uint64_t)(a3[1] - *a3) >> 4);
  v533 = 0;
  v534 = 1;
  v532 = 0.0;
  v6 = *v3;
  if (v3[1] == *v3)
    return;
  v7 = 0;
  v510 = *MEMORY[0x24BEDB7F0];
  v508 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v509 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v506 = MEMORY[0x24BEDB848] + 16;
  v507 = v3;
  do
  {
    v8 = v6 + 16 * v7;
    if ((double *)v8 == &v532)
      goto LABEL_565;
    switch(*(_BYTE *)(v8 + 12))
    {
      case 0:
        switch(v534)
        {
          case 0:
            v9 = *(uint64_t *)v8;
            goto LABEL_33;
          case 1:
            v193 = (double)*(uint64_t *)v8;
            goto LABEL_214;
          case 2:
            v183 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v184 = COERCE_DOUBLE(operator new());
              v185 = v532;
              **(_QWORD **)&v184 = **(_QWORD **)&v532;
              v186 = (std::string *)(*(_QWORD *)&v184 + 8);
              if (*(char *)(*(_QWORD *)&v185 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v186, *(const std::string::value_type **)(*(_QWORD *)&v185 + 8), *(_QWORD *)(*(_QWORD *)&v185 + 16));
              }
              else
              {
                v187 = *(_OWORD *)(*(_QWORD *)&v185 + 8);
                *(_QWORD *)(*(_QWORD *)&v184 + 24) = *(_QWORD *)(*(_QWORD *)&v185 + 24);
                *(_OWORD *)&v186->__r_.__value_.__l.__data_ = v187;
              }
              v532 = v184;
              **(_QWORD **)&v184 = 1;
              do
              {
                v381 = __ldaxr(v183);
                v382 = v381 - 1;
              }
              while (__stlxr(v382, v183));
              if (!v382)
              {
                if (*((char *)v183 + 31) < 0)
                  operator delete((void *)v183[1]);
                MEMORY[0x219A19A08](v183, 0x1012C404EF22A49);
              }
            }
            v383 = v532;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v519);
            std::ostream::operator<<();
            std::stringbuf::str();
            *(_QWORD *)v519 = v510;
            *(_QWORD *)&v519[*(_QWORD *)(v510 - 24)] = v509;
            *(_QWORD *)&v519[16] = v508;
            v384 = v506;
            goto LABEL_548;
          case 3:
            v498 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v499 = COERCE_DOUBLE(operator new());
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v499, *(uint64_t *)&v532);
              v532 = v499;
              **(_QWORD **)&v499 = 1;
              do
              {
                v500 = __ldaxr(v498);
                v501 = v500 - 1;
              }
              while (__stlxr(v501, v498));
              if (!v501)
                turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v498);
            }
            goto LABEL_803;
          case 4:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v479 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v479, *(uint64_t *)&v532);
            v532 = v479;
            **(_QWORD **)&v479 = 1;
            do
            {
              v480 = __ldaxr(v446);
              v449 = --v480 == 0;
            }
            while (__stlxr(v480, v446));
            goto LABEL_773;
          case 5:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v493 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v493, *(uint64_t *)&v532);
            v532 = v493;
            **(_QWORD **)&v493 = 1;
            do
            {
              v494 = __ldaxr(v446);
              v452 = --v494 == 0;
            }
            while (__stlxr(v494, v446));
            goto LABEL_798;
          case 6:
            *(_QWORD *)&v532 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            v533 = 0;
            goto LABEL_565;
          case 8:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_781;
            goto LABEL_803;
          case 9:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_748;
            goto LABEL_803;
          default:
            goto LABEL_803;
        }
      case 1:
        switch(v534)
        {
          case 0:
            v9 = (uint64_t)*(double *)v8;
            goto LABEL_33;
          case 1:
            v193 = *(double *)v8;
            goto LABEL_214;
          case 2:
            v188 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v189 = COERCE_DOUBLE(operator new());
              v190 = v532;
              **(_QWORD **)&v189 = **(_QWORD **)&v532;
              v191 = (std::string *)(*(_QWORD *)&v189 + 8);
              if (*(char *)(*(_QWORD *)&v190 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v191, *(const std::string::value_type **)(*(_QWORD *)&v190 + 8), *(_QWORD *)(*(_QWORD *)&v190 + 16));
              }
              else
              {
                v192 = *(_OWORD *)(*(_QWORD *)&v190 + 8);
                *(_QWORD *)(*(_QWORD *)&v189 + 24) = *(_QWORD *)(*(_QWORD *)&v190 + 24);
                *(_OWORD *)&v191->__r_.__value_.__l.__data_ = v192;
              }
              v532 = v189;
              **(_QWORD **)&v189 = 1;
              do
              {
                v385 = __ldaxr(v188);
                v386 = v385 - 1;
              }
              while (__stlxr(v386, v188));
              if (!v386)
              {
                if (*((char *)v188 + 31) < 0)
                  operator delete((void *)v188[1]);
                MEMORY[0x219A19A08](v188, 0x1012C404EF22A49);
              }
            }
            v383 = v532;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v519);
            std::ostream::operator<<();
            std::stringbuf::str();
            *(_QWORD *)v519 = v510;
            *(_QWORD *)&v519[*(_QWORD *)(v510 - 24)] = v509;
            v384 = MEMORY[0x24BEDB848] + 16;
            *(_QWORD *)&v519[16] = v508;
LABEL_548:
            *(_QWORD *)&v519[24] = v384;
            if (v523 < 0)
              operator delete(v522);
            v254 = (void **)(*(_QWORD *)&v383 + 8);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v524);
            if (*(char *)(*(_QWORD *)&v383 + 31) < 0)
              goto LABEL_551;
            goto LABEL_552;
          case 3:
            v483 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v484 = COERCE_DOUBLE(operator new());
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v484, *(uint64_t *)&v532);
              v532 = v484;
              **(_QWORD **)&v484 = 1;
              do
              {
                v485 = __ldaxr(v483);
                v486 = v485 - 1;
              }
              while (__stlxr(v486, v483));
              if (!v486)
                turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v483);
            }
            goto LABEL_803;
          case 4:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v489 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v489, *(uint64_t *)&v532);
            v532 = v489;
            **(_QWORD **)&v489 = 1;
            do
            {
              v490 = __ldaxr(v446);
              v449 = --v490 == 0;
            }
            while (__stlxr(v490, v446));
            goto LABEL_773;
          case 5:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v496 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v496, *(uint64_t *)&v532);
            v532 = v496;
            **(_QWORD **)&v496 = 1;
            do
            {
              v497 = __ldaxr(v446);
              v452 = --v497 == 0;
            }
            while (__stlxr(v497, v446));
            goto LABEL_798;
          case 6:
            v182 = (int)((*(double *)v8 - (double)(uint64_t)floor(*(double *)v8)) * 1000000.0);
            if (v182 >= 999999)
              v182 = 999999;
            if (v182 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            *(_QWORD *)&v532 = vcvtmd_s64_f64(*(double *)v8) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            v533 = v182;
            goto LABEL_565;
          case 8:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_781;
            goto LABEL_803;
          case 9:
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            goto LABEL_748;
          default:
            goto LABEL_803;
        }
      case 2:
        if (v534 != 2)
        {
          switch(v534)
          {
            case 3:
              v442 = *(unint64_t **)&v532;
              if (**(_QWORD **)&v532 != 1)
              {
                v443 = COERCE_DOUBLE(operator new());
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v443, *(uint64_t *)&v532);
                v532 = v443;
                **(_QWORD **)&v443 = 1;
                do
                {
                  v444 = __ldaxr(v442);
                  v445 = v444 - 1;
                }
                while (__stlxr(v445, v442));
                if (!v445)
                  turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v442);
              }
              goto LABEL_803;
            case 4:
              v446 = *(unint64_t **)&v532;
              if (**(_QWORD **)&v532 == 1)
                goto LABEL_803;
              v447 = COERCE_DOUBLE(operator new());
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v447, *(uint64_t *)&v532);
              v532 = v447;
              **(_QWORD **)&v447 = 1;
              do
              {
                v448 = __ldaxr(v446);
                v449 = --v448 == 0;
              }
              while (__stlxr(v448, v446));
              goto LABEL_773;
            case 5:
              v446 = *(unint64_t **)&v532;
              if (**(_QWORD **)&v532 == 1)
                goto LABEL_803;
              v450 = COERCE_DOUBLE(operator new());
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v450, *(uint64_t *)&v532);
              v532 = v450;
              **(_QWORD **)&v450 = 1;
              do
              {
                v451 = __ldaxr(v446);
                v452 = --v451 == 0;
              }
              while (__stlxr(v451, v446));
              goto LABEL_798;
            case 8:
              if (**(_QWORD **)&v532 != 1)
                goto LABEL_781;
              goto LABEL_803;
            case 9:
              if (**(_QWORD **)&v532 != 1)
                goto LABEL_748;
              goto LABEL_803;
            default:
              goto LABEL_803;
          }
        }
        v23 = *(_QWORD **)v8;
        v24 = *(unint64_t **)&v532;
        if (**(_QWORD **)&v532 != 1)
        {
          v25 = COERCE_DOUBLE(operator new());
          v26 = v532;
          **(_QWORD **)&v25 = **(_QWORD **)&v532;
          v27 = (std::string *)(*(_QWORD *)&v25 + 8);
          if (*(char *)(*(_QWORD *)&v26 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)(*(_QWORD *)&v26 + 8), *(_QWORD *)(*(_QWORD *)&v26 + 16));
          }
          else
          {
            v28 = *(_OWORD *)(*(_QWORD *)&v26 + 8);
            *(_QWORD *)(*(_QWORD *)&v25 + 24) = *(_QWORD *)(*(_QWORD *)&v26 + 24);
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
          }
          v532 = v25;
          **(_QWORD **)&v25 = 1;
          do
          {
            v200 = __ldaxr(v24);
            v201 = v200 - 1;
          }
          while (__stlxr(v201, v24));
          if (!v201)
          {
            if (*((char *)v24 + 31) < 0)
              operator delete((void *)v24[1]);
            MEMORY[0x219A19A08](v24, 0x1012C404EF22A49);
          }
        }
        v202 = v532;
        if (*((char *)v23 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v519, (const std::string::value_type *)v23[1], v23[2]);
        }
        else
        {
          v203 = *(_OWORD *)(v23 + 1);
          *(_QWORD *)&v519[16] = v23[3];
          *(_OWORD *)v519 = v203;
        }
LABEL_561:
        v254 = (void **)(*(_QWORD *)&v202 + 8);
        if (*(char *)(*(_QWORD *)&v202 + 31) < 0)
          operator delete(*v254);
        v387 = *(_OWORD *)v519;
        v388 = *(void **)&v519[16];
LABEL_564:
        v254[2] = v388;
        *(_OWORD *)v254 = v387;
        goto LABEL_565;
      case 3:
        v29 = *(_QWORD **)v8;
        v30 = (char **)(*(_QWORD *)v8 + 8);
        switch(v534)
        {
          case 2:
            v31 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v32 = COERCE_DOUBLE(operator new());
              v33 = v532;
              **(_QWORD **)&v32 = **(_QWORD **)&v532;
              v34 = (std::string *)(*(_QWORD *)&v32 + 8);
              if (*(char *)(*(_QWORD *)&v33 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)(*(_QWORD *)&v33 + 8), *(_QWORD *)(*(_QWORD *)&v33 + 16));
              }
              else
              {
                v35 = *(_OWORD *)(*(_QWORD *)&v33 + 8);
                *(_QWORD *)(*(_QWORD *)&v32 + 24) = *(_QWORD *)(*(_QWORD *)&v33 + 24);
                *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
              }
              v532 = v32;
              **(_QWORD **)&v32 = 1;
              do
              {
                v375 = __ldaxr(v31);
                v376 = v375 - 1;
              }
              while (__stlxr(v376, v31));
              if (!v376)
              {
                if (*((char *)v31 + 31) < 0)
                  operator delete((void *)v31[1]);
                MEMORY[0x219A19A08](v31, 0x1012C404EF22A49);
              }
            }
            v285 = v532;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v519);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"[", 1);
            if (v29[2] != v29[1])
            {
              v377 = 0;
              do
              {
                std::ostream::operator<<();
                ++v377;
                v378 = v29[2] - v29[1];
                if (v377 < v378 >> 3)
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)" ", 1);
                  v378 = v29[2] - v29[1];
                }
              }
              while (v377 < v378 >> 3);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"]", 1);
            std::stringbuf::str();
            goto LABEL_527;
          case 3:
            v175 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v176 = COERCE_DOUBLE(operator new());
              v177 = v532;
              **(_QWORD **)&v176 = **(_QWORD **)&v532;
              *(_QWORD *)(*(_QWORD *)&v176 + 16) = 0;
              *(_QWORD *)(*(_QWORD *)&v176 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v176 + 8) = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(*(_QWORD *)&v176 + 8), *(const void **)(*(_QWORD *)&v177 + 8), *(_QWORD *)(*(_QWORD *)&v177 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v177 + 16) - *(_QWORD *)(*(_QWORD *)&v177 + 8)) >> 3);
              v532 = v176;
              **(_QWORD **)&v176 = 1;
              do
              {
                v178 = __ldaxr(v175);
                v179 = v178 - 1;
              }
              while (__stlxr(v179, v175));
              if (!v179)
              {
                v180 = (void *)v175[1];
                if (v180)
                {
                  v175[2] = (unint64_t)v180;
                  operator delete(v180);
                }
                MEMORY[0x219A19A08](v175, 0x1080C409938AC02);
              }
            }
            if (*(_QWORD **)&v532 == v29)
              goto LABEL_565;
            v150 = (char *)(*(_QWORD *)&v532 + 8);
            v181 = v29 + 2;
            goto LABEL_195;
          case 4:
            v170 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v171 = COERCE_DOUBLE(operator new());
              v172 = v532;
              **(_QWORD **)&v171 = **(_QWORD **)&v532;
              *(_QWORD *)(*(_QWORD *)&v171 + 16) = 0;
              *(_QWORD *)(*(_QWORD *)&v171 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v171 + 8) = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(*(_QWORD *)&v171 + 8), *(uint64_t **)(*(_QWORD *)&v172 + 8), *(uint64_t **)(*(_QWORD *)&v172 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v172 + 16) - *(_QWORD *)(*(_QWORD *)&v172 + 8)) >> 4);
              v532 = v171;
              **(_QWORD **)&v171 = 1;
              do
              {
                v173 = __ldaxr(v170);
                v174 = v173 - 1;
              }
              while (__stlxr(v174, v170));
              if (!v174)
              {
                *(_QWORD *)v519 = v170 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v519);
                MEMORY[0x219A19A08](v170, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(*(_QWORD *)&v532 + 8), (_QWORD *)v29[1], (_QWORD *)v29[2], (uint64_t)(v29[2] - v29[1]) >> 3);
            goto LABEL_565;
          case 5:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v504 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v504, *(uint64_t *)&v532);
            v532 = v504;
            **(_QWORD **)&v504 = 1;
            do
            {
              v505 = __ldaxr(v446);
              v452 = --v505 == 0;
            }
            while (__stlxr(v505, v446));
            goto LABEL_798;
          case 8:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_781;
            goto LABEL_803;
          case 9:
            v155 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v156 = COERCE_DOUBLE(operator new());
              v157 = (_QWORD *)(*(_QWORD *)&v532 + 8);
              **(_QWORD **)&v156 = **(_QWORD **)&v532;
              turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v156 + 8), (uint64_t)v157);
              v532 = v156;
              **(_QWORD **)&v156 = 1;
              do
              {
                v158 = __ldaxr(v155);
                v159 = v158 - 1;
              }
              while (__stlxr(v159, v155));
              if (!v159)
              {
                v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155);
                MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
              }
            }
            v161 = v532;
            v528 = 0;
            v529 = 0;
            v530 = 0;
            memset(&v531, 0, sizeof(v531));
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v30, &v525);
            turi::flexible_type_impl::ndarray<double>::ndarray(v519, &v525, (uint64_t)&v531, (uint64_t)&v528, 0);
            v162 = (std::__shared_weak_count *)v526;
            if (v526)
            {
              v163 = (unint64_t *)(v526 + 1);
              do
                v164 = __ldaxr(v163);
              while (__stlxr(v164 - 1, v163));
              if (!v164)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
            if (v528)
            {
              v529 = v528;
              operator delete(v528);
            }
            if (v531.__r_.__value_.__r.__words[0])
            {
              v531.__r_.__value_.__l.__size_ = v531.__r_.__value_.__r.__words[0];
              operator delete(v531.__r_.__value_.__l.__data_);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)&v161 + 8, (__int128 *)v519);
            v165 = *(void **)(*(_QWORD *)&v161 + 24);
            if (v165)
            {
              *(_QWORD *)(*(_QWORD *)&v161 + 32) = v165;
              operator delete(v165);
              *(_QWORD *)(*(_QWORD *)&v161 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v161 + 32) = 0;
              *(_QWORD *)(*(_QWORD *)&v161 + 40) = 0;
            }
            v166 = *(void **)(*(_QWORD *)&v161 + 48);
            *(_OWORD *)(*(_QWORD *)&v161 + 24) = *(_OWORD *)&v519[16];
            *(_QWORD *)(*(_QWORD *)&v161 + 40) = *(_QWORD *)v520;
            *(_OWORD *)&v519[16] = 0uLL;
            *(_QWORD *)v520 = 0;
            if (v166)
            {
              *(_QWORD *)(*(_QWORD *)&v161 + 56) = v166;
              operator delete(v166);
              *(_QWORD *)(*(_QWORD *)&v161 + 48) = 0;
              *(_QWORD *)(*(_QWORD *)&v161 + 56) = 0;
              *(_QWORD *)(*(_QWORD *)&v161 + 64) = 0;
              v166 = *(void **)&v519[16];
            }
            *(_OWORD *)(*(_QWORD *)&v161 + 48) = *(_OWORD *)&v520[8];
            *(_QWORD *)(*(_QWORD *)&v161 + 64) = *(_QWORD *)&v520[24];
            memset(&v520[8], 0, 24);
            *(_QWORD *)(*(_QWORD *)&v161 + 72) = v521;
            if (v166)
            {
              *(_QWORD *)&v519[24] = v166;
              operator delete(v166);
            }
            v167 = *(std::__shared_weak_count **)&v519[8];
            if (!*(_QWORD *)&v519[8])
              goto LABEL_565;
            v168 = (unint64_t *)(*(_QWORD *)&v519[8] + 8);
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            goto LABEL_504;
          default:
            goto LABEL_803;
        }
      case 4:
        v10 = *(_QWORD *)v8 + 8;
        v513 = &v512;
        v514 = (uint64_t **)v10;
        switch(v534)
        {
          case 2:
            v11 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v12 = COERCE_DOUBLE(operator new());
              v13 = v532;
              **(_QWORD **)&v12 = **(_QWORD **)&v532;
              v14 = (std::string *)(*(_QWORD *)&v12 + 8);
              if (*(char *)(*(_QWORD *)&v13 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(*(_QWORD *)&v13 + 8), *(_QWORD *)(*(_QWORD *)&v13 + 16));
              }
              else
              {
                v15 = *(_OWORD *)(*(_QWORD *)&v13 + 8);
                *(_QWORD *)(*(_QWORD *)&v12 + 24) = *(_QWORD *)(*(_QWORD *)&v13 + 24);
                *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
              }
              v532 = v12;
              **(_QWORD **)&v12 = 1;
              do
              {
                v301 = __ldaxr(v11);
                v302 = v301 - 1;
              }
              while (__stlxr(v302, v11));
              if (!v302)
              {
                if (*((char *)v11 + 31) < 0)
                  operator delete((void *)v11[1]);
                MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
              }
            }
            v285 = v532;
            v303 = v514;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v519);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"[", 1);
            v304 = *v303;
            if (v303[1] != *v303)
            {
              v305 = 0;
              v306 = 0;
              do
              {
                if (BYTE4(v304[v305 + 1]) == 2)
                {
                  v307 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"\"", 1);
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)&(*v303)[v305], &v531);
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v308 = &v531;
                  else
                    v308 = (std::string *)v531.__r_.__value_.__r.__words[0];
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v531.__r_.__value_.__r.__words[2]);
                  else
                    size = v531.__r_.__value_.__l.__size_;
                  v310 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v307, (uint64_t)v308, size);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v310, (uint64_t)"\"", 1);
                }
                else
                {
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)&v304[v305], &v531);
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v311 = &v531;
                  else
                    v311 = (std::string *)v531.__r_.__value_.__r.__words[0];
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v312 = HIBYTE(v531.__r_.__value_.__r.__words[2]);
                  else
                    v312 = v531.__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)v311, v312);
                }
                if (SHIBYTE(v531.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v531.__r_.__value_.__l.__data_);
                ++v306;
                v304 = *v303;
                v313 = (char *)v303[1] - (char *)*v303;
                if (v306 < v313 >> 4)
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)",", 1);
                  v304 = *v303;
                  v313 = (char *)v303[1] - (char *)*v303;
                }
                v305 += 2;
              }
              while (v306 < v313 >> 4);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"]", 1);
            std::stringbuf::str();
            *(_QWORD *)v519 = v510;
            *(_QWORD *)&v519[*(_QWORD *)(v510 - 24)] = v509;
            *(_QWORD *)&v519[16] = v508;
            *(_QWORD *)&v519[24] = MEMORY[0x24BEDB848] + 16;
            v3 = v507;
            if (v523 < 0)
              goto LABEL_528;
            goto LABEL_529;
          case 3:
            v138 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v139 = COERCE_DOUBLE(operator new());
              v140 = v532;
              **(_QWORD **)&v139 = **(_QWORD **)&v532;
              *(_QWORD *)(*(_QWORD *)&v139 + 16) = 0;
              *(_QWORD *)(*(_QWORD *)&v139 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v139 + 8) = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(*(_QWORD *)&v139 + 8), *(const void **)(*(_QWORD *)&v140 + 8), *(_QWORD *)(*(_QWORD *)&v140 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v140 + 16) - *(_QWORD *)(*(_QWORD *)&v140 + 8)) >> 3);
              v532 = v139;
              **(_QWORD **)&v139 = 1;
              do
              {
                v141 = __ldaxr(v138);
                v142 = v141 - 1;
              }
              while (__stlxr(v142, v138));
              if (!v142)
              {
                v143 = (void *)v138[1];
                if (v143)
                {
                  v138[2] = (unint64_t)v143;
                  operator delete(v143);
                }
                MEMORY[0x219A19A08](v138, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::soft_assignment_visitor,std::vector<turi::flexible_type>>::operator()<std::vector<double>>((uint64_t)&v513, *(_QWORD *)&v532 + 8);
            goto LABEL_565;
          case 4:
            v126 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v127 = COERCE_DOUBLE(operator new());
              v128 = v532;
              **(_QWORD **)&v127 = **(_QWORD **)&v532;
              *(_QWORD *)(*(_QWORD *)&v127 + 16) = 0;
              *(_QWORD *)(*(_QWORD *)&v127 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v127 + 8) = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(*(_QWORD *)&v127 + 8), *(uint64_t **)(*(_QWORD *)&v128 + 8), *(uint64_t **)(*(_QWORD *)&v128 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v128 + 16) - *(_QWORD *)(*(_QWORD *)&v128 + 8)) >> 4);
              v532 = v127;
              **(_QWORD **)&v127 = 1;
              do
              {
                v129 = __ldaxr(v126);
                v130 = v129 - 1;
              }
              while (__stlxr(v130, v126));
              if (!v130)
              {
                *(_QWORD *)v519 = v126 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v519);
                MEMORY[0x219A19A08](v126, 0x1020C405E66F15BLL);
              }
            }
            if ((uint64_t **)(*(_QWORD *)&v532 + 8) != v514)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(*(_QWORD *)&v532 + 8, *v514, v514[1], ((char *)v514[1] - (char *)*v514) >> 4);
            goto LABEL_565;
          case 5:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v502 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v502, *(uint64_t *)&v532);
            v532 = v502;
            **(_QWORD **)&v502 = 1;
            do
            {
              v503 = __ldaxr(v446);
              v452 = --v503 == 0;
            }
            while (__stlxr(v503, v446));
            goto LABEL_798;
          case 8:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_781;
            goto LABEL_803;
          case 9:
            v89 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v90 = COERCE_DOUBLE(operator new());
              v91 = (_QWORD *)(*(_QWORD *)&v532 + 8);
              **(_QWORD **)&v90 = **(_QWORD **)&v532;
              turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v90 + 8), (uint64_t)v91);
              v532 = v90;
              **(_QWORD **)&v90 = 1;
              do
              {
                v92 = __ldaxr(v89);
                v93 = v92 - 1;
              }
              while (__stlxr(v93, v89));
              if (!v93)
              {
                v94 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v89);
                MEMORY[0x219A19A08](v94, 0x1030C407B73B9F7);
              }
            }
            v95 = v532;
            memset(v515, 0, sizeof(v515));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v515, *v514, v514[1], ((char *)v514[1] - (char *)*v514) >> 4);
            v96 = 0;
            v97 = 0;
            memset(&v531, 0, sizeof(v531));
            v98 = v515;
            break;
          default:
            goto LABEL_803;
        }
        while (2)
        {
          v99 = (v98[1] - *v98) >> 4;
          if ((unint64_t)v97 >= v96)
          {
            v101 = (_QWORD *)v531.__r_.__value_.__r.__words[0];
            v102 = (uint64_t)((uint64_t)v97 - v531.__r_.__value_.__r.__words[0]) >> 3;
            v103 = v102 + 1;
            if ((unint64_t)(v102 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v104 = v96 - v531.__r_.__value_.__r.__words[0];
            if (v104 >> 2 > v103)
              v103 = v104 >> 2;
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
              v105 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v105 = v103;
            if (v105)
            {
              v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v531.__r_.__value_.__r.__words[2], v105);
              v97 = (_QWORD *)v531.__r_.__value_.__l.__size_;
              v101 = (_QWORD *)v531.__r_.__value_.__r.__words[0];
            }
            else
            {
              v106 = 0;
            }
            v107 = (uint64_t *)&v106[8 * v102];
            *v107 = v99;
            v100 = v107 + 1;
            while (v97 != v101)
            {
              v108 = *--v97;
              *--v107 = v108;
            }
            v531.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
            v531.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
            v531.__r_.__value_.__r.__words[2] = (std::string::size_type)&v106[8 * v105];
            if (v101)
              operator delete(v101);
          }
          else
          {
            *v97 = v99;
            v100 = v97 + 1;
          }
          v531.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
          v109 = (unsigned __int8 *)*v98;
          if (v98[1] != *v98)
          {
            v110 = v109[12];
            switch(v110)
            {
              case 4:
                v98 = (uint64_t *)(*(_QWORD *)v109 + 8);
                v96 = v531.__r_.__value_.__r.__words[2];
                v97 = v100;
                continue;
              case 9:
                v289 = *(_QWORD *)v109;
                v290 = *(_QWORD *)(*(_QWORD *)v109 + 24);
                if (*(_QWORD *)(*(_QWORD *)v109 + 32) != v290)
                {
                  v291 = 0;
                  v292 = v100;
                  do
                  {
                    if ((unint64_t)v292 >= v531.__r_.__value_.__r.__words[2])
                    {
                      v293 = (_QWORD *)v531.__r_.__value_.__r.__words[0];
                      v294 = (uint64_t)((uint64_t)v292 - v531.__r_.__value_.__r.__words[0]) >> 3;
                      v295 = v294 + 1;
                      if ((unint64_t)(v294 + 1) >> 61)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      v296 = v531.__r_.__value_.__r.__words[2] - v531.__r_.__value_.__r.__words[0];
                      if ((uint64_t)(v531.__r_.__value_.__r.__words[2] - v531.__r_.__value_.__r.__words[0]) >> 2 > v295)
                        v295 = v296 >> 2;
                      if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFF8)
                        v297 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v297 = v295;
                      if (v297)
                      {
                        v298 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v531.__r_.__value_.__r.__words[2], v297);
                        v292 = (_QWORD *)v531.__r_.__value_.__l.__size_;
                        v293 = (_QWORD *)v531.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        v298 = 0;
                      }
                      v299 = &v298[8 * v294];
                      *(_QWORD *)v299 = *(_QWORD *)(v290 + 8 * v291);
                      v100 = v299 + 8;
                      while (v292 != v293)
                      {
                        v300 = *--v292;
                        *((_QWORD *)v299 - 1) = v300;
                        v299 -= 8;
                      }
                      v531.__r_.__value_.__r.__words[0] = (std::string::size_type)v299;
                      v531.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
                      v531.__r_.__value_.__r.__words[2] = (std::string::size_type)&v298[8 * v297];
                      if (v293)
                        operator delete(v293);
                    }
                    else
                    {
                      *v292 = *(_QWORD *)(v290 + 8 * v291);
                      v100 = v292 + 1;
                    }
                    v531.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
                    ++v291;
                    v290 = *(_QWORD *)(v289 + 24);
                    v292 = v100;
                  }
                  while (v291 < (*(_QWORD *)(v289 + 32) - v290) >> 3);
                }
                break;
              case 3:
                v204 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v109 + 16) - *(_QWORD *)(*(_QWORD *)v109 + 8)) >> 3;
                if ((unint64_t)v100 >= v531.__r_.__value_.__r.__words[2])
                {
                  v392 = (_QWORD *)v531.__r_.__value_.__r.__words[0];
                  v393 = (uint64_t)((uint64_t)v100 - v531.__r_.__value_.__r.__words[0]) >> 3;
                  v394 = v393 + 1;
                  if ((unint64_t)(v393 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v395 = v531.__r_.__value_.__r.__words[2] - v531.__r_.__value_.__r.__words[0];
                  if ((uint64_t)(v531.__r_.__value_.__r.__words[2] - v531.__r_.__value_.__r.__words[0]) >> 2 > v394)
                    v394 = v395 >> 2;
                  if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFF8)
                    v396 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v396 = v394;
                  if (v396)
                  {
                    v397 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v531.__r_.__value_.__r.__words[2], v396);
                    v100 = (_QWORD *)v531.__r_.__value_.__l.__size_;
                    v392 = (_QWORD *)v531.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    v397 = 0;
                  }
                  v398 = (uint64_t *)&v397[8 * v393];
                  *v398 = v204;
                  v205 = (std::string::size_type)(v398 + 1);
                  while (v100 != v392)
                  {
                    v399 = *--v100;
                    *--v398 = v399;
                  }
                  v531.__r_.__value_.__r.__words[0] = (std::string::size_type)v398;
                  v531.__r_.__value_.__l.__size_ = v205;
                  v531.__r_.__value_.__r.__words[2] = (std::string::size_type)&v397[8 * v396];
                  if (v392)
                    operator delete(v392);
                }
                else
                {
                  *v100 = v204;
                  v205 = (std::string::size_type)(v100 + 1);
                }
                v531.__r_.__value_.__l.__size_ = v205;
                v100 = (_QWORD *)v205;
                break;
              default:
                if (((0x3BCuLL >> v110) & 1) != 0)
                  turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_0::operator()();
                break;
            }
          }
          break;
        }
        v400 = (uint64_t *)v531.__r_.__value_.__r.__words[0];
        if (v100 == (_QWORD *)v531.__r_.__value_.__l.__data_)
        {
          v529 = 0;
          v530 = 0;
          v525 = 0;
          v526 = 0;
          v527 = 0;
          v528 = 0;
          v516 = 0;
          v517 = 0;
          v518 = 0;
          turi::flexible_type_impl::ndarray<double>::ndarray(v519, (uint64_t)&v528, (uint64_t)&v525, (uint64_t)&v516, 0);
          v3 = v507;
          if (v516)
          {
            v517 = (std::__shared_weak_count *)v516;
            operator delete(v516);
          }
        }
        else
        {
          v401 = (uint64_t)((uint64_t)v100 - v531.__r_.__value_.__r.__words[0]) >> 3;
          if (v401 <= 1)
            v401 = 1;
          v402 = 1;
          v3 = v507;
          do
          {
            v403 = *v400++;
            v402 *= v403;
            --v401;
          }
          while (v401);
          if (v402)
          {
            v404 = (char *)operator new(0x30uLL);
            *((_QWORD *)v404 + 1) = 0;
            *((_QWORD *)v404 + 2) = 0;
            *(_QWORD *)v404 = &unk_24D9195E8;
            *((_QWORD *)v404 + 4) = 0;
            *((_QWORD *)v404 + 5) = 0;
            *((_QWORD *)v404 + 3) = 0;
            v525 = (double **)(v404 + 24);
            v526 = (double **)v404;
            std::vector<double>::reserve((void **)v404 + 3, v402);
            if ((turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(v515, &v531, 0, v525) & 1) == 0)
              turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_1::operator()();
            v528 = 0;
            v529 = 0;
            v530 = 0;
            turi::flexible_type_impl::ndarray<double>::ndarray(v519, &v525, (uint64_t)&v531, (uint64_t)&v528, 0);
            if (v528)
            {
              v529 = v528;
              operator delete(v528);
            }
            v405 = (std::__shared_weak_count *)v526;
            if (v526)
            {
              v406 = (unint64_t *)(v526 + 1);
              do
                v407 = __ldaxr(v406);
              while (__stlxr(v407 - 1, v406));
              if (!v407)
              {
                ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                std::__shared_weak_count::__release_weak(v405);
              }
            }
            goto LABEL_603;
          }
          v529 = 0;
          v530 = 0;
          v525 = 0;
          v526 = 0;
          v527 = 0;
          v528 = 0;
          turi::flexible_type_impl::ndarray<double>::ndarray(v519, (uint64_t)&v528, (uint64_t)&v531, (uint64_t)&v525, 0);
        }
        if (v525)
        {
          v526 = v525;
          operator delete(v525);
        }
        if (v528)
        {
          v529 = v528;
          operator delete(v528);
        }
LABEL_603:
        if (v531.__r_.__value_.__r.__words[0])
        {
          v531.__r_.__value_.__l.__size_ = v531.__r_.__value_.__r.__words[0];
          operator delete(v531.__r_.__value_.__l.__data_);
        }
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)&v95 + 8, (__int128 *)v519);
        v408 = *(void **)(*(_QWORD *)&v95 + 24);
        if (v408)
        {
          *(_QWORD *)(*(_QWORD *)&v95 + 32) = v408;
          operator delete(v408);
          *(_QWORD *)(*(_QWORD *)&v95 + 24) = 0;
          *(_QWORD *)(*(_QWORD *)&v95 + 32) = 0;
          *(_QWORD *)(*(_QWORD *)&v95 + 40) = 0;
        }
        v409 = *(void **)(*(_QWORD *)&v95 + 48);
        *(_OWORD *)(*(_QWORD *)&v95 + 24) = *(_OWORD *)&v519[16];
        *(_QWORD *)(*(_QWORD *)&v95 + 40) = *(_QWORD *)v520;
        *(_OWORD *)&v519[16] = 0uLL;
        *(_QWORD *)v520 = 0;
        if (v409)
        {
          *(_QWORD *)(*(_QWORD *)&v95 + 56) = v409;
          operator delete(v409);
          *(_QWORD *)(*(_QWORD *)&v95 + 48) = 0;
          *(_QWORD *)(*(_QWORD *)&v95 + 56) = 0;
          *(_QWORD *)(*(_QWORD *)&v95 + 64) = 0;
          v409 = *(void **)&v519[16];
        }
        *(_OWORD *)(*(_QWORD *)&v95 + 48) = *(_OWORD *)&v520[8];
        *(_QWORD *)(*(_QWORD *)&v95 + 64) = *(_QWORD *)&v520[24];
        memset(&v520[8], 0, 24);
        *(_QWORD *)(*(_QWORD *)&v95 + 72) = v521;
        if (v409)
        {
          *(_QWORD *)&v519[24] = v409;
          operator delete(v409);
        }
        v410 = *(std::__shared_weak_count **)&v519[8];
        if (*(_QWORD *)&v519[8])
        {
          v411 = (unint64_t *)(*(_QWORD *)&v519[8] + 8);
          do
            v412 = __ldaxr(v411);
          while (__stlxr(v412 - 1, v411));
          if (!v412)
          {
            ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
            std::__shared_weak_count::__release_weak(v410);
          }
        }
        v531.__r_.__value_.__r.__words[0] = (std::string::size_type)v515;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v531);
        goto LABEL_565;
      case 5:
        v36 = *(_QWORD **)v8;
        switch(v534)
        {
          case 2:
            v37 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v38 = COERCE_DOUBLE(operator new());
              v39 = v532;
              **(_QWORD **)&v38 = **(_QWORD **)&v532;
              v40 = (std::string *)(*(_QWORD *)&v38 + 8);
              if (*(char *)(*(_QWORD *)&v39 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)(*(_QWORD *)&v39 + 8), *(_QWORD *)(*(_QWORD *)&v39 + 16));
              }
              else
              {
                v41 = *(_OWORD *)(*(_QWORD *)&v39 + 8);
                *(_QWORD *)(*(_QWORD *)&v38 + 24) = *(_QWORD *)(*(_QWORD *)&v39 + 24);
                *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
              }
              v532 = v38;
              **(_QWORD **)&v38 = 1;
              do
              {
                v233 = __ldaxr(v37);
                v234 = v233 - 1;
              }
              while (__stlxr(v234, v37));
              if (!v234)
              {
                if (*((char *)v37 + 31) < 0)
                  operator delete((void *)v37[1]);
                MEMORY[0x219A19A08](v37, 0x1012C404EF22A49);
              }
            }
            v235 = v532;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v519);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"{", 1);
            v236 = v36[1];
            v237 = (_BYTE *)v36[2];
            if (v237 != (_BYTE *)v236)
            {
              v238 = (uint64_t)&v237[-v236] >> 5;
              v239 = (turi::flexible_type_impl *)(v236 + 16);
              v240 = 1;
              do
              {
                if (*((_BYTE *)v239 - 4) == 2)
                {
                  v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"\"", 1);
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v239 - 16), &v531);
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v242 = &v531;
                  else
                    v242 = (std::string *)v531.__r_.__value_.__r.__words[0];
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v243 = HIBYTE(v531.__r_.__value_.__r.__words[2]);
                  else
                    v243 = v531.__r_.__value_.__l.__size_;
                  v244 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)v242, v243);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)"\"", 1);
                }
                else
                {
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v239 - 16), &v531);
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v245 = &v531;
                  else
                    v245 = (std::string *)v531.__r_.__value_.__r.__words[0];
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v246 = HIBYTE(v531.__r_.__value_.__r.__words[2]);
                  else
                    v246 = v531.__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)v245, v246);
                }
                if (SHIBYTE(v531.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v531.__r_.__value_.__l.__data_);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)":", 1);
                if (*((_BYTE *)v239 + 12) == 2)
                {
                  v247 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"\"", 1);
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v239, &v531);
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v248 = &v531;
                  else
                    v248 = (std::string *)v531.__r_.__value_.__r.__words[0];
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v249 = HIBYTE(v531.__r_.__value_.__r.__words[2]);
                  else
                    v249 = v531.__r_.__value_.__l.__size_;
                  v250 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v247, (uint64_t)v248, v249);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250, (uint64_t)"\"", 1);
                }
                else
                {
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v239, &v531);
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v251 = &v531;
                  else
                    v251 = (std::string *)v531.__r_.__value_.__r.__words[0];
                  if ((v531.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v252 = HIBYTE(v531.__r_.__value_.__r.__words[2]);
                  else
                    v252 = v531.__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)v251, v252);
                }
                if (SHIBYTE(v531.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v531.__r_.__value_.__l.__data_);
                if (v240 < v238)
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)", ", 2);
                ++v240;
                v253 = (char *)v239 + 16;
                v239 = (turi::flexible_type_impl *)((char *)v239 + 32);
              }
              while (v253 != v237);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"}", 1);
            std::stringbuf::str();
            *(_QWORD *)v519 = v510;
            *(_QWORD *)&v519[*(_QWORD *)(v510 - 24)] = v509;
            *(_QWORD *)&v519[16] = v508;
            *(_QWORD *)&v519[24] = MEMORY[0x24BEDB848] + 16;
            v3 = v507;
            if (v523 < 0)
              operator delete(v522);
            v254 = (void **)(*(_QWORD *)&v235 + 8);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v524);
            if (*(char *)(*(_QWORD *)&v235 + 31) < 0)
LABEL_551:
              operator delete(*v254);
LABEL_552:
            v387 = *(_OWORD *)&v531.__r_.__value_.__l.__data_;
            v388 = (void *)v531.__r_.__value_.__r.__words[2];
            goto LABEL_564;
          case 3:
            v455 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v456 = COERCE_DOUBLE(operator new());
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v456, *(uint64_t *)&v532);
              v532 = v456;
              **(_QWORD **)&v456 = 1;
              do
              {
                v457 = __ldaxr(v455);
                v458 = v457 - 1;
              }
              while (__stlxr(v458, v455));
              if (!v458)
                turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v455);
            }
            goto LABEL_803;
          case 4:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v453 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v453, *(uint64_t *)&v532);
            v532 = v453;
            **(_QWORD **)&v453 = 1;
            do
            {
              v454 = __ldaxr(v446);
              v449 = --v454 == 0;
            }
            while (__stlxr(v454, v446));
            break;
          case 5:
            v49 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v50 = COERCE_DOUBLE(operator new());
              v51 = v532;
              **(_QWORD **)&v50 = **(_QWORD **)&v532;
              *(_QWORD *)(*(_QWORD *)&v50 + 16) = 0;
              *(_QWORD *)(*(_QWORD *)&v50 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v50 + 8) = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((_QWORD *)(*(_QWORD *)&v50 + 8), *(uint64_t **)(*(_QWORD *)&v51 + 8), *(uint64_t **)(*(_QWORD *)&v51 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v51 + 16) - *(_QWORD *)(*(_QWORD *)&v51 + 8)) >> 5);
              v532 = v50;
              **(_QWORD **)&v50 = 1;
              do
              {
                v52 = __ldaxr(v49);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v49));
              if (!v53)
              {
                *(_QWORD *)v519 = v49 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v519);
                MEMORY[0x219A19A08](v49, 0x1020C405E66F15BLL);
              }
            }
            if (*(_QWORD **)&v532 != v36)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(*(_QWORD *)&v532 + 8), (uint64_t *)v36[1], (uint64_t *)v36[2], (uint64_t)(v36[2] - v36[1]) >> 5);
            goto LABEL_565;
          case 8:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_781;
            goto LABEL_803;
          case 9:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_748;
            goto LABEL_803;
          default:
            goto LABEL_803;
        }
LABEL_773:
        if (v449)
        {
          *(_QWORD *)v519 = v446 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v519);
LABEL_801:
          MEMORY[0x219A19A08](v446, 0x1020C405E66F15BLL);
        }
LABEL_803:
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      case 6:
        switch(v534)
        {
          case 0:
            v9 = (uint64_t)(*(_QWORD *)v8 << 8) >> 8;
            goto LABEL_33;
          case 1:
            v193 = (double)*(int *)(v8 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v8 << 8) >> 8);
LABEL_214:
            v532 = v193;
            goto LABEL_565;
          case 2:
            v195 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v196 = COERCE_DOUBLE(operator new());
              v197 = v532;
              **(_QWORD **)&v196 = **(_QWORD **)&v532;
              v198 = (std::string *)(*(_QWORD *)&v196 + 8);
              if (*(char *)(*(_QWORD *)&v197 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v198, *(const std::string::value_type **)(*(_QWORD *)&v197 + 8), *(_QWORD *)(*(_QWORD *)&v197 + 16));
              }
              else
              {
                v199 = *(_OWORD *)(*(_QWORD *)&v197 + 8);
                *(_QWORD *)(*(_QWORD *)&v196 + 24) = *(_QWORD *)(*(_QWORD *)&v197 + 24);
                *(_OWORD *)&v198->__r_.__value_.__l.__data_ = v199;
              }
              v532 = v196;
              **(_QWORD **)&v196 = 1;
              do
              {
                v389 = __ldaxr(v195);
                v390 = v389 - 1;
              }
              while (__stlxr(v390, v195));
              if (!v390)
              {
                if (*((char *)v195 + 31) < 0)
                  operator delete((void *)v195[1]);
                MEMORY[0x219A19A08](v195, 0x1012C404EF22A49);
              }
            }
            v202 = v532;
            v391 = *(_DWORD *)(v8 + 8);
            v531.__r_.__value_.__r.__words[0] = *(_QWORD *)v8;
            LODWORD(v531.__r_.__value_.__r.__words[1]) = v391;
            turi::flexible_type_impl::date_time_to_string((turi::flexible_type_impl *)&v531, (std::string *)v519);
            goto LABEL_561;
          case 3:
            v473 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v474 = COERCE_DOUBLE(operator new());
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v474, *(uint64_t *)&v532);
              v532 = v474;
              **(_QWORD **)&v474 = 1;
              do
              {
                v475 = __ldaxr(v473);
                v476 = v475 - 1;
              }
              while (__stlxr(v476, v473));
              if (!v476)
                turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v473);
            }
            goto LABEL_803;
          case 4:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v491 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v491, *(uint64_t *)&v532);
            v532 = v491;
            **(_QWORD **)&v491 = 1;
            do
            {
              v492 = __ldaxr(v446);
              v449 = --v492 == 0;
            }
            while (__stlxr(v492, v446));
            goto LABEL_773;
          case 5:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v487 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v487, *(uint64_t *)&v532);
            v532 = v487;
            **(_QWORD **)&v487 = 1;
            do
            {
              v488 = __ldaxr(v446);
              v452 = --v488 == 0;
            }
            while (__stlxr(v488, v446));
            goto LABEL_798;
          case 6:
            v194 = *(_DWORD *)(v8 + 8);
            v532 = *(double *)v8;
            v533 = v194;
            goto LABEL_565;
          case 8:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_781;
            goto LABEL_803;
          case 9:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_748;
            goto LABEL_803;
          default:
            goto LABEL_803;
        }
      case 7:
        switch(v534)
        {
          case 1:
            *(double *)&v9 = NAN;
LABEL_33:
            v532 = *(double *)&v9;
            goto LABEL_565;
          case 2:
            v84 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v85 = COERCE_DOUBLE(operator new());
              v86 = v532;
              **(_QWORD **)&v85 = **(_QWORD **)&v532;
              v87 = (std::string *)(*(_QWORD *)&v85 + 8);
              if (*(char *)(*(_QWORD *)&v86 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v87, *(const std::string::value_type **)(*(_QWORD *)&v86 + 8), *(_QWORD *)(*(_QWORD *)&v86 + 16));
              }
              else
              {
                v88 = *(_OWORD *)(*(_QWORD *)&v86 + 8);
                *(_QWORD *)(*(_QWORD *)&v85 + 24) = *(_QWORD *)(*(_QWORD *)&v86 + 24);
                *(_OWORD *)&v87->__r_.__value_.__l.__data_ = v88;
              }
              v532 = v85;
              **(_QWORD **)&v85 = 1;
              do
              {
                v286 = __ldaxr(v84);
                v287 = v286 - 1;
              }
              while (__stlxr(v287, v84));
              if (!v287)
              {
                if (*((char *)v84 + 31) < 0)
                  operator delete((void *)v84[1]);
                MEMORY[0x219A19A08](v84, 0x1012C404EF22A49);
              }
            }
            v288 = (void **)(*(_QWORD *)&v532 + 8);
            if (*(char *)(*(_QWORD *)&v532 + 31) < 0)
              operator delete(*v288);
            *v288 = 0;
            v288[1] = 0;
            v288[2] = 0;
            goto LABEL_565;
          case 3:
            v459 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v460 = COERCE_DOUBLE(operator new());
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v460, *(uint64_t *)&v532);
              v532 = v460;
              **(_QWORD **)&v460 = 1;
              do
              {
                v461 = __ldaxr(v459);
                v462 = v461 - 1;
              }
              while (__stlxr(v462, v459));
              if (!v462)
                turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v459);
            }
            goto LABEL_803;
          case 4:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v463 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v463, *(uint64_t *)&v532);
            v532 = v463;
            **(_QWORD **)&v463 = 1;
            do
            {
              v464 = __ldaxr(v446);
              v449 = --v464 == 0;
            }
            while (__stlxr(v464, v446));
            goto LABEL_773;
          case 5:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v469 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v469, *(uint64_t *)&v532);
            v532 = v469;
            **(_QWORD **)&v469 = 1;
            do
            {
              v470 = __ldaxr(v446);
              v452 = --v470 == 0;
            }
            while (__stlxr(v470, v446));
            goto LABEL_798;
          case 7:
            goto LABEL_565;
          case 8:
            if (**(_QWORD **)&v532 != 1)
              goto LABEL_781;
            goto LABEL_803;
          case 9:
            if (**(_QWORD **)&v532 != 1)
            {
LABEL_748:
              v481 = (_QWORD *)operator new();
              v482 = (_QWORD *)(*(_QWORD *)&v532 + 8);
              *v481 = **(_QWORD **)&v532;
              turi::flexible_type_impl::ndarray<double>::ndarray(v481 + 1, (uint64_t)v482);
              turi::flexible_type_impl::soft_assignment_visitor::operator()(v481, &v532);
            }
            goto LABEL_803;
          default:
            goto LABEL_803;
        }
      case 8:
        v42 = *(_QWORD **)v8;
        v43 = (uint64_t *)(*(_QWORD *)v8 + 8);
        switch(v534)
        {
          case 2:
            v44 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v45 = COERCE_DOUBLE(operator new());
              v46 = v532;
              **(_QWORD **)&v45 = **(_QWORD **)&v532;
              v47 = (std::string *)(*(_QWORD *)&v45 + 8);
              if (*(char *)(*(_QWORD *)&v46 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v47, *(const std::string::value_type **)(*(_QWORD *)&v46 + 8), *(_QWORD *)(*(_QWORD *)&v46 + 16));
              }
              else
              {
                v48 = *(_OWORD *)(*(_QWORD *)&v46 + 8);
                *(_QWORD *)(*(_QWORD *)&v45 + 24) = *(_QWORD *)(*(_QWORD *)&v46 + 24);
                *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
              }
              v532 = v45;
              **(_QWORD **)&v45 = 1;
              do
              {
                v283 = __ldaxr(v44);
                v284 = v283 - 1;
              }
              while (__stlxr(v284, v44));
              if (!v284)
              {
                if (*((char *)v44 + 31) < 0)
                  operator delete((void *)v44[1]);
                MEMORY[0x219A19A08](v44, 0x1012C404EF22A49);
              }
            }
            v285 = v532;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v519);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)"Height: ", 8);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v519[16], (uint64_t)" Width: ", 8);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_527;
          case 3:
            v54 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v55 = COERCE_DOUBLE(operator new());
              v56 = v532;
              **(_QWORD **)&v55 = **(_QWORD **)&v532;
              *(_QWORD *)(*(_QWORD *)&v55 + 16) = 0;
              *(_QWORD *)(*(_QWORD *)&v55 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v55 + 8) = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(*(_QWORD *)&v55 + 8), *(const void **)(*(_QWORD *)&v56 + 8), *(_QWORD *)(*(_QWORD *)&v56 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v56 + 16) - *(_QWORD *)(*(_QWORD *)&v56 + 8)) >> 3);
              v532 = v55;
              **(_QWORD **)&v55 = 1;
              do
              {
                v57 = __ldaxr(v54);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v54));
              if (!v58)
              {
                v59 = (void *)v54[1];
                if (v59)
                {
                  v54[2] = (unint64_t)v59;
                  operator delete(v59);
                }
                MEMORY[0x219A19A08](v54, 0x1080C409938AC02);
              }
            }
            v60 = v532;
            memset(&v531, 0, sizeof(v531));
            if (v42[8] == 2)
            {
              if (v42[6])
              {
                v61 = 0;
                v62 = 0;
                do
                {
                  LOBYTE(v5) = *(_BYTE *)(*v43 + v62);
                  v63 = (double)*(unint64_t *)&v5;
                  if ((unint64_t)v61 >= v531.__r_.__value_.__r.__words[2])
                  {
                    v65 = (double *)v531.__r_.__value_.__r.__words[0];
                    v66 = (uint64_t)((uint64_t)v61 - v531.__r_.__value_.__r.__words[0]) >> 3;
                    v67 = v66 + 1;
                    if ((unint64_t)(v66 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v68 = v531.__r_.__value_.__r.__words[2] - v531.__r_.__value_.__r.__words[0];
                    if ((uint64_t)(v531.__r_.__value_.__r.__words[2] - v531.__r_.__value_.__r.__words[0]) >> 2 > v67)
                      v67 = v68 >> 2;
                    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
                      v4 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v4 = v67;
                    if (v4)
                    {
                      v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v531.__r_.__value_.__r.__words[2], v4);
                      v61 = (double *)v531.__r_.__value_.__l.__size_;
                      v65 = (double *)v531.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      v69 = 0;
                    }
                    v70 = (double *)&v69[8 * v66];
                    *v70 = v63;
                    v64 = (std::string::size_type)(v70 + 1);
                    while (v61 != v65)
                    {
                      v71 = *--v61;
                      v5 = v71;
                      *--v70 = v71;
                    }
                    v531.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                    v531.__r_.__value_.__l.__size_ = v64;
                    v531.__r_.__value_.__r.__words[2] = (std::string::size_type)&v69[8 * v4];
                    if (v65)
                      operator delete(v65);
                  }
                  else
                  {
                    *v61 = v63;
                    v64 = (std::string::size_type)(v61 + 1);
                  }
                  v531.__r_.__value_.__l.__size_ = v64;
                  ++v62;
                  v61 = (double *)v64;
                }
                while (v62 < v42[6]);
              }
            }
            else
            {
              v206 = v42[2];
              *(_QWORD *)v519 = v42[1];
              *(_QWORD *)&v519[8] = v206;
              if (v206)
              {
                v207 = (unsigned int *)(v206 + 8);
                do
                  v208 = __ldxr(v207);
                while (__stxr(v208 + 1, v207));
              }
              v209 = *(_OWORD *)(v42 + 3);
              v210 = *(_OWORD *)(v42 + 7);
              *(_OWORD *)v520 = *(_OWORD *)(v42 + 5);
              *(_OWORD *)&v520[16] = v210;
              *(_OWORD *)&v519[16] = v209;
              turi::decode_image_inplace((turi *)v519, (turi::image_type *)v4);
              if (*(_QWORD *)&v520[24] != 2)
                turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)const::$_0::operator()();
              if (*(_QWORD *)&v520[8])
              {
                v212 = 0;
                v213 = (double *)v531.__r_.__value_.__l.__size_;
                do
                {
                  LOBYTE(v211) = *(_BYTE *)(*(_QWORD *)v519 + v212);
                  v214 = (double)v211;
                  if ((unint64_t)v213 >= v531.__r_.__value_.__r.__words[2])
                  {
                    v216 = (double *)v531.__r_.__value_.__r.__words[0];
                    v217 = (uint64_t)((uint64_t)v213 - v531.__r_.__value_.__r.__words[0]) >> 3;
                    v218 = v217 + 1;
                    if ((unint64_t)(v217 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v219 = v531.__r_.__value_.__r.__words[2] - v531.__r_.__value_.__r.__words[0];
                    if ((uint64_t)(v531.__r_.__value_.__r.__words[2] - v531.__r_.__value_.__r.__words[0]) >> 2 > v218)
                      v218 = v219 >> 2;
                    if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF8)
                      v220 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v220 = v218;
                    if (v220)
                    {
                      v221 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v531.__r_.__value_.__r.__words[2], v220);
                      v213 = (double *)v531.__r_.__value_.__l.__size_;
                      v216 = (double *)v531.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      v221 = 0;
                    }
                    v222 = (double *)&v221[8 * v217];
                    *v222 = v214;
                    v215 = (std::string::size_type)(v222 + 1);
                    while (v213 != v216)
                    {
                      v223 = *((_QWORD *)v213-- - 1);
                      v211 = v223;
                      *((_QWORD *)v222-- - 1) = v223;
                    }
                    v531.__r_.__value_.__r.__words[0] = (std::string::size_type)v222;
                    v531.__r_.__value_.__l.__size_ = v215;
                    v531.__r_.__value_.__r.__words[2] = (std::string::size_type)&v221[8 * v220];
                    if (v216)
                      operator delete(v216);
                  }
                  else
                  {
                    *v213 = v214;
                    v215 = (std::string::size_type)(v213 + 1);
                  }
                  v531.__r_.__value_.__l.__size_ = v215;
                  ++v212;
                  v213 = (double *)v215;
                }
                while (v212 < *(_QWORD *)&v520[8]);
              }
              boost::detail::shared_count::~shared_count((unsigned int **)&v519[8]);
            }
            v224 = *(void **)(*(_QWORD *)&v60 + 8);
            if (v224)
            {
              *(_QWORD *)(*(_QWORD *)&v60 + 16) = v224;
              operator delete(v224);
              *(_QWORD *)(*(_QWORD *)&v60 + 8) = 0;
              *(_QWORD *)(*(_QWORD *)&v60 + 16) = 0;
              *(_QWORD *)(*(_QWORD *)&v60 + 24) = 0;
            }
            *(std::string *)(*(_QWORD *)&v60 + 8) = v531;
            goto LABEL_565;
          case 4:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v465 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v465, *(uint64_t *)&v532);
            v532 = v465;
            **(_QWORD **)&v465 = 1;
            do
            {
              v466 = __ldaxr(v446);
              v449 = --v466 == 0;
            }
            while (__stlxr(v466, v446));
            goto LABEL_773;
          case 5:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v467 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v467, *(uint64_t *)&v532);
            v532 = v467;
            **(_QWORD **)&v467 = 1;
            do
            {
              v468 = __ldaxr(v446);
              v452 = --v468 == 0;
            }
            while (__stlxr(v468, v446));
            goto LABEL_798;
          case 8:
            if (**(_QWORD **)&v532 != 1)
            {
LABEL_781:
              v495 = (_QWORD *)operator new();
              turi::flexible_type_impl::soft_assignment_visitor::operator()((_QWORD **)&v532, v495);
            }
            goto LABEL_803;
          case 9:
            v72 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v73 = COERCE_DOUBLE(operator new());
              v74 = (_QWORD *)(*(_QWORD *)&v532 + 8);
              **(_QWORD **)&v73 = **(_QWORD **)&v532;
              turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v73 + 8), (uint64_t)v74);
              v532 = v73;
              **(_QWORD **)&v73 = 1;
              do
              {
                v75 = __ldaxr(v72);
                v76 = v75 - 1;
              }
              while (__stlxr(v76, v72));
              if (!v76)
              {
                v77 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v72);
                v5 = MEMORY[0x219A19A08](v77, 0x1030C407B73B9F7);
              }
            }
            v78 = v532;
            turi::flexible_type_impl::get_vec_visitor::operator()(v43, (double **)&v531, *(unint64_t *)&v5);
            v79 = (char *)operator new(0x30uLL);
            *((_QWORD *)v79 + 2) = 0;
            *(_QWORD *)v79 = &unk_24D9195E8;
            *((_QWORD *)v79 + 1) = 0;
            *(_OWORD *)(v79 + 24) = *(_OWORD *)&v531.__r_.__value_.__l.__data_;
            v516 = v79 + 24;
            v517 = (std::__shared_weak_count *)v79;
            *((_QWORD *)v79 + 5) = *((_QWORD *)&v531.__r_.__value_.__l + 2);
            memset(&v531, 0, sizeof(v531));
            v80 = v42[5];
            if (v80 == 1)
            {
              v81 = v42[3];
              v82 = v42[4];
              v83 = (uint64_t *)operator new(0x10uLL);
              *v83 = v81;
              v83[1] = v82;
              v529 = v83 + 2;
              v530 = v83 + 2;
            }
            else
            {
              v225 = v42[3];
              v226 = v42[4];
              v83 = (uint64_t *)operator new(0x18uLL);
              *v83 = v225;
              v83[1] = v226;
              v83[2] = v80;
              v529 = v83 + 3;
              v530 = v83 + 3;
            }
            v525 = 0;
            v526 = 0;
            v527 = 0;
            v528 = v83;
            turi::flexible_type_impl::ndarray<double>::ndarray(v519, &v516, (uint64_t)&v528, (uint64_t)&v525, 0);
            v3 = v507;
            if (v525)
            {
              v526 = v525;
              operator delete(v525);
            }
            if (v528)
            {
              v529 = v528;
              operator delete(v528);
            }
            v227 = v517;
            if (v517)
            {
              p_shared_owners = (unint64_t *)&v517->__shared_owners_;
              do
                v229 = __ldaxr(p_shared_owners);
              while (__stlxr(v229 - 1, p_shared_owners));
              if (!v229)
              {
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
              }
            }
            if (v531.__r_.__value_.__r.__words[0])
            {
              v531.__r_.__value_.__l.__size_ = v531.__r_.__value_.__r.__words[0];
              operator delete(v531.__r_.__value_.__l.__data_);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)&v78 + 8, (__int128 *)v519);
            v230 = *(void **)(*(_QWORD *)&v78 + 24);
            if (v230)
            {
              *(_QWORD *)(*(_QWORD *)&v78 + 32) = v230;
              operator delete(v230);
              *(_QWORD *)(*(_QWORD *)&v78 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v78 + 32) = 0;
              *(_QWORD *)(*(_QWORD *)&v78 + 40) = 0;
            }
            v231 = *(void **)(*(_QWORD *)&v78 + 48);
            *(_OWORD *)(*(_QWORD *)&v78 + 24) = *(_OWORD *)&v519[16];
            *(_QWORD *)(*(_QWORD *)&v78 + 40) = *(_QWORD *)v520;
            *(_OWORD *)&v519[16] = 0uLL;
            *(_QWORD *)v520 = 0;
            if (v231)
            {
              *(_QWORD *)(*(_QWORD *)&v78 + 56) = v231;
              operator delete(v231);
              *(_QWORD *)(*(_QWORD *)&v78 + 48) = 0;
              *(_QWORD *)(*(_QWORD *)&v78 + 56) = 0;
              *(_QWORD *)(*(_QWORD *)&v78 + 64) = 0;
              v231 = *(void **)&v519[16];
            }
            *(_OWORD *)(*(_QWORD *)&v78 + 48) = *(_OWORD *)&v520[8];
            *(_QWORD *)(*(_QWORD *)&v78 + 64) = *(_QWORD *)&v520[24];
            memset(&v520[8], 0, 24);
            *(_QWORD *)(*(_QWORD *)&v78 + 72) = v521;
            if (v231)
            {
              *(_QWORD *)&v519[24] = v231;
              operator delete(v231);
            }
            v167 = *(std::__shared_weak_count **)&v519[8];
            if (!*(_QWORD *)&v519[8])
              goto LABEL_565;
            v232 = (unint64_t *)(*(_QWORD *)&v519[8] + 8);
            do
              v169 = __ldaxr(v232);
            while (__stlxr(v169 - 1, v232));
            goto LABEL_504;
          default:
            goto LABEL_803;
        }
      case 9:
        v16 = *(char **)v8;
        v17 = (char ***)(*(_QWORD *)v8 + 8);
        switch(v534)
        {
          case 2:
            v18 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v19 = COERCE_DOUBLE(operator new());
              v20 = v532;
              **(_QWORD **)&v19 = **(_QWORD **)&v532;
              v21 = (std::string *)(*(_QWORD *)&v19 + 8);
              if (*(char *)(*(_QWORD *)&v20 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(*(_QWORD *)&v20 + 8), *(_QWORD *)(*(_QWORD *)&v20 + 16));
              }
              else
              {
                v22 = *(_OWORD *)(*(_QWORD *)&v20 + 8);
                *(_QWORD *)(*(_QWORD *)&v19 + 24) = *(_QWORD *)(*(_QWORD *)&v20 + 24);
                *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
              }
              v532 = v19;
              **(_QWORD **)&v19 = 1;
              do
              {
                v373 = __ldaxr(v18);
                v374 = v373 - 1;
              }
              while (__stlxr(v374, v18));
              if (!v374)
              {
                if (*((char *)v18 + 31) < 0)
                  operator delete((void *)v18[1]);
                MEMORY[0x219A19A08](v18, 0x1012C404EF22A49);
              }
            }
            v285 = v532;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v519);
            turi::flexible_type_impl::ndarray<double>::print(v17, &v519[16]);
            std::stringbuf::str();
LABEL_527:
            *(_QWORD *)v519 = v510;
            *(_QWORD *)&v519[*(_QWORD *)(v510 - 24)] = v509;
            *(_QWORD *)&v519[16] = v508;
            *(_QWORD *)&v519[24] = MEMORY[0x24BEDB848] + 16;
            if (v523 < 0)
LABEL_528:
              operator delete(v522);
LABEL_529:
            v379 = (void **)(*(_QWORD *)&v285 + 8);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v524);
            if (*(char *)(*(_QWORD *)&v285 + 31) < 0)
              operator delete(*v379);
            v380 = *(_OWORD *)&v531.__r_.__value_.__l.__data_;
            *(_QWORD *)(*(_QWORD *)&v285 + 24) = *((_QWORD *)&v531.__r_.__value_.__l + 2);
            *(_OWORD *)v379 = v380;
            goto LABEL_565;
          case 3:
            v144 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v145 = COERCE_DOUBLE(operator new());
              v146 = v532;
              **(_QWORD **)&v145 = **(_QWORD **)&v532;
              *(_QWORD *)(*(_QWORD *)&v145 + 16) = 0;
              *(_QWORD *)(*(_QWORD *)&v145 + 24) = 0;
              *(_QWORD *)(*(_QWORD *)&v145 + 8) = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(*(_QWORD *)&v145 + 8), *(const void **)(*(_QWORD *)&v146 + 8), *(_QWORD *)(*(_QWORD *)&v146 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v146 + 16) - *(_QWORD *)(*(_QWORD *)&v146 + 8)) >> 3);
              v532 = v145;
              **(_QWORD **)&v145 = 1;
              do
              {
                v147 = __ldaxr(v144);
                v148 = v147 - 1;
              }
              while (__stlxr(v148, v144));
              if (!v148)
              {
                v149 = (void *)v144[1];
                if (v149)
                {
                  v144[2] = (unint64_t)v149;
                  operator delete(v149);
                }
                MEMORY[0x219A19A08](v144, 0x1080C409938AC02);
              }
            }
            v150 = (char *)(*(_QWORD *)&v532 + 8);
            if (!*((_QWORD *)v16 + 9))
            {
              v152 = (uint64_t *)*((_QWORD *)v16 + 3);
              v151 = (uint64_t *)*((_QWORD *)v16 + 4);
              v153 = (_QWORD *)*((_QWORD *)v16 + 1);
              if (v151 == v152 || v153 == 0)
              {
                v314 = 0;
              }
              else
              {
                v314 = 1;
                do
                {
                  v315 = *v152++;
                  v314 *= v315;
                }
                while (v152 != v151);
              }
              if (v314 == (uint64_t)(v153[1] - *v153) >> 3
                && turi::flexible_type_impl::ndarray<double>::last_index(v17) == ((*v17)[1] - **v17) >> 3)
              {
                if (!turi::flexible_type_impl::ndarray<double>::is_full(v17))
                  turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                v30 = *v17;
                if (v150 != (char *)*v17)
                {
                  v181 = (uint64_t *)(v30 + 1);
LABEL_195:
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v150, *v30, *v181, (*v181 - (uint64_t)*v30) >> 3);
                }
                goto LABEL_565;
              }
            }
            if (!turi::flexible_type_impl::ndarray<double>::is_valid(v17))
              turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
            if (turi::flexible_type_impl::ndarray<double>::is_full(v17))
            {
              turi::flexible_type_impl::ndarray<double>::ndarray(v519, (uint64_t)v17);
              goto LABEL_494;
            }
            memset(&v531, 0, sizeof(v531));
            v529 = 0;
            v530 = 0;
            v525 = 0;
            v526 = 0;
            v527 = 0;
            v528 = 0;
            turi::flexible_type_impl::ndarray<double>::ndarray(v519, (uint64_t)&v531, (uint64_t)&v528, (uint64_t)&v525, 0);
            if (v525)
            {
              v526 = v525;
              operator delete(v525);
            }
            if (v528)
            {
              v529 = v528;
              operator delete(v528);
            }
            if (v531.__r_.__value_.__r.__words[0])
            {
              v531.__r_.__value_.__l.__size_ = v531.__r_.__value_.__r.__words[0];
              operator delete(v531.__r_.__value_.__l.__data_);
            }
            v521 = 0;
            if (&v519[16] != v16 + 24)
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v519[16], *((char **)v16 + 3), *((_QWORD *)v16 + 4), (uint64_t)(*((_QWORD *)v16 + 4) - *((_QWORD *)v16 + 3)) >> 3);
            v317 = (uint64_t *)*((_QWORD *)v16 + 3);
            v316 = (uint64_t *)*((_QWORD *)v16 + 4);
            if (v316 == v317 || !*v17)
            {
              v318 = 0;
            }
            else
            {
              v318 = 1;
              do
              {
                v319 = *v317++;
                v318 *= v319;
              }
              while (v317 != v316);
            }
            std::vector<double>::resize(*(uint64_t *)v519, v318);
            std::vector<unsigned long>::resize((uint64_t)&v520[8], (uint64_t)(*((_QWORD *)v16 + 4) - *((_QWORD *)v16 + 3)) >> 3);
            if (*(_QWORD *)&v519[24] == *(_QWORD *)&v519[16] || *(_QWORD *)(*(_QWORD *)v519 + 8) == **(_QWORD **)v519)
              goto LABEL_494;
            std::vector<std::pair<unsigned long,unsigned long>>::vector(&v531, (uint64_t)(*((_QWORD *)v16 + 7) - *((_QWORD *)v16 + 6)) >> 3);
            v320 = *((_QWORD *)v16 + 6);
            v321 = *((_QWORD *)v16 + 7);
            v322 = (unint64_t *)v531.__r_.__value_.__r.__words[0];
            v323 = v321 - v320;
            if (v321 != v320)
            {
              v324 = 0;
              v325 = v323 >> 3;
              if (v325 <= 1)
                v325 = 1;
              v326 = (_QWORD *)(v531.__r_.__value_.__r.__words[0] + 8);
              do
              {
                *(v326 - 1) = *(_QWORD *)(v320 + 8 * v324);
                *v326 = v324++;
                v326 += 2;
              }
              while (v325 != v324);
            }
            v327 = 126 - 2 * __clz((uint64_t)(v531.__r_.__value_.__l.__size_ - (_QWORD)v322) >> 4);
            if ((unint64_t *)v531.__r_.__value_.__l.__size_ == v322)
              v328 = 0;
            else
              v328 = v327;
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(v531.__r_.__value_.__l.__size_, (unint64_t *)v531.__r_.__value_.__l.__size_, (uint64_t)v322, v322, (uint64_t)&v525, v328, 1);
            v329 = v531.__r_.__value_.__r.__words[0];
            v330 = *(_QWORD *)&v520[8];
            *(_QWORD *)(*(_QWORD *)&v520[8] + 8 * *(_QWORD *)(v531.__r_.__value_.__r.__words[0] + 8)) = 1;
            v331 = *((_QWORD *)v16 + 7) - *((_QWORD *)v16 + 6);
            if ((unint64_t)v331 >= 9)
            {
              v332 = v331 >> 3;
              v333 = *(_QWORD *)&v519[16];
              if (v332 <= 2)
                v332 = 2;
              v334 = (uint64_t *)(v329 + 24);
              v335 = v332 - 1;
              do
              {
                v336 = *(_QWORD *)(v333 + 8 * *(v334 - 2)) * *(_QWORD *)(v330 + 8 * *(v334 - 2));
                v337 = *v334;
                v334 += 2;
                *(_QWORD *)(v330 + 8 * v337) = v336;
                --v335;
              }
              while (v335);
            }
            v338 = (uint64_t)(*((_QWORD *)v16 + 4) - *((_QWORD *)v16 + 3)) >> 3;
            v525 = 0;
            std::vector<unsigned long>::vector(&v528, v338, &v525);
            v339 = v528;
            v340 = v529;
            v341 = (char *)v529 - (char *)v528;
            v342 = v529 - v528;
            v343 = v342 - 1;
            if (v342 <= 1)
              v344 = 1;
            else
              v344 = v529 - v528;
            v345 = *(uint64_t **)&v520[8];
            v346 = **(_QWORD **)v519;
            while (2)
            {
              if (v340 == v339)
              {
                v354 = 0;
                v355 = *(_QWORD *)(**((_QWORD **)v16 + 1) + 8 * *((_QWORD *)v16 + 9));
              }
              else
              {
                v347 = 0;
                v348 = (uint64_t *)*((_QWORD *)v16 + 6);
                v349 = v339;
                v350 = v344;
                do
                {
                  v352 = *v349++;
                  v351 = v352;
                  v353 = *v348++;
                  v347 += v353 * v351;
                  --v350;
                }
                while (v350);
                v354 = 0;
                v355 = *(_QWORD *)(**((_QWORD **)v16 + 1) + 8 * (*((_QWORD *)v16 + 9) + v347));
                v356 = v339;
                v357 = v345;
                v358 = v344;
                do
                {
                  v360 = *v356++;
                  v359 = v360;
                  v361 = *v357++;
                  v354 += v361 * v359;
                  --v358;
                }
                while (v358);
              }
              *(_QWORD *)(v346 + 8 * v354) = v355;
              v362 = v340 - v339;
              v363 = v342 - 1;
              if (v341 < 1)
                goto LABEL_483;
              v364 = *((_QWORD *)v16 + 3);
              v365 = v339[v343] + 1;
              v339[v343] = v365;
              if (v365 < *(_QWORD *)(v364 + 8 * v343))
              {
                v362 = 1;
                v363 = v342 - 1;
LABEL_483:
                if ((v363 & 0x8000000000000000) != 0)
                  goto LABEL_490;
LABEL_484:
                if (!v362)
                  goto LABEL_490;
                continue;
              }
              break;
            }
            v366 = v364 - 16;
            v367 = v340 - v339;
            v368 = (unint64_t *)((char *)v339 + (v341 & 0xFFFFFFFFFFFFFFF8) - 16);
            while (1)
            {
              v369 = v367 - 1;
              v368[1] = 0;
              if (v367 - 1 <= 0)
                break;
              v370 = *v368 + 1;
              *v368-- = v370;
              v371 = *(_QWORD *)(v366 + 8 * v367--);
              if (v370 < v371)
              {
                v362 = 1;
                if (((v369 - 1) & 0x8000000000000000) == 0)
                  goto LABEL_484;
                break;
              }
            }
LABEL_490:
            if (v339)
            {
              v529 = v339;
              operator delete(v339);
            }
            if (v531.__r_.__value_.__r.__words[0])
            {
              v531.__r_.__value_.__l.__size_ = v531.__r_.__value_.__r.__words[0];
              operator delete(v531.__r_.__value_.__l.__data_);
            }
LABEL_494:
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v519);
            if (!turi::flexible_type_impl::ndarray<double>::is_full(v519))
              turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
            if (v150 != *(char **)v519)
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v150, **(char ***)v519, *(_QWORD *)(*(_QWORD *)v519 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v519 + 8) - **(_QWORD **)v519) >> 3);
            if (*(_QWORD *)&v520[8])
            {
              *(_QWORD *)&v520[16] = *(_QWORD *)&v520[8];
              operator delete(*(void **)&v520[8]);
            }
            if (*(_QWORD *)&v519[16])
            {
              *(_QWORD *)&v519[24] = *(_QWORD *)&v519[16];
              operator delete(*(void **)&v519[16]);
            }
            v167 = *(std::__shared_weak_count **)&v519[8];
            if (*(_QWORD *)&v519[8])
            {
              v372 = (unint64_t *)(*(_QWORD *)&v519[8] + 8);
              do
                v169 = __ldaxr(v372);
              while (__stlxr(v169 - 1, v372));
LABEL_504:
              if (!v169)
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
            }
            goto LABEL_565;
          case 4:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v477 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](*(_QWORD **)&v477, *(uint64_t *)&v532);
            v532 = v477;
            **(_QWORD **)&v477 = 1;
            do
            {
              v478 = __ldaxr(v446);
              v449 = --v478 == 0;
            }
            while (__stlxr(v478, v446));
            goto LABEL_773;
          case 5:
            v446 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 == 1)
              goto LABEL_803;
            v471 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](*(_QWORD **)&v471, *(uint64_t *)&v532);
            v532 = v471;
            **(_QWORD **)&v471 = 1;
            do
            {
              v472 = __ldaxr(v446);
              v452 = --v472 == 0;
            }
            while (__stlxr(v472, v446));
LABEL_798:
            if (!v452)
              goto LABEL_803;
            *(_QWORD *)v519 = v446 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v519);
            goto LABEL_801;
          case 8:
            v111 = v532;
            if (**(_QWORD **)&v532 != 1)
            {
              *(double *)&v112 = COERCE_DOUBLE(operator new());
              v113 = v532;
              *(_QWORD *)v112 = **(_QWORD **)&v532;
              *(_QWORD *)(v112 + 8) = *(_QWORD *)(*(_QWORD *)&v113 + 8);
              v114 = *(_QWORD *)(*(_QWORD *)&v113 + 16);
              *(_QWORD *)(v112 + 16) = v114;
              if (v114)
              {
                v115 = (unsigned int *)(v114 + 8);
                do
                  v116 = __ldxr(v115);
                while (__stxr(v116 + 1, v115));
              }
              v117 = *(_OWORD *)(*(_QWORD *)&v113 + 24);
              v118 = *(_OWORD *)(*(_QWORD *)&v113 + 40);
              *(_OWORD *)(v112 + 56) = *(_OWORD *)(*(_QWORD *)&v113 + 56);
              *(_OWORD *)(v112 + 40) = v118;
              *(_OWORD *)(v112 + 24) = v117;
              v532 = *(double *)&v112;
              *(_QWORD *)v112 = 1;
              do
              {
                v119 = __ldaxr(*(unint64_t **)&v111);
                v120 = v119 - 1;
              }
              while (__stlxr(v120, *(unint64_t **)&v111));
              if (!v120)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v111 + 16));
                MEMORY[0x219A19A08](*(_QWORD *)&v111, 0x1030C40F1F0227BLL);
              }
            }
            v121 = v532;
            assert_msg(((*((_QWORD *)v16 + 4) - *((_QWORD *)v16 + 3)) & 0xFFFFFFFFFFFFFFF7) == 16, "Cannot convert nd array to image");
            v122 = (unint64_t *)*((_QWORD *)v16 + 3);
            v123 = (uint64_t)(*((_QWORD *)v16 + 4) - (_QWORD)v122) >> 3;
            if (v123 == 3)
            {
              v124 = *v122;
              v125 = v122[1];
              v255 = v122[2];
            }
            else
            {
              if (v123 == 2)
              {
                v124 = *v122;
                v125 = v122[1];
              }
              else
              {
                v124 = 0;
                v125 = 0;
              }
              v255 = 1;
            }
            v257 = v255 == 4 || (v255 & 0xFFFFFFFFFFFFFFFDLL) == 1;
            assert_msg(v257, "Channels must be 1, 3 or 4");
            v258 = v124 * v255 * v125;
            if (!v258)
            {
              turi::image_type::image_type((turi::image_type *)v519, 0, v124, v125, v255, 0, 0, 2);
              goto LABEL_359;
            }
            LOBYTE(v525) = 0;
            std::vector<unsigned char>::vector(&v531, v258, &v525);
            v259 = (uint64_t)(*((_QWORD *)v16 + 4) - *((_QWORD *)v16 + 3)) >> 3;
            v525 = 0;
            std::vector<unsigned long>::vector(&v528, v259, &v525);
            v260 = 0;
            v261 = (char *)v528;
            v262 = (char *)v529;
            break;
          case 9:
            v131 = *(unint64_t **)&v532;
            if (**(_QWORD **)&v532 != 1)
            {
              v132 = COERCE_DOUBLE(operator new());
              v133 = (_QWORD *)(*(_QWORD *)&v532 + 8);
              **(_QWORD **)&v132 = **(_QWORD **)&v532;
              turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v132 + 8), (uint64_t)v133);
              v532 = v132;
              **(_QWORD **)&v132 = 1;
              do
              {
                v134 = __ldaxr(v131);
                v135 = v134 - 1;
              }
              while (__stlxr(v135, v131));
              if (!v135)
              {
                v136 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v131);
                MEMORY[0x219A19A08](v136, 0x1030C407B73B9F7);
              }
            }
            v137 = *(char **)&v532;
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)&v532 + 8), (uint64_t *)v17);
            if (v137 != v16)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v137 + 24, *((char **)v16 + 3), *((_QWORD *)v16 + 4), (uint64_t)(*((_QWORD *)v16 + 4) - *((_QWORD *)v16 + 3)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v137 + 48, *((char **)v16 + 6), *((_QWORD *)v16 + 7), (uint64_t)(*((_QWORD *)v16 + 7) - *((_QWORD *)v16 + 6)) >> 3);
            }
            *((_QWORD *)v137 + 9) = *((_QWORD *)v16 + 9);
            goto LABEL_565;
          default:
            goto LABEL_803;
        }
        break;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
    while (1)
    {
      v263 = v262 - v261;
      if (v262 == v261)
      {
        v264 = 0;
      }
      else
      {
        v264 = 0;
        v265 = v263 >> 3;
        v266 = (uint64_t *)*((_QWORD *)v16 + 6);
        if (v265 <= 1)
          v265 = 1;
        do
        {
          v268 = *(_QWORD *)v261;
          v261 += 8;
          v267 = v268;
          v269 = *v266++;
          v264 += v269 * v267;
          --v265;
        }
        while (v265);
      }
      *(_BYTE *)(v531.__r_.__value_.__r.__words[0] + v260) = (int)*(double *)(**((_QWORD **)v16 + 1)
                                                                            + 8 * (*((_QWORD *)v16 + 9) + v264));
      v261 = (char *)v528;
      v262 = (char *)v529;
      v270 = v529 - v528;
      v271 = v270 - 1;
      if ((char *)v529 - (char *)v528 < 1)
        goto LABEL_352;
      v272 = *((_QWORD *)v16 + 3);
      v273 = v528[v271] + 1;
      v528[v271] = v273;
      if (v273 >= *(_QWORD *)(v272 + 8 * v271))
        break;
LABEL_351:
      v270 = 1;
LABEL_352:
      if ((v271 & 0x8000000000000000) == 0)
      {
        ++v260;
        if (v270)
          continue;
      }
      goto LABEL_354;
    }
    v274 = (unint64_t *)&v261[8 * v270 - 16];
    v275 = v272 - 16;
    while (1)
    {
      v276 = v270 - 1;
      v274[1] = 0;
      if (v270 - 1 <= 0)
        break;
      v277 = *v274 + 1;
      *v274-- = v277;
      v278 = *(_QWORD *)(v275 + 8 * v270--);
      if (v277 < v278)
      {
        v271 = v276 - 1;
        goto LABEL_351;
      }
    }
LABEL_354:
    turi::image_type::image_type((turi::image_type *)v519, v531.__r_.__value_.__l.__data_, v124, v125, v255, v531.__r_.__value_.__l.__size_ - v531.__r_.__value_.__r.__words[0], 0, 2);
    if (v528)
    {
      v529 = v528;
      operator delete(v528);
    }
    if (v531.__r_.__value_.__r.__words[0])
    {
      v531.__r_.__value_.__l.__size_ = v531.__r_.__value_.__r.__words[0];
      operator delete(v531.__r_.__value_.__l.__data_);
    }
LABEL_359:
    v279 = *(_OWORD *)v519;
    *(_OWORD *)v519 = 0uLL;
    v280 = *(_OWORD *)(*(_QWORD *)&v121 + 8);
    *(_OWORD *)(*(_QWORD *)&v121 + 8) = v279;
    *(_OWORD *)&v531.__r_.__value_.__l.__data_ = v280;
    boost::detail::shared_count::~shared_count((unsigned int **)&v531.__r_.__value_.__l.__size_);
    v281 = *(_OWORD *)&v519[16];
    v282 = *(_OWORD *)v520;
    *(_OWORD *)(*(_QWORD *)&v121 + 56) = *(_OWORD *)&v520[16];
    *(_OWORD *)(*(_QWORD *)&v121 + 40) = v282;
    *(_OWORD *)(*(_QWORD *)&v121 + 24) = v281;
    boost::detail::shared_count::~shared_count((unsigned int **)&v519[8]);
LABEL_565:
    v5 = v532;
    *(double *)(*a2 + 8 * v7++) = v532;
    v6 = *v3;
  }
  while (v7 < (uint64_t)(v3[1] - *v3) >> 4);
  switch(v534)
  {
    case 2:
      v413 = *(unint64_t **)&v532;
      do
      {
        v414 = __ldaxr(v413);
        v415 = v414 - 1;
      }
      while (__stlxr(v415, v413));
      if (!v415)
      {
        v416 = v532;
        if (v532 != 0.0)
        {
          if (*(char *)(*(_QWORD *)&v532 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v532 + 8));
          v417 = v416;
          v418 = 0x1012C404EF22A49;
          goto LABEL_658;
        }
      }
      break;
    case 3:
      v430 = *(unint64_t **)&v532;
      do
      {
        v431 = __ldaxr(v430);
        v432 = v431 - 1;
      }
      while (__stlxr(v432, v430));
      if (!v432)
      {
        v433 = v532;
        if (v532 != 0.0)
        {
          v434 = *(void **)(*(_QWORD *)&v532 + 8);
          if (v434)
          {
            *(_QWORD *)(*(_QWORD *)&v532 + 16) = v434;
            operator delete(v434);
          }
          v417 = v433;
          v418 = 0x1080C409938AC02;
          goto LABEL_658;
        }
      }
      break;
    case 4:
      v419 = *(unint64_t **)&v532;
      do
      {
        v420 = __ldaxr(v419);
        v421 = v420 - 1;
      }
      while (__stlxr(v421, v419));
      if (!v421)
      {
        v422 = v532;
        if (v532 != 0.0)
        {
          *(_QWORD *)v519 = *(_QWORD *)&v532 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v519);
          goto LABEL_651;
        }
      }
      break;
    case 5:
      v435 = *(unint64_t **)&v532;
      do
      {
        v436 = __ldaxr(v435);
        v437 = v436 - 1;
      }
      while (__stlxr(v437, v435));
      if (!v437)
      {
        v422 = v532;
        if (v532 != 0.0)
        {
          *(_QWORD *)v519 = *(_QWORD *)&v532 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v519);
LABEL_651:
          v417 = v422;
          v418 = 0x1020C405E66F15BLL;
          goto LABEL_658;
        }
      }
      break;
    case 8:
      v438 = *(unint64_t **)&v532;
      do
      {
        v439 = __ldaxr(v438);
        v440 = v439 - 1;
      }
      while (__stlxr(v440, v438));
      if (!v440)
      {
        v441 = v532;
        if (v532 != 0.0)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v532 + 16));
          v417 = v441;
          v429 = -235920773;
          goto LABEL_657;
        }
      }
      break;
    case 9:
      v423 = *(unint64_t **)&v532;
      do
      {
        v424 = __ldaxr(v423);
        v425 = v424 - 1;
      }
      while (__stlxr(v425, v423));
      if (!v425)
      {
        v426 = v532;
        if (v532 != 0.0)
        {
          v427 = *(void **)(*(_QWORD *)&v532 + 48);
          if (v427)
          {
            *(_QWORD *)(*(_QWORD *)&v532 + 56) = v427;
            operator delete(v427);
          }
          v428 = *(void **)(*(_QWORD *)&v426 + 24);
          if (v428)
          {
            *(_QWORD *)(*(_QWORD *)&v426 + 32) = v428;
            operator delete(v428);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v426 + 8);
          v417 = v426;
          v429 = 2071181815;
LABEL_657:
          v418 = v429 | 0x1030C4000000000;
LABEL_658:
          MEMORY[0x219A19A08](*(_QWORD *)&v417, v418);
        }
      }
      break;
    default:
      return;
  }
}

void sub_217F471D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  _QWORD *v33;
  uint64_t v34;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v36 = (void *)v33[42];
  if (v36)
  {
    v33[43] = v36;
    operator delete(v36);
  }
  v33[42] = &a27;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
  switch(*(_BYTE *)(v34 - 124))
  {
    case 2:
      v37 = (unint64_t *)v33[45];
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_41;
      v40 = v33[45];
      if (!v40)
        goto LABEL_41;
      if (*(char *)(v40 + 31) < 0)
        operator delete(*(void **)(v40 + 8));
      v41 = (_QWORD *)v40;
      v42 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v52 = (unint64_t *)v33[45];
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (v54)
        goto LABEL_41;
      v55 = (_QWORD *)v33[45];
      if (!v55)
        goto LABEL_41;
      v56 = (void *)v55[1];
      if (v56)
      {
        v55[2] = v56;
        operator delete(v56);
      }
      v41 = v55;
      v42 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v43 = (unint64_t *)v33[45];
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_41;
      v46 = (_QWORD *)v33[45];
      if (!v46)
        goto LABEL_41;
      v33[39] = v46 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 184));
      goto LABEL_33;
    case 5:
      v57 = (unint64_t *)v33[45];
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (v59)
        goto LABEL_41;
      v46 = (_QWORD *)v33[45];
      if (!v46)
        goto LABEL_41;
      v33[39] = v46 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 184));
LABEL_33:
      v41 = v46;
      v42 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v60 = (unint64_t *)v33[45];
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (v62)
        goto LABEL_41;
      v63 = v33[45];
      if (!v63)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v63 + 16));
      v41 = (_QWORD *)v63;
      v51 = -235920773;
      goto LABEL_39;
    case 9:
      v47 = (unint64_t *)v33[45];
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_41;
      v50 = (_QWORD *)v33[45];
      if (!v50)
        goto LABEL_41;
      v41 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v50);
      v51 = 2071181815;
LABEL_39:
      v42 = v51 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v41, v42);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

BOOL turi::flexible_type_impl::approx_equality_operator::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  _BOOL8 v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v4 = *a2;
  v5 = a2[1];
  if ((char *)v5 - (char *)v4 != (char *)a3[1] - (char *)*a3)
    return 0;
  std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v10, v4, v5);
  std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v9, *a3, a3[1]);
  v7 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(v10, v9);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v9);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v10);
  return v7;
}

void sub_217F47794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&a14);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  _BOOL8 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;

  if (a1[3] != a2[3])
    return 0;
  v4 = (unsigned __int8 *)a1[2];
  do
  {
    v5 = v4 == 0;
    if (!v4)
      break;
    v6 = v4 + 16;
    v7 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__equal_range_multi<turi::flexible_type>(a1, v4 + 16);
    v4 = v8;
    v9 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__equal_range_multi<turi::flexible_type>(a2, v6);
    if (v7 == v4)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v12 = v7;
      do
      {
        ++v11;
        v12 = *(unsigned __int8 **)v12;
      }
      while (v12 != v4);
    }
    if (v9 == v10)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = v9;
      do
      {
        ++v13;
        v14 = *(unsigned __int8 **)v14;
      }
      while (v14 != v10);
    }
  }
  while (v11 == v13
       && (std::__is_permutation[abi:ne180100]<std::_ClassicAlgPolicy,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__equal_to &>(v7, v4, v9) & 1) != 0);
  return v5;
}

uint64_t turi::flexible_type_impl::approx_equality_operator::operator()(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  double v13;
  int v14;
  size_t v15;
  size_t v16;
  unsigned int v17;
  double v18;
  double *v19;
  double *v20;
  unint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  double v32;
  uint64_t *v33;
  uint64_t *v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  char v89;
  _QWORD v90[5];
  char *v91;
  uint64_t *v92;

  v4 = *a2;
  v3 = a2[1];
  if (v3 - *a2 != a3[1] - *a3)
    return 0;
  if (v3 == v4)
    return 1;
  v7 = 0;
LABEL_4:
  v8 = *a3 + 16 * v7;
  v9 = (unsigned __int8 *)(v4 + 16 * v7);
  switch(*(_BYTE *)(v8 + 12))
  {
    case 0:
      switch(v9[12])
      {
        case 0u:
          if (*(_QWORD *)v9 != *(_QWORD *)v8)
            return 0;
          goto LABEL_104;
        case 1u:
          v10 = *(double *)v9;
          v11 = *(_QWORD *)v8;
          goto LABEL_73;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(_QWORD *)v8 != (uint64_t)(*(_QWORD *)v9 << 8) >> 8 || *((_DWORD *)v9 + 2))
            return 0;
          goto LABEL_104;
        default:
          goto LABEL_111;
      }
    case 1:
      switch(v9[12])
      {
        case 0u:
          v10 = *(double *)v8;
          v11 = *(_QWORD *)v9;
LABEL_73:
          v76 = (double)v11;
          goto LABEL_74;
        case 1u:
          v10 = *(double *)v9;
          v76 = *(double *)v8;
LABEL_74:
          if (v10 != v76)
            return 0;
          goto LABEL_104;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          v77 = vabdd_f64((double)*((int *)v9 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v9 << 8) >> 8), *(double *)v8);
          goto LABEL_82;
        default:
          goto LABEL_111;
      }
    case 2:
      v12 = v9[12];
      if (v12 == 2)
      {
        v13 = *(double *)v9;
        v14 = *(char *)(*(_QWORD *)v9 + 31);
        v15 = *(unsigned __int8 *)(*(_QWORD *)v9 + 31);
        if (v14 < 0)
          v16 = *(_QWORD *)(*(_QWORD *)&v13 + 16);
        else
          v16 = v15;
        v78 = *(double *)v8;
        if (*(char *)(*(_QWORD *)&v78 + 31) < 0)
          v79 = *(_QWORD *)(*(_QWORD *)&v78 + 16);
        else
          v79 = *(unsigned __int8 *)(*(_QWORD *)&v78 + 31);
        if (v16 == v79)
        {
          v80 = (unsigned __int8 *)(*(_QWORD *)&v13 + 8);
          if ((v15 & 0x80) != 0)
            v80 = *(unsigned __int8 **)v80;
          v81 = (unsigned __int8 *)(*(_QWORD *)&v78 + 8);
          if ((*(_BYTE *)(*(_QWORD *)&v78 + 31) & 0x80) != 0)
            v81 = *(unsigned __int8 **)v81;
          if ((v15 & 0x80) != 0)
          {
            if (!memcmp(v80, v81, v16))
              goto LABEL_104;
          }
          else
          {
            if (!v16)
              goto LABEL_104;
            while (*v80 == *v81)
            {
              ++v80;
              ++v81;
              if (!--v16)
                goto LABEL_104;
            }
          }
        }
        return 0;
      }
      if (v12 <= 9 && v12 != 2)
        return 0;
      goto LABEL_111;
    case 3:
      v17 = v9[12];
      if (v17 == 3)
      {
        v18 = *(double *)v8;
        v19 = *(double **)(*(_QWORD *)v9 + 8);
        v20 = *(double **)(*(_QWORD *)v9 + 16);
        v21 = v20 - v19;
        v23 = *(_QWORD *)&v18 + 8;
        v22 = *(double **)(*(_QWORD *)&v18 + 8);
        if (v21 == (uint64_t)(*(_QWORD *)(v23 + 8) - (_QWORD)v22) >> 3)
        {
          if (v20 == v19)
            goto LABEL_104;
          v24 = v21 <= 1 ? 1 : v20 - v19;
          if (*v19 == *v22)
          {
            v25 = 1;
            do
            {
              v26 = v25;
              if (v24 == v25)
                break;
              v27 = v19[v25];
              v28 = v22[v25++];
            }
            while (v27 == v28);
            if (v26 >= v21)
              goto LABEL_104;
          }
        }
        return 0;
      }
      if (v17 <= 9 && v17 != 3)
        return 0;
      goto LABEL_111;
    case 4:
      v29 = *(_QWORD *)v8 + 8;
      v91 = &v89;
      v92 = (uint64_t *)v29;
      v30 = v9[12];
      if (v30 == 4)
      {
        if ((turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>((uint64_t)&v91, (uint64_t *)(*(_QWORD *)v9 + 8)) & 1) != 0)goto LABEL_104;
      }
      else if (v30 > 9 || v30 == 4)
      {
LABEL_111:
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      }
      return 0;
    case 5:
      v31 = v9[12];
      if (v31 == 5)
      {
        v32 = *(double *)v8;
        v33 = *(uint64_t **)(*(_QWORD *)v9 + 8);
        v34 = *(uint64_t **)(*(_QWORD *)v9 + 16);
        if ((char *)v34 - (char *)v33 == *(_QWORD *)(*(_QWORD *)&v32 + 16) - *(_QWORD *)(*(_QWORD *)&v32 + 8))
        {
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)&v91, v33, v34);
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v90, *(uint64_t **)(*(_QWORD *)&v32 + 8), *(uint64_t **)(*(_QWORD *)&v32 + 16));
          v35 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(&v91, v90);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v90);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&v91);
          if ((v35 & 1) != 0)
            goto LABEL_104;
        }
        return 0;
      }
      if (v31 <= 9 && v31 != 5)
        return 0;
      goto LABEL_111;
    case 6:
      switch(v9[12])
      {
        case 0u:
          if (*(_QWORD *)v9 != (uint64_t)(*(_QWORD *)v8 << 8) >> 8 || *(_DWORD *)(v8 + 8))
            return 0;
          goto LABEL_104;
        case 1u:
          v77 = vabdd_f64(*(double *)v9, (double)*(int *)(v8 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v8 << 8) >> 8));
LABEL_82:
          if (v77 >= 0.0000005)
            return 0;
          goto LABEL_104;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(_QWORD *)v8 ^ *(_QWORD *)v9) & 0xFFFFFFFFFFFFFFLL) != 0 || *((_DWORD *)v9 + 2) != *(_DWORD *)(v8 + 8))
            return 0;
          goto LABEL_104;
        default:
          goto LABEL_111;
      }
    case 7:
      v36 = v9[12];
      if (v36 == 7)
        goto LABEL_104;
      if (v36 <= 9 && v36 != 7)
        return 0;
      goto LABEL_111;
    case 8:
      v37 = v9[12];
      if (v37 == 8)
      {
        if (turi::image_type::operator==(*(_QWORD *)v9 + 8, *(_QWORD *)v8 + 8))
          goto LABEL_104;
        return 0;
      }
      if (v37 <= 9 && v37 != 8)
        return 0;
      goto LABEL_111;
    case 9:
      v38 = v9[12];
      if (v38 == 9)
      {
        v39 = *(double *)v8;
        v40 = *(_QWORD **)v9;
        if (*(_QWORD *)v8 == *(_QWORD *)v9)
          goto LABEL_104;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v40 + 1), *(_QWORD *)&v39 + 8))
          return 0;
        v42 = (char *)v40[3];
        v41 = (char *)v40[4];
        v43 = v41 - v42;
        if (v41 == v42)
          goto LABEL_104;
        if (!v40[1])
          goto LABEL_104;
        v44 = 1;
        do
        {
          v45 = *(_QWORD *)v42;
          v42 += 8;
          v44 *= v45;
        }
        while (v42 != v41);
        if (!v44)
          goto LABEL_104;
        v90[0] = 0;
        std::vector<unsigned long>::vector(&v91, v43 >> 3, v90);
        v46 = (uint64_t *)v91;
        v47 = v92;
        v48 = **(_QWORD **)(*(_QWORD *)&v39 + 8);
        v49 = (char *)v92 - v91;
        v50 = ((char *)v92 - v91) >> 3;
        v51 = v50 - 1;
        if (v50 <= 1)
          v52 = 1;
        else
          v52 = ((char *)v92 - v91) >> 3;
        while (1)
        {
          if (v47 == v46)
          {
            v60 = 0;
            v61 = *(double *)(*(_QWORD *)v40[1] + 8 * v40[9]);
          }
          else
          {
            v53 = 0;
            v54 = (uint64_t *)v40[6];
            v55 = v46;
            v56 = v52;
            do
            {
              v58 = *v55++;
              v57 = v58;
              v59 = *v54++;
              v53 += v59 * v57;
              --v56;
            }
            while (v56);
            v60 = 0;
            v61 = *(double *)(*(_QWORD *)v40[1] + 8 * (v40[9] + v53));
            v62 = *(uint64_t **)(*(_QWORD *)&v39 + 48);
            v63 = v46;
            v64 = v52;
            do
            {
              v66 = *v63++;
              v65 = v66;
              v67 = *v62++;
              v60 += v67 * v65;
              --v64;
            }
            while (v64);
          }
          v68 = *(double *)(v48 + 8 * (*(_QWORD *)(*(_QWORD *)&v39 + 72) + v60));
          if (v61 != v68)
          {
LABEL_68:
            if (v46)
            {
              v92 = v46;
              operator delete(v46);
            }
            if (v61 == v68)
              goto LABEL_104;
            return 0;
          }
          v69 = v50;
          v70 = v50 - 1;
          if (v49 >= 1)
          {
            v71 = v40[3];
            v72 = v46[v51] + 1;
            v46[v51] = v72;
            v73 = (v49 & 0xFFFFFFFFFFFFFFF8) - 16;
            v70 = v50 - 1;
            if (v72 >= *(_QWORD *)(v71 + 8 * v51))
            {
              while (1)
              {
                *(uint64_t *)((char *)v46 + v73 + 8) = 0;
                if (v70 <= 0)
                  break;
                --v70;
                v74 = *(uint64_t *)((char *)v46 + v73) + 1;
                *(uint64_t *)((char *)v46 + v73) = v74;
                v75 = *(_QWORD *)(v71 + v73);
                v73 -= 8;
                if (v74 < v75)
                {
                  v69 = 1;
                  goto LABEL_66;
                }
              }
              v92 = v46;
              operator delete(v46);
LABEL_104:
              ++v7;
              v4 = *a2;
              if (v7 >= (a2[1] - *a2) >> 4)
                return 1;
              goto LABEL_4;
            }
            v69 = 1;
            v70 = v50 - 1;
          }
LABEL_66:
          if (v70 < 0 || !v69)
            goto LABEL_68;
        }
      }
      if (v38 >= 9)
        goto LABEL_111;
      return 0;
    default:
      goto LABEL_111;
  }
}

void sub_217F47F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t turi::flexible_type_impl::city_hash_visitor::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *a2;
  if (a2[1] == *a2)
  {
    v9 = 0x9E20B5CD46D71AB3;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v2 + v4);
      v8 = 5
         * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v6) | ((0x87C37B91114253D5 * v6) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
      v6 = (5
          * (__ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v7) | ((unint64_t)(0x4CF5AD432745937FLL * v7) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v8)+ 944331445) ^ v8;
      ++v5;
      v2 = *a2;
      v4 += 16;
    }
    while (v5 < (a2[1] - *a2) >> 4);
    v9 = 0xC6A4A7935BD1E995 * (v6 ^ 0xC3A5C85C97CB3127);
  }
  return 0xC6A4A7935BD1E995 * (v9 ^ (v9 >> 47));
}

uint64_t turi::flexible_type_impl::city_hash_visitor::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
  {
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v4 |= turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v2);
      v5 |= turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v2);
      v2 += 32;
    }
    while (v2 != v3);
  }
  v6 = 5
     * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v4) | ((0x87C37B91114253D5 * v4) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
  return (5
        * (v6
         + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v5) | ((unint64_t)(0x4CF5AD432745937FLL * v5) >> 33))) ^ 0x73A3916AE45D01E5, 31))+ 944331445) ^ v6;
}

void turi::flexible_type_impl::city_hash128_visitor::operator()(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  if (a1[1] == *a1)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash128_visitor>((uint64_t *)(v2 + v4), &v12);
      v8 = 5
         * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v6) | ((0x87C37B91114253D5 * v6) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
      v9 = 5
         * (v8
          + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v7) | ((unint64_t)(0x4CF5AD432745937FLL * v7) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
      v7 = 5
         * (__ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v13) | ((0x87C37B91114253D5 * v13) >> 31))) ^ v8, 27)+ v9)+ 1390208809;
      v6 = 5 * (v7 + __ROR8__((0xCF853D45B173E5ABLL * v12) ^ v9, 31)) + 944331445;
      ++v5;
      v2 = *a1;
      v4 += 16;
    }
    while (v5 < (a1[1] - *a1) >> 4);
  }
  v10 = 5
      * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v6) | ((0x87C37B91114253D5 * v6) >> 31))) ^ 0x8F84E92C0587B7E3, 27)- 0x32677223917C8168;
  *a2 = v10;
  a2[1] = 5
        * (v10
         + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v7) | ((unint64_t)(0x4CF5AD432745937FLL * v7) >> 33))) ^ 0x8F84E92C0587B7E3, 31))+ 944331445;
}

_QWORD *turi::flexible_type_impl::city_hash128_visitor::operator()@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v10 = 0;
    v8 = 0;
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash128_visitor>(&v14, v3);
      v6 |= v15;
      v5 |= v14;
      result = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash128_visitor>(&v14, v3);
      v8 |= v15;
      v7 |= v14;
      v3 += 32;
    }
    while (v3 != v4);
    v10 = 0xCF853D45B173E5ABLL * v7;
  }
  v11 = 5
      * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v6) | ((0x87C37B91114253D5 * v6) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
  v12 = 5
      * (v11
       + __ROR8__((0x87C37B91114253D5 * ((0x93A2C9BF80000000 * v5) | ((unint64_t)(0x4CF5AD432745937FLL * v5) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
  v13 = 5
      * (v12
       + __ROR8__(v11 ^ (0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v8) | ((0x87C37B91114253D5 * v8) >> 31))), 27))+ 1390208809;
  *a2 = v13;
  a2[1] = 5 * (v13 + __ROR8__(v12 ^ v10, 31)) + 944331445;
  return result;
}

uint64_t turi::flexible_type_fail(uint64_t this)
{
  if ((this & 1) == 0)
    turi::flexible_type_fail(BOOL)::$_0::operator()();
  return this;
}

uint64_t turi::flexible_type::contains_na(turi::flexible_type *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  turi::flexible_type *v6;
  turi::flexible_type *v7;
  turi::flexible_type *v8;
  turi::flexible_type *v9;
  turi::flexible_type *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;

  v1 = 1;
  switch(*((_BYTE *)this + 12))
  {
    case 1:
      return 0;
    case 3:
      v3 = *(_QWORD *)(*(_QWORD *)this + 8);
      v2 = *(_QWORD *)(*(_QWORD *)this + 16);
      if (v3 == v2)
        return 0;
      v4 = v3 + 8;
      do
      {
        v1 = 0;
        v5 = v4 == v2;
        v4 += 8;
      }
      while (!v5);
      return v1;
    case 4:
      v6 = *(turi::flexible_type **)(*(_QWORD *)this + 8);
      v7 = *(turi::flexible_type **)(*(_QWORD *)this + 16);
      if (v6 == v7)
        return 0;
      do
      {
        v1 = turi::flexible_type::contains_na(v6);
        if ((v1 & 1) != 0)
          break;
        v6 = (turi::flexible_type *)((char *)v6 + 16);
      }
      while (v6 != v7);
      return v1;
    case 5:
      v8 = *(turi::flexible_type **)(*(_QWORD *)this + 8);
      v9 = *(turi::flexible_type **)(*(_QWORD *)this + 16);
      if (v8 == v9)
        return 0;
      while ((turi::flexible_type::contains_na(v8) & 1) == 0)
      {
        v10 = (turi::flexible_type *)((char *)v8 + 16);
        if ((turi::flexible_type::contains_na(v10) & 1) != 0)
          break;
        v1 = 0;
        v8 = (turi::flexible_type *)((char *)v10 + 16);
        if (v8 == v9)
          return v1;
      }
      return 1;
    case 7:
      return v1;
    case 9:
      v11 = *(_QWORD *)this;
      v12 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 32) - *(_QWORD *)(*(_QWORD *)this + 24)) >> 3;
      v37 = 0;
      std::vector<unsigned long>::vector(&v38, v12, &v37);
      v13 = v38;
      v14 = v39;
      v15 = (char *)v39 - (char *)v38;
      v16 = v39 - v38;
      v17 = v16 - 1;
      if (v16 <= 1)
        v18 = 1;
      else
        v18 = v39 - v38;
      break;
    default:
      return 0;
  }
  while (1)
  {
    if (v14 != v13)
    {
      v19 = 0;
      v20 = *(uint64_t **)(v11 + 48);
      v21 = v13;
      v22 = v18;
      do
      {
        v24 = *v21++;
        v23 = v24;
        v25 = *v20++;
        v19 += v25 * v23;
        --v22;
      }
      while (v22);
    }
    v1 = 0;
    v26 = v16;
    v27 = v16 - 1;
    if (v15 < 1)
      goto LABEL_27;
    v28 = *(_QWORD *)(v11 + 24);
    v29 = v13[v17] + 1;
    v13[v17] = v29;
    if (v29 >= *(_QWORD *)(v28 + 8 * v17))
      break;
    v26 = 1;
    v27 = v16 - 1;
LABEL_27:
    if ((v27 & 0x8000000000000000) != 0)
      goto LABEL_34;
LABEL_28:
    if (!v26)
      goto LABEL_34;
  }
  v30 = v28 - 16;
  v31 = v16;
  v32 = (unint64_t *)((char *)v13 + (v15 & 0xFFFFFFFFFFFFFFF8) - 16);
  do
  {
    v33 = v31 - 1;
    v32[1] = 0;
    if ((uint64_t)(v31 - 1) <= 0)
    {
      v1 = 0;
      goto LABEL_37;
    }
    v34 = *v32 + 1;
    *v32-- = v34;
    v35 = *(_QWORD *)(v30 + 8 * v31--);
  }
  while (v34 >= v35);
  v26 = 1;
  if (((v33 - 1) & 0x8000000000000000) == 0)
    goto LABEL_28;
LABEL_34:
  if (v13)
  {
LABEL_37:
    v39 = v13;
    operator delete(v13);
  }
  return v1;
}

_WORD *boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(_WORD *result, unsigned int a2)
{
  if (a2 <= 0x577 || a2 >> 4 >= 0x271)
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>::on_error();
  *result = a2;
  return result;
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>::on_error()
{
  std::logic_error v0;

  boost::gregorian::bad_year::bad_year(&v0);
  boost::throw_exception<boost::gregorian::bad_year>(&v0);
}

void sub_217F48808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::gregorian::bad_year>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91B658;
  v4 = &unk_24D91B680;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F488A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D91B6A0;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91B5B8;
  *(_QWORD *)(a1 + 16) = &unk_24D91B5F0;
  *(_QWORD *)(a1 + 56) = &unk_24D91B628;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D91B6A0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91B5B8;
  *(_QWORD *)(a1 + 16) = &unk_24D91B5F0;
  *(_QWORD *)(a1 + 56) = &unk_24D91B628;
  return a1;
}

void sub_217F489F8(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F48ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F48B1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(_QWORD *a1)
{
  std::logic_error *v1;

  v1 = (std::logic_error *)(a1 - 2);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(a1 - 16);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::logic_error::~logic_error((std::logic_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::gregorian::bad_year>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::gregorian::bad_year>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::gregorian::bad_year>::~error_info_injector(a1 - 16);
}

void boost::gregorian::bad_year::~bad_year(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x219A19A08);
}

void sub_217F48CF0(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_year::bad_year(std::logic_error *this)
{
  std::string v3;

  std::string::basic_string[abi:ne180100]<0>(&v3, "Year is out of valid range: 1400..9999");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  this->__vftable = (std::logic_error_vtbl *)&unk_24D91B6A0;
  return this;
}

void sub_217F48D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_WORD *boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0xD)
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>::on_error();
  *result = a2;
  return result;
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>::on_error()
{
  std::logic_error v0;

  boost::gregorian::bad_month::bad_month(&v0);
  boost::throw_exception<boost::gregorian::bad_month>(&v0);
}

void sub_217F48DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::gregorian::bad_month>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91B7F8;
  v4 = &unk_24D91B820;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F48E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D91B840;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91B758;
  *(_QWORD *)(a1 + 16) = &unk_24D91B790;
  *(_QWORD *)(a1 + 56) = &unk_24D91B7C8;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D91B840;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91B758;
  *(_QWORD *)(a1 + 16) = &unk_24D91B790;
  *(_QWORD *)(a1 + 56) = &unk_24D91B7C8;
  return a1;
}

void sub_217F48F98(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F49010(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F49070(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_217F49140(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_month::bad_month(std::logic_error *this)
{
  std::string v3;

  std::string::basic_string[abi:ne180100]<0>(&v3, "Month number is out of range 1..12");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  this->__vftable = (std::logic_error_vtbl *)&unk_24D91B840;
  return this;
}

void sub_217F491C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_WORD *boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0x20)
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>::on_error();
  *result = a2;
  return result;
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>::on_error()
{
  std::logic_error v0;

  boost::gregorian::bad_day_of_month::bad_day_of_month(&v0);
  boost::throw_exception<boost::gregorian::bad_day_of_month>(&v0);
}

void sub_217F49234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::gregorian::bad_day_of_month>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91B998;
  v4 = &unk_24D91B9C0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F492D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D91B9E0;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91B8F8;
  *(_QWORD *)(a1 + 16) = &unk_24D91B930;
  *(_QWORD *)(a1 + 56) = &unk_24D91B968;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D91B9E0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91B8F8;
  *(_QWORD *)(a1 + 16) = &unk_24D91B930;
  *(_QWORD *)(a1 + 56) = &unk_24D91B968;
  return a1;
}

void sub_217F493E8(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F49460(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F494C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_217F49590(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_day_of_month::bad_day_of_month(std::logic_error *this)
{
  std::string v3;

  std::string::basic_string[abi:ne180100]<0>(&v3, "Day of month value is out of range 1..31");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  this->__vftable = (std::logic_error_vtbl *)&unk_24D91B9E0;
  return this;
}

void sub_217F49618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *boost::gregorian::date::date(_DWORD *a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  _DWORD *result;
  unsigned __int16 v8;
  unsigned int v9;
  unint64_t v10;
  std::string v12;
  std::logic_error v13;

  result = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::date(a1, a2, a3, a4);
  if (a3 > 0xBu)
    goto LABEL_14;
  if (((1 << a3) & 0xA50) != 0)
  {
    v8 = 30;
    goto LABEL_4;
  }
  if (a3 == 2)
  {
    v8 = 28;
    if ((a2 & 3) == 0)
    {
      HIDWORD(v10) = -1030792151 * a2;
      LODWORD(v10) = HIDWORD(v10);
      v9 = v10 >> 2;
      LODWORD(v10) = HIDWORD(v10);
      if ((v10 >> 4) < 0xA3D70B || v9 > 0x28F5C28)
        v8 = 29;
      else
        v8 = 28;
    }
  }
  else
  {
LABEL_14:
    v8 = 31;
  }
LABEL_4:
  if (v8 < a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "Day of month is not valid for year");
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)&unk_24D91B9E0;
    boost::throw_exception<boost::gregorian::bad_day_of_month>(&v13);
  }
  return result;
}

void sub_217F49734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::logic_error a16)
{
  std::logic_error::~logic_error(&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::date(_DWORD *result, __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v4;

  v4 = (14 - a3) / 12;
  *result = 365 * (unsigned __int16)(a2 - v4 + 4800)
          + a4
          + ((unsigned __int16)(a2 - v4 + 4800) >> 2)
          - (unsigned __int16)(a2 - v4 + 4800) / 0x64u
          + (unsigned __int16)(a2 - v4 + 4800) / 0x190u
          + ((858993460 * (unint64_t)(153 * (unsigned __int16)(a3 + 12 * v4 - 3) + 2)) >> 32)
          - 32045;
  return result;
}

uint64_t boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000ll,(unsigned short)6,long long>::to_tick_count(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 >= 0)
    v4 = a1;
  else
    v4 = -a1;
  if (a2 >= 0)
    v5 = a2;
  else
    v5 = -a2;
  if (a3 >= 0)
    v6 = a3;
  else
    v6 = -a3;
  if (a4 >= 0)
    v7 = a4;
  else
    v7 = -a4;
  if ((a2 | a1 | a3 | a4) < 0)
    return 1000000 * (-3600 * v4 - 60 * v5 - v6) - v7;
  else
    return a4 + 1000000 * (3600 * a1 + 60 * a2 + a3);
}

uint64_t *boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(uint64_t *result, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;

  *result = 1;
  v3 = *a2;
  if ((v3 + 2) >= 3)
  {
    v4 = *a3;
    if ((unint64_t)(*a3 - 0x7FFFFFFFFFFFFFFELL) >= 3)
    {
      v5 = v4 + 86400000000 * v3;
      goto LABEL_22;
    }
LABEL_6:
    v5 = 0x7FFFFFFFFFFFFFFELL;
    if ((_DWORD)v3 == -2 || v4 == 0x7FFFFFFFFFFFFFFELL)
      goto LABEL_22;
    goto LABEL_10;
  }
  v4 = *a3;
  if ((unint64_t)(*a3 - 0x7FFFFFFFFFFFFFFELL) <= 2)
    goto LABEL_6;
  if ((_DWORD)v3 == -2)
    goto LABEL_13;
LABEL_10:
  if (v4 == 0x8000000000000000)
  {
    if ((_DWORD)v3 == -1)
      goto LABEL_13;
    goto LABEL_15;
  }
  v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (!(_DWORD)v3)
    {
LABEL_13:
      v5 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_22;
    }
LABEL_15:
    v5 = v4;
    goto LABEL_22;
  }
  v7 = v4 + v3;
  if (!(_DWORD)v3)
    v7 = 0x8000000000000000;
  if ((_DWORD)v3 != -1)
    v5 = v7;
LABEL_22:
  *result = v5;
  return result;
}

unint64_t boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) >= 3)
  {
    if ((unint64_t)(v3 - 0x7FFFFFFFFFFFFFFELL) >= 3)
      return v3 + v2;
    result = 0x7FFFFFFFFFFFFFFELL;
    if (v3 == 0x7FFFFFFFFFFFFFFELL)
      return result;
  }
  else
  {
    result = 0x7FFFFFFFFFFFFFFELL;
    if (v2 == 0x7FFFFFFFFFFFFFFELL || v3 == 0x7FFFFFFFFFFFFFFELL)
      return result;
  }
  if (v2 == 0x8000000000000000)
  {
    v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    if (v3 != v6)
      return v2;
    return result;
  }
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = 0x8000000000000000;
    goto LABEL_15;
  }
  v7 = v3 + v2;
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
    v7 = *a2;
  if (v3 == 0x8000000000000000)
    return 0x8000000000000000;
  else
    return v7;
}

void boost::posix_time::to_iso_string_type<char>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  int64_t v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = a1;
  v3 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v17);
  boost::date_time::date_formatter<boost::gregorian::date,boost::date_time::iso_format<char>,char>::date_to_string(v3, &v15);
  v4 = v17;
  v5 = 0x7FFFFFFFFFFFFFFELL;
  if (v17 == 0x8000000000000000)
    v5 = 0x8000000000000000;
  if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    v4 = v5;
  if ((unint64_t)(v17 - 0x7FFFFFFFFFFFFFFELL) > 2)
    v4 = v17 % 86400000000;
  if ((unint64_t)(v4 - 0x7FFFFFFFFFFFFFFELL) >= 3)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v15, 84, (uint64_t)&v14);
    v6 = v17;
    v7 = 0x7FFFFFFFFFFFFFFELL;
    if (v17 == 0x8000000000000000)
      v7 = 0x8000000000000000;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
      v6 = v7;
    if ((unint64_t)(v17 - 0x7FFFFFFFFFFFFFFELL) > 2)
      v6 = v17 % 86400000000;
    v11 = v6;
    boost::posix_time::to_iso_string_type<char>(&v11);
    if ((v13 & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v9 = v13;
    else
      v9 = (std::string::size_type)__p[1];
    v10 = std::string::append(&v14, (const std::string::value_type *)v8, v9);
    *a2 = *v10;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((char)v13 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16) < 0)
      operator delete((void *)v15);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v15;
    a2->__r_.__value_.__r.__words[2] = v16;
  }
}

void sub_217F49B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v22 - 25) < 0)
    operator delete(*(void **)(v22 - 48));
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

uint64_t boost::posix_time::to_iso_string_type<char>(int64_t *a1)
{
  int64_t v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  int64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  v2 = *a1;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    v14 = 0;
    if (boost::date_time::int_adapter<long long>::compare(a1, &v14) == -1)
    {
      LOBYTE(v14) = 45;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v14, 1);
    }
    *(_QWORD *)((char *)&v11[3] + *(_QWORD *)(v11[0] - 24)) = 2;
    LOBYTE(v14) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v14);
    std::ostream::operator<<();
    *(_QWORD *)((char *)&v11[3] + *(_QWORD *)(v11[0] - 24)) = 2;
    LOBYTE(v14) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v14);
    std::ostream::operator<<();
    *(_QWORD *)((char *)&v11[3] + *(_QWORD *)(v11[0] - 24)) = 2;
    LOBYTE(v14) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v14);
    std::ostream::operator<<();
    if (*a1 % 1000000)
    {
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
      *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 24) = 6;
      LOBYTE(v14) = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, (char *)&v14);
      std::ostream::operator<<();
    }
  }
  else
  {
    v3 = "not-a-date-time";
    v4 = 15;
    v5 = "+infinity";
    v6 = 9;
    if (v2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = "";
      v6 = 0;
    }
    if (v2 != 0x7FFFFFFFFFFFFFFELL)
    {
      v3 = v5;
      v4 = v6;
    }
    if (v2 == 0x8000000000000000)
      v7 = "-infinity";
    else
      v7 = v3;
    if (v2 == 0x8000000000000000)
      v8 = 9;
    else
      v8 = v4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v7, v8);
  }
  std::stringbuf::str();
  v11[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v13);
}

void sub_217F49F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *boost::date_time::date_formatter<boost::gregorian::date,boost::date_time::iso_format<char>,char>::date_to_string@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;
  unint64_t v4;
  int v5;

  v5 = a1;
  switch(a1)
  {
    case 0:
      v2 = "-infinity";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    case -1:
      v2 = "+infinity";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    case -2:
      v2 = "not-a-date-time";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  v4 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year_month_day(&v5);
  return (_QWORD *)boost::date_time::ymd_formatter<boost::date_time::year_month_day_base<boost::gregorian::greg_year,boost::gregorian::greg_month,boost::gregorian::greg_day>,boost::date_time::iso_format<char>,char>::ymd_to_string(v4 & 0xFFFFFFFFFFFFLL);
}

unint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year_month_day(_DWORD *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;

  v1 = *a1 + 32044;
  v2 = ((4 * v1) | 3u) / 0x23AB1;
  v3 = v1 - ((146097 * v2) >> 2);
  v4 = ((4 * v3) | 3) / 0x5B5;
  v5 = v3 - ((1461 * v4) >> 2);
  v6 = 5 * v5 + 2;
  v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  v13 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v13, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  v12 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v12, v13);
  v11 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v11, (unsigned __int16)v8);
  v10 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v10, (unsigned __int16)v7);
  return v12 | ((unint64_t)v11 << 16) | ((unint64_t)v10 << 32);
}

uint64_t boost::date_time::ymd_formatter<boost::date_time::year_month_day_base<boost::gregorian::greg_year,boost::gregorian::greg_month,boost::gregorian::greg_day>,boost::date_time::iso_format<char>,char>::ymd_to_string(uint64_t a1)
{
  uint64_t v1;
  const std::locale *v2;
  std::locale *v3;
  std::locale *v4;
  std::ios_base *v5;
  std::locale *rdbuf;
  std::locale *v7;
  uint64_t v8;
  const std::locale::facet *v9;
  char v10;
  std::locale __loc;
  std::locale v13;
  std::locale v14;
  uint64_t v15[11];
  char v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  std::locale v20;
  std::locale v21;

  v18 = a1;
  v19 = WORD2(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v1 = *(_QWORD *)(v15[0] - 24);
  v2 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + v1));
  std::ios_base::imbue((std::ios_base *)((char *)v15 + v1), v2);
  std::locale::~locale(&v21);
  v3 = *(std::locale **)((char *)&v15[5] + v1);
  if (v3)
  {
    (*((void (**)(std::locale *, const std::locale *))v3->__locale_ + 2))(v3, v2);
    v4 = v3 + 1;
    std::locale::locale(&v20, v4);
    std::locale::operator=(v4, v2);
    std::locale::~locale(&v20);
  }
  std::locale::~locale(&v14);
  std::ostream::operator<<();
  v5 = (std::ios_base *)((char *)v15 + *(_QWORD *)(v15[0] - 24));
  MEMORY[0x219A19828](&__loc);
  std::ios_base::getloc(v5);
  std::ios_base::imbue(v5, &__loc);
  std::locale::~locale(&v21);
  rdbuf = (std::locale *)v5->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
    v7 = rdbuf + 1;
    std::locale::locale(&v20, v7);
    std::locale::operator=(v7, &__loc);
    std::locale::~locale(&v20);
  }
  std::locale::~locale(&v13);
  std::locale::~locale(&__loc);
  boost::date_time::month_formatter<boost::gregorian::greg_month,boost::date_time::iso_format<char>,char>::format_month((uint64_t)&v18 + 2, v15);
  v8 = v15[0];
  *(uint64_t *)((char *)&v15[3] + *(_QWORD *)(v15[0] - 24)) = 2;
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v8 - 24)));
  v9 = std::locale::use_facet(&v21, MEMORY[0x24BEDB350]);
  v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 48);
  std::locale::~locale(&v21);
  LOBYTE(v20.__locale_) = v10;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, (char *)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v15[0] = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v17);
}

void sub_217F4A3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, std::locale a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  std::locale::~locale(&a10);
  std::ostringstream::~ostringstream((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t *boost::date_time::month_formatter<boost::gregorian::greg_month,boost::date_time::iso_format<char>,char>::format_month(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const std::locale::facet *v4;
  char v5;
  char v7;
  _BYTE v8[16];
  std::locale v9;

  boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::basic_ios_fill_saver((uint64_t)v8, (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v3 = *a2;
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = 2;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(v3 - 24)));
  v4 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 48);
  std::locale::~locale(&v9);
  v7 = v5;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(a2, &v7);
  std::ostream::operator<<();
  boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::restore((uint64_t)v8);
  return a2;
}

void sub_217F4A4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::restore((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_217F4A56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::basic_ios_fill_saver(uint64_t a1, std::ios_base *this)
{
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v5;
  std::locale v7;

  *(_QWORD *)a1 = this;
  fmtflags = this[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(this);
    v5 = std::locale::use_facet(&v7, MEMORY[0x24BEDB350]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v7);
    this[1].__fmtflags_ = fmtflags;
  }
  *(_BYTE *)(a1 + 8) = fmtflags;
  return a1;
}

void sub_217F4A604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::restore(uint64_t a1)
{
  const std::ios_base *v1;
  std::ios_base::fmtflags v2;
  const std::locale::facet *v3;
  std::ios_base::fmtflags v4;
  std::locale v5;

  v1 = *(const std::ios_base **)a1;
  v2 = *(char *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)a1 + 144) == -1)
  {
    std::ios_base::getloc(*(const std::ios_base **)a1);
    v3 = std::locale::use_facet(&v5, MEMORY[0x24BEDB350]);
    v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32);
    std::locale::~locale(&v5);
    v1[1].__fmtflags_ = v4;
  }
  v1[1].__fmtflags_ = v2;
}

void sub_217F4A694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;

  v1 = *a1;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    v5 = (int)v1 / 500654080 + 32044;
    v6 = ((4 * v5) | 3u) / 0x23AB1;
    v7 = v5 - ((146097 * v6) >> 2);
    v8 = ((4 * v7) | 3) / 0x5B5;
    v9 = v7 - ((1461 * v8) >> 2);
    v10 = 5 * v9 + 2;
    v11 = v9 - (153 * (v10 / 0x99) + 2) / 5 + 1;
    v12 = v10 / 0x99 + 65524 * (v10 / 0x5FA) + 3;
    LOWORD(v14) = 1400;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v14, (unsigned __int16)(v8 + 100 * v6 - 4800 + v10 / 0x5FA));
    v19 = 1400;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v19, (unsigned __int16)v14);
    v18 = 1;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v18, (unsigned __int16)v12);
    v17 = 1;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v17, (unsigned __int16)v11);
    v14 = v19 | (v18 << 16);
    v15 = v17;
    boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::date(&v16, &v14);
  }
  else
  {
    if (v1 == 0x7FFFFFFFFFFFFFFFLL)
      v2 = 2;
    else
      v2 = 5;
    if (v1 == 0x7FFFFFFFFFFFFFFELL)
      v3 = 0;
    else
      v3 = v2;
    if (v1 == 0x8000000000000000)
      v4 = 1;
    else
      v4 = v3;
    boost::gregorian::date::date((int *)&v16, v4);
  }
  return v16;
}

int *boost::gregorian::date::date(int *a1, int a2)
{
  int v3;
  int v5;
  int v6;

  v3 = 0;
  switch(a2)
  {
    case 1:
      break;
    case 2:
      v3 = -1;
      break;
    case 3:
      *a1 = 1;
      boost::gregorian::date::date(&v6, 0x578u, 1u, 1u);
      v3 = v6;
      break;
    case 4:
      *a1 = -3;
      boost::gregorian::date::date(&v5, 0x270Fu, 0xCu, 0x1Fu);
      v3 = v5;
      break;
    default:
      v3 = -2;
      break;
  }
  *a1 = v3;
  return a1;
}

_DWORD *boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::date(_DWORD *result, _WORD *a2)
{
  int v2;
  int v3;

  v2 = (unsigned __int16)a2[1];
  v3 = (14 - v2) / 12;
  *result = (unsigned __int16)a2[2]
          + 365 * (unsigned __int16)(*a2 - v3 + 4800)
          + ((unsigned __int16)(*a2 - v3 + 4800) >> 2)
          - (unsigned __int16)(*a2 - v3 + 4800) / 0x64u
          + (unsigned __int16)(*a2 - v3 + 4800) / 0x190u
          - 32045
          + ((858993460 * (unint64_t)(153 * (unsigned __int16)(v2 + 12 * v3 - 3) + 2)) >> 32);
  return result;
}

uint64_t boost::date_time::int_adapter<long long>::compare(int64_t *a1, int64_t *a2)
{
  int64_t v2;
  int64_t v3;
  uint64_t result;
  BOOL v5;

  v2 = *a1;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) >= 3)
  {
    v3 = *a2;
    if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFELL) >= 3)
      goto LABEL_16;
  }
  else
  {
    v3 = *a2;
    if (v2 == 0x7FFFFFFFFFFFFFFELL)
    {
      if (v3 == 0x7FFFFFFFFFFFFFFELL)
        return 0;
      return 2;
    }
  }
  if (v3 == 0x7FFFFFFFFFFFFFFELL)
    return 2;
  if (v2 == 0x8000000000000000)
  {
    v5 = v3 == 0x8000000000000000;
    v3 = 0x8000000000000000;
    if (!v5)
      return 0xFFFFFFFFLL;
    return v2 > v3;
  }
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = 0x7FFFFFFFFFFFFFFFLL;
    if (v2 != 0x7FFFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    return v2 > v3;
  }
  result = 1;
  if (v2 != 0x7FFFFFFFFFFFFFFFLL && v3 != 0x8000000000000000)
  {
LABEL_16:
    if (v2 < v3)
      return 0xFFFFFFFFLL;
    return v2 > v3;
  }
  return result;
}

void turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(turi::flexible_type_impl *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char v48;
  uint64_t v49;

  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_37;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_37;
    case 2:
      v3 = *(_QWORD *)a1;
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
      }
      else
      {
        v4 = *(_OWORD *)(v3 + 8);
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
      }
      return;
    case 3:
      v5 = *(_QWORD *)a1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"[", 1);
      if (*(_QWORD *)(v5 + 16) != *(_QWORD *)(v5 + 8))
      {
        v6 = 0;
        do
        {
          std::ostream::operator<<();
          ++v6;
          v7 = *(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8);
          if (v6 < v7 >> 3)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)" ", 1);
            v7 = *(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8);
          }
        }
        while (v6 < v7 >> 3);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"]", 1);
      std::stringbuf::str();
      goto LABEL_82;
    case 4:
      v8 = *(_QWORD *)a1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"[", 1);
      v9 = *(_QWORD *)(v8 + 8);
      if (*(_QWORD *)(v8 + 16) != v9)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if (*(_BYTE *)(v9 + v10 + 12) == 2)
          {
            v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\"", 1);
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, *(_QWORD *)(v8 + 8) + v10);
            if ((v43 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = __p;
            if ((v43 & 0x80u) == 0)
              v14 = v43;
            else
              v14 = v42;
            v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"", 1);
          }
          else
          {
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v9 + v10);
            if ((v43 & 0x80u) == 0)
              v16 = &__p;
            else
              v16 = __p;
            if ((v43 & 0x80u) == 0)
              v17 = v43;
            else
              v17 = v42;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)v16, v17);
          }
          if ((char)v43 < 0)
            operator delete(__p);
          ++v11;
          v9 = *(_QWORD *)(v8 + 8);
          v18 = *(_QWORD *)(v8 + 16) - v9;
          if (v11 < v18 >> 4)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)",", 1);
            v9 = *(_QWORD *)(v8 + 8);
            v18 = *(_QWORD *)(v8 + 16) - v9;
          }
          v10 += 16;
        }
        while (v11 < v18 >> 4);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"]", 1);
      std::stringbuf::str();
      goto LABEL_82;
    case 5:
      v21 = *(_QWORD *)a1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"{", 1);
      v22 = *(_QWORD *)(v21 + 8);
      v23 = *(_QWORD *)(v21 + 16);
      if (v23 != v22)
      {
        v24 = (v23 - v22) >> 5;
        v25 = v22 + 16;
        v26 = 1;
        do
        {
          if (*(_BYTE *)(v25 - 4) == 2)
          {
            v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\"", 1);
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v25 - 16);
            if ((v43 & 0x80u) == 0)
              v28 = &__p;
            else
              v28 = __p;
            if ((v43 & 0x80u) == 0)
              v29 = v43;
            else
              v29 = v42;
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\"", 1);
          }
          else
          {
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v25 - 16);
            if ((v43 & 0x80u) == 0)
              v31 = &__p;
            else
              v31 = __p;
            if ((v43 & 0x80u) == 0)
              v32 = v43;
            else
              v32 = v42;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)v31, v32);
          }
          if ((char)v43 < 0)
            operator delete(__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)":", 1);
          if (*(_BYTE *)(v25 + 12) == 2)
          {
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\"", 1);
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v25);
            if ((v43 & 0x80u) == 0)
              v34 = &__p;
            else
              v34 = __p;
            if ((v43 & 0x80u) == 0)
              v35 = v43;
            else
              v35 = v42;
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\"", 1);
          }
          else
          {
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v25);
            if ((v43 & 0x80u) == 0)
              v37 = &__p;
            else
              v37 = __p;
            if ((v43 & 0x80u) == 0)
              v38 = v43;
            else
              v38 = v42;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)v37, v38);
          }
          if ((char)v43 < 0)
            operator delete(__p);
          if (v26 < v24)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)", ", 2);
          ++v26;
          v39 = v25 + 16;
          v25 += 32;
        }
        while (v39 != v23);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"}", 1);
      std::stringbuf::str();
      goto LABEL_82;
    case 6:
      turi::flexible_type_impl::date_time_to_string(a1, a2);
      return;
    case 7:
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      return;
    case 8:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Height: ", 8);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)" Width: ", 8);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_82:
      v44[0] = *MEMORY[0x24BEDB7F0];
      v40 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v45 = v40;
      v46 = MEMORY[0x24BEDB848] + 16;
      if (v48 < 0)
        operator delete(v47);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      break;
    case 9:
      v19 = (_QWORD *)(*(_QWORD *)a1 + 8);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
      turi::flexible_type_impl::ndarray<double>::print(v19, &v45);
      std::stringbuf::str();
LABEL_37:
      v44[0] = *MEMORY[0x24BEDB7F0];
      v20 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v45 = v20;
      v46 = MEMORY[0x24BEDB848] + 16;
      if (v48 < 0)
        operator delete(v47);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      break;
    default:
      turi::flexible_type_fail(BOOL)::$_0::operator()();
  }
  MEMORY[0x219A198F4](&v49);
}

void sub_217F4B11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

char *std::vector<double>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_217F4B3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_217F4B5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::soft_assignment_visitor,std::vector<turi::flexible_type>>::operator()<std::vector<double>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  char ***v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  char **v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  std::string *v46;
  __int128 v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  _QWORD *v59;
  double *v60;
  unint64_t v61;
  double v62;
  std::string::size_type v63;
  double *v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  char *v68;
  double *v69;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  std::string *v86;
  __int128 v87;
  unint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  __int128 v116;
  __int128 v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t *v137;
  _QWORD *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  void *v142;
  unint64_t *v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  void *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  _QWORD *v152;
  unint64_t *v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  _QWORD *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t *v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t *v180;
  int v181;
  unint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  std::string *v185;
  __int128 v186;
  unint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  std::string *v190;
  __int128 v191;
  double v192;
  int v193;
  unint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  std::string *v197;
  __int128 v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  __int128 v202;
  uint64_t v203;
  std::string::size_type v204;
  uint64_t v205;
  unsigned int *v206;
  unsigned int v207;
  __int128 v208;
  __int128 v209;
  unint64_t v210;
  unint64_t v211;
  double *v212;
  double v213;
  std::string::size_type v214;
  double *v215;
  uint64_t v216;
  unint64_t v217;
  int64_t v218;
  unint64_t v219;
  char *v220;
  double *v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *p_shared_owners;
  unint64_t v228;
  void *v229;
  void *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _BYTE *v236;
  unint64_t v237;
  turi::flexible_type_impl *v238;
  unint64_t v239;
  _QWORD *v240;
  std::string *v241;
  std::string::size_type v242;
  _QWORD *v243;
  std::string *v244;
  std::string::size_type v245;
  _QWORD *v246;
  std::string *v247;
  std::string::size_type v248;
  _QWORD *v249;
  std::string *v250;
  std::string::size_type v251;
  _BYTE *v252;
  unint64_t v253;
  _BOOL8 v255;
  size_t v256;
  unint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t v293;
  int64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t **v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  _QWORD *v305;
  std::string *v306;
  std::string::size_type size;
  _QWORD *v308;
  std::string *v309;
  std::string::size_type v310;
  uint64_t v311;
  void **v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  _QWORD *v326;
  unint64_t v327;
  uint64_t v328;
  std::string::size_type v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  __int128 v385;
  std::string::size_type v386;
  unint64_t v387;
  unint64_t v388;
  int v389;
  _QWORD *v390;
  uint64_t v391;
  unint64_t v392;
  int64_t v393;
  unint64_t v394;
  char *v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t *v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  char *v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  void *v406;
  void *v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t *v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  void *v425;
  void *v426;
  unsigned int v427;
  unint64_t *v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  void *v432;
  unint64_t *v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t *v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t *v440;
  _QWORD *v441;
  unint64_t v442;
  BOOL v443;
  unint64_t *v444;
  _QWORD *v445;
  unint64_t v446;
  BOOL v447;
  _QWORD *v448;
  unint64_t v449;
  BOOL v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unsigned int *v455;
  unsigned int v456;
  __int128 v457;
  __int128 v458;
  unint64_t v459;
  BOOL v460;
  unint64_t *v461;
  _QWORD *v462;
  uint64_t v463;
  unint64_t v464;
  BOOL v465;
  _QWORD *v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unsigned int *v472;
  unsigned int v473;
  __int128 v474;
  __int128 v475;
  unint64_t v476;
  _QWORD *v477;
  unint64_t v478;
  _QWORD *v479;
  unint64_t v480;
  _QWORD *v481;
  unint64_t v482;
  _QWORD *v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unsigned int *v489;
  unsigned int v490;
  __int128 v491;
  __int128 v492;
  unint64_t v493;
  _QWORD *v494;
  unint64_t v495;
  _QWORD *v496;
  unint64_t v497;
  _QWORD *v498;
  unint64_t v499;
  _QWORD *v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  unsigned int *v505;
  unsigned int v506;
  __int128 v507;
  __int128 v508;
  unint64_t v509;
  _QWORD *v510;
  unint64_t v511;
  _QWORD *v512;
  uint64_t v513;
  unint64_t v514;
  _QWORD *v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unsigned int *v520;
  unsigned int v521;
  __int128 v522;
  __int128 v523;
  unint64_t v524;
  _QWORD *v525;
  uint64_t v526;
  unint64_t v527;
  _QWORD *v528;
  unint64_t v529;
  _QWORD *v530;
  unint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  unint64_t v534;
  _QWORD *v535;
  unsigned int v536;
  _QWORD *v537;
  unint64_t v538;
  _QWORD *v539;
  unint64_t v540;
  _QWORD *v541;
  unint64_t v542;
  _QWORD *v543;
  unint64_t v544;
  _QWORD *v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  unsigned int *v550;
  unsigned int v551;
  __int128 v552;
  __int128 v553;
  unint64_t v554;
  _QWORD *v555;
  unint64_t v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  unsigned int *v560;
  unsigned int v561;
  __int128 v562;
  __int128 v563;
  unint64_t v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  unsigned int *v568;
  unsigned int v569;
  __int128 v570;
  __int128 v571;
  unint64_t v572;
  _QWORD *v573;
  unint64_t v574;
  void *v575;
  uint64_t v576;
  _QWORD *v577;
  unint64_t v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  unsigned int *v582;
  unsigned int v583;
  __int128 v584;
  __int128 v585;
  unint64_t v586;
  _QWORD *v587;
  unint64_t v588;
  uint64_t v589;
  _QWORD *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t *v594;
  char v595;
  char *v596;
  uint64_t **v597;
  uint64_t v598[3];
  void *v599;
  std::__shared_weak_count *v600;
  uint64_t v601;
  _BYTE v602[32];
  _BYTE v603[32];
  uint64_t v604;
  void *v605;
  char v606;
  _BYTE v607[160];
  double **v608;
  double **v609;
  uint64_t v610;
  uint64_t *v611;
  uint64_t *v612;
  _QWORD *v613;
  std::string v614;
  unint64_t v615;
  int v616;
  char v617;
  uint64_t v618;

  v2 = (_QWORD *)a2;
  v618 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 8);
  std::vector<double>::resize(a2, (v3[1] - *v3) >> 4);
  v616 = 0;
  v617 = 1;
  v615 = 0;
  v6 = *v3;
  v594 = v3;
  if (v3[1] == *v3)
    return;
  v7 = 0;
  v593 = *MEMORY[0x24BEDB7F0];
  v591 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v592 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v589 = MEMORY[0x24BEDB848] + 16;
  v590 = v2;
  do
  {
    v8 = v6 + 16 * v7;
    if ((unint64_t *)v8 == &v615)
      goto LABEL_564;
    switch(*(_BYTE *)(v8 + 12))
    {
      case 0:
        switch(v617)
        {
          case 0:
            v9 = *(_QWORD *)v8;
            goto LABEL_33;
          case 1:
            v192 = (double)*(uint64_t *)v8;
            goto LABEL_214;
          case 2:
            v182 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v183 = (_QWORD *)operator new();
              v184 = v615;
              *v183 = *(_QWORD *)v615;
              v185 = (std::string *)(v183 + 1);
              if (*(char *)(v184 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v185, *(const std::string::value_type **)(v184 + 8), *(_QWORD *)(v184 + 16));
              }
              else
              {
                v186 = *(_OWORD *)(v184 + 8);
                v183[3] = *(_QWORD *)(v184 + 24);
                *(_OWORD *)&v185->__r_.__value_.__l.__data_ = v186;
              }
              v615 = (unint64_t)v183;
              *v183 = 1;
              do
              {
                v379 = __ldaxr((unint64_t *)v182);
                v380 = v379 - 1;
              }
              while (__stlxr(v380, (unint64_t *)v182));
              if (!v380)
              {
                if (*(char *)(v182 + 31) < 0)
                  operator delete(*(void **)(v182 + 8));
                MEMORY[0x219A19A08](v182, 0x1012C404EF22A49);
              }
            }
            v283 = v615;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v602);
            std::ostream::operator<<();
            std::stringbuf::str();
            *(_QWORD *)v602 = v593;
            *(_QWORD *)&v602[*(_QWORD *)(v593 - 24)] = v592;
            *(_QWORD *)&v602[16] = v591;
            v381 = v589;
            goto LABEL_547;
          case 3:
            v440 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v573 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v573, v615);
            v615 = (unint64_t)v573;
            *v573 = 1;
            do
            {
              v574 = __ldaxr(v440);
              v443 = --v574 == 0;
            }
            while (__stlxr(v574, v440));
            goto LABEL_836;
          case 4:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v537 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v537, v615);
            v615 = (unint64_t)v537;
            *v537 = 1;
            do
            {
              v538 = __ldaxr(v444);
              v447 = --v538 == 0;
            }
            while (__stlxr(v538, v444));
            goto LABEL_801;
          case 5:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v510 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v510, v615);
            v615 = (unint64_t)v510;
            *v510 = 1;
            do
            {
              v511 = __ldaxr(v444);
              v450 = --v511 == 0;
            }
            while (__stlxr(v511, v444));
            goto LABEL_859;
          case 6:
            v615 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            v616 = 0;
            goto LABEL_564;
          case 8:
            v451 = v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v557 = operator new();
            v558 = v615;
            *(_QWORD *)v557 = *(_QWORD *)v615;
            *(_QWORD *)(v557 + 8) = *(_QWORD *)(v558 + 8);
            v559 = *(_QWORD *)(v558 + 16);
            *(_QWORD *)(v557 + 16) = v559;
            if (v559)
            {
              v560 = (unsigned int *)(v559 + 8);
              do
                v561 = __ldxr(v560);
              while (__stxr(v561 + 1, v560));
            }
            v562 = *(_OWORD *)(v558 + 24);
            v563 = *(_OWORD *)(v558 + 40);
            *(_OWORD *)(v557 + 56) = *(_OWORD *)(v558 + 56);
            *(_OWORD *)(v557 + 40) = v563;
            *(_OWORD *)(v557 + 24) = v562;
            v615 = v557;
            *(_QWORD *)v557 = 1;
            do
            {
              v564 = __ldaxr((unint64_t *)v451);
              v460 = --v564 == 0;
            }
            while (__stlxr(v564, (unint64_t *)v451));
            goto LABEL_851;
          case 9:
            v461 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v512 = (_QWORD *)operator new();
            v513 = v615 + 8;
            *v512 = *(_QWORD *)v615;
            turi::flexible_type_impl::ndarray<double>::ndarray(v512 + 1, v513);
            v615 = (unint64_t)v512;
            *v512 = 1;
            do
            {
              v514 = __ldaxr(v461);
              v465 = --v514 == 0;
            }
            while (__stlxr(v514, v461));
            goto LABEL_783;
          default:
            goto LABEL_864;
        }
      case 1:
        switch(v617)
        {
          case 0:
            v9 = (uint64_t)*(double *)v8;
            goto LABEL_33;
          case 1:
            v192 = *(double *)v8;
            goto LABEL_214;
          case 2:
            v187 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v188 = (_QWORD *)operator new();
              v189 = v615;
              *v188 = *(_QWORD *)v615;
              v190 = (std::string *)(v188 + 1);
              if (*(char *)(v189 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v190, *(const std::string::value_type **)(v189 + 8), *(_QWORD *)(v189 + 16));
              }
              else
              {
                v191 = *(_OWORD *)(v189 + 8);
                v188[3] = *(_QWORD *)(v189 + 24);
                *(_OWORD *)&v190->__r_.__value_.__l.__data_ = v191;
              }
              v615 = (unint64_t)v188;
              *v188 = 1;
              do
              {
                v382 = __ldaxr((unint64_t *)v187);
                v383 = v382 - 1;
              }
              while (__stlxr(v383, (unint64_t *)v187));
              if (!v383)
              {
                if (*(char *)(v187 + 31) < 0)
                  operator delete(*(void **)(v187 + 8));
                MEMORY[0x219A19A08](v187, 0x1012C404EF22A49);
              }
            }
            v283 = v615;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v602);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_546;
          case 3:
            v440 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v515 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v515, v615);
            v615 = (unint64_t)v515;
            *v515 = 1;
            do
            {
              v516 = __ldaxr(v440);
              v443 = --v516 == 0;
            }
            while (__stlxr(v516, v440));
            goto LABEL_836;
          case 4:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v543 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v543, v615);
            v615 = (unint64_t)v543;
            *v543 = 1;
            do
            {
              v544 = __ldaxr(v444);
              v447 = --v544 == 0;
            }
            while (__stlxr(v544, v444));
            goto LABEL_801;
          case 5:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v587 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v587, v615);
            v615 = (unint64_t)v587;
            *v587 = 1;
            do
            {
              v588 = __ldaxr(v444);
              v450 = --v588 == 0;
            }
            while (__stlxr(v588, v444));
            goto LABEL_859;
          case 6:
            v181 = (int)((*(double *)v8 - (double)(uint64_t)floor(*(double *)v8)) * 1000000.0);
            if (v181 >= 999999)
              v181 = 999999;
            if (v181 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            v615 = vcvtmd_s64_f64(*(double *)v8) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            v616 = v181;
            goto LABEL_564;
          case 8:
            v451 = v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v517 = operator new();
            v518 = v615;
            *(_QWORD *)v517 = *(_QWORD *)v615;
            *(_QWORD *)(v517 + 8) = *(_QWORD *)(v518 + 8);
            v519 = *(_QWORD *)(v518 + 16);
            *(_QWORD *)(v517 + 16) = v519;
            if (v519)
            {
              v520 = (unsigned int *)(v519 + 8);
              do
                v521 = __ldxr(v520);
              while (__stxr(v521 + 1, v520));
            }
            v522 = *(_OWORD *)(v518 + 24);
            v523 = *(_OWORD *)(v518 + 40);
            *(_OWORD *)(v517 + 56) = *(_OWORD *)(v518 + 56);
            *(_OWORD *)(v517 + 40) = v523;
            *(_OWORD *)(v517 + 24) = v522;
            v615 = v517;
            *(_QWORD *)v517 = 1;
            do
            {
              v524 = __ldaxr((unint64_t *)v451);
              v460 = --v524 == 0;
            }
            while (__stlxr(v524, (unint64_t *)v451));
            goto LABEL_851;
          case 9:
            v461 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v525 = (_QWORD *)operator new();
            v526 = v615 + 8;
            *v525 = *(_QWORD *)v615;
            turi::flexible_type_impl::ndarray<double>::ndarray(v525 + 1, v526);
            v615 = (unint64_t)v525;
            *v525 = 1;
            do
            {
              v527 = __ldaxr(v461);
              v465 = --v527 == 0;
            }
            while (__stlxr(v527, v461));
            goto LABEL_783;
          default:
            goto LABEL_864;
        }
      case 2:
        if (v617 != 2)
        {
          switch(v617)
          {
            case 3:
              v440 = (unint64_t *)v615;
              if (*(_QWORD *)v615 == 1)
                goto LABEL_864;
              v441 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v441, v615);
              v615 = (unint64_t)v441;
              *v441 = 1;
              do
              {
                v442 = __ldaxr(v440);
                v443 = --v442 == 0;
              }
              while (__stlxr(v442, v440));
              goto LABEL_836;
            case 4:
              v444 = (unint64_t *)v615;
              if (*(_QWORD *)v615 == 1)
                goto LABEL_864;
              v445 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v445, v615);
              v615 = (unint64_t)v445;
              *v445 = 1;
              do
              {
                v446 = __ldaxr(v444);
                v447 = --v446 == 0;
              }
              while (__stlxr(v446, v444));
              goto LABEL_801;
            case 5:
              v444 = (unint64_t *)v615;
              if (*(_QWORD *)v615 == 1)
                goto LABEL_864;
              v448 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v448, v615);
              v615 = (unint64_t)v448;
              *v448 = 1;
              do
              {
                v449 = __ldaxr(v444);
                v450 = --v449 == 0;
              }
              while (__stlxr(v449, v444));
              goto LABEL_859;
            case 8:
              v451 = v615;
              if (*(_QWORD *)v615 == 1)
                goto LABEL_864;
              v452 = operator new();
              v453 = v615;
              *(_QWORD *)v452 = *(_QWORD *)v615;
              *(_QWORD *)(v452 + 8) = *(_QWORD *)(v453 + 8);
              v454 = *(_QWORD *)(v453 + 16);
              *(_QWORD *)(v452 + 16) = v454;
              if (v454)
              {
                v455 = (unsigned int *)(v454 + 8);
                do
                  v456 = __ldxr(v455);
                while (__stxr(v456 + 1, v455));
              }
              v457 = *(_OWORD *)(v453 + 24);
              v458 = *(_OWORD *)(v453 + 40);
              *(_OWORD *)(v452 + 56) = *(_OWORD *)(v453 + 56);
              *(_OWORD *)(v452 + 40) = v458;
              *(_OWORD *)(v452 + 24) = v457;
              v615 = v452;
              *(_QWORD *)v452 = 1;
              do
              {
                v459 = __ldaxr((unint64_t *)v451);
                v460 = --v459 == 0;
              }
              while (__stlxr(v459, (unint64_t *)v451));
              goto LABEL_851;
            case 9:
              v461 = (unint64_t *)v615;
              if (*(_QWORD *)v615 == 1)
                goto LABEL_864;
              v462 = (_QWORD *)operator new();
              v463 = v615 + 8;
              *v462 = *(_QWORD *)v615;
              turi::flexible_type_impl::ndarray<double>::ndarray(v462 + 1, v463);
              v615 = (unint64_t)v462;
              *v462 = 1;
              do
              {
                v464 = __ldaxr(v461);
                v465 = --v464 == 0;
              }
              while (__stlxr(v464, v461));
              goto LABEL_783;
            default:
              goto LABEL_864;
          }
        }
        v23 = *(_QWORD *)v8;
        v24 = v615;
        if (*(_QWORD *)v615 != 1)
        {
          v25 = (_QWORD *)operator new();
          v26 = v615;
          *v25 = *(_QWORD *)v615;
          v27 = (std::string *)(v25 + 1);
          if (*(char *)(v26 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)(v26 + 8), *(_QWORD *)(v26 + 16));
          }
          else
          {
            v28 = *(_OWORD *)(v26 + 8);
            v25[3] = *(_QWORD *)(v26 + 24);
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
          }
          v615 = (unint64_t)v25;
          *v25 = 1;
          do
          {
            v199 = __ldaxr((unint64_t *)v24);
            v200 = v199 - 1;
          }
          while (__stlxr(v200, (unint64_t *)v24));
          if (!v200)
          {
            if (*(char *)(v24 + 31) < 0)
              operator delete(*(void **)(v24 + 8));
            MEMORY[0x219A19A08](v24, 0x1012C404EF22A49);
          }
        }
        v201 = v615;
        if (*(char *)(v23 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v602, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
        }
        else
        {
          v202 = *(_OWORD *)(v23 + 8);
          *(_QWORD *)&v602[16] = *(_QWORD *)(v23 + 24);
          *(_OWORD *)v602 = v202;
        }
LABEL_560:
        v384 = v201 + 8;
        if (*(char *)(v201 + 31) < 0)
          operator delete(*(void **)v384);
        v385 = *(_OWORD *)v602;
        v386 = *(_QWORD *)&v602[16];
LABEL_563:
        *(_QWORD *)(v384 + 16) = v386;
        *(_OWORD *)v384 = v385;
        goto LABEL_564;
      case 3:
        v29 = *(_QWORD *)v8;
        v30 = (char **)(v29 + 8);
        switch(v617)
        {
          case 2:
            v31 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v32 = (_QWORD *)operator new();
              v33 = v615;
              *v32 = *(_QWORD *)v615;
              v34 = (std::string *)(v32 + 1);
              if (*(char *)(v33 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)(v33 + 8), *(_QWORD *)(v33 + 16));
              }
              else
              {
                v35 = *(_OWORD *)(v33 + 8);
                v32[3] = *(_QWORD *)(v33 + 24);
                *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
              }
              v615 = (unint64_t)v32;
              *v32 = 1;
              do
              {
                v375 = __ldaxr((unint64_t *)v31);
                v376 = v375 - 1;
              }
              while (__stlxr(v376, (unint64_t *)v31));
              if (!v376)
              {
                if (*(char *)(v31 + 31) < 0)
                  operator delete(*(void **)(v31 + 8));
                MEMORY[0x219A19A08](v31, 0x1012C404EF22A49);
              }
            }
            v283 = v615;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v602);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"[", 1);
            if (*(_QWORD *)(v29 + 16) != *(_QWORD *)(v29 + 8))
            {
              v377 = 0;
              do
              {
                std::ostream::operator<<();
                ++v377;
                v378 = *(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8);
                if (v377 < v378 >> 3)
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)" ", 1);
                  v378 = *(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8);
                }
              }
              while (v377 < v378 >> 3);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"]", 1);
            std::stringbuf::str();
            *(_QWORD *)v602 = v593;
            *(_QWORD *)&v602[*(_QWORD *)(v593 - 24)] = v592;
            *(_QWORD *)&v602[16] = v591;
            *(_QWORD *)&v602[24] = MEMORY[0x24BEDB848] + 16;
            v2 = v590;
            if (v606 < 0)
              goto LABEL_548;
            goto LABEL_549;
          case 3:
            v174 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v175 = (_QWORD *)operator new();
              v176 = v615;
              *v175 = *(_QWORD *)v615;
              v175[2] = 0;
              v175[3] = 0;
              v175[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v175 + 1, *(const void **)(v176 + 8), *(_QWORD *)(v176 + 16), (uint64_t)(*(_QWORD *)(v176 + 16) - *(_QWORD *)(v176 + 8)) >> 3);
              v615 = (unint64_t)v175;
              *v175 = 1;
              do
              {
                v177 = __ldaxr(v174);
                v178 = v177 - 1;
              }
              while (__stlxr(v178, v174));
              if (!v178)
              {
                v179 = (void *)v174[1];
                if (v179)
                {
                  v174[2] = (unint64_t)v179;
                  operator delete(v179);
                }
                MEMORY[0x219A19A08](v174, 0x1080C409938AC02);
              }
            }
            if (v615 == v29)
              goto LABEL_564;
            v149 = (char *)(v615 + 8);
            v180 = (uint64_t *)(v29 + 16);
            goto LABEL_195;
          case 4:
            v169 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v170 = (_QWORD *)operator new();
              v171 = v615;
              *v170 = *(_QWORD *)v615;
              v170[2] = 0;
              v170[3] = 0;
              v170[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v170 + 1, *(uint64_t **)(v171 + 8), *(uint64_t **)(v171 + 16), (uint64_t)(*(_QWORD *)(v171 + 16) - *(_QWORD *)(v171 + 8)) >> 4);
              v615 = (unint64_t)v170;
              *v170 = 1;
              do
              {
                v172 = __ldaxr(v169);
                v173 = v172 - 1;
              }
              while (__stlxr(v173, v169));
              if (!v173)
              {
                *(_QWORD *)v602 = v169 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v602);
                MEMORY[0x219A19A08](v169, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(v615 + 8), *(_QWORD **)(v29 + 8), *(_QWORD **)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 3);
            goto LABEL_564;
          case 5:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v541 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v541, v615);
            v615 = (unint64_t)v541;
            *v541 = 1;
            do
            {
              v542 = __ldaxr(v444);
              v450 = --v542 == 0;
            }
            while (__stlxr(v542, v444));
            goto LABEL_859;
          case 8:
            v451 = v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v547 = operator new();
            v548 = v615;
            *(_QWORD *)v547 = *(_QWORD *)v615;
            *(_QWORD *)(v547 + 8) = *(_QWORD *)(v548 + 8);
            v549 = *(_QWORD *)(v548 + 16);
            *(_QWORD *)(v547 + 16) = v549;
            if (v549)
            {
              v550 = (unsigned int *)(v549 + 8);
              do
                v551 = __ldxr(v550);
              while (__stxr(v551 + 1, v550));
            }
            v552 = *(_OWORD *)(v548 + 24);
            v553 = *(_OWORD *)(v548 + 40);
            *(_OWORD *)(v547 + 56) = *(_OWORD *)(v548 + 56);
            *(_OWORD *)(v547 + 40) = v553;
            *(_OWORD *)(v547 + 24) = v552;
            v615 = v547;
            *(_QWORD *)v547 = 1;
            do
            {
              v554 = __ldaxr((unint64_t *)v451);
              v460 = --v554 == 0;
            }
            while (__stlxr(v554, (unint64_t *)v451));
            goto LABEL_851;
          case 9:
            v154 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v155 = (_QWORD *)operator new();
              v156 = v615 + 8;
              *v155 = *(_QWORD *)v615;
              turi::flexible_type_impl::ndarray<double>::ndarray(v155 + 1, v156);
              v615 = (unint64_t)v155;
              *v155 = 1;
              do
              {
                v157 = __ldaxr(v154);
                v158 = v157 - 1;
              }
              while (__stlxr(v158, v154));
              if (!v158)
              {
                v159 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v154);
                MEMORY[0x219A19A08](v159, 0x1030C407B73B9F7);
              }
            }
            v160 = (_QWORD *)v615;
            v611 = 0;
            v612 = 0;
            v613 = 0;
            memset(&v614, 0, sizeof(v614));
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v30, &v608);
            turi::flexible_type_impl::ndarray<double>::ndarray(v602, &v608, (uint64_t)&v614, (uint64_t)&v611, 0);
            v161 = (std::__shared_weak_count *)v609;
            if (v609)
            {
              v162 = (unint64_t *)(v609 + 1);
              do
                v163 = __ldaxr(v162);
              while (__stlxr(v163 - 1, v162));
              if (!v163)
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
            }
            if (v611)
            {
              v612 = v611;
              operator delete(v611);
            }
            if (v614.__r_.__value_.__r.__words[0])
            {
              v614.__r_.__value_.__l.__size_ = v614.__r_.__value_.__r.__words[0];
              operator delete(v614.__r_.__value_.__l.__data_);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v160 + 1), (__int128 *)v602);
            v164 = (void *)v160[3];
            if (v164)
            {
              v160[4] = v164;
              operator delete(v164);
              v160[3] = 0;
              v160[4] = 0;
              v160[5] = 0;
            }
            v165 = (void *)v160[6];
            *(_OWORD *)(v160 + 3) = *(_OWORD *)&v602[16];
            v160[5] = *(_QWORD *)v603;
            *(_OWORD *)&v602[16] = 0uLL;
            *(_QWORD *)v603 = 0;
            if (v165)
            {
              v160[7] = v165;
              operator delete(v165);
              v160[6] = 0;
              v160[7] = 0;
              v160[8] = 0;
              v165 = *(void **)&v602[16];
            }
            *((_OWORD *)v160 + 3) = *(_OWORD *)&v603[8];
            v160[8] = *(_QWORD *)&v603[24];
            memset(&v603[8], 0, 24);
            v160[9] = v604;
            if (v165)
            {
              *(_QWORD *)&v602[24] = v165;
              operator delete(v165);
            }
            v166 = *(std::__shared_weak_count **)&v602[8];
            if (!*(_QWORD *)&v602[8])
              goto LABEL_564;
            v167 = (unint64_t *)(*(_QWORD *)&v602[8] + 8);
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            goto LABEL_505;
          default:
            goto LABEL_864;
        }
      case 4:
        v10 = *(_QWORD *)v8 + 8;
        v596 = &v595;
        v597 = (uint64_t **)v10;
        switch(v617)
        {
          case 2:
            v11 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v12 = (_QWORD *)operator new();
              v13 = v615;
              *v12 = *(_QWORD *)v615;
              v14 = (std::string *)(v12 + 1);
              if (*(char *)(v13 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(v13 + 8), *(_QWORD *)(v13 + 16));
              }
              else
              {
                v15 = *(_OWORD *)(v13 + 8);
                v12[3] = *(_QWORD *)(v13 + 24);
                *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
              }
              v615 = (unint64_t)v12;
              *v12 = 1;
              do
              {
                v299 = __ldaxr((unint64_t *)v11);
                v300 = v299 - 1;
              }
              while (__stlxr(v300, (unint64_t *)v11));
              if (!v300)
              {
                if (*(char *)(v11 + 31) < 0)
                  operator delete(*(void **)(v11 + 8));
                MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
              }
            }
            v234 = v615;
            v301 = v597;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v602);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"[", 1);
            v302 = *v301;
            if (v301[1] != *v301)
            {
              v303 = 0;
              v304 = 0;
              do
              {
                if (BYTE4(v302[v303 + 1]) == 2)
                {
                  v305 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"\"", 1);
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)&(*v301)[v303], &v614);
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v306 = &v614;
                  else
                    v306 = (std::string *)v614.__r_.__value_.__r.__words[0];
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v614.__r_.__value_.__r.__words[2]);
                  else
                    size = v614.__r_.__value_.__l.__size_;
                  v308 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v305, (uint64_t)v306, size);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v308, (uint64_t)"\"", 1);
                }
                else
                {
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)&v302[v303], &v614);
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v309 = &v614;
                  else
                    v309 = (std::string *)v614.__r_.__value_.__r.__words[0];
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v310 = HIBYTE(v614.__r_.__value_.__r.__words[2]);
                  else
                    v310 = v614.__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)v309, v310);
                }
                if (SHIBYTE(v614.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v614.__r_.__value_.__l.__data_);
                ++v304;
                v302 = *v301;
                v311 = (char *)v301[1] - (char *)*v301;
                if (v304 < v311 >> 4)
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)",", 1);
                  v302 = *v301;
                  v311 = (char *)v301[1] - (char *)*v301;
                }
                v303 += 2;
              }
              while (v304 < v311 >> 4);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"]", 1);
            std::stringbuf::str();
            goto LABEL_427;
          case 3:
            v137 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v138 = (_QWORD *)operator new();
              v139 = v615;
              *v138 = *(_QWORD *)v615;
              v138[2] = 0;
              v138[3] = 0;
              v138[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v138 + 1, *(const void **)(v139 + 8), *(_QWORD *)(v139 + 16), (uint64_t)(*(_QWORD *)(v139 + 16) - *(_QWORD *)(v139 + 8)) >> 3);
              v615 = (unint64_t)v138;
              *v138 = 1;
              do
              {
                v140 = __ldaxr(v137);
                v141 = v140 - 1;
              }
              while (__stlxr(v141, v137));
              if (!v141)
              {
                v142 = (void *)v137[1];
                if (v142)
                {
                  v137[2] = (unint64_t)v142;
                  operator delete(v142);
                }
                MEMORY[0x219A19A08](v137, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::soft_assignment_visitor,std::vector<turi::flexible_type>>::operator()<std::vector<double>>(&v596, v615 + 8);
            goto LABEL_564;
          case 4:
            v125 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v126 = (_QWORD *)operator new();
              v127 = v615;
              *v126 = *(_QWORD *)v615;
              v126[2] = 0;
              v126[3] = 0;
              v126[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v126 + 1, *(uint64_t **)(v127 + 8), *(uint64_t **)(v127 + 16), (uint64_t)(*(_QWORD *)(v127 + 16) - *(_QWORD *)(v127 + 8)) >> 4);
              v615 = (unint64_t)v126;
              *v126 = 1;
              do
              {
                v128 = __ldaxr(v125);
                v129 = v128 - 1;
              }
              while (__stlxr(v129, v125));
              if (!v129)
              {
                *(_QWORD *)v602 = v125 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v602);
                MEMORY[0x219A19A08](v125, 0x1020C405E66F15BLL);
              }
            }
            if ((uint64_t **)(v615 + 8) != v597)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v615 + 8, *v597, v597[1], ((char *)v597[1] - (char *)*v597) >> 4);
            goto LABEL_564;
          case 5:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v545 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v545, v615);
            v615 = (unint64_t)v545;
            *v545 = 1;
            do
            {
              v546 = __ldaxr(v444);
              v450 = --v546 == 0;
            }
            while (__stlxr(v546, v444));
            goto LABEL_859;
          case 8:
            v451 = v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v579 = operator new();
            v580 = v615;
            *(_QWORD *)v579 = *(_QWORD *)v615;
            *(_QWORD *)(v579 + 8) = *(_QWORD *)(v580 + 8);
            v581 = *(_QWORD *)(v580 + 16);
            *(_QWORD *)(v579 + 16) = v581;
            if (v581)
            {
              v582 = (unsigned int *)(v581 + 8);
              do
                v583 = __ldxr(v582);
              while (__stxr(v583 + 1, v582));
            }
            v584 = *(_OWORD *)(v580 + 24);
            v585 = *(_OWORD *)(v580 + 40);
            *(_OWORD *)(v579 + 56) = *(_OWORD *)(v580 + 56);
            *(_OWORD *)(v579 + 40) = v585;
            *(_OWORD *)(v579 + 24) = v584;
            v615 = v579;
            *(_QWORD *)v579 = 1;
            do
            {
              v586 = __ldaxr((unint64_t *)v451);
              v460 = --v586 == 0;
            }
            while (__stlxr(v586, (unint64_t *)v451));
            goto LABEL_851;
          case 9:
            v88 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v89 = (_QWORD *)operator new();
              v90 = v615 + 8;
              *v89 = *(_QWORD *)v615;
              turi::flexible_type_impl::ndarray<double>::ndarray(v89 + 1, v90);
              v615 = (unint64_t)v89;
              *v89 = 1;
              do
              {
                v91 = __ldaxr(v88);
                v92 = v91 - 1;
              }
              while (__stlxr(v92, v88));
              if (!v92)
              {
                v93 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v88);
                MEMORY[0x219A19A08](v93, 0x1030C407B73B9F7);
              }
            }
            v94 = (_QWORD *)v615;
            memset(v598, 0, sizeof(v598));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v598, *v597, v597[1], ((char *)v597[1] - (char *)*v597) >> 4);
            v95 = 0;
            v96 = 0;
            memset(&v614, 0, sizeof(v614));
            v97 = v598;
            break;
          default:
            goto LABEL_864;
        }
        while (2)
        {
          v98 = (v97[1] - *v97) >> 4;
          if ((unint64_t)v96 >= v95)
          {
            v100 = (_QWORD *)v614.__r_.__value_.__r.__words[0];
            v101 = (uint64_t)((uint64_t)v96 - v614.__r_.__value_.__r.__words[0]) >> 3;
            v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v103 = v95 - v614.__r_.__value_.__r.__words[0];
            if (v103 >> 2 > v102)
              v102 = v103 >> 2;
            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
              v104 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v104 = v102;
            if (v104)
            {
              v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v614.__r_.__value_.__r.__words[2], v104);
              v96 = (_QWORD *)v614.__r_.__value_.__l.__size_;
              v100 = (_QWORD *)v614.__r_.__value_.__r.__words[0];
            }
            else
            {
              v105 = 0;
            }
            v106 = (uint64_t *)&v105[8 * v101];
            *v106 = v98;
            v99 = v106 + 1;
            while (v96 != v100)
            {
              v107 = *--v96;
              *--v106 = v107;
            }
            v614.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
            v614.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
            v614.__r_.__value_.__r.__words[2] = (std::string::size_type)&v105[8 * v104];
            if (v100)
              operator delete(v100);
          }
          else
          {
            *v96 = v98;
            v99 = v96 + 1;
          }
          v614.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
          v108 = (unsigned __int8 *)*v97;
          if (v97[1] != *v97)
          {
            v109 = v108[12];
            switch(v109)
            {
              case 4:
                v97 = (uint64_t *)(*(_QWORD *)v108 + 8);
                v95 = v614.__r_.__value_.__r.__words[2];
                v96 = v99;
                continue;
              case 9:
                v287 = *(_QWORD *)v108;
                v288 = *(_QWORD *)(*(_QWORD *)v108 + 24);
                if (*(_QWORD *)(*(_QWORD *)v108 + 32) != v288)
                {
                  v289 = 0;
                  v290 = v99;
                  do
                  {
                    if ((unint64_t)v290 >= v614.__r_.__value_.__r.__words[2])
                    {
                      v291 = (_QWORD *)v614.__r_.__value_.__r.__words[0];
                      v292 = (uint64_t)((uint64_t)v290 - v614.__r_.__value_.__r.__words[0]) >> 3;
                      v293 = v292 + 1;
                      if ((unint64_t)(v292 + 1) >> 61)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      v294 = v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0];
                      if ((uint64_t)(v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0]) >> 2 > v293)
                        v293 = v294 >> 2;
                      if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8)
                        v295 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v295 = v293;
                      if (v295)
                      {
                        v296 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v614.__r_.__value_.__r.__words[2], v295);
                        v290 = (_QWORD *)v614.__r_.__value_.__l.__size_;
                        v291 = (_QWORD *)v614.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        v296 = 0;
                      }
                      v297 = &v296[8 * v292];
                      *(_QWORD *)v297 = *(_QWORD *)(v288 + 8 * v289);
                      v99 = v297 + 8;
                      while (v290 != v291)
                      {
                        v298 = *--v290;
                        *((_QWORD *)v297 - 1) = v298;
                        v297 -= 8;
                      }
                      v614.__r_.__value_.__r.__words[0] = (std::string::size_type)v297;
                      v614.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
                      v614.__r_.__value_.__r.__words[2] = (std::string::size_type)&v296[8 * v295];
                      if (v291)
                        operator delete(v291);
                    }
                    else
                    {
                      *v290 = *(_QWORD *)(v288 + 8 * v289);
                      v99 = v290 + 1;
                    }
                    v614.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
                    ++v289;
                    v288 = *(_QWORD *)(v287 + 24);
                    v290 = v99;
                  }
                  while (v289 < (*(_QWORD *)(v287 + 32) - v288) >> 3);
                }
                break;
              case 3:
                v203 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v108 + 16) - *(_QWORD *)(*(_QWORD *)v108 + 8)) >> 3;
                if ((unint64_t)v99 >= v614.__r_.__value_.__r.__words[2])
                {
                  v390 = (_QWORD *)v614.__r_.__value_.__r.__words[0];
                  v391 = (uint64_t)((uint64_t)v99 - v614.__r_.__value_.__r.__words[0]) >> 3;
                  v392 = v391 + 1;
                  if ((unint64_t)(v391 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v393 = v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0];
                  if ((uint64_t)(v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0]) >> 2 > v392)
                    v392 = v393 >> 2;
                  if ((unint64_t)v393 >= 0x7FFFFFFFFFFFFFF8)
                    v394 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v394 = v392;
                  if (v394)
                  {
                    v395 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v614.__r_.__value_.__r.__words[2], v394);
                    v99 = (_QWORD *)v614.__r_.__value_.__l.__size_;
                    v390 = (_QWORD *)v614.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    v395 = 0;
                  }
                  v396 = (uint64_t *)&v395[8 * v391];
                  *v396 = v203;
                  v204 = (std::string::size_type)(v396 + 1);
                  while (v99 != v390)
                  {
                    v397 = *--v99;
                    *--v396 = v397;
                  }
                  v614.__r_.__value_.__r.__words[0] = (std::string::size_type)v396;
                  v614.__r_.__value_.__l.__size_ = v204;
                  v614.__r_.__value_.__r.__words[2] = (std::string::size_type)&v395[8 * v394];
                  if (v390)
                    operator delete(v390);
                }
                else
                {
                  *v99 = v203;
                  v204 = (std::string::size_type)(v99 + 1);
                }
                v614.__r_.__value_.__l.__size_ = v204;
                v99 = (_QWORD *)v204;
                break;
              default:
                if (((0x3BCuLL >> v109) & 1) != 0)
                  turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_0::operator()();
                break;
            }
          }
          break;
        }
        v398 = (uint64_t *)v614.__r_.__value_.__r.__words[0];
        if (v99 == (_QWORD *)v614.__r_.__value_.__l.__data_)
        {
          v612 = 0;
          v613 = 0;
          v608 = 0;
          v609 = 0;
          v610 = 0;
          v611 = 0;
          v599 = 0;
          v600 = 0;
          v601 = 0;
          turi::flexible_type_impl::ndarray<double>::ndarray(v602, (uint64_t)&v611, (uint64_t)&v608, (uint64_t)&v599, 0);
          v2 = v590;
          if (v599)
          {
            v600 = (std::__shared_weak_count *)v599;
            operator delete(v599);
          }
        }
        else
        {
          v399 = (uint64_t)((uint64_t)v99 - v614.__r_.__value_.__r.__words[0]) >> 3;
          if (v399 <= 1)
            v399 = 1;
          v400 = 1;
          v2 = v590;
          do
          {
            v401 = *v398++;
            v400 *= v401;
            --v399;
          }
          while (v399);
          if (v400)
          {
            v402 = (char *)operator new(0x30uLL);
            *((_QWORD *)v402 + 1) = 0;
            *((_QWORD *)v402 + 2) = 0;
            *(_QWORD *)v402 = &unk_24D9195E8;
            *((_QWORD *)v402 + 4) = 0;
            *((_QWORD *)v402 + 5) = 0;
            *((_QWORD *)v402 + 3) = 0;
            v608 = (double **)(v402 + 24);
            v609 = (double **)v402;
            std::vector<double>::reserve((void **)v402 + 3, v400);
            if ((turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(v598, &v614, 0, v608) & 1) == 0)
              turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_1::operator()();
            v611 = 0;
            v612 = 0;
            v613 = 0;
            turi::flexible_type_impl::ndarray<double>::ndarray(v602, &v608, (uint64_t)&v614, (uint64_t)&v611, 0);
            if (v611)
            {
              v612 = v611;
              operator delete(v611);
            }
            v403 = (std::__shared_weak_count *)v609;
            if (v609)
            {
              v404 = (unint64_t *)(v609 + 1);
              do
                v405 = __ldaxr(v404);
              while (__stlxr(v405 - 1, v404));
              if (!v405)
              {
                ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
                std::__shared_weak_count::__release_weak(v403);
              }
            }
            goto LABEL_602;
          }
          v612 = 0;
          v613 = 0;
          v608 = 0;
          v609 = 0;
          v610 = 0;
          v611 = 0;
          turi::flexible_type_impl::ndarray<double>::ndarray(v602, (uint64_t)&v611, (uint64_t)&v614, (uint64_t)&v608, 0);
        }
        if (v608)
        {
          v609 = v608;
          operator delete(v608);
        }
        if (v611)
        {
          v612 = v611;
          operator delete(v611);
        }
LABEL_602:
        if (v614.__r_.__value_.__r.__words[0])
        {
          v614.__r_.__value_.__l.__size_ = v614.__r_.__value_.__r.__words[0];
          operator delete(v614.__r_.__value_.__l.__data_);
        }
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v94 + 1), (__int128 *)v602);
        v406 = (void *)v94[3];
        if (v406)
        {
          v94[4] = v406;
          operator delete(v406);
          v94[3] = 0;
          v94[4] = 0;
          v94[5] = 0;
        }
        v407 = (void *)v94[6];
        *(_OWORD *)(v94 + 3) = *(_OWORD *)&v602[16];
        v94[5] = *(_QWORD *)v603;
        *(_OWORD *)&v602[16] = 0uLL;
        *(_QWORD *)v603 = 0;
        if (v407)
        {
          v94[7] = v407;
          operator delete(v407);
          v94[6] = 0;
          v94[7] = 0;
          v94[8] = 0;
          v407 = *(void **)&v602[16];
        }
        *((_OWORD *)v94 + 3) = *(_OWORD *)&v603[8];
        v94[8] = *(_QWORD *)&v603[24];
        memset(&v603[8], 0, 24);
        v94[9] = v604;
        if (v407)
        {
          *(_QWORD *)&v602[24] = v407;
          operator delete(v407);
        }
        v408 = *(std::__shared_weak_count **)&v602[8];
        if (*(_QWORD *)&v602[8])
        {
          v409 = (unint64_t *)(*(_QWORD *)&v602[8] + 8);
          do
            v410 = __ldaxr(v409);
          while (__stlxr(v410 - 1, v409));
          if (!v410)
          {
            ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
            std::__shared_weak_count::__release_weak(v408);
          }
        }
        v614.__r_.__value_.__r.__words[0] = (std::string::size_type)v598;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v614);
        goto LABEL_564;
      case 5:
        v36 = *(_QWORD *)v8;
        switch(v617)
        {
          case 2:
            v37 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v38 = (_QWORD *)operator new();
              v39 = v615;
              *v38 = *(_QWORD *)v615;
              v40 = (std::string *)(v38 + 1);
              if (*(char *)(v39 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)(v39 + 8), *(_QWORD *)(v39 + 16));
              }
              else
              {
                v41 = *(_OWORD *)(v39 + 8);
                v38[3] = *(_QWORD *)(v39 + 24);
                *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
              }
              v615 = (unint64_t)v38;
              *v38 = 1;
              do
              {
                v232 = __ldaxr((unint64_t *)v37);
                v233 = v232 - 1;
              }
              while (__stlxr(v233, (unint64_t *)v37));
              if (!v233)
              {
                if (*(char *)(v37 + 31) < 0)
                  operator delete(*(void **)(v37 + 8));
                MEMORY[0x219A19A08](v37, 0x1012C404EF22A49);
              }
            }
            v234 = v615;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v602);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"{", 1);
            v235 = *(_QWORD *)(v36 + 8);
            v236 = *(_BYTE **)(v36 + 16);
            if (v236 != (_BYTE *)v235)
            {
              v237 = (uint64_t)&v236[-v235] >> 5;
              v238 = (turi::flexible_type_impl *)(v235 + 16);
              v239 = 1;
              do
              {
                if (*((_BYTE *)v238 - 4) == 2)
                {
                  v240 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"\"", 1);
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v238 - 16), &v614);
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v241 = &v614;
                  else
                    v241 = (std::string *)v614.__r_.__value_.__r.__words[0];
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v242 = HIBYTE(v614.__r_.__value_.__r.__words[2]);
                  else
                    v242 = v614.__r_.__value_.__l.__size_;
                  v243 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v240, (uint64_t)v241, v242);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)"\"", 1);
                }
                else
                {
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v238 - 16), &v614);
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v244 = &v614;
                  else
                    v244 = (std::string *)v614.__r_.__value_.__r.__words[0];
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v245 = HIBYTE(v614.__r_.__value_.__r.__words[2]);
                  else
                    v245 = v614.__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)v244, v245);
                }
                if (SHIBYTE(v614.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v614.__r_.__value_.__l.__data_);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)":", 1);
                if (*((_BYTE *)v238 + 12) == 2)
                {
                  v246 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"\"", 1);
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v238, &v614);
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v247 = &v614;
                  else
                    v247 = (std::string *)v614.__r_.__value_.__r.__words[0];
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v248 = HIBYTE(v614.__r_.__value_.__r.__words[2]);
                  else
                    v248 = v614.__r_.__value_.__l.__size_;
                  v249 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246, (uint64_t)v247, v248);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v249, (uint64_t)"\"", 1);
                }
                else
                {
                  turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v238, &v614);
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v250 = &v614;
                  else
                    v250 = (std::string *)v614.__r_.__value_.__r.__words[0];
                  if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v251 = HIBYTE(v614.__r_.__value_.__r.__words[2]);
                  else
                    v251 = v614.__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)v250, v251);
                }
                if (SHIBYTE(v614.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v614.__r_.__value_.__l.__data_);
                if (v239 < v237)
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)", ", 2);
                ++v239;
                v252 = (char *)v238 + 16;
                v238 = (turi::flexible_type_impl *)((char *)v238 + 32);
              }
              while (v252 != v236);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"}", 1);
            std::stringbuf::str();
LABEL_427:
            *(_QWORD *)v602 = v593;
            *(_QWORD *)&v602[*(_QWORD *)(v593 - 24)] = v592;
            *(_QWORD *)&v602[16] = v591;
            *(_QWORD *)&v602[24] = MEMORY[0x24BEDB848] + 16;
            v2 = v590;
            if (v606 < 0)
              goto LABEL_428;
            goto LABEL_429;
          case 3:
            v440 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v477 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v477, v615);
            v615 = (unint64_t)v477;
            *v477 = 1;
            do
            {
              v478 = __ldaxr(v440);
              v443 = --v478 == 0;
            }
            while (__stlxr(v478, v440));
            goto LABEL_836;
          case 4:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v479 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v479, v615);
            v615 = (unint64_t)v479;
            *v479 = 1;
            do
            {
              v480 = __ldaxr(v444);
              v447 = --v480 == 0;
            }
            while (__stlxr(v480, v444));
            goto LABEL_801;
          case 5:
            v48 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v49 = (_QWORD *)operator new();
              v50 = v615;
              *v49 = *(_QWORD *)v615;
              v49[2] = 0;
              v49[3] = 0;
              v49[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v49 + 1, *(uint64_t **)(v50 + 8), *(uint64_t **)(v50 + 16), (uint64_t)(*(_QWORD *)(v50 + 16) - *(_QWORD *)(v50 + 8)) >> 5);
              v615 = (unint64_t)v49;
              *v49 = 1;
              do
              {
                v51 = __ldaxr(v48);
                v52 = v51 - 1;
              }
              while (__stlxr(v52, v48));
              if (!v52)
              {
                *(_QWORD *)v602 = v48 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v602);
                MEMORY[0x219A19A08](v48, 0x1020C405E66F15BLL);
              }
            }
            if (v615 != v36)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v615 + 8), *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 5);
            goto LABEL_564;
          case 8:
            v451 = v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v469 = operator new();
            v470 = v615;
            *(_QWORD *)v469 = *(_QWORD *)v615;
            *(_QWORD *)(v469 + 8) = *(_QWORD *)(v470 + 8);
            v471 = *(_QWORD *)(v470 + 16);
            *(_QWORD *)(v469 + 16) = v471;
            if (v471)
            {
              v472 = (unsigned int *)(v471 + 8);
              do
                v473 = __ldxr(v472);
              while (__stxr(v473 + 1, v472));
            }
            v474 = *(_OWORD *)(v470 + 24);
            v475 = *(_OWORD *)(v470 + 40);
            *(_OWORD *)(v469 + 56) = *(_OWORD *)(v470 + 56);
            *(_OWORD *)(v469 + 40) = v475;
            *(_OWORD *)(v469 + 24) = v474;
            v615 = v469;
            *(_QWORD *)v469 = 1;
            do
            {
              v476 = __ldaxr((unint64_t *)v451);
              v460 = --v476 == 0;
            }
            while (__stlxr(v476, (unint64_t *)v451));
            goto LABEL_851;
          case 9:
            v461 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v466 = (_QWORD *)operator new();
            v467 = v615 + 8;
            *v466 = *(_QWORD *)v615;
            turi::flexible_type_impl::ndarray<double>::ndarray(v466 + 1, v467);
            v615 = (unint64_t)v466;
            *v466 = 1;
            do
            {
              v468 = __ldaxr(v461);
              v465 = --v468 == 0;
            }
            while (__stlxr(v468, v461));
            goto LABEL_783;
          default:
            goto LABEL_864;
        }
      case 6:
        switch(v617)
        {
          case 0:
            v9 = (uint64_t)(*(_QWORD *)v8 << 8) >> 8;
            goto LABEL_33;
          case 1:
            v192 = (double)*(int *)(v8 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v8 << 8) >> 8);
LABEL_214:
            v615 = *(_QWORD *)&v192;
            goto LABEL_564;
          case 2:
            v194 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v195 = (_QWORD *)operator new();
              v196 = v615;
              *v195 = *(_QWORD *)v615;
              v197 = (std::string *)(v195 + 1);
              if (*(char *)(v196 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v197, *(const std::string::value_type **)(v196 + 8), *(_QWORD *)(v196 + 16));
              }
              else
              {
                v198 = *(_OWORD *)(v196 + 8);
                v195[3] = *(_QWORD *)(v196 + 24);
                *(_OWORD *)&v197->__r_.__value_.__l.__data_ = v198;
              }
              v615 = (unint64_t)v195;
              *v195 = 1;
              do
              {
                v387 = __ldaxr((unint64_t *)v194);
                v388 = v387 - 1;
              }
              while (__stlxr(v388, (unint64_t *)v194));
              if (!v388)
              {
                if (*(char *)(v194 + 31) < 0)
                  operator delete(*(void **)(v194 + 8));
                MEMORY[0x219A19A08](v194, 0x1012C404EF22A49);
              }
            }
            v201 = v615;
            v389 = *(_DWORD *)(v8 + 8);
            v614.__r_.__value_.__r.__words[0] = *(_QWORD *)v8;
            LODWORD(v614.__r_.__value_.__r.__words[1]) = v389;
            turi::flexible_type_impl::date_time_to_string((turi::flexible_type_impl *)&v614, (std::string *)v602);
            goto LABEL_560;
          case 3:
            v440 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v528 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v528, v615);
            v615 = (unint64_t)v528;
            *v528 = 1;
            do
            {
              v529 = __ldaxr(v440);
              v443 = --v529 == 0;
            }
            while (__stlxr(v529, v440));
            goto LABEL_836;
          case 4:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v530 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v530, v615);
            v615 = (unint64_t)v530;
            *v530 = 1;
            do
            {
              v531 = __ldaxr(v444);
              v447 = --v531 == 0;
            }
            while (__stlxr(v531, v444));
            goto LABEL_801;
          case 5:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v555 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v555, v615);
            v615 = (unint64_t)v555;
            *v555 = 1;
            do
            {
              v556 = __ldaxr(v444);
              v450 = --v556 == 0;
            }
            while (__stlxr(v556, v444));
            goto LABEL_859;
          case 6:
            v193 = *(_DWORD *)(v8 + 8);
            v615 = *(_QWORD *)v8;
            v616 = v193;
            goto LABEL_564;
          case 8:
            v451 = v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v565 = operator new();
            v566 = v615;
            *(_QWORD *)v565 = *(_QWORD *)v615;
            *(_QWORD *)(v565 + 8) = *(_QWORD *)(v566 + 8);
            v567 = *(_QWORD *)(v566 + 16);
            *(_QWORD *)(v565 + 16) = v567;
            if (v567)
            {
              v568 = (unsigned int *)(v567 + 8);
              do
                v569 = __ldxr(v568);
              while (__stxr(v569 + 1, v568));
            }
            v570 = *(_OWORD *)(v566 + 24);
            v571 = *(_OWORD *)(v566 + 40);
            *(_OWORD *)(v565 + 56) = *(_OWORD *)(v566 + 56);
            *(_OWORD *)(v565 + 40) = v571;
            *(_OWORD *)(v565 + 24) = v570;
            v615 = v565;
            *(_QWORD *)v565 = 1;
            do
            {
              v572 = __ldaxr((unint64_t *)v451);
              v460 = --v572 == 0;
            }
            while (__stlxr(v572, (unint64_t *)v451));
            goto LABEL_851;
          case 9:
            v461 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v532 = (_QWORD *)operator new();
            v533 = v615 + 8;
            *v532 = *(_QWORD *)v615;
            turi::flexible_type_impl::ndarray<double>::ndarray(v532 + 1, v533);
            v615 = (unint64_t)v532;
            *v532 = 1;
            do
            {
              v534 = __ldaxr(v461);
              v465 = --v534 == 0;
            }
            while (__stlxr(v534, v461));
            goto LABEL_783;
          default:
            goto LABEL_864;
        }
      case 7:
        switch(v617)
        {
          case 1:
            v9 = 0x7FF8000000000000;
LABEL_33:
            v615 = v9;
            goto LABEL_564;
          case 2:
            v83 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v84 = (_QWORD *)operator new();
              v85 = v615;
              *v84 = *(_QWORD *)v615;
              v86 = (std::string *)(v84 + 1);
              if (*(char *)(v85 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)(v85 + 8), *(_QWORD *)(v85 + 16));
              }
              else
              {
                v87 = *(_OWORD *)(v85 + 8);
                v84[3] = *(_QWORD *)(v85 + 24);
                *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
              }
              v615 = (unint64_t)v84;
              *v84 = 1;
              do
              {
                v284 = __ldaxr((unint64_t *)v83);
                v285 = v284 - 1;
              }
              while (__stlxr(v285, (unint64_t *)v83));
              if (!v285)
              {
                if (*(char *)(v83 + 31) < 0)
                  operator delete(*(void **)(v83 + 8));
                MEMORY[0x219A19A08](v83, 0x1012C404EF22A49);
              }
            }
            v286 = v615 + 8;
            if (*(char *)(v615 + 31) < 0)
              operator delete(*(void **)v286);
            *(_QWORD *)v286 = 0;
            *(_QWORD *)(v286 + 8) = 0;
            *(_QWORD *)(v286 + 16) = 0;
            goto LABEL_564;
          case 3:
            v440 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v481 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v481, v615);
            v615 = (unint64_t)v481;
            *v481 = 1;
            do
            {
              v482 = __ldaxr(v440);
              v443 = --v482 == 0;
            }
            while (__stlxr(v482, v440));
LABEL_836:
            if (!v443)
              goto LABEL_864;
            v575 = (void *)v440[1];
            if (v575)
            {
              v440[2] = (unint64_t)v575;
              operator delete(v575);
            }
            v535 = v440;
            v576 = 0x1080C409938AC02;
            goto LABEL_863;
          case 4:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v496 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v496, v615);
            v615 = (unint64_t)v496;
            *v496 = 1;
            do
            {
              v497 = __ldaxr(v444);
              v447 = --v497 == 0;
            }
            while (__stlxr(v497, v444));
            goto LABEL_801;
          case 5:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v494 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v494, v615);
            v615 = (unint64_t)v494;
            *v494 = 1;
            do
            {
              v495 = __ldaxr(v444);
              v450 = --v495 == 0;
            }
            while (__stlxr(v495, v444));
            goto LABEL_859;
          case 7:
            goto LABEL_564;
          case 8:
            v451 = v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v502 = operator new();
            v503 = v615;
            *(_QWORD *)v502 = *(_QWORD *)v615;
            *(_QWORD *)(v502 + 8) = *(_QWORD *)(v503 + 8);
            v504 = *(_QWORD *)(v503 + 16);
            *(_QWORD *)(v502 + 16) = v504;
            if (v504)
            {
              v505 = (unsigned int *)(v504 + 8);
              do
                v506 = __ldxr(v505);
              while (__stxr(v506 + 1, v505));
            }
            v507 = *(_OWORD *)(v503 + 24);
            v508 = *(_OWORD *)(v503 + 40);
            *(_OWORD *)(v502 + 56) = *(_OWORD *)(v503 + 56);
            *(_OWORD *)(v502 + 40) = v508;
            *(_OWORD *)(v502 + 24) = v507;
            v615 = v502;
            *(_QWORD *)v502 = 1;
            do
            {
              v509 = __ldaxr((unint64_t *)v451);
              v460 = --v509 == 0;
            }
            while (__stlxr(v509, (unint64_t *)v451));
            goto LABEL_851;
          case 9:
            v461 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v483 = (_QWORD *)operator new();
            v484 = v615 + 8;
            *v483 = *(_QWORD *)v615;
            turi::flexible_type_impl::ndarray<double>::ndarray(v483 + 1, v484);
            v615 = (unint64_t)v483;
            *v483 = 1;
            do
            {
              v485 = __ldaxr(v461);
              v465 = --v485 == 0;
            }
            while (__stlxr(v485, v461));
LABEL_783:
            if (!v465)
              goto LABEL_864;
            v535 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v461);
            v536 = 2071181815;
            goto LABEL_854;
          default:
            goto LABEL_864;
        }
      case 8:
        v42 = *(_QWORD *)v8;
        switch(v617)
        {
          case 2:
            v43 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v44 = (_QWORD *)operator new();
              v45 = v615;
              *v44 = *(_QWORD *)v615;
              v46 = (std::string *)(v44 + 1);
              if (*(char *)(v45 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)(v45 + 8), *(_QWORD *)(v45 + 16));
              }
              else
              {
                v47 = *(_OWORD *)(v45 + 8);
                v44[3] = *(_QWORD *)(v45 + 24);
                *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
              }
              v615 = (unint64_t)v44;
              *v44 = 1;
              do
              {
                v281 = __ldaxr((unint64_t *)v43);
                v282 = v281 - 1;
              }
              while (__stlxr(v282, (unint64_t *)v43));
              if (!v282)
              {
                if (*(char *)(v43 + 31) < 0)
                  operator delete(*(void **)(v43 + 8));
                MEMORY[0x219A19A08](v43, 0x1012C404EF22A49);
              }
            }
            v283 = v615;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v602);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)"Height: ", 8);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v602[16], (uint64_t)" Width: ", 8);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_546:
            *(_QWORD *)v602 = v593;
            *(_QWORD *)&v602[*(_QWORD *)(v593 - 24)] = v592;
            v381 = MEMORY[0x24BEDB848] + 16;
            *(_QWORD *)&v602[16] = v591;
LABEL_547:
            *(_QWORD *)&v602[24] = v381;
            if (v606 < 0)
LABEL_548:
              operator delete(v605);
LABEL_549:
            v384 = v283 + 8;
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v607);
            if (*(char *)(v283 + 31) < 0)
              operator delete(*(void **)v384);
            v385 = *(_OWORD *)&v614.__r_.__value_.__l.__data_;
            v386 = v614.__r_.__value_.__r.__words[2];
            goto LABEL_563;
          case 3:
            v53 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v54 = (_QWORD *)operator new();
              v55 = v615;
              *v54 = *(_QWORD *)v615;
              v54[2] = 0;
              v54[3] = 0;
              v54[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v54 + 1, *(const void **)(v55 + 8), *(_QWORD *)(v55 + 16), (uint64_t)(*(_QWORD *)(v55 + 16) - *(_QWORD *)(v55 + 8)) >> 3);
              v615 = (unint64_t)v54;
              *v54 = 1;
              do
              {
                v56 = __ldaxr(v53);
                v57 = v56 - 1;
              }
              while (__stlxr(v57, v53));
              if (!v57)
              {
                v58 = (void *)v53[1];
                if (v58)
                {
                  v53[2] = (unint64_t)v58;
                  operator delete(v58);
                }
                MEMORY[0x219A19A08](v53, 0x1080C409938AC02);
              }
            }
            v59 = (_QWORD *)v615;
            memset(&v614, 0, sizeof(v614));
            if (*(_QWORD *)(v42 + 64) == 2)
            {
              if (*(_QWORD *)(v42 + 48))
              {
                v60 = 0;
                v61 = 0;
                do
                {
                  LOBYTE(v5) = *(_BYTE *)(*(_QWORD *)(v42 + 8) + v61);
                  v62 = (double)v5;
                  if ((unint64_t)v60 >= v614.__r_.__value_.__r.__words[2])
                  {
                    v64 = (double *)v614.__r_.__value_.__r.__words[0];
                    v65 = (uint64_t)((uint64_t)v60 - v614.__r_.__value_.__r.__words[0]) >> 3;
                    v66 = v65 + 1;
                    if ((unint64_t)(v65 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v67 = v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0];
                    if ((uint64_t)(v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0]) >> 2 > v66)
                      v66 = v67 >> 2;
                    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
                      v4 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v4 = v66;
                    if (v4)
                    {
                      v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v614.__r_.__value_.__r.__words[2], v4);
                      v60 = (double *)v614.__r_.__value_.__l.__size_;
                      v64 = (double *)v614.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      v68 = 0;
                    }
                    v69 = (double *)&v68[8 * v65];
                    *v69 = v62;
                    v63 = (std::string::size_type)(v69 + 1);
                    while (v60 != v64)
                    {
                      v70 = *((_QWORD *)v60-- - 1);
                      v5 = v70;
                      *((_QWORD *)v69-- - 1) = v70;
                    }
                    v614.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
                    v614.__r_.__value_.__l.__size_ = v63;
                    v614.__r_.__value_.__r.__words[2] = (std::string::size_type)&v68[8 * v4];
                    if (v64)
                      operator delete(v64);
                  }
                  else
                  {
                    *v60 = v62;
                    v63 = (std::string::size_type)(v60 + 1);
                  }
                  v614.__r_.__value_.__l.__size_ = v63;
                  ++v61;
                  v60 = (double *)v63;
                }
                while (v61 < *(_QWORD *)(v42 + 48));
              }
            }
            else
            {
              v205 = *(_QWORD *)(v42 + 16);
              *(_QWORD *)v602 = *(_QWORD *)(v42 + 8);
              *(_QWORD *)&v602[8] = v205;
              if (v205)
              {
                v206 = (unsigned int *)(v205 + 8);
                do
                  v207 = __ldxr(v206);
                while (__stxr(v207 + 1, v206));
              }
              v208 = *(_OWORD *)(v42 + 24);
              v209 = *(_OWORD *)(v42 + 56);
              *(_OWORD *)v603 = *(_OWORD *)(v42 + 40);
              *(_OWORD *)&v603[16] = v209;
              *(_OWORD *)&v602[16] = v208;
              turi::decode_image_inplace((turi *)v602, (turi::image_type *)v4);
              if (*(_QWORD *)&v603[24] != 2)
                turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)const::$_0::operator()();
              if (*(_QWORD *)&v603[8])
              {
                v211 = 0;
                v212 = (double *)v614.__r_.__value_.__l.__size_;
                do
                {
                  LOBYTE(v210) = *(_BYTE *)(*(_QWORD *)v602 + v211);
                  v213 = (double)v210;
                  if ((unint64_t)v212 >= v614.__r_.__value_.__r.__words[2])
                  {
                    v215 = (double *)v614.__r_.__value_.__r.__words[0];
                    v216 = (uint64_t)((uint64_t)v212 - v614.__r_.__value_.__r.__words[0]) >> 3;
                    v217 = v216 + 1;
                    if ((unint64_t)(v216 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v218 = v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0];
                    if ((uint64_t)(v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0]) >> 2 > v217)
                      v217 = v218 >> 2;
                    if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFF8)
                      v219 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v219 = v217;
                    if (v219)
                    {
                      v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v614.__r_.__value_.__r.__words[2], v219);
                      v212 = (double *)v614.__r_.__value_.__l.__size_;
                      v215 = (double *)v614.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      v220 = 0;
                    }
                    v221 = (double *)&v220[8 * v216];
                    *v221 = v213;
                    v214 = (std::string::size_type)(v221 + 1);
                    while (v212 != v215)
                    {
                      v222 = *((_QWORD *)v212-- - 1);
                      v210 = v222;
                      *((_QWORD *)v221-- - 1) = v222;
                    }
                    v614.__r_.__value_.__r.__words[0] = (std::string::size_type)v221;
                    v614.__r_.__value_.__l.__size_ = v214;
                    v614.__r_.__value_.__r.__words[2] = (std::string::size_type)&v220[8 * v219];
                    if (v215)
                      operator delete(v215);
                  }
                  else
                  {
                    *v212 = v213;
                    v214 = (std::string::size_type)(v212 + 1);
                  }
                  v614.__r_.__value_.__l.__size_ = v214;
                  ++v211;
                  v212 = (double *)v214;
                }
                while (v211 < *(_QWORD *)&v603[8]);
              }
              boost::detail::shared_count::~shared_count((unsigned int **)&v602[8]);
            }
            v223 = (void *)v59[1];
            if (v223)
            {
              v59[2] = v223;
              operator delete(v223);
              v59[1] = 0;
              v59[2] = 0;
              v59[3] = 0;
            }
            *(std::string *)(v59 + 1) = v614;
            v2 = v590;
            goto LABEL_564;
          case 4:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v498 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v498, v615);
            v615 = (unint64_t)v498;
            *v498 = 1;
            do
            {
              v499 = __ldaxr(v444);
              v447 = --v499 == 0;
            }
            while (__stlxr(v499, v444));
            goto LABEL_801;
          case 5:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v500 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v500, v615);
            v615 = (unint64_t)v500;
            *v500 = 1;
            do
            {
              v501 = __ldaxr(v444);
              v450 = --v501 == 0;
            }
            while (__stlxr(v501, v444));
            goto LABEL_859;
          case 8:
            v451 = v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v486 = operator new();
            v487 = v615;
            *(_QWORD *)v486 = *(_QWORD *)v615;
            *(_QWORD *)(v486 + 8) = *(_QWORD *)(v487 + 8);
            v488 = *(_QWORD *)(v487 + 16);
            *(_QWORD *)(v486 + 16) = v488;
            if (v488)
            {
              v489 = (unsigned int *)(v488 + 8);
              do
                v490 = __ldxr(v489);
              while (__stxr(v490 + 1, v489));
            }
            v491 = *(_OWORD *)(v487 + 24);
            v492 = *(_OWORD *)(v487 + 40);
            *(_OWORD *)(v486 + 56) = *(_OWORD *)(v487 + 56);
            *(_OWORD *)(v486 + 40) = v492;
            *(_OWORD *)(v486 + 24) = v491;
            v615 = v486;
            *(_QWORD *)v486 = 1;
            do
            {
              v493 = __ldaxr((unint64_t *)v451);
              v460 = --v493 == 0;
            }
            while (__stlxr(v493, (unint64_t *)v451));
LABEL_851:
            if (!v460)
              goto LABEL_864;
            boost::detail::shared_count::~shared_count((unsigned int **)(v451 + 16));
            v535 = (_QWORD *)v451;
            v536 = -235920773;
LABEL_854:
            v576 = v536 | 0x1030C4000000000;
            goto LABEL_863;
          case 9:
            v71 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v72 = (_QWORD *)operator new();
              v73 = v615 + 8;
              *v72 = *(_QWORD *)v615;
              turi::flexible_type_impl::ndarray<double>::ndarray(v72 + 1, v73);
              v615 = (unint64_t)v72;
              *v72 = 1;
              do
              {
                v74 = __ldaxr(v71);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, v71));
              if (!v75)
              {
                v76 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v71);
                *(double *)&v5 = MEMORY[0x219A19A08](v76, 0x1030C407B73B9F7);
              }
            }
            v77 = (_QWORD *)v615;
            turi::flexible_type_impl::get_vec_visitor::operator()((uint64_t *)(v42 + 8), (double **)&v614, v5);
            v78 = (char *)operator new(0x30uLL);
            *((_QWORD *)v78 + 2) = 0;
            *(_QWORD *)v78 = &unk_24D9195E8;
            *((_QWORD *)v78 + 1) = 0;
            *(_OWORD *)(v78 + 24) = *(_OWORD *)&v614.__r_.__value_.__l.__data_;
            v599 = v78 + 24;
            v600 = (std::__shared_weak_count *)v78;
            *((_QWORD *)v78 + 5) = *((_QWORD *)&v614.__r_.__value_.__l + 2);
            memset(&v614, 0, sizeof(v614));
            v79 = *(_QWORD *)(v42 + 40);
            if (v79 == 1)
            {
              v81 = *(_QWORD *)(v42 + 24);
              v80 = *(_QWORD *)(v42 + 32);
              v82 = (uint64_t *)operator new(0x10uLL);
              *v82 = v81;
              v82[1] = v80;
              v612 = v82 + 2;
              v613 = v82 + 2;
            }
            else
            {
              v225 = *(_QWORD *)(v42 + 24);
              v224 = *(_QWORD *)(v42 + 32);
              v82 = (uint64_t *)operator new(0x18uLL);
              *v82 = v225;
              v82[1] = v224;
              v82[2] = v79;
              v612 = v82 + 3;
              v613 = v82 + 3;
            }
            v608 = 0;
            v609 = 0;
            v610 = 0;
            v611 = v82;
            turi::flexible_type_impl::ndarray<double>::ndarray(v602, &v599, (uint64_t)&v611, (uint64_t)&v608, 0);
            v2 = v590;
            if (v608)
            {
              v609 = v608;
              operator delete(v608);
            }
            if (v611)
            {
              v612 = v611;
              operator delete(v611);
            }
            v226 = v600;
            if (v600)
            {
              p_shared_owners = (unint64_t *)&v600->__shared_owners_;
              do
                v228 = __ldaxr(p_shared_owners);
              while (__stlxr(v228 - 1, p_shared_owners));
              if (!v228)
              {
                ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                std::__shared_weak_count::__release_weak(v226);
              }
            }
            if (v614.__r_.__value_.__r.__words[0])
            {
              v614.__r_.__value_.__l.__size_ = v614.__r_.__value_.__r.__words[0];
              operator delete(v614.__r_.__value_.__l.__data_);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v77 + 1), (__int128 *)v602);
            v229 = (void *)v77[3];
            if (v229)
            {
              v77[4] = v229;
              operator delete(v229);
              v77[3] = 0;
              v77[4] = 0;
              v77[5] = 0;
            }
            v230 = (void *)v77[6];
            *(_OWORD *)(v77 + 3) = *(_OWORD *)&v602[16];
            v77[5] = *(_QWORD *)v603;
            *(_OWORD *)&v602[16] = 0uLL;
            *(_QWORD *)v603 = 0;
            if (v230)
            {
              v77[7] = v230;
              operator delete(v230);
              v77[6] = 0;
              v77[7] = 0;
              v77[8] = 0;
              v230 = *(void **)&v602[16];
            }
            *((_OWORD *)v77 + 3) = *(_OWORD *)&v603[8];
            v77[8] = *(_QWORD *)&v603[24];
            memset(&v603[8], 0, 24);
            v77[9] = v604;
            if (v230)
            {
              *(_QWORD *)&v602[24] = v230;
              operator delete(v230);
            }
            v166 = *(std::__shared_weak_count **)&v602[8];
            if (!*(_QWORD *)&v602[8])
              goto LABEL_564;
            v231 = (unint64_t *)(*(_QWORD *)&v602[8] + 8);
            do
              v168 = __ldaxr(v231);
            while (__stlxr(v168 - 1, v231));
            goto LABEL_505;
          default:
            goto LABEL_864;
        }
      case 9:
        v16 = *(_QWORD *)v8;
        v17 = (char ***)(v16 + 8);
        switch(v617)
        {
          case 2:
            v18 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v19 = (_QWORD *)operator new();
              v20 = v615;
              *v19 = *(_QWORD *)v615;
              v21 = (std::string *)(v19 + 1);
              if (*(char *)(v20 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(v20 + 8), *(_QWORD *)(v20 + 16));
              }
              else
              {
                v22 = *(_OWORD *)(v20 + 8);
                v19[3] = *(_QWORD *)(v20 + 24);
                *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
              }
              v615 = (unint64_t)v19;
              *v19 = 1;
              do
              {
                v373 = __ldaxr((unint64_t *)v18);
                v374 = v373 - 1;
              }
              while (__stlxr(v374, (unint64_t *)v18));
              if (!v374)
              {
                if (*(char *)(v18 + 31) < 0)
                  operator delete(*(void **)(v18 + 8));
                MEMORY[0x219A19A08](v18, 0x1012C404EF22A49);
              }
            }
            v234 = v615;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v602);
            turi::flexible_type_impl::ndarray<double>::print(v17, &v602[16]);
            std::stringbuf::str();
            *(_QWORD *)v602 = v593;
            *(_QWORD *)&v602[*(_QWORD *)(v593 - 24)] = v592;
            *(_QWORD *)&v602[16] = v591;
            *(_QWORD *)&v602[24] = MEMORY[0x24BEDB848] + 16;
            if (v606 < 0)
LABEL_428:
              operator delete(v605);
LABEL_429:
            v312 = (void **)(v234 + 8);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v607);
            if (*(char *)(v234 + 31) < 0)
              operator delete(*v312);
            v313 = *(_OWORD *)&v614.__r_.__value_.__l.__data_;
            *(_QWORD *)(v234 + 24) = *((_QWORD *)&v614.__r_.__value_.__l + 2);
            *(_OWORD *)v312 = v313;
            goto LABEL_564;
          case 3:
            v143 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v144 = (_QWORD *)operator new();
              v145 = v615;
              *v144 = *(_QWORD *)v615;
              v144[2] = 0;
              v144[3] = 0;
              v144[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v144 + 1, *(const void **)(v145 + 8), *(_QWORD *)(v145 + 16), (uint64_t)(*(_QWORD *)(v145 + 16) - *(_QWORD *)(v145 + 8)) >> 3);
              v615 = (unint64_t)v144;
              *v144 = 1;
              do
              {
                v146 = __ldaxr(v143);
                v147 = v146 - 1;
              }
              while (__stlxr(v147, v143));
              if (!v147)
              {
                v148 = (void *)v143[1];
                if (v148)
                {
                  v143[2] = (unint64_t)v148;
                  operator delete(v148);
                }
                MEMORY[0x219A19A08](v143, 0x1080C409938AC02);
              }
            }
            v149 = (char *)(v615 + 8);
            if (!*(_QWORD *)(v16 + 72))
            {
              v151 = *(uint64_t **)(v16 + 24);
              v150 = *(uint64_t **)(v16 + 32);
              v152 = *(_QWORD **)(v16 + 8);
              if (v150 == v151 || v152 == 0)
              {
                v314 = 0;
              }
              else
              {
                v314 = 1;
                do
                {
                  v315 = *v151++;
                  v314 *= v315;
                }
                while (v151 != v150);
              }
              if (v314 == (uint64_t)(v152[1] - *v152) >> 3
                && turi::flexible_type_impl::ndarray<double>::last_index((_QWORD *)(v16 + 8)) == ((*v17)[1] - **v17) >> 3)
              {
                if (!turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(v16 + 8)))
                  turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                v30 = *v17;
                if (v149 != (char *)v30)
                {
                  v180 = (uint64_t *)(v30 + 1);
LABEL_195:
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v149, *v30, *v180, (*v180 - (uint64_t)*v30) >> 3);
                }
                goto LABEL_564;
              }
            }
            if (!turi::flexible_type_impl::ndarray<double>::is_valid((_QWORD *)(v16 + 8)))
              turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
            if (turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(v16 + 8)))
            {
              turi::flexible_type_impl::ndarray<double>::ndarray(v602, v16 + 8);
              goto LABEL_495;
            }
            memset(&v614, 0, sizeof(v614));
            v612 = 0;
            v613 = 0;
            v608 = 0;
            v609 = 0;
            v610 = 0;
            v611 = 0;
            turi::flexible_type_impl::ndarray<double>::ndarray(v602, (uint64_t)&v614, (uint64_t)&v611, (uint64_t)&v608, 0);
            if (v608)
            {
              v609 = v608;
              operator delete(v608);
            }
            if (v611)
            {
              v612 = v611;
              operator delete(v611);
            }
            if (v614.__r_.__value_.__r.__words[0])
            {
              v614.__r_.__value_.__l.__size_ = v614.__r_.__value_.__r.__words[0];
              operator delete(v614.__r_.__value_.__l.__data_);
            }
            v604 = 0;
            if (&v602[16] != (_BYTE *)(v16 + 24))
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v602[16], *(char **)(v16 + 24), *(_QWORD *)(v16 + 32), (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3);
            v317 = *(uint64_t **)(v16 + 24);
            v316 = *(uint64_t **)(v16 + 32);
            if (v316 == v317 || !*v17)
            {
              v318 = 0;
            }
            else
            {
              v318 = 1;
              do
              {
                v319 = *v317++;
                v318 *= v319;
              }
              while (v317 != v316);
            }
            std::vector<double>::resize(*(uint64_t *)v602, v318);
            std::vector<unsigned long>::resize((uint64_t)&v603[8], (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3);
            if (*(_QWORD *)&v602[24] == *(_QWORD *)&v602[16] || *(_QWORD *)(*(_QWORD *)v602 + 8) == **(_QWORD **)v602)
              goto LABEL_495;
            std::vector<std::pair<unsigned long,unsigned long>>::vector(&v614, (uint64_t)(*(_QWORD *)(v16 + 56) - *(_QWORD *)(v16 + 48)) >> 3);
            v320 = *(_QWORD *)(v16 + 48);
            v321 = *(_QWORD *)(v16 + 56);
            v322 = (unint64_t *)v614.__r_.__value_.__r.__words[0];
            v323 = v321 - v320;
            if (v321 != v320)
            {
              v324 = 0;
              v325 = v323 >> 3;
              if (v325 <= 1)
                v325 = 1;
              v326 = (_QWORD *)(v614.__r_.__value_.__r.__words[0] + 8);
              do
              {
                *(v326 - 1) = *(_QWORD *)(v320 + 8 * v324);
                *v326 = v324++;
                v326 += 2;
              }
              while (v325 != v324);
            }
            v327 = 126 - 2 * __clz((uint64_t)(v614.__r_.__value_.__l.__size_ - (_QWORD)v322) >> 4);
            if ((unint64_t *)v614.__r_.__value_.__l.__size_ == v322)
              v328 = 0;
            else
              v328 = v327;
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(v614.__r_.__value_.__l.__size_, (unint64_t *)v614.__r_.__value_.__l.__size_, (uint64_t)v322, v322, (uint64_t)&v608, v328, 1);
            v329 = v614.__r_.__value_.__r.__words[0];
            v330 = *(_QWORD *)&v603[8];
            *(_QWORD *)(*(_QWORD *)&v603[8] + 8 * *(_QWORD *)(v614.__r_.__value_.__r.__words[0] + 8)) = 1;
            v331 = *(_QWORD *)(v16 + 56) - *(_QWORD *)(v16 + 48);
            if ((unint64_t)v331 >= 9)
            {
              v332 = v331 >> 3;
              v333 = *(_QWORD *)&v602[16];
              if (v332 <= 2)
                v332 = 2;
              v334 = (uint64_t *)(v329 + 24);
              v335 = v332 - 1;
              do
              {
                v336 = *(_QWORD *)(v333 + 8 * *(v334 - 2)) * *(_QWORD *)(v330 + 8 * *(v334 - 2));
                v337 = *v334;
                v334 += 2;
                *(_QWORD *)(v330 + 8 * v337) = v336;
                --v335;
              }
              while (v335);
            }
            v338 = (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3;
            v608 = 0;
            std::vector<unsigned long>::vector(&v611, v338, &v608);
            v339 = v611;
            v340 = v612;
            v341 = (char *)v612 - (char *)v611;
            v342 = v612 - v611;
            v343 = v342 - 1;
            if (v342 <= 1)
              v344 = 1;
            else
              v344 = v612 - v611;
            v345 = *(uint64_t **)&v603[8];
            v346 = **(_QWORD **)v602;
            while (2)
            {
              if (v340 == v339)
              {
                v354 = 0;
                v355 = *(_QWORD *)(**(_QWORD **)(v16 + 8) + 8 * *(_QWORD *)(v16 + 72));
              }
              else
              {
                v347 = 0;
                v348 = *(uint64_t **)(v16 + 48);
                v349 = v339;
                v350 = v344;
                do
                {
                  v352 = *v349++;
                  v351 = v352;
                  v353 = *v348++;
                  v347 += v353 * v351;
                  --v350;
                }
                while (v350);
                v354 = 0;
                v355 = *(_QWORD *)(**(_QWORD **)(v16 + 8) + 8 * (*(_QWORD *)(v16 + 72) + v347));
                v356 = v339;
                v357 = v345;
                v358 = v344;
                do
                {
                  v360 = *v356++;
                  v359 = v360;
                  v361 = *v357++;
                  v354 += v361 * v359;
                  --v358;
                }
                while (v358);
              }
              *(_QWORD *)(v346 + 8 * v354) = v355;
              v362 = v340 - v339;
              v363 = v342 - 1;
              if (v341 < 1)
                goto LABEL_484;
              v364 = *(_QWORD *)(v16 + 24);
              v365 = v339[v343] + 1;
              v339[v343] = v365;
              if (v365 < *(_QWORD *)(v364 + 8 * v343))
              {
                v362 = 1;
                v363 = v342 - 1;
LABEL_484:
                if ((v363 & 0x8000000000000000) != 0)
                  goto LABEL_491;
LABEL_485:
                if (!v362)
                  goto LABEL_491;
                continue;
              }
              break;
            }
            v366 = v364 - 16;
            v367 = v340 - v339;
            v368 = (unint64_t *)((char *)v339 + (v341 & 0xFFFFFFFFFFFFFFF8) - 16);
            while (1)
            {
              v369 = v367 - 1;
              v368[1] = 0;
              if (v367 - 1 <= 0)
                break;
              v370 = *v368 + 1;
              *v368-- = v370;
              v371 = *(_QWORD *)(v366 + 8 * v367--);
              if (v370 < v371)
              {
                v362 = 1;
                if (((v369 - 1) & 0x8000000000000000) == 0)
                  goto LABEL_485;
                break;
              }
            }
LABEL_491:
            if (v339)
            {
              v612 = v339;
              operator delete(v339);
            }
            if (v614.__r_.__value_.__r.__words[0])
            {
              v614.__r_.__value_.__l.__size_ = v614.__r_.__value_.__r.__words[0];
              operator delete(v614.__r_.__value_.__l.__data_);
            }
LABEL_495:
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v602);
            if (!turi::flexible_type_impl::ndarray<double>::is_full(v602))
              turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
            if (v149 != *(char **)v602)
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v149, **(char ***)v602, *(_QWORD *)(*(_QWORD *)v602 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v602 + 8) - **(_QWORD **)v602) >> 3);
            if (*(_QWORD *)&v603[8])
            {
              *(_QWORD *)&v603[16] = *(_QWORD *)&v603[8];
              operator delete(*(void **)&v603[8]);
            }
            if (*(_QWORD *)&v602[16])
            {
              *(_QWORD *)&v602[24] = *(_QWORD *)&v602[16];
              operator delete(*(void **)&v602[16]);
            }
            v166 = *(std::__shared_weak_count **)&v602[8];
            if (*(_QWORD *)&v602[8])
            {
              v372 = (unint64_t *)(*(_QWORD *)&v602[8] + 8);
              do
                v168 = __ldaxr(v372);
              while (__stlxr(v168 - 1, v372));
LABEL_505:
              if (!v168)
              {
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
              }
            }
            goto LABEL_564;
          case 4:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v539 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v539, v615);
            v615 = (unint64_t)v539;
            *v539 = 1;
            do
            {
              v540 = __ldaxr(v444);
              v447 = --v540 == 0;
            }
            while (__stlxr(v540, v444));
LABEL_801:
            if (!v447)
              goto LABEL_864;
            *(_QWORD *)v602 = v444 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v602);
            goto LABEL_862;
          case 5:
            v444 = (unint64_t *)v615;
            if (*(_QWORD *)v615 == 1)
              goto LABEL_864;
            v577 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v577, v615);
            v615 = (unint64_t)v577;
            *v577 = 1;
            do
            {
              v578 = __ldaxr(v444);
              v450 = --v578 == 0;
            }
            while (__stlxr(v578, v444));
LABEL_859:
            if (!v450)
              goto LABEL_864;
            *(_QWORD *)v602 = v444 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v602);
LABEL_862:
            v535 = v444;
            v576 = 0x1020C405E66F15BLL;
LABEL_863:
            MEMORY[0x219A19A08](v535, v576);
LABEL_864:
            turi::flexible_type_fail(BOOL)::$_0::operator()();
          case 8:
            v110 = v615;
            if (*(_QWORD *)v615 != 1)
            {
              v111 = operator new();
              v112 = v615;
              *(_QWORD *)v111 = *(_QWORD *)v615;
              *(_QWORD *)(v111 + 8) = *(_QWORD *)(v112 + 8);
              v113 = *(_QWORD *)(v112 + 16);
              *(_QWORD *)(v111 + 16) = v113;
              if (v113)
              {
                v114 = (unsigned int *)(v113 + 8);
                do
                  v115 = __ldxr(v114);
                while (__stxr(v115 + 1, v114));
              }
              v116 = *(_OWORD *)(v112 + 24);
              v117 = *(_OWORD *)(v112 + 40);
              *(_OWORD *)(v111 + 56) = *(_OWORD *)(v112 + 56);
              *(_OWORD *)(v111 + 40) = v117;
              *(_OWORD *)(v111 + 24) = v116;
              v615 = v111;
              *(_QWORD *)v111 = 1;
              do
              {
                v118 = __ldaxr((unint64_t *)v110);
                v119 = v118 - 1;
              }
              while (__stlxr(v119, (unint64_t *)v110));
              if (!v119)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v110 + 16));
                MEMORY[0x219A19A08](v110, 0x1030C40F1F0227BLL);
              }
            }
            v120 = v615;
            assert_msg(((*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) & 0xFFFFFFFFFFFFFFF7) == 16, "Cannot convert nd array to image");
            v121 = *(unint64_t **)(v16 + 24);
            v122 = (uint64_t)(*(_QWORD *)(v16 + 32) - (_QWORD)v121) >> 3;
            if (v122 == 3)
            {
              v123 = *v121;
              v124 = v121[1];
              v253 = v121[2];
            }
            else
            {
              if (v122 == 2)
              {
                v123 = *v121;
                v124 = v121[1];
              }
              else
              {
                v123 = 0;
                v124 = 0;
              }
              v253 = 1;
            }
            v255 = v253 == 4 || (v253 & 0xFFFFFFFFFFFFFFFDLL) == 1;
            assert_msg(v255, "Channels must be 1, 3 or 4");
            v256 = v123 * v253 * v124;
            if (!v256)
            {
              turi::image_type::image_type((turi::image_type *)v602, 0, v123, v124, v253, 0, 0, 2);
              goto LABEL_356;
            }
            LOBYTE(v608) = 0;
            std::vector<unsigned char>::vector(&v614, v256, &v608);
            v257 = (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3;
            v608 = 0;
            std::vector<unsigned long>::vector(&v611, v257, &v608);
            v258 = 0;
            v259 = (char *)v611;
            v260 = (char *)v612;
            break;
          case 9:
            v130 = (unint64_t *)v615;
            if (*(_QWORD *)v615 != 1)
            {
              v131 = (_QWORD *)operator new();
              v132 = v615 + 8;
              *v131 = *(_QWORD *)v615;
              turi::flexible_type_impl::ndarray<double>::ndarray(v131 + 1, v132);
              v615 = (unint64_t)v131;
              *v131 = 1;
              do
              {
                v133 = __ldaxr(v130);
                v134 = v133 - 1;
              }
              while (__stlxr(v134, v130));
              if (!v134)
              {
                v135 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v130);
                MEMORY[0x219A19A08](v135, 0x1030C407B73B9F7);
              }
            }
            v136 = v615;
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v615 + 8), (uint64_t *)(v16 + 8));
            if (v136 != v16)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v136 + 24), *(char **)(v16 + 24), *(_QWORD *)(v16 + 32), (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v136 + 48), *(char **)(v16 + 48), *(_QWORD *)(v16 + 56), (uint64_t)(*(_QWORD *)(v16 + 56) - *(_QWORD *)(v16 + 48)) >> 3);
            }
            *(_QWORD *)(v136 + 72) = *(_QWORD *)(v16 + 72);
            goto LABEL_564;
          default:
            goto LABEL_864;
        }
        break;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
    while (1)
    {
      v261 = v260 - v259;
      if (v260 == v259)
      {
        v262 = 0;
      }
      else
      {
        v262 = 0;
        v263 = v261 >> 3;
        v264 = *(uint64_t **)(v16 + 48);
        if (v263 <= 1)
          v263 = 1;
        do
        {
          v266 = *(_QWORD *)v259;
          v259 += 8;
          v265 = v266;
          v267 = *v264++;
          v262 += v267 * v265;
          --v263;
        }
        while (v263);
      }
      *(_BYTE *)(v614.__r_.__value_.__r.__words[0] + v258) = (int)*(double *)(**(_QWORD **)(v16 + 8)
                                                                            + 8 * (*(_QWORD *)(v16 + 72) + v262));
      v259 = (char *)v611;
      v260 = (char *)v612;
      v268 = v612 - v611;
      v269 = v268 - 1;
      if ((char *)v612 - (char *)v611 < 1)
        goto LABEL_349;
      v270 = *(_QWORD *)(v16 + 24);
      v271 = v611[v269] + 1;
      v611[v269] = v271;
      if (v271 >= *(_QWORD *)(v270 + 8 * v269))
        break;
LABEL_348:
      v268 = 1;
LABEL_349:
      if ((v269 & 0x8000000000000000) == 0)
      {
        ++v258;
        if (v268)
          continue;
      }
      goto LABEL_351;
    }
    v272 = (unint64_t *)&v259[8 * v268 - 16];
    v273 = v270 - 16;
    while (1)
    {
      v274 = v268 - 1;
      v272[1] = 0;
      if (v268 - 1 <= 0)
        break;
      v275 = *v272 + 1;
      *v272-- = v275;
      v276 = *(_QWORD *)(v273 + 8 * v268--);
      if (v275 < v276)
      {
        v269 = v274 - 1;
        goto LABEL_348;
      }
    }
LABEL_351:
    turi::image_type::image_type((turi::image_type *)v602, v614.__r_.__value_.__l.__data_, v123, v124, v253, v614.__r_.__value_.__l.__size_ - v614.__r_.__value_.__r.__words[0], 0, 2);
    if (v611)
    {
      v612 = v611;
      operator delete(v611);
    }
    if (v614.__r_.__value_.__r.__words[0])
    {
      v614.__r_.__value_.__l.__size_ = v614.__r_.__value_.__r.__words[0];
      operator delete(v614.__r_.__value_.__l.__data_);
    }
LABEL_356:
    v277 = *(_OWORD *)v602;
    *(_OWORD *)v602 = 0uLL;
    v278 = *(_OWORD *)(v120 + 8);
    *(_OWORD *)(v120 + 8) = v277;
    *(_OWORD *)&v614.__r_.__value_.__l.__data_ = v278;
    boost::detail::shared_count::~shared_count((unsigned int **)&v614.__r_.__value_.__l.__size_);
    v279 = *(_OWORD *)&v602[16];
    v280 = *(_OWORD *)v603;
    *(_OWORD *)(v120 + 56) = *(_OWORD *)&v603[16];
    *(_OWORD *)(v120 + 40) = v280;
    *(_OWORD *)(v120 + 24) = v279;
    boost::detail::shared_count::~shared_count((unsigned int **)&v602[8]);
LABEL_564:
    v5 = v615;
    *(_QWORD *)(*v2 + 8 * v7++) = v615;
    v6 = *v594;
  }
  while (v7 < (v594[1] - *v594) >> 4);
  switch(v617)
  {
    case 2:
      v411 = (unint64_t *)v615;
      do
      {
        v412 = __ldaxr(v411);
        v413 = v412 - 1;
      }
      while (__stlxr(v413, v411));
      if (!v413)
      {
        v414 = v615;
        if (v615)
        {
          if (*(char *)(v615 + 31) < 0)
            operator delete(*(void **)(v615 + 8));
          v415 = v414;
          v416 = 0x1012C404EF22A49;
          goto LABEL_657;
        }
      }
      break;
    case 3:
      v428 = (unint64_t *)v615;
      do
      {
        v429 = __ldaxr(v428);
        v430 = v429 - 1;
      }
      while (__stlxr(v430, v428));
      if (!v430)
      {
        v431 = v615;
        if (v615)
        {
          v432 = *(void **)(v615 + 8);
          if (v432)
          {
            *(_QWORD *)(v615 + 16) = v432;
            operator delete(v432);
          }
          v415 = v431;
          v416 = 0x1080C409938AC02;
          goto LABEL_657;
        }
      }
      break;
    case 4:
      v417 = (unint64_t *)v615;
      do
      {
        v418 = __ldaxr(v417);
        v419 = v418 - 1;
      }
      while (__stlxr(v419, v417));
      if (!v419)
      {
        v420 = v615;
        if (v615)
        {
          *(_QWORD *)v602 = v615 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v602);
          goto LABEL_650;
        }
      }
      break;
    case 5:
      v433 = (unint64_t *)v615;
      do
      {
        v434 = __ldaxr(v433);
        v435 = v434 - 1;
      }
      while (__stlxr(v435, v433));
      if (!v435)
      {
        v420 = v615;
        if (v615)
        {
          *(_QWORD *)v602 = v615 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v602);
LABEL_650:
          v415 = v420;
          v416 = 0x1020C405E66F15BLL;
          goto LABEL_657;
        }
      }
      break;
    case 8:
      v436 = (unint64_t *)v615;
      do
      {
        v437 = __ldaxr(v436);
        v438 = v437 - 1;
      }
      while (__stlxr(v438, v436));
      if (!v438)
      {
        v439 = v615;
        if (v615)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v615 + 16));
          v415 = v439;
          v427 = -235920773;
          goto LABEL_656;
        }
      }
      break;
    case 9:
      v421 = (unint64_t *)v615;
      do
      {
        v422 = __ldaxr(v421);
        v423 = v422 - 1;
      }
      while (__stlxr(v423, v421));
      if (!v423)
      {
        v424 = v615;
        if (v615)
        {
          v425 = *(void **)(v615 + 48);
          if (v425)
          {
            *(_QWORD *)(v615 + 56) = v425;
            operator delete(v425);
          }
          v426 = *(void **)(v424 + 24);
          if (v426)
          {
            *(_QWORD *)(v424 + 32) = v426;
            operator delete(v426);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v424 + 8);
          v415 = v424;
          v427 = 2071181815;
LABEL_656:
          v416 = v427 | 0x1030C4000000000;
LABEL_657:
          MEMORY[0x219A19A08](v415, v416);
        }
      }
      break;
    default:
      return;
  }
}

void sub_217F4F2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  _QWORD *v33;
  uint64_t v34;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v36 = (void *)v33[42];
  if (v36)
  {
    v33[43] = v36;
    operator delete(v36);
  }
  v33[42] = &a27;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
  switch(*(_BYTE *)(v34 - 124))
  {
    case 2:
      v37 = (unint64_t *)v33[45];
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_41;
      v40 = v33[45];
      if (!v40)
        goto LABEL_41;
      if (*(char *)(v40 + 31) < 0)
        operator delete(*(void **)(v40 + 8));
      v41 = (_QWORD *)v40;
      v42 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v52 = (unint64_t *)v33[45];
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (v54)
        goto LABEL_41;
      v55 = (_QWORD *)v33[45];
      if (!v55)
        goto LABEL_41;
      v56 = (void *)v55[1];
      if (v56)
      {
        v55[2] = v56;
        operator delete(v56);
      }
      v41 = v55;
      v42 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v43 = (unint64_t *)v33[45];
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_41;
      v46 = (_QWORD *)v33[45];
      if (!v46)
        goto LABEL_41;
      v33[39] = v46 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 184));
      goto LABEL_33;
    case 5:
      v57 = (unint64_t *)v33[45];
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (v59)
        goto LABEL_41;
      v46 = (_QWORD *)v33[45];
      if (!v46)
        goto LABEL_41;
      v33[39] = v46 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 184));
LABEL_33:
      v41 = v46;
      v42 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v60 = (unint64_t *)v33[45];
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (v62)
        goto LABEL_41;
      v63 = v33[45];
      if (!v63)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v63 + 16));
      v41 = (_QWORD *)v63;
      v51 = -235920773;
      goto LABEL_39;
    case 9:
      v47 = (unint64_t *)v33[45];
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_41;
      v50 = (_QWORD *)v33[45];
      if (!v50)
        goto LABEL_41;
      v41 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v50);
      v51 = 2071181815;
LABEL_39:
      v42 = v51 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v41, v42);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

uint64_t turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  int v13;
  size_t v14;
  size_t v15;
  unsigned int v16;
  double v17;
  double *v18;
  double *v19;
  unint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  double v31;
  uint64_t *v32;
  uint64_t *v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  double v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  char v88;
  _QWORD v89[5];
  char *v90;
  uint64_t *v91;

  v2 = *(_QWORD **)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  if (v3 - *a2 != v2[1] - *v2)
    return 0;
  if (v3 == v4)
    return 1;
  v6 = 0;
LABEL_4:
  v7 = *v2 + 16 * v6;
  v8 = (unsigned __int8 *)(v4 + 16 * v6);
  switch(*(_BYTE *)(v7 + 12))
  {
    case 0:
      switch(v8[12])
      {
        case 0u:
          if (*(_QWORD *)v8 != *(_QWORD *)v7)
            return 0;
          goto LABEL_104;
        case 1u:
          v9 = *(double *)v8;
          v10 = *(_QWORD *)v7;
          goto LABEL_73;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(_QWORD *)v7 != (uint64_t)(*(_QWORD *)v8 << 8) >> 8 || *((_DWORD *)v8 + 2))
            return 0;
          goto LABEL_104;
        default:
          goto LABEL_111;
      }
    case 1:
      switch(v8[12])
      {
        case 0u:
          v9 = *(double *)v7;
          v10 = *(_QWORD *)v8;
LABEL_73:
          v75 = (double)v10;
          goto LABEL_74;
        case 1u:
          v9 = *(double *)v8;
          v75 = *(double *)v7;
LABEL_74:
          if (v9 != v75)
            return 0;
          goto LABEL_104;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          v76 = vabdd_f64((double)*((int *)v8 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v8 << 8) >> 8), *(double *)v7);
          goto LABEL_82;
        default:
          goto LABEL_111;
      }
    case 2:
      v11 = v8[12];
      if (v11 == 2)
      {
        v12 = *(double *)v8;
        v13 = *(char *)(*(_QWORD *)v8 + 31);
        v14 = *(unsigned __int8 *)(*(_QWORD *)v8 + 31);
        if (v13 < 0)
          v15 = *(_QWORD *)(*(_QWORD *)&v12 + 16);
        else
          v15 = v14;
        v77 = *(double *)v7;
        if (*(char *)(*(_QWORD *)&v77 + 31) < 0)
          v78 = *(_QWORD *)(*(_QWORD *)&v77 + 16);
        else
          v78 = *(unsigned __int8 *)(*(_QWORD *)&v77 + 31);
        if (v15 == v78)
        {
          v79 = (unsigned __int8 *)(*(_QWORD *)&v12 + 8);
          if ((v14 & 0x80) != 0)
            v79 = *(unsigned __int8 **)v79;
          v80 = (unsigned __int8 *)(*(_QWORD *)&v77 + 8);
          if ((*(_BYTE *)(*(_QWORD *)&v77 + 31) & 0x80) != 0)
            v80 = *(unsigned __int8 **)v80;
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp(v79, v80, v15))
              goto LABEL_104;
          }
          else
          {
            if (!v15)
              goto LABEL_104;
            while (*v79 == *v80)
            {
              ++v79;
              ++v80;
              if (!--v15)
                goto LABEL_104;
            }
          }
        }
        return 0;
      }
      if (v11 <= 9 && v11 != 2)
        return 0;
      goto LABEL_111;
    case 3:
      v16 = v8[12];
      if (v16 == 3)
      {
        v17 = *(double *)v7;
        v18 = *(double **)(*(_QWORD *)v8 + 8);
        v19 = *(double **)(*(_QWORD *)v8 + 16);
        v20 = v19 - v18;
        v22 = *(_QWORD *)&v17 + 8;
        v21 = *(double **)(*(_QWORD *)&v17 + 8);
        if (v20 == (uint64_t)(*(_QWORD *)(v22 + 8) - (_QWORD)v21) >> 3)
        {
          if (v19 == v18)
            goto LABEL_104;
          v23 = v20 <= 1 ? 1 : v19 - v18;
          if (*v18 == *v21)
          {
            v24 = 1;
            do
            {
              v25 = v24;
              if (v23 == v24)
                break;
              v26 = v18[v24];
              v27 = v21[v24++];
            }
            while (v26 == v27);
            if (v25 >= v20)
              goto LABEL_104;
          }
        }
        return 0;
      }
      if (v16 <= 9 && v16 != 3)
        return 0;
      goto LABEL_111;
    case 4:
      v28 = *(_QWORD *)v7 + 8;
      v90 = &v88;
      v91 = (uint64_t *)v28;
      v29 = v8[12];
      if (v29 == 4)
      {
        if ((turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>(&v90, *(_QWORD *)v8 + 8) & 1) != 0)goto LABEL_104;
      }
      else if (v29 > 9 || v29 == 4)
      {
LABEL_111:
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      }
      return 0;
    case 5:
      v30 = v8[12];
      if (v30 == 5)
      {
        v31 = *(double *)v7;
        v32 = *(uint64_t **)(*(_QWORD *)v8 + 8);
        v33 = *(uint64_t **)(*(_QWORD *)v8 + 16);
        if ((char *)v33 - (char *)v32 == *(_QWORD *)(*(_QWORD *)&v31 + 16) - *(_QWORD *)(*(_QWORD *)&v31 + 8))
        {
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)&v90, v32, v33);
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v89, *(uint64_t **)(*(_QWORD *)&v31 + 8), *(uint64_t **)(*(_QWORD *)&v31 + 16));
          v34 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(&v90, v89);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v89);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&v90);
          if ((v34 & 1) != 0)
            goto LABEL_104;
        }
        return 0;
      }
      if (v30 <= 9 && v30 != 5)
        return 0;
      goto LABEL_111;
    case 6:
      switch(v8[12])
      {
        case 0u:
          if (*(_QWORD *)v8 != (uint64_t)(*(_QWORD *)v7 << 8) >> 8 || *(_DWORD *)(v7 + 8))
            return 0;
          goto LABEL_104;
        case 1u:
          v76 = vabdd_f64(*(double *)v8, (double)*(int *)(v7 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v7 << 8) >> 8));
LABEL_82:
          if (v76 >= 0.0000005)
            return 0;
          goto LABEL_104;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(_QWORD *)v7 ^ *(_QWORD *)v8) & 0xFFFFFFFFFFFFFFLL) != 0 || *((_DWORD *)v8 + 2) != *(_DWORD *)(v7 + 8))
            return 0;
          goto LABEL_104;
        default:
          goto LABEL_111;
      }
    case 7:
      v35 = v8[12];
      if (v35 == 7)
        goto LABEL_104;
      if (v35 <= 9 && v35 != 7)
        return 0;
      goto LABEL_111;
    case 8:
      v36 = v8[12];
      if (v36 == 8)
      {
        if (turi::image_type::operator==(*(_QWORD *)v8 + 8, *(_QWORD *)v7 + 8))
          goto LABEL_104;
        return 0;
      }
      if (v36 <= 9 && v36 != 8)
        return 0;
      goto LABEL_111;
    case 9:
      v37 = v8[12];
      if (v37 == 9)
      {
        v38 = *(double *)v7;
        v39 = *(_QWORD **)v8;
        if (*(_QWORD *)v7 == *(_QWORD *)v8)
          goto LABEL_104;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v39 + 1), *(_QWORD *)&v38 + 8))
          return 0;
        v41 = (char *)v39[3];
        v40 = (char *)v39[4];
        v42 = v40 - v41;
        if (v40 == v41)
          goto LABEL_104;
        if (!v39[1])
          goto LABEL_104;
        v43 = 1;
        do
        {
          v44 = *(_QWORD *)v41;
          v41 += 8;
          v43 *= v44;
        }
        while (v41 != v40);
        if (!v43)
          goto LABEL_104;
        v89[0] = 0;
        std::vector<unsigned long>::vector(&v90, v42 >> 3, v89);
        v45 = (uint64_t *)v90;
        v46 = v91;
        v47 = **(_QWORD **)(*(_QWORD *)&v38 + 8);
        v48 = (char *)v91 - v90;
        v49 = ((char *)v91 - v90) >> 3;
        v50 = v49 - 1;
        if (v49 <= 1)
          v51 = 1;
        else
          v51 = ((char *)v91 - v90) >> 3;
        while (1)
        {
          if (v46 == v45)
          {
            v59 = 0;
            v60 = *(double *)(*(_QWORD *)v39[1] + 8 * v39[9]);
          }
          else
          {
            v52 = 0;
            v53 = (uint64_t *)v39[6];
            v54 = v45;
            v55 = v51;
            do
            {
              v57 = *v54++;
              v56 = v57;
              v58 = *v53++;
              v52 += v58 * v56;
              --v55;
            }
            while (v55);
            v59 = 0;
            v60 = *(double *)(*(_QWORD *)v39[1] + 8 * (v39[9] + v52));
            v61 = *(uint64_t **)(*(_QWORD *)&v38 + 48);
            v62 = v45;
            v63 = v51;
            do
            {
              v65 = *v62++;
              v64 = v65;
              v66 = *v61++;
              v59 += v66 * v64;
              --v63;
            }
            while (v63);
          }
          v67 = *(double *)(v47 + 8 * (*(_QWORD *)(*(_QWORD *)&v38 + 72) + v59));
          if (v60 != v67)
          {
LABEL_68:
            if (v45)
            {
              v91 = v45;
              operator delete(v45);
            }
            if (v60 == v67)
              goto LABEL_104;
            return 0;
          }
          v68 = v49;
          v69 = v49 - 1;
          if (v48 >= 1)
          {
            v70 = v39[3];
            v71 = v45[v50] + 1;
            v45[v50] = v71;
            v72 = (v48 & 0xFFFFFFFFFFFFFFF8) - 16;
            v69 = v49 - 1;
            if (v71 >= *(_QWORD *)(v70 + 8 * v50))
            {
              while (1)
              {
                *(uint64_t *)((char *)v45 + v72 + 8) = 0;
                if (v69 <= 0)
                  break;
                --v69;
                v73 = *(uint64_t *)((char *)v45 + v72) + 1;
                *(uint64_t *)((char *)v45 + v72) = v73;
                v74 = *(_QWORD *)(v70 + v72);
                v72 -= 8;
                if (v73 < v74)
                {
                  v68 = 1;
                  goto LABEL_66;
                }
              }
              v91 = v45;
              operator delete(v45);
LABEL_104:
              ++v6;
              v4 = *a2;
              if (v6 >= (a2[1] - *a2) >> 4)
                return 1;
              goto LABEL_4;
            }
            v68 = 1;
            v69 = v49 - 1;
          }
LABEL_66:
          if (v69 < 0 || !v68)
            goto LABEL_68;
        }
      }
      if (v37 >= 9)
        goto LABEL_111;
      return 0;
    default:
      goto LABEL_111;
  }
}

void sub_217F4FE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::multiprecision::detail::check_shift_range<int>(uint64_t result)
{
  std::logic_error v1;

  if ((result & 0x80000000) != 0)
  {
    std::logic_error::logic_error(&v1, "Can not shift by a negative value.");
    v1.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    boost::exception_detail::throw_exception_<std::out_of_range>(&v1, (uint64_t)"void boost::multiprecision::detail::check_shift_range(V, const mpl::false_ &, const mpl::true_ &) [V = int]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/multiprecision/detail/number_base.hpp", 1510);
  }
  return result;
}

void sub_217F4FEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::exception_detail::throw_exception_<std::out_of_range>(std::logic_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  std::logic_error v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  std::logic_error::logic_error(&v7, a1);
  v7.__vftable = (std::logic_error_vtbl *)&unk_24D91BB20;
  v8 = &unk_24D91BB48;
  v9 = 0;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<std::out_of_range>>((uint64_t)&v7);
}

void sub_217F4FF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  a11 = &unk_24D918C48;
  if (a12)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
      a12 = 0;
  }
  std::logic_error::~logic_error(&a10);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<std::out_of_range>>(uint64_t a1)
{
  void *exception;
  uint64_t v3;
  std::logic_error v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v4, (const std::logic_error *)a1);
  v4.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = &unk_24D918C48;
  v6 = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 48);
  v4.__vftable = (std::logic_error_vtbl *)&unk_24D91BB20;
  v5 = &unk_24D91BB48;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone_impl((uint64_t)exception, (uint64_t)&v4);
}

void sub_217F50068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  std::logic_error::~logic_error(&a10);
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91BA80;
  *(_QWORD *)(a1 + 16) = &unk_24D91BAB8;
  *(_QWORD *)(a1 + 56) = &unk_24D91BAF0;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91BA80;
  *(_QWORD *)(a1 + 16) = &unk_24D91BAB8;
  *(_QWORD *)(a1 + 56) = &unk_24D91BAF0;
  return a1;
}

void sub_217F50188(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F50200(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F50260(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_217F50330(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash128_visitor>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  switch(*((_BYTE *)a1 + 12))
  {
    case 0:
      v3 = *a1;
      goto LABEL_4;
    case 1:
      v3 = *a1;
LABEL_4:
      v4 = 0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47));
      v5 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * (v3 ^ 0x6E626E7774E95A48)) ^ ((0xC6A4A7935BD1E995 * (v3 ^ 0x6E626E7774E95A48)) >> 47))) ^ v4);
      goto LABEL_23;
    case 2:
      v6 = *a1;
      v7 = *(char *)(*a1 + 31);
      if (v7 < 0)
      {
        v8 = *(uint64_t **)(v6 + 8);
        v9 = *(_QWORD *)(v6 + 16);
      }
      else
      {
        v8 = (uint64_t *)(v6 + 8);
        v9 = v7;
      }
      if (v9 < 0x10)
      {
        v43 = 0xC3A5C85C97CB3127;
        v44 = 0xB492B66FBE98F273;
      }
      else
      {
        v43 = *v8;
        v44 = v8[1] - 0x3C5A37A36834CED9;
        v8 += 2;
        v9 -= 16;
      }
      *a2 = turi::cityhash_local::CityHash128WithSeed(v8, v9, v43, v44);
      a2[1] = v45;
      return;
    case 3:
      v10 = *a1;
      v11 = *(uint64_t **)(*a1 + 8);
      v12 = *(_QWORD *)(v10 + 16);
      goto LABEL_19;
    case 4:
      turi::flexible_type_impl::city_hash128_visitor::operator()();
      return;
    case 5:
      turi::flexible_type_impl::city_hash128_visitor::operator()((uint64_t *)(*a1 + 8), a2);
      return;
    case 6:
      v13 = *a1;
      v14 = *((int *)a1 + 2);
      v15 = 0xC6A4A7935BD1E995 * ((*a1 << 8 >> 8) ^ 0x6E626E7774E95A48);
      v16 = (0xC6A4A7935BD1E995 * (*a1 << 8 >> 8)) ^ ((0xC6A4A7935BD1E995 * (*a1 << 8 >> 8)) >> 47);
      v17 = (0xC6A4A7935BD1E995 * (v15 ^ (v15 >> 47))) ^ (0xC6A4A7935BD1E995 * v16);
      boost::multiprecision::detail::check_shift_range<int>(64);
      v18 = -25;
      if (v13 >> 56 < 0)
        v18 = 25;
      v19 = v18 + (v13 >> 56);
      v20 = (0xC6A4A7935BD1E995 * v19) ^ ((0xC6A4A7935BD1E995 * v19) >> 47);
      v21 = (0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * (v19 ^ 0x6E626E7774E95A48)) ^ ((0xC6A4A7935BD1E995
                                                                      * (v19 ^ 0x6E626E7774E95A48)) >> 47))) ^ (0xC6A4A7935BD1E995 * v20);
      boost::multiprecision::detail::check_shift_range<int>(64);
      v22 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x23994FF200000000 * v17) | ((0x309B56691CCA7F9 * v17) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
      v23 = 5
          * (v22
           + __ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v16) | ((0x60004CFCBE6C6FEBLL * v16) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
      v24 = 5
          * (v23
           + __ROR8__(v22 ^ (0x4CF5AD432745937FLL * ((0x23994FF200000000 * v21) | ((0x309B56691CCA7F9 * v21) >> 31))), 27))+ 1390208809;
      v25 = 5 * (v24 + __ROR8__(v23 ^ (0xBD3698860E184F87 * v20), 31)) + 944331445;
      boost::multiprecision::detail::check_shift_range<int>(64);
      v26 = 0xC6A4A7935BD1E995 * (v14 ^ 0x6E626E7774E95A48);
      v27 = (0xC6A4A7935BD1E995 * v14) ^ ((0xC6A4A7935BD1E995 * v14) >> 47);
      v28 = (0xC6A4A7935BD1E995 * (v26 ^ (v26 >> 47))) ^ (0xC6A4A7935BD1E995 * v27);
      boost::multiprecision::detail::check_shift_range<int>(64);
      v29 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v25) | ((0x87C37B91114253D5 * v25) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
      v30 = 5
          * (v29
           + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v24) | ((unint64_t)(0x4CF5AD432745937FLL * v24) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
      v4 = 5
         * (v30
          + __ROR8__(v29 ^ (0x4CF5AD432745937FLL * ((0x23994FF200000000 * v28) | ((0x309B56691CCA7F9 * v28) >> 31))), 27))+ 1390208809;
      v5 = 5 * (v4 + __ROR8__(v30 ^ (0xBD3698860E184F87 * v27), 31)) + 944331445;
      goto LABEL_23;
    case 7:
      *a2 = 0;
      a2[1] = 0;
      return;
    case 8:
      v31 = *a1;
      v32 = *(unsigned int **)(*a1 + 16);
      v46 = v32;
      if (v32)
      {
        v33 = v32 + 2;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v35 = *(_OWORD *)(v31 + 24);
      v36 = *(_OWORD *)(v31 + 40);
      v49 = *(_OWORD *)(v31 + 56);
      v48 = v36;
      v47 = v35;
      *a2 = 0;
      a2[1] = 0;
      boost::detail::shared_count::~shared_count(&v46);
      return;
    case 9:
      v37 = *(_QWORD *)(*a1 + 8);
      v11 = *(uint64_t **)v37;
      v12 = *(_QWORD *)(v37 + 8);
LABEL_19:
      v38 = v12 - (_QWORD)v11;
      v39 = v38 - 16;
      if (v38 < 0x10)
      {
        v39 = v38;
        v40 = 0xC3A5C85C97CB3127;
        v41 = 0xB492B66FBE98F273;
      }
      else
      {
        v40 = *v11;
        v41 = v11[1] - 0x3C5A37A36834CED9;
        v11 += 2;
      }
      v4 = turi::cityhash_local::CityHash128WithSeed(v11, v39, v40, v41);
      v5 = v42;
LABEL_23:
      boost::multiprecision::detail::check_shift_range<int>(64);
      *a2 = v4;
      a2[1] = v5;
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

unint64_t turi::cityhash_local::CityHash128WithSeed(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;

  if (a2 <= 0x7F)
  {
    if (a2 > 0x10)
    {
      v64 = 0x9DDFEA08EB382D69 * ((*(uint64_t *)((char *)a1 + a2 - 8) - 0x4B6D499041670D8DLL) ^ a3);
      v11 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (a3 ^ (v64 >> 47) ^ v64)) ^ ((0x9DDFEA08EB382D69 * (a3 ^ (v64 >> 47) ^ v64)) >> 47));
      v65 = 0x9DDFEA08EB382D69
          * ((v11 + *(uint64_t *)((char *)a1 + a2 - 16)) ^ ((0x9DDFEA08EB382D69
                                                          * ((v11 + *(uint64_t *)((char *)a1 + a2 - 16)) ^ (a4 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v11 + *(uint64_t *)((char *)a1 + a2 - 16)) ^ (a4 + a2))));
      v66 = 0x9DDFEA08EB382D69 * (v65 ^ (v65 >> 47));
      v4 = v66 + a3;
      v67 = a2 + 16;
      do
      {
        v68 = *a1;
        v69 = a1[1];
        a1 += 2;
        v4 = 0xB492B66FBE98F273
           * ((0xB492B66FBE98F273 * ((0xB492B66FBE98F273 * v68) ^ ((0xB492B66FBE98F273 * v68) >> 47))) ^ v4);
        a4 ^= v4;
        v11 = 0xB492B66FBE98F273
            * ((0xB492B66FBE98F273 * ((0xB492B66FBE98F273 * v69) ^ ((0xB492B66FBE98F273 * v69) >> 47))) ^ v11);
        v66 ^= v11;
        v67 -= 16;
      }
      while (v67 > 0x20);
      goto LABEL_21;
    }
    v4 = 0xB492B66FBE98F273 * ((0xB492B66FBE98F273 * a3) ^ ((0xB492B66FBE98F273 * a3) >> 47));
    v5 = 0x9AE16A3B2F90404FLL;
    if (a2 > 7)
    {
      v6 = 2 * a2 - 0x651E95C4D06FBFB1;
      v7 = *a1;
      v8 = *a1 - 0x651E95C4D06FBFB1;
      v9 = v8 + __ROR8__(*(uint64_t *)((char *)a1 + a2 - 8), 37) * v6;
      v10 = (__ROR8__(v8, 25) + *(uint64_t *)((char *)a1 + a2 - 8)) * v6;
      v11 = 0xB492B66FBE98F273 * a4
          + (((v10 ^ (((v10 ^ (unint64_t)v9) * v6) >> 47) ^ ((v10 ^ v9) * v6)) * v6) ^ (((v10 ^ (((v10 ^ (unint64_t)v9) * v6) >> 47) ^ ((v10 ^ v9) * v6))
                                                                                              * v6) >> 47))
          * v6;
LABEL_20:
      v66 = (v7 + v4) ^ ((v7 + v4) >> 47);
LABEL_21:
      v73 = 0x9DDFEA08EB382D69
          * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v4)));
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (a4 ^ ((0x9DDFEA08EB382D69 * (v66 ^ a4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v66 ^ a4)))) ^ ((0x9DDFEA08EB382D69 * (a4 ^ ((0x9DDFEA08EB382D69 * (v66 ^ a4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v66 ^ a4)))) >> 47))) ^ (0x9DDFEA08EB382D69 * (v73 ^ (v73 >> 47)));
    }
    if (a2 < 4)
    {
      if (!a2)
      {
LABEL_19:
        v11 = v5 - 0x4B6D499041670D8DLL * a4;
        v7 = v11;
        goto LABEL_20;
      }
      v72 = (0xC3A5C85C97CB3127 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
    }
    else
    {
      v5 = 2 * a2 - 0x651E95C4D06FBFB1;
      v70 = *(unsigned int *)((char *)a1 + a2 - 4);
      v71 = ((a2 + 8 * *(unsigned int *)a1) ^ v70) * v5;
      v72 = (v70 ^ (v71 >> 47) ^ v71) * v5;
    }
    v5 *= v72 ^ (v72 >> 47);
    goto LABEL_19;
  }
  v12 = 0xB492B66FBE98F273 * a2;
  v13 = *a1 - 0x4B6D499041670D8DLL * __ROR8__(a4 ^ 0xB492B66FBE98F273, 49);
  v14 = a1[1] - 0x4B6D499041670D8DLL * __ROR8__(v13, 42);
  v15 = a3 - 0x4B6D499041670D8DLL * __ROR8__(a4 - 0x4B6D499041670D8DLL * a2, 35);
  v16 = 0xB492B66FBE98F273 * __ROR8__(a1[11] + a3, 53);
  v17 = a1 + 8;
  for (i = a2; i > 0x7F; i -= 128)
  {
    v19 = *(v17 - 7);
    v20 = *(v17 - 2);
    v21 = *(v17 - 1);
    v22 = (0xB492B66FBE98F273 * __ROR8__(v13 + a3 + a4 + v19, 37)) ^ v16;
    v23 = *(v17 - 3);
    v24 = v23 + v13 - 0x4B6D499041670D8DLL * __ROR8__(a4 + v14 + v20, 42);
    v25 = 0xB492B66FBE98F273 * __ROR8__(v15 + v12, 33);
    v26 = *(v17 - 6);
    v27 = *(v17 - 5);
    v28 = *(v17 - 8) - 0x4B6D499041670D8DLL * v14;
    v29 = v28 + v19 + v26;
    v30 = __ROR8__(v29, 44);
    v31 = v29 + v27;
    v32 = v30 + v28 + __ROR8__(v28 + v15 + v27 + v22, 21);
    v33 = v25 + v16 + *(v17 - 4);
    v34 = __ROR8__(v33 + v23 + v20, 44);
    v35 = v33 + v23 + v20 + v21;
    v36 = v34 + v33 + __ROR8__(v24 + v26 + v33 + v21, 21);
    v37 = v17[1];
    v38 = v17[6];
    v39 = v17[7];
    v12 = (0xB492B66FBE98F273 * __ROR8__(v24 + v25 + v31 + v37, 37)) ^ v36;
    v40 = v17[5];
    a4 = v40 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v32 + v24 + v38, 42);
    v41 = v35 + v22;
    v42 = v12 + v35;
    v44 = v17[2];
    v43 = v17[3];
    v45 = *v17 - 0x4B6D499041670D8DLL * v32;
    v46 = v42 + v45 + v43;
    v47 = v45 + v37 + v44;
    v13 = v47 + v43;
    v48 = __ROR8__(v47, 44) + v45;
    a3 = 0xB492B66FBE98F273 * __ROR8__(v41, 33);
    v14 = v48 + __ROR8__(v46, 21);
    v49 = a3 + v36 + v17[4];
    v15 = v49 + v40 + v38 + v39;
    v16 = __ROR8__(v49 + v40 + v38, 44) + v49 + __ROR8__(v44 + v49 + v39 + a4, 21);
    v17 += 16;
  }
  v50 = a3 - 0x3C5A37A36834CED9 * __ROR8__(v13 + v12, 49);
  v51 = __ROR8__(v16, 37) - 0x3C5A37A36834CED9 * a4;
  v52 = __ROR8__(v15, 27) - 0x3C5A37A36834CED9 * v12;
  v53 = 9 * v15;
  v54 = 0xC3A5C85C97CB3127 * v13;
  if (i)
  {
    v55 = 0;
    v56 = (uint64_t *)((char *)a1 + a2 - 16);
    do
    {
      v55 += 32;
      v51 = v14 - 0x3C5A37A36834CED9 * __ROR8__(v51 + v50, 42);
      v57 = v56[1];
      v53 += *v56;
      v50 = v53 - 0x3C5A37A36834CED9 * v50;
      v58 = *(v56 - 2);
      v59 = *(v56 - 1);
      v52 += v16 + v58;
      v16 += v54;
      v60 = v58 + v54 + v52;
      v14 = __ROR8__(v59 + *v56 + v60, 44) + v60 + __ROR8__(v57 + v14 + v60, 21);
      v54 = 0xC3A5C85C97CB3127 * (v59 + *v56 + v60 + v57);
      v56 -= 4;
    }
    while (v55 < i);
  }
  v61 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v54 ^ ((0x9DDFEA08EB382D69 * (v54 ^ v50)) >> 47) ^ (0x9DDFEA08EB382D69 * (v54 ^ v50)))) ^ ((0x9DDFEA08EB382D69 * (v54 ^ ((0x9DDFEA08EB382D69 * (v54 ^ v50)) >> 47) ^ (0x9DDFEA08EB382D69 * (v54 ^ v50)))) >> 47));
  v62 = 0x9DDFEA08EB382D69
      * (v53 ^ ((0x9DDFEA08EB382D69 * ((v51 + v52) ^ v53)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v51 + v52) ^ v53)));
  return 0x9DDFEA08EB382D69
       * (((0x9DDFEA08EB382D69
          * (v16 ^ ((0x9DDFEA08EB382D69 * ((v61 + v14) ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v61 + v14) ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v16 ^ ((0x9DDFEA08EB382D69 * ((v61 + v14) ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v61 + v14) ^ v16)))) >> 47))
        + (v62 ^ (v62 >> 47)));
}

uint64_t *boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::subtract_times@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *result;
  v4 = *a2;
  if ((unint64_t)(*result - 0x7FFFFFFFFFFFFFFELL) >= 3)
  {
    if ((unint64_t)(v4 - 0x7FFFFFFFFFFFFFFELL) >= 3)
    {
      v6 = v3 - v4;
      goto LABEL_15;
    }
    if (v4 == 0x7FFFFFFFFFFFFFFELL)
      goto LABEL_13;
  }
  else if (v3 == 0x7FFFFFFFFFFFFFFELL || v4 == 0x7FFFFFFFFFFFFFFELL)
  {
    goto LABEL_13;
  }
  v6 = 0x8000000000000000;
  if (v3 == 0x8000000000000000 || (v6 = 0x7FFFFFFFFFFFFFFFLL, v3 == 0x7FFFFFFFFFFFFFFFLL))
  {
    if (v4 == v6)
LABEL_13:
      v6 = 0x7FFFFFFFFFFFFFFELL;
  }
  else if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = 0x8000000000000000;
  }
  else if (v4 != 0x8000000000000000)
  {
    v7 = v3 - v4;
    v8 = 0x7FFFFFFFFFFFFFFELL;
    if (v7 == 0x8000000000000000)
      v8 = 0x8000000000000000;
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v6 = v8;
  }
LABEL_15:
  *a3 = v6;
  return result;
}

unint64_t *boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000ll,(unsigned short)6,long long>>::operator+@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *result;
  if (*result - 0x7FFFFFFFFFFFFFFELL >= 3)
  {
    v5 = *a2;
    if (*a2 - 0x7FFFFFFFFFFFFFFELL >= 3)
      goto LABEL_14;
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFELL;
    if (v3 == 0x7FFFFFFFFFFFFFFELL)
      goto LABEL_16;
    v5 = *a2;
  }
  v4 = 0x7FFFFFFFFFFFFFFELL;
  if (v5 == 0x7FFFFFFFFFFFFFFELL)
    goto LABEL_16;
  if (v3 == 0x8000000000000000)
  {
    v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_10:
    if (v5 == v6)
      v4 = 0x7FFFFFFFFFFFFFFELL;
    else
      v4 = *result;
    goto LABEL_16;
  }
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = 0x8000000000000000;
    goto LABEL_10;
  }
  v4 = 0x8000000000000000;
  if (v5 != 0x8000000000000000)
  {
    v4 = v5;
    if (v5 != 0x7FFFFFFFFFFFFFFFLL)
LABEL_14:
      v4 = v5 + v3;
  }
LABEL_16:
  *a3 = v4;
  return result;
}

uint64_t boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::time_input_facet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::date_input_facet(a1, a2, a3);
  *v4 = &unk_24D91BB68;
  std::string::basic_string[abi:ne180100]<0>(v4 + 45, boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::default_time_duration_format[0]);
  return a1;
}

void sub_217F50F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::date_input_facet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v4;
  __int128 v5;
  const std::locale *v6;

  *(_QWORD *)a1 = &unk_24D91BBD0;
  *(_QWORD *)(a1 + 8) = a3 - 1;
  v4 = (__int128 *)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
    *v4 = v5;
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 40), "%b");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 64), "%a");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 88), "%Y");
  v6 = std::locale::classic();
  boost::date_time::format_date_parser<boost::gregorian::date,char>::format_date_parser((std::string *)(a1 + 112), v4, v6);
  boost::date_time::date_generator_parser<boost::gregorian::date,char>::date_generator_parser(a1 + 264);
  boost::date_time::period_parser<boost::gregorian::date,char>::period_parser(a1 + 296, 1, "/", "[", ")", "]");
  boost::date_time::special_values_parser<boost::gregorian::date,char>::special_values_parser(a1 + 328);
  return a1;
}

void sub_217F510A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__shared_count *v10;

  std::__shared_count::~__shared_count(v10);
  _Unwind_Resume(a1);
}

void boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24D91BBD0;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 328, *(_QWORD **)(a1 + 336));
  v2 = (void **)(a1 + 296);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 264, *(_QWORD **)(a1 + 272));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 232, *(_QWORD **)(a1 + 240));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 200, *(_QWORD **)(a1 + 208));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 168, *(_QWORD **)(a1 + 176));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(a1);
  JUMPOUT(0x219A19A08);
}

void boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::~time_input_facet(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D91BB68;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(a1);
}

{
  *(_QWORD *)a1 = &unk_24D91BB68;
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(a1);
  JUMPOUT(0x219A19A08);
}

void boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::set_iso_format()
{
  JUMPOUT(0x219A19390);
}

void boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::set_iso_extended_format()
{
  JUMPOUT(0x219A19390);
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::~format_date_parser(uint64_t a1)
{
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 120, *(_QWORD **)(a1 + 128));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 56, *(_QWORD **)(a1 + 64));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::set_iso_format()
{
  JUMPOUT(0x219A19390);
}

void boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::set_iso_extended_format()
{
  JUMPOUT(0x219A19390);
}

std::string *boost::date_time::format_date_parser<boost::gregorian::date,char>::format_date_parser(std::string *this, __int128 *a2, const std::locale *a3)
{
  __int128 v5;
  uint64_t v7[3];
  uint64_t v8[3];
  uint64_t v9[3];
  uint64_t v10[3];
  void **v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  boost::date_time::gather_month_strings<char>(a3, 1, (uint64_t)v10);
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&this[1], v10, 1);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  boost::date_time::gather_month_strings<char>(a3, 0, (uint64_t)v9);
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&this[2].__r_.__value_.__l.__size_, v9, 1);
  v11 = (void **)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  boost::date_time::gather_weekday_strings<char>(a3, 1, (uint64_t)v8);
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&this[3].__r_.__value_.__r.__words[2], v8, 0);
  v11 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  boost::date_time::gather_weekday_strings<char>(a3, 0, (uint64_t)v7);
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&this[5], v7, 0);
  v11 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  return this;
}

void sub_217F514D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 56) = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 56));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v4, *(_QWORD **)(v1 + 96));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v3, *(_QWORD **)(v1 + 64));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v2, *(_QWORD **)(v1 + 32));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_217F5155C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 56) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 56));
  JUMPOUT(0x217F51544);
}

void sub_217F51570()
{
  JUMPOUT(0x217F51544);
}

void boost::date_time::gather_month_strings<char>(const std::locale *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const std::ios_base *v9;
  const std::locale::facet *v10;
  std::ios_base::fmtflags v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  std::string::size_type v24;
  _QWORD v25[11];
  char v26;
  _BYTE v27[168];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  char v32;
  char v33[8];
  std::__split_buffer<std::string> v34;

  strcpy(&v33[4], "%b");
  strcpy(v33, "%B");
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v5 = std::string::basic_string[abi:ne180100]<0>(&v31, &v33[4]);
  if ((a2 & 1) == 0)
    MEMORY[0x219A19390](v5, v33);
  v6 = 0;
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)&v27[152] = 0u;
  v7 = *MEMORY[0x24BEDB800];
  v21 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8 = MEMORY[0x24BEDB848] + 16;
  do
  {
    LODWORD(v28) = v6;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
    std::locale::use_facet(a1, MEMORY[0x24BEDB598]);
    v9 = (const std::ios_base *)((char *)v25 + *(_QWORD *)(v25[0] - 24));
    if (v9[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v9);
      v10 = std::locale::use_facet((const std::locale *)&v34, MEMORY[0x24BEDB350]);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale((std::locale *)&v34);
      v9[1].__fmtflags_ = v11;
    }
    std::time_put<char,std::ostreambuf_iterator<char>>::put();
    std::stringbuf::str();
    v13 = *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a3 + 16);
    if (v13 >= v12)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a3) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a3) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v34.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (v17)
        v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a3 + 16, v17);
      else
        v18 = 0;
      v19 = v18 + v14;
      v34.__first_ = v18;
      v34.__begin_ = v19;
      v34.__end_cap_.__value_ = &v18[v17];
      v19->__r_.__value_.__r.__words[2] = v24;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v24 = 0;
      *(_OWORD *)__p = 0uLL;
      v34.__end_ = v19 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v34);
      v20 = *(_QWORD *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&v34);
      *(_QWORD *)(a3 + 8) = v20;
    }
    else
    {
      *(_QWORD *)(v13 + 16) = v24;
      *(_OWORD *)v13 = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 8) = v13 + 24;
    }
    v25[0] = v7;
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v7 - 24)) = v21;
    v25[1] = v8;
    if (v26 < 0)
      operator delete((void *)v25[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](v27);
    ++v6;
  }
  while (v6 != 12);
  if (v32 < 0)
    operator delete(v31);
}

void sub_217F51880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 137) < 0)
    operator delete(*(void **)(v21 - 160));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void boost::date_time::gather_weekday_strings<char>(const std::locale *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const std::ios_base *v9;
  const std::locale::facet *v10;
  std::ios_base::fmtflags v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  std::string::size_type v24;
  _QWORD v25[11];
  char v26;
  _BYTE v27[168];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  char v32;
  char v33[8];
  std::__split_buffer<std::string> v34;

  strcpy(&v33[4], "%a");
  strcpy(v33, "%A");
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v5 = std::string::basic_string[abi:ne180100]<0>(&v31, &v33[4]);
  if ((a2 & 1) == 0)
    MEMORY[0x219A19390](v5, v33);
  v6 = 0;
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)&v27[152] = 0u;
  v7 = *MEMORY[0x24BEDB800];
  v21 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8 = MEMORY[0x24BEDB848] + 16;
  do
  {
    DWORD2(v28) = v6;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
    std::locale::use_facet(a1, MEMORY[0x24BEDB598]);
    v9 = (const std::ios_base *)((char *)v25 + *(_QWORD *)(v25[0] - 24));
    if (v9[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v9);
      v10 = std::locale::use_facet((const std::locale *)&v34, MEMORY[0x24BEDB350]);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale((std::locale *)&v34);
      v9[1].__fmtflags_ = v11;
    }
    std::time_put<char,std::ostreambuf_iterator<char>>::put();
    std::stringbuf::str();
    v13 = *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a3 + 16);
    if (v13 >= v12)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a3) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a3) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v34.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (v17)
        v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a3 + 16, v17);
      else
        v18 = 0;
      v19 = v18 + v14;
      v34.__first_ = v18;
      v34.__begin_ = v19;
      v34.__end_cap_.__value_ = &v18[v17];
      v19->__r_.__value_.__r.__words[2] = v24;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v24 = 0;
      *(_OWORD *)__p = 0uLL;
      v34.__end_ = v19 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v34);
      v20 = *(_QWORD *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&v34);
      *(_QWORD *)(a3 + 8) = v20;
    }
    else
    {
      *(_QWORD *)(v13 + 16) = v24;
      *(_OWORD *)v13 = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 8) = v13 + 24;
    }
    v25[0] = v7;
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v7 - 24)) = v21;
    v25[1] = v8;
    if (v26 < 0)
      operator delete((void *)v25[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](v27);
    ++v6;
  }
  while (v6 != 7);
  if (v32 < 0)
    operator delete(v31);
}

void sub_217F51C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 137) < 0)
    operator delete(*(void **)(v21 - 160));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::string_parse_tree<char>::string_parse_tree(uint64_t a1, uint64_t *a2, __int16 a3)
{
  uint64_t v4;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  std::locale v15;
  std::string __p;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_WORD *)(a1 + 24) = -1;
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = v4 + 24 * v7;
      MEMORY[0x219A19828](&v15);
      v10 = *(char *)(v9 + 23);
      v11 = v10 < 0;
      if (v10 >= 0)
        v12 = (char *)v9;
      else
        v12 = *(char **)v9;
      v13 = *(unsigned __int8 *)(v9 + 23);
      if (v11)
        v13 = *(_QWORD *)(v9 + 8);
      std::string::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>>(&__p, v12, &v15, &v12[v13]);
      std::locale::~locale(&v15);
      boost::date_time::string_parse_tree<char>::insert(a1, (uint64_t *)&__p, v8 + a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v7 = ++v8;
      v4 = *a2;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) != v8);
  }
  return a1;
}

void sub_217F51D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

void boost::date_time::string_parse_tree<char>::insert(uint64_t a1, uint64_t *a2, __int16 a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  __int16 v26;
  _BYTE v27[8];
  _QWORD **v28;
  _QWORD *v29;
  uint64_t v30;
  __int16 v31;

  v4 = *((char *)a2 + 23);
  v5 = *((unsigned __int8 *)a2 + 23);
  v6 = v4 < 0;
  v7 = a2[1];
  if (v4 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = a2[1];
  if (v8)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      if (v6)
        v5 = v7;
      v14 = v5 - 1;
      if (v13 == 1)
      {
        if (v14 == v12)
        {
          if (v6)
            v15 = (uint64_t *)*a2;
          else
            v15 = a2;
          v24 = 0;
          v25 = 0;
          v23 = &v24;
          v26 = a3;
          v27[0] = *((_BYTE *)v15 + v12);
          v29 = 0;
          v30 = 0;
          v28 = &v29;
          v31 = a3;
          v16 = std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(a1, (uint64_t)v27);
        }
        else
        {
          if (v6)
            v19 = (uint64_t *)*a2;
          else
            v19 = a2;
          v24 = 0;
          v25 = 0;
          v23 = &v24;
          v26 = -1;
          v27[0] = *((_BYTE *)v19 + v12);
          v29 = 0;
          v30 = 0;
          v28 = &v29;
          v31 = -1;
          v16 = std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(a1, (uint64_t)v27);
        }
      }
      else
      {
        v17 = (uint64_t)(v3 + 5);
        if (v14 == v12)
        {
          if (v6)
            v18 = (uint64_t *)*a2;
          else
            v18 = a2;
          v24 = 0;
          v25 = 0;
          v23 = &v24;
          v26 = a3;
          v27[0] = *((_BYTE *)v18 + v12);
          v29 = 0;
          v30 = 0;
          v28 = &v29;
          v31 = a3;
          v16 = std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(v17, (uint64_t)v27);
        }
        else
        {
          if (v6)
            v20 = (uint64_t *)*a2;
          else
            v20 = a2;
          v24 = 0;
          v25 = 0;
          v23 = &v24;
          v26 = -1;
          v27[0] = *((_BYTE *)v20 + v12);
          v29 = 0;
          v30 = 0;
          v28 = &v29;
          v31 = -1;
          v16 = std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(v17, (uint64_t)v27);
        }
      }
      v3 = v16;
      std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&v28, v29);
      std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&v23, v24);
      v12 = v13;
      v5 = *((unsigned __int8 *)a2 + 23);
      v6 = *((char *)a2 + 23) < 0;
      v7 = a2[1];
      if (*((char *)a2 + 23) >= 0)
        v21 = *((unsigned __int8 *)a2 + 23);
      else
        v21 = a2[1];
    }
    while (v21 > v13++);
  }
}

void sub_217F51FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v16;

  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v16, a16);
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void std::string::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>>(std::string *a1, char *a2, std::locale *this, char *a4)
{
  char *v6;
  std::locale::id *v8;
  char v9;
  const std::locale::facet *v10;
  std::string::value_type v11;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a4)
  {
    v6 = a2;
    v8 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v9 = *v6;
      v10 = std::locale::use_facet(this, v8);
      v11 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v10->__vftable[1].__on_zero_shared)(v10, v9);
      std::string::push_back(a1, v11);
      ++v6;
    }
    while (v6 != a4);
  }
}

void sub_217F5205C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_217F52078(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__construct_node<std::pair<char const,boost::date_time::string_parse_tree<char>>>(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((char *)v7 + 32) >= *((char *)v4 + 32))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

_BYTE *std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__construct_node<std::pair<char const,boost::date_time::string_parse_tree<char>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *result;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v5 = a1 + 8;
  result = operator new(0x48uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[32] = *(_BYTE *)a2;
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)result + 5) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)result + 6) = v8;
  v9 = result + 48;
  v10 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)result + 7) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 8) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *((_QWORD *)result + 5) = v9;
  }
  *((_WORD *)result + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a2 + 5, a2[6]);
    operator delete(a2);
  }
}

uint64_t boost::date_time::date_generator_parser<boost::gregorian::date,char>::date_generator_parser(uint64_t a1)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  __int128 v19;
  char v20;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_WORD *)(a1 + 24) = -1;
  std::string::basic_string[abi:ne180100]<0>(&v19, "first");
  std::string::basic_string[abi:ne180100]<0>(v17, "second");
  std::string::basic_string[abi:ne180100]<0>(v15, "third");
  std::string::basic_string[abi:ne180100]<0>(v13, "fourth");
  std::string::basic_string[abi:ne180100]<0>(v11, "fifth");
  std::string::basic_string[abi:ne180100]<0>(v9, "last");
  std::string::basic_string[abi:ne180100]<0>(v7, "before");
  std::string::basic_string[abi:ne180100]<0>(v5, "after");
  std::string::basic_string[abi:ne180100]<0>(__p, "of");
  boost::date_time::date_generator_parser<boost::gregorian::date,char>::element_strings(a1, &v19, (uint64_t)v17, (uint64_t)v15, (uint64_t)v13, (uint64_t)v11, (uint64_t)v9, (uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete((void *)v19);
  return a1;
}

void sub_217F52378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  if (*(char *)(v42 - 81) < 0)
    operator delete(*(void **)(v42 - 104));
  if (*(char *)(v42 - 57) < 0)
    operator delete(*(void **)(v42 - 80));
  if (*(char *)(v42 - 33) < 0)
    operator delete(*(void **)(v42 - 56));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v41, *(_QWORD **)(v41 + 8));
  _Unwind_Resume(a1);
}

void sub_217F52460()
{
  JUMPOUT(0x217F5244CLL);
}

void boost::date_time::date_generator_parser<boost::gregorian::date,char>::element_strings(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::string *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  __int128 *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::string v38;
  __int128 **v39;
  _QWORD *v40;
  uint64_t v41;
  __int16 v42;
  __int128 *v43;
  void *v44;
  unint64_t v45;
  std::string *v46;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, a2);
  v18 = v17;
  v44 = v17;
  if ((unint64_t)v17 >= v45)
  {
    v20 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)a3);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      v19 = *(_OWORD *)a3;
      v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
    }
    v20 = v18 + 1;
  }
  v44 = v20;
  if ((unint64_t)v20 >= v45)
  {
    v22 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)a4);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      v21 = *(_OWORD *)a4;
      v20->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    }
    v22 = v20 + 1;
  }
  v44 = v22;
  if ((unint64_t)v22 >= v45)
  {
    v24 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)a5);
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    }
    else
    {
      v23 = *(_OWORD *)a5;
      v22->__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 16);
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    }
    v24 = v22 + 1;
  }
  v44 = v24;
  if ((unint64_t)v24 >= v45)
  {
    v26 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)a6);
  }
  else
  {
    if (*(char *)(a6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
    }
    else
    {
      v25 = *(_OWORD *)a6;
      v24->__r_.__value_.__r.__words[2] = *(_QWORD *)(a6 + 16);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
    }
    v26 = v24 + 1;
  }
  v44 = v26;
  if ((unint64_t)v26 >= v45)
  {
    v28 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)a7);
  }
  else
  {
    if (*(char *)(a7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
    }
    else
    {
      v27 = *(_OWORD *)a7;
      v26->__r_.__value_.__r.__words[2] = *(_QWORD *)(a7 + 16);
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
    }
    v28 = v26 + 1;
  }
  v44 = v28;
  if ((unint64_t)v28 >= v45)
  {
    v30 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)a8);
  }
  else
  {
    if (*(char *)(a8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
    }
    else
    {
      v29 = *(_OWORD *)a8;
      v28->__r_.__value_.__r.__words[2] = *(_QWORD *)(a8 + 16);
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    }
    v30 = v28 + 1;
  }
  v44 = v30;
  if ((unint64_t)v30 >= v45)
  {
    v32 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)a9);
  }
  else
  {
    if (*(char *)(a9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
    }
    else
    {
      v31 = *(_OWORD *)a9;
      v30->__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
    }
    v32 = v30 + 1;
  }
  v44 = v32;
  if ((unint64_t)v32 >= v45)
  {
    v34 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)a10);
  }
  else
  {
    if (*(char *)(a10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)a10, *(_QWORD *)(a10 + 8));
    }
    else
    {
      v33 = *(_OWORD *)a10;
      v32->__r_.__value_.__r.__words[2] = *(_QWORD *)(a10 + 16);
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
    }
    v34 = (__int128 *)&v32[1];
  }
  v44 = v34;
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, v43, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v43) >> 3));
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&v39, (uint64_t *)&v38, 0);
  v35 = a1 + 8;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  v36 = v40;
  *(_QWORD *)a1 = v39;
  *(_QWORD *)(a1 + 8) = v36;
  v37 = v41;
  *(_QWORD *)(a1 + 16) = v41;
  if (v37)
  {
    v36[2] = v35;
    v39 = (__int128 **)&v40;
    v40 = 0;
    v41 = 0;
    v36 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v35;
  }
  *(_WORD *)(a1 + 24) = v42;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&v39, v36);
  v46 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v39 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_217F52810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::period_parser<boost::gregorian::date,char>::period_parser(uint64_t a1, int a2, char *__s, char *a4, char *a5, char *a6)
{
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  std::string *v41;
  std::string *v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  std::string *v53;
  std::string *v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  void *__p[2];
  std::string::size_type v60;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 >= v10)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(_QWORD *)a1) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)a1) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v16)
      v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v16);
    else
      v17 = 0;
    v18 = v17 + v13;
    __v.__first_ = v17;
    __v.__begin_ = v18;
    __v.__end_cap_.__value_ = &v17[v16];
    v19 = *(_OWORD *)__p;
    v18->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
    __p[1] = 0;
    v60 = 0;
    __p[0] = 0;
    __v.__end_ = v18 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v20 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v21 = SHIBYTE(v60);
    *(_QWORD *)(a1 + 8) = v20;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v12 = *(_OWORD *)__p;
    *(_QWORD *)(v11 + 16) = v60;
    *(_OWORD *)v11 = v12;
    *(_QWORD *)(a1 + 8) = v11 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a4);
  v23 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  if (v23 >= v22)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(_QWORD *)a1) >> 3);
    v26 = v25 + 1;
    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(_QWORD *)a1) >> 3);
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0x555555555555555)
      v28 = 0xAAAAAAAAAAAAAAALL;
    else
      v28 = v26;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v28)
      v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v28);
    else
      v29 = 0;
    v30 = v29 + v25;
    __v.__first_ = v29;
    __v.__begin_ = v30;
    __v.__end_cap_.__value_ = &v29[v28];
    v31 = *(_OWORD *)__p;
    v30->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
    __p[1] = 0;
    v60 = 0;
    __p[0] = 0;
    __v.__end_ = v30 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v32 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v33 = SHIBYTE(v60);
    *(_QWORD *)(a1 + 8) = v32;
    if (v33 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v24 = *(_OWORD *)__p;
    *(_QWORD *)(v23 + 16) = v60;
    *(_OWORD *)v23 = v24;
    *(_QWORD *)(a1 + 8) = v23 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  v35 = *(_QWORD *)(a1 + 8);
  v34 = *(_QWORD *)(a1 + 16);
  if (v35 >= v34)
  {
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(_QWORD *)a1) >> 3);
    v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(_QWORD *)a1) >> 3);
    if (2 * v39 > v38)
      v38 = 2 * v39;
    if (v39 >= 0x555555555555555)
      v40 = 0xAAAAAAAAAAAAAAALL;
    else
      v40 = v38;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v40)
      v41 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v40);
    else
      v41 = 0;
    v42 = v41 + v37;
    __v.__first_ = v41;
    __v.__begin_ = v42;
    __v.__end_cap_.__value_ = &v41[v40];
    v43 = *(_OWORD *)__p;
    v42->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
    __p[1] = 0;
    v60 = 0;
    __p[0] = 0;
    __v.__end_ = v42 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v44 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v45 = SHIBYTE(v60);
    *(_QWORD *)(a1 + 8) = v44;
    if (v45 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v36 = *(_OWORD *)__p;
    *(_QWORD *)(v35 + 16) = v60;
    *(_OWORD *)v35 = v36;
    *(_QWORD *)(a1 + 8) = v35 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a6);
  v47 = *(_QWORD *)(a1 + 8);
  v46 = *(_QWORD *)(a1 + 16);
  if (v47 >= v46)
  {
    v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *(_QWORD *)a1) >> 3);
    v50 = v49 + 1;
    if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - *(_QWORD *)a1) >> 3);
    if (2 * v51 > v50)
      v50 = 2 * v51;
    if (v51 >= 0x555555555555555)
      v52 = 0xAAAAAAAAAAAAAAALL;
    else
      v52 = v50;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v52)
      v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v52);
    else
      v53 = 0;
    v54 = v53 + v49;
    __v.__first_ = v53;
    __v.__begin_ = v54;
    __v.__end_cap_.__value_ = &v53[v52];
    v55 = *(_OWORD *)__p;
    v54->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
    __p[1] = 0;
    v60 = 0;
    __p[0] = 0;
    __v.__end_ = v54 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v56 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v57 = SHIBYTE(v60);
    *(_QWORD *)(a1 + 8) = v56;
    if (v57 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v48 = *(_OWORD *)__p;
    *(_QWORD *)(v47 + 16) = v60;
    *(_OWORD *)v47 = v48;
    *(_QWORD *)(a1 + 8) = v47 + 24;
  }
  return a1;
}

void sub_217F52CFC(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t boost::date_time::special_values_parser<boost::gregorian::date,char>::special_values_parser(uint64_t a1)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  __int128 v11;
  char v12;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_WORD *)(a1 + 24) = -1;
  std::string::basic_string[abi:ne180100]<0>(&v11, "not-a-date-time");
  std::string::basic_string[abi:ne180100]<0>(v9, "-infinity");
  std::string::basic_string[abi:ne180100]<0>(v7, "+infinity");
  std::string::basic_string[abi:ne180100]<0>(v5, "minimum-date-time");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximum-date-time");
  boost::date_time::special_values_parser<boost::gregorian::date,char>::sv_strings(a1, &v11, (uint64_t)v9, (uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete((void *)v11);
  return a1;
}

void sub_217F52E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v27, *(_QWORD **)(v27 + 8));
  _Unwind_Resume(a1);
}

void boost::date_time::special_values_parser<boost::gregorian::date,char>::sv_strings(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::string v24;
  __int128 **v25;
  _QWORD *v26;
  uint64_t v27;
  __int16 v28;
  __int128 *v29;
  void *v30;
  unint64_t v31;
  std::string *v32;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v11 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, a2);
  v12 = v11;
  v30 = v11;
  if ((unint64_t)v11 >= v31)
  {
    v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, (__int128 *)a3);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      v13 = *(_OWORD *)a3;
      v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    v14 = v12 + 1;
  }
  v30 = v14;
  if ((unint64_t)v14 >= v31)
  {
    v16 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, (__int128 *)a4);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      v15 = *(_OWORD *)a4;
      v14->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v16 = v14 + 1;
  }
  v30 = v16;
  if ((unint64_t)v16 >= v31)
  {
    v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, (__int128 *)a5);
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    }
    else
    {
      v17 = *(_OWORD *)a5;
      v16->__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 16);
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    }
    v18 = v16 + 1;
  }
  v30 = v18;
  if ((unint64_t)v18 >= v31)
  {
    v20 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, (__int128 *)a6);
  }
  else
  {
    if (*(char *)(a6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
    }
    else
    {
      v19 = *(_OWORD *)a6;
      v18->__r_.__value_.__r.__words[2] = *(_QWORD *)(a6 + 16);
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
    }
    v20 = (__int128 *)&v18[1];
  }
  v30 = v20;
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v29, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v29) >> 3));
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&v25, (uint64_t *)&v24, 0);
  v21 = a1 + 8;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  v22 = v26;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v22;
  v23 = v27;
  *(_QWORD *)(a1 + 16) = v27;
  if (v23)
  {
    v22[2] = v21;
    v25 = (__int128 **)&v26;
    v26 = 0;
    v27 = 0;
    v22 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v21;
  }
  *(_WORD *)(a1 + 24) = v28;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&v25, v22);
  v32 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v25 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_217F5313C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(int a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  switch(a1)
  {
    case 1:
      LODWORD(v4) = 0;
      v1 = 0x8000000000000000;
      goto LABEL_5;
    case 2:
      LODWORD(v4) = -1;
      v1 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_5;
    case 3:
      LODWORD(v4) = 2232400;
      v5 = 0;
      goto LABEL_8;
    case 4:
      v4 = 86400000000;
      v3 = 1;
      boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator-(&v4, &v3, &v5);
      LODWORD(v4) = 5373484;
      goto LABEL_8;
    default:
      LODWORD(v4) = -2;
      v1 = 0x7FFFFFFFFFFFFFFELL;
LABEL_5:
      v5 = v1;
LABEL_8:
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v6, (unsigned int *)&v4, (uint64_t *)&v5);
      return v6;
  }
}

