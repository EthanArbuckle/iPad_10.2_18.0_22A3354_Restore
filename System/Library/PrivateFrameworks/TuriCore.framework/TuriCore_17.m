void sub_21855ADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, pthread_mutex_t *a12, uint64_t a13, pthread_mutex_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40,void *a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  void *v52;
  int v53;

  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (SLOBYTE(STACK[0x287]) < 0)
  {
    operator delete((void *)STACK[0x270]);
    if ((v53 & 1) == 0)
    {
LABEL_8:
      if (a51 < 0)
        operator delete(a46);
      turi::table_printer::~table_printer((turi::table_printer *)&STACK[0x3C0]);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a52);
      _Unwind_Resume(a1);
    }
  }
  else if (!v53)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v52);
  goto LABEL_8;
}

void turi::supervised::get_coefficients_as_sframe(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X2>, turi::sframe *a4@<X8>)
{
  unsigned int v5;
  std::string *v6;
  uint64_t v7;
  __int128 v8;
  std::string *end;
  std::vector<std::string>::pointer v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  unsigned int v19;
  std::vector<std::string>::pointer v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::vector<std::string>::pointer v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::string *v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::vector<std::string>::pointer v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::string *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  char v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  _BYTE *v58;
  uint64_t v59;
  char v60;
  _BYTE *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  size_t v66;
  void *v67;
  char *v68;
  char *v69;
  _BYTE *v70;
  _BYTE *v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  size_t v78;
  void *v79;
  char *v80;
  _BYTE *v81;
  char v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  const std::string *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  std::string::size_type v110;
  std::string::size_type v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::string::size_type v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  std::string::size_type v120;
  void *v121;
  void *v122;
  unsigned int v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::string::size_type v127;
  void *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  std::string::size_type v135;
  uint64_t *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unsigned int v141;
  unint64_t v142;
  uint64_t *v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  turi::flexible_type_impl *v149;
  std::string *v150;
  uint64_t *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  int v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  std::string::size_type v161;
  std::string::size_type v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  uint64_t *v166;
  uint64_t v167;
  BOOL v168;
  int v169;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  void **v177;
  void **v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  void **v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  void **v187;
  void *v188;
  void *v189;
  unsigned int v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  void **v194;
  void *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  void **v202;
  std::__split_buffer<std::string>::pointer first;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  std::string::size_type v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  std::string::size_type v211;
  void *v212;
  void *v213;
  unsigned int v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  std::string::size_type v218;
  void *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  std::string::size_type v226;
  uint64_t v227;
  uint64_t i;
  std::__split_buffer<std::string>::pointer v229;
  std::string::value_type *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t *v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t *v244;
  void *v245;
  void *v246;
  unsigned int v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t *v251;
  void *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t *v259;
  unsigned int v260;
  int v261;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  std::__split_buffer<std::string>::pointer v266;
  std::string::value_type *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t *v272;
  uint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t *v281;
  void *v282;
  void *v283;
  unsigned int v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t *v288;
  void *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t *v296;
  uint64_t v297;
  int v298;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  std::__split_buffer<std::string>::pointer v307;
  unint64_t *data;
  unint64_t v309;
  unint64_t v310;
  std::string::size_type v311;
  _QWORD *v312;
  uint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  std::string::size_type v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t v320;
  _QWORD *v321;
  void *v322;
  void *v323;
  unsigned int v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t v327;
  std::string::size_type v328;
  void *v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t v335;
  std::string::size_type v336;
  std::string::size_type v337;
  int v338;
  unint64_t *v340;
  unint64_t v341;
  uint64_t *v342;
  std::__split_buffer<std::string>::pointer v343;
  std::string::value_type *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t *v348;
  unint64_t *v349;
  uint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t *v358;
  void *v359;
  void *v360;
  unsigned int v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t *v365;
  void *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t *v373;
  uint64_t v374;
  int v375;
  unint64_t *v377;
  unint64_t v378;
  uint64_t v379;
  std::__split_buffer<std::string>::pointer v380;
  std::string::value_type *v381;
  unint64_t *v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t *v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t *v395;
  void *v396;
  void *v397;
  unsigned int v398;
  unint64_t *v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t *v402;
  void *v403;
  unint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t *v410;
  uint64_t v411;
  int v412;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  std::__split_buffer<std::string>::pointer v417;
  std::string::value_type *v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t *v422;
  unint64_t *v423;
  uint64_t v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t v431;
  unsigned int v432;
  unint64_t *v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t *v436;
  void *v437;
  unint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t *v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t *v444;
  unsigned int v445;
  int v446;
  unint64_t *v448;
  unint64_t v449;
  uint64_t v450;
  unint64_t v451;
  unint64_t v452;
  std::__split_buffer<std::string>::pointer v453;
  unint64_t *v454;
  unint64_t v455;
  unint64_t v456;
  std::string::size_type v457;
  _QWORD *v458;
  uint64_t v459;
  unint64_t *v460;
  unint64_t v461;
  unint64_t v462;
  std::string::size_type v463;
  unint64_t *v464;
  unint64_t v465;
  unint64_t v466;
  _QWORD *v467;
  void *v468;
  void *v469;
  unsigned int v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t v473;
  std::string::size_type v474;
  void *v475;
  unint64_t *v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t v481;
  std::string::size_type v482;
  std::string::size_type v483;
  int v484;
  unint64_t *v486;
  unint64_t v487;
  uint64_t *v488;
  std::__split_buffer<std::string>::pointer v489;
  std::string::value_type *v490;
  unint64_t *v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t *v494;
  unint64_t *v495;
  uint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t *v504;
  void *v505;
  void *v506;
  unsigned int v507;
  unint64_t *v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t *v511;
  void *v512;
  unint64_t *v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t *v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t *v519;
  uint64_t v520;
  int v521;
  unint64_t *v523;
  unint64_t v524;
  _QWORD *v525;
  uint64_t v526;
  _QWORD *v527;
  uint64_t v528;
  __int128 *v529;
  uint64_t v530;
  uint64_t v532;
  std::string *v533;
  std::string *v534;
  std::string *v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  void *v548;
  uint64_t v549;
  _BYTE *v550;
  std::vector<std::string> v551;
  std::__split_buffer<std::string> __v;
  void *__p;
  char v554;
  uint64_t v555;
  std::string v556;
  void **v557;
  int v558;
  char v559;
  __int128 v560;
  std::string::size_type v561;
  __int128 *v562;
  _BYTE v563[24];
  _BYTE *v564;
  _BYTE v565[24];
  _BYTE *v566;
  uint64_t v567;

  v567 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)((*a2)[3] + 24);
  v540 = a3[1];
  turi::sframe::sframe(a4);
  memset(&v551, 0, sizeof(v551));
  std::string::basic_string[abi:ne180100]<0>(&v560, "name");
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v551.__end_cap_;
  v6 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v551.__end_cap_, 1uLL);
  __v.__first_ = v6;
  __v.__begin_ = v6;
  __v.__end_cap_.__value_ = &v6[v7];
  v8 = v560;
  v6->__r_.__value_.__r.__words[2] = v561;
  *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
  v561 = 0;
  v560 = 0uLL;
  __v.__end_ = v6 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v551, &__v);
  end = v551.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v551.__end_ = end;
  if (SHIBYTE(v561) < 0)
    operator delete((void *)v560);
  std::string::basic_string[abi:ne180100]<0>(&v560, "index");
  v10 = v551.__end_;
  if (v551.__end_ >= v551.__end_cap_.__value_)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v551.__end_ - (char *)v551.__begin_) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3) > v13)
      v13 = 0x5555555555555556 * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3) >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v13;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v551.__end_cap_;
    if (v14)
      v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v551.__end_cap_, v14);
    else
      v15 = 0;
    v16 = v15 + v12;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = v560;
    v16->__r_.__value_.__r.__words[2] = v561;
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    v561 = 0;
    v560 = 0uLL;
    __v.__end_ = v16 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v551, &__v);
    v18 = v551.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v551.__end_ = v18;
    if (SHIBYTE(v561) < 0)
      operator delete((void *)v560);
  }
  else
  {
    v11 = v560;
    v551.__end_->__r_.__value_.__r.__words[2] = v561;
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    v551.__end_ = v10 + 1;
  }
  v19 = (v5 < 7) & (0x4Au >> v5);
  if (v19)
  {
    std::string::basic_string[abi:ne180100]<0>(&v560, "class");
    v20 = v551.__end_;
    if (v551.__end_ >= v551.__end_cap_.__value_)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v551.__end_ - (char *)v551.__begin_) >> 3);
      v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3) > v23)
        v23 = 0x5555555555555556 * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3) >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v23;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v551.__end_cap_;
      if (v24)
        v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v551.__end_cap_, v24);
      else
        v25 = 0;
      v26 = v25 + v22;
      __v.__first_ = v25;
      __v.__begin_ = v26;
      __v.__end_cap_.__value_ = &v25[v24];
      v27 = v560;
      v26->__r_.__value_.__r.__words[2] = v561;
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      v561 = 0;
      v560 = 0uLL;
      __v.__end_ = v26 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v551, &__v);
      v28 = v551.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v551.__end_ = v28;
      if (SHIBYTE(v561) < 0)
        operator delete((void *)v560);
    }
    else
    {
      v21 = v560;
      v551.__end_->__r_.__value_.__r.__words[2] = v561;
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
      v551.__end_ = v20 + 1;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v560, "value");
  v29 = v551.__end_;
  if (v551.__end_ >= v551.__end_cap_.__value_)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v551.__end_ - (char *)v551.__begin_) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3) > v32)
      v32 = 0x5555555555555556 * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3) >= 0x555555555555555)
      v33 = 0xAAAAAAAAAAAAAAALL;
    else
      v33 = v32;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v551.__end_cap_;
    if (v33)
      v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v551.__end_cap_, v33);
    else
      v34 = 0;
    v35 = v34 + v31;
    __v.__first_ = v34;
    __v.__begin_ = v35;
    __v.__end_cap_.__value_ = &v34[v33];
    v36 = v560;
    v35->__r_.__value_.__r.__words[2] = v561;
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
    v561 = 0;
    v560 = 0uLL;
    __v.__end_ = v35 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v551, &__v);
    v37 = v551.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v551.__end_ = v37;
    if (SHIBYTE(v561) < 0)
      operator delete((void *)v560);
  }
  else
  {
    v30 = v560;
    v551.__end_->__r_.__value_.__r.__words[2] = v561;
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
    v551.__end_ = v29 + 1;
  }
  if (v540 >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v560, "stderr");
    v38 = v551.__end_;
    if (v551.__end_ >= v551.__end_cap_.__value_)
    {
      v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v551.__end_ - (char *)v551.__begin_) >> 3);
      v41 = v40 + 1;
      if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3) > v41)
        v41 = 0x5555555555555556 * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 3) >= 0x555555555555555)
        v42 = 0xAAAAAAAAAAAAAAALL;
      else
        v42 = v41;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v551.__end_cap_;
      if (v42)
        v43 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v551.__end_cap_, v42);
      else
        v43 = 0;
      v44 = v43 + v40;
      __v.__first_ = v43;
      __v.__begin_ = v44;
      __v.__end_cap_.__value_ = &v43[v42];
      v45 = v560;
      v44->__r_.__value_.__r.__words[2] = v561;
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
      v561 = 0;
      v560 = 0uLL;
      __v.__end_ = v44 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v551, &__v);
      v46 = v551.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v551.__end_ = v46;
      if (SHIBYTE(v561) < 0)
        operator delete((void *)v560);
    }
    else
    {
      v39 = v560;
      v551.__end_->__r_.__value_.__r.__words[2] = v561;
      *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
      v551.__end_ = v38 + 1;
    }
  }
  v549 = 0;
  v47 = operator new(1uLL);
  *v47 = 2;
  v548 = v47;
  v550 = v47 + 1;
  v48 = operator new(2uLL);
  v49 = v48 + 2;
  v48[1] = 2;
  *v48 = *v47;
  v548 = v48;
  v550 = v48 + 2;
  operator delete(v47);
  v50 = v48 + 2;
  v549 = (uint64_t)(v48 + 2);
  if (v19)
  {
    v51 = *(_BYTE *)((*a2)[3] + 28);
    if (v49 >= v550)
    {
      v53 = v548;
      v54 = v49 - (_BYTE *)v548;
      v55 = v49 - (_BYTE *)v548 + 1;
      if (v55 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v56 = v550 - (_BYTE *)v548;
      if (2 * (v550 - (_BYTE *)v548) > (unint64_t)v55)
        v55 = 2 * v56;
      if (v56 >= 0x3FFFFFFFFFFFFFFFLL)
        v57 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
        v58 = operator new(v57);
      else
        v58 = 0;
      v50 = &v58[v57];
      v58[v54] = v51;
      v52 = (uint64_t)&v58[v54 + 1];
      if (v49 == v53)
      {
        v58 += v54;
      }
      else
      {
        v59 = v48 - v53 + 1;
        do
        {
          v60 = *--v49;
          v58[v59--] = v60;
        }
        while (v49 != v53);
      }
      v548 = v58;
      v549 = v52;
      v550 = v50;
      if (v53)
      {
        operator delete(v53);
        v50 = v550;
      }
    }
    else
    {
      v48[2] = v51;
      v52 = (uint64_t)(v48 + 3);
    }
    v549 = v52;
    v49 = (_BYTE *)v52;
  }
  if (v49 >= v50)
  {
    v62 = (unint64_t)v548;
    v63 = v49 - (_BYTE *)v548;
    v64 = v49 - (_BYTE *)v548 + 1;
    if (v64 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v65 = v50 - (_BYTE *)v548;
    if (2 * v65 > v64)
      v64 = 2 * v65;
    if (v65 >= 0x3FFFFFFFFFFFFFFFLL)
      v66 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
      v67 = operator new(v66);
    else
      v67 = 0;
    v68 = (char *)v67 + v63;
    v69 = (char *)v67 + v66;
    v70 = (char *)v67 + v63;
    *v70 = 1;
    v61 = v70 + 1;
    if (v49 == (_BYTE *)v62)
    {
      v67 = v68;
    }
    else
    {
      v71 = &v49[~v62];
      do
      {
        v72 = *--v49;
        (v71--)[(_QWORD)v67] = v72;
      }
      while (v49 != (_BYTE *)v62);
    }
    v548 = v67;
    v549 = (uint64_t)v61;
    v550 = v69;
    if (v62)
      operator delete((void *)v62);
  }
  else
  {
    *v49 = 1;
    v61 = v49 + 1;
  }
  v549 = (uint64_t)v61;
  if (v540 >= 1)
  {
    if (v61 >= v550)
    {
      v74 = (unint64_t)v548;
      v75 = v61 - (_BYTE *)v548;
      v76 = v61 - (_BYTE *)v548 + 1;
      if (v76 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v77 = v550 - (_BYTE *)v548;
      if (2 * (v550 - (_BYTE *)v548) > (unint64_t)v76)
        v76 = 2 * v77;
      if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
        v78 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v78 = v76;
      if (v78)
        v79 = operator new(v78);
      else
        v79 = 0;
      v80 = (char *)v79 + v78;
      *((_BYTE *)v79 + v75) = 1;
      v73 = (uint64_t)v79 + v75 + 1;
      if (v61 == (_BYTE *)v74)
      {
        v79 = (char *)v79 + v75;
      }
      else
      {
        v81 = &v61[~v74];
        do
        {
          v82 = *--v61;
          (v81--)[(_QWORD)v79] = v82;
        }
        while (v61 != (_BYTE *)v74);
      }
      v548 = v79;
      v549 = v73;
      v550 = v80;
      if (v74)
        operator delete((void *)v74);
    }
    else
    {
      *v61 = 1;
      v73 = (uint64_t)(v61 + 1);
    }
    v549 = v73;
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "");
  turi::sframe::open_for_write((uint64_t)a4, &v551, &v548, (const std::string *)&__v, 1, 1);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  turi::sframe::get_output_iterator((size_t *)a4, 0, (uint64_t)&v560);
  v545 = 0;
  v546 = 0;
  v547 = 0;
  v542 = 0;
  v543 = 0;
  v544 = 0;
  std::vector<turi::flexible_type>::reserve(&v545, (*a2)[8]);
  std::vector<turi::flexible_type>::reserve(&v542, (*a2)[8]);
  v83 = *a2;
  v84 = **a2;
  if ((*a2)[1] != v84)
  {
    v85 = 0;
    v535 = (std::string *)*MEMORY[0x24BEDB7F0];
    v533 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
    v534 = *(std::string **)(MEMORY[0x24BEDB7F0] + 64);
    v532 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v86 = (uint64_t *)(v84 + 16 * v85);
      v87 = *v86;
      v88 = (std::__shared_weak_count *)v86[1];
      if (v88)
      {
        p_shared_owners = (unint64_t *)&v88->__shared_owners_;
        do
          v90 = __ldxr(p_shared_owners);
        while (__stxr(v90 + 1, p_shared_owners));
        v91 = *(_DWORD *)(v87 + 24);
        do
          v92 = __ldaxr(p_shared_owners);
        while (__stlxr(v92 - 1, p_shared_owners));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      else
      {
        v91 = *(_DWORD *)(v87 + 24);
      }
      if ((v91 - 1) > 5)
        v93 = 0;
      else
        v93 = qword_218723620[v91 - 1];
      while (1)
      {
        v94 = (uint64_t *)(**a2 + 16 * v85);
        v95 = *v94;
        v96 = (std::__shared_weak_count *)v94[1];
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
          v99 = *(_QWORD *)(v95 + 64);
          do
            v100 = __ldaxr(v97);
          while (__stlxr(v100 - 1, v97));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        else
        {
          v99 = *(_QWORD *)(v95 + 64);
        }
        if (v93 >= v99)
          break;
        v101 = **a2 + 16 * v85;
        v103 = *(const std::string **)v101;
        v102 = *(std::__shared_weak_count **)(v101 + 8);
        if (v102)
        {
          v104 = (unint64_t *)&v102->__shared_owners_;
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
          do
            v106 = __ldaxr(v104);
          while (__stlxr(v106 - 1, v104));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        turi::flexible_type::flexible_type<std::string>((uint64_t)&v556, v103);
        std::vector<turi::flexible_type>::push_back[abi:ne180100](&v545, (uint64_t *)&v556);
        switch(v556.__r_.__value_.__s.__data_[12])
        {
          case 2:
            v107 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v108 = __ldaxr(v107);
              v109 = v108 - 1;
            }
            while (__stlxr(v109, v107));
            if (!v109)
            {
              v110 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                if (*(char *)(v556.__r_.__value_.__r.__words[0] + 31) < 0)
                  operator delete(*(void **)(v556.__r_.__value_.__r.__words[0] + 8));
                v111 = v110;
                v112 = 0x1012C404EF22A49;
                goto LABEL_186;
              }
            }
            break;
          case 3:
            v124 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v125 = __ldaxr(v124);
              v126 = v125 - 1;
            }
            while (__stlxr(v126, v124));
            if (!v126)
            {
              v127 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                v128 = *(void **)(v556.__r_.__value_.__r.__words[0] + 8);
                if (v128)
                {
                  *(_QWORD *)(v556.__r_.__value_.__r.__words[0] + 16) = v128;
                  operator delete(v128);
                }
                v111 = v127;
                v112 = 0x1080C409938AC02;
                goto LABEL_186;
              }
            }
            break;
          case 4:
            v113 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v114 = __ldaxr(v113);
              v115 = v114 - 1;
            }
            while (__stlxr(v115, v113));
            if (!v115)
            {
              v116 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                __v.__first_ = (std::__split_buffer<std::string>::pointer)(v556.__r_.__value_.__r.__words[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
                goto LABEL_179;
              }
            }
            break;
          case 5:
            v129 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v130 = __ldaxr(v129);
              v131 = v130 - 1;
            }
            while (__stlxr(v131, v129));
            if (!v131)
            {
              v116 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                __v.__first_ = (std::__split_buffer<std::string>::pointer)(v556.__r_.__value_.__r.__words[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
LABEL_179:
                v111 = v116;
                v112 = 0x1020C405E66F15BLL;
                goto LABEL_186;
              }
            }
            break;
          case 8:
            v132 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v133 = __ldaxr(v132);
              v134 = v133 - 1;
            }
            while (__stlxr(v134, v132));
            if (!v134)
            {
              v135 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v556.__r_.__value_.__r.__words[0] + 16));
                v111 = v135;
                v123 = -235920773;
                goto LABEL_185;
              }
            }
            break;
          case 9:
            v117 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v118 = __ldaxr(v117);
              v119 = v118 - 1;
            }
            while (__stlxr(v119, v117));
            if (!v119)
            {
              v120 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                v121 = *(void **)(v556.__r_.__value_.__r.__words[0] + 48);
                if (v121)
                {
                  *(_QWORD *)(v556.__r_.__value_.__r.__words[0] + 56) = v121;
                  operator delete(v121);
                }
                v122 = *(void **)(v120 + 24);
                if (v122)
                {
                  *(_QWORD *)(v120 + 32) = v122;
                  operator delete(v122);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v120 + 8);
                v111 = v120;
                v123 = 2071181815;
LABEL_185:
                v112 = v123 | 0x1030C4000000000;
LABEL_186:
                MEMORY[0x219A19A08](v111, v112);
              }
            }
            break;
          default:
            break;
        }
        v136 = (uint64_t *)(**a2 + 16 * v85);
        v137 = *v136;
        v138 = (std::__shared_weak_count *)v136[1];
        if (v138)
        {
          v139 = (unint64_t *)&v138->__shared_owners_;
          do
            v140 = __ldxr(v139);
          while (__stxr(v140 + 1, v139));
          v141 = *(_DWORD *)(v137 + 24);
          do
            v142 = __ldaxr(v139);
          while (__stlxr(v142 - 1, v139));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
        else
        {
          v141 = *(_DWORD *)(v137 + 24);
        }
        if (v141 <= 6 && ((1 << v141) & 0x5A) != 0)
        {
          v143 = (uint64_t *)(**a2 + 16 * v85);
          v145 = *v143;
          v144 = (std::__shared_weak_count *)v143[1];
          if (v144)
          {
            v146 = (unint64_t *)&v144->__shared_owners_;
            do
              v147 = __ldxr(v146);
            while (__stxr(v147 + 1, v146));
            do
              v148 = __ldaxr(v146);
            while (__stlxr(v148 - 1, v146));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          v149 = (turi::flexible_type_impl *)(*(_QWORD *)(*(_QWORD *)(v145 + 32) + 80) + 16 * v93);
          switch(*((_BYTE *)v149 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
              std::ostream::operator<<();
              std::stringbuf::str();
              __v.__first_ = v535;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_
                                                           + v535[-1].__r_.__value_.__r.__words[0]) = v534;
              __v.__end_ = v533;
              v150 = (std::string *)v532;
              goto LABEL_227;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
              std::ostream::operator<<();
              std::stringbuf::str();
              __v.__first_ = v535;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_
                                                           + v535[-1].__r_.__value_.__r.__words[0]) = v534;
              v150 = (std::string *)(MEMORY[0x24BEDB848] + 16);
              __v.__end_ = v533;
LABEL_227:
              __v.__end_cap_.__value_ = v150;
              if (v554 < 0)
                operator delete(__p);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](&v555);
              goto LABEL_248;
            case 2:
              v164 = *(_QWORD *)v149;
              if (*(char *)(*(_QWORD *)v149 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v556, *(const std::string::value_type **)(v164 + 8), *(_QWORD *)(v164 + 16));
              }
              else
              {
                v165 = *(_OWORD *)(v164 + 8);
                v556.__r_.__value_.__r.__words[2] = *(_QWORD *)(v164 + 24);
                *(_OWORD *)&v556.__r_.__value_.__l.__data_ = v165;
              }
              goto LABEL_248;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__v, (_QWORD *)(*(_QWORD *)v149 + 8));
              goto LABEL_248;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__v, (uint64_t *)(*(_QWORD *)v149 + 8));
              goto LABEL_248;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__v, (_QWORD *)(*(_QWORD *)v149 + 8));
              goto LABEL_248;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v149, &v556);
              goto LABEL_248;
            case 7:
              memset(&v556, 0, sizeof(v556));
              goto LABEL_248;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_248;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__v, (_QWORD *)(*(_QWORD *)v149 + 8));
LABEL_248:
              turi::flexible_type::flexible_type<std::string>((uint64_t)&v557, (__int128 *)&v556);
              std::vector<turi::flexible_type>::push_back[abi:ne180100](&v542, (uint64_t *)&v557);
              switch(v559)
              {
                case 2:
                  v174 = (unint64_t *)v557;
                  do
                  {
                    v175 = __ldaxr(v174);
                    v176 = v175 - 1;
                  }
                  while (__stlxr(v176, v174));
                  if (!v176)
                  {
                    v177 = v557;
                    if (v557)
                    {
                      if (*((char *)v557 + 31) < 0)
                        operator delete(v557[1]);
                      v178 = v177;
                      v179 = 0x1012C404EF22A49;
                      goto LABEL_289;
                    }
                  }
                  break;
                case 3:
                  v191 = (unint64_t *)v557;
                  do
                  {
                    v192 = __ldaxr(v191);
                    v193 = v192 - 1;
                  }
                  while (__stlxr(v193, v191));
                  if (!v193)
                  {
                    v194 = v557;
                    if (v557)
                    {
                      v195 = v557[1];
                      if (v195)
                      {
                        v557[2] = v195;
                        operator delete(v195);
                      }
                      v178 = v194;
                      v179 = 0x1080C409938AC02;
                      goto LABEL_289;
                    }
                  }
                  break;
                case 4:
                  v180 = (unint64_t *)v557;
                  do
                  {
                    v181 = __ldaxr(v180);
                    v182 = v181 - 1;
                  }
                  while (__stlxr(v182, v180));
                  if (!v182)
                  {
                    v183 = v557;
                    if (v557)
                    {
                      __v.__first_ = (std::__split_buffer<std::string>::pointer)(v557 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
                      goto LABEL_282;
                    }
                  }
                  break;
                case 5:
                  v196 = (unint64_t *)v557;
                  do
                  {
                    v197 = __ldaxr(v196);
                    v198 = v197 - 1;
                  }
                  while (__stlxr(v198, v196));
                  if (!v198)
                  {
                    v183 = v557;
                    if (v557)
                    {
                      __v.__first_ = (std::__split_buffer<std::string>::pointer)(v557 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
LABEL_282:
                      v178 = v183;
                      v179 = 0x1020C405E66F15BLL;
                      goto LABEL_289;
                    }
                  }
                  break;
                case 8:
                  v199 = (unint64_t *)v557;
                  do
                  {
                    v200 = __ldaxr(v199);
                    v201 = v200 - 1;
                  }
                  while (__stlxr(v201, v199));
                  if (!v201)
                  {
                    v202 = v557;
                    if (v557)
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)v557 + 2);
                      v178 = v202;
                      v190 = -235920773;
                      goto LABEL_288;
                    }
                  }
                  break;
                case 9:
                  v184 = (unint64_t *)v557;
                  do
                  {
                    v185 = __ldaxr(v184);
                    v186 = v185 - 1;
                  }
                  while (__stlxr(v186, v184));
                  if (!v186)
                  {
                    v187 = v557;
                    if (v557)
                    {
                      v188 = v557[6];
                      if (v188)
                      {
                        v557[7] = v188;
                        operator delete(v188);
                      }
                      v189 = v187[3];
                      if (v189)
                      {
                        v187[4] = v189;
                        operator delete(v189);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v187 + 1));
                      v178 = v187;
                      v190 = 2071181815;
LABEL_288:
                      v179 = v190 | 0x1030C4000000000;
LABEL_289:
                      MEMORY[0x219A19A08](v178, v179);
                    }
                  }
                  break;
                default:
                  break;
              }
              v557 = 0;
              v558 = 0;
              v559 = 0;
              if ((SHIBYTE(v556.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_293;
              first = (std::__split_buffer<std::string>::pointer)v556.__r_.__value_.__r.__words[0];
              break;
            default:
              turi::flexible_type_fail(0);
              __break(1u);
              return;
          }
          goto LABEL_292;
        }
        v151 = (uint64_t *)(**a2 + 16 * v85);
        v152 = *v151;
        v153 = (std::__shared_weak_count *)v151[1];
        if (v153)
        {
          v154 = (unint64_t *)&v153->__shared_owners_;
          do
            v155 = __ldxr(v154);
          while (__stxr(v155 + 1, v154));
          v156 = *(_DWORD *)(v152 + 24);
          do
            v157 = __ldaxr(v154);
          while (__stlxr(v157 - 1, v154));
          if (v157)
          {
            if (!v156)
              goto LABEL_234;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
            if (!v156)
            {
LABEL_234:
              v166 = v543;
              if ((unint64_t)v543 >= v544)
              {
                v173 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(&v542, (char *)&turi::FLEX_UNDEFINED);
              }
              else
              {
                *v543 = 0;
                *((_DWORD *)v166 + 2) = 0;
                *((_BYTE *)v166 + 12) = 0;
                if (v166 != &turi::FLEX_UNDEFINED)
                {
                  v167 = turi::FLEX_UNDEFINED;
                  *(uint64_t *)((char *)v166 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
                  *v166 = v167;
                  LODWORD(v167) = byte_254FF5584;
                  *((_BYTE *)v166 + 12) = byte_254FF5584;
                  v168 = v167 > 9;
                  v169 = (1 << v167) & 0x33C;
                  if (!v168 && v169 != 0)
                  {
                    v171 = (unint64_t *)*v166;
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 + 1, v171));
                  }
                }
                v173 = (uint64_t)(v166 + 2);
              }
              v543 = (uint64_t *)v173;
              goto LABEL_293;
            }
          }
        }
        else if (!*(_DWORD *)(v152 + 24))
        {
          goto LABEL_234;
        }
        std::to_string((std::string *)&__v, v93);
        turi::flexible_type::flexible_type<std::string>((uint64_t)&v556, (__int128 *)&__v);
        std::vector<turi::flexible_type>::push_back[abi:ne180100](&v542, (uint64_t *)&v556);
        switch(v556.__r_.__value_.__s.__data_[12])
        {
          case 2:
            v158 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v159 = __ldaxr(v158);
              v160 = v159 - 1;
            }
            while (__stlxr(v160, v158));
            if (!v160)
            {
              v161 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                if (*(char *)(v556.__r_.__value_.__r.__words[0] + 31) < 0)
                  operator delete(*(void **)(v556.__r_.__value_.__r.__words[0] + 8));
                v162 = v161;
                v163 = 0x1012C404EF22A49;
                goto LABEL_327;
              }
            }
            break;
          case 3:
            v215 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v216 = __ldaxr(v215);
              v217 = v216 - 1;
            }
            while (__stlxr(v217, v215));
            if (!v217)
            {
              v218 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                v219 = *(void **)(v556.__r_.__value_.__r.__words[0] + 8);
                if (v219)
                {
                  *(_QWORD *)(v556.__r_.__value_.__r.__words[0] + 16) = v219;
                  operator delete(v219);
                }
                v162 = v218;
                v163 = 0x1080C409938AC02;
                goto LABEL_327;
              }
            }
            break;
          case 4:
            v204 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v205 = __ldaxr(v204);
              v206 = v205 - 1;
            }
            while (__stlxr(v206, v204));
            if (!v206)
            {
              v207 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                v557 = (void **)(v556.__r_.__value_.__r.__words[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v557);
                goto LABEL_320;
              }
            }
            break;
          case 5:
            v220 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v221 = __ldaxr(v220);
              v222 = v221 - 1;
            }
            while (__stlxr(v222, v220));
            if (!v222)
            {
              v207 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                v557 = (void **)(v556.__r_.__value_.__r.__words[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v557);
LABEL_320:
                v162 = v207;
                v163 = 0x1020C405E66F15BLL;
                goto LABEL_327;
              }
            }
            break;
          case 8:
            v223 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v224 = __ldaxr(v223);
              v225 = v224 - 1;
            }
            while (__stlxr(v225, v223));
            if (!v225)
            {
              v226 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v556.__r_.__value_.__r.__words[0] + 16));
                v162 = v226;
                v214 = -235920773;
                goto LABEL_326;
              }
            }
            break;
          case 9:
            v208 = (unint64_t *)v556.__r_.__value_.__r.__words[0];
            do
            {
              v209 = __ldaxr(v208);
              v210 = v209 - 1;
            }
            while (__stlxr(v210, v208));
            if (!v210)
            {
              v211 = v556.__r_.__value_.__r.__words[0];
              if (v556.__r_.__value_.__r.__words[0])
              {
                v212 = *(void **)(v556.__r_.__value_.__r.__words[0] + 48);
                if (v212)
                {
                  *(_QWORD *)(v556.__r_.__value_.__r.__words[0] + 56) = v212;
                  operator delete(v212);
                }
                v213 = *(void **)(v211 + 24);
                if (v213)
                {
                  *(_QWORD *)(v211 + 32) = v213;
                  operator delete(v213);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v211 + 8);
                v162 = v211;
                v214 = 2071181815;
LABEL_326:
                v163 = v214 | 0x1030C4000000000;
LABEL_327:
                MEMORY[0x219A19A08](v162, v163);
              }
            }
            break;
          default:
            break;
        }
        v556.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v556.__r_.__value_.__r.__words[1]) = 0;
        v556.__r_.__value_.__s.__data_[12] = 0;
        if (SHIBYTE(__v.__end_) < 0)
        {
          first = __v.__first_;
LABEL_292:
          operator delete(first);
        }
LABEL_293:
        ++v93;
      }
      ++v85;
      v83 = *a2;
      v84 = **a2;
    }
    while (v85 < ((*a2)[1] - v84) >> 4);
  }
  if ((v19 & 1) != 0)
  {
    v537 = *(_QWORD *)(v83[3] + 64);
    if (v537 >= 2)
    {
      if (v540 <= 0)
        v227 = 4;
      else
        v227 = 5;
      v536 = v227;
      v541 = a1[1] / (v537 - 1);
      for (i = 1; i != v537; ++i)
      {
        std::vector<turi::flexible_type>::vector(&__v, v536);
        turi::flexible_type::operator=((uint64_t *)__v.__first_, "(intercept)");
        v229 = __v.__first_;
        v230 = &__v.__first_->__r_.__value_.__s.__data_[16];
        if ((uint64_t *)&__v.__first_->__r_.__value_.__r.__words[2] != &turi::FLEX_UNDEFINED)
        {
          switch(__v.__first_[1].__r_.__value_.__s.__data_[4])
          {
            case 2:
              v231 = *(unint64_t **)v230;
              do
              {
                v232 = __ldaxr(v231);
                v233 = v232 - 1;
              }
              while (__stlxr(v233, v231));
              if (!v233)
              {
                v234 = *(unint64_t **)v230;
                if (!*(_QWORD *)v230)
                  goto LABEL_380;
                if (*((char *)v234 + 31) < 0)
                  operator delete((void *)v234[1]);
                v235 = v234;
                v236 = 0x1012C404EF22A49;
                goto LABEL_379;
              }
              break;
            case 3:
              v248 = *(unint64_t **)v230;
              do
              {
                v249 = __ldaxr(v248);
                v250 = v249 - 1;
              }
              while (__stlxr(v250, v248));
              if (!v250)
              {
                v251 = *(unint64_t **)v230;
                if (!*(_QWORD *)v230)
                  goto LABEL_380;
                v252 = (void *)v251[1];
                if (v252)
                {
                  v251[2] = (unint64_t)v252;
                  operator delete(v252);
                }
                v235 = v251;
                v236 = 0x1080C409938AC02;
                goto LABEL_379;
              }
              break;
            case 4:
              v237 = *(unint64_t **)v230;
              do
              {
                v238 = __ldaxr(v237);
                v239 = v238 - 1;
              }
              while (__stlxr(v239, v237));
              if (!v239)
              {
                v240 = *(unint64_t **)v230;
                if (!*(_QWORD *)v230)
                  goto LABEL_380;
                v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v240 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
                goto LABEL_372;
              }
              break;
            case 5:
              v253 = *(unint64_t **)v230;
              do
              {
                v254 = __ldaxr(v253);
                v255 = v254 - 1;
              }
              while (__stlxr(v255, v253));
              if (!v255)
              {
                v240 = *(unint64_t **)v230;
                if (!*(_QWORD *)v230)
                  goto LABEL_380;
                v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v240 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
LABEL_372:
                v235 = v240;
                v236 = 0x1020C405E66F15BLL;
                goto LABEL_379;
              }
              break;
            case 8:
              v256 = *(unint64_t **)v230;
              do
              {
                v257 = __ldaxr(v256);
                v258 = v257 - 1;
              }
              while (__stlxr(v258, v256));
              if (!v258)
              {
                v259 = *(unint64_t **)v230;
                if (!*(_QWORD *)v230)
                  goto LABEL_380;
                boost::detail::shared_count::~shared_count((unsigned int **)v259 + 2);
                v235 = v259;
                v247 = -235920773;
                goto LABEL_378;
              }
              break;
            case 9:
              v241 = *(unint64_t **)v230;
              do
              {
                v242 = __ldaxr(v241);
                v243 = v242 - 1;
              }
              while (__stlxr(v243, v241));
              if (!v243)
              {
                v244 = *(unint64_t **)v230;
                if (*(_QWORD *)v230)
                {
                  v245 = (void *)v244[6];
                  if (v245)
                  {
                    v244[7] = (unint64_t)v245;
                    operator delete(v245);
                  }
                  v246 = (void *)v244[3];
                  if (v246)
                  {
                    v244[4] = (unint64_t)v246;
                    operator delete(v246);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v244 + 1));
                  v235 = v244;
                  v247 = 2071181815;
LABEL_378:
                  v236 = v247 | 0x1030C4000000000;
LABEL_379:
                  MEMORY[0x219A19A08](v235, v236);
                }
LABEL_380:
                *(_QWORD *)v230 = 0;
              }
              break;
            default:
              break;
          }
          *(_QWORD *)(v230 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
          *(_QWORD *)v230 = turi::FLEX_UNDEFINED;
          v260 = byte_254FF5584;
          v229[1].__r_.__value_.__s.__data_[4] = byte_254FF5584;
          v168 = v260 > 9;
          v261 = (1 << v260) & 0x33C;
          if (!v168 && v261 != 0)
          {
            v263 = *(unint64_t **)v230;
            do
              v264 = __ldaxr(v263);
            while (__stlxr(v264 + 1, v263));
          }
        }
        v265 = *(_QWORD *)(*(_QWORD *)((*a2)[3] + 32) + 80) + 16 * i;
        v266 = __v.__first_;
        v267 = &__v.__first_[1].__r_.__value_.__s.__data_[8];
        if ((std::string::size_type *)v265 != &__v.__first_[1].__r_.__value_.__r.__words[1])
        {
          switch(__v.__first_[1].__r_.__value_.__s.__data_[20])
          {
            case 2:
              v268 = *(unint64_t **)v267;
              do
              {
                v269 = __ldaxr(v268);
                v270 = v269 - 1;
              }
              while (__stlxr(v270, v268));
              if (!v270)
              {
                v271 = *(unint64_t **)v267;
                if (!*(_QWORD *)v267)
                  goto LABEL_430;
                if (*((char *)v271 + 31) < 0)
                  operator delete((void *)v271[1]);
                v272 = v271;
                v273 = 0x1012C404EF22A49;
                goto LABEL_429;
              }
              break;
            case 3:
              v285 = *(unint64_t **)v267;
              do
              {
                v286 = __ldaxr(v285);
                v287 = v286 - 1;
              }
              while (__stlxr(v287, v285));
              if (!v287)
              {
                v288 = *(unint64_t **)v267;
                if (!*(_QWORD *)v267)
                  goto LABEL_430;
                v289 = (void *)v288[1];
                if (v289)
                {
                  v288[2] = (unint64_t)v289;
                  operator delete(v289);
                }
                v272 = v288;
                v273 = 0x1080C409938AC02;
                goto LABEL_429;
              }
              break;
            case 4:
              v274 = *(unint64_t **)v267;
              do
              {
                v275 = __ldaxr(v274);
                v276 = v275 - 1;
              }
              while (__stlxr(v276, v274));
              if (!v276)
              {
                v277 = *(unint64_t **)v267;
                if (!*(_QWORD *)v267)
                  goto LABEL_430;
                v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v277 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
                goto LABEL_422;
              }
              break;
            case 5:
              v290 = *(unint64_t **)v267;
              do
              {
                v291 = __ldaxr(v290);
                v292 = v291 - 1;
              }
              while (__stlxr(v292, v290));
              if (!v292)
              {
                v277 = *(unint64_t **)v267;
                if (!*(_QWORD *)v267)
                  goto LABEL_430;
                v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v277 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
LABEL_422:
                v272 = v277;
                v273 = 0x1020C405E66F15BLL;
                goto LABEL_429;
              }
              break;
            case 8:
              v293 = *(unint64_t **)v267;
              do
              {
                v294 = __ldaxr(v293);
                v295 = v294 - 1;
              }
              while (__stlxr(v295, v293));
              if (!v295)
              {
                v296 = *(unint64_t **)v267;
                if (!*(_QWORD *)v267)
                  goto LABEL_430;
                boost::detail::shared_count::~shared_count((unsigned int **)v296 + 2);
                v272 = v296;
                v284 = -235920773;
                goto LABEL_428;
              }
              break;
            case 9:
              v278 = *(unint64_t **)v267;
              do
              {
                v279 = __ldaxr(v278);
                v280 = v279 - 1;
              }
              while (__stlxr(v280, v278));
              if (!v280)
              {
                v281 = *(unint64_t **)v267;
                if (*(_QWORD *)v267)
                {
                  v282 = (void *)v281[6];
                  if (v282)
                  {
                    v281[7] = (unint64_t)v282;
                    operator delete(v282);
                  }
                  v283 = (void *)v281[3];
                  if (v283)
                  {
                    v281[4] = (unint64_t)v283;
                    operator delete(v283);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v281 + 1));
                  v272 = v281;
                  v284 = 2071181815;
LABEL_428:
                  v273 = v284 | 0x1030C4000000000;
LABEL_429:
                  MEMORY[0x219A19A08](v272, v273);
                }
LABEL_430:
                *(_QWORD *)v267 = 0;
              }
              break;
            default:
              break;
          }
          v297 = *(_QWORD *)v265;
          *(_QWORD *)(v267 + 5) = *(_QWORD *)(v265 + 5);
          *(_QWORD *)v267 = v297;
          LODWORD(v297) = *(unsigned __int8 *)(v265 + 12);
          v266[1].__r_.__value_.__s.__data_[20] = v297;
          v168 = v297 > 9;
          v298 = (1 << v297) & 0x33C;
          if (!v168 && v298 != 0)
          {
            v300 = *(unint64_t **)v267;
            do
              v301 = __ldaxr(v300);
            while (__stlxr(v301 + 1, v300));
          }
        }
        v302 = i * v541 - 1;
        turi::flexible_type::operator=<double>((uint64_t)&__v.__first_[2], (_QWORD *)(*a1 + 8 * v302));
        if (v540 >= 1)
          turi::flexible_type::operator=<double>((uint64_t)&__v.__first_[2].__r_.__value_.__r.__words[2], (_QWORD *)(*a3 + 8 * v302));
        if (!v562)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(__int128 *, std::__split_buffer<std::string> *))(*(_QWORD *)v562 + 48))(v562, &__v);
        v303 = v545;
        if (v546 != v545)
        {
          v304 = 0;
          v305 = (i - 1) * v541;
          do
          {
            v306 = v303 + 16 * v304;
            v307 = __v.__first_;
            if ((std::__split_buffer<std::string>::pointer)v306 != __v.__first_)
            {
              switch(__v.__first_->__r_.__value_.__s.__data_[12])
              {
                case 2:
                  data = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
                  do
                  {
                    v309 = __ldaxr(data);
                    v310 = v309 - 1;
                  }
                  while (__stlxr(v310, data));
                  if (!v310)
                  {
                    v311 = v307->__r_.__value_.__r.__words[0];
                    if (!v307->__r_.__value_.__r.__words[0])
                      goto LABEL_485;
                    if (*(char *)(v311 + 31) < 0)
                      operator delete(*(void **)(v311 + 8));
                    v312 = (_QWORD *)v311;
                    v313 = 0x1012C404EF22A49;
                    goto LABEL_484;
                  }
                  break;
                case 3:
                  v325 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
                  do
                  {
                    v326 = __ldaxr(v325);
                    v327 = v326 - 1;
                  }
                  while (__stlxr(v327, v325));
                  if (!v327)
                  {
                    v328 = v307->__r_.__value_.__r.__words[0];
                    if (!v307->__r_.__value_.__r.__words[0])
                      goto LABEL_485;
                    v329 = *(void **)(v328 + 8);
                    if (v329)
                    {
                      *(_QWORD *)(v328 + 16) = v329;
                      operator delete(v329);
                    }
                    v312 = (_QWORD *)v328;
                    v313 = 0x1080C409938AC02;
                    goto LABEL_484;
                  }
                  break;
                case 4:
                  v314 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
                  do
                  {
                    v315 = __ldaxr(v314);
                    v316 = v315 - 1;
                  }
                  while (__stlxr(v316, v314));
                  if (!v316)
                  {
                    v317 = v307->__r_.__value_.__r.__words[0];
                    if (!v307->__r_.__value_.__r.__words[0])
                      goto LABEL_485;
                    v556.__r_.__value_.__r.__words[0] = v317 + 8;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
                    goto LABEL_477;
                  }
                  break;
                case 5:
                  v330 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
                  do
                  {
                    v331 = __ldaxr(v330);
                    v332 = v331 - 1;
                  }
                  while (__stlxr(v332, v330));
                  if (!v332)
                  {
                    v317 = v307->__r_.__value_.__r.__words[0];
                    if (!v307->__r_.__value_.__r.__words[0])
                      goto LABEL_485;
                    v556.__r_.__value_.__r.__words[0] = v317 + 8;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
LABEL_477:
                    v312 = (_QWORD *)v317;
                    v313 = 0x1020C405E66F15BLL;
                    goto LABEL_484;
                  }
                  break;
                case 8:
                  v333 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
                  do
                  {
                    v334 = __ldaxr(v333);
                    v335 = v334 - 1;
                  }
                  while (__stlxr(v335, v333));
                  if (!v335)
                  {
                    v336 = v307->__r_.__value_.__r.__words[0];
                    if (!v307->__r_.__value_.__r.__words[0])
                      goto LABEL_485;
                    boost::detail::shared_count::~shared_count((unsigned int **)(v336 + 16));
                    v312 = (_QWORD *)v336;
                    v324 = -235920773;
                    goto LABEL_483;
                  }
                  break;
                case 9:
                  v318 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
                  do
                  {
                    v319 = __ldaxr(v318);
                    v320 = v319 - 1;
                  }
                  while (__stlxr(v320, v318));
                  if (!v320)
                  {
                    v321 = (_QWORD *)v307->__r_.__value_.__r.__words[0];
                    if (v307->__r_.__value_.__r.__words[0])
                    {
                      v322 = (void *)v321[6];
                      if (v322)
                      {
                        v321[7] = v322;
                        operator delete(v322);
                      }
                      v323 = (void *)v321[3];
                      if (v323)
                      {
                        v321[4] = v323;
                        operator delete(v323);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v321 + 1));
                      v312 = v321;
                      v324 = 2071181815;
LABEL_483:
                      v313 = v324 | 0x1030C4000000000;
LABEL_484:
                      MEMORY[0x219A19A08](v312, v313);
                    }
LABEL_485:
                    v307->__r_.__value_.__r.__words[0] = 0;
                  }
                  break;
                default:
                  break;
              }
              v337 = *(_QWORD *)v306;
              *(std::string::size_type *)((char *)v307->__r_.__value_.__r.__words + 5) = *(_QWORD *)(v306 + 5);
              v307->__r_.__value_.__r.__words[0] = v337;
              LODWORD(v337) = *(unsigned __int8 *)(v306 + 12);
              v307->__r_.__value_.__s.__data_[12] = v337;
              v168 = v337 > 9;
              v338 = (1 << v337) & 0x33C;
              if (!v168 && v338 != 0)
              {
                v340 = (unint64_t *)v307->__r_.__value_.__r.__words[0];
                do
                  v341 = __ldaxr(v340);
                while (__stlxr(v341 + 1, v340));
              }
            }
            v342 = (uint64_t *)(v542 + 16 * v304);
            v343 = __v.__first_;
            v344 = &__v.__first_->__r_.__value_.__s.__data_[16];
            if (v342 != (uint64_t *)&__v.__first_->__r_.__value_.__r.__words[2])
            {
              switch(__v.__first_[1].__r_.__value_.__s.__data_[4])
              {
                case 2:
                  v345 = *(unint64_t **)v344;
                  do
                  {
                    v346 = __ldaxr(v345);
                    v347 = v346 - 1;
                  }
                  while (__stlxr(v347, v345));
                  if (!v347)
                  {
                    v348 = *(unint64_t **)v344;
                    if (!*(_QWORD *)v344)
                      goto LABEL_535;
                    if (*((char *)v348 + 31) < 0)
                      operator delete((void *)v348[1]);
                    v349 = v348;
                    v350 = 0x1012C404EF22A49;
                    goto LABEL_534;
                  }
                  break;
                case 3:
                  v362 = *(unint64_t **)v344;
                  do
                  {
                    v363 = __ldaxr(v362);
                    v364 = v363 - 1;
                  }
                  while (__stlxr(v364, v362));
                  if (!v364)
                  {
                    v365 = *(unint64_t **)v344;
                    if (!*(_QWORD *)v344)
                      goto LABEL_535;
                    v366 = (void *)v365[1];
                    if (v366)
                    {
                      v365[2] = (unint64_t)v366;
                      operator delete(v366);
                    }
                    v349 = v365;
                    v350 = 0x1080C409938AC02;
                    goto LABEL_534;
                  }
                  break;
                case 4:
                  v351 = *(unint64_t **)v344;
                  do
                  {
                    v352 = __ldaxr(v351);
                    v353 = v352 - 1;
                  }
                  while (__stlxr(v353, v351));
                  if (!v353)
                  {
                    v354 = *(unint64_t **)v344;
                    if (!*(_QWORD *)v344)
                      goto LABEL_535;
                    v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v354 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
                    goto LABEL_527;
                  }
                  break;
                case 5:
                  v367 = *(unint64_t **)v344;
                  do
                  {
                    v368 = __ldaxr(v367);
                    v369 = v368 - 1;
                  }
                  while (__stlxr(v369, v367));
                  if (!v369)
                  {
                    v354 = *(unint64_t **)v344;
                    if (!*(_QWORD *)v344)
                      goto LABEL_535;
                    v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v354 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
LABEL_527:
                    v349 = v354;
                    v350 = 0x1020C405E66F15BLL;
                    goto LABEL_534;
                  }
                  break;
                case 8:
                  v370 = *(unint64_t **)v344;
                  do
                  {
                    v371 = __ldaxr(v370);
                    v372 = v371 - 1;
                  }
                  while (__stlxr(v372, v370));
                  if (!v372)
                  {
                    v373 = *(unint64_t **)v344;
                    if (!*(_QWORD *)v344)
                      goto LABEL_535;
                    boost::detail::shared_count::~shared_count((unsigned int **)v373 + 2);
                    v349 = v373;
                    v361 = -235920773;
                    goto LABEL_533;
                  }
                  break;
                case 9:
                  v355 = *(unint64_t **)v344;
                  do
                  {
                    v356 = __ldaxr(v355);
                    v357 = v356 - 1;
                  }
                  while (__stlxr(v357, v355));
                  if (!v357)
                  {
                    v358 = *(unint64_t **)v344;
                    if (*(_QWORD *)v344)
                    {
                      v359 = (void *)v358[6];
                      if (v359)
                      {
                        v358[7] = (unint64_t)v359;
                        operator delete(v359);
                      }
                      v360 = (void *)v358[3];
                      if (v360)
                      {
                        v358[4] = (unint64_t)v360;
                        operator delete(v360);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v358 + 1));
                      v349 = v358;
                      v361 = 2071181815;
LABEL_533:
                      v350 = v361 | 0x1030C4000000000;
LABEL_534:
                      MEMORY[0x219A19A08](v349, v350);
                    }
LABEL_535:
                    *(_QWORD *)v344 = 0;
                  }
                  break;
                default:
                  break;
              }
              v374 = *v342;
              *(_QWORD *)(v344 + 5) = *(uint64_t *)((char *)v342 + 5);
              *(_QWORD *)v344 = v374;
              LODWORD(v374) = *((unsigned __int8 *)v342 + 12);
              v343[1].__r_.__value_.__s.__data_[4] = v374;
              v168 = v374 > 9;
              v375 = (1 << v374) & 0x33C;
              if (!v168 && v375 != 0)
              {
                v377 = *(unint64_t **)v344;
                do
                  v378 = __ldaxr(v377);
                while (__stlxr(v378 + 1, v377));
              }
            }
            v379 = *(_QWORD *)(*(_QWORD *)((*a2)[3] + 32) + 80) + 16 * i;
            v380 = __v.__first_;
            v381 = &__v.__first_[1].__r_.__value_.__s.__data_[8];
            if ((std::string::size_type *)v379 != &__v.__first_[1].__r_.__value_.__r.__words[1])
            {
              switch(__v.__first_[1].__r_.__value_.__s.__data_[20])
              {
                case 2:
                  v382 = *(unint64_t **)v381;
                  do
                  {
                    v383 = __ldaxr(v382);
                    v384 = v383 - 1;
                  }
                  while (__stlxr(v384, v382));
                  if (!v384)
                  {
                    v385 = *(unint64_t **)v381;
                    if (!*(_QWORD *)v381)
                      goto LABEL_585;
                    if (*((char *)v385 + 31) < 0)
                      operator delete((void *)v385[1]);
                    v386 = v385;
                    v387 = 0x1012C404EF22A49;
                    goto LABEL_584;
                  }
                  break;
                case 3:
                  v399 = *(unint64_t **)v381;
                  do
                  {
                    v400 = __ldaxr(v399);
                    v401 = v400 - 1;
                  }
                  while (__stlxr(v401, v399));
                  if (!v401)
                  {
                    v402 = *(unint64_t **)v381;
                    if (!*(_QWORD *)v381)
                      goto LABEL_585;
                    v403 = (void *)v402[1];
                    if (v403)
                    {
                      v402[2] = (unint64_t)v403;
                      operator delete(v403);
                    }
                    v386 = v402;
                    v387 = 0x1080C409938AC02;
                    goto LABEL_584;
                  }
                  break;
                case 4:
                  v388 = *(unint64_t **)v381;
                  do
                  {
                    v389 = __ldaxr(v388);
                    v390 = v389 - 1;
                  }
                  while (__stlxr(v390, v388));
                  if (!v390)
                  {
                    v391 = *(unint64_t **)v381;
                    if (!*(_QWORD *)v381)
                      goto LABEL_585;
                    v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v391 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
                    goto LABEL_577;
                  }
                  break;
                case 5:
                  v404 = *(unint64_t **)v381;
                  do
                  {
                    v405 = __ldaxr(v404);
                    v406 = v405 - 1;
                  }
                  while (__stlxr(v406, v404));
                  if (!v406)
                  {
                    v391 = *(unint64_t **)v381;
                    if (!*(_QWORD *)v381)
                      goto LABEL_585;
                    v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v391 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
LABEL_577:
                    v386 = v391;
                    v387 = 0x1020C405E66F15BLL;
                    goto LABEL_584;
                  }
                  break;
                case 8:
                  v407 = *(unint64_t **)v381;
                  do
                  {
                    v408 = __ldaxr(v407);
                    v409 = v408 - 1;
                  }
                  while (__stlxr(v409, v407));
                  if (!v409)
                  {
                    v410 = *(unint64_t **)v381;
                    if (!*(_QWORD *)v381)
                      goto LABEL_585;
                    boost::detail::shared_count::~shared_count((unsigned int **)v410 + 2);
                    v386 = v410;
                    v398 = -235920773;
                    goto LABEL_583;
                  }
                  break;
                case 9:
                  v392 = *(unint64_t **)v381;
                  do
                  {
                    v393 = __ldaxr(v392);
                    v394 = v393 - 1;
                  }
                  while (__stlxr(v394, v392));
                  if (!v394)
                  {
                    v395 = *(unint64_t **)v381;
                    if (*(_QWORD *)v381)
                    {
                      v396 = (void *)v395[6];
                      if (v396)
                      {
                        v395[7] = (unint64_t)v396;
                        operator delete(v396);
                      }
                      v397 = (void *)v395[3];
                      if (v397)
                      {
                        v395[4] = (unint64_t)v397;
                        operator delete(v397);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v395 + 1));
                      v386 = v395;
                      v398 = 2071181815;
LABEL_583:
                      v387 = v398 | 0x1030C4000000000;
LABEL_584:
                      MEMORY[0x219A19A08](v386, v387);
                    }
LABEL_585:
                    *(_QWORD *)v381 = 0;
                  }
                  break;
                default:
                  break;
              }
              v411 = *(_QWORD *)v379;
              *(_QWORD *)(v381 + 5) = *(_QWORD *)(v379 + 5);
              *(_QWORD *)v381 = v411;
              LODWORD(v411) = *(unsigned __int8 *)(v379 + 12);
              v380[1].__r_.__value_.__s.__data_[20] = v411;
              v168 = v411 > 9;
              v412 = (1 << v411) & 0x33C;
              if (!v168 && v412 != 0)
              {
                v414 = *(unint64_t **)v381;
                do
                  v415 = __ldaxr(v414);
                while (__stlxr(v415 + 1, v414));
              }
            }
            turi::flexible_type::operator=<double>((uint64_t)&__v.__first_[2], (_QWORD *)(*a1 + 8 * (v304 + v305)));
            if (v540 >= 1)
              turi::flexible_type::operator=<double>((uint64_t)&__v.__first_[2].__r_.__value_.__r.__words[2], (_QWORD *)(*a3 + 8 * (v304 + v305)));
            if (!v562)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(__int128 *, std::__split_buffer<std::string> *))(*(_QWORD *)v562 + 48))(v562, &__v);
            ++v304;
            v303 = v545;
          }
          while (v304 < (v546 - v545) >> 4);
        }
        v556.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
      }
    }
  }
  else
  {
    if (v540 <= 0)
      v416 = 3;
    else
      v416 = 4;
    std::vector<turi::flexible_type>::vector(&__v, v416);
    turi::flexible_type::operator=((uint64_t *)__v.__first_, "(intercept)");
    v417 = __v.__first_;
    v418 = &__v.__first_->__r_.__value_.__s.__data_[16];
    if ((uint64_t *)&__v.__first_->__r_.__value_.__r.__words[2] != &turi::FLEX_UNDEFINED)
    {
      switch(__v.__first_[1].__r_.__value_.__s.__data_[4])
      {
        case 2:
          v419 = *(unint64_t **)v418;
          do
          {
            v420 = __ldaxr(v419);
            v421 = v420 - 1;
          }
          while (__stlxr(v421, v419));
          if (!v421)
          {
            v422 = *(unint64_t **)v418;
            if (!*(_QWORD *)v418)
              goto LABEL_640;
            if (*((char *)v422 + 31) < 0)
              operator delete((void *)v422[1]);
            v423 = v422;
            v424 = 0x1012C404EF22A49;
            goto LABEL_639;
          }
          break;
        case 3:
          v433 = *(unint64_t **)v418;
          do
          {
            v434 = __ldaxr(v433);
            v435 = v434 - 1;
          }
          while (__stlxr(v435, v433));
          if (!v435)
          {
            v436 = *(unint64_t **)v418;
            if (!*(_QWORD *)v418)
              goto LABEL_640;
            v437 = (void *)v436[1];
            if (v437)
            {
              v436[2] = (unint64_t)v437;
              operator delete(v437);
            }
            v423 = v436;
            v424 = 0x1080C409938AC02;
            goto LABEL_639;
          }
          break;
        case 4:
          v425 = *(unint64_t **)v418;
          do
          {
            v426 = __ldaxr(v425);
            v427 = v426 - 1;
          }
          while (__stlxr(v427, v425));
          if (!v427)
          {
            v428 = *(unint64_t **)v418;
            if (!*(_QWORD *)v418)
              goto LABEL_640;
            v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v428 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
            goto LABEL_632;
          }
          break;
        case 5:
          v438 = *(unint64_t **)v418;
          do
          {
            v439 = __ldaxr(v438);
            v440 = v439 - 1;
          }
          while (__stlxr(v440, v438));
          if (!v440)
          {
            v428 = *(unint64_t **)v418;
            if (!*(_QWORD *)v418)
              goto LABEL_640;
            v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v428 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
LABEL_632:
            v423 = v428;
            v424 = 0x1020C405E66F15BLL;
            goto LABEL_639;
          }
          break;
        case 8:
          v441 = *(unint64_t **)v418;
          do
          {
            v442 = __ldaxr(v441);
            v443 = v442 - 1;
          }
          while (__stlxr(v443, v441));
          if (!v443)
          {
            v444 = *(unint64_t **)v418;
            if (!*(_QWORD *)v418)
              goto LABEL_640;
            boost::detail::shared_count::~shared_count((unsigned int **)v444 + 2);
            v423 = v444;
            v432 = -235920773;
            goto LABEL_638;
          }
          break;
        case 9:
          v429 = *(unint64_t **)v418;
          do
          {
            v430 = __ldaxr(v429);
            v431 = v430 - 1;
          }
          while (__stlxr(v431, v429));
          if (!v431)
          {
            if (*(_QWORD *)v418)
            {
              v423 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v418);
              v432 = 2071181815;
LABEL_638:
              v424 = v432 | 0x1030C4000000000;
LABEL_639:
              MEMORY[0x219A19A08](v423, v424);
            }
LABEL_640:
            *(_QWORD *)v418 = 0;
          }
          break;
        default:
          break;
      }
      *(_QWORD *)(v418 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)v418 = turi::FLEX_UNDEFINED;
      v445 = byte_254FF5584;
      v417[1].__r_.__value_.__s.__data_[4] = byte_254FF5584;
      v168 = v445 > 9;
      v446 = (1 << v445) & 0x33C;
      if (!v168 && v446 != 0)
      {
        v448 = *(unint64_t **)v418;
        do
          v449 = __ldaxr(v448);
        while (__stlxr(v449 + 1, v448));
      }
    }
    turi::flexible_type::operator=<double>((uint64_t)&__v.__first_[1].__r_.__value_.__l.__size_, (_QWORD *)(*a1 + 8 * a1[1] - 8));
    if (v540 >= 1)
      turi::flexible_type::operator=<double>((uint64_t)&__v.__first_[2], (_QWORD *)(*a3 + 8 * a3[1] - 8));
    if (!v562)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(__int128 *, std::__split_buffer<std::string> *))(*(_QWORD *)v562 + 48))(v562, &__v);
    v450 = v545;
    if (v546 != v545)
    {
      v451 = 0;
      do
      {
        v452 = v450 + 16 * v451;
        v453 = __v.__first_;
        if ((std::__split_buffer<std::string>::pointer)v452 != __v.__first_)
        {
          switch(__v.__first_->__r_.__value_.__s.__data_[12])
          {
            case 2:
              v454 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
              do
              {
                v455 = __ldaxr(v454);
                v456 = v455 - 1;
              }
              while (__stlxr(v456, v454));
              if (!v456)
              {
                v457 = v453->__r_.__value_.__r.__words[0];
                if (!v453->__r_.__value_.__r.__words[0])
                  goto LABEL_695;
                if (*(char *)(v457 + 31) < 0)
                  operator delete(*(void **)(v457 + 8));
                v458 = (_QWORD *)v457;
                v459 = 0x1012C404EF22A49;
                goto LABEL_694;
              }
              break;
            case 3:
              v471 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
              do
              {
                v472 = __ldaxr(v471);
                v473 = v472 - 1;
              }
              while (__stlxr(v473, v471));
              if (!v473)
              {
                v474 = v453->__r_.__value_.__r.__words[0];
                if (!v453->__r_.__value_.__r.__words[0])
                  goto LABEL_695;
                v475 = *(void **)(v474 + 8);
                if (v475)
                {
                  *(_QWORD *)(v474 + 16) = v475;
                  operator delete(v475);
                }
                v458 = (_QWORD *)v474;
                v459 = 0x1080C409938AC02;
                goto LABEL_694;
              }
              break;
            case 4:
              v460 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
              do
              {
                v461 = __ldaxr(v460);
                v462 = v461 - 1;
              }
              while (__stlxr(v462, v460));
              if (!v462)
              {
                v463 = v453->__r_.__value_.__r.__words[0];
                if (!v453->__r_.__value_.__r.__words[0])
                  goto LABEL_695;
                v556.__r_.__value_.__r.__words[0] = v463 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
                goto LABEL_687;
              }
              break;
            case 5:
              v476 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
              do
              {
                v477 = __ldaxr(v476);
                v478 = v477 - 1;
              }
              while (__stlxr(v478, v476));
              if (!v478)
              {
                v463 = v453->__r_.__value_.__r.__words[0];
                if (!v453->__r_.__value_.__r.__words[0])
                  goto LABEL_695;
                v556.__r_.__value_.__r.__words[0] = v463 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
LABEL_687:
                v458 = (_QWORD *)v463;
                v459 = 0x1020C405E66F15BLL;
                goto LABEL_694;
              }
              break;
            case 8:
              v479 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
              do
              {
                v480 = __ldaxr(v479);
                v481 = v480 - 1;
              }
              while (__stlxr(v481, v479));
              if (!v481)
              {
                v482 = v453->__r_.__value_.__r.__words[0];
                if (!v453->__r_.__value_.__r.__words[0])
                  goto LABEL_695;
                boost::detail::shared_count::~shared_count((unsigned int **)(v482 + 16));
                v458 = (_QWORD *)v482;
                v470 = -235920773;
                goto LABEL_693;
              }
              break;
            case 9:
              v464 = (unint64_t *)__v.__first_->__r_.__value_.__l.__data_;
              do
              {
                v465 = __ldaxr(v464);
                v466 = v465 - 1;
              }
              while (__stlxr(v466, v464));
              if (!v466)
              {
                v467 = (_QWORD *)v453->__r_.__value_.__r.__words[0];
                if (v453->__r_.__value_.__r.__words[0])
                {
                  v468 = (void *)v467[6];
                  if (v468)
                  {
                    v467[7] = v468;
                    operator delete(v468);
                  }
                  v469 = (void *)v467[3];
                  if (v469)
                  {
                    v467[4] = v469;
                    operator delete(v469);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v467 + 1));
                  v458 = v467;
                  v470 = 2071181815;
LABEL_693:
                  v459 = v470 | 0x1030C4000000000;
LABEL_694:
                  MEMORY[0x219A19A08](v458, v459);
                }
LABEL_695:
                v453->__r_.__value_.__r.__words[0] = 0;
              }
              break;
            default:
              break;
          }
          v483 = *(_QWORD *)v452;
          *(std::string::size_type *)((char *)v453->__r_.__value_.__r.__words + 5) = *(_QWORD *)(v452 + 5);
          v453->__r_.__value_.__r.__words[0] = v483;
          LODWORD(v483) = *(unsigned __int8 *)(v452 + 12);
          v453->__r_.__value_.__s.__data_[12] = v483;
          v168 = v483 > 9;
          v484 = (1 << v483) & 0x33C;
          if (!v168 && v484 != 0)
          {
            v486 = (unint64_t *)v453->__r_.__value_.__r.__words[0];
            do
              v487 = __ldaxr(v486);
            while (__stlxr(v487 + 1, v486));
          }
        }
        v488 = (uint64_t *)(v542 + 16 * v451);
        v489 = __v.__first_;
        v490 = &__v.__first_->__r_.__value_.__s.__data_[16];
        if (v488 != (uint64_t *)&__v.__first_->__r_.__value_.__r.__words[2])
        {
          switch(__v.__first_[1].__r_.__value_.__s.__data_[4])
          {
            case 2:
              v491 = *(unint64_t **)v490;
              do
              {
                v492 = __ldaxr(v491);
                v493 = v492 - 1;
              }
              while (__stlxr(v493, v491));
              if (!v493)
              {
                v494 = *(unint64_t **)v490;
                if (!*(_QWORD *)v490)
                  goto LABEL_745;
                if (*((char *)v494 + 31) < 0)
                  operator delete((void *)v494[1]);
                v495 = v494;
                v496 = 0x1012C404EF22A49;
                goto LABEL_744;
              }
              break;
            case 3:
              v508 = *(unint64_t **)v490;
              do
              {
                v509 = __ldaxr(v508);
                v510 = v509 - 1;
              }
              while (__stlxr(v510, v508));
              if (!v510)
              {
                v511 = *(unint64_t **)v490;
                if (!*(_QWORD *)v490)
                  goto LABEL_745;
                v512 = (void *)v511[1];
                if (v512)
                {
                  v511[2] = (unint64_t)v512;
                  operator delete(v512);
                }
                v495 = v511;
                v496 = 0x1080C409938AC02;
                goto LABEL_744;
              }
              break;
            case 4:
              v497 = *(unint64_t **)v490;
              do
              {
                v498 = __ldaxr(v497);
                v499 = v498 - 1;
              }
              while (__stlxr(v499, v497));
              if (!v499)
              {
                v500 = *(unint64_t **)v490;
                if (!*(_QWORD *)v490)
                  goto LABEL_745;
                v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v500 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
                goto LABEL_737;
              }
              break;
            case 5:
              v513 = *(unint64_t **)v490;
              do
              {
                v514 = __ldaxr(v513);
                v515 = v514 - 1;
              }
              while (__stlxr(v515, v513));
              if (!v515)
              {
                v500 = *(unint64_t **)v490;
                if (!*(_QWORD *)v490)
                  goto LABEL_745;
                v556.__r_.__value_.__r.__words[0] = (std::string::size_type)(v500 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
LABEL_737:
                v495 = v500;
                v496 = 0x1020C405E66F15BLL;
                goto LABEL_744;
              }
              break;
            case 8:
              v516 = *(unint64_t **)v490;
              do
              {
                v517 = __ldaxr(v516);
                v518 = v517 - 1;
              }
              while (__stlxr(v518, v516));
              if (!v518)
              {
                v519 = *(unint64_t **)v490;
                if (!*(_QWORD *)v490)
                  goto LABEL_745;
                boost::detail::shared_count::~shared_count((unsigned int **)v519 + 2);
                v495 = v519;
                v507 = -235920773;
                goto LABEL_743;
              }
              break;
            case 9:
              v501 = *(unint64_t **)v490;
              do
              {
                v502 = __ldaxr(v501);
                v503 = v502 - 1;
              }
              while (__stlxr(v503, v501));
              if (!v503)
              {
                v504 = *(unint64_t **)v490;
                if (*(_QWORD *)v490)
                {
                  v505 = (void *)v504[6];
                  if (v505)
                  {
                    v504[7] = (unint64_t)v505;
                    operator delete(v505);
                  }
                  v506 = (void *)v504[3];
                  if (v506)
                  {
                    v504[4] = (unint64_t)v506;
                    operator delete(v506);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v504 + 1));
                  v495 = v504;
                  v507 = 2071181815;
LABEL_743:
                  v496 = v507 | 0x1030C4000000000;
LABEL_744:
                  MEMORY[0x219A19A08](v495, v496);
                }
LABEL_745:
                *(_QWORD *)v490 = 0;
              }
              break;
            default:
              break;
          }
          v520 = *v488;
          *(_QWORD *)(v490 + 5) = *(uint64_t *)((char *)v488 + 5);
          *(_QWORD *)v490 = v520;
          LODWORD(v520) = *((unsigned __int8 *)v488 + 12);
          v489[1].__r_.__value_.__s.__data_[4] = v520;
          v168 = v520 > 9;
          v521 = (1 << v520) & 0x33C;
          if (!v168 && v521 != 0)
          {
            v523 = *(unint64_t **)v490;
            do
              v524 = __ldaxr(v523);
            while (__stlxr(v524 + 1, v523));
          }
        }
        turi::flexible_type::operator=<double>((uint64_t)&__v.__first_[1].__r_.__value_.__l.__size_, (_QWORD *)(*a1 + 8 * v451));
        if (v540 >= 1)
          turi::flexible_type::operator=<double>((uint64_t)&__v.__first_[2], (_QWORD *)(*a3 + 8 * v451));
        if (!v562)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(__int128 *, std::__split_buffer<std::string> *))(*(_QWORD *)v562 + 48))(v562, &__v);
        ++v451;
        v450 = v545;
      }
      while (v451 < (v546 - v545) >> 4);
    }
    v556.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
  }
  turi::sframe::close(a4);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v542;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v545;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  v525 = v566;
  if (v566 == v565)
  {
    v526 = 4;
    v525 = v565;
  }
  else
  {
    if (!v566)
      goto LABEL_762;
    v526 = 5;
  }
  (*(void (**)(void))(*v525 + 8 * v526))();
LABEL_762:
  v527 = v564;
  if (v564 == v563)
  {
    v528 = 4;
    v527 = v563;
  }
  else
  {
    if (!v564)
      goto LABEL_767;
    v528 = 5;
  }
  (*(void (**)(void))(*v527 + 8 * v528))();
LABEL_767:
  v529 = v562;
  if (v562 == &v560)
  {
    v530 = 4;
    v529 = &v560;
  }
  else
  {
    if (!v562)
      goto LABEL_772;
    v530 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v529 + 8 * v530))();
LABEL_772:
  if (v548)
  {
    v549 = (uint64_t)v548;
    operator delete(v548);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v551;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_21855DBB0(_Unwind_Exception *a1, uint64_t a2, turi::sframe *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, turi::sframe *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,std::__split_buffer<std::string> *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a34);
  if (*(char *)(v34 - 185) < 0)
    operator delete(*(void **)(v34 - 208));
  *(_QWORD *)(v34 - 208) = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 208));
  turi::sframe::~sframe(a11);
  _Unwind_Resume(a1);
}

void turi::supervised::add_na_std_err_to_coef(turi::supervised *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  void *__p[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 288))
    v5 = *((_QWORD *)this + 4);
  else
    v5 = 0;
  turi::sarray<turi::flexible_type>::sarray((uint64_t)__p, (uint64_t)&turi::FLEX_UNDEFINED, v5, 1uLL, 1);
  std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>,void>((uint64_t)__p, &v15);
  turi::sarray<turi::flexible_type>::~sarray((uint64_t)__p);
  v14 = v15;
  if (*((_QWORD *)&v15 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "stderr");
  turi::sframe::add_column((uint64_t)this, &v14, (uint64_t)__p, a2);
  if (v17 < 0)
    operator delete(__p[0]);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_21855E0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression::predict_single_example(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  double v5;
  _QWORD v6[3];
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6[0] = a2;
  v6[1] = a1 + 408;
  if (*(_QWORD *)(a1 + 416))
  {
    v4 = *(_QWORD *)(a1 + 408);
    v8 = *a2;
    v9 = v4;
    v10 = v6;
    v5 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v7);
  }
  else
  {
    v5 = 0.0;
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = v5;
}

uint64_t turi::supervised::linear_regression::predict_single_example@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double *v4;
  int *v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;

  v3 = a2[3];
  if (v3 < 1)
  {
    v6 = 0.0;
  }
  else
  {
    v4 = (double *)a2[1];
    v5 = (int *)a2[2];
    v6 = 0.0;
    do
    {
      v7 = *v4++;
      v8 = v7;
      v9 = *v5++;
      v6 = v6 + v8 * *(double *)(*(_QWORD *)(result + 408) + 8 * v9);
      --v3;
    }
    while (v3);
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = v6;
  return result;
}

double turi::supervised::linear_regression::set_coefs(uint64_t a1, __int128 **a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  double result;
  _OWORD *v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  double v19;

  v2 = (_QWORD *)(a1 + 408);
  v4 = *a2;
  v3 = (uint64_t)a2[1];
  if (*(_QWORD *)(a1 + 416) != v3)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 408), v3, 1);
    v3 = *(_QWORD *)(a1 + 416);
  }
  v7 = (_OWORD *)*v2;
  if (v3 >= 0)
    v8 = v3;
  else
    v8 = v3 + 1;
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    v10 = 0;
    v11 = (_OWORD *)*v2;
    v12 = v4;
    do
    {
      v13 = *v12++;
      result = *(double *)&v13;
      *v11++ = v13;
      v10 += 2;
    }
    while (v10 < v9);
  }
  v14 = __OFSUB__(v3, v9);
  v15 = v3 - v9;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    v16 = v8 >> 1;
    v17 = (double *)&v4[v8 >> 1];
    v18 = (double *)&v7[v16];
    do
    {
      v19 = *v17++;
      result = v19;
      *v18++ = v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

void turi::supervised::linear_regression::save_impl(turi::supervised::linear_regression *this, turi::oarchive *a2)
{
  turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((const void ***)this + 37, (uint64_t)a2);
  turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (turi::ml_metadata **)this + 47);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (uint64_t)this + 408);
  turi::option_manager::save((turi::supervised::linear_regression *)((char *)this + 224), a2);
}

turi::iarchive *turi::supervised::linear_regression::load_version(turi::supervised::linear_regression *this, turi::iarchive *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  assert_msg(a3 < 5, (uint64_t)"This model version cannot be loaded. Please re-save your state.", a3, a4, a5, a6, a7, a8, v12);
  if (a3 <= 3)
    turi::supervised::linear_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(a2, (turi::ml_metadata **)this + 47);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 51);
  return turi::option_manager::load((char **)this + 28, a2);
}

uint64_t turi::supervised::linear_regression::get_version(turi::supervised::linear_regression *this)
{
  return 4;
}

void turi::supervised::linear_regression::export_to_coreml(turi::supervised::linear_regression *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  std::string v6;
  char *v7;
  _BYTE v8[8];
  _QWORD *v9;
  std::string v10;
  _QWORD v11[5];
  _QWORD v12[6];

  v12[5] = *MEMORY[0x24BDAC8D0];
  v7 = (char *)(*(uint64_t (**)(turi::supervised::linear_regression *))(*(_QWORD *)this + 16))(this);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(&v10, "class", &v7);
  v4 = (*(uint64_t (**)(turi::supervised::linear_regression *))(*(_QWORD *)this + 48))(this);
  std::to_string(&v6, v4);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(v11, "version", (__int128 *)&v6);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v12, "short_description", "Linear regression model.");
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v8, &v10, 3);
  for (i = 80; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v10 + i);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  turi::export_linear_regression_as_model_asset((_QWORD *)this + 47, (uint64_t *)this + 51, (uint64_t)v8, a2);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v8, v9);
}

void sub_21855E4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, char a20)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

const char *turi::supervised::linear_regression::name(turi::supervised::linear_regression *this)
{
  return "regression_linear_regression";
}

std::string *turi::supervised::linear_regression::uid(turi::supervised::linear_regression *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(&turi::supervised::linear_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/linear_regression.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::supervised::linear_regression::uid(void)::_uid, &dword_217E69000);
  }
  return &turi::supervised::linear_regression::uid(void)::_uid;
}

void sub_21855E5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression::perform_registration(turi::supervised::linear_regression *this)
{
  if (!*((_BYTE *)this + 24))
  {
    turi::supervised::supervised_learning_model_base::perform_registration(this);
    *((_BYTE *)this + 24) = 1;
  }
}

_QWORD *turi::optimization::elastic_net::elastic_net(_QWORD *a1, __int128 **a2, __int128 **a3)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  _OWORD *v29;
  __int128 *v30;
  __int128 v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;

  *a1 = &unk_24D948D68;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  v6 = a1 + 3;
  v7 = (uint64_t)a2[1];
  if (v7)
  {
    v8 = *a2;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 1, v7, 1);
    v9 = a1[1];
    v10 = a1[2];
    if (v10 >= 0)
      v11 = a1[2];
    else
      v11 = v10 + 1;
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 >= 2)
    {
      v13 = 0;
      v14 = (_OWORD *)a1[1];
      v15 = v8;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        v13 += 2;
      }
      while (v13 < v12);
    }
    v17 = v10 <= v12;
    v18 = v10 - v12;
    if (!v17)
    {
      v19 = v11 >> 1;
      v20 = (uint64_t *)&v8[v11 >> 1];
      v21 = (_QWORD *)(v9 + 16 * v19);
      do
      {
        v22 = *v20++;
        *v21++ = v22;
        --v18;
      }
      while (v18);
    }
  }
  v24 = *a3;
  v23 = (uint64_t)a3[1];
  if (a1[4] != v23)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v6, v23, 1);
    v23 = a1[4];
  }
  v25 = (_OWORD *)*v6;
  if (v23 >= 0)
    v26 = v23;
  else
    v26 = v23 + 1;
  v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
  if (v23 >= 2)
  {
    v28 = 0;
    v29 = (_OWORD *)*v6;
    v30 = v24;
    do
    {
      v31 = *v30++;
      *v29++ = v31;
      v28 += 2;
    }
    while (v28 < v27);
  }
  v32 = __OFSUB__(v23, v27);
  v33 = v23 - v27;
  if (!((v33 < 0) ^ v32 | (v33 == 0)))
  {
    v34 = v26 >> 1;
    v35 = (uint64_t *)&v24[v26 >> 1];
    v36 = &v25[v34];
    do
    {
      v37 = *v35++;
      *v36++ = v37;
      --v33;
    }
    while (v33);
  }
  a1[5] = a2[1];
  return a1;
}

void sub_21855E760(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  free(*v1);
  free(*v2);
  _Unwind_Resume(a1);
}

void turi::optimization::elastic_net::~elastic_net(void **this)
{
  *this = &unk_24D948D68;
  free(this[3]);
  free(this[1]);
}

{
  *this = &unk_24D948D68;
  free(this[3]);
  free(this[1]);
  JUMPOUT(0x219A19A08);
}

double turi::optimization::elastic_net::compute_function_value(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v10;
  _QWORD *v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v10 = a1 + 8;
  v11 = a2;
  if (!a2[1])
  {
    v5 = 0.0;
    goto LABEL_5;
  }
  v4 = *a2;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = v4;
  v15 = &v10;
  v5 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run((uint64_t)v12);
  v6 = a2[1];
  v10 = a1 + 24;
  v11 = a2;
  if (!v6)
  {
LABEL_5:
    v8 = 0.0;
    return v5 + v8;
  }
  v7 = *a2;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = v7;
  v15 = &v10;
  v8 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run((uint64_t)v12);
  return v5 + v8;
}

_QWORD *turi::optimization::elastic_net::compute_gradient(_QWORD *result, float64x2_t **a2, float64x2_t **a3)
{
  _QWORD *v4;
  float64x2_t *v5;
  uint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  float64x2_t *v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  double *f64;
  double *v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t *v30;
  double v31;
  double v32;

  v4 = result;
  v5 = (float64x2_t *)result[3];
  v7 = *a2;
  v6 = (uint64_t)a2[1];
  if (a3[1] != (float64x2_t *)v6)
  {
    result = Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v6, 1);
    v6 = (uint64_t)a3[1];
  }
  v8 = *a3;
  if (v6 >= 0)
    v9 = v6;
  else
    v9 = v6 + 1;
  v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v6 >= 2)
  {
    v11 = 0;
    v12 = *a3;
    v13 = v5;
    v14 = v7;
    do
    {
      v15 = *v13++;
      v16 = v15;
      v17 = *v14++;
      v18 = vmulq_f64(v16, v17);
      *v12++ = vaddq_f64(v18, v18);
      v11 += 2;
    }
    while (v11 < v10);
  }
  v19 = __OFSUB__(v6, v10);
  v20 = v6 - v10;
  if (!((v20 < 0) ^ v19 | (v20 == 0)))
  {
    v21 = v9 >> 1;
    f64 = v7[v9 >> 1].f64;
    v23 = v5[v21].f64;
    v24 = v8[v21].f64;
    do
    {
      v25 = *v23++;
      v26 = v25;
      v27 = *f64++;
      *v24++ = v26 * v27 + v26 * v27;
      --v20;
    }
    while (v20);
  }
  v28 = v4[5];
  if (v28)
  {
    v29 = 0;
    v30 = *a3;
    while (1)
    {
      v31 = v30->f64[v29];
      if (v31 > 1.0e-10)
        break;
      if (v31 < -1.0e-10)
      {
        v32 = v31 - *(double *)(v4[1] + 8 * v29);
        goto LABEL_18;
      }
LABEL_19:
      if (v28 == ++v29)
        return result;
    }
    v32 = v31 + *(double *)(v4[1] + 8 * v29);
LABEL_18:
    v30->f64[v29] = v32;
    goto LABEL_19;
  }
  return result;
}

double turi::optimization::elastic_net::apply_proximal_operator(_QWORD *a1, double **a2, double *a3)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double result;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v3 = a1[5];
  if (v3)
  {
    v4 = *a2;
    v5 = (double *)a1[1];
    result = 0.0;
    v7 = (double *)a1[3];
    do
    {
      v8 = *v5++;
      v9 = v8;
      v10 = *v4 - *a3 * v8;
      if (v10 < 0.0)
        v10 = 0.0;
      v11 = -(*v4 + *a3 * v9);
      if (v11 < 0.0)
        v11 = 0.0;
      v12 = v10 - v11;
      *v4 = v12;
      v13 = *v7++;
      *v4++ = v12 / ((*a3 + *a3) * v13 + 1.0);
      --v3;
    }
    while (v3);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t *v7;
  float64x2_t v8;
  int64_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  double v22;
  double v23;
  double v24;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 8);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0] * fabs(**(double **)(a1 + 32));
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(float64x2_t **)(a1 + 32);
  v8 = vmulq_f64(*v4, vabsq_f64(*v7));
  if (v1 >= 4)
  {
    v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = vmulq_f64(v4[1], vabsq_f64(v7[1]));
    if ((unint64_t)v1 >= 8)
    {
      v11 = v7 + 3;
      v12 = v4 + 3;
      v13 = 4;
      do
      {
        v8 = vaddq_f64(v8, vmulq_f64(v12[-1], vabsq_f64(v11[-1])));
        v14 = *v12;
        v12 += 2;
        v15 = v14;
        v16 = *v11;
        v11 += 2;
        v10 = vaddq_f64(v10, vmulq_f64(v15, vabsq_f64(v16)));
        v13 += 4;
      }
      while (v13 < v9);
    }
    v8 = vaddq_f64(v10, v8);
    if (v6 > v9)
      v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), vabsq_f64(*(float64x2_t *)((char *)v7 + 8 * v9))));
  }
  result = vaddvq_f64(v8);
  v17 = v1 <= v6;
  v18 = v1 - v6;
  if (!v17)
  {
    v19 = v3 >> 1;
    f64 = v4[v19].f64;
    v21 = v7[v19].f64;
    do
    {
      v22 = *v21++;
      v23 = fabs(v22);
      v24 = *f64++;
      result = result + v24 * v23;
      --v18;
    }
    while (v18);
  }
  return result;
}

double **Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>,Eigen::Diagonal<Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>> const,0> const>>(double **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  _QWORD v10[7];

  v10[6] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  if (*(_QWORD *)(*a2 + 16) >= *(_QWORD *)(*a2 + 8))
    v4 = *(_QWORD *)(*a2 + 8);
  else
    v4 = *(_QWORD *)(*a2 + 16);
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v4, 1);
  Eigen::internal::unary_evaluator<Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::internal::IndexBased,double>::unary_evaluator(v10, a2);
  if (*(_QWORD *)(*a2 + 16) >= *(_QWORD *)(*a2 + 8))
    v5 = *(_QWORD *)(*a2 + 8);
  else
    v5 = *(_QWORD *)(*a2 + 16);
  if (a1[1] != (double *)v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v5, 1);
    v5 = (uint64_t)a1[1];
  }
  if (v5 >= 1)
  {
    v6 = *a1;
    v7 = (double *)v10[0];
    v8 = 8 * v10[1] + 8;
    do
    {
      *v6++ = sqrt(*v7);
      v7 = (double *)((char *)v7 + v8);
      --v5;
    }
    while (v5);
  }
  free((void *)v10[2]);
  return a1;
}

void sub_21855EC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void **v14;

  free(a14);
  free(*v14);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::internal::unary_evaluator<Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::internal::IndexBased,double>::unary_evaluator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  *a1 = 0;
  a1[1] = -1;
  v4 = *(_QWORD *)(*a2 + 8);
  v5 = *(_QWORD *)(*a2 + 16);
  a1[2] = 0;
  v6 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1 + 2, v5 * v4, v4, v5);
  v8 = a1[3];
  *a1 = a1[2];
  a1[1] = v8;
  Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::internal::assign_op<double,double>,Eigen::internal::Dense2Dense,void>::run(v6, a2);
  return a1;
}

void sub_21855ED2C(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::internal::assign_op<double,double>,Eigen::internal::Dense2Dense,void>::run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v8;
  std::bad_alloc *exception;
  std::bad_alloc *v10;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 8);
  v5 = *(_QWORD *)(*a2 + 16);
  if (a1[1] != v4 || a1[2] != v5)
  {
    if (v4)
      v8 = v5 == 0;
    else
      v8 = 1;
    if (!v8 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v10 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v10, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v5 * v4, v4, v5);
    v3 = *a2;
  }
  Eigen::internal::compute_inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,-1>::run(v3, a1);
}

void Eigen::internal::compute_inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,-1>::run(uint64_t a1, uint64_t *a2)
{
  void *v3[9];
  void *v4;
  __int128 v5;
  void *v6;
  void *v7;
  __int128 v8;
  _QWORD v9[2];

  Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>((uint64_t)v3, a1);
  Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>>::Inverse((uint64_t)&v4, (uint64_t)v3);
  v8 = v5;
  v9[0] = &v4;
  v9[1] = &v8;
  Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>,Eigen::internal::assign_op<double,double>,Eigen::internal::Dense2Dense,void>::run(a2, (uint64_t)v9);
  free(v7);
  free(v6);
  free(v4);
  free(v3[5]);
  free(v3[3]);
  free(v3[0]);
}

void sub_21855EE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>>::~Inverse(&a18);
  Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>>::~Inverse(&a9);
  _Unwind_Resume(a1);
}

void **Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>>::~Inverse(void **a1)
{
  free(a1[5]);
  free(a1[3]);
  free(*a1);
  return a1;
}

uint64_t Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize((_QWORD *)a1, v5 * v4, v4, v5);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 24), v7);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 40), v8);
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 0;
  Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::compute<Eigen::Matrix<double,-1,-1,0,-1,-1>>((_QWORD *)a1, (__int128 **)a2);
  return a1;
}

void sub_21855EF78(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;

  free(*v3);
  free(*v2);
  free(*v1);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::compute<Eigen::Matrix<double,-1,-1,0,-1,-1>>(_QWORD *a1, __int128 **a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  BOOL v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  _OWORD *v13;
  __int128 *v14;
  __int128 v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  std::bad_alloc *exception;
  std::bad_alloc *v24;

  v4 = *a2;
  v3 = (uint64_t)a2[1];
  v5 = (uint64_t)a2[2];
  if (a1[1] != v3 || a1[2] != v5)
  {
    if (v3)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v5 < v3)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v24 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v24, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v5 * v3, v3, v5);
    v3 = a1[1];
    v5 = a1[2];
  }
  v8 = (_OWORD *)*a1;
  v9 = v3 * v5;
  if (v3 * v5 >= 0)
    v10 = v3 * v5;
  else
    v10 = v9 + 1;
  v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if (v9 >= 2)
  {
    v12 = 0;
    v13 = (_OWORD *)*a1;
    v14 = v4;
    do
    {
      v15 = *v14++;
      *v13++ = v15;
      v12 += 2;
    }
    while (v12 < v11);
  }
  v16 = v9 <= v11;
  v17 = v9 - v11;
  if (!v16)
  {
    v18 = v10 >> 1;
    v19 = (uint64_t *)&v4[v10 >> 1];
    v20 = &v8[v18];
    do
    {
      v21 = *v19++;
      *v20++ = v21;
      --v17;
    }
    while (v17);
  }
  Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::compute((uint64_t)a1);
  return a1;
}

uint64_t *Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::compute(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  char v5;
  uint64_t *result;
  _QWORD *v7[3];
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = a1;
  v7[0] = (_QWORD *)a1;
  v8 = &v9;
  v2 = Eigen::internal::redux_evaluator<Eigen::PartialReduxExpr<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::internal::member_sum<double>,0>>::coeffByOuterInner(v7, 0, 0);
  if (*(uint64_t *)(*((_QWORD *)v8 + 1) + 16) >= 2)
  {
    v3 = 1;
    do
    {
      v4 = Eigen::internal::redux_evaluator<Eigen::PartialReduxExpr<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::internal::member_sum<double>,0>>::coeffByOuterInner(v7, 0, v3);
      if (v2 < v4)
        v2 = v4;
      ++v3;
    }
    while (v3 < *(_QWORD *)(*((_QWORD *)v8 + 1) + 16));
  }
  *(double *)(a1 + 56) = v2;
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 8));
  LODWORD(v7[0]) = 0;
  Eigen::internal::partial_lu_impl<double,0,int>::blocked_lu(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 40), v7, 256);
  if (((uint64_t)v7[0] & 1) != 0)
    v5 = -1;
  else
    v5 = 1;
  *(_BYTE *)(a1 + 64) = v5;
  result = Eigen::PermutationBase<Eigen::PermutationMatrix<-1,-1,int>>::operator=<Eigen::Transpositions<-1,-1,int>>((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40));
  *(_BYTE *)(a1 + 65) = 1;
  return result;
}

double Eigen::internal::redux_evaluator<Eigen::PartialReduxExpr<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::internal::member_sum<double>,0>>::coeffByOuterInner(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[6];
  _QWORD v7[9];

  v7[8] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v6[0] = v3;
  v6[2] = 0;
  v6[3] = a3;
  v4 = v3[1];
  v6[4] = v4;
  if (!v4)
    return 0.0;
  v7[2] = *v3;
  v7[3] = v4;
  v7[4] = 0;
  v7[5] = a3;
  v7[6] = v4 * a3;
  v7[7] = v6;
  return Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Block<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,-1,1,true>>,3,0>::run(v7);
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Block<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,-1,1,true>>,3,0>::run(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float64x2_t *v6;
  double result;
  int64_t v8;
  float64x2_t v9;
  int64_t v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t *v13;
  uint64_t v14;
  float64x2_t v15;
  BOOL v16;
  uint64_t v17;
  double *v18;
  double v19;

  v1 = a1[6];
  v2 = *(_QWORD *)(a1[7] + 32);
  if (v2 >= 0)
    v3 = *(_QWORD *)(a1[7] + 32);
  else
    v3 = v2 + 3;
  if (v2 >= 0)
    v4 = *(_QWORD *)(a1[7] + 32);
  else
    v4 = v2 + 1;
  v5 = a1[2];
  v6 = (float64x2_t *)(v5 + 8 * v1);
  if ((unint64_t)(v2 + 1) < 3)
    return fabs(v6->f64[0]);
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v9 = vabsq_f64(*v6);
  if (v2 >= 4)
  {
    v10 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = (float64x2_t *)(v5 + 8 * v1);
    v12 = vabsq_f64(v11[1]);
    if ((unint64_t)v2 >= 8)
    {
      v13 = v11 + 3;
      v14 = 4;
      do
      {
        v9 = vaddq_f64(v9, vabsq_f64(v13[-1]));
        v15 = *v13;
        v13 += 2;
        v12 = vaddq_f64(v12, vabsq_f64(v15));
        v14 += 4;
      }
      while (v14 < v10);
    }
    v9 = vaddq_f64(v12, v9);
    if (v8 > v10)
      v9 = vaddq_f64(v9, vabsq_f64(*(float64x2_t *)(v5 + 8 * (v1 + v10))));
  }
  result = vaddvq_f64(v9);
  v16 = v2 <= v8;
  v17 = v2 - v8;
  if (!v16)
  {
    v18 = (double *)(v5 + 16 * (v4 >> 1) + 8 * v1);
    do
    {
      v19 = *v18++;
      result = result + fabs(v19);
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t Eigen::internal::partial_lu_impl<double,0,int>::blocked_lu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  uint64_t v79[3];
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v107 = a3;
  *((_QWORD *)&v107 + 1) = a1;
  v108 = a2;
  *(_QWORD *)&v109 = a3;
  *((_QWORD *)&v109 + 1) = a4;
  v110 = a2;
  v111 = 0uLL;
  v112 = a4;
  if (a2 >= a1)
    v8 = a1;
  else
    v8 = a2;
  if (v8 > 16)
  {
    v10 = 0;
    v11 = 0;
    v12 = ((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF0;
    if (!v12)
      v12 = 8;
    v48 = v12;
    if (v12 >= a7)
      v13 = a7;
    else
      v13 = v12;
    *a6 = 0;
    v46 = a7;
    v14 = 8 * a4;
    v43 = 8 * v13;
    v44 = v13;
    v15 = v8;
    v53 = -1;
    v45 = v8;
    while (1)
    {
      v55 = v10;
      v105 = v107;
      v103 = v109;
      v114 = v111;
      v95 = v107;
      v97 = v109;
      v99 = v111;
      v91 = v107;
      v89 = v109;
      v113 = v111;
      v16 = v48;
      if (v48 >= a7)
        v16 = a7;
      v54 = v15;
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v13 >= v8 - v11)
        v18 = v8 - v11;
      else
        v18 = v13;
      v19 = a1 - v11;
      v20 = v18 + v11;
      v21 = v8 - (v18 + v11);
      v22 = (v18 + v11) * a4;
      v23 = a3 + 8 * v11;
      v106 = v108;
      v104 = v110;
      *(_QWORD *)&v93 = v23 + 8 * v22;
      *((_QWORD *)&v93 + 1) = v18;
      v96 = v108;
      v98 = v110;
      v100 = v112;
      v94 = v21;
      *(_QWORD *)&v101 = v11;
      *((_QWORD *)&v101 + 1) = v18 + v11;
      v102 = v112;
      v92 = v108;
      v90 = v110;
      v50 = a3 + 8 * (v18 + v11);
      v79[0] = v50 + 8 * v22;
      v79[1] = a1 - v11 - v18;
      v80 = v107;
      v81 = v108;
      v82 = v109;
      v83 = v110;
      v85 = v112;
      v84 = v111;
      v52 = v11 * a4;
      v79[2] = v21;
      v86 = v18 + v11;
      v87 = v18 + v11;
      v88 = v112;
      v78 = 0;
      v24 = Eigen::internal::partial_lu_impl<double,0,int>::blocked_lu(a1 - v11, v18, a3 + 8 * (v11 * a4 + v11));
      v25 = v53;
      if (v53 == -1 && v24 > -1)
        v25 = v24 + v11;
      v53 = v25;
      *a6 += v78;
      if (v11 < v20)
        break;
      v27 = v55;
      if (v19 != v18)
        goto LABEL_38;
LABEL_41:
      v13 = v44;
      v11 += v44;
      v10 = v27 + v43;
      v15 = v54 - v44;
      v8 = v45;
      a7 = v46;
      if (v11 >= v45)
        return v53;
    }
    v27 = v55;
    v28 = v55;
    v29 = v11;
    do
    {
      v30 = *(_DWORD *)(a5 + 4 * v29);
      *(_DWORD *)(a5 + 4 * v29) = v30 + v11;
      if (v11 >= 1)
      {
        v31 = (int)v11 + v30;
        v32 = a3;
        v33 = v11;
        do
        {
          v34 = *(_QWORD *)(v32 + v28);
          *(_QWORD *)(v32 + v28) = *(_QWORD *)(v32 + 8 * v31);
          *(_QWORD *)(v32 + 8 * v31) = v34;
          v32 += v14;
          --v33;
        }
        while (v33);
      }
      ++v29;
      v28 += 8;
    }
    while (v29 < v20);
    v35 = v55;
    v36 = v11;
    if (v19 == v18)
      goto LABEL_41;
    do
    {
      if (v21 >= 1)
      {
        v37 = *(int *)(a5 + 4 * v36);
        v38 = a3 + v14 * (v17 + v11);
        v39 = v54 - v17;
        do
        {
          v40 = *(_QWORD *)(v38 + v35);
          *(_QWORD *)(v38 + v35) = *(_QWORD *)(v38 + 8 * v37);
          *(_QWORD *)(v38 + 8 * v37) = v40;
          v38 += v14;
          --v39;
        }
        while (v39);
      }
      ++v36;
      v35 += 8;
    }
    while (v36 < v20);
LABEL_38:
    v56 = v23 + 8 * v52;
    v57 = v18;
    v59 = v105;
    v60 = v106;
    v61 = v103;
    v62 = v104;
    v41 = a4;
    v63 = v114;
    v58 = v18;
    v64 = a4;
    v65 = v11;
    v66 = v11;
    v67 = a4;
    if (v18)
    {
      Eigen::internal::triangular_solver_selector<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,1,5,0,-1>::run(&v56, (uint64_t *)&v93);
      v41 = a4;
    }
    v56 = v50 + 8 * v52;
    v57 = a1 - v11 - v18;
    v59 = v91;
    v60 = v92;
    v61 = v89;
    v62 = v90;
    v63 = v113;
    v58 = v18;
    v64 = v41;
    v65 = v18 + v11;
    v66 = v11;
    v67 = v41;
    v69 = v94;
    v68 = v93;
    v71 = v96;
    v70 = v95;
    v73 = v98;
    v72 = v97;
    v75 = v100;
    v74 = v99;
    v77 = v102;
    v76 = v101;
    Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,8>::subTo<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>(v79, (uint64_t)&v56, (uint64_t)&v68);
    v27 = v55;
    goto LABEL_41;
  }
  return Eigen::internal::partial_lu_impl<double,0,int>::unblocked_lu((uint64_t *)&v107, a5, a6);
}

uint64_t Eigen::internal::partial_lu_impl<double,0,int>::unblocked_lu(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[6];
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[9];

  v3 = a1[1];
  v53 = a1[2];
  if (v53 >= v3)
    v4 = a1[1];
  else
    v4 = a1[2];
  *a3 = 0;
  if (v4 >= 1)
  {
    v7 = 0;
    v8 = 0;
    v51 = a1 + 3;
    v52 = a1 + 7;
    v9 = -v3;
    v10 = 1 - v3;
    v54 = -1;
    v11 = v3;
    while (1)
    {
      v12 = v3 + ~v8;
      v13 = a1[9];
      v14 = v13 * v8;
      v15 = *a1;
      v16 = a1[1];
      v17 = *a1 + 8 * v13 * v8;
      v18 = *(double *)(v17 + 8 * (v16 - (v3 - v8)));
      v19 = v13 * v7;
      if (v3 - v8 < 2)
      {
        *(_DWORD *)(a2 + 4 * v8) = v8;
        if (v18 == 0.0)
          goto LABEL_35;
      }
      else
      {
        v20 = 0;
        v21 = fabs(v18);
        v22 = 1;
        v23 = v21;
        do
        {
          v24 = fabs(*(double *)(v15 + v19 + 8 * (v16 + v9) + 8 * v22));
          if (v24 > v23)
          {
            v20 = v22;
            v21 = v24;
            v23 = v24;
          }
          ++v22;
        }
        while (v11 != v22);
        *(_DWORD *)(a2 + 4 * v8) = v20 + v8;
        if (v21 == 0.0)
        {
LABEL_35:
          v41 = v54;
          if (v54 == -1)
            v41 = v8;
          v54 = v41;
          goto LABEL_38;
        }
        if (v20)
        {
          v25 = a1[2];
          if (v25 >= 1)
          {
            v26 = v8 + v20;
            v27 = 8 * a1[9];
            v28 = v15;
            do
            {
              v29 = *(_QWORD *)(v28 + v7);
              *(_QWORD *)(v28 + v7) = *(_QWORD *)(v28 + 8 * v26);
              *(_QWORD *)(v28 + 8 * v26) = v29;
              v28 += v27;
              --v25;
            }
            while (v25);
          }
          ++*a3;
        }
      }
      v30 = v17 + 8 * (v16 - v12);
      v31 = *(uint64_t *)(v15 + 8 * (v14 + v8));
      v32 = (v30 >> 3) & 1;
      if (v32 >= v12)
        v32 = v3 + ~v8;
      if ((v30 & 7) != 0)
        v32 = v3 + ~v8;
      v33 = v12 - v32;
      if (v12 >= v32)
        v34 = v12 - v32;
      else
        v34 = v33 + 1;
      if (v32 >= 1)
      {
        v35 = (double *)(v15 + v19 + 8 * (v16 + v10));
        v36 = v32;
        do
        {
          *v35 = *v35 / *(double *)&v31;
          ++v35;
          --v36;
        }
        while (v36);
      }
      v37 = (v34 & 0xFFFFFFFFFFFFFFFELL) + v32;
      if (v33 > 1)
      {
        v38 = (float64x2_t)vdupq_lane_s64(v31, 0);
        v39 = (float64x2_t *)(v15 + v19 + 8 * v32 + 8 * (v16 + v10));
        do
        {
          *v39 = vdivq_f64(*v39, v38);
          ++v39;
          v32 += 2;
        }
        while (v32 < v37);
      }
      if (v37 < v12)
      {
        v40 = v15 + v19 + 8 * (v16 + v10);
        do
        {
          *(double *)(v40 + 8 * v37) = *(double *)(v40 + 8 * v37) / *(double *)&v31;
          ++v37;
        }
        while (v11 - 1 != v37);
      }
LABEL_38:
      if (v8 < v3 - 1)
      {
        v42 = v53 + ~v8;
        v43 = *a1;
        v44 = a1[9];
        v45 = *a1 + 8 * v44 * v8;
        v71 = *(_OWORD *)v51;
        v72 = v51[2];
        v46 = a1[1];
        v47 = a1[2];
        v81 = *(_OWORD *)a1;
        v82 = v47;
        v83 = v71;
        v84 = v72;
        v48 = (v47 - v42) * v44;
        v65 = v45 + 8 * (v46 - v12);
        v66 = v3 + ~v8;
        v67 = v45;
        v68 = v46;
        v70 = a1[2];
        v69 = *(_OWORD *)a1;
        v73 = *(_OWORD *)v52;
        v74 = v44;
        v75 = 0;
        v76 = v8;
        v77 = v44;
        v78 = v46 - v12;
        v79 = v44;
        v80[0] = v43 + 8 * v8 + 8 * v48;
        v80[2] = v42;
        v80[3] = v43 + 8 * v8;
        v80[5] = v47;
        v85 = v73;
        v86 = v44;
        v87 = v8;
        v88 = 0;
        v89 = 1;
        v90 = v47 - v42;
        v91 = 1;
        v55[0] = v43 + 8 * (v46 - v12) + 8 * v48;
        v55[1] = v66;
        v56 = *(_OWORD *)a1;
        v57 = a1[2];
        v58 = *(_OWORD *)v51;
        v59 = v51[2];
        v61 = v52[2];
        v60 = *(_OWORD *)v52;
        v55[2] = v42;
        v62 = v46 - v12;
        v63 = v47 - v42;
        v64 = v61;
        Eigen::internal::outer_product_selector_run<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,5>::sub>(v55, &v65, (uint64_t)v80, (uint64_t)v92);
      }
      ++v8;
      --v11;
      v7 += 8;
      ++v9;
      ++v10;
      if (v8 == v4)
        return v54;
    }
  }
  return -1;
}

void Eigen::internal::outer_product_selector_run<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,5>::sub>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a3;
  v5 = *(_QWORD *)(a3 + 120);
  v21 = a2[1];
  v22 = *a2;
  v62 = *(_OWORD *)(a2 + 3);
  v60 = *((_OWORD *)a2 + 3);
  v61 = a2[8];
  v40 = *(_OWORD *)(a2 + 9);
  v41 = a2[11];
  v6 = *(_OWORD *)(a2 + 13);
  v59 = a2[15];
  v58 = v6;
  v7 = *((_OWORD *)a2 + 8);
  v39 = a2[18];
  v38 = v7;
  v20 = a1[2];
  if (v20 >= 1)
  {
    v9 = 0;
    v19 = a2[19];
    v18 = a2[21];
    v17 = a1 + 3;
    v16 = a1 + 6;
    v10 = a1 + 10;
    v11 = a1 + 13;
    v15 = 8 * v5;
    do
    {
      v12 = a1[1];
      v13 = a1[2];
      v24[0] = *a1 + 8 * a1[15] * v9;
      v24[1] = v12;
      v25 = *(_OWORD *)a1;
      v26 = v13;
      v27 = *(_OWORD *)v17;
      v28 = v17[2];
      v30 = v16[2];
      v29 = *(_OWORD *)v16;
      v14 = *(_OWORD *)v10;
      v32 = v10[2];
      v31 = v14;
      v34 = v11[2];
      v33 = *(_OWORD *)v11;
      v35 = 0;
      v36 = v9;
      v37 = v34;
      *(_QWORD *)&v14 = *v4;
      v43 = v21;
      v44 = v14;
      v45 = v22;
      v46 = v21;
      v47 = v62;
      v48 = v60;
      v49 = v61;
      v50 = v40;
      v51 = v41;
      v53 = v59;
      v52 = v58;
      v55 = v39;
      v54 = v38;
      v56 = v19;
      v57 = v18;
      Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,5>::sub::operator()<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false> const>>(a4, v24, (uint64_t)v42);
      ++v9;
      v4 = (_QWORD *)((char *)v4 + v15);
    }
    while (v20 != v9);
  }
}

void Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,5>::sub::operator()<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false> const>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  double v14;
  int64_t v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  unint64_t v20;
  uint64_t v21;
  double *v22;
  double *v23;
  double v24;

  v3 = *(double *)(a3 + 24);
  v4 = *(_QWORD *)(a3 + 32);
  v5 = (double *)*a2;
  v6 = a2[1];
  v7 = (*a2 >> 3) & 1;
  if (v7 >= v6)
    v7 = a2[1];
  if ((v5 & 7) != 0)
    v7 = a2[1];
  v8 = v6 - v7;
  if (v6 >= v7)
    v9 = v6 - v7;
  else
    v9 = v8 + 1;
  v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v7 >= 1)
  {
    v11 = (double *)*a2;
    v12 = *(double **)(a3 + 32);
    v13 = v7;
    do
    {
      v14 = *v12++;
      *v11 = *v11 - v3 * v14;
      ++v11;
      --v13;
    }
    while (v13);
  }
  v15 = v10 + v7;
  if (v8 > 1)
  {
    v16 = (float64x2_t *)(v4 + 8 * v7);
    v17 = v7;
    v18 = (float64x2_t *)&v5[v7];
    do
    {
      v19 = *v16++;
      *v18 = vsubq_f64(*v18, vmulq_n_f64(v19, v3));
      ++v18;
      v17 += 2;
    }
    while (v17 < v15);
  }
  if (v15 < v6)
  {
    v20 = v8 - v10;
    v21 = 16 * (v9 >> 1) + 8 * v7;
    v22 = (double *)(v4 + v21);
    v23 = (double *)((char *)v5 + v21);
    do
    {
      v24 = *v22++;
      *v23 = *v23 - v3 * v24;
      ++v23;
      --v20;
    }
    while (v20);
  }
}

void Eigen::internal::triangular_solver_selector<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,1,5,0,-1>::run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[3];
  uint64_t v12;

  v4 = a1[1];
  v5 = a2[1];
  v6 = a2[2];
  v7 = 0;
  v8 = 0;
  v9 = v5;
  v10 = v6;
  v11[0] = v4;
  v12 = v6;
  Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,4,long>(v11, &v9, &v12, 1);
  v11[1] = v11[0] * v9;
  v11[2] = v10 * v11[0];
  Eigen::internal::triangular_solve_matrix<double,long,1,5,false,0,0>::run(v4, v6, *a1, a1[15], *a2, a2[15], (unint64_t *)&v7);
  free(v7);
  free(v8);
}

void sub_2185600E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10)
{
  free(a9);
  free(a10);
  _Unwind_Resume(a1);
}

void Eigen::internal::triangular_solve_matrix<double,long,1,5,false,0,0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  size_t v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::bad_alloc *exception;
  std::bad_alloc *v74;
  std::bad_alloc *v75;
  std::bad_alloc *v76;
  std::bad_alloc *v77;
  std::bad_alloc *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  char v120;
  uint64_t v121;

  v104 = a4;
  v102 = a3;
  v121 = *MEMORY[0x24BDAC8D0];
  v7 = a7[4];
  if ((uint64_t)a7[2] >= a1)
    v8 = a1;
  else
    v8 = a7[2];
  v9 = v8 * v7;
  if ((unint64_t)(v8 * v7) >> 61)
    goto LABEL_81;
  v14 = a1;
  v15 = *a7;
  v16 = v15;
  v99 = v8;
  if (v15)
    goto LABEL_10;
  v17 = 8 * v9;
  if (v9 <= 0x4000)
  {
    v18 = (char *)&v79 - ((MEMORY[0x24BDAC7A8](v17, v17 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v18, v19);
    v15 = 0;
    v20 = (unint64_t)(v18 + 15);
    v8 = v99;
    v16 = v20 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_10;
  }
  v21 = malloc_type_malloc(v17, 0x1E76AA36uLL);
  if (!v21)
  {
LABEL_81:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v74 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v74, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v16 = (unint64_t)v21;
  v15 = *a7;
LABEL_10:
  v22 = v7 * a2;
  v103 = v16;
  if (v15)
    v23 = 0;
  else
    v23 = (void *)v16;
  v81 = v23;
  if (v22 >> 61)
  {
    v75 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v76 = std::bad_alloc::bad_alloc(v75);
    __cxa_throw(v76, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v24 = a7[1];
  v25 = v24;
  if (!v24)
  {
    v26 = 8 * v22;
    if (v22 > 0x4000)
    {
      v25 = (uint64_t)malloc_type_malloc(v26, 0x1E76AA36uLL);
      if (!v25)
      {
        v77 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v78 = std::bad_alloc::bad_alloc(v77);
        __cxa_throw(v78, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v24 = a7[1];
    }
    else
    {
      v27 = (char *)&v79 - ((MEMORY[0x24BDAC7A8](v26, v26 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
      bzero(v27, v28);
      v24 = 0;
      v25 = (unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  if (v24)
    v29 = 0;
  else
    v29 = (void *)v25;
  v80 = v29;
  if ((v30 & 1) == 0
  {
    Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes = xmmword_2186F1960;
    qword_254FD4068 = 0x80000;
  }
  v82 = v7 * a2;
  v83 = v9;
  v98 = v25;
  if (a2 < 1)
  {
    v32 = 0;
  }
  else
  {
    if (a6 <= v14)
      v31 = v14;
    else
      v31 = a6;
    v32 = (*((_QWORD *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1)
         / (unint64_t)(32 * v31)
         + (((*((_QWORD *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1)
            / (unint64_t)(32 * v31)) & 0x8000000000000000) != 0
          ? 3uLL
          : 0)) & 0xFFFFFFFFFFFFFFFCLL;
  }
  if (v32 <= 4)
    v33 = 4;
  else
    v33 = v32;
  if (v14 >= 1)
  {
    v34 = 0;
    v89 = a5 + 8;
    v85 = 8 * v7;
    v93 = 8 * a6 * v33;
    v92 = v102 + 8;
    v84 = 8 * (v7 + v7 * v104);
    v106 = 48 * v104 + 48;
    v35 = 8 * v104 + 8;
    v90 = v14 - v7;
    v95 = a5 + 8 * v7;
    v97 = 8 * v8;
    v96 = v102 + 8 * v7;
    v36 = v14;
    v94 = v33;
    v100 = a2;
    v86 = v14;
    v88 = v7;
    v105 = v35;
    while (1)
    {
      v87 = v36;
      if (v7 >= v36)
        v37 = v36;
      else
        v37 = v7;
      v91 = v37;
      if (v7 >= v14 - v34)
        v38 = v14 - v34;
      else
        v38 = v7;
      v111 = v38;
      if (a2 >= 1)
      {
        v39 = 0;
        v101 = v89;
        v108 = v34;
        do
        {
          v40 = a2 - v39;
          if (v33 >= v40)
            v41 = v40;
          else
            v41 = v33;
          v112 = v41;
          if (v38 >= 1)
          {
            v42 = 0;
            v43 = v112 + v39;
            v109 = v39 * a6;
            v110 = v98 + 8 * v39 * v38;
            v44 = v92;
            v45 = v101;
            v46 = v91;
            do
            {
              v113 = v46 - 6;
              if (v46 >= 6)
                v46 = 6;
              if (v46 <= 1)
                v46 = 1;
              if (v38 - v42 >= 6)
                v47 = 6;
              else
                v47 = v38 - v42;
              v48 = v42 + v34;
              v49 = v38 - v42;
              if (v38 - v42 >= 1)
              {
                v50 = 0;
                v51 = v44;
                v52 = v45;
                do
                {
                  if (v40 >= 1)
                  {
                    v53 = v47 + ~v50;
                    v54 = v52;
                    v55 = v39;
                    do
                    {
                      if (v53 >= 1)
                      {
                        v56 = 0;
                        v57 = -*(double *)(a5 + 8 * (v55 * a6 + v48 + v50));
                        do
                        {
                          *(double *)(v54 + 8 * v56) = *(double *)(v54 + 8 * v56) + v57 * *(double *)(v51 + 8 * v56);
                          ++v56;
                        }
                        while (v56 < v53);
                      }
                      ++v55;
                      v54 += 8 * a6;
                    }
                    while (v55 < v43);
                  }
                  ++v50;
                  v52 += 8;
                  v51 += v35;
                }
                while (v50 != v46);
              }
              v114 = v45;
              v115 = v44;
              v116 = a5 + 8 * (v48 + v109);
              v117 = a6;
              v58 = v42;
              Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,4,0,false,true>::operator()((uint64_t)&v118, v110, &v116, v47, v112, v38, v42);
              v59 = v49 - v47;
              v34 = v108;
              if (v49 - v47 >= 1)
              {
                v60 = v47 + v48;
                v61 = v47 + v48 + v48 * v104;
                v62 = v103;
                v116 = v102 + 8 * v61;
                v117 = v104;
                v107 = v59;
                Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v119, v103, &v116, v47, v59);
                v116 = a5 + 8 * (v60 + v109);
                v117 = a6;
                Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(-1.0, (uint64_t)&v120, &v116, v62, v110, v107, v47, v112, v47, v111, 0, v58);
                v34 = v108;
              }
              v42 = v58 + 6;
              v45 = v114 + 48;
              v35 = v105;
              v44 = v115 + v106;
              v46 = v113;
              v38 = v111;
            }
            while (v42 < v111);
          }
          v33 = v94;
          v39 += v94;
          a2 = v100;
          v101 += v93;
        }
        while (v39 < v100);
      }
      v63 = v34 + v88;
      v14 = v86;
      v64 = v99;
      if (v63 >= v86)
        break;
      v65 = 0;
      v66 = v90;
      v108 = v63;
      v67 = v63;
      do
      {
        v68 = v66 - v64;
        if (v66 >= v64)
          v69 = v64;
        else
          v69 = v66;
        if (v69 >= 1)
        {
          v115 = v66 - v64;
          v70 = v14;
          v116 = v96 + v65;
          v71 = v103;
          v117 = v104;
          v72 = v38;
          Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v119, v103, &v116, v38, v69);
          v116 = v95 + v65;
          v117 = a6;
          Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(-1.0, (uint64_t)&v120, &v116, v71, v98, v69, v72, v100, -1, -1, 0, 0);
          v14 = v70;
          v38 = v111;
          v68 = v115;
        }
        v64 = v99;
        v67 += v99;
        v65 += v97;
        v66 = v68;
      }
      while (v67 < v14);
      v7 = v88;
      v36 = v87 - v88;
      v89 += v85;
      v92 += v84;
      v90 -= v88;
      v95 += v85;
      v96 += v84;
      v33 = v94;
      v34 = v108;
      a2 = v100;
    }
  }
  if (v82 > 0x4000)
    free(v80);
  if (v83 > 0x4000)
    free(v81);
}

void sub_2185608D0(_Unwind_Exception *exception_object)
{
  unint64_t v1;
  uint64_t v2;

  if (v1 > 0x4000)
    free(*(void **)(v2 - 400));
  _Unwind_Resume(exception_object);
}

uint64_t *Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,4,long>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  BOOL v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;

  if ((v4 & 1) == 0)
  {
    v39 = result;
    v36 = a3;
    v37 = a2;
    v38 = a4;
    a2 = v37;
    a4 = v38;
    a3 = v36;
    v35 = v34;
    result = v39;
    if (v35)
    {
      Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes = xmmword_2186F1960;
      qword_254FD4068 = 0x80000;
      a2 = v37;
      a4 = v38;
      result = v39;
      a3 = v36;
    }
  }
  v5 = *((_QWORD *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1);
  v6 = Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes;
  v7 = qword_254FD4068;
  v8 = *result;
  if (a4 < 2)
  {
    v23 = *a2;
    v24 = *a3;
    if (*a2 > *a3)
      v24 = *a2;
    if (v8 > v24)
      v24 = *result;
    if (v24 >= 48)
    {
      if ((uint64_t)((((uint64_t)Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes
                     - 192)
                    / 320) & 0xFFFFFFFFFFFFFFF8) <= 1)
        v25 = 1;
      else
        v25 = (((uint64_t)Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes - 192)
             / 320) & 0xFFFFFFFFFFFFFFF8;
      if (v8 <= v25)
      {
        v26 = *result;
      }
      else
      {
        v26 = v25;
        if (v8 % v25)
          v26 = v25 - 8 * ((v25 + ~(v8 % v25)) / (8 * (v8 / v25) + 8));
        *result = v26;
        v23 = *a2;
      }
      v27 = v6 - 192 - 8 * v23 * v26;
      if (v27 >= 32 * v26)
        v28 = v27 / (unint64_t)(8 * v26);
      else
        v28 = 0x480000uLL / (32 * v25);
      if (v28 >= (uint64_t)(0x180000uLL / (16 * v26)))
        v28 = 0x180000uLL / (16 * v26);
      v29 = v28 & 0xFFFFFFFFFFFFFFFCLL;
      v30 = *a3;
      if (*a3 <= v29)
      {
        if (v8 != v26)
          return result;
        v31 = 8 * v8 * v30;
        v32 = v23;
        if (v31 >= 1025)
        {
          v33 = v7 != 0;
          v32 = 576;
          if (v23 < 576)
            v32 = v23;
          if (v33 && (unint64_t)v31 <= 0x8000)
          {
            v6 = v5;
          }
          else
          {
            v32 = v23;
            v6 = 1572864;
          }
        }
        v21 = v6 / (24 * v8);
        if (v32 < v21)
          v21 = v32;
        if (v21 < 7)
        {
          if (!v21)
            return result;
        }
        else
        {
          v21 = 6 * (v21 / 6uLL);
        }
        if (v23 % v21)
          v21 -= 6 * ((v21 - v23 % v21) / (6 * (v23 / v21) + 6));
        goto LABEL_64;
      }
      if (v30 % v29)
        v29 -= 4 * ((v29 - v30 % v29) / (4 * (v30 / v29) + 4));
      *a3 = v29;
    }
  }
  else
  {
    v9 = ((uint64_t)Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes - 192) / 320;
    if (v9 >= 320)
      v9 = 320;
    if (v9 < v8)
    {
      if (v9 <= 0)
        v10 = -(-v9 & 7);
      else
        v10 = v9 & 7;
      v8 = v9 - v10;
      *result = v8;
    }
    v11 = (v5 - v6) / (32 * v8);
    v12 = *a3;
    v13 = (a4 - 1 + *a3) / a4;
    if (v13 + 3 <= 0)
      v14 = -(-(v13 + 3) & 3);
    else
      v14 = (v13 + 3) & 3;
    if (v13 + 3 - v14 < v12)
      v12 = v13 + 3 - v14;
    if (v11 <= 0)
      v15 = -(-v11 & 3);
    else
      v15 = v11 & 3;
    v16 = v11 - v15;
    if (v11 <= v13)
      v17 = v16;
    else
      v17 = v12;
    *a3 = v17;
    v18 = __OFSUB__(v7, v5);
    v19 = v7 - v5;
    if (!((v19 < 0) ^ v18 | (v19 == 0)))
    {
      v20 = v19 / (unint64_t)(8 * a4 * *result);
      v21 = *a2;
      v22 = (a4 - 1 + *a2) / a4;
      if (v20 < 6 || v20 >= v22)
      {
        if (6 * ((v22 + 5) / 6) < v21)
          v21 = 6 * ((v22 + 5) / 6);
      }
      else
      {
        v21 = 6 * (v20 / 6uLL);
      }
LABEL_64:
      *a2 = v21;
    }
  }
  return result;
}

uint64_t Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,4,0,false,true>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (a5 >= 0)
    v7 = a5;
  else
    v7 = a5 + 3;
  v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (a5 < 4)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = (_QWORD *)*a3;
    v12 = a3[1];
    result = 16 * v12;
    do
    {
      if (a4 < 1)
      {
        v14 = v10 + 4 * a7;
      }
      else
      {
        v14 = 4 * a7 + 4 * a4 + v10;
        v15 = v11;
        v16 = a4;
        v17 = (_QWORD *)(a2 + 32 * a7 + 16 + 8 * v10);
        do
        {
          *(v17 - 2) = *v15;
          *(v17 - 1) = v15[v12];
          *v17 = v15[2 * v12];
          v17[1] = v15[3 * v12];
          ++v15;
          v17 += 4;
          --v16;
        }
        while (v16);
      }
      v10 = v14 + 4 * (a6 - (a4 + a7));
      v9 += 4;
      v11 += 4 * v12;
    }
    while (v9 < v8);
  }
  if (v8 < a5)
  {
    v18 = a3[1];
    v19 = *a3 + 32 * v18 * (v7 >> 2);
    v20 = 8 * v18;
    do
    {
      v21 = v10 + a7;
      v22 = (uint64_t *)v19;
      v23 = a4;
      if (a4 >= 1)
      {
        do
        {
          v24 = *v22++;
          *(_QWORD *)(a2 + 8 * v21++) = v24;
          --v23;
        }
        while (v23);
      }
      v10 = a6 - (a4 + a7) + v21;
      ++v8;
      v19 += v20;
    }
    while (v8 != a5);
  }
  return result;
}

void Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,8>::subTo<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12[4];
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3 >= 1 && a1[1] + v3 + a1[2] <= 19)
  {
    v14 = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v16 = *(_OWORD *)(a2 + 24);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = *(_OWORD *)(a2 + 48);
    v19 = *(_QWORD *)(a2 + 64);
    v22 = *(_OWORD *)(a2 + 104);
    v23 = *(_QWORD *)(a2 + 120);
    v25 = *(_QWORD *)(a3 + 16);
    v24 = *(_OWORD *)a3;
    v27 = *(_QWORD *)(a3 + 40);
    v26 = *(_OWORD *)(a3 + 24);
    v29 = *(_QWORD *)(a3 + 64);
    v28 = *(_OWORD *)(a3 + 48);
    v6 = *(_QWORD *)(a3 + 120);
    v32 = *(_OWORD *)(a3 + 104);
    v15 = v5;
    v7 = *(_OWORD *)(a2 + 80);
    v21 = *(_QWORD *)(a2 + 96);
    v20 = v7;
    v8 = *(_OWORD *)(a3 + 80);
    v31 = *(_QWORD *)(a3 + 96);
    v30 = v8;
    v33 = v6;
    v34 = v14;
    v35 = v23;
    v36 = v24;
    v37 = v6;
    v38 = v5;
    v9 = *a1;
    v10 = a1[15];
    v12[3] = a1;
    v13[0] = v9;
    v13[2] = v10;
    v12[0] = v13;
    v12[1] = (uint64_t *)&v14;
    v12[2] = (uint64_t *)&v11;
    Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,1>>,Eigen::internal::sub_assign_op<double,double>,0>,4,0>::run(v12);
  }
  else
  {
    *(_QWORD *)&v14 = 0xBFF0000000000000;
    Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,8>::scaleAndAddTo<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>((uint64_t)a1, a2, a3, (uint64_t *)&v14);
  }
}

void Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,8>::scaleAndAddTo<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD v9[5];
  void *v10;
  void *v11;
  __int128 v12;
  uint64_t v13[3];

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && *(_QWORD *)(a2 + 8))
  {
    if (*(_QWORD *)(a3 + 16))
    {
      v8 = *a4;
      v10 = 0;
      v11 = 0;
      v12 = *(_OWORD *)(a1 + 8);
      v13[0] = v4;
      Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,1,long>(v13, (uint64_t *)&v12, (uint64_t *)&v12 + 1, 1);
      v13[1] = v13[0] * v12;
      v13[2] = *((_QWORD *)&v12 + 1) * v13[0];
      v9[0] = a2;
      v9[1] = a3;
      v9[2] = a1;
      v9[3] = v8;
      v9[4] = &v10;
      Eigen::internal::gemm_functor<double,long,Eigen::internal::general_matrix_matrix_product<long,double,0,false,double,0,false,0>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::internal::gemm_blocking_space<0,double,double,-1,-1,-1,1,false>>::operator()((uint64_t)v9, 0, *(_QWORD *)(a2 + 8), 0, *(_QWORD *)(a3 + 16));
      free(v10);
      free(v11);
    }
  }
}

void sub_218560FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  free(a14);
  free(a15);
  _Unwind_Resume(a1);
}

uint64_t **Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,1>>,Eigen::internal::sub_assign_op<double,double>,0>,4,0>::run(uint64_t **result)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double *v20;
  double *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double **v30;
  uint64_t v31;
  double *v32;
  double *v33;
  double *v34;
  double v35;
  double *v36;
  uint64_t v37;
  double *v38;
  double *v39;
  double v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  float64x2_t *v50;
  uint64_t v51;
  float64x2_t v52;
  double v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  uint64_t v66;
  double *v67;
  double *v68;
  uint64_t v69;
  double v70;
  BOOL v71;
  char v72;
  uint64_t v73;

  v1 = (unint64_t *)result[3];
  v2 = *v1;
  if ((*v1 & 7) != 0)
  {
    v3 = v1[2];
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = 0;
      v6 = v1[1];
      v7 = *result;
      v8 = result[1];
      do
      {
        if (v6 >= 1)
        {
          v9 = 0;
          v10 = *v7;
          v11 = *v8;
          v12 = v8[31];
          v13 = v12 * v5;
          result = (uint64_t **)v8[16];
          v14 = v8[17];
          v15 = v7[2] * v5;
          v16 = (uint64_t)result + v12 * v4 + 8;
          v17 = *v8;
          do
          {
            if (v14)
            {
              v18 = *(double *)(v11 + 8 * v9) * *(double *)&result[v13];
              if (v14 >= 2)
              {
                v19 = 8 * v8[15];
                v20 = (double *)(v17 + v19);
                v21 = (double *)v16;
                v22 = v14 - 1;
                do
                {
                  v23 = *v21++;
                  v18 = v18 + *v20 * v23;
                  v20 = (double *)((char *)v20 + v19);
                  --v22;
                }
                while (v22);
              }
            }
            else
            {
              v18 = 0.0;
            }
            *(double *)(v10 + 8 * (v9 + v15)) = *(double *)(v10 + 8 * (v9 + v15)) - v18;
            ++v9;
            v17 += 8;
          }
          while (v9 != v6);
        }
        ++v5;
        v4 += 8;
      }
      while (v5 != v3);
    }
  }
  else
  {
    v24 = v1[2];
    if (v24 >= 1)
    {
      v25 = 0;
      v26 = 0;
      v27 = v1[1];
      v28 = v1[15] & 1;
      v29 = (v2 >> 3) & 1;
      if (v29 >= v27)
        v29 = v27;
      do
      {
        if (v29 >= 1)
        {
          v30 = (double **)result[1];
          v31 = (uint64_t)v30[17];
          if (v31)
          {
            v32 = *v30;
            v33 = v30[16];
            v34 = v30[31];
            v35 = **v30 * v33[(_QWORD)v34 * v26];
            if (v31 >= 2)
            {
              v36 = v30[15];
              v37 = v31 - 1;
              v38 = (double *)((char *)v33 + (_QWORD)v34 * v25 + 8);
              v39 = &v32[(_QWORD)v36];
              do
              {
                v40 = *v38++;
                v35 = v35 + *v39 * v40;
                v39 += (uint64_t)v36;
                --v37;
              }
              while (v37);
            }
          }
          else
          {
            v35 = 0.0;
          }
          *(double *)(**result + 8 * (*result)[2] * v26) = *(double *)(**result + 8 * (*result)[2] * v26) - v35;
        }
        v41 = (v27 - v29) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 + v29;
        if (v41 >= 1)
        {
          v43 = 8 * v29;
          v44 = v29;
          do
          {
            v45 = result[1];
            v46 = v45[38];
            if (v46 < 1)
            {
              v52 = 0uLL;
            }
            else
            {
              v47 = v45[32];
              v48 = v45[34];
              v49 = (double *)(v45[35] + v25 * v45[37]);
              v50 = (float64x2_t *)(v47 + v43);
              v51 = 8 * v48;
              v52 = 0uLL;
              do
              {
                v53 = *v49++;
                v52 = vmlaq_n_f64(v52, *v50, v53);
                v50 = (float64x2_t *)((char *)v50 + v51);
                --v46;
              }
              while (v46);
            }
            v54 = 8 * (v44 + (*result)[2] * v26);
            *(float64x2_t *)(**result + v54) = vsubq_f64(*(float64x2_t *)(**result + v54), v52);
            v44 += 2;
            v43 += 16;
          }
          while (v44 < v42);
        }
        if (v42 < v27)
        {
          v55 = result[1];
          v56 = **result;
          v57 = *v55;
          v58 = v55[31];
          v59 = v58 * v26;
          v60 = v55[16];
          v61 = v55[17];
          v62 = (*result)[2] * v26;
          v63 = v60 + v58 * v25 + 8;
          v64 = *v55 + ((8 * (v27 - v29)) & 0xFFFFFFFFFFFFFFF0) + 8 * v29;
          do
          {
            if (v61)
            {
              v65 = *(double *)(v57 + 8 * v42) * *(double *)(v60 + 8 * v59);
              if (v61 >= 2)
              {
                v66 = 8 * v55[15];
                v67 = (double *)(v64 + v66);
                v68 = (double *)v63;
                v69 = v61 - 1;
                do
                {
                  v70 = *v68++;
                  v65 = v65 + *v67 * v70;
                  v67 = (double *)((char *)v67 + v66);
                  --v69;
                }
                while (v69);
              }
            }
            else
            {
              v65 = 0.0;
            }
            *(double *)(v56 + 8 * (v62 + v42)) = *(double *)(v56 + 8 * (v62 + v42)) - v65;
            ++v42;
            v64 += 8;
          }
          while (v42 < v27);
        }
        v71 = __OFADD__(v29, v28);
        v73 = v29 + v28;
        v72 = (v73 < 0) ^ v71;
        v29 = v73 & 1;
        if (v72)
          v29 = -v29;
        if (v27 < v29)
          v29 = v27;
        ++v26;
        v25 += 8;
      }
      while (v26 != v24);
    }
  }
  return result;
}

void Eigen::internal::gemm_functor<double,long,Eigen::internal::general_matrix_matrix_product<long,double,0,false,double,0,false,0>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::internal::gemm_blocking_space<0,double,double,-1,-1,-1,1,false>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = a5;
  v6 = *(_QWORD **)(a1 + 8);
  if (a5 == -1)
    v5 = v6[2];
  Eigen::internal::general_matrix_matrix_product<long,double,0,false,double,0,false,0>::run(a3, v5, *(_QWORD *)(*(_QWORD *)a1 + 16), **(_QWORD **)a1 + 8 * a2, *(_QWORD *)(*(_QWORD *)a1 + 120), *v6 + 8 * v6[15] * a4, v6[15], **(_QWORD **)(a1 + 16) + 8 * (a2 + *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120) * a4), *(double *)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120), *(unint64_t **)(a1 + 32));
}

void Eigen::internal::general_matrix_matrix_product<long,double,0,false,double,0,false,0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, unint64_t *a11)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  size_t v25;
  void *v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  size_t v33;
  void *v34;
  void *v35;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::bad_alloc *exception;
  std::bad_alloc *v56;
  std::bad_alloc *v57;
  std::bad_alloc *v58;
  std::bad_alloc *v59;
  std::bad_alloc *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  char v92;
  uint64_t v93;

  v72 = a8;
  v81 = a7;
  v67 = a6;
  v75 = a4;
  v76 = a5;
  v93 = *MEMORY[0x24BDAC8D0];
  v12 = a11[3];
  v11 = a11[4];
  v13 = a11[2];
  if (v13 >= a1)
    v14 = a1;
  else
    v14 = a11[2];
  if (v12 >= a2)
    v15 = a2;
  else
    v15 = a11[3];
  v77 = a11[4];
  v70 = v14;
  v16 = v14 * v11;
  if ((v14 * v11) >> 61)
    goto LABEL_60;
  v20 = a1;
  v21 = *a11;
  v22 = *a11;
  if (*a11)
    goto LABEL_13;
  v23 = 8 * v16;
  if (v16 <= 0x4000)
  {
    v24 = (char *)&v61 - ((MEMORY[0x24BDAC7A8](v23, v23 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v24, v25);
    v21 = 0;
    v22 = (unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_13;
  }
  v26 = malloc_type_malloc(v23, 0x1E76AA36uLL);
  if (!v26)
  {
LABEL_60:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v56 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v56, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v22 = (unint64_t)v26;
  v21 = *a11;
LABEL_13:
  v27 = v15 * v77;
  v86 = v22;
  if (v21)
    v28 = 0;
  else
    v28 = (void *)v22;
  v63 = v28;
  if (v27 >> 61)
  {
    v57 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v58 = std::bad_alloc::bad_alloc(v57);
    __cxa_throw(v58, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v29 = a11[1];
  v30 = v29;
  if (!v29)
  {
    v31 = 8 * v27;
    if (v27 > 0x4000)
    {
      v34 = malloc_type_malloc(v31, 0x1E76AA36uLL);
      if (!v34)
      {
        v59 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v60 = std::bad_alloc::bad_alloc(v59);
        __cxa_throw(v60, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v30 = (unint64_t)v34;
      v29 = a11[1];
    }
    else
    {
      v32 = (char *)&v61 - ((MEMORY[0x24BDAC7A8](v31, v31 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
      bzero(v32, v33);
      v29 = 0;
      v30 = (unint64_t)(v32 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  v64 = v27;
  v65 = v16;
  if (v29)
    v35 = 0;
  else
    v35 = (void *)v30;
  v62 = v35;
  v38 = v77 == a3 && v13 < v20 && v12 >= a2;
  v66 = v38;
  if (v20 >= 1)
  {
    v39 = v30;
    v40 = 0;
    v68 = 8 * v70;
    v83 = 8 * a10 * v15;
    v84 = a10;
    v73 = 8 * v77;
    v74 = a3;
    v82 = 8 * v81 * v15;
    v69 = v20;
    do
    {
      v41 = v40 + v70;
      v71 = v40 + v70;
      if (v40 + v70 >= v20)
        v41 = v20;
      if (a3 >= 1)
      {
        v42 = 0;
        v87 = v41 - v40;
        v43 = v66;
        if (!v40)
          v43 = 0;
        v85 = v43;
        v80 = v67;
        v78 = v40;
        do
        {
          v44 = v42;
          v45 = v42 + v77;
          if ((uint64_t)(v42 + v77) >= a3)
            v46 = a3;
          else
            v46 = v42 + v77;
          v47 = v46 - v44;
          v88 = v75 + 8 * (v40 + v44 * v76);
          v89 = v76;
          Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v92, v86, &v88, v46 - v44, v87);
          v79 = v45;
          if (a2 >= 1)
          {
            v48 = 0;
            v49 = 0;
            v50 = v80;
            v51 = v72;
            v52 = v15;
            do
            {
              if (a2 >= v52)
                v53 = v52;
              else
                v53 = a2;
              v54 = v53 + v48;
              if (!v85)
              {
                v88 = v50;
                v89 = v81;
                Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,4,0,false,false>::operator()((uint64_t)&v91, v39, &v88, v47, v54);
              }
              v88 = v51;
              v89 = v84;
              Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(a9, (uint64_t)&v90, &v88, v86, v39, v87, v47, v54, -1, -1, 0, 0);
              v49 += v15;
              v52 += v15;
              v48 -= v15;
              v51 += v83;
              v50 += v82;
            }
            while (v49 < a2);
          }
          a3 = v74;
          v80 += v73;
          v40 = v78;
          v42 = v79;
        }
        while (v79 < v74);
      }
      v72 += v68;
      v40 = v71;
      v20 = v69;
    }
    while (v71 < v69);
  }
  if (v64 > 0x4000)
    free(v62);
  if (v65 > 0x4000)
    free(v63);
}

void sub_218561868(_Unwind_Exception *exception_object)
{
  unint64_t v1;
  uint64_t v2;

  if (v1 > 0x4000)
    free(*(void **)(v2 - 336));
  _Unwind_Resume(exception_object);
}

void Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,4,0,false,false>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  if (a5 >= 0)
    v5 = a5;
  else
    v5 = a5 + 3;
  v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  if (a5 < 4)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = (_QWORD *)*a3;
    v10 = a3[1];
    do
    {
      if (a4 >= 1)
      {
        v11 = (_QWORD *)(a2 + 16 + 8 * v8);
        v8 += 4 * a4;
        v12 = v9;
        v13 = a4;
        do
        {
          *(v11 - 2) = *v12;
          *(v11 - 1) = v12[v10];
          *v11 = v12[2 * v10];
          v11[1] = v12[3 * v10];
          ++v12;
          v11 += 4;
          --v13;
        }
        while (v13);
      }
      v7 += 4;
      v9 += 4 * v10;
    }
    while (v7 < v6);
  }
  if (v6 < a5)
  {
    v14 = a3[1];
    v15 = *a3 + 32 * v14 * (v5 >> 2);
    v16 = 8 * v14;
    do
    {
      v17 = (uint64_t *)v15;
      v18 = a4;
      if (a4 >= 1)
      {
        do
        {
          v19 = *v17++;
          *(_QWORD *)(a2 + 8 * v8++) = v19;
          --v18;
        }
        while (v18);
      }
      ++v6;
      v15 += v16;
    }
    while (v6 != a5);
  }
}

uint64_t *Eigen::PermutationBase<Eigen::PermutationMatrix<-1,-1,int>>::operator=<Eigen::Transpositions<-1,-1,int>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize(a1, a2[1]);
  v4 = a1[1];
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *a1;
    do
    {
      *(_DWORD *)(v6 + 4 * v5) = v5;
      ++v5;
    }
    while (v4 != v5);
  }
  v7 = v4 < 1;
  v8 = v4 - 1;
  if (!v7)
  {
    v9 = *a2;
    v10 = *a1;
    do
    {
      v11 = *(int *)(v9 + 4 * v8);
      v12 = *(_DWORD *)(v10 + 4 * v8);
      *(_DWORD *)(v10 + 4 * v8) = *(_DWORD *)(v10 + 4 * v11);
      *(_DWORD *)(v10 + 4 * v11) = v12;
      v13 = v8-- + 1;
    }
    while (v13 > 1);
  }
  return a1;
}

uint64_t Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>>::Inverse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = Eigen::DenseStorage<double,-1,-1,-1,0>::DenseStorage((_QWORD *)a1, a2);
  Eigen::DenseStorage<int,-1,-1,1,0>::DenseStorage(v4 + 3, a2 + 24);
  Eigen::DenseStorage<int,-1,-1,1,0>::DenseStorage((_QWORD *)(a1 + 40), a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  return a1;
}

void sub_218561A94(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  free(*v2);
  free(*v1);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::DenseStorage<int,-1,-1,1,0>::DenseStorage(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  std::bad_alloc *exception;
  std::bad_alloc *v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (v4 >> 62 || (v5 = malloc_type_malloc(4 * v4, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v9 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v9, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v4 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  a1[1] = v4;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    memcpy(v5, *(const void **)a2, 4 * v6);
  return a1;
}

void Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>,Eigen::internal::assign_op<double,double>,Eigen::internal::Dense2Dense,void>::run(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  v4 = *(uint64_t **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v4[2];
  v7 = *(_QWORD *)(v5 + 8);
  if (a1[1] != v6 || a1[2] != v7)
  {
    if (v6)
      v9 = v7 == 0;
    else
      v9 = 1;
    if (!v9 && 0x7FFFFFFFFFFFFFFFLL / v7 < v6)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v7 * v6, v6, v7);
    v4 = *(uint64_t **)a2;
    v5 = *(_QWORD *)(a2 + 8);
  }
  Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::_solve_impl<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,-1,0,-1,-1>>(v4, (_OWORD *)v5, a1);
}

void Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::_solve_impl<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t *a1, _OWORD *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  BOOL v8;
  std::bad_alloc *exception;
  std::bad_alloc *v10;
  uint64_t v11[3];

  v5 = a1 + 3;
  *(_OWORD *)v11 = *a2;
  v6 = a1[4];
  if (a3[1] != v6 || a3[2] != v11[1])
  {
    if (v6)
      v8 = v11[1] == 0;
    else
      v8 = 1;
    if (!v8 && 0x7FFFFFFFFFFFFFFFLL / v11[1] < v6)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v10 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v10, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a3, v11[1] * v6, v6, v11[1]);
  }
  Eigen::internal::generic_product_impl<Eigen::PermutationMatrix<-1,-1,int>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::PermutationShape,Eigen::DenseShape,8>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(a3, v5, v11);
  if (a1[2])
  {
    Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,5,0,-1>::run(a1, a3);
    if (a1[2])
      Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,2,0,-1>::run(a1, a3);
  }
}

uint64_t *Eigen::internal::generic_product_impl<Eigen::PermutationMatrix<-1,-1,int>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::PermutationShape,Eigen::DenseShape,8>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64x2_t v9;
  int64x2_t v10;
  uint64_t *v11;
  double *v12;
  int64x2_t v13;
  int32x2_t v14;
  double v15;
  double v16;

  v3 = *a3;
  if (*a3 >= 1)
  {
    v4 = 0;
    v5 = *a2;
    v7 = result[1];
    v6 = result[2];
    v8 = *result;
    v9 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    v10 = vdupq_n_s64(2uLL);
    do
    {
      if (v6 >= 1)
      {
        v11 = 0;
        v12 = (double *)(v8 + 8 * *(int *)(v5 + 4 * (_QWORD)v4));
        result = (uint64_t *)((char *)v4 - 1);
        v13 = (int64x2_t)xmmword_2186CF1A0;
        do
        {
          v14 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v13));
          if ((v14.i8[0] & 1) != 0)
          {
            if (v4 == v11)
              v15 = 1.0;
            else
              v15 = 0.0;
            *v12 = v15;
          }
          if ((v14.i8[4] & 1) != 0)
          {
            if (result == v11)
              v16 = 1.0;
            else
              v16 = 0.0;
            v12[v7] = v16;
          }
          v11 = (uint64_t *)((char *)v11 + 2);
          v13 = vaddq_s64(v13, v10);
          v12 += 2 * v7;
        }
        while ((uint64_t *)((v6 + 1) & 0xFFFFFFFFFFFFFFFELL) != v11);
      }
      v4 = (uint64_t *)((char *)v4 + 1);
    }
    while (v4 != (uint64_t *)v3);
  }
  return result;
}

void Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,5,0,-1>::run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[3];
  uint64_t v12;

  v4 = a1[1];
  v5 = a2[1];
  v6 = a2[2];
  v7 = 0;
  v8 = 0;
  v9 = v5;
  v10 = v6;
  v11[0] = v4;
  v12 = v6;
  Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,4,long>(v11, &v9, &v12, 1);
  v11[1] = v11[0] * v9;
  v11[2] = v10 * v11[0];
  Eigen::internal::triangular_solve_matrix<double,long,1,5,false,0,0>::run(v4, v6, *a1, a1[1], *a2, a2[1], (unint64_t *)&v7);
  free(v7);
  free(v8);
}

void sub_218561E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10)
{
  free(a9);
  free(a10);
  _Unwind_Resume(a1);
}

void Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,2,0,-1>::run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[3];
  uint64_t v12;

  v4 = a1[1];
  v5 = a2[1];
  v6 = a2[2];
  v7 = 0;
  v8 = 0;
  v9 = v5;
  v10 = v6;
  v11[0] = v4;
  v12 = v6;
  Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,4,long>(v11, &v9, &v12, 1);
  v11[1] = v11[0] * v9;
  v11[2] = v10 * v11[0];
  Eigen::internal::triangular_solve_matrix<double,long,1,2,false,0,0>::run(v4, v6, *a1, a1[1], *a2, a2[1], (unint64_t *)&v7);
  free(v7);
  free(v8);
}

void sub_218561EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10)
{
  free(a9);
  free(a10);
  _Unwind_Resume(a1);
}

void Eigen::internal::triangular_solve_matrix<double,long,1,2,false,0,0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  size_t v30;
  void *v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::bad_alloc *exception;
  std::bad_alloc *v76;
  std::bad_alloc *v77;
  std::bad_alloc *v78;
  std::bad_alloc *v79;
  std::bad_alloc *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v7 = a7[4];
  if ((uint64_t)a7[2] >= a1)
    v8 = a1;
  else
    v8 = a7[2];
  v9 = v8 * v7;
  if ((unint64_t)(v8 * v7) >> 61)
    goto LABEL_80;
  v17 = *a7;
  v18 = v17;
  v89 = a7[4];
  if (v17)
    goto LABEL_10;
  v19 = 8 * v9;
  if (v9 <= 0x4000)
  {
    v20 = (char *)&v81 - ((MEMORY[0x24BDAC7A8](v19, v19 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v20, v21);
    v17 = 0;
    v22 = (unint64_t)(v20 + 15);
    v7 = v89;
    v18 = v22 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_10;
  }
  v23 = malloc_type_malloc(v19, 0x1E76AA36uLL);
  if (!v23)
  {
LABEL_80:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v76 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v76, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v18 = (unint64_t)v23;
  v17 = *a7;
LABEL_10:
  v94 = v8;
  v24 = v7 * a2;
  v103 = v18;
  if (v17)
    v25 = 0;
  else
    v25 = (void *)v18;
  v83 = v25;
  if (v24 >> 61)
  {
    v77 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v78 = std::bad_alloc::bad_alloc(v77);
    __cxa_throw(v78, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v26 = a7[1];
  v27 = v26;
  if (!v26)
  {
    v28 = 8 * v24;
    if (v24 > 0x4000)
    {
      v27 = (uint64_t)malloc_type_malloc(v28, 0x1E76AA36uLL);
      if (!v27)
      {
        v79 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v80 = std::bad_alloc::bad_alloc(v79);
        __cxa_throw(v80, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v26 = a7[1];
    }
    else
    {
      v29 = (char *)&v81 - ((MEMORY[0x24BDAC7A8](v28, v28 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
      bzero(v29, v30);
      v26 = 0;
      v27 = (unint64_t)(v29 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  v98 = v27;
  if (v26)
    v31 = 0;
  else
    v31 = (void *)v27;
  v82 = v31;
  if ((v32 & 1) == 0
  {
    Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes = xmmword_2186F1960;
    qword_254FD4068 = 0x80000;
  }
  v84 = v7 * a2;
  v85 = v9;
  if (a2 < 1)
  {
    v35 = 0;
    v33 = a1;
  }
  else
  {
    v33 = a1;
    if (a6 <= a1)
      v34 = a1;
    else
      v34 = a6;
    v35 = (*((_QWORD *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1)
         / (unint64_t)(32 * v34)
         + (((*((_QWORD *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1)
            / (unint64_t)(32 * v34)) & 0x8000000000000000) != 0
          ? 3uLL
          : 0)) & 0xFFFFFFFFFFFFFFFCLL;
  }
  if (v35 <= 4)
    v36 = 4;
  else
    v36 = v35;
  if (v33 >= 1)
  {
    v90 = a5 + 8 * v33;
    v88 = -8 * v7;
    v93 = 8 * a6 * v36;
    v92 = a3 + 8 * a4 * (v33 - 1) + 8 * v33;
    v87 = 8 * v7 * ~a4;
    v104 = -48 - 48 * a4;
    v37 = -8 * a4;
    v97 = 8 * v94;
    v91 = v33 - v7;
    v96 = a3 + 8 * a4 * (v33 - v7);
    v86 = 8 * v7 * a4;
    v95 = v36;
    v106 = -8 * a4;
    v108 = a3;
    v109 = a4;
    v99 = a2;
    while (1)
    {
      if (v7 >= v33)
        v38 = v33;
      else
        v38 = v7;
      v111 = v38;
      if (a2 >= 1)
      {
        v39 = 0;
        v102 = v33 - v38;
        v100 = v90;
        v107 = v33;
        do
        {
          v40 = a2 - v39;
          if (v36 >= v40)
            v41 = v40;
          else
            v41 = v36;
          v112 = v41;
          if (v38 >= 1)
          {
            v42 = 0;
            v43 = v112 + v39;
            v110 = v98 + 8 * v39 * v38;
            v105 = v39 * a6;
            v101 = a5 + 8 * (v39 * a6 + v102);
            v44 = v92;
            v45 = v100;
            v46 = v38;
            do
            {
              v113 = v46 - 6;
              if (v46 >= 6)
                v47 = 6;
              else
                v47 = v46;
              if (v47 <= 1)
                v48 = 1;
              else
                v48 = v47;
              v49 = v38 - v42;
              if (v38 - v42 >= 6)
                v50 = 6;
              else
                v50 = v38 - v42;
              if (v49 >= 1)
              {
                v51 = 0;
                v52 = v45 - 8 * v47;
                v53 = v44 - 8 * v47;
                do
                {
                  if (v40 >= 1)
                  {
                    v54 = v33 + ~(v51 + v42);
                    v55 = v50 + ~v51;
                    v56 = 1.0 / *(double *)(a3 + 8 * (v54 + v54 * a4));
                    v57 = v52;
                    v58 = v39;
                    do
                    {
                      v59 = v54 + v58 * a6;
                      v60 = v56 * *(double *)(a5 + 8 * v59);
                      *(double *)(a5 + 8 * v59) = v60;
                      if (v55 >= 1)
                      {
                        v61 = 0;
                        v62 = -v60;
                        do
                        {
                          *(double *)(v57 + 8 * v61) = *(double *)(v57 + 8 * v61) + v62 * *(double *)(v53 + 8 * v61);
                          ++v61;
                        }
                        while (v61 < v55);
                      }
                      ++v58;
                      v57 += 8 * a6;
                    }
                    while (v58 < v43);
                  }
                  ++v51;
                  v53 += v37;
                }
                while (v51 != v48);
              }
              v114 = v45;
              v115 = v44;
              v63 = v49 - v50;
              v64 = v33 - v42 - v50;
              v116 = a5 + 8 * (v64 + v105);
              v117 = a6;
              Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,4,0,false,true>::operator()((uint64_t)&v118, v110, &v116, v50, v112, v38, v49 - v50);
              if (v63 >= 1)
              {
                v116 = v108 + 8 * (v102 + v64 * v109);
                v117 = v109;
                v65 = v103;
                Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v119, v103, &v116, v50, v63);
                v116 = v101;
                v117 = a6;
                Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(-1.0, (uint64_t)&v120, &v116, v65, v110, v63, v50, v112, v50, v111, 0, v63);
              }
              v42 += 6;
              v45 = v114 - 48;
              v44 = v115 + v104;
              v46 = v113;
              v38 = v111;
              a3 = v108;
              a4 = v109;
              v37 = v106;
              v33 = v107;
            }
            while (v42 < v111);
          }
          v36 = v95;
          v39 += v95;
          v100 += v93;
          a2 = v99;
        }
        while (v39 < v99);
      }
      v33 -= v89;
      v66 = v94;
      if (v33 < 1)
        break;
      v67 = 0;
      v68 = 0;
      v69 = v91;
      v107 = v33;
      do
      {
        v70 = v69 - v66;
        if (v69 >= v66)
          v71 = v66;
        else
          v71 = v69;
        if (v71 >= 1)
        {
          v115 = v69 - v66;
          v116 = v96 + v67;
          v117 = a4;
          v72 = v103;
          v73 = v38;
          Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v119, v103, &v116, v38, v71);
          v116 = a5 + v67;
          v117 = a6;
          v74 = v72;
          a2 = v99;
          Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(-1.0, (uint64_t)&v120, &v116, v74, v98, v71, v73, v99, -1, -1, 0, 0);
          v37 = v106;
          v33 = v107;
          v66 = v94;
          v38 = v111;
          v70 = v115;
        }
        v68 += v66;
        v67 += v97;
        v69 = v70;
      }
      while (v68 < v33);
      v90 += v88;
      v92 += v87;
      v7 = v89;
      v91 -= v89;
      v96 -= v86;
      v36 = v95;
    }
  }
  if (v84 > 0x4000)
    free(v82);
  if (v85 > 0x4000)
    free(v83);
}

void sub_2185626C0(_Unwind_Exception *exception_object)
{
  unint64_t v1;
  uint64_t v2;

  if (v1 > 0x4000)
    free(*(void **)(v2 - 400));
  _Unwind_Resume(exception_object);
}

void sub_218562878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::supervised::linear_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_regression_opt_interface,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D948DB8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_218562964(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::linear_regression_opt_interface *,std::shared_ptr<turi::supervised::linear_regression_opt_interface>::__shared_ptr_default_delete<turi::supervised::linear_regression_opt_interface,turi::supervised::linear_regression_opt_interface>,std::allocator<turi::supervised::linear_regression_opt_interface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::linear_regression_opt_interface *,std::shared_ptr<turi::supervised::linear_regression_opt_interface>::__shared_ptr_default_delete<turi::supervised::linear_regression_opt_interface,turi::supervised::linear_regression_opt_interface>,std::allocator<turi::supervised::linear_regression_opt_interface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<turi::optimization::regularizer_interface>::shared_ptr[abi:ne180100]<turi::optimization::elastic_net,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D948E30;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_218562A34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::optimization::elastic_net *,std::shared_ptr<turi::optimization::regularizer_interface>::__shared_ptr_default_delete<turi::optimization::regularizer_interface,turi::optimization::elastic_net>,std::allocator<turi::optimization::elastic_net>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::optimization::elastic_net *,std::shared_ptr<turi::optimization::regularizer_interface>::__shared_ptr_default_delete<turi::optimization::regularizer_interface,turi::optimization::elastic_net>,std::allocator<turi::optimization::elastic_net>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(uint64_t a1, char *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void **v46;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 2;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v46 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v46 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*v6 + 8), a3);
  return a1;
}

void sub_218562ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void **Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::~LDLT(void **a1)
{
  free(a1[6]);
  free(a1[4]);
  free(*a1);
  return a1;
}

uint64_t Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize((_QWORD *)a1, v5 * v4, v4, v5);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 32), v7);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 48), v8);
  *(_DWORD *)(a1 + 64) = 2;
  *(_BYTE *)(a1 + 68) = 0;
  Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::compute<Eigen::Matrix<double,-1,-1,0,-1,-1>>(a1, (__int128 **)a2);
  return a1;
}

void sub_218563210(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;

  free(*v3);
  free(*v2);
  free(*v1);
  _Unwind_Resume(a1);
}

uint64_t Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::compute<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t a1, __int128 **a2)
{
  int64_t v3;
  __int128 *v4;
  uint64_t v5;
  BOOL v7;
  __int128 *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  double *v14;
  __int128 *v15;
  __int128 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  double v33;
  std::bad_alloc *exception;
  std::bad_alloc *v36;
  _QWORD v37[3];
  double *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[8];
  double *v47;
  uint64_t v48;
  _QWORD *v49;

  v4 = *a2;
  v3 = (int64_t)a2[1];
  v5 = (uint64_t)a2[2];
  if (*(_QWORD *)(a1 + 8) == v3 && *(_QWORD *)(a1 + 16) == v5)
  {
    v8 = a2[1];
  }
  else
  {
    if (v3)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v5 < v3)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v36 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v36, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize((_QWORD *)a1, v5 * v3, v3, v5);
    v8 = *(__int128 **)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
  }
  v9 = *(double **)a1;
  v10 = (_QWORD)v8 * v5;
  if ((uint64_t)v8 * v5 >= 0)
    v11 = (_QWORD)v8 * v5;
  else
    v11 = v10 + 1;
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (v10 >= 2)
  {
    v13 = 0;
    v14 = *(double **)a1;
    v15 = v4;
    do
    {
      v16 = *v15++;
      *(_OWORD *)v14 = v16;
      v14 += 2;
      v13 += 2;
    }
    while (v13 < v12);
  }
  v17 = v10 <= v12;
  v18 = v10 - v12;
  if (!v17)
  {
    v19 = v11 >> 1;
    v20 = (uint64_t *)&v4[v11 >> 1];
    v21 = &v9[2 * v19];
    do
    {
      v22 = *v20++;
      *(_QWORD *)v21++ = v22;
      --v18;
    }
    while (v18);
  }
  *(_QWORD *)(a1 + 24) = 0;
  if (v3 >= 1)
  {
    v23 = 0;
    v24 = 0;
    v25 = *(double **)a1;
    v26 = -1;
    do
    {
      v27 = *(_QWORD *)(a1 + 8);
      v38 = &v25[v27 * v24];
      v39 = v27;
      v40 = a1;
      v41 = 0;
      v42 = v24;
      v43 = v27;
      v44 = v27 - (v3 - v24);
      v45 = v27;
      v28 = 0.0;
      v29 = 0.0;
      v37[0] = &v38[v44];
      v37[1] = v3 - v24;
      if (v3 != v24)
      {
        v47 = &v38[v44];
        v48 = v27;
        v49 = v37;
        v29 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false> const>>,3,0>::run((uint64_t)v46);
        v25 = *(double **)a1;
      }
      if (v24)
      {
        v28 = fabs(v25[v24]);
        if (v24 != 1)
        {
          v30 = *(_QWORD *)(a1 + 8);
          v31 = &v25[v23 + v30];
          v32 = v26;
          do
          {
            v28 = v28 + fabs(*v31);
            v31 = (double *)((char *)v31 + v30 * 8);
            --v32;
          }
          while (v32);
        }
      }
      v33 = v29 + v28;
      if (v33 > *(double *)(a1 + 24))
        *(double *)(a1 + 24) = v33;
      ++v24;
      ++v26;
      ++v23;
    }
    while (v24 != v3);
  }
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 32), v3);
  *(_BYTE *)(a1 + 68) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 48), v3);
  *(_DWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = Eigen::internal::ldlt_inplace<1>::unblocked<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Transpositions<-1,-1,int>,Eigen::Matrix<double,-1,1,0,-1,1>>(a1, (_QWORD *)(a1 + 32), (double **)(a1 + 48), (int *)(a1 + 64)) ^ 1;
  *(_BYTE *)(a1 + 68) = 1;
  return a1;
}

uint64_t Eigen::internal::ldlt_inplace<1>::unblocked<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Transpositions<-1,-1,int>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t a1, _QWORD *a2, double **a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double v23;
  double *v24;
  uint64_t i;
  double v26;
  int64_t v27;
  double *v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  double *v32;
  double *v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  double v37;
  double *v38;
  double *v39;
  int64_t v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  double *v46;
  uint64_t v47;
  double *v48;
  double *v49;
  double v50;
  unint64_t v51;
  double *v52;
  double *v53;
  double v54;
  double *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  float64x2_t v67;
  float64x2_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  double *v72;
  BOOL v73;
  unint64_t v74;
  double v75;
  double v76;
  char v77;
  _BOOL4 v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v88;
  uint64_t v89;
  double **v90;
  _QWORD *v91;
  int *v92;
  uint64_t v93;
  double *v94;
  uint64_t v95;
  double *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double *v104;
  uint64_t v105;
  double *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5 <= 1)
  {
    v6 = a2[1];
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = *a2;
      do
      {
        *(_DWORD *)(v8 + 4 * v7) = v7;
        ++v7;
      }
      while (v6 != v7);
    }
    if (v5)
    {
      v9 = **(double **)a1;
      if (v9 <= 0.0)
      {
        if (v9 < 0.0)
          v10 = 1;
        else
          v10 = 2;
      }
      else
      {
        v10 = 0;
      }
    }
    else
    {
      v10 = 2;
    }
    *a4 = v10;
    LOBYTE(v13) = 1;
    return v13 & 1;
  }
  v11 = 0;
  v12 = 0;
  v88 = 1 - v5;
  v89 = v5 - 2;
  v13 = 1;
  v92 = a4;
  v93 = *(_QWORD *)(a1 + 8);
  v90 = a3;
  v91 = a2;
  while (1)
  {
    v14 = v11;
    v15 = v5 - v11;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if (v17 >= v16)
      v17 = *(_QWORD *)(a1 + 8);
    v18 = v15 - 1;
    if (v15 <= 1)
    {
      *(_DWORD *)(*a2 + 4 * v11) = v11;
LABEL_25:
      ++v11;
      v34 = v16 * v14;
      goto LABEL_26;
    }
    v19 = 0;
    v20 = v17 - v15;
    v21 = *(double **)a1;
    v22 = v20 * (v16 + 1);
    v23 = fabs(*(double *)(*(_QWORD *)a1 + 8 * v22));
    v24 = (double *)(*(_QWORD *)a1 + 8 * v22 + 8 * v16 + 8);
    for (i = 1; i != v15; ++i)
    {
      v26 = fabs(*v24);
      if (v26 > v23)
      {
        v19 = i;
        v23 = v26;
      }
      v24 += v16 + 1;
    }
    v27 = v19 + v11;
    *(_DWORD *)(*a2 + 4 * v11) = v19 + v11;
    if (!v19)
      goto LABEL_25;
    if (v11)
    {
      v28 = v21;
      v29 = v11;
      do
      {
        v30 = v28[v11];
        v28[v11] = v28[v27];
        v28[v27] = v30;
        v28 += v16;
        --v29;
      }
      while (v29);
    }
    v31 = v5 + ~v27;
    v104 = &v21[v16 * v11 + v16 - v31];
    v105 = v31;
    v106 = &v21[v16 * v11];
    v107 = v16;
    v108 = a1;
    v109 = 0;
    v110 = v11;
    v111 = v16;
    v112 = v16 - v31;
    v113 = v16;
    v32 = &v21[v27 * v16];
    v94 = &v32[v16 - v31];
    v95 = v31;
    v96 = v32;
    v97 = v16;
    v98 = a1;
    v99 = 0;
    v100 = v19 + v11;
    v101 = v16;
    v102 = v16 - v31;
    v103 = v16;
    Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false>>::swap<Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false>>(&v104, &v94);
    v33 = *(double **)a1;
    v16 = *(_QWORD *)(a1 + 8);
    v34 = v16 * v11;
    v35 = v16 * v11 + v11;
    v36 = v27 + v27 * v16;
    v37 = *(double *)(*(_QWORD *)a1 + 8 * v35);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    v33[v36] = v37;
    ++v11;
    if (v19 < 2)
    {
      a4 = v92;
      v5 = v93;
      a3 = v90;
      a2 = v91;
    }
    else
    {
      v38 = &v33[v14 + 1 + v14 * v16];
      v39 = &v33[v14 + v16 * v11 + v19];
      v40 = v14 + 1;
      a4 = v92;
      a3 = v90;
      do
      {
        v41 = *(_QWORD *)v38;
        *v38++ = *v39;
        *(_QWORD *)v39 = v41;
        ++v40;
        v39 += v16;
      }
      while (v40 < v27);
      v5 = v93;
      a2 = v91;
    }
LABEL_26:
    v42 = *(double **)a1;
    v43 = *(_QWORD *)a1 + 8 * v11;
    v44 = v43 + 8 * v34;
    if (v14)
    {
      v45 = 0;
      v46 = *a3;
      v47 = 8 * v16;
      v48 = *(double **)a1;
      v49 = &v42[v14];
      do
      {
        v46[v45++] = *v48 * *v49;
        v49 = (double *)((char *)v49 + v47);
        v48 += v16 + 1;
      }
      while (v14 != v45);
      v50 = v42[v14] * *v46;
      if (v14 >= 2)
      {
        v51 = v14 - 1;
        v52 = v46 + 1;
        v53 = &v42[v14 + (unint64_t)v47 / 8];
        do
        {
          v54 = *v52++;
          v50 = v50 + *v53 * v54;
          v53 = (double *)((char *)v53 + v47);
          --v51;
        }
        while (v51);
      }
      v42[v34 + v14] = v42[v34 + v14] - v50;
      if (v15 >= 2)
      {
        v104 = (double *)v43;
        v105 = v16;
        v94 = v46;
        v95 = 1;
        Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,0>,0,false,double,Eigen::internal::const_blas_data_mapper<double,long,1>,false,0>::run(v15 - 1, v14, (uint64_t *)&v104, &v94, (double *)(v43 + 8 * v34), -1.0);
        a3 = v90;
        a2 = v91;
        a4 = v92;
        v5 = v93;
        v16 = *(_QWORD *)(a1 + 8);
      }
    }
    v55 = *(double **)a1;
    v56 = *(uint64_t *)(*(_QWORD *)a1 + 8 * (v14 + v14 * v16));
    if (!v14 && *(double *)&v56 >= 0.0 && *(double *)&v56 <= 0.0)
      break;
    if (v15 < 2 || *(double *)&v56 == 0.0)
    {
      if (((v15 > 1) & v13) == 1)
      {
        v74 = v89 - v14;
        do
        {
          v75 = *(double *)v44;
          v44 += 8;
          v76 = v75;
          v73 = v74-- != 0;
          v77 = v73;
          v13 = v76 == 0.0;
        }
        while (v76 == 0.0 && (v77 & 1) != 0);
      }
      else
      {
        v13 = (v15 < 2) & v13;
      }
    }
    else
    {
      v62 = (v44 >> 3) & 1;
      if ((v44 & 7) != 0)
        v62 = v15 - 1;
      v63 = v18 - v62;
      if (v18 >= v62)
        v64 = v18 - v62;
      else
        v64 = v63 + 1;
      if (v62)
      {
        v65 = v62;
        do
        {
          *(double *)v44 = *(double *)v44 / *(double *)&v56;
          v44 += 8;
          --v65;
        }
        while (v65);
      }
      v66 = (v64 & 0xFFFFFFFFFFFFFFFELL) + v62;
      if (v63 >= 2)
      {
        v67 = (float64x2_t)vdupq_lane_s64(v56, 0);
        v68 = (float64x2_t *)&v42[v62 + v34 + v11];
        v69 = v62;
        do
        {
          *v68 = vdivq_f64(*v68, v67);
          ++v68;
          v69 += 2;
        }
        while (v69 < v66);
      }
      if (v66 < v18)
      {
        v70 = v64 >> 1;
        v71 = v88 + v62 + v14 + (v64 & 0xFFFFFFFFFFFFFFFELL);
        v72 = &v42[2 * v70 + v62 + v34 + v11];
        do
        {
          *v72 = *v72 / *(double *)&v56;
          ++v72;
          v73 = __CFADD__(v71++, 1);
        }
        while (!v73);
      }
    }
    v78 = *(double *)&v56 < 0.0;
    if (*(double *)&v56 > 0.0)
      v78 = 1;
    v79 = (v12 & v78 ^ 1) & v13;
    if (*(double *)&v56 >= 0.0)
      v80 = v13;
    else
      v80 = v79;
    if (*(double *)&v56 <= 0.0)
      v13 = v80;
    else
      v13 = v79;
    v81 = *a4;
    if (*a4 == 2)
    {
      if (*(double *)&v56 <= 0.0)
      {
        if (*(double *)&v56 >= 0.0)
          goto LABEL_83;
        v82 = 1;
      }
      else
      {
        v82 = 0;
      }
      goto LABEL_82;
    }
    if (v81 != 1)
    {
      if (v81 || *(double *)&v56 >= 0.0)
        goto LABEL_83;
LABEL_81:
      v82 = 3;
LABEL_82:
      *a4 = v82;
      goto LABEL_83;
    }
    if (*(double *)&v56 > 0.0)
      goto LABEL_81;
LABEL_83:
    v12 |= *(double *)&v56 == 0.0;
    if (v11 == v5)
      return v13 & 1;
  }
  v57 = 0;
  *a4 = 2;
  v58 = *a2;
  v59 = 8 * v16;
  v60 = &v55[v16];
  v61 = v59 + 8;
  do
  {
    *(_DWORD *)(v58 + 4 * v57) = v57;
    if ((v13 & 1) != 0)
    {
      if (v5 + ~v57 < 1)
      {
        LOBYTE(v13) = 1;
      }
      else
      {
        v83 = 1 - v5;
        do
        {
          v84 = v60[v83];
          LOBYTE(v13) = v84 == 0.0;
          v85 = v57 + v83++ + 2;
        }
        while (v84 == 0.0 && v85 != 1);
      }
    }
    else
    {
      LOBYTE(v13) = 0;
    }
    ++v57;
    v60 = (double *)((char *)v60 + v61);
  }
  while (v57 != v5);
  return v13 & 1;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t v7;
  int64_t v8;
  float64x2_t v9;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t v12;
  BOOL v13;
  uint64_t v14;
  double *f64;
  double v16;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3)
    return fabs(v4->f64[0]);
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = vabsq_f64(*v4);
  if (v1 >= 4)
  {
    v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v9 = vabsq_f64(v4[1]);
    if ((unint64_t)v1 >= 8)
    {
      v10 = v4 + 3;
      v11 = 4;
      do
      {
        v7 = vaddq_f64(v7, vabsq_f64(v10[-1]));
        v12 = *v10;
        v10 += 2;
        v9 = vaddq_f64(v9, vabsq_f64(v12));
        v11 += 4;
      }
      while (v11 < v8);
    }
    v7 = vaddq_f64(v9, v7);
    if (v6 > v8)
      v7 = vaddq_f64(v7, vabsq_f64(*(float64x2_t *)((char *)v4 + 8 * v8)));
  }
  result = vaddvq_f64(v7);
  v13 = v1 <= v6;
  v14 = v1 - v6;
  if (!v13)
  {
    f64 = v4[v3 >> 1].f64;
    do
    {
      v16 = *f64++;
      result = result + fabs(v16);
      --v14;
    }
    while (v14);
  }
  return result;
}

double Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false>>::swap<Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  int64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v2 = (_QWORD *)*a2;
  v3 = (_QWORD *)*a1;
  v4 = a1[1];
  v5 = (*a1 >> 3) & 1;
  if (v5 >= v4)
    v5 = a1[1];
  if ((v3 & 7) != 0)
    v5 = a1[1];
  v6 = v4 - v5;
  if (v4 >= v5)
    v7 = v4 - v5;
  else
    v7 = v6 + 1;
  v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 >= 1)
  {
    v9 = (_QWORD *)*a1;
    v10 = (_QWORD *)*a2;
    v11 = v5;
    do
    {
      *(_QWORD *)&v12 = *v9;
      *v9++ = *v10;
      *v10++ = v12;
      --v11;
    }
    while (v11);
  }
  v13 = v8 + v5;
  if (v6 > 1)
  {
    v14 = (__int128 *)&v3[v5];
    v15 = v5;
    v16 = (__int128 *)&v2[v5];
    do
    {
      v12 = *v16;
      *v16++ = *v14;
      *v14++ = v12;
      v15 += 2;
    }
    while (v15 < v13);
  }
  if (v13 < v4)
  {
    v17 = v6 - v8;
    v18 = 16 * (v7 >> 1) + 8 * v5;
    v19 = (_QWORD *)((char *)v2 + v18);
    v20 = (_QWORD *)((char *)v3 + v18);
    do
    {
      *(_QWORD *)&v12 = *v20;
      *v20++ = *v19;
      *v19++ = v12;
      --v17;
    }
    while (v17);
  }
  return *(double *)&v12;
}

_QWORD *Eigen::internal::evaluator<Eigen::Solve<Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>,Eigen::Matrix<double,-1,1,0,-1,1>>>::evaluator(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;

  *a1 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 2, v4, 1);
  *a1 = a1[2];
  Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::_solve_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(*(uint64_t **)a2, *(__int128 ***)(a2 + 8), v5);
  return a1;
}

void sub_218563C1C(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::_solve_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t *a1, __int128 **a2, unint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  uint64_t v13;
  uint64_t *v15;

  v6 = a1 + 4;
  v7 = a1[5];
  if (a3[1] != v7)
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v7, 1);
  Eigen::internal::generic_product_impl<Eigen::Transpositions<-1,-1,int>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::TranspositionsShape,Eigen::DenseShape,7>::evalTo<Eigen::Matrix<double,-1,1,0,-1,1>>(a3, v6, a2);
  if (a1[2])
  {
    Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,1,0,-1,1>,1,5,0,1>::run(a1, a3);
    v8 = a1[2];
  }
  else
  {
    v8 = 0;
  }
  v9 = a1[1];
  if (v8 >= v9)
    v8 = a1[1];
  if (v8 >= 1)
  {
    v10 = (double *)*a1;
    v11 = (double *)*a3;
    do
    {
      v12 = 0.0;
      if (fabs(*v10) > 2.22507386e-308)
        v12 = *v11 / *v10;
      *v11++ = v12;
      v10 += v9 + 1;
      --v8;
    }
    while (v8);
  }
  v15 = a1;
  if (v9)
    Eigen::internal::triangular_solver_selector<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,1,0,-1,1>,1,6,0,1>::run(&v15, a3);
  v15 = v6;
  v13 = a1[5];
  if (a3[1] != v13)
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v13, 1);
  return Eigen::internal::generic_product_impl<Eigen::Transpose<Eigen::TranspositionsBase<Eigen::Transpositions<-1,-1,int>>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::TranspositionsShape,Eigen::DenseShape,7>::evalTo<Eigen::Matrix<double,-1,1,0,-1,1>>(a3, &v15, (__int128 **)a3);
}

_QWORD *Eigen::internal::generic_product_impl<Eigen::Transpositions<-1,-1,int>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::TranspositionsShape,Eigen::DenseShape,7>::evalTo<Eigen::Matrix<double,-1,1,0,-1,1>>(_QWORD *result, uint64_t *a2, __int128 **a3)
{
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = result;
  v5 = a2[1];
  v6 = (_OWORD *)*result;
  v7 = result[1];
  v9 = *a3;
  v8 = (uint64_t)a3[1];
  if ((__int128 *)*result != *a3 || v7 != v8)
  {
    if (v7 != v8)
    {
      result = Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(result, v8, 1);
      v6 = (_OWORD *)*v4;
      v7 = v4[1];
    }
    if (v7 >= 0)
      v11 = v7;
    else
      v11 = v7 + 1;
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v7 >= 2)
    {
      v13 = 0;
      v14 = v6;
      v15 = v9;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        v13 += 2;
      }
      while (v13 < v12);
    }
    v17 = v7 <= v12;
    v18 = v7 - v12;
    if (!v17)
    {
      v19 = v11 >> 1;
      v20 = (uint64_t *)&v9[v11 >> 1];
      v21 = &v6[v19];
      do
      {
        v22 = *v20++;
        *v21++ = v22;
        --v18;
      }
      while (v18);
    }
  }
  if (v5 >= 1)
  {
    v23 = 0;
    v24 = *a2;
    v25 = (_OWORD *)*v4;
    do
    {
      v26 = *(int *)(v24 + 4 * v23);
      if (v23 != v26)
      {
        v27 = *((_QWORD *)v25 + v23);
        *((_QWORD *)v25 + v23) = *((_QWORD *)v25 + v26);
        *((_QWORD *)v25 + v26) = v27;
      }
      ++v23;
    }
    while (v5 != v23);
  }
  return result;
}

void Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,1,0,-1,1>,1,5,0,1>::run(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  char *v8;
  size_t v9;
  void *v10;
  void *v11;
  std::bad_alloc *exception;
  std::bad_alloc *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v2 = a2[1];
  if (v2 >> 61)
    goto LABEL_14;
  v5 = *a2;
  if (*a2)
  {
    v6 = *a2;
    goto LABEL_8;
  }
  v7 = 8 * v2;
  if (v2 <= 0x4000)
  {
    v8 = (char *)v14 - ((MEMORY[0x24BDAC7A8](v7, v7 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v8, v9);
    v5 = 0;
    v6 = (unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  v10 = malloc_type_malloc(v7, 0x1E76AA36uLL);
  if (!v10)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v13, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v6 = (unint64_t)v10;
  v5 = *a2;
  v2 = a2[1];
LABEL_8:
  if (v5)
    v11 = 0;
  else
    v11 = (void *)v6;
  Eigen::internal::triangular_solve_vector<double,double,long,1,5,false,0>::run(a1[2], *a1, a1[1], v6);
  if (8 * v2 > 0x20000)
    free(v11);
}

uint64_t Eigen::internal::triangular_solve_vector<double,double,long,1,5,false,0>::run(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  uint64_t v20;
  double v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  int64_t v27;
  double v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35[2];

  if (result >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = a4 & 7;
    v9 = (double *)(a2 + 8);
    v33 = (a3 << 6) + 64;
    v10 = 8 * a3 + 8;
    v11 = (double *)(a4 + 8);
    v12 = result;
    do
    {
      v13 = v12 - 8;
      if (v12 >= 8)
        v14 = 8;
      else
        v14 = v12;
      v15 = v14 - 1;
      if (v14 <= 1)
        v14 = 1;
      if (v6 - v7 >= 8)
        v16 = 8;
      else
        v16 = v6 - v7;
      if (v6 - v7 >= 1)
      {
        v17 = 0;
        v18 = v11;
        v19 = v9;
        do
        {
          v20 = v16 + ~v17;
          if (v20 >= 1)
          {
            v21 = *(double *)(a4 + 8 * (v17 + v7));
            v22 = ((unint64_t)(a4 + 8 * (v17 + v7) + 8) >> 3) & 1;
            if (v8)
              v22 = v16 + ~v17;
            v23 = v20 - v22;
            if (v20 >= v22)
              v24 = v20 - v22;
            else
              v24 = v23 + 1;
            if (v22)
            {
              v25 = v18;
              v26 = v19;
              v27 = v22;
              do
              {
                v28 = *v26++;
                *v25 = *v25 - v21 * v28;
                ++v25;
                --v27;
              }
              while (v27);
            }
            v29 = (v24 & 0xFFFFFFFFFFFFFFFELL) + v22;
            if (v23 >= 2)
            {
              v30 = v22;
              do
              {
                *(float64x2_t *)&v18[v30] = vsubq_f64(*(float64x2_t *)&v18[v30], vmulq_n_f64(*(float64x2_t *)&v19[v30], v21));
                v22 += 2;
                v30 += 2;
              }
              while (v22 < v29);
            }
            if (v29 < v20)
            {
              do
              {
                v18[v29] = v18[v29] - v21 * v19[v29];
                ++v29;
              }
              while (v15 != v29);
            }
          }
          ++v17;
          v19 = (double *)((char *)v19 + v10);
          ++v18;
          --v15;
        }
        while (v17 != v14);
      }
      v31 = v16 + v7;
      result = v6 - (v16 + v7);
      if (v6 > v16 + v7)
      {
        v35[0] = a2 + 8 * (v31 + v7 * a3);
        v35[1] = a3;
        v34[0] = a4 + 8 * v7;
        v34[1] = 1;
        result = Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,0>,0,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(result, v16, v35, v34, (double *)(a4 + 8 * v31), -1.0);
      }
      v7 += 8;
      v9 = (double *)((char *)v9 + v33);
      v11 += 8;
      v12 = v13;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,0>,0,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(uint64_t result, uint64_t a2, uint64_t *a3, _QWORD *a4, double *a5, double a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float64x2_t *v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  uint64_t v51;
  float64x2_t *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t *v63;
  float64x2_t *v64;
  uint64_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t *v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  uint64_t v79;
  float64x2_t *v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  double *v103;
  double *v104;
  uint64_t v105;
  double v106;
  float64x2_t *v107;
  float64x2_t *v108;
  uint64_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t *v112;
  uint64_t v113;
  float64x2_t v114;
  double *v115;
  double *v116;
  uint64_t v117;
  double v118;
  float64x2_t *v119;
  uint64_t v120;

  v7 = 0;
  v8 = ((unint64_t)a5 >> 3) & 1;
  if (v8 >= result)
    v8 = result;
  if ((a5 & 7) != 0)
    v8 = result;
  v9 = ((unint64_t)*a3 >> 3) & 1;
  if (v9 >= result)
    v9 = result;
  if ((*a3 & 7) != 0)
    v9 = -1;
  v10 = 3;
  if ((a5 & 7) != 0 || v9 < 0)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    if (v9 != result)
    {
      v13 = 0;
      v10 = a3[1] & 1;
      v14 = 1;
      while (1)
      {
        v15 = v14;
        v16 = v9 + v13 * v10;
        v17 = v16 >= 0 ? v16 & 1 : -(v16 & 1);
        if (v8 == v17)
          break;
        v14 = 0;
        v13 = 1;
        if ((v15 & 1) == 0)
        {
          v7 = 0;
          v11 = v8;
          v12 = ((result - v8) & 0xFFFFFFFFFFFFFFFELL) + v8;
          v10 = 3;
          goto LABEL_24;
        }
      }
      if (v13 >= a2)
        v7 = a2;
      else
        v7 = v13;
      v11 = v8;
      v12 = ((result - v8) & 0xFFFFFFFFFFFFFFFELL) + v8;
    }
  }
LABEL_24:
  v120 = v10;
  v18 = a2 - v7 + 3;
  if (a2 >= v7)
    v18 = a2 - v7;
  v19 = (v18 & 0xFFFFFFFFFFFFFFFCLL) + v7;
  v20 = 8 * v11;
  v21 = 8 * v12;
  if (a2 - v7 >= 4)
  {
    v22 = 8 * v7;
    v23 = 8 * v7 + 24;
    v24 = 8 * v7 + 16;
    v25 = 8 * v7 + 8;
    v26 = v7;
    v119 = (float64x2_t *)&a5[v11];
    v27 = &a5[v12];
    do
    {
      v28 = *(double *)(*a4 + 8 * v26) * a6;
      v29 = *(double *)(*a4 + 8 * (v26 + 1)) * a6;
      v30 = *(double *)(*a4 + 8 * (v26 + 2)) * a6;
      v31 = *(double *)(*a4 + 8 * (v26 + 3)) * a6;
      v32 = *a3;
      v33 = a3[1];
      if (v11 >= 1)
      {
        v34 = (double *)(v32 + v33 * v23);
        v35 = (double *)(v32 + v33 * v24);
        v36 = (double *)(v32 + v33 * v25);
        v37 = a5;
        v38 = v11;
        v39 = (double *)(v32 + v33 * v22);
        do
        {
          v40 = *v39++;
          v41 = v28 * v40 + *v37;
          *v37 = v41;
          v42 = *v36++;
          v43 = v41 + v29 * v42;
          *v37 = v43;
          v44 = *v35++;
          v45 = v43 + v30 * v44;
          *v37 = v45;
          v46 = *v34++;
          *v37++ = v45 + v31 * v46;
          --v38;
        }
        while (v38);
      }
      if (v12 > v11)
      {
        if (v120)
        {
          if (v120 == 1)
          {
            v47 = (float64x2_t *)(v32 + v20 + v33 * v24);
            v48 = (float64x2_t *)(v32 + v20 + v33 * v22);
            v49 = (float64x2_t *)(v32 + v20 + v33 * v23);
            v50 = v119;
            v51 = v11;
            v52 = (float64x2_t *)(v32 + v20 + v33 * v25);
            do
            {
              v53 = *v48++;
              v54 = vmulq_n_f64(v53, v28);
              v55 = *v52++;
              v56 = vmulq_n_f64(v55, v29);
              v57 = *v47++;
              v58 = vaddq_f64(v54, v56);
              v59 = vmulq_n_f64(v57, v30);
              v60 = *v49++;
              *v50 = vaddq_f64(*v50, vaddq_f64(v58, vaddq_f64(v59, vmulq_n_f64(v60, v31))));
              ++v50;
              v51 += 2;
            }
            while (v51 < v12);
          }
          else
          {
            v75 = (float64x2_t *)(v32 + v20 + v33 * v23);
            v76 = (float64x2_t *)(v32 + v20 + v33 * v24);
            v77 = (float64x2_t *)(v32 + v20 + v33 * v25);
            v78 = v119;
            v79 = v11;
            v80 = (float64x2_t *)(v32 + v20 + v33 * v22);
            do
            {
              v81 = *v80++;
              v82 = vmulq_n_f64(v81, v28);
              v83 = *v77++;
              v84 = vmulq_n_f64(v83, v29);
              v85 = *v76++;
              v86 = vaddq_f64(v82, v84);
              v87 = vmulq_n_f64(v85, v30);
              v88 = *v75++;
              *v78 = vaddq_f64(*v78, vaddq_f64(v86, vaddq_f64(v87, vmulq_n_f64(v88, v31))));
              ++v78;
              v79 += 2;
            }
            while (v79 < v12);
          }
        }
        else
        {
          v61 = (float64x2_t *)(v32 + v20 + v33 * v23);
          v62 = (float64x2_t *)(v32 + v20 + v33 * v24);
          v63 = (float64x2_t *)(v32 + v20 + v33 * v25);
          v64 = v119;
          v65 = v11;
          v66 = (float64x2_t *)(v32 + v20 + v33 * v22);
          do
          {
            v67 = *v66++;
            v68 = vmulq_n_f64(v67, v28);
            v69 = *v63++;
            v70 = vmulq_n_f64(v69, v29);
            v71 = *v62++;
            v72 = vaddq_f64(v68, v70);
            v73 = vmulq_n_f64(v71, v30);
            v74 = *v61++;
            *v64 = vaddq_f64(*v64, vaddq_f64(v72, vaddq_f64(v73, vmulq_n_f64(v74, v31))));
            ++v64;
            v65 += 2;
          }
          while (v65 < v12);
        }
      }
      if (result > v12)
      {
        v89 = 0;
        v90 = v32 + v21;
        v91 = v32 + v21 + v33 * v23;
        v92 = v90 + v33 * v24;
        v93 = v90 + v33 * v25;
        v94 = v90 + v33 * v22;
        do
        {
          v95 = v28 * *(double *)(v94 + 8 * v89) + v27[v89];
          v27[v89] = v95;
          v96 = v95 + v29 * *(double *)(v93 + 8 * v89);
          v27[v89] = v96;
          v97 = v96 + v30 * *(double *)(v92 + 8 * v89);
          v27[v89] = v97;
          v27[v89] = v97 + v31 * *(double *)(v91 + 8 * v89);
          ++v89;
        }
        while (result - v12 != v89);
      }
      v26 += 4;
      v23 += 32;
      v24 += 32;
      v25 += 32;
      v22 += 32;
    }
    while (v26 < v19);
  }
  do
  {
    v98 = v7;
    if (v19 < a2)
    {
      v99 = 8 * v19;
      do
      {
        v100 = *(double *)(*a4 + 8 * v19) * a6;
        v101 = *a3;
        v102 = a3[1];
        if (v11 >= 1)
        {
          v103 = (double *)(v101 + v102 * v99);
          v104 = a5;
          v105 = v11;
          do
          {
            v106 = *v103++;
            *v104 = *v104 + v100 * v106;
            ++v104;
            --v105;
          }
          while (v105);
        }
        if ((((_BYTE)v101 + 8 * (_BYTE)v102 * (_BYTE)v19 + 8 * (_BYTE)v11) & 0xF) != 0)
        {
          if (v11 < v12)
          {
            v107 = (float64x2_t *)(v101 + v20 + v102 * v99);
            v108 = (float64x2_t *)&a5[v11];
            v109 = v11;
            do
            {
              v110 = *v107++;
              *v108 = vmlaq_n_f64(*v108, v110, v100);
              ++v108;
              v109 += 2;
            }
            while (v109 < v12);
          }
        }
        else if (v11 < v12)
        {
          v111 = (float64x2_t *)(v101 + v20 + v102 * v99);
          v112 = (float64x2_t *)&a5[v11];
          v113 = v11;
          do
          {
            v114 = *v111++;
            *v112 = vmlaq_n_f64(*v112, v114, v100);
            ++v112;
            v113 += 2;
          }
          while (v113 < v12);
        }
        if (result > v12)
        {
          v115 = (double *)(v101 + v21 + v102 * v99);
          v116 = &a5[v12];
          v117 = result - v12;
          do
          {
            v118 = *v115++;
            *v116 = *v116 + v100 * v118;
            ++v116;
            --v117;
          }
          while (v117);
        }
        ++v19;
        v99 += 8;
      }
      while (v19 != a2);
    }
    v7 = 0;
    v19 = 0;
    a2 = v98;
  }
  while (v98);
  return result;
}

void Eigen::internal::triangular_solver_selector<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,1,0,-1,1>,1,6,0,1>::run(uint64_t **a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  char *v8;
  size_t v9;
  void *v10;
  void *v11;
  std::bad_alloc *exception;
  std::bad_alloc *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v2 = a2[1];
  if (v2 >> 61)
    goto LABEL_14;
  v4 = *a1;
  v5 = *a2;
  if (*a2)
  {
    v6 = *a2;
    goto LABEL_8;
  }
  v7 = 8 * v2;
  if (v2 <= 0x4000)
  {
    v8 = (char *)v14 - ((MEMORY[0x24BDAC7A8](v7, v7 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v8, v9);
    v5 = 0;
    v6 = (unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  v10 = malloc_type_malloc(v7, 0x1E76AA36uLL);
  if (!v10)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v13, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v6 = (unint64_t)v10;
  v5 = *a2;
  v2 = a2[1];
LABEL_8:
  if (v5)
    v11 = 0;
  else
    v11 = (void *)v6;
  Eigen::internal::triangular_solve_vector<double,double,long,1,6,false,1>::run(v4[1], *v4, v4[1], v6);
  if (8 * v2 > 0x20000)
    free(v11);
}

void Eigen::internal::triangular_solve_vector<double,double,long,1,6,false,1>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25[21];
  _QWORD v26[11];

  v26[9] = *MEMORY[0x24BDAC8D0];
  if (a1 >= 1)
  {
    v6 = a3 * (a1 - 1);
    v7 = a2 + 8 * v6;
    v24 = -8 * a3;
    v8 = a2 + 8 * v6 + 8 * a1;
    v18 = (a3 << 6) ^ 0xFFFFFFFFFFFFFFC0;
    v19 = -64 * a3;
    v9 = a4 + 8 * a1;
    v23 = (8 * a3) ^ 0xFFFFFFFFFFFFFFF8;
    v10 = a1;
    do
    {
      if ((unint64_t)v10 >= 8)
        v11 = 8;
      else
        v11 = v10;
      if (a1 != v10)
      {
        v25[0] = a2 + 8 * (v10 + (v10 - v11) * a3);
        v25[1] = a3;
        v26[0] = a4 + 8 * v10;
        v26[1] = 1;
        Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(v11, a1 - v10, v25, v26, a4 + 8 * (v10 - v11), 1, -1.0);
      }
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = -v11;
      v20 = v8;
      v21 = v7;
      do
      {
        if (v13)
        {
          v25[0] = v8;
          v25[2] = v14;
          v25[3] = v7;
          v25[5] = a1;
          v25[6] = a2;
          v25[7] = a1;
          v25[8] = a1;
          v25[9] = a3;
          v25[11] = v10 + v13 - 1;
          v25[12] = 0;
          v25[13] = a3;
          v25[15] = v10 + v13;
          v25[16] = a3;
          v25[17] = v9 + v12;
          v25[18] = v14;
          v26[2] = v8;
          v26[4] = a3;
          v26[5] = v9 + v12;
          v26[7] = v14;
          v26[8] = v25;
          *(double *)(v9 + 8 * v13 - 8) = *(double *)(v9 + 8 * v13 - 8)
                                        - Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::OuterStride<-1>> const,1,-1,true> const,1,-1,false> const> const,Eigen::Map<Eigen::Matrix<double,-1,1,0,-1,1> const,0,Eigen::Stride<0,0>> const>>,3,0>::run(v26);
        }
        ++v14;
        --v13;
        v8 += v23;
        v7 += v24;
        v12 -= 8;
      }
      while (v15 != v13);
      v9 -= 64;
      v8 = v20 + v18;
      v7 = v21 + v19;
      v16 = v10 <= 8;
      v10 -= 8;
    }
    while (!v16);
  }
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::OuterStride<-1>> const,1,-1,true> const,1,-1,false> const> const,Eigen::Map<Eigen::Matrix<double,-1,1,0,-1,1> const,0,Eigen::Stride<0,0>> const>>,3,0>::run(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  float64x2_t *v5;
  double result;
  int64_t v7;
  float64x2_t v8;
  int64_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  double v22;
  double v23;
  double v24;

  v1 = *(_QWORD *)(a1[8] + 144);
  if (v1 >= 0)
    v2 = *(_QWORD *)(a1[8] + 144);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(a1[8] + 144);
  else
    v3 = v1 + 1;
  v4 = (float64x2_t *)a1[2];
  v5 = (float64x2_t *)a1[5];
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0] * v5->f64[0];
  v7 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v8 = vmulq_f64(*v4, *v5);
  if (v1 >= 4)
  {
    v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = vmulq_f64(v4[1], v5[1]);
    if ((unint64_t)v1 >= 8)
    {
      v11 = v5 + 3;
      v12 = v4 + 3;
      v13 = 4;
      do
      {
        v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        v14 = *v12;
        v12 += 2;
        v15 = v14;
        v16 = *v11;
        v11 += 2;
        v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    v8 = vaddq_f64(v10, v8);
    if (v7 > v9)
      v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v5 + 8 * v9)));
  }
  result = vaddvq_f64(v8);
  v17 = v1 <= v7;
  v18 = v1 - v7;
  if (!v17)
  {
    v19 = v3 >> 1;
    f64 = v4[v19].f64;
    v21 = v5[v19].f64;
    do
    {
      v22 = *f64++;
      v23 = v22;
      v24 = *v21++;
      result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

_QWORD *Eigen::internal::generic_product_impl<Eigen::Transpose<Eigen::TranspositionsBase<Eigen::Transpositions<-1,-1,int>>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::TranspositionsShape,Eigen::DenseShape,7>::evalTo<Eigen::Matrix<double,-1,1,0,-1,1>>(_QWORD *result, uint64_t **a2, __int128 **a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v3 = result;
  v4 = *a2;
  v5 = (*a2)[1];
  v6 = (_OWORD *)*result;
  v7 = result[1];
  v9 = *a3;
  v8 = (uint64_t)a3[1];
  if ((__int128 *)*result != *a3 || v7 != v8)
  {
    if (v7 != v8)
    {
      result = Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(result, v8, 1);
      v6 = (_OWORD *)*v3;
      v7 = v3[1];
    }
    if (v7 >= 0)
      v11 = v7;
    else
      v11 = v7 + 1;
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v7 >= 2)
    {
      v13 = 0;
      v14 = v6;
      v15 = v9;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        v13 += 2;
      }
      while (v13 < v12);
    }
    v17 = v7 <= v12;
    v18 = v7 - v12;
    if (!v17)
    {
      v19 = v11 >> 1;
      v20 = (uint64_t *)&v9[v11 >> 1];
      v21 = &v6[v19];
      do
      {
        v22 = *v20++;
        *v21++ = v22;
        --v18;
      }
      while (v18);
    }
  }
  v23 = v5 - 1;
  if (v5 >= 1)
  {
    v24 = *v4;
    v25 = (_OWORD *)*v3;
    do
    {
      v26 = *(int *)(v24 + 4 * v23);
      if (v23 != v26)
      {
        v27 = *((_QWORD *)v25 + v23);
        *((_QWORD *)v25 + v23) = *((_QWORD *)v25 + v26);
        *((_QWORD *)v25 + v26) = v27;
      }
      v28 = v23-- + 1;
    }
    while (v28 > 1);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double,double>,Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0> const,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t *v7;
  float64x2_t v8;
  float64x2_t v9;
  int64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  double *f64;
  double *v26;
  double v27;
  double v28;
  double v29;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24) + 8);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 16);
  if ((unint64_t)(v1 + 1) < 3)
    return (v4->f64[0] + **(double **)(a1 + 48)) * (v4->f64[0] + **(double **)(a1 + 48));
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(float64x2_t **)(a1 + 48);
  v8 = vaddq_f64(*v4, *v7);
  v9 = vmulq_f64(v8, v8);
  if (v1 >= 4)
  {
    v10 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = vaddq_f64(v4[1], v7[1]);
    v12 = vmulq_f64(v11, v11);
    if ((unint64_t)v1 >= 8)
    {
      v13 = v7 + 3;
      v14 = v4 + 3;
      v15 = 4;
      do
      {
        v16 = vaddq_f64(v14[-1], v13[-1]);
        v9 = vaddq_f64(v9, vmulq_f64(v16, v16));
        v17 = *v14;
        v14 += 2;
        v18 = v17;
        v19 = *v13;
        v13 += 2;
        v20 = vaddq_f64(v18, v19);
        v12 = vaddq_f64(v12, vmulq_f64(v20, v20));
        v15 += 4;
      }
      while (v15 < v10);
    }
    v9 = vaddq_f64(v12, v9);
    if (v6 > v10)
    {
      v21 = vaddq_f64(*(float64x2_t *)((char *)v4 + 8 * v10), *(float64x2_t *)((char *)v7 + 8 * v10));
      v9 = vaddq_f64(v9, vmulq_f64(v21, v21));
    }
  }
  result = vaddvq_f64(v9);
  v22 = v1 <= v6;
  v23 = v1 - v6;
  if (!v22)
  {
    v24 = v3 >> 1;
    f64 = v4[v24].f64;
    v26 = v7[v24].f64;
    do
    {
      v27 = *f64++;
      v28 = v27;
      v29 = *v26++;
      result = result + (v28 + v29) * (v28 + v29);
      --v23;
    }
    while (v23);
  }
  return result;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<std::string>(unsigned int *a1, __int128 *a2)
{
  __int128 *v4;
  __int128 **v5;
  _BYTE v6[13];
  _BYTE v7[13];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<std::string>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    turi::flexible_type::flexible_type<std::string>((uint64_t)v7, a2);
    *(_QWORD *)&v6[5] = *(_QWORD *)&v7[5];
    *(_QWORD *)v6 = *(_QWORD *)v7;
    v6[12] = v7[12];
    LODWORD(v5) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_218564EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<std::string>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

void __cxx_global_var_init_57_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_linear_regression_cpp_0()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_2185652B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

turi::supervised::linear_regression_opt_interface *turi::supervised::linear_regression_opt_interface::linear_regression_opt_interface(turi::supervised::linear_regression_opt_interface *this, const turi::ml_data *a2, const turi::ml_data *a3, turi::supervised::linear_regression *a4)
{
  char *v8;
  turi::thread_pool *v9;
  turi::thread_pool *instance;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v18;
  std::__shared_weak_count *v19;

  *(_QWORD *)this = &off_24D948EA8;
  v8 = (char *)this + 8;
  turi::ml_data::ml_data((turi::supervised::linear_regression_opt_interface *)((char *)this + 8));
  turi::ml_data::ml_data((turi::supervised::linear_regression_opt_interface *)((char *)this + 200));
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_BYTE *)this + 416) = 0;
  *((_QWORD *)this + 53) = (char *)this + 432;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_QWORD *)this + 56) = (char *)this + 456;
  *((_QWORD *)this + 59) = (char *)this + 480;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_QWORD *)this + 62) = (char *)this + 504;
  *((_QWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_QWORD *)this + 68) = (char *)this + 552;
  *((_QWORD *)this + 73) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_QWORD *)this + 74) = (char *)this + 600;
  *((_QWORD *)this + 77) = (char *)this + 624;
  *((_QWORD *)this + 82) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_QWORD *)this + 83) = (char *)this + 672;
  *((_QWORD *)this + 86) = (char *)this + 696;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_BYTE *)this + 760) = 1;
  *((_QWORD *)this + 49) = &off_24D948C38;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_QWORD *)this + 106) = 0;
  *((_WORD *)this + 440) = 0;
  *((_OWORD *)this + 54) = 0u;
  turi::ml_data::operator=((uint64_t)v8, (uint64_t)a2);
  if (*((_QWORD *)a3 + 3) != *((_QWORD *)a3 + 2))
    turi::ml_data::operator=((uint64_t)this + 200, (uint64_t)a3);
  v9 = (turi::thread_pool *)turi::supervised::linear_regression::operator=((_QWORD *)this + 49, (uint64_t *)a4);
  *((_QWORD *)this + 104) = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
  *((_QWORD *)this + 105) = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 4;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v9);
  *((_QWORD *)this + 107) = turi::thread_pool::size(instance);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  v18 = (uint64_t *)*((_QWORD *)this + 96);
  v19 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  *((_QWORD *)this + 106) = turi::supervised::get_number_of_coefficients(&v18);
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *((_BYTE *)this + 881) = *((_QWORD *)this + 106) <= (unint64_t)(3 * *((_QWORD *)this + 6));
  return this;
}

{
  return turi::supervised::linear_regression_opt_interface::linear_regression_opt_interface(this, a2, a3, a4);
}

void sub_218565588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::neural_net::float_scalar *v9;
  turi::ml_data *v10;
  turi::ml_data *v11;
  turi::supervised::linear_regression *v12;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v9 + 864);
  turi::supervised::linear_regression::~linear_regression(v12);
  turi::ml_data::~ml_data(v11);
  turi::ml_data::~ml_data(v10);
  turi::neural_net::float_scalar::~float_scalar(v9);
  _Unwind_Resume(a1);
}

_QWORD *turi::supervised::linear_regression::operator=(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  _OWORD *v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;

  turi::supervised::supervised_learning_model_base::operator=((uint64_t)a1, (uint64_t)a2);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a1 + 49, a2 + 49);
  v4 = a1 + 51;
  v6 = (__int128 *)a2[51];
  v5 = a2[52];
  if (a1[52] != v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 51, v5, 1);
    v5 = a1[52];
  }
  v7 = (_OWORD *)*v4;
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = v5 + 1;
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 >= 2)
  {
    v10 = 0;
    v11 = (_OWORD *)*v4;
    v12 = v6;
    do
    {
      v13 = *v12++;
      *v11++ = v13;
      v10 += 2;
    }
    while (v10 < v9);
  }
  v14 = __OFSUB__(v5, v9);
  v15 = v5 - v9;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    v16 = v8 >> 1;
    v17 = (uint64_t *)&v6[v8 >> 1];
    v18 = &v7[v16];
    do
    {
      v19 = *v17++;
      *v18++ = v19;
      --v15;
    }
    while (v15);
  }
  v20 = a1 + 53;
  v22 = (__int128 *)a2[53];
  v21 = a2[54];
  if (a1[54] != v21)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 53, v21, 1);
    v21 = a1[54];
  }
  v23 = (_OWORD *)*v20;
  if (v21 >= 0)
    v24 = v21;
  else
    v24 = v21 + 1;
  v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
  if (v21 >= 2)
  {
    v26 = 0;
    v27 = (_OWORD *)*v20;
    v28 = v22;
    do
    {
      v29 = *v28++;
      *v27++ = v29;
      v26 += 2;
    }
    while (v26 < v25);
  }
  v14 = __OFSUB__(v21, v25);
  v30 = v21 - v25;
  if (!((v30 < 0) ^ v14 | (v30 == 0)))
  {
    v31 = v24 >> 1;
    v32 = (uint64_t *)&v22[v24 >> 1];
    v33 = &v23[v31];
    do
    {
      v34 = *v32++;
      *v33++ = v34;
      --v30;
    }
    while (v30);
  }
  return a1;
}

void turi::supervised::linear_regression_opt_interface::~linear_regression_opt_interface(turi::supervised::linear_regression_opt_interface *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_24D948EA8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 864);
  turi::supervised::linear_regression::~linear_regression((turi::supervised::linear_regression_opt_interface *)((char *)this + 392));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 376);
  v4 = (void **)((char *)this + 352);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  v4 = (void **)((char *)this + 304);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  v4 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  v4 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  turi::supervised::linear_regression_opt_interface::~linear_regression_opt_interface(this);
  JUMPOUT(0x219A19A08);
}

void turi::supervised::linear_regression_opt_interface::init_feature_rescaling(turi::supervised::linear_regression_opt_interface *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;

  *((_BYTE *)this + 880) = 1;
  v2 = operator new();
  v3 = v2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  v10 = (uint64_t *)*((_QWORD *)this + 96);
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  turi::supervised::l2_rescaling::l2_rescaling(v2, &v10, 1);
  std::shared_ptr<turi::supervised::l2_rescaling>::reset[abi:ne180100]<turi::supervised::l2_rescaling,void>((_QWORD *)this + 108, v3);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_2185658E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::l2_rescaling>::reset[abi:ne180100]<turi::supervised::l2_rescaling,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::supervised::l2_rescaling>::shared_ptr[abi:ne180100]<turi::supervised::l2_rescaling,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t turi::supervised::linear_regression_opt_interface::rescale_solution(uint64_t result)
{
  if (*(_BYTE *)(result + 880))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 864) + 16))(*(_QWORD *)(result + 864));
  return result;
}

uint64_t turi::supervised::linear_regression_opt_interface::num_variables(turi::supervised::linear_regression_opt_interface *this)
{
  return *((_QWORD *)this + 106);
}

uint64_t turi::supervised::linear_regression_opt_interface::num_examples(turi::supervised::linear_regression_opt_interface *this)
{
  return *((_QWORD *)this + 104);
}

uint64_t turi::supervised::linear_regression_opt_interface::num_validation_examples(turi::supervised::linear_regression_opt_interface *this)
{
  return *((_QWORD *)this + 28) - *((_QWORD *)this + 27);
}

void turi::supervised::linear_regression_opt_interface::get_status_header(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  turi::supervised::make_progress_header((__int128 **)(a1 + 392), a2, *(_QWORD *)(a1 + 224) != *(_QWORD *)(a1 + 216), a3);
}

void turi::supervised::make_progress_header(__int128 **a1@<X0>, __int128 **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::string::size_type v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  std::string::size_type size;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  uint64_t i;
  std::string::size_type v26;
  std::string *p_p;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  std::string::size_type v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  std::string::size_type v58;
  uint64_t v59;
  uint64_t v60;
  std::string v63;
  std::string __p;
  std::string v65;
  uint64_t v66;
  std::string v67;
  char *v68;
  uint64_t *v69;
  _QWORD v70[2];
  _QWORD v71[5];

  v71[2] = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        v65.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v7;
      }
      v66 = 8;
      v8 = a4[1];
      v9 = a4[2];
      if (v8 >= v9)
      {
        v11 = (uint64_t)(v8 - *a4) >> 5;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v13 = v9 - *a4;
        if (v13 >> 4 > v12)
          v12 = v13 >> 4;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
          v14 = 0x7FFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        v69 = a4 + 2;
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a4 + 2), v14);
        v16 = (std::string::size_type)&v15[32 * v11];
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        v67.__r_.__value_.__l.__size_ = v16;
        v68 = &v15[32 * v17];
        v18 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)&v65.__r_.__value_.__l + 2);
        *(_OWORD *)v16 = v18;
        memset(&v65, 0, sizeof(v65));
        *(_QWORD *)(v16 + 24) = v66;
        v67.__r_.__value_.__r.__words[2] = v16 + 32;
        std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(a4, &v67);
        v19 = a4[1];
        std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v67);
        v20 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
        a4[1] = v19;
        if (v20 < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
      }
      else
      {
        v10 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)&v65.__r_.__value_.__l + 2);
        *(_OWORD *)v8 = v10;
        memset(&v65, 0, sizeof(v65));
        *(_QWORD *)(v8 + 24) = v66;
        a4[1] = v8 + 32;
      }
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != v6);
  }
  memset(&v65, 0, sizeof(v65));
  turi::supervised::supervised_learning_model_base::get_tracking_metrics(a1, &v67);
  size = v67.__r_.__value_.__l.__size_;
  v22 = v67.__r_.__value_.__r.__words[0];
  if (v67.__r_.__value_.__r.__words[0] != v67.__r_.__value_.__l.__size_)
  {
    v23 = (std::string *)v65.__r_.__value_.__l.__size_;
    do
    {
      if ((unint64_t)v23 >= v65.__r_.__value_.__r.__words[2])
      {
        v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, (__int128 *)v22);
      }
      else
      {
        if (*(char *)(v22 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
        }
        else
        {
          v24 = *(_OWORD *)v22;
          v23->__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        }
        ++v23;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
      v22 += 24;
    }
    while (v22 != size);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v26 = v65.__r_.__value_.__l.__size_;
  for (i = v65.__r_.__value_.__r.__words[0]; i != v26; i += 24)
  {
    turi::supervised::supervised_learning_model_base::get_metric_display_name(i, &__p);
    std::string::basic_string[abi:ne180100]<0>(&v63, "Training ");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v28 = __p.__r_.__value_.__l.__size_;
    v29 = std::string::append(&v63, (const std::string::value_type *)p_p, v28);
    v30 = v29->__r_.__value_.__r.__words[0];
    v70[0] = v29->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v70 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
    v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v71[0] = v70[0];
    *(_QWORD *)((char *)v71 + 7) = *(_QWORD *)((char *)v70 + 7);
    v32 = a4[1];
    v33 = a4[2];
    if (v32 >= v33)
    {
      v36 = (uint64_t)(v32 - *a4) >> 5;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 59)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v38 = v33 - *a4;
      if (v38 >> 4 > v37)
        v37 = v38 >> 4;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0)
        v39 = 0x7FFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      v69 = a4 + 2;
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a4 + 2), v39);
      v41 = (std::string::size_type)&v40[32 * v36];
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      v67.__r_.__value_.__l.__size_ = v41;
      v68 = &v40[32 * v42];
      v43 = v71[0];
      *(_QWORD *)v41 = v30;
      *(_QWORD *)(v41 + 8) = v43;
      *(_QWORD *)(v41 + 15) = *(_QWORD *)((char *)v71 + 7);
      *(_BYTE *)(v41 + 23) = v31;
      *(_QWORD *)(v41 + 24) = 6;
      v67.__r_.__value_.__r.__words[2] = v41 + 32;
      std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(a4, &v67);
      v35 = a4[1];
      std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v67);
    }
    else
    {
      v34 = v71[0];
      *(_QWORD *)v32 = v30;
      *(_QWORD *)(v32 + 8) = v34;
      *(_QWORD *)(v32 + 15) = *(_QWORD *)((char *)v71 + 7);
      *(_BYTE *)(v32 + 23) = v31;
      *(_QWORD *)(v32 + 24) = 6;
      v35 = v32 + 32;
      a4[1] = v32 + 32;
    }
    a4[1] = v35;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v63, "Validation ");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &__p;
      else
        v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v45 = __p.__r_.__value_.__l.__size_;
      v46 = std::string::append(&v63, (const std::string::value_type *)v44, v45);
      v47 = v46->__r_.__value_.__r.__words[0];
      v70[0] = v46->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v70 + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
      v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v71[0] = v70[0];
      *(_QWORD *)((char *)v71 + 7) = *(_QWORD *)((char *)v70 + 7);
      v49 = a4[1];
      v50 = a4[2];
      if (v49 >= v50)
      {
        v53 = (uint64_t)(v49 - *a4) >> 5;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v55 = v50 - *a4;
        if (v55 >> 4 > v54)
          v54 = v55 >> 4;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0)
          v56 = 0x7FFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        v69 = a4 + 2;
        v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a4 + 2), v56);
        v58 = (std::string::size_type)&v57[32 * v53];
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
        v67.__r_.__value_.__l.__size_ = v58;
        v68 = &v57[32 * v59];
        v60 = v71[0];
        *(_QWORD *)v58 = v47;
        *(_QWORD *)(v58 + 8) = v60;
        *(_QWORD *)(v58 + 15) = *(_QWORD *)((char *)v71 + 7);
        *(_BYTE *)(v58 + 23) = v48;
        *(_QWORD *)(v58 + 24) = 6;
        v67.__r_.__value_.__r.__words[2] = v58 + 32;
        std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(a4, &v67);
        v52 = a4[1];
        std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v67);
      }
      else
      {
        v51 = v71[0];
        *(_QWORD *)v49 = v47;
        *(_QWORD *)(v49 + 8) = v51;
        *(_QWORD *)(v49 + 15) = *(_QWORD *)((char *)v71 + 7);
        *(_BYTE *)(v49 + 23) = v48;
        *(_QWORD *)(v49 + 24) = 6;
        v52 = v49 + 32;
        a4[1] = v49 + 32;
      }
      a4[1] = v52;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
}

void sub_218565EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void **a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  a17 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression_opt_interface::get_status(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  void *v7[2];

  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v7, a2);
  if (*(_BYTE *)(a1 + 880))
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 864) + 16))(*(_QWORD *)(a1 + 864), v7);
  turi::supervised::linear_regression::set_coefs(a1 + 392, (__int128 **)v7);
  turi::supervised::make_progress_row_string(a1 + 392, a1 + 8, a1 + 200, a3, a4);
  free(v7[0]);
}

void sub_21856606C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void turi::supervised::make_progress_row_string(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 **a4@<X3>, uint64_t a5@<X8>)
{
  std::vector<std::string>::pointer begin;
  double v11;
  std::vector<std::string>::pointer end;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::vector<std::string> *size;
  std::vector<std::string> *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  double v27;
  std::vector<std::string>::pointer v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  __int128 *v39;
  __int128 *v40;
  unint64_t v41;
  std::vector<std::string>::pointer v42;
  uint64_t v43;
  unint64_t v44;
  __int128 *v45;
  unint64_t v46;
  unint64_t v47;
  __int128 *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  std::string *v57;
  std::string *v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  std::string v62;
  std::string v63;
  std::vector<std::string> v64;
  std::vector<std::string> v65;
  std::__split_buffer<std::string> __p;

  memset(&v65, 0, sizeof(v65));
  std::string::basic_string[abi:ne180100]<0>(&__p, "train");
  (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t, uint64_t, std::__split_buffer<std::string> *, _QWORD))(*(_QWORD *)a1 + 104))(&v64, a1, a2, &__p, 0);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  begin = v64.__begin_;
  if ((std::vector<std::string>::pointer *)v64.__begin_ != &v64.__end_)
  {
    do
    {
      v11 = turi::variant_converter<double,void>::get((uint64_t)&__p, (int *)&begin[2].__r_.__value_.__r.__words[1]);
      std::to_string(&v63, v11);
      end = v65.__end_;
      if (v65.__end_ >= v65.__end_cap_.__value_)
      {
        v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_ - (char *)v65.__begin_) >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3) > v15)
          v15 = 0x5555555555555556 * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3) >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v15;
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v65.__end_cap_;
        if (v16)
          v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v65.__end_cap_, v16);
        else
          v17 = 0;
        v18 = v17 + v14;
        __p.__first_ = v17;
        __p.__begin_ = v18;
        __p.__end_cap_.__value_ = &v17[v16];
        v19 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        v18->__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        memset(&v63, 0, sizeof(v63));
        __p.__end_ = v18 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v65, &__p);
        v20 = v65.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__p);
        v65.__end_ = v20;
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
      }
      else
      {
        v13 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        v65.__end_->__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v13;
        v65.__end_ = end + 1;
      }
      size = (std::vector<std::string> *)begin->__r_.__value_.__l.__size_;
      if (size)
      {
        do
        {
          v22 = size;
          size = (std::vector<std::string> *)size->__begin_;
        }
        while (size);
      }
      else
      {
        do
        {
          v22 = (std::vector<std::string> *)begin->__r_.__value_.__r.__words[2];
          v23 = v22->__begin_ == begin;
          begin = (std::vector<std::string>::pointer)v22;
        }
        while (!v23);
      }
      begin = (std::vector<std::string>::pointer)v22;
    }
    while (v22 != (std::vector<std::string> *)&v64.__end_);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v64, (char *)v64.__end_);
  memset(&v64, 0, sizeof(v64));
  v25 = *(_QWORD *)(a3 + 16);
  v24 = *(_QWORD *)(a3 + 24);
  if (v24 != v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "train");
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::__split_buffer<std::string> *, _QWORD))(*(_QWORD *)a1 + 104))(&v63, a1, a3, &__p, 0);
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    v26 = v63.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v63.__r_.__value_.__l.__data_ != &v63.__r_.__value_.__r.__words[1])
    {
      do
      {
        v27 = turi::variant_converter<double,void>::get((uint64_t)&__p, (int *)(v26 + 56));
        std::to_string(&v62, v27);
        v28 = v64.__end_;
        if (v64.__end_ >= v64.__end_cap_.__value_)
        {
          v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
          v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v31)
            v31 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555)
            v32 = 0xAAAAAAAAAAAAAAALL;
          else
            v32 = v31;
          __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v64.__end_cap_;
          if (v32)
            v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v64.__end_cap_, v32);
          else
            v33 = 0;
          v34 = v33 + v30;
          __p.__first_ = v33;
          __p.__begin_ = v34;
          __p.__end_cap_.__value_ = &v33[v32];
          v35 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
          v34->__r_.__value_.__r.__words[2] = v62.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
          memset(&v62, 0, sizeof(v62));
          __p.__end_ = v34 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v64, &__p);
          v36 = v64.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__p);
          v64.__end_ = v36;
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
        }
        else
        {
          v29 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
          v64.__end_->__r_.__value_.__r.__words[2] = v62.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
          v64.__end_ = v28 + 1;
        }
        v37 = *(std::string **)(v26 + 8);
        if (v37)
        {
          do
          {
            v38 = v37;
            v37 = (std::string *)v37->__r_.__value_.__r.__words[0];
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = *(std::string **)(v26 + 16);
            v23 = v38->__r_.__value_.__r.__words[0] == v26;
            v26 = (std::string::size_type)v38;
          }
          while (!v23);
        }
        v26 = (std::string::size_type)v38;
      }
      while (v38 != (std::string *)&v63.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v63, (char *)v63.__r_.__value_.__l.__size_);
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v39 = *a4;
  v40 = a4[1];
  if (*a4 != v40)
  {
    v41 = 0;
    do
    {
      if (v41 >= *(_QWORD *)(a5 + 16))
      {
        v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a5, v39);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, v39);
        v41 += 24;
      }
      *(_QWORD *)(a5 + 8) = v41;
      v39 = (__int128 *)((char *)v39 + 24);
    }
    while (v39 != v40);
  }
  v42 = v65.__begin_;
  if (v65.__end_ != v65.__begin_)
  {
    v43 = 0;
    v44 = 0;
    do
    {
      v45 = (__int128 *)&v42[v43];
      v46 = *(_QWORD *)(a5 + 8);
      if (v46 >= *(_QWORD *)(a5 + 16))
      {
        v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a5, v45);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, v45);
        v47 = v46 + 24;
      }
      *(_QWORD *)(a5 + 8) = v47;
      if (v64.__begin_ == v64.__end_)
      {
        if (v24 != v25)
        {
          std::string::basic_string[abi:ne180100]<0>(&v63, "");
          v51 = *(_QWORD *)(a5 + 8);
          v50 = *(_QWORD *)(a5 + 16);
          if (v51 >= v50)
          {
            v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)a5) >> 3);
            v54 = v53 + 1;
            if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *(_QWORD *)a5) >> 3);
            if (2 * v55 > v54)
              v54 = 2 * v55;
            if (v55 >= 0x555555555555555)
              v56 = 0xAAAAAAAAAAAAAAALL;
            else
              v56 = v54;
            __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a5 + 16);
            if (v56)
              v57 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a5 + 16, v56);
            else
              v57 = 0;
            v58 = v57 + v53;
            __p.__first_ = v57;
            __p.__begin_ = v58;
            __p.__end_cap_.__value_ = &v57[v56];
            v59 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
            v58->__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
            memset(&v63, 0, sizeof(v63));
            __p.__end_ = v58 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a5, &__p);
            v60 = *(_QWORD *)(a5 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__p);
            v61 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
            *(_QWORD *)(a5 + 8) = v60;
            if (v61 < 0)
              operator delete(v63.__r_.__value_.__l.__data_);
          }
          else
          {
            v52 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
            *(_QWORD *)(v51 + 16) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
            *(_OWORD *)v51 = v52;
            *(_QWORD *)(a5 + 8) = v51 + 24;
          }
        }
      }
      else
      {
        v48 = (__int128 *)&v64.__begin_[v43];
        if (v47 >= *(_QWORD *)(a5 + 16))
        {
          v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a5, v48);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, v48);
          v49 = v47 + 24;
        }
        *(_QWORD *)(a5 + 8) = v49;
      }
      ++v44;
      v42 = v65.__begin_;
      ++v43;
    }
    while (v44 < 0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_ - (char *)v65.__begin_) >> 3));
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_21856667C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  a10 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(uint64_t a1, void **a2, void **a3, float64x2_t **a4, double *a5)
{
  unint64_t v10;
  unint64_t v11;
  void ***v12;
  void ***v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t *v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  float64x2_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *f64;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  float64x2_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  double *v44;
  double v45;
  void *v46;
  void *__p[3];
  _QWORD v48[3];
  void **v49[3];
  void ***v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 856);
  v49[0] = *(void ***)(a1 + 848);
  v49[1] = (void **)1;
  v49[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)__p, (uint64_t *)v49);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v48, v10, (uint64_t)__p);
  free(__p[0]);
  v11 = *(_QWORD *)(a1 + 856);
  v49[0] = 0;
  std::vector<double>::vector(__p, v11, v49);
  if (*(_BYTE *)(a1 + 881))
  {
    v12 = (void ***)operator new(0x30uLL);
    *v12 = (void **)&off_24D949020;
  }
  else
  {
    v12 = (void ***)operator new(0x30uLL);
    *v12 = (void **)&off_24D9490A0;
  }
  v12[1] = (void **)a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = (void **)v48;
  v12[5] = __p;
  v50 = v12;
  turi::in_parallel((turi::thread_pool *)v49);
  v13 = v50;
  if (v50 == v49)
  {
    v14 = 4;
    v13 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_9;
    v14 = 5;
  }
  ((void (*)(void))(*v13)[v14])();
LABEL_9:
  *a5 = *(double *)__p[0];
  v16 = *(float64x2_t **)v48[0];
  v15 = *(_QWORD *)(v48[0] + 8);
  if (a4[1] != (float64x2_t *)v15)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v15, 1);
    v15 = (uint64_t)a4[1];
  }
  v17 = *a4;
  if (v15 >= 0)
    v18 = v15;
  else
    v18 = v15 + 1;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (v15 >= 2)
  {
    v20 = 0;
    v21 = *a4;
    v22 = v16;
    do
    {
      v23 = *v22++;
      *v21++ = v23;
      v20 += 2;
    }
    while (v20 < v19);
  }
  v24 = __OFSUB__(v15, v19);
  v25 = v15 - v19;
  if (!((v25 < 0) ^ v24 | (v25 == 0)))
  {
    v26 = v18 >> 1;
    v27 = (uint64_t *)&v16[v18 >> 1];
    f64 = (_QWORD *)v17[v26].f64;
    do
    {
      v29 = *v27++;
      *f64++ = v29;
      --v25;
    }
    while (v25);
  }
  if (*(_QWORD *)(a1 + 856) >= 2uLL)
  {
    v30 = 1;
    do
    {
      v31 = *(_QWORD *)(v48[0] + 16 * v30);
      v32 = *a4;
      v33 = (uint64_t)a4[1];
      if (v33 >= 0)
        v34 = (uint64_t)a4[1];
      else
        v34 = v33 + 1;
      v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
      if (v33 >= 2)
      {
        v36 = 0;
        v37 = *a4;
        v38 = *(float64x2_t **)(v48[0] + 16 * v30);
        do
        {
          v39 = *v38++;
          *v37 = vaddq_f64(v39, *v37);
          ++v37;
          v36 += 2;
        }
        while (v36 < v35);
      }
      v40 = v33 <= v35;
      v41 = v33 - v35;
      if (!v40)
      {
        v42 = v34 >> 1;
        v43 = (double *)(v31 + 16 * v42);
        v44 = v32[v42].f64;
        do
        {
          v45 = *v43++;
          *v44 = v45 + *v44;
          ++v44;
          --v41;
        }
        while (v41);
      }
      v46 = __p[0];
      *a5 = *((double *)__p[0] + v30++) + *a5;
    }
    while (v30 < *(_QWORD *)(a1 + 856));
    goto LABEL_34;
  }
  v46 = __p[0];
  if (__p[0])
  {
LABEL_34:
    __p[1] = v46;
    operator delete(v46);
  }
  v49[0] = (void **)v48;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100](v49);
}

void sub_218566A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char **a19)
{
  char **v19;
  char **v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))&(*v21)[8 * v22])();
LABEL_6:
  if (__p)
    operator delete(__p);
  a16 = &a13;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(uint64_t a1, void *a2, float64x2_t **a3, float64x2_t **a4, double *a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *f64;
  uint64_t v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float64x2_t *v50;
  float64x2_t *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  float64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  double *v62;
  double v63;
  uint64_t v64;
  float64x2_t *v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  double *v76;
  double v77;
  void *v78;
  std::bad_alloc *exception;
  std::bad_alloc *v80;
  void *__p[3];
  uint64_t v82[3];
  _QWORD v83[3];
  void *v84[3];
  void **v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 856);
  v82[0] = *(_QWORD *)(a1 + 848);
  v82[1] = v82[0];
  v82[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)v84, v82);
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::vector(v83, v10, (uint64_t)v84);
  free(v84[0]);
  v11 = *(_QWORD *)(a1 + 856);
  v84[0] = *(void **)(a1 + 848);
  v84[1] = (void *)1;
  v84[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)__p, (uint64_t *)v84);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v82, v11, (uint64_t)__p);
  free(__p[0]);
  v12 = *(_QWORD *)(a1 + 856);
  v84[0] = 0;
  std::vector<double>::vector(__p, v12, v84);
  if (*(_BYTE *)(a1 + 881))
  {
    v13 = (void **)operator new(0x30uLL);
    *v13 = &off_24D949120;
  }
  else
  {
    v13 = (void **)operator new(0x30uLL);
    *v13 = &off_24D9491A0;
  }
  v13[1] = (void *)a1;
  v13[2] = a2;
  v13[3] = v82;
  v13[4] = __p;
  v13[5] = v83;
  v85 = v13;
  turi::in_parallel((turi::thread_pool *)v84);
  v14 = v85;
  if (v85 == v84)
  {
    v15 = 4;
    v14 = v84;
    goto LABEL_8;
  }
  if (v85)
  {
    v15 = 5;
LABEL_8:
    (*((void (**)(void))*v14 + v15))();
  }
  *a5 = *(double *)__p[0];
  v17 = *(float64x2_t **)v83[0];
  v16 = *(_QWORD *)(v83[0] + 8);
  v18 = *(_QWORD *)(v83[0] + 16);
  if (a3[1] != (float64x2_t *)v16 || a3[2] != (float64x2_t *)v18)
  {
    if (v16 && v18 && 0x7FFFFFFFFFFFFFFFLL / v18 < v16)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v80 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v80, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a3, v18 * v16, v16, v18);
    v16 = (uint64_t)a3[1];
    v18 = (uint64_t)a3[2];
  }
  v19 = *a3;
  v20 = v16 * v18;
  if (v16 * v18 >= 0)
    v21 = v16 * v18;
  else
    v21 = v20 + 1;
  v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (v20 >= 2)
  {
    v23 = 0;
    v24 = *a3;
    v25 = v17;
    do
    {
      v26 = *v25++;
      *v24++ = v26;
      v23 += 2;
    }
    while (v23 < v22);
  }
  v27 = v20 <= v22;
  v28 = v20 - v22;
  if (!v27)
  {
    v29 = v21 >> 1;
    v30 = (uint64_t *)&v17[v21 >> 1];
    f64 = (_QWORD *)v19[v29].f64;
    do
    {
      v32 = *v30++;
      *f64++ = v32;
      --v28;
    }
    while (v28);
  }
  v34 = *(float64x2_t **)v82[0];
  v33 = *(_QWORD *)(v82[0] + 8);
  if (a4[1] != (float64x2_t *)v33)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v33, 1);
    v33 = (uint64_t)a4[1];
  }
  v35 = *a4;
  if (v33 >= 0)
    v36 = v33;
  else
    v36 = v33 + 1;
  v37 = v36 & 0xFFFFFFFFFFFFFFFELL;
  if (v33 >= 2)
  {
    v38 = 0;
    v39 = *a4;
    v40 = v34;
    do
    {
      v41 = *v40++;
      *v39++ = v41;
      v38 += 2;
    }
    while (v38 < v37);
  }
  v42 = __OFSUB__(v33, v37);
  v43 = v33 - v37;
  if (!((v43 < 0) ^ v42 | (v43 == 0)))
  {
    v44 = v36 >> 1;
    v45 = (uint64_t *)&v34[v36 >> 1];
    v46 = (_QWORD *)v35[v44].f64;
    do
    {
      v47 = *v45++;
      *v46++ = v47;
      --v43;
    }
    while (v43);
  }
  if (*(_QWORD *)(a1 + 856) >= 2uLL)
  {
    v48 = 1;
    do
    {
      v49 = *(_QWORD *)(v83[0] + 24 * v48);
      v50 = *a3;
      v51 = a3[1];
      v52 = (_QWORD)a3[2] * (_QWORD)v51;
      if (v52 >= 0)
        v53 = (_QWORD)a3[2] * (_QWORD)v51;
      else
        v53 = v52 + 1;
      v54 = v53 & 0xFFFFFFFFFFFFFFFELL;
      if (v52 >= 2)
      {
        v55 = 0;
        v56 = *a3;
        v57 = *(float64x2_t **)(v83[0] + 24 * v48);
        do
        {
          v58 = *v57++;
          *v56 = vaddq_f64(v58, *v56);
          ++v56;
          v55 += 2;
        }
        while (v55 < v54);
      }
      v27 = v52 <= v54;
      v59 = v52 - v54;
      if (!v27)
      {
        v60 = v53 >> 1;
        v61 = (double *)(v49 + 16 * v60);
        v62 = v50[v60].f64;
        do
        {
          v63 = *v61++;
          *v62 = v63 + *v62;
          ++v62;
          --v59;
        }
        while (v59);
      }
      v64 = *(_QWORD *)(v82[0] + 16 * v48);
      v65 = *a4;
      v66 = (uint64_t)a4[1];
      if (v66 >= 0)
        v67 = (uint64_t)a4[1];
      else
        v67 = v66 + 1;
      v68 = v67 & 0xFFFFFFFFFFFFFFFELL;
      if (v66 >= 2)
      {
        v69 = 0;
        v70 = *a4;
        v71 = *(float64x2_t **)(v82[0] + 16 * v48);
        do
        {
          v72 = *v71++;
          *v70 = vaddq_f64(v72, *v70);
          ++v70;
          v69 += 2;
        }
        while (v69 < v68);
      }
      v27 = v66 <= v68;
      v73 = v66 - v68;
      if (!v27)
      {
        v74 = v67 >> 1;
        v75 = (double *)(v64 + 16 * v74);
        v76 = v65[v74].f64;
        do
        {
          v77 = *v75++;
          *v76 = v77 + *v76;
          ++v76;
          --v73;
        }
        while (v73);
      }
      v78 = __p[0];
      *a5 = *((double *)__p[0] + v48++) + *a5;
    }
    while (v48 < *(_QWORD *)(a1 + 856));
    goto LABEL_58;
  }
  v78 = __p[0];
  if (__p[0])
  {
LABEL_58:
    __p[1] = v78;
    operator delete(v78);
  }
  v84[0] = v82;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
  v84[0] = v83;
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
}

void sub_218566F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,char **a21)
{
  char **v21;
  char **v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))&(*v23)[8 * v24])();
LABEL_6:
  if (__p)
    operator delete(__p);
  a18 = &a12;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = &a15;
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(uint64_t a1, void **a2, float64x2_t **a3, double *a4)
{
  turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(a1, (void **)(a1 + 8), a2, a3, a4);
}

void turi::supervised::linear_regression_opt_interface::compute_validation_first_order_statistics(uint64_t a1, void **a2, float64x2_t **a3, double *a4)
{
  turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(a1, (void **)(a1 + 200), a2, a3, a4);
}

uint64_t turi::supervised::supervised_learning_model_base::operator=(uint64_t a1, uint64_t a2)
{
  turi::model_base::operator=(a1, a2);
  if (a1 != a2)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned long>,std::__tree_node<std::__value_type<std::string,unsigned long>,void *> *,long>>((uint64_t **)(a1 + 224), *(_QWORD **)(a2 + 224), (_QWORD *)(a2 + 232));
    std::vector<turi::option_handling::option_info>::__assign_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>((void **)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), (uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 7);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>((uint64_t **)(a1 + 272), *(_QWORD **)(a2 + 272), (_QWORD *)(a2 + 280));
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>((uint64_t **)(a1 + 296), *(__int128 **)(a2 + 296), (__int128 *)(a2 + 304));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 320), *(std::string **)(a2 + 320), *(__int128 **)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 344), *(std::string **)(a2 + 344), *(__int128 **)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 3));
  }
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  return a1;
}

uint64_t turi::supervised::l2_rescaling::l2_rescaling(uint64_t a1, uint64_t **a2, char a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  *(_QWORD *)(a1 + 16) = 0;
  v5 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = a3;
  v6 = 1;
  *(_QWORD *)a1 = &unk_24D948F30;
  *(_QWORD *)(a1 + 8) = 1;
  v7 = **a2;
  if ((*a2)[1] != v7)
  {
    v8 = 0;
    do
    {
      v9 = (uint64_t *)(v7 + 16 * v8);
      v10 = *v9;
      v11 = (std::__shared_weak_count *)v9[1];
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        v14 = *(_DWORD *)(v10 + 24);
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      else
      {
        v14 = *(_DWORD *)(v10 + 24);
      }
      if (v14 <= 6 && ((1 << v14) & 0x4A) != 0)
      {
        v16 = (uint64_t *)(**a2 + 16 * v8);
        v17 = *v16;
        v18 = (std::__shared_weak_count *)v16[1];
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          v21 = *(_QWORD *)(v17 + 64);
          do
            v22 = __ldaxr(v19);
          while (__stlxr(v22 - 1, v19));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v21 = *(_QWORD *)(v17 + 64);
        }
        v23 = v21 - *(unsigned __int8 *)(a1 + 32);
        v24 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v25 = (uint64_t *)(**a2 + 16 * v8);
        v26 = *v25;
        v27 = (std::__shared_weak_count *)v25[1];
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
          v24 = *(_QWORD *)(v26 + 64);
          do
            v30 = __ldaxr(v28);
          while (__stlxr(v30 - 1, v28));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        else
        {
          v24 = *(_QWORD *)(v26 + 64);
        }
        v23 = *(_QWORD *)(a1 + 8);
      }
      v31 = v23 + v24;
      *(_QWORD *)(a1 + 8) = v23 + v24;
      ++v8;
      v7 = **a2;
    }
    while (v8 < ((*a2)[1] - v7) >> 4);
    v6 = v31;
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v5, v6);
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 24);
  if (v33 >= 0)
    v34 = *(_QWORD *)(a1 + 24);
  else
    v34 = v33 + 1;
  v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
  if (v33 >= 2)
  {
    v36 = 2;
    if (v35 > 2)
      v36 = v34 & 0xFFFFFFFFFFFFFFFELL;
    bzero(*(void **)(a1 + 16), ((8 * v36 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v35 < v33)
    bzero((void *)(v32 + 16 * (v34 >> 1)), 8 * v33 - 16 * (v34 >> 1));
  v37 = **a2;
  if ((*a2)[1] != v37)
  {
    v38 = 0;
    v39 = 0;
    do
    {
      v40 = (uint64_t *)(v37 + 16 * v38);
      v42 = *v40;
      v41 = (std::__shared_weak_count *)v40[1];
      if (v41)
      {
        v43 = (unint64_t *)&v41->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        do
          v45 = __ldaxr(v43);
        while (__stlxr(v45 - 1, v43));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (!*(_BYTE *)(a1 + 32))
        goto LABEL_61;
      v46 = (uint64_t *)(**a2 + 16 * v38);
      v47 = *v46;
      v48 = (std::__shared_weak_count *)v46[1];
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        v51 = *(_DWORD *)(v47 + 24);
        do
          v52 = __ldaxr(v49);
        while (__stlxr(v52 - 1, v49));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      else
      {
        v51 = *(_DWORD *)(v47 + 24);
      }
      if ((v51 - 1) <= 5)
        v53 = qword_218723CD0[v51 - 1];
      else
LABEL_61:
        v53 = 0;
      while (1)
      {
        v57 = (uint64_t *)(**a2 + 16 * v38);
        v58 = *v57;
        v59 = (std::__shared_weak_count *)v57[1];
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
          v62 = *(_QWORD *)(v58 + 64);
          do
            v63 = __ldaxr(v60);
          while (__stlxr(v63 - 1, v60));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        else
        {
          v62 = *(_QWORD *)(v58 + 64);
        }
        if (v53 >= v62)
          break;
        v54 = turi::ml_data_internal::column_statistics::mean(*(turi::ml_data_internal::column_statistics **)(v42 + 48), v53);
        v55 = turi::ml_data_internal::column_statistics::stdev(*(turi::ml_data_internal::column_statistics **)(v42 + 48), v53);
        v56 = v54 * v54 + v55 * v55;
        if (v56 < 1.0e-10)
          v56 = 1.0e-10;
        *(double *)(*v5 + 8 * v39++) = sqrt(v56);
        ++v53;
      }
      ++v38;
      v37 = **a2;
    }
    while (v38 < ((*a2)[1] - v37) >> 4);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 8) - 8) = 0x3FF0000000000000;
  return a1;
}

void sub_218567504(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void turi::supervised::l2_rescaling::~l2_rescaling(void **this)
{
  *this = &unk_24D948F30;
  free(this[2]);
}

{
  *this = &unk_24D948F30;
  free(this[2]);
  JUMPOUT(0x219A19A08);
}

float64_t turi::supervised::l2_rescaling::transform(uint64_t a1, float64x2_t **a2)
{
  uint64_t v3;
  float64x2_t *v4;
  float64x2_t *v5;
  float64x2_t *v6;
  float64x2_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  _QWORD *v22;
  double v23;
  double v24;
  double v25;

  v4 = *(float64x2_t **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *a2;
  if (a2[1] == (float64x2_t *)v3)
  {
    v6 = *a2;
  }
  else
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a2, v3, 1);
    v6 = *a2;
    v3 = (uint64_t)a2[1];
  }
  if (v3 >= 0)
    v8 = v3;
  else
    v8 = v3 + 1;
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    v10 = 0;
    v11 = v6;
    v12 = v5;
    v13 = v4;
    do
    {
      v14 = *v12++;
      v15 = v14;
      v16 = *v13++;
      v7 = vdivq_f64(v15, v16);
      *v11++ = v7;
      v10 += 2;
    }
    while (v10 < v9);
  }
  v17 = __OFSUB__(v3, v9);
  v18 = v3 - v9;
  if (!((v18 < 0) ^ v17 | (v18 == 0)))
  {
    v19 = v8 >> 1;
    f64 = v4[v8 >> 1].f64;
    v21 = v5[v19].f64;
    v22 = (_QWORD *)v6[v19].f64;
    do
    {
      v23 = *v21++;
      v24 = v23;
      v25 = *f64++;
      v7.f64[0] = v24 / v25;
      *v22++ = *(_QWORD *)&v7.f64[0];
      --v18;
    }
    while (v18);
  }
  return v7.f64[0];
}

float64_t turi::supervised::l2_rescaling::inverse_transform(uint64_t a1, float64x2_t **a2)
{
  uint64_t v3;
  float64x2_t *v4;
  float64x2_t *v5;
  float64x2_t *v6;
  float64x2_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  _QWORD *v22;
  double v23;
  double v24;
  double v25;

  v4 = *(float64x2_t **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *a2;
  if (a2[1] == (float64x2_t *)v3)
  {
    v6 = *a2;
  }
  else
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a2, v3, 1);
    v6 = *a2;
    v3 = (uint64_t)a2[1];
  }
  if (v3 >= 0)
    v8 = v3;
  else
    v8 = v3 + 1;
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    v10 = 0;
    v11 = v6;
    v12 = v5;
    v13 = v4;
    do
    {
      v14 = *v12++;
      v15 = v14;
      v16 = *v13++;
      v7 = vmulq_f64(v15, v16);
      *v11++ = v7;
      v10 += 2;
    }
    while (v10 < v9);
  }
  v17 = __OFSUB__(v3, v9);
  v18 = v3 - v9;
  if (!((v18 < 0) ^ v17 | (v18 == 0)))
  {
    v19 = v8 >> 1;
    f64 = v4[v8 >> 1].f64;
    v21 = v5[v19].f64;
    v22 = (_QWORD *)v6[v19].f64;
    do
    {
      v23 = *v21++;
      v24 = v23;
      v25 = *f64++;
      v7.f64[0] = v24 * v25;
      *v22++ = *(_QWORD *)&v7.f64[0];
      --v18;
    }
    while (v18);
  }
  return v7.f64[0];
}

double turi::supervised::l2_rescaling::inverse_transform(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v2 = a2[3];
  if (v2 >= 1)
  {
    v3 = (double *)a2[1];
    v4 = (int *)a2[2];
    v5 = *(_QWORD *)(a1 + 16);
    do
    {
      v6 = *v4++;
      result = *v3 * *(double *)(v5 + 8 * v6);
      *v3++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

double turi::supervised::l2_rescaling::transform(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v2 = a2[3];
  if (v2 >= 1)
  {
    v3 = (double *)a2[1];
    v4 = (int *)a2[2];
    v5 = *(_QWORD *)(a1 + 16);
    do
    {
      v6 = *v4++;
      result = *v3 / *(double *)(v5 + 8 * v6);
      *v3++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

_BYTE *turi::supervised::l2_rescaling::save(turi::supervised::l2_rescaling *this, turi::oarchive *a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  _BYTE *result;
  unint64_t v9;
  size_t v10;
  char **v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;
  size_t v15;
  uint64_t *v16;
  size_t v17;
  BOOL v18;
  std::vector<char>::size_type v19;

  v4 = (_QWORD *)((char *)this + 8);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v5)
    {
      v10 = 2 * v5 + 16;
      *((_QWORD *)a2 + 5) = v10;
      v11 = (char **)*((_QWORD *)a2 + 2);
      if (v11)
      {
        v6 = *v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v14);
          v6 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v10, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v6;
    }
    else
    {
      v6 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v6[*((_QWORD *)a2 + 4)] = *v4;
    *((_QWORD *)a2 + 4) += 8;
  }
  turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (uint64_t)this + 16);
  v7 = (char *)this + 32;
  if (*(_QWORD *)a2)
    return (_BYTE *)std::ostream::write();
  v9 = *((_QWORD *)a2 + 5);
  if (*((_QWORD *)a2 + 4) + 1 > v9)
  {
    v15 = 2 * v9 + 2;
    *((_QWORD *)a2 + 5) = v15;
    v16 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v16)
    {
      result = (_BYTE *)*v16;
      v17 = v16[1] - *v16;
      v18 = v15 >= v17;
      v19 = v15 - v17;
      if (v19 != 0 && v18)
      {
        std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v19);
        result = (_BYTE *)**((_QWORD **)a2 + 2);
      }
      else if (!v18)
      {
        v16[1] = (uint64_t)&result[v15];
      }
    }
    else
    {
      result = malloc_type_realloc(*((void **)a2 + 3), v15, 0xF6EA6B1uLL);
    }
    *((_QWORD *)a2 + 3) = result;
  }
  else
  {
    result = (_BYTE *)*((_QWORD *)a2 + 3);
  }
  result[(*((_QWORD *)a2 + 4))++] = *v7;
  return result;
}

void *turi::supervised::l2_rescaling::load(turi::supervised::l2_rescaling *this, turi::iarchive *a2)
{
  uint64_t v4;
  void *result;
  uint64_t v6;

  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    *((_QWORD *)this + 1) = *(_QWORD *)(v4 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  result = turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 2);
  v6 = *((_QWORD *)a2 + 2);
  if (!v6)
    return (void *)std::istream::read();
  *((_BYTE *)this + 32) = *(_BYTE *)(v6 + (*((_QWORD *)a2 + 3))++);
  return result;
}

void sub_218567B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::supervised::l2_rescaling>::shared_ptr[abi:ne180100]<turi::supervised::l2_rescaling,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D948FA8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_218567C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::l2_rescaling *,std::shared_ptr<turi::supervised::l2_rescaling>::__shared_ptr_default_delete<turi::supervised::l2_rescaling,turi::supervised::l2_rescaling>,std::allocator<turi::supervised::l2_rescaling>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::l2_rescaling *,std::shared_ptr<turi::supervised::l2_rescaling>::__shared_ptr_default_delete<turi::supervised::l2_rescaling,turi::supervised::l2_rescaling>,std::allocator<turi::supervised::l2_rescaling>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

int64x2_t **Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>(int64x2_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t *v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *i64;
  std::bad_alloc *exception;
  std::bad_alloc *v21;
  uint64_t v22;

  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v21 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v21, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v5 * v4, 1);
  v22 = a2[2];
  v7 = *a2;
  v8 = a2[1];
  if (a1[1] != (int64x2_t *)*a2 || v8 != 1)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v7, v8);
    v7 = (uint64_t)a1[1];
  }
  v10 = *a1;
  if (v7 >= 0)
    v11 = v7;
  else
    v11 = v7 + 1;
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (v7 >= 2)
  {
    v13 = 0;
    v14 = vdupq_lane_s64(v22, 0);
    v15 = *a1;
    do
    {
      *v15++ = v14;
      v13 += 2;
    }
    while (v13 < v12);
  }
  v16 = __OFSUB__(v7, v12);
  v17 = v7 - v12;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    i64 = v10[v11 >> 1].i64;
    do
    {
      *i64++ = v22;
      --v17;
    }
    while (v17);
  }
  return a1;
}

void sub_218567DAC(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[2 * a2];
    v8 = 16 * a2;
    do
    {
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v6, a3);
      v6 += 2;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_218567E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D949020;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D949020;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 iterator;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t i;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  double *v60;
  double *v61;
  double *v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  std::bad_alloc *v67;
  std::bad_alloc *v68;
  std::bad_alloc *exception;
  std::bad_alloc *v70;
  void *v71[2];
  _BYTE v72[128];
  uint64_t v73;
  unsigned __int8 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  int8x16_t v88;
  _QWORD v89[3];
  uint64_t *v90;
  int8x16_t v91;
  uint64_t v92;
  _QWORD **v93;
  _QWORD *v94;
  void **v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  v87 = 0;
  v88 = 0uLL;
  v7 = *(_QWORD *)(v6 + 848);
  if (v7 && 0x7FFFFFFFFFFFFFFFLL / v7 <= 999)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v70 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v70, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v87, 1000 * v7, 1000, v7);
  v85 = 0;
  v86 = 0;
  v8 = malloc_type_malloc(0x1F40uLL, 0x1E76AA36uLL);
  if (!v8)
  {
    v67 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v68 = std::bad_alloc::bad_alloc(v67);
    __cxa_throw(v68, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v85 = v8;
  v86 = 1000;
  iterator = turi::ml_data::get_iterator((turi::ml_data *)*(_QWORD *)(a1 + 16), v4, v5, (uint64_t)v72);
  if (v78 != v77)
  {
    v10 = 0;
    do
    {
      do
      {
        if (v78 == v77)
          break;
        v11 = v80;
        v12 = v81;
        if (v81)
        {
          p_shared_owners = (unint64_t *)&v81->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        v15 = v82;
        v16 = v84;
        v18 = v87;
        v17 = v88.i64[0];
        v19 = (char *)&v87[v10];
        v20 = v88.i64[1];
        v21 = 8 * v88.i64[0];
        if (v88.i64[1] >= 1)
        {
          v22 = &v87[v10];
          do
          {
            *v22 = 0;
            v22 = (_QWORD *)((char *)v22 + v21);
            --v20;
          }
          while (v20);
        }
        if (v16)
        {
          v23 = *(_QWORD *)(v11 + 56);
          if (v23)
          {
            v24 = 0;
            v25 = 0;
            v26 = (unint64_t *)(*(_QWORD *)(v11 + 96) + 8 * v15 + 8 * (*(_BYTE *)(v11 + 18) == 0));
            v27 = *(_QWORD *)(v11 + 72);
            v28 = &v18[v10];
            do
            {
              v29 = *(_QWORD *)(v27 + 16 * v24);
              v30 = *(_QWORD *)(v29 + 64);
              switch(*(_DWORD *)(v29 + 24))
              {
                case 0:
                  if (v30)
                  {
                    iterator.n128_u64[0] = *v26;
                    *(_QWORD *)&v19[8 * v25 * v17] = *v26;
                  }
                  ++v26;
                  goto LABEL_49;
                case 1:
                  v39 = *v26++;
                  v38 = v39;
                  --v25;
                  if (v39 < v30 && v38 != 0)
                    *(_QWORD *)&v19[8 * (v38 + v25) * v17] = 0x3FF0000000000000;
                  goto LABEL_49;
                case 2:
                  v31 = *(_QWORD *)(v29 + 72);
                  if (!v31)
                    goto LABEL_49;
                  v32 = 0;
                  v33 = 0;
                  v34 = (_QWORD *)((char *)v28 + v21 * v25);
                  do
                  {
                    if (v33 < v30)
                    {
                      iterator.n128_u64[0] = v26[v33];
                      *v34 = iterator.n128_u64[0];
                    }
                    ++v33;
                    v34 = (_QWORD *)((char *)v34 + v21);
                    v32 -= 8;
                  }
                  while (v31 != v33);
                  break;
                case 3:
                  v42 = *v26++;
                  v41 = v42;
                  --v25;
                  if (v42)
                  {
                    do
                    {
                      v43 = *v26;
                      if (*v26 < v30 && v43 != 0)
                        *(_QWORD *)&v19[8 * (v43 + v25) * v17] = 0x3FF0000000000000;
                      ++v26;
                      --v41;
                    }
                    while (v41);
                  }
                  goto LABEL_49;
                case 4:
                  v46 = *v26++;
                  for (i = v46; i; --i)
                  {
                    if (*v26 < v30)
                    {
                      iterator.n128_u64[0] = v26[1];
                      *(_QWORD *)&v19[8 * (*v26 + v25) * v17] = iterator.n128_u64[0];
                    }
                    v26 += 2;
                  }
                  goto LABEL_49;
                case 7:
                  v35 = *(_QWORD *)(v29 + 72);
                  if (!v35)
                    goto LABEL_49;
                  v32 = 0;
                  v36 = 0;
                  v37 = (_QWORD *)((char *)v28 + v21 * v25);
                  do
                  {
                    if (v36 < v30)
                    {
                      iterator.n128_u64[0] = v26[v36];
                      *v37 = iterator.n128_u64[0];
                    }
                    ++v36;
                    v37 = (_QWORD *)((char *)v37 + v21);
                    v32 -= 8;
                  }
                  while (v35 != v36);
                  break;
                default:
                  goto LABEL_50;
              }
              v26 = (unint64_t *)((char *)v26 - v32);
LABEL_49:
              v25 += v30;
LABEL_50:
              ++v24;
            }
            while (v24 != v23);
          }
        }
        if (v12)
        {
          v47 = (unint64_t *)&v12->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, iterator);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v87[v10 + v88.i64[0] * (*(_QWORD *)(v6 + 848) - 1)] = 0x3FF0000000000000;
        v49 = *(_QWORD *)(v80 + 96);
        iterator.n128_u64[0] = 1.0;
        if (*(_BYTE *)(v80 + 16))
          v50 = *(_BYTE *)(v80 + 17) == 0;
        else
          v50 = 0;
        if (v50)
        {
          v51 = (_QWORD *)(v80 + 24);
          if (!*(_BYTE *)(v80 + 18))
            v51 = (_QWORD *)(v49 + 8 * v82);
          iterator.n128_u64[0] = *(_QWORD *)(v49 + 8 * v82 + 8 * *v51 - 8);
        }
        v85[v10] = iterator.n128_u64[0];
        if (v84 | v74)
        {
          v52 = (uint64_t *)(v49 + 8 * v82);
          if (v75)
            v52 = &v76;
          v82 += *v52;
        }
        v53 = v78 + 1;
        v54 = ++v78 - v73 * v79;
        v83 = v54;
        if (v54 == v73 && v53 != v77)
          turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v72);
        ++v10;
      }
      while (v10 != 1000);
      Eigen::internal::conservative_resize_like_impl<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,false>::run((uint64_t)&v87, v10, *(_QWORD *)(v6 + 848));
      v85 = Eigen::internal::conditional_aligned_realloc_new_auto<double,true>(v85, v10, v86);
      v86 = v10;
      if (*(_BYTE *)(v6 + 880))
      {
        v56 = v88.i64[0];
        if (v88.i64[0])
        {
          v57 = 0;
          v58 = (double *)v87;
          v59 = v88.i64[1];
          v60 = *(double **)(*(_QWORD *)(v6 + 864) + 16);
          do
          {
            if (v59 >= 1)
            {
              v61 = v58;
              v62 = v60;
              v63 = v59;
              do
              {
                v64 = *v62++;
                *v61 = *v61 / v64;
                v61 += v56;
                --v63;
              }
              while (v63);
            }
            ++v57;
            ++v58;
          }
          while (v57 != v56);
        }
      }
      v65 = *(_QWORD *)(a1 + 24);
      v90 = (uint64_t *)&v87;
      v91.i64[0] = v65;
      v91.i64[1] = (uint64_t)&v85;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double,double>,Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>((uint64_t *)v71, &v90);
      v91 = vextq_s8(v88, v88, 8uLL);
      v92 = 0x4000000000000000;
      v93 = &v87;
      v95 = v71;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::add_assign_op<double,double>>((float64x2_t **)(**(_QWORD **)(a1 + 32) + 16 * v4), (uint64_t)&v90);
      v89[0] = v71;
      v89[1] = v71;
      if (v71[1])
      {
        v91.i64[0] = (uint64_t)v71[0];
        v92 = (uint64_t)v71[0];
        v94 = v89;
        v66 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v90);
      }
      else
      {
        v66 = 0.0;
      }
      *(double *)(**(_QWORD **)(a1 + 40) + 8 * v4) = v66 + *(double *)(**(_QWORD **)(a1 + 40) + 8 * v4);
      free(v71[0]);
      v10 = 0;
    }
    while (v78 != v77);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v72);
  free(v85);
  free(v87);
}

void sub_218568494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
  uint64_t v12;

  free(*(void **)(v12 - 224));
  free(*(void **)(v12 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::conservative_resize_like_impl<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,false>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  int64x2_t v8;
  int64x2_t v9;
  void *v10;
  __int128 v11;
  std::bad_alloc *v12;
  std::bad_alloc *v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;
  void *v16;
  int8x16_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  char v24;
  _QWORD v25[4];
  _QWORD v26[3];
  _QWORD v27[3];

  if (*(_QWORD *)(a1 + 8) == a2)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6 != a3)
    {
      if (a2 && a3 && 0x7FFFFFFFFFFFFFFFLL / a3 < a2)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v15 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v15, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      *(_QWORD *)a1 = Eigen::internal::conditional_aligned_realloc_new_auto<double,true>(*(void **)a1, a3 * a2, v6 * a2);
      *(_QWORD *)(a1 + 8) = a2;
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  else
  {
    v22 = 0;
    v23 = 0uLL;
    if (a2 && a3 && 0x7FFFFFFFFFFFFFFFLL / a3 < a2)
    {
      v12 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v13 = std::bad_alloc::bad_alloc(v12);
      __cxa_throw(v13, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v22, a3 * a2, a2, a3);
    v7 = *(void **)a1;
    v16 = v22;
    v8 = *(int64x2_t *)(a1 + 8);
    v9.i64[0] = a2;
    v9.i64[1] = a3;
    v17 = vbslq_s8((int8x16_t)vcgtq_s64(v9, v8), (int8x16_t)v8, (int8x16_t)v9);
    v18 = &v22;
    v19 = 0;
    v20 = 0;
    v21 = v23;
    v26[2] = v23;
    v27[0] = v7;
    v27[2] = v8.i64[0];
    v26[0] = v22;
    v25[0] = v26;
    v25[1] = v27;
    v25[2] = &v24;
    v25[3] = &v16;
    Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::assign_op<double,double>,0>,4,0>::run(v25);
    v10 = *(void **)a1;
    *(_QWORD *)a1 = v22;
    v22 = v10;
    v11 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    v23 = v11;
    free(v10);
  }
}

void sub_2185686A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  free(a17);
  _Unwind_Resume(a1);
}

void *Eigen::internal::conditional_aligned_realloc_new_auto<double,true>(void *a1, unint64_t a2, unint64_t a3)
{
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v6;

  if (a2 >> 61 || a3 >> 61 || (result = malloc_type_realloc(a1, 8 * a2, 0x37728CFDuLL), a2) && !result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v6 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v6, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  return result;
}

_QWORD *Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::assign_op<double,double>,0>,4,0>::run(_QWORD *result)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;

  v1 = (unint64_t *)result[3];
  v2 = *v1;
  if ((*v1 & 7) != 0)
  {
    v3 = v1[2];
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = 0;
      v6 = v1[1];
      v7 = (_QWORD *)*result;
      v8 = (_QWORD *)result[1];
      do
      {
        if (v6 >= 1)
        {
          v9 = (uint64_t *)(*v8 + v8[2] * v4);
          v10 = (_QWORD *)(*v7 + v7[2] * v4);
          v11 = v6;
          do
          {
            v12 = *v9++;
            *v10++ = v12;
            --v11;
          }
          while (v11);
        }
        ++v5;
        v4 += 8;
      }
      while (v5 != v3);
    }
  }
  else
  {
    v13 = v1[2];
    if (v13 >= 1)
    {
      v14 = 0;
      v15 = 0;
      v16 = v1[1];
      v17 = v1[6] & 1;
      v18 = (v2 >> 3) & 1;
      if (v18 >= v16)
        v18 = v16;
      do
      {
        if (v18 >= 1)
          *(_QWORD *)(*(_QWORD *)*result + 8 * *(_QWORD *)(*result + 16) * v15) = *(_QWORD *)(*(_QWORD *)result[1]
                                                                                              + 8
                                                                                              * *(_QWORD *)(result[1] + 16)
                                                                                              * v15);
        v19 = (v16 - v18) & 0xFFFFFFFFFFFFFFFELL;
        v20 = v19 + v18;
        if (v19 >= 1)
        {
          v21 = 8 * v18;
          v22 = v18;
          do
          {
            *(_OWORD *)(*(_QWORD *)*result + 8 * (v22 + v15 * *(_QWORD *)(*result + 16))) = *(_OWORD *)(*(_QWORD *)result[1] + v14 * *(_QWORD *)(result[1] + 16) + v21);
            v22 += 2;
            v21 += 16;
          }
          while (v22 < v20);
        }
        if (v20 < v16)
        {
          v23 = *(_QWORD *)*result + *(_QWORD *)(*result + 16) * v14;
          v24 = *(_QWORD *)result[1] + *(_QWORD *)(result[1] + 16) * v14;
          do
          {
            *(_QWORD *)(v23 + 8 * v20) = *(_QWORD *)(v24 + 8 * v20);
            ++v20;
          }
          while (v20 < v16);
        }
        v25 = __OFADD__(v18, v17);
        v27 = v18 + v17;
        v26 = (v27 < 0) ^ v25;
        v18 = v27 & 1;
        if (v26)
          v18 = -v18;
        if (v16 < v18)
          v18 = v16;
        ++v15;
        v14 += 8;
      }
      while (v15 != v13);
    }
  }
  return result;
}

uint64_t *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double,double>,Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  _QWORD v21[4];
  uint64_t v22;

  *a1 = 0;
  a1[1] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, a2[2][1], 1);
  Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,7,Eigen::DenseShape,Eigen::DenseShape,double,double>::product_evaluator(v21, a2);
  v4 = a2[2];
  v22 = *v4;
  v5 = v4[1];
  if (a1[1] != v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v5, 1);
    v5 = a1[1];
  }
  v6 = *a1;
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 >= 2)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      *(float64x2_t *)(v6 + v9) = vsubq_f64(*(float64x2_t *)(v21[0] + v9), *(float64x2_t *)(v22 + v9));
      v10 += 2;
      v9 += 16;
    }
    while (v10 < v8);
  }
  v11 = __OFSUB__(v5, v8);
  v12 = v5 - v8;
  if (!((v12 < 0) ^ v11 | (v12 == 0)))
  {
    v13 = v7 >> 1;
    v14 = (double *)(v22 + 16 * (v7 >> 1));
    v15 = (double *)(v21[0] + 16 * v13);
    v16 = (double *)(v6 + 16 * v13);
    do
    {
      v17 = *v15++;
      v18 = v17;
      v19 = *v14++;
      *v16++ = v18 - v19;
      --v12;
    }
    while (v12);
  }
  free((void *)v21[2]);
  return a1;
}

void sub_2185689A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void **v13;

  free(a13);
  free(*v13);
  _Unwind_Resume(a1);
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::add_assign_op<double,double>>(float64x2_t **a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  float64x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double *f64;
  double v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[8];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v27 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16);
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v26, v4, 1);
    v5 = (char *)v26;
    v6 = v27;
    v7 = *(unint64_t **)(a2 + 48);
    if (v27 >= 0)
      v8 = v27;
    else
      v8 = v27 + 1;
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v27 >= 2)
    {
      v10 = 2;
      if (v9 > 2)
        v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      bzero(v26, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6)
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
  }
  else
  {
    v7 = *(unint64_t **)(a2 + 48);
  }
  v28 = 0x3FF0000000000000;
  v30 = *(_OWORD *)(a2 + 8);
  v31 = *(_QWORD *)(a2 + 24);
  v32 = *(_QWORD *)(a2 + 32);
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>((uint64_t)v29, v7, (uint64_t *)&v26, (double *)&v28);
  v11 = (char *)v26;
  v12 = *a1;
  v13 = (uint64_t)a1[1];
  if (v13 >= 0)
    v14 = (uint64_t)a1[1];
  else
    v14 = v13 + 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (v13 >= 2)
  {
    v16 = 0;
    v17 = *a1;
    v18 = (float64x2_t *)v26;
    do
    {
      v19 = *v18++;
      *v17 = vaddq_f64(v19, *v17);
      ++v17;
      v16 += 2;
    }
    while (v16 < v15);
  }
  v20 = v13 <= v15;
  v21 = v13 - v15;
  if (!v20)
  {
    v22 = v14 >> 1;
    v23 = (double *)&v11[16 * v22];
    f64 = v12[v22].f64;
    do
    {
      v25 = *v23++;
      *f64 = v25 + *f64;
      ++f64;
      --v21;
    }
    while (v21);
  }
  free(v26);
}

void sub_218568B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t a1, unint64_t *a2, uint64_t *a3, double *a4)
{
  unint64_t v4;
  uint64_t *v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  std::bad_alloc *exception;
  std::bad_alloc *v19;
  _QWORD v21[2];
  uint64_t v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  if (v4 >> 61)
    goto LABEL_14;
  v7 = *(uint64_t **)(a1 + 32);
  v8 = *a4;
  v9 = *(double *)(a1 + 24);
  v10 = *a2;
  if (*a2)
  {
    v11 = *a2;
    goto LABEL_8;
  }
  v12 = 8 * v4;
  if (v4 <= 0x4000)
  {
    v13 = (char *)&v21[-1] - ((MEMORY[0x24BDAC7A8](v12, v12 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v13, v14);
    v10 = 0;
    v11 = (unint64_t)(v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  v11 = (unint64_t)malloc_type_malloc(v12, 0x1E76AA36uLL);
  if (!v11)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v19 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v19, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v10 = *a2;
  v4 = a2[1];
LABEL_8:
  if (v10)
    v15 = 0;
  else
    v15 = (void *)v11;
  v16 = v7[1];
  v17 = v7[2];
  v22[0] = *v7;
  v22[1] = v16;
  v21[0] = v11;
  v21[1] = 1;
  Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(v17, v16, v22, v21, *a3, 1, v8 * v9);
  if (8 * v4 > 0x20000)
    free(v15);
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D9490A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D9490A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  turi::ml_data *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 iterator;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  int *v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  double v52;
  BOOL v53;
  _QWORD *v54;
  double v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  _QWORD **v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  char v69[8];
  uint64_t v70;
  double v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _BYTE v77[128];
  uint64_t v78;
  unsigned __int8 v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  char v90[8];
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v4 = *a2;
  v5 = *a3;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(turi::ml_data **)(a1 + 16);
  v8 = *(_QWORD *)(v7 + 848);
  v90[0] = 0;
  v93 = v8;
  v91 = 0u;
  v92 = 0u;
  iterator = turi::ml_data::get_iterator(v6, v4, v5, (uint64_t)v77);
  if (v83 != v82)
  {
    v65 = v4;
    v66 = (_QWORD **)a1;
    v64 = v7;
    do
    {
      v10 = v86;
      v68 = v85;
      if (v86)
      {
        p_shared_owners = (unint64_t *)&v86->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v67 = v10;
      *(_QWORD *)&v92 = 0;
      if (v89)
      {
        v13 = *(_QWORD *)(v68 + 56);
        if (v13)
        {
          v14 = 0;
          v15 = 0;
          v16 = (uint64_t *)(*(_QWORD *)(v68 + 96) + 8 * v87 + 8 * (*(_BYTE *)(v68 + 18) == 0));
          do
          {
            v17 = *(_QWORD *)(*(_QWORD *)(v68 + 72) + 16 * v14);
            v18 = *(_QWORD *)(v17 + 64);
            switch(*(_DWORD *)(v17 + 24))
            {
              case 0:
                v19 = *v16++;
                v20 = v19;
                if (v18)
                {
                  v94 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v91, (int)v15, &v94) = v20;
                }
                goto LABEL_41;
              case 1:
                v32 = *v16++;
                v31 = v32;
                if (v32 < v18 && v31 != 0)
                {
                  v94 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v91, (int)v31 + (int)v15 - 1, &v94) = 0x3FF0000000000000;
                }
                goto LABEL_36;
              case 2:
                v21 = *(_QWORD *)(v17 + 72);
                if (v21)
                {
                  v22 = 0;
                  v23 = v15 << 32;
                  do
                  {
                    v24 = *v16++;
                    v25 = v24;
                    if (v22 < v18)
                    {
                      v94 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v91, v23 >> 32, &v94) = v25;
                    }
                    ++v22;
                    v23 += 0x100000000;
                  }
                  while (v21 != v22);
                }
                goto LABEL_23;
              case 3:
                v35 = *v16++;
                for (i = v35; i; --i)
                {
                  v36 = *v16;
                  if (*v16 < v18 && v36 != 0)
                  {
                    v94 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v91, (int)v36 + (int)v15 - 1, &v94) = 0x3FF0000000000000;
                  }
                  ++v16;
                }
LABEL_36:
                v15 = v18 + v15 - 1;
                break;
              case 4:
                v39 = *v16++;
                for (j = v39; j; --j)
                {
                  v40 = *v16;
                  if (*v16 < v18)
                  {
                    v41 = v16[1];
                    v94 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v91, (int)v40 + (int)v15, &v94) = v41;
                  }
                  v16 += 2;
                }
LABEL_41:
                v15 += v18;
                break;
              case 7:
                v26 = *(_QWORD *)(v17 + 72);
                if (v26)
                {
                  v27 = 0;
                  v28 = v15 << 32;
                  do
                  {
                    v29 = *v16++;
                    v30 = v29;
                    if (v27 < v18)
                    {
                      v94 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v91, v28 >> 32, &v94) = v30;
                    }
                    ++v27;
                    v28 += 0x100000000;
                  }
                  while (v26 != v27);
                }
LABEL_23:
                v15 += v18;
                break;
              default:
                break;
            }
            ++v14;
          }
          while (v14 != v13);
        }
      }
      if (v67)
      {
        v42 = (unint64_t *)&v67->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v67->__on_zero_shared)(v67, iterator);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v44 = *(_DWORD *)(v64 + 848) - 1;
      v94 = 0;
      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v91, v44, &v94) = 0x3FF0000000000000;
      if (*(_BYTE *)(v64 + 880))
        (*(void (**)(_QWORD, char *))(**(_QWORD **)(v64 + 864) + 40))(*(_QWORD *)(v64 + 864), v90);
      v45 = v92;
      if ((uint64_t)v92 < 1)
      {
        v48 = 0.0;
      }
      else
      {
        v47 = (int *)*((_QWORD *)&v91 + 1);
        v46 = (double *)v91;
        v48 = 0.0;
        do
        {
          v49 = *v46++;
          v50 = v49;
          v51 = *v47++;
          v48 = v48 + v50 * *(double *)(*v66[3] + 8 * v51);
          --v45;
        }
        while (v45);
      }
      v52 = 1.0;
      if (*(_BYTE *)(v85 + 16))
        v53 = *(_BYTE *)(v85 + 17) == 0;
      else
        v53 = 0;
      if (v53)
      {
        v54 = (_QWORD *)(v85 + 24);
        if (!*(_BYTE *)(v85 + 18))
          v54 = (_QWORD *)(*(_QWORD *)(v85 + 96) + 8 * v87);
        v52 = *(double *)(*(_QWORD *)(v85 + 96) + 8 * v87 + 8 * *v54 - 8);
      }
      v55 = v48 - v52;
      v69[0] = 0;
      v70 = v93;
      v71 = v55 + v55;
      v72 = v90;
      LOBYTE(v73) = 0;
      v74 = 0u;
      v75 = 0u;
      v76 = 0;
      LOBYTE(v94) = 0;
      v95 = 0u;
      v96 = 0u;
      v97 = v93;
      Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const>,1>::run((double *)&v94, (uint64_t)v69);
      v56 = v76;
      v76 = v97;
      v97 = v56;
      v57 = v74;
      v74 = v95;
      v95 = v57;
      v58 = v75;
      v75 = v96;
      v96 = v58;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v95);
      turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(*v66[4] + 16 * v65), &v73);
      *(double *)(*v66[5] + 8 * v65) = *(double *)(*v66[5] + 8 * v65) + v55 * v55;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v74);
      if (v89 | v79)
      {
        v59 = (uint64_t *)(*(_QWORD *)(v85 + 96) + 8 * v87);
        if (v80)
          v59 = &v81;
        v87 += *v59;
      }
      v60 = v83 + 1;
      v61 = v82;
      v62 = ++v83 - v78 * v84;
      v88 = v62;
      if (v62 == v78 && v60 != v82)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v77);
        v61 = v82;
        v60 = v83;
      }
    }
    while (v60 != v61);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v77);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v91);
}

void sub_2185692B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

double *Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const>,1>::run(double *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  double *v4;
  double v5;
  double *v6;
  int *v7;
  double v8;
  double v9;
  uint64_t v10;

  v2 = *(_QWORD **)(a2 + 32);
  v3 = v2[3];
  if (v3 >= 1)
  {
    v4 = result;
    v5 = *(double *)(a2 + 24);
    v6 = (double *)v2[1];
    v7 = (int *)v2[2];
    do
    {
      v8 = *v6++;
      v9 = v5 * v8;
      v10 = *v7++;
      result = (double *)Eigen::SparseVector<double,0,int>::insert(v4, v10);
      *result = v9;
      --v3;
    }
    while (v3);
  }
  return result;
}

int64x2_t **Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>(int64x2_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  int64x2_t v16;
  int64x2_t *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *i64;
  std::bad_alloc *exception;
  std::bad_alloc *v23;
  uint64_t v24;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
    goto LABEL_24;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v5 * v4, v4, v5);
  v7 = a2[2];
  v8 = *a2;
  v9 = a2[1];
  if (a1[1] != (int64x2_t *)*a2 || a1[2] != (int64x2_t *)v9)
  {
    v24 = a2[2];
    if (!v8 || !v9 || 0x7FFFFFFFFFFFFFFFLL / v9 >= v8)
    {
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v9 * v8, v8, v9);
      v8 = (uint64_t)a1[1];
      v9 = (uint64_t)a1[2];
      v7 = v24;
      goto LABEL_14;
    }
LABEL_24:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v23 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v23, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
LABEL_14:
  v11 = *a1;
  v12 = v8 * v9;
  if (v8 * v9 >= 0)
    v13 = v8 * v9;
  else
    v13 = v12 + 1;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v15 = 0;
    v16 = vdupq_lane_s64(v7, 0);
    v17 = *a1;
    do
    {
      *v17++ = v16;
      v15 += 2;
    }
    while (v15 < v14);
  }
  v18 = v12 <= v14;
  v19 = v12 - v14;
  if (!v18)
  {
    i64 = v11[v13 >> 1].i64;
    do
    {
      *i64++ = v7;
      --v19;
    }
    while (v19);
  }
  return a1;
}

void sub_218569510(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      Eigen::DenseStorage<double,-1,-1,-1,0>::DenseStorage(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_2185695AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        v4 -= 24;
        free(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D949120;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D949120;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 iterator;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t i;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  double *v60;
  double *v61;
  double *v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  std::bad_alloc *v67;
  std::bad_alloc *v68;
  std::bad_alloc *exception;
  std::bad_alloc *v70;
  void *v71[2];
  _BYTE v72[128];
  uint64_t v73;
  unsigned __int8 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  int8x16_t v88;
  _QWORD v89[3];
  uint64_t *v90;
  int8x16_t v91;
  uint64_t v92;
  _QWORD **v93;
  _QWORD *v94;
  void **v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  v87 = 0;
  v88 = 0uLL;
  v7 = *(_QWORD *)(v6 + 848);
  if (v7 && 0x7FFFFFFFFFFFFFFFLL / v7 <= 999)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v70 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v70, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v87, 1000 * v7, 1000, v7);
  v85 = 0;
  v86 = 0;
  v8 = malloc_type_malloc(0x1F40uLL, 0x1E76AA36uLL);
  if (!v8)
  {
    v67 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v68 = std::bad_alloc::bad_alloc(v67);
    __cxa_throw(v68, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v85 = v8;
  v86 = 1000;
  iterator = turi::ml_data::get_iterator((turi::ml_data *)(v6 + 8), v4, v5, (uint64_t)v72);
  if (v78 != v77)
  {
    v10 = 0;
    do
    {
      do
      {
        if (v78 == v77)
          break;
        v11 = v80;
        v12 = v81;
        if (v81)
        {
          p_shared_owners = (unint64_t *)&v81->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        v15 = v82;
        v16 = v84;
        v18 = v87;
        v17 = v88.i64[0];
        v19 = (char *)&v87[v10];
        v20 = v88.i64[1];
        v21 = 8 * v88.i64[0];
        if (v88.i64[1] >= 1)
        {
          v22 = &v87[v10];
          do
          {
            *v22 = 0;
            v22 = (_QWORD *)((char *)v22 + v21);
            --v20;
          }
          while (v20);
        }
        if (v16)
        {
          v23 = *(_QWORD *)(v11 + 56);
          if (v23)
          {
            v24 = 0;
            v25 = 0;
            v26 = (unint64_t *)(*(_QWORD *)(v11 + 96) + 8 * v15 + 8 * (*(_BYTE *)(v11 + 18) == 0));
            v27 = *(_QWORD *)(v11 + 72);
            v28 = &v18[v10];
            do
            {
              v29 = *(_QWORD *)(v27 + 16 * v24);
              v30 = *(_QWORD *)(v29 + 64);
              switch(*(_DWORD *)(v29 + 24))
              {
                case 0:
                  if (v30)
                  {
                    iterator.n128_u64[0] = *v26;
                    *(_QWORD *)&v19[8 * v25 * v17] = *v26;
                  }
                  ++v26;
                  goto LABEL_49;
                case 1:
                  v39 = *v26++;
                  v38 = v39;
                  --v25;
                  if (v39 < v30 && v38 != 0)
                    *(_QWORD *)&v19[8 * (v38 + v25) * v17] = 0x3FF0000000000000;
                  goto LABEL_49;
                case 2:
                  v31 = *(_QWORD *)(v29 + 72);
                  if (!v31)
                    goto LABEL_49;
                  v32 = 0;
                  v33 = 0;
                  v34 = (_QWORD *)((char *)v28 + v21 * v25);
                  do
                  {
                    if (v33 < v30)
                    {
                      iterator.n128_u64[0] = v26[v33];
                      *v34 = iterator.n128_u64[0];
                    }
                    ++v33;
                    v34 = (_QWORD *)((char *)v34 + v21);
                    v32 -= 8;
                  }
                  while (v31 != v33);
                  break;
                case 3:
                  v42 = *v26++;
                  v41 = v42;
                  --v25;
                  if (v42)
                  {
                    do
                    {
                      v43 = *v26;
                      if (*v26 < v30 && v43 != 0)
                        *(_QWORD *)&v19[8 * (v43 + v25) * v17] = 0x3FF0000000000000;
                      ++v26;
                      --v41;
                    }
                    while (v41);
                  }
                  goto LABEL_49;
                case 4:
                  v46 = *v26++;
                  for (i = v46; i; --i)
                  {
                    if (*v26 < v30)
                    {
                      iterator.n128_u64[0] = v26[1];
                      *(_QWORD *)&v19[8 * (*v26 + v25) * v17] = iterator.n128_u64[0];
                    }
                    v26 += 2;
                  }
                  goto LABEL_49;
                case 7:
                  v35 = *(_QWORD *)(v29 + 72);
                  if (!v35)
                    goto LABEL_49;
                  v32 = 0;
                  v36 = 0;
                  v37 = (_QWORD *)((char *)v28 + v21 * v25);
                  do
                  {
                    if (v36 < v30)
                    {
                      iterator.n128_u64[0] = v26[v36];
                      *v37 = iterator.n128_u64[0];
                    }
                    ++v36;
                    v37 = (_QWORD *)((char *)v37 + v21);
                    v32 -= 8;
                  }
                  while (v35 != v36);
                  break;
                default:
                  goto LABEL_50;
              }
              v26 = (unint64_t *)((char *)v26 - v32);
LABEL_49:
              v25 += v30;
LABEL_50:
              ++v24;
            }
            while (v24 != v23);
          }
        }
        if (v12)
        {
          v47 = (unint64_t *)&v12->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, iterator);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v87[v10 + v88.i64[0] * (*(_QWORD *)(v6 + 848) - 1)] = 0x3FF0000000000000;
        v49 = *(_QWORD *)(v80 + 96);
        iterator.n128_u64[0] = 1.0;
        if (*(_BYTE *)(v80 + 16))
          v50 = *(_BYTE *)(v80 + 17) == 0;
        else
          v50 = 0;
        if (v50)
        {
          v51 = (_QWORD *)(v80 + 24);
          if (!*(_BYTE *)(v80 + 18))
            v51 = (_QWORD *)(v49 + 8 * v82);
          iterator.n128_u64[0] = *(_QWORD *)(v49 + 8 * v82 + 8 * *v51 - 8);
        }
        v85[v10] = iterator.n128_u64[0];
        if (v84 | v74)
        {
          v52 = (uint64_t *)(v49 + 8 * v82);
          if (v75)
            v52 = &v76;
          v82 += *v52;
        }
        v53 = v78 + 1;
        v54 = ++v78 - v73 * v79;
        v83 = v54;
        if (v54 == v73 && v53 != v77)
          turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v72);
        ++v10;
      }
      while (v10 != 1000);
      Eigen::internal::conservative_resize_like_impl<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,false>::run((uint64_t)&v87, v10, *(_QWORD *)(v6 + 848));
      v85 = Eigen::internal::conditional_aligned_realloc_new_auto<double,true>(v85, v10, v86);
      v86 = v10;
      if (*(_BYTE *)(v6 + 880))
      {
        v56 = v88.i64[0];
        if (v88.i64[0])
        {
          v57 = 0;
          v58 = (double *)v87;
          v59 = v88.i64[1];
          v60 = *(double **)(*(_QWORD *)(v6 + 864) + 16);
          do
          {
            if (v59 >= 1)
            {
              v61 = v58;
              v62 = v60;
              v63 = v59;
              do
              {
                v64 = *v62++;
                *v61 = *v61 / v64;
                v61 += v56;
                --v63;
              }
              while (v63);
            }
            ++v57;
            ++v58;
          }
          while (v57 != v56);
        }
      }
      v65 = *(_QWORD *)(a1 + 16);
      v90 = (uint64_t *)&v87;
      v91.i64[0] = v65;
      v91.i64[1] = (uint64_t)&v85;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double,double>,Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>((uint64_t *)v71, &v90);
      v91 = vextq_s8(v88, v88, 8uLL);
      v92 = 0x4000000000000000;
      v93 = &v87;
      v95 = v71;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::add_assign_op<double,double>>((float64x2_t **)(**(_QWORD **)(a1 + 24) + 16 * v4), (uint64_t)&v90);
      v89[0] = v71;
      v89[1] = v71;
      if (v71[1])
      {
        v91.i64[0] = (uint64_t)v71[0];
        v92 = (uint64_t)v71[0];
        v94 = v89;
        v66 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v90);
      }
      else
      {
        v66 = 0.0;
      }
      *(double *)(**(_QWORD **)(a1 + 32) + 8 * v4) = v66 + *(double *)(**(_QWORD **)(a1 + 32) + 8 * v4);
      v91 = vextq_s8(v88, v88, 8uLL);
      v92 = 0x4000000000000000;
      v93 = &v87;
      v95 = (void **)&v87;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,0>,Eigen::internal::add_assign_op<double,double>>((float64x2_t **)(**(_QWORD **)(a1 + 40) + 24 * v4), (uint64_t)&v90);
      free(v71[0]);
      v10 = 0;
    }
    while (v78 != v77);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v72);
  free(v85);
  free(v87);
}

void sub_218569CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
  uint64_t v12;

  free(*(void **)(v12 - 224));
  free(*(void **)(v12 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,0>,Eigen::internal::add_assign_op<double,double>>(float64x2_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  float64x2_t *v9;
  float64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double *f64;
  double v23;
  std::bad_alloc *exception;
  std::bad_alloc *v25;
  void *v26[3];

  memset(v26, 0, sizeof(v26));
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v4 | v6)
  {
    if (v4)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v25 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v25, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v26, v6 * v4, v4, v6);
    v5 = *(_QWORD *)(a2 + 48);
  }
  Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::DenseShape,Eigen::DenseShape,8>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>((uint64_t *)v26, a2, v5);
  v8 = (char *)v26[0];
  v9 = *a1;
  v10 = a1[1];
  v11 = (_QWORD)a1[2] * (_QWORD)v10;
  if (v11 >= 0)
    v12 = (_QWORD)a1[2] * (_QWORD)v10;
  else
    v12 = v11 + 1;
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    v14 = 0;
    v15 = *a1;
    v16 = (float64x2_t *)v26[0];
    do
    {
      v17 = *v16++;
      *v15 = vaddq_f64(v17, *v15);
      ++v15;
      v14 += 2;
    }
    while (v14 < v13);
  }
  v18 = v11 <= v13;
  v19 = v11 - v13;
  if (!v18)
  {
    v20 = v12 >> 1;
    v21 = (double *)&v8[16 * v20];
    f64 = v9[v20].f64;
    do
    {
      v23 = *v21++;
      *f64 = v23 + *f64;
      ++f64;
      --v19;
    }
    while (v19);
  }
  free(v26[0]);
}

void sub_218569E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::DenseShape,Eigen::DenseShape,8>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 8);
  v7 = a1[1];
  v8 = a1[2];
  if (v6 >= 1 && v7 + v6 + v8 <= 19)
  {
    v16 = *(_OWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 24);
    v18 = *(_QWORD *)(a2 + 32);
    v19 = a3;
    Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,1>,Eigen::internal::assign_op<double,double>>(a1, (uint64_t)&v15);
  }
  else
  {
    v10 = *a1;
    v11 = v8 * v7;
    if (v8 * v7 >= 0)
      v12 = v8 * v7;
    else
      v12 = v11 + 1;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 > 1)
    {
      v14 = 2;
      if (v13 > 2)
        v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
      bzero((void *)*a1, ((8 * v14 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v13 < v11)
      bzero((void *)(v10 + 16 * (v12 >> 1)), 8 * v11 - 16 * (v12 >> 1));
    v15 = 0x3FF0000000000000;
    Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::DenseShape,Eigen::DenseShape,8>::scaleAndAddTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>((uint64_t)a1, a2, a3, (double *)&v15);
  }
}

void Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::DenseShape,Eigen::DenseShape,8>::scaleAndAddTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  uint64_t v5;
  double v9;
  _QWORD v10[5];
  void *v11;
  void *v12;
  __int128 v13;
  uint64_t v14[3];
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 && *(_QWORD *)(v4 + 16))
  {
    if (*(_QWORD *)(a3 + 16))
    {
      v15 = *(_QWORD *)(a2 + 32);
      v9 = *a4 * *(double *)(a2 + 24);
      v11 = 0;
      v12 = 0;
      v13 = *(_OWORD *)(a1 + 8);
      v14[0] = v5;
      Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,1,long>(v14, (uint64_t *)&v13, (uint64_t *)&v13 + 1, 1);
      v14[1] = v14[0] * v13;
      v14[2] = *((_QWORD *)&v13 + 1) * v14[0];
      v10[0] = &v15;
      v10[1] = a3;
      v10[2] = a1;
      *(double *)&v10[3] = v9;
      v10[4] = &v11;
      Eigen::internal::gemm_functor<double,long,Eigen::internal::general_matrix_matrix_product<long,double,1,false,double,0,false,0>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::internal::gemm_blocking_space<0,double,double,-1,-1,-1,1,false>>::operator()((uint64_t)v10, 0, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16), 0, *(_QWORD *)(a3 + 16));
      free(v11);
      free(v12);
    }
  }
}

void sub_21856A09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  free(a15);
  free(a16);
  _Unwind_Resume(a1);
}

void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,1>,Eigen::internal::assign_op<double,double>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  double v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;
  void *v16[2];
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[15];
  _QWORD v25[10];

  v25[9] = *MEMORY[0x24BDAC8D0];
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::internal::assign_op<double,double>>((float64x2_t **)v16, a2);
  v18 = *(uint64_t **)(a2 + 48);
  v19 = v16[0];
  v20 = v17;
  v21 = *v18;
  v22 = v18[1];
  v4 = *(_QWORD *)(a2 + 32);
  v23 = *(_QWORD *)(v4 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = v18[2];
  if (a1[1] != v5 || a1[2] != v6)
  {
    if (v5 && v6 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v6 * v5, v5, v6);
    v5 = a1[1];
    v6 = a1[2];
  }
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = *a1;
    v9 = 8 * v5;
    do
    {
      if (v5 >= 1)
      {
        for (i = 0; i < v5; ++i)
        {
          v11 = v18[1];
          v12 = *v18 + 8 * v11 * v7;
          v24[0] = (char *)v16[0] + 8 * v17 * i;
          v24[2] = v17;
          v24[3] = v16;
          v24[4] = i;
          v24[5] = 0;
          v24[6] = v17;
          v24[7] = v12;
          v24[8] = v11;
          v24[10] = v18;
          v24[11] = 0;
          v24[12] = v7;
          v24[13] = v11;
          if (v11)
          {
            v25[2] = (char *)v16[0] + 8 * v17 * i;
            v25[4] = v17;
            v25[5] = v12;
            v25[7] = v11;
            v25[8] = v24;
            v13 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::Block<Eigen::Matrix<double,-1,-1,1,-1,-1> const,1,-1,true> const> const,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1> const,-1,1,true> const>>,3,0>::run(v25);
            v5 = a1[1];
          }
          else
          {
            v13 = 0.0;
          }
          *(double *)(v8 + 8 * i) = v13;
        }
        v6 = a1[2];
      }
      ++v7;
      v8 += v9;
    }
    while (v7 < v6);
  }
  free(v16[0]);
}

void sub_21856A288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

float64_t Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::internal::assign_op<double,double>>(float64x2_t **a1, uint64_t a2)
{
  double v3;
  float64x2_t **v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t *v7;
  BOOL v9;
  float64x2_t v10;
  float64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  double *f64;
  double *v23;
  double v24;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  double v28;

  v3 = *(double *)(a2 + 24);
  v4 = *(float64x2_t ***)(a2 + 32);
  v6 = (uint64_t)v4[1];
  v5 = (uint64_t)v4[2];
  v7 = *v4;
  if (a1[1] != (float64x2_t *)v5 || a1[2] != (float64x2_t *)v6)
  {
    v28 = *(double *)(a2 + 24);
    if (v5)
      v9 = v6 == 0;
    else
      v9 = 1;
    if (!v9 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v6 * v5, v5, v6);
    v5 = (uint64_t)a1[1];
    v6 = (uint64_t)a1[2];
    v3 = v28;
  }
  v11 = *a1;
  v12 = v6 * v5;
  if (v6 * v5 >= 0)
    v13 = v6 * v5;
  else
    v13 = v12 + 1;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v15 = 0;
    v16 = *a1;
    v17 = v7;
    do
    {
      v18 = *v17++;
      v10 = vmulq_n_f64(v18, v3);
      *v16++ = v10;
      v15 += 2;
    }
    while (v15 < v14);
  }
  v19 = v12 <= v14;
  v20 = v12 - v14;
  if (!v19)
  {
    v21 = v13 >> 1;
    f64 = v7[v13 >> 1].f64;
    v23 = v11[v21].f64;
    do
    {
      v24 = *f64++;
      v10.f64[0] = v3 * v24;
      *v23++ = v3 * v24;
      --v20;
    }
    while (v20);
  }
  return v10.f64[0];
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::Block<Eigen::Matrix<double,-1,-1,1,-1,-1> const,1,-1,true> const> const,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1> const,-1,1,true> const>>,3,0>::run(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  float64x2_t *v5;
  double result;
  int64_t v7;
  float64x2_t v8;
  int64_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  double v22;
  double v23;
  double v24;

  v1 = *(_QWORD *)(a1[8] + 64);
  if (v1 >= 0)
    v2 = *(_QWORD *)(a1[8] + 64);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(a1[8] + 64);
  else
    v3 = v1 + 1;
  v4 = (float64x2_t *)a1[2];
  v5 = (float64x2_t *)a1[5];
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0] * v5->f64[0];
  v7 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v8 = vmulq_f64(*v4, *v5);
  if (v1 >= 4)
  {
    v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = vmulq_f64(v4[1], v5[1]);
    if ((unint64_t)v1 >= 8)
    {
      v11 = v5 + 3;
      v12 = v4 + 3;
      v13 = 4;
      do
      {
        v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        v14 = *v12;
        v12 += 2;
        v15 = v14;
        v16 = *v11;
        v11 += 2;
        v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    v8 = vaddq_f64(v10, v8);
    if (v7 > v9)
      v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v5 + 8 * v9)));
  }
  result = vaddvq_f64(v8);
  v17 = v1 <= v7;
  v18 = v1 - v7;
  if (!v17)
  {
    v19 = v3 >> 1;
    f64 = v4[v19].f64;
    v21 = v5[v19].f64;
    do
    {
      v22 = *f64++;
      v23 = v22;
      v24 = *v21++;
      result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

void Eigen::internal::gemm_functor<double,long,Eigen::internal::general_matrix_matrix_product<long,double,1,false,double,0,false,0>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::internal::gemm_blocking_space<0,double,double,-1,-1,-1,1,false>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = *(_QWORD **)(a1 + 8);
  if (a5 == -1)
    a5 = v6[2];
  v7 = *(_QWORD *)(**(_QWORD **)a1 + 8);
  Eigen::internal::general_matrix_matrix_product<long,double,1,false,double,0,false,0>::run(a3, a5, v7, ***(_QWORD ***)a1 + 8 * v7 * a2, v7, *v6 + 8 * v6[1] * a4, v6[1], **(_QWORD **)(a1 + 16) + 8 * (a2 + *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) * a4), *(double *)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unint64_t **)(a1 + 32));
}

void Eigen::internal::general_matrix_matrix_product<long,double,1,false,double,0,false,0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, unint64_t *a11)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  size_t v25;
  void *v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  size_t v33;
  void *v34;
  void *v35;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::bad_alloc *exception;
  std::bad_alloc *v56;
  std::bad_alloc *v57;
  std::bad_alloc *v58;
  std::bad_alloc *v59;
  std::bad_alloc *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  char v92;
  uint64_t v93;

  v72 = a8;
  v81 = a7;
  v67 = a6;
  v78 = a5;
  v75 = a4;
  v93 = *MEMORY[0x24BDAC8D0];
  v12 = a11[3];
  v11 = a11[4];
  v13 = a11[2];
  if (v13 >= a1)
    v14 = a1;
  else
    v14 = a11[2];
  if (v12 >= a2)
    v15 = a2;
  else
    v15 = a11[3];
  v76 = a11[4];
  v70 = v14;
  v16 = v14 * v11;
  if ((v14 * v11) >> 61)
    goto LABEL_60;
  v20 = a1;
  v21 = *a11;
  v22 = *a11;
  if (*a11)
    goto LABEL_13;
  v23 = 8 * v16;
  if (v16 <= 0x4000)
  {
    v24 = (char *)&v61 - ((MEMORY[0x24BDAC7A8](v23, v23 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v24, v25);
    v21 = 0;
    v22 = (unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_13;
  }
  v26 = malloc_type_malloc(v23, 0x1E76AA36uLL);
  if (!v26)
  {
LABEL_60:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v56 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v56, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v22 = (unint64_t)v26;
  v21 = *a11;
LABEL_13:
  v27 = v15 * v76;
  v86 = v22;
  if (v21)
    v28 = 0;
  else
    v28 = (void *)v22;
  v63 = v28;
  if (v27 >> 61)
  {
    v57 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v58 = std::bad_alloc::bad_alloc(v57);
    __cxa_throw(v58, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v29 = a11[1];
  v30 = v29;
  if (!v29)
  {
    v31 = 8 * v27;
    if (v27 > 0x4000)
    {
      v34 = malloc_type_malloc(v31, 0x1E76AA36uLL);
      if (!v34)
      {
        v59 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v60 = std::bad_alloc::bad_alloc(v59);
        __cxa_throw(v60, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v30 = (unint64_t)v34;
      v29 = a11[1];
    }
    else
    {
      v32 = (char *)&v61 - ((MEMORY[0x24BDAC7A8](v31, v31 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
      bzero(v32, v33);
      v29 = 0;
      v30 = (unint64_t)(v32 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  v64 = v27;
  v65 = v16;
  if (v29)
    v35 = 0;
  else
    v35 = (void *)v30;
  v62 = v35;
  v38 = v76 == a3 && v13 < v20 && v12 >= a2;
  v66 = v38;
  if (v20 >= 1)
  {
    v39 = v30;
    v40 = 0;
    v73 = 8 * v76;
    v83 = 8 * v81 * v15;
    v68 = 8 * v70;
    v84 = a10;
    v82 = 8 * a10 * v15;
    v74 = a3;
    v69 = v20;
    do
    {
      v41 = v40 + v70;
      v71 = v40 + v70;
      if (v40 + v70 >= v20)
        v41 = v20;
      if (a3 >= 1)
      {
        v42 = 0;
        v87 = v41 - v40;
        v77 = v40 * v78;
        v43 = v40 == 0;
        v44 = v66;
        if (v43)
          v44 = 0;
        v85 = v44;
        v80 = v67;
        do
        {
          v45 = v42 + v76;
          if ((uint64_t)(v42 + v76) >= a3)
            v46 = a3;
          else
            v46 = v42 + v76;
          v47 = v46 - v42;
          v88 = v75 + 8 * (v42 + v77);
          v89 = v78;
          Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,1>,6,2,1,false,false>::operator()((uint64_t)&v92, v86, &v88, v46 - v42, v87);
          v79 = v45;
          if (a2 >= 1)
          {
            v48 = 0;
            v49 = 0;
            v50 = v72;
            v51 = v80;
            v52 = v15;
            do
            {
              if (a2 >= v52)
                v53 = v52;
              else
                v53 = a2;
              v54 = v53 + v48;
              if (!v85)
              {
                v88 = v51;
                v89 = v81;
                Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,4,0,false,false>::operator()((uint64_t)&v91, v39, &v88, v47, v54);
              }
              v88 = v50;
              v89 = v84;
              Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(a9, (uint64_t)&v90, &v88, v86, v39, v87, v47, v54, -1, -1, 0, 0);
              v49 += v15;
              v52 += v15;
              v48 -= v15;
              v51 += v83;
              v50 += v82;
            }
            while (v49 < a2);
          }
          a3 = v74;
          v42 = v79;
          v80 += v73;
        }
        while (v79 < v74);
      }
      v72 += v68;
      v40 = v71;
      v20 = v69;
    }
    while (v71 < v69);
  }
  if (v64 > 0x4000)
    free(v62);
  if (v65 > 0x4000)
    free(v63);
}

void sub_21856A9EC(_Unwind_Exception *exception_object)
{
  unint64_t v1;
  uint64_t v2;

  if (v1 > 0x4000)
    free(*(void **)(v2 - 336));
  _Unwind_Resume(exception_object);
}

uint64_t Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,1>,6,2,1,false,false>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int64_t a5)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v12;
  uint64_t result;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  int64x2_t *v19;
  unint64_t v20;
  int64x2_t *v21;
  uint64_t v22;
  unint64_t v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v47;
  int64_t v48;

  v5 = 0;
  v6 = 0;
  if (a4 >= 0)
    v7 = a4;
  else
    v7 = a4 + 1;
  v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 6;
  do
  {
    v10 = (a5 - v6) / v9;
    if (v6 < v6 + v10 * v9)
    {
      v12 = v9 < 2 || a4 < 2;
      v47 = v12;
      result = 8 * v9;
      v14 = v6 + 1;
      v15 = v6 + 2;
      v16 = v6 + 3;
      v17 = v5;
      v48 = v6 + v10 * v9;
      while (1)
      {
        if (v47)
        {
          v18 = 0;
        }
        else
        {
          v18 = 0;
          v19 = (int64x2_t *)(a2 + 8 * v17);
          do
          {
            v20 = 0;
            v21 = v19;
            do
            {
              v22 = a3[1];
              v23 = v18 + v22 * (v6 + v20);
              v24 = *(int64x2_t *)(*a3 + 8 * v23);
              v25 = *(int64x2_t *)(*a3 + 8 * (v23 + v22));
              *v21 = vzip1q_s64(v24, v25);
              v21[v9 / 2] = vzip2q_s64(v24, v25);
              v20 += 2;
              ++v21;
            }
            while (v20 < v9);
            v17 += 2 * v9;
            v18 += 2;
            v19 += v9;
          }
          while (v18 < v8);
        }
        if (v18 < a4)
          break;
        v5 = v17;
LABEL_35:
        v6 += v9;
        v14 += v9;
        v15 += v9;
        v16 += v9;
        v17 = v5;
        if (v6 >= v48)
          goto LABEL_36;
      }
      v26 = *a3;
      v27 = a3[1];
      v28 = v18 + v27 * v14;
      v29 = v18 + v27 * v15;
      v30 = v18 + v27 * v16;
      v31 = v18 + v27 * v6;
      v32 = *a3;
      while (1)
      {
        if (v9 < 4)
        {
          v33 = 0;
          if ((v9 & 3) == 0)
            goto LABEL_31;
        }
        else
        {
          v33 = 0;
          v34 = (_QWORD *)(a2 + 16 + 8 * v17);
          v35 = v32;
          do
          {
            v36 = *(_QWORD *)(v35 + 8 * v28);
            v37 = *(_QWORD *)(v35 + 8 * v29);
            v38 = *(_QWORD *)(v35 + 8 * v30);
            *(v34 - 2) = *(_QWORD *)(v35 + 8 * v31);
            *(v34 - 1) = v36;
            *v34 = v37;
            v34[1] = v38;
            v34 += 4;
            v33 += 4;
            v35 += 32 * v27;
          }
          while ((uint64_t)v33 < (int)(v9 - 3));
          v17 += v33;
          if ((v9 & 3) == 0)
            goto LABEL_31;
        }
        v39 = v9 - v33;
        if (v9 > v33)
        {
          v40 = (_QWORD *)(v26 + 8 * (v18 + v27 * (v6 + v33)));
          do
          {
            v5 = v17 + 1;
            *(_QWORD *)(a2 + 8 * v17) = *v40;
            v40 += v27;
            ++v17;
            --v39;
          }
          while (v39);
          goto LABEL_32;
        }
LABEL_31:
        v5 = v17;
LABEL_32:
        ++v18;
        v32 += 8;
        v17 = v5;
        if (v18 == a4)
          goto LABEL_35;
      }
    }
LABEL_36:
    v9 -= 2;
    if ((int)v9 < 2)
      v9 = 2 * (v9 != 0);
  }
  while ((int)v9 > 0);
  if (v6 < a5)
  {
    v41 = 8 * a3[1];
    v42 = (uint64_t *)(*a3 + v41 * v6);
    do
    {
      v43 = v42;
      v44 = a4;
      if (a4 >= 1)
      {
        do
        {
          v45 = *v43++;
          *(_QWORD *)(a2 + 8 * v5++) = v45;
          --v44;
        }
        while (v44);
      }
      ++v6;
      v42 = (uint64_t *)((char *)v42 + v41);
    }
    while (v6 != a5);
  }
  return result;
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D9491A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D9491A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 iterator;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  double v43;
  BOOL v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  int *v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v73;
  uint64_t v74;
  _QWORD **v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  char v78[8];
  uint64_t v79;
  double v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[128];
  uint64_t v87;
  unsigned __int8 v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  char v99[8];
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 848);
  v99[0] = 0;
  v100 = 0u;
  v101 = 0u;
  v102 = v7;
  iterator = turi::ml_data::get_iterator((turi::ml_data *)(v6 + 8), v4, v5, (uint64_t)v86);
  if (v92 != v91)
  {
    v74 = v4;
    v75 = (_QWORD **)a1;
    v73 = v6;
    do
    {
      v9 = v95;
      v77 = v94;
      if (v95)
      {
        p_shared_owners = (unint64_t *)&v95->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v76 = v9;
      *(_QWORD *)&v101 = 0;
      if (v98)
      {
        v12 = *(_QWORD *)(v77 + 56);
        if (v12)
        {
          v13 = 0;
          v14 = 0;
          v15 = (uint64_t *)(*(_QWORD *)(v77 + 96) + 8 * v96 + 8 * (*(_BYTE *)(v77 + 18) == 0));
          do
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v77 + 72) + 16 * v13);
            v17 = *(_QWORD *)(v16 + 64);
            switch(*(_DWORD *)(v16 + 24))
            {
              case 0:
                v18 = *v15++;
                v19 = v18;
                if (v17)
                {
                  v103 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v100, (int)v14, &v103) = v19;
                }
                goto LABEL_41;
              case 1:
                v31 = *v15++;
                v30 = v31;
                if (v31 < v17 && v30 != 0)
                {
                  v103 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v100, (int)v30 + (int)v14 - 1, &v103) = 0x3FF0000000000000;
                }
                goto LABEL_36;
              case 2:
                v20 = *(_QWORD *)(v16 + 72);
                if (v20)
                {
                  v21 = 0;
                  v22 = v14 << 32;
                  do
                  {
                    v23 = *v15++;
                    v24 = v23;
                    if (v21 < v17)
                    {
                      v103 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v100, v22 >> 32, &v103) = v24;
                    }
                    ++v21;
                    v22 += 0x100000000;
                  }
                  while (v20 != v21);
                }
                goto LABEL_23;
              case 3:
                v34 = *v15++;
                for (i = v34; i; --i)
                {
                  v35 = *v15;
                  if (*v15 < v17 && v35 != 0)
                  {
                    v103 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v100, (int)v35 + (int)v14 - 1, &v103) = 0x3FF0000000000000;
                  }
                  ++v15;
                }
LABEL_36:
                v14 = v17 + v14 - 1;
                break;
              case 4:
                v38 = *v15++;
                for (j = v38; j; --j)
                {
                  v39 = *v15;
                  if (*v15 < v17)
                  {
                    v40 = v15[1];
                    v103 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v100, (int)v39 + (int)v14, &v103) = v40;
                  }
                  v15 += 2;
                }
LABEL_41:
                v14 += v17;
                break;
              case 7:
                v25 = *(_QWORD *)(v16 + 72);
                if (v25)
                {
                  v26 = 0;
                  v27 = v14 << 32;
                  do
                  {
                    v28 = *v15++;
                    v29 = v28;
                    if (v26 < v17)
                    {
                      v103 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v100, v27 >> 32, &v103) = v29;
                    }
                    ++v26;
                    v27 += 0x100000000;
                  }
                  while (v25 != v26);
                }
LABEL_23:
                v14 += v17;
                break;
              default:
                break;
            }
            ++v13;
          }
          while (v13 != v12);
        }
      }
      if (v76)
      {
        v41 = (unint64_t *)&v76->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v76->__on_zero_shared)(v76, iterator);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v43 = 1.0;
      if (*(_BYTE *)(v94 + 16))
        v44 = *(_BYTE *)(v94 + 17) == 0;
      else
        v44 = 0;
      if (v44)
      {
        v45 = (_QWORD *)(v94 + 24);
        if (!*(_BYTE *)(v94 + 18))
          v45 = (_QWORD *)(*(_QWORD *)(v94 + 96) + 8 * v96);
        v43 = *(double *)(*(_QWORD *)(v94 + 96) + 8 * v96 + 8 * *v45 - 8);
      }
      v46 = *(_DWORD *)(v73 + 848) - 1;
      v103 = 0;
      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v100, v46, &v103) = 0x3FF0000000000000;
      if (*(_BYTE *)(v73 + 880))
        (*(void (**)(_QWORD, char *))(**(_QWORD **)(v73 + 864) + 40))(*(_QWORD *)(v73 + 864), v99);
      v47 = v101;
      if ((uint64_t)v101 < 1)
      {
        v50 = 0.0;
      }
      else
      {
        v49 = (int *)*((_QWORD *)&v100 + 1);
        v48 = (double *)v100;
        v50 = 0.0;
        do
        {
          v51 = *v48++;
          v52 = v51;
          v53 = *v49++;
          v50 = v50 + v52 * *(double *)(*v75[2] + 8 * v53);
          --v47;
        }
        while (v47);
      }
      v54 = v50 - v43;
      v78[0] = 0;
      v79 = v102;
      v80 = v54 + v54;
      v81 = v99;
      LOBYTE(v82) = 0;
      v83 = 0u;
      v84 = 0u;
      v85 = 0;
      LOBYTE(v103) = 0;
      v104 = 0u;
      v105 = 0u;
      v106 = v102;
      Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const>,1>::run((double *)&v103, (uint64_t)v78);
      v55 = v85;
      v85 = v106;
      v106 = v55;
      v56 = v83;
      v83 = v104;
      v104 = v56;
      v57 = v84;
      v84 = v105;
      v105 = v57;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v104);
      turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(*v75[3] + 16 * v74), &v82);
      *(double *)(*v75[4] + 8 * v74) = *(double *)(*v75[4] + 8 * v74) + v54 * v54;
      v58 = v101;
      if ((uint64_t)v101 >= 1)
      {
        v59 = 0;
        v60 = v100;
        v61 = (uint64_t *)(*v75[5] + 24 * v74);
        v62 = *v61;
        v63 = v61[1];
        do
        {
          v64 = 0;
          v65 = *(int *)(*((_QWORD *)&v60 + 1) + 4 * v59);
          do
          {
            v66 = v65 + v63 * *(int *)(*((_QWORD *)&v60 + 1) + 4 * v64);
            *(double *)(v62 + 8 * v66) = *(double *)(v62 + 8 * v66)
                                       + (*(double *)(v60 + 8 * v59) + *(double *)(v60 + 8 * v59))
                                       * *(double *)(v60 + 8 * v64++);
          }
          while (v58 != v64);
          ++v59;
        }
        while (v59 != v58);
      }
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v83);
      if (v98 | v88)
      {
        v67 = (uint64_t *)(*(_QWORD *)(v94 + 96) + 8 * v96);
        if (v89)
          v67 = &v90;
        v96 += *v67;
      }
      v68 = v92 + 1;
      v69 = v91;
      v70 = ++v92 - v87 * v93;
      v97 = v70;
      if (v70 == v87 && v68 != v91)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v86);
        v69 = v91;
        v68 = v92;
      }
    }
    while (v68 != v69);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v86);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v100);
}

void sub_21856B2F8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void __cxx_global_var_init_11_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_linear_regression_opt_interface_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_21856B734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void turi::supervised::linear_svm::~linear_svm(void **this)
{
  *this = &off_24D949220;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 51));
  free(this[49]);
  turi::supervised::supervised_learning_model_base::~supervised_learning_model_base((char **)this);
}

{
  turi::supervised::linear_svm::~linear_svm(this);
  JUMPOUT(0x219A19A08);
}

void turi::supervised::linear_svm::model_specific_init(turi::supervised::linear_svm *this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t number_of_coefficients;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int *v30;
  turi::supervised::linear_svm_scaled_logistic_opt_interface *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void **p_p;
  _QWORD *v41[2];
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  _OWORD *v45;
  _BYTE v46[13];
  char v47;
  void *__p;
  _BYTE v49[13];
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 47) + 24) + 64) != 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49[8], (uint64_t)"Linear SVM currently only supports binary classification. ", 58);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Use the boosted_trees_classifier for multi-class classification.", 64);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v38);
    p_p = &__p;
    turi::supervised::linear_svm::model_specific_init(turi::ml_data const&,turi::ml_data const&)::$_0::operator()();
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  v42 = (uint64_t *)*((_QWORD *)this + 47);
  v43 = v5;
  v44 = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  number_of_coefficients = turi::supervised::get_number_of_coefficients(&v42);
  v9 = v43;
  if (v43)
  {
    v10 = (unint64_t *)&v43->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v44 = number_of_coefficients;
  *(_DWORD *)v46 = 2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  p_p = &__p;
  v12 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<int>(v12 + 14, (int *)v46);
  if (v50 < 0)
    operator delete(__p);
  v15 = *((_QWORD *)this + 47);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v41[0] = 0;
  v41[1] = 0;
  p_p = (void **)v41;
  v18 = *(_QWORD **)(v15 + 24);
  if (v18[8])
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = v18[6];
      if ((*(_DWORD *)(v22 + 24) | 2) == 2)
      {
        v23 = (uint64_t *)(v22 + 80);
      }
      else
      {
        v26 = v22 + 32;
        v25 = *(_QWORD *)(v22 + 32);
        if (v21 >= (*(_QWORD *)(v26 + 8) - v25) >> 3)
        {
          v24 = 0;
          goto LABEL_20;
        }
        v23 = (uint64_t *)(v25 + v20);
      }
      v24 = *v23;
LABEL_20:
      *(_QWORD *)v46 = *(_QWORD *)(v18[4] + 80) + v19;
      std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)&p_p, *(uint64_t *)v46, v13, (uint64_t)&std::piecewise_construct, (void **)v46)[6] = v24;
      ++v21;
      v18 = *(_QWORD **)(v15 + 24);
      v20 += 8;
      v19 += 16;
    }
    while (v21 < v18[8]);
  }
  turi::flexible_type_converter<std::map<turi::flexible_type,unsigned long>>::set(&p_p, (uint64_t)v46);
  *(_QWORD *)&v49[5] = *(_QWORD *)&v46[5];
  *(_QWORD *)v49 = *(_QWORD *)v46;
  v49[12] = v46[12];
  LODWORD(__p) = 0;
  std::string::basic_string[abi:ne180100]<0>(v46, "num_examples_per_class");
  v45 = v46;
  v27 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v46, (uint64_t)&std::piecewise_construct, &v45);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v27 + 14, (unsigned int *)&__p);
  if (v47 < 0)
    operator delete(*(void **)v46);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
  std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::destroy((uint64_t)&p_p, v41[0]);
  if (v14)
  {
    v28 = (unint64_t *)&v14->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  p_p = &__p;
  v30 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v30 + 14, &v44);
  if (v50 < 0)
    operator delete(__p);
  v31 = (turi::supervised::linear_svm_scaled_logistic_opt_interface *)operator new();
  turi::supervised::linear_svm_scaled_logistic_opt_interface::linear_svm_scaled_logistic_opt_interface(v31, a2, a3, this);
  std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::reset[abi:ne180100]<turi::supervised::linear_svm_scaled_logistic_opt_interface,void>((_QWORD *)this + 51, (uint64_t)v31);
  v32 = v44;
  if (*((_QWORD *)this + 50) != v44)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 49, v44, 1);
    v32 = *((_QWORD *)this + 50);
  }
  v33 = (char *)*((_QWORD *)this + 49);
  if (v32 >= 0)
    v34 = v32;
  else
    v34 = v32 + 1;
  v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
  if (v32 >= 2)
  {
    v36 = 2;
    if (v35 > 2)
      v36 = v34 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v33, ((8 * v36 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v35 < v32)
    bzero(&v33[16 * (v34 >> 1)], 8 * v32 - 16 * (v34 >> 1));
}

void sub_21856BC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::reset[abi:ne180100]<turi::supervised::linear_svm_scaled_logistic_opt_interface,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_svm_scaled_logistic_opt_interface,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void turi::supervised::linear_svm::init_options(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  std::string *v63;
  std::string *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  std::string::size_type v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::string::size_type v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  unsigned int v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::string::size_type v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  std::string::size_type v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  void *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  void *v178;
  void *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  std::string::size_type v183;
  std::string::size_type v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  std::string::size_type v189;
  void *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  std::string::size_type v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  std::string::size_type v201;
  unsigned int v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  std::string::size_type v206;
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  void **v213;
  std::string *v214;
  __int128 v215;
  uint64_t v216;
  void **v217;
  unint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  void **v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  void **v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  void **v230;
  char *v231;
  unsigned int *v232;
  unsigned int v233;
  __int128 v234;
  __int128 v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  void **v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  void **v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  void **v248;
  void **v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  void **v254;
  void *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  void **v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  void **v266;
  unsigned int v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  void **v271;
  void *v272;
  void *v273;
  _QWORD *v274;
  std::string *v275;
  uint64_t *v276;
  uint64_t *p_size;
  std::string __p;
  uint64_t v279;
  int v280;
  char v281;
  uint64_t v282;
  int v283;
  char v284;
  std::string v285;
  uint64_t v286;
  char v287;
  std::string v288;
  uint64_t v289;
  int v290;
  char v291;
  uint64_t v292;
  int v293;
  char v294;
  void **v295[5];

  v295[2] = *(void ***)MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v285, "convergence_threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convergence threshold for training");
  v293 = 0;
  v294 = 1;
  v292 = 0x3F847AE147AE147BLL;
  turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), &v285, &__p, (uint64_t)&v292, 0, 1.0e-10, 1.0e20);
  v4 = 0x1030C407B73B9F7;
  switch(v294)
  {
    case 2:
      v5 = (unint64_t *)v292;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = v292;
        if (v292)
        {
          if (*(char *)(v292 + 31) < 0)
            operator delete(*(void **)(v292 + 8));
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v11 = (unint64_t *)v292;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v292;
        if (v292)
        {
          v15 = *(void **)(v292 + 8);
          if (v15)
          {
            *(_QWORD *)(v292 + 16) = v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v292;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v292;
        if (v292)
        {
          v288.__r_.__value_.__r.__words[0] = v292 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v20 = (unint64_t *)v292;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v19 = v292;
        if (v292)
        {
          v288.__r_.__value_.__r.__words[0] = v292 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
LABEL_26:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v23 = (unint64_t *)v292;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = v292;
        if (v292)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v292 + 16));
          v9 = v26;
          v27 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v28 = (unint64_t *)v292;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = v292;
        if (v292)
        {
          v32 = *(void **)(v292 + 48);
          if (v32)
          {
            *(_QWORD *)(v292 + 56) = v32;
            operator delete(v32);
          }
          v33 = *(void **)(v31 + 24);
          if (v33)
          {
            *(_QWORD *)(v31 + 32) = v33;
            operator delete(v33);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v31 + 8);
          v9 = v31;
          v27 = 2071181815;
LABEL_41:
          v10 = v27 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v9, v10);
        }
      }
      break;
    default:
      break;
  }
  v292 = 0;
  v293 = 0;
  v294 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v285, "max_iterations");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Maximum number of iterations to perform during training");
  v291 = 0;
  v290 = 0;
  v289 = 10;
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v285, &__p, (uint64_t)&v289, 1, 0x7FFFFFFFLL, 0);
  switch(v291)
  {
    case 2:
      v34 = (unint64_t *)v289;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v289;
        if (v289)
        {
          if (*(char *)(v289 + 31) < 0)
            operator delete(*(void **)(v289 + 8));
          v38 = v37;
          v39 = 0x1012C404EF22A49;
          goto LABEL_88;
        }
      }
      break;
    case 3:
      v40 = (unint64_t *)v289;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        v43 = v289;
        if (v289)
        {
          v44 = *(void **)(v289 + 8);
          if (v44)
          {
            *(_QWORD *)(v289 + 16) = v44;
            operator delete(v44);
          }
          v38 = v43;
          v39 = 0x1080C409938AC02;
          goto LABEL_88;
        }
      }
      break;
    case 4:
      v45 = (unint64_t *)v289;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        v48 = v289;
        if (v289)
        {
          v288.__r_.__value_.__r.__words[0] = v289 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
          goto LABEL_72;
        }
      }
      break;
    case 5:
      v49 = (unint64_t *)v289;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v48 = v289;
        if (v289)
        {
          v288.__r_.__value_.__r.__words[0] = v289 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
LABEL_72:
          v38 = v48;
          v39 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        }
      }
      break;
    case 8:
      v52 = (unint64_t *)v289;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = v289;
        if (v289)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v289 + 16));
          v38 = v55;
          v56 = -235920773;
          goto LABEL_87;
        }
      }
      break;
    case 9:
      v57 = (unint64_t *)v289;
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        v60 = v289;
        if (v289)
        {
          v61 = *(void **)(v289 + 48);
          if (v61)
          {
            *(_QWORD *)(v289 + 56) = v61;
            operator delete(v61);
          }
          v62 = *(void **)(v60 + 24);
          if (v62)
          {
            *(_QWORD *)(v60 + 32) = v62;
            operator delete(v62);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v60 + 8);
          v38 = v60;
          v56 = 2071181815;
LABEL_87:
          v39 = v56 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v38, v39);
        }
      }
      break;
    default:
      break;
  }
  v289 = 0;
  v290 = 0;
  v291 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "solver");
  std::string::basic_string[abi:ne180100]<0>(&v288, "Solver used for training");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v286, "auto");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v285, "auto");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v285.__r_.__value_.__r.__words[2], "lbfgs");
  v275 = 0;
  v276 = 0;
  p_size = 0;
  v295[0] = (void **)&v275;
  LOBYTE(v295[1]) = 0;
  v275 = (std::string *)operator new(0x20uLL);
  v276 = (uint64_t *)v275;
  p_size = (uint64_t *)&v275[1].__r_.__value_.__l.__size_;
  v63 = (std::string *)&v286;
  v276 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&p_size, (uint64_t *)&v285, &v286, (uint64_t)v275);
  turi::option_manager::create_categorical_option((turi::option_manager *)(a1 + 224), &__p, &v288, (uint64_t)&v286, (uint64_t **)&v275, 0);
  v295[0] = (void **)&v275;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v295);
  do
  {
    v64 = v63;
    v63 = (std::string *)((char *)v63 - 16);
    switch(v64[-1].__r_.__value_.__s.__data_[20])
    {
      case 2:
        v65 = (unint64_t *)v63->__r_.__value_.__r.__words[0];
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          v68 = v63->__r_.__value_.__r.__words[0];
          if (!v63->__r_.__value_.__r.__words[0])
            goto LABEL_136;
          if (*(char *)(v68 + 31) < 0)
            operator delete(*(void **)(v68 + 8));
          v69 = (_QWORD *)v68;
          v70 = 0x1012C404EF22A49;
          goto LABEL_135;
        }
        break;
      case 3:
        v82 = (unint64_t *)v63->__r_.__value_.__r.__words[0];
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          v85 = v63->__r_.__value_.__r.__words[0];
          if (!v63->__r_.__value_.__r.__words[0])
            goto LABEL_136;
          v86 = *(void **)(v85 + 8);
          if (v86)
          {
            *(_QWORD *)(v85 + 16) = v86;
            operator delete(v86);
          }
          v69 = (_QWORD *)v85;
          v70 = 0x1080C409938AC02;
          goto LABEL_135;
        }
        break;
      case 4:
        v71 = (unint64_t *)v63->__r_.__value_.__r.__words[0];
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          v74 = v63->__r_.__value_.__r.__words[0];
          if (!v63->__r_.__value_.__r.__words[0])
            goto LABEL_136;
          v295[0] = (void **)(v74 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v295);
          goto LABEL_128;
        }
        break;
      case 5:
        v87 = (unint64_t *)v63->__r_.__value_.__r.__words[0];
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          v74 = v63->__r_.__value_.__r.__words[0];
          if (!v63->__r_.__value_.__r.__words[0])
            goto LABEL_136;
          v295[0] = (void **)(v74 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v295);
LABEL_128:
          v69 = (_QWORD *)v74;
          v70 = 0x1020C405E66F15BLL;
          goto LABEL_135;
        }
        break;
      case 8:
        v90 = (unint64_t *)v63->__r_.__value_.__r.__words[0];
        do
        {
          v91 = __ldaxr(v90);
          v92 = v91 - 1;
        }
        while (__stlxr(v92, v90));
        if (!v92)
        {
          v93 = v63->__r_.__value_.__r.__words[0];
          if (!v63->__r_.__value_.__r.__words[0])
            goto LABEL_136;
          boost::detail::shared_count::~shared_count((unsigned int **)(v93 + 16));
          v69 = (_QWORD *)v93;
          v81 = -235920773;
          goto LABEL_134;
        }
        break;
      case 9:
        v75 = (unint64_t *)v63->__r_.__value_.__r.__words[0];
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          v78 = (_QWORD *)v63->__r_.__value_.__r.__words[0];
          if (v63->__r_.__value_.__r.__words[0])
          {
            v79 = (void *)v78[6];
            if (v79)
            {
              v78[7] = v79;
              operator delete(v79);
            }
            v80 = (void *)v78[3];
            if (v80)
            {
              v78[4] = v80;
              operator delete(v80);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v78 + 1));
            v69 = v78;
            v81 = 2071181815;
LABEL_134:
            v70 = v81 | 0x1030C4000000000;
LABEL_135:
            MEMORY[0x219A19A08](v69, v70);
          }
LABEL_136:
          v63->__r_.__value_.__r.__words[0] = 0;
        }
        break;
      default:
        break;
    }
    v64[-1].__r_.__value_.__l.__size_ = 0;
    LODWORD(v64[-1].__r_.__value_.__r.__words[2]) = 0;
    v64[-1].__r_.__value_.__s.__data_[20] = 0;
  }
  while (v63 != &v285);
  switch(v287)
  {
    case 2:
      v94 = (unint64_t *)v286;
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        v97 = v286;
        if (v286)
        {
          if (*(char *)(v286 + 31) < 0)
            operator delete(*(void **)(v286 + 8));
          v98 = v97;
          v99 = 0x1012C404EF22A49;
          goto LABEL_179;
        }
      }
      break;
    case 3:
      v100 = (unint64_t *)v286;
      do
      {
        v101 = __ldaxr(v100);
        v102 = v101 - 1;
      }
      while (__stlxr(v102, v100));
      if (!v102)
      {
        v103 = v286;
        if (v286)
        {
          v104 = *(void **)(v286 + 8);
          if (v104)
          {
            *(_QWORD *)(v286 + 16) = v104;
            operator delete(v104);
          }
          v98 = v103;
          v99 = 0x1080C409938AC02;
          goto LABEL_179;
        }
      }
      break;
    case 4:
      v105 = (unint64_t *)v286;
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        v108 = v286;
        if (v286)
        {
          v285.__r_.__value_.__r.__words[0] = v286 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v285);
          goto LABEL_163;
        }
      }
      break;
    case 5:
      v109 = (unint64_t *)v286;
      do
      {
        v110 = __ldaxr(v109);
        v111 = v110 - 1;
      }
      while (__stlxr(v111, v109));
      if (!v111)
      {
        v108 = v286;
        if (v286)
        {
          v285.__r_.__value_.__r.__words[0] = v286 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v285);
LABEL_163:
          v98 = v108;
          v99 = 0x1020C405E66F15BLL;
          goto LABEL_179;
        }
      }
      break;
    case 8:
      v112 = (unint64_t *)v286;
      do
      {
        v113 = __ldaxr(v112);
        v114 = v113 - 1;
      }
      while (__stlxr(v114, v112));
      if (!v114)
      {
        v115 = v286;
        if (v286)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v286 + 16));
          MEMORY[0x219A19A08](v115, 0x1030C40F1F0227BLL);
        }
        v286 = 0;
      }
      break;
    case 9:
      v116 = (unint64_t *)v286;
      do
      {
        v117 = __ldaxr(v116);
        v118 = v117 - 1;
      }
      while (__stlxr(v118, v116));
      if (!v118)
      {
        v119 = v286;
        if (v286)
        {
          v120 = *(void **)(v286 + 48);
          if (v120)
          {
            *(_QWORD *)(v286 + 56) = v120;
            operator delete(v120);
          }
          v121 = *(void **)(v119 + 24);
          if (v121)
          {
            *(_QWORD *)(v119 + 32) = v121;
            operator delete(v121);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v119 + 8);
          v98 = v119;
          v99 = 0x1030C407B73B9F7;
LABEL_179:
          MEMORY[0x219A19A08](v98, v99);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v288.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v285, "penalty");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Penalty on the mis-classification loss");
  v283 = 0;
  v284 = 1;
  v282 = 0x3FF0000000000000;
  turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), &v285, &__p, (uint64_t)&v282, 0, 1.0e-10, 1.0e20);
  switch(v284)
  {
    case 2:
      v122 = (unint64_t *)v282;
      do
      {
        v123 = __ldaxr(v122);
        v124 = v123 - 1;
      }
      while (__stlxr(v124, v122));
      if (!v124)
      {
        v125 = v282;
        if (v282)
        {
          if (*(char *)(v282 + 31) < 0)
            operator delete(*(void **)(v282 + 8));
          v126 = v125;
          v127 = 0x1012C404EF22A49;
          goto LABEL_225;
        }
      }
      break;
    case 3:
      v128 = (unint64_t *)v282;
      do
      {
        v129 = __ldaxr(v128);
        v130 = v129 - 1;
      }
      while (__stlxr(v130, v128));
      if (!v130)
      {
        v131 = v282;
        if (v282)
        {
          v132 = *(void **)(v282 + 8);
          if (v132)
          {
            *(_QWORD *)(v282 + 16) = v132;
            operator delete(v132);
          }
          v126 = v131;
          v127 = 0x1080C409938AC02;
          goto LABEL_225;
        }
      }
      break;
    case 4:
      v133 = (unint64_t *)v282;
      do
      {
        v134 = __ldaxr(v133);
        v135 = v134 - 1;
      }
      while (__stlxr(v135, v133));
      if (!v135)
      {
        v136 = v282;
        if (v282)
        {
          v288.__r_.__value_.__r.__words[0] = v282 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
          goto LABEL_209;
        }
      }
      break;
    case 5:
      v137 = (unint64_t *)v282;
      do
      {
        v138 = __ldaxr(v137);
        v139 = v138 - 1;
      }
      while (__stlxr(v139, v137));
      if (!v139)
      {
        v136 = v282;
        if (v282)
        {
          v288.__r_.__value_.__r.__words[0] = v282 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
LABEL_209:
          v126 = v136;
          v127 = 0x1020C405E66F15BLL;
          goto LABEL_225;
        }
      }
      break;
    case 8:
      v140 = (unint64_t *)v282;
      do
      {
        v141 = __ldaxr(v140);
        v142 = v141 - 1;
      }
      while (__stlxr(v142, v140));
      if (!v142)
      {
        v143 = v282;
        if (v282)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v282 + 16));
          v126 = v143;
          v144 = -235920773;
          goto LABEL_224;
        }
      }
      break;
    case 9:
      v145 = (unint64_t *)v282;
      do
      {
        v146 = __ldaxr(v145);
        v147 = v146 - 1;
      }
      while (__stlxr(v147, v145));
      if (!v147)
      {
        v148 = v282;
        if (v282)
        {
          v149 = *(void **)(v282 + 48);
          if (v149)
          {
            *(_QWORD *)(v282 + 56) = v149;
            operator delete(v149);
          }
          v150 = *(void **)(v148 + 24);
          if (v150)
          {
            *(_QWORD *)(v148 + 32) = v150;
            operator delete(v150);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v148 + 8);
          v126 = v148;
          v144 = 2071181815;
LABEL_224:
          v127 = v144 | 0x1030C4000000000;
LABEL_225:
          MEMORY[0x219A19A08](v126, v127);
        }
      }
      break;
    default:
      break;
  }
  v282 = 0;
  v283 = 0;
  v284 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v285, "lbfgs_memory_level");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Number of previous iterations to cache for LBFGS");
  v281 = 0;
  v280 = 0;
  v279 = 11;
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v285, &__p, (uint64_t)&v279, 1, 0x7FFFFFFFLL, 0);
  switch(v281)
  {
    case 2:
      v151 = (unint64_t *)v279;
      do
      {
        v152 = __ldaxr(v151);
        v153 = v152 - 1;
      }
      while (__stlxr(v153, v151));
      if (!v153)
      {
        v154 = v279;
        if (v279)
        {
          if (*(char *)(v279 + 31) < 0)
            operator delete(*(void **)(v279 + 8));
          v155 = v154;
          v156 = 0x1012C404EF22A49;
          goto LABEL_271;
        }
      }
      break;
    case 3:
      v157 = (unint64_t *)v279;
      do
      {
        v158 = __ldaxr(v157);
        v159 = v158 - 1;
      }
      while (__stlxr(v159, v157));
      if (!v159)
      {
        v160 = v279;
        if (v279)
        {
          v161 = *(void **)(v279 + 8);
          if (v161)
          {
            *(_QWORD *)(v279 + 16) = v161;
            operator delete(v161);
          }
          v155 = v160;
          v156 = 0x1080C409938AC02;
          goto LABEL_271;
        }
      }
      break;
    case 4:
      v162 = (unint64_t *)v279;
      do
      {
        v163 = __ldaxr(v162);
        v164 = v163 - 1;
      }
      while (__stlxr(v164, v162));
      if (!v164)
      {
        v165 = v279;
        if (v279)
        {
          v288.__r_.__value_.__r.__words[0] = v279 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
          goto LABEL_255;
        }
      }
      break;
    case 5:
      v166 = (unint64_t *)v279;
      do
      {
        v167 = __ldaxr(v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, v166));
      if (!v168)
      {
        v165 = v279;
        if (v279)
        {
          v288.__r_.__value_.__r.__words[0] = v279 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
LABEL_255:
          v155 = v165;
          v156 = 0x1020C405E66F15BLL;
          goto LABEL_271;
        }
      }
      break;
    case 8:
      v169 = (unint64_t *)v279;
      do
      {
        v170 = __ldaxr(v169);
        v171 = v170 - 1;
      }
      while (__stlxr(v171, v169));
      if (!v171)
      {
        v172 = v279;
        if (v279)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v279 + 16));
          v155 = v172;
          v173 = -235920773;
          goto LABEL_270;
        }
      }
      break;
    case 9:
      v174 = (unint64_t *)v279;
      do
      {
        v175 = __ldaxr(v174);
        v176 = v175 - 1;
      }
      while (__stlxr(v176, v174));
      if (!v176)
      {
        v177 = v279;
        if (v279)
        {
          v178 = *(void **)(v279 + 48);
          if (v178)
          {
            *(_QWORD *)(v279 + 56) = v178;
            operator delete(v178);
          }
          v179 = *(void **)(v177 + 24);
          if (v179)
          {
            *(_QWORD *)(v177 + 32) = v179;
            operator delete(v179);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v177 + 8);
          v155 = v177;
          v173 = 2071181815;
LABEL_270:
          v156 = v173 | 0x1030C4000000000;
LABEL_271:
          MEMORY[0x219A19A08](v155, v156);
        }
      }
      break;
    default:
      break;
  }
  v279 = 0;
  v280 = 0;
  v281 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v285, "feature_rescaling");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Rescale features to have unit L2-Norm");
  turi::option_manager::create_BOOLean_option((turi::option_manager *)(a1 + 224), &v285, &__p, 1u, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v285, "class_weights");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Weights (during training) assigned to each class.");
  *(std::string::size_type *)((char *)v288.__r_.__value_.__r.__words + 5) = 0x700000000000000;
  v288.__r_.__value_.__r.__words[0] = 0;
  turi::option_manager::create_flexible_type_option((turi::option_manager *)(a1 + 224), &v285, &__p, (uint64_t)&v288, 1);
  switch(v288.__r_.__value_.__s.__data_[12])
  {
    case 2:
      v180 = (unint64_t *)v288.__r_.__value_.__r.__words[0];
      do
      {
        v181 = __ldaxr(v180);
        v182 = v181 - 1;
      }
      while (__stlxr(v182, v180));
      if (!v182)
      {
        v183 = v288.__r_.__value_.__r.__words[0];
        if (v288.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v288.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v288.__r_.__value_.__r.__words[0] + 8));
          v184 = v183;
          v185 = 0x1012C404EF22A49;
          goto LABEL_321;
        }
      }
      break;
    case 3:
      v186 = (unint64_t *)v288.__r_.__value_.__r.__words[0];
      do
      {
        v187 = __ldaxr(v186);
        v188 = v187 - 1;
      }
      while (__stlxr(v188, v186));
      if (!v188)
      {
        v189 = v288.__r_.__value_.__r.__words[0];
        if (v288.__r_.__value_.__r.__words[0])
        {
          v190 = *(void **)(v288.__r_.__value_.__r.__words[0] + 8);
          if (v190)
          {
            *(_QWORD *)(v288.__r_.__value_.__r.__words[0] + 16) = v190;
            operator delete(v190);
          }
          v184 = v189;
          v185 = 0x1080C409938AC02;
          goto LABEL_321;
        }
      }
      break;
    case 4:
      v191 = (unint64_t *)v288.__r_.__value_.__r.__words[0];
      do
      {
        v192 = __ldaxr(v191);
        v193 = v192 - 1;
      }
      while (__stlxr(v193, v191));
      if (!v193)
      {
        v194 = v288.__r_.__value_.__r.__words[0];
        if (v288.__r_.__value_.__r.__words[0])
        {
          v275 = (std::string *)(v288.__r_.__value_.__r.__words[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
          goto LABEL_305;
        }
      }
      break;
    case 5:
      v195 = (unint64_t *)v288.__r_.__value_.__r.__words[0];
      do
      {
        v196 = __ldaxr(v195);
        v197 = v196 - 1;
      }
      while (__stlxr(v197, v195));
      if (!v197)
      {
        v194 = v288.__r_.__value_.__r.__words[0];
        if (v288.__r_.__value_.__r.__words[0])
        {
          v275 = (std::string *)(v288.__r_.__value_.__r.__words[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
LABEL_305:
          v184 = v194;
          v185 = 0x1020C405E66F15BLL;
          goto LABEL_321;
        }
      }
      break;
    case 8:
      v198 = (unint64_t *)v288.__r_.__value_.__r.__words[0];
      do
      {
        v199 = __ldaxr(v198);
        v200 = v199 - 1;
      }
      while (__stlxr(v200, v198));
      if (!v200)
      {
        v201 = v288.__r_.__value_.__r.__words[0];
        if (v288.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v288.__r_.__value_.__r.__words[0] + 16));
          v184 = v201;
          v202 = -235920773;
          goto LABEL_320;
        }
      }
      break;
    case 9:
      v203 = (unint64_t *)v288.__r_.__value_.__r.__words[0];
      do
      {
        v204 = __ldaxr(v203);
        v205 = v204 - 1;
      }
      while (__stlxr(v205, v203));
      if (!v205)
      {
        v206 = v288.__r_.__value_.__r.__words[0];
        if (v288.__r_.__value_.__r.__words[0])
        {
          v207 = *(void **)(v288.__r_.__value_.__r.__words[0] + 48);
          if (v207)
          {
            *(_QWORD *)(v288.__r_.__value_.__r.__words[0] + 56) = v207;
            operator delete(v207);
          }
          v208 = *(void **)(v206 + 24);
          if (v208)
          {
            *(_QWORD *)(v206 + 32) = v208;
            operator delete(v208);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v206 + 8);
          v184 = v206;
          v202 = 2071181815;
LABEL_320:
          v185 = v202 | 0x1030C4000000000;
LABEL_321:
          MEMORY[0x219A19A08](v184, v185);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v285, "disable_posttrain_evaluation");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Disable automatic computation of an evaluation report following training.");
  turi::option_manager::create_BOOLean_option((turi::option_manager *)(a1 + 224), &v285, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v285, "features");
  std::string::basic_string[abi:ne180100]<0>(&__p, "List of features that are considered during training and prediction for this model.");
  memset(&v288, 0, sizeof(v288));
  *(void ***)((char *)v295 + 5) = (void **)0x400000000000000;
  v295[0] = 0;
  v209 = operator new();
  v210 = v209;
  *(_QWORD *)v209 = 0;
  *(_QWORD *)(v209 + 8) = 0;
  v211 = (uint64_t *)(v209 + 8);
  *(_QWORD *)(v209 + 16) = 0;
  *(_QWORD *)(v209 + 24) = 0;
  v295[0] = (void **)v209;
  *(_QWORD *)v209 = 1;
  switch(BYTE4(v295[1]))
  {
    case 2:
      if (*(_QWORD *)v209 != 1)
      {
        v212 = operator new();
        v213 = v295[0];
        *(_QWORD *)v212 = *v295[0];
        v214 = (std::string *)(v212 + 8);
        if (*((char *)v213 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v214, (const std::string::value_type *)v213[1], (std::string::size_type)v213[2]);
        }
        else
        {
          v215 = *(_OWORD *)(v213 + 1);
          *(_QWORD *)(v212 + 24) = v213[3];
          *(_OWORD *)&v214->__r_.__value_.__l.__data_ = v215;
        }
        v295[0] = (void **)v212;
        *(_QWORD *)v212 = 1;
        do
        {
          v242 = __ldaxr((unint64_t *)v210);
          v243 = v242 - 1;
        }
        while (__stlxr(v243, (unint64_t *)v210));
        if (!v243)
        {
          v4 = 0x1012C404EF22A49;
          if ((*(char *)(v210 + 31) & 0x80000000) == 0)
            goto LABEL_371;
          v220 = (void *)*v211;
          goto LABEL_370;
        }
      }
      break;
    case 3:
      if (*(_QWORD *)v209 != 1)
      {
        v216 = operator new();
        v217 = v295[0];
        *(_QWORD *)v216 = *v295[0];
        *(_QWORD *)(v216 + 16) = 0;
        *(_QWORD *)(v216 + 24) = 0;
        *(_QWORD *)(v216 + 8) = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(v216 + 8), v217[1], (uint64_t)v217[2], ((_BYTE *)v217[2] - (_BYTE *)v217[1]) >> 3);
        v295[0] = (void **)v216;
        *(_QWORD *)v216 = 1;
        do
        {
          v218 = __ldaxr((unint64_t *)v210);
          v219 = v218 - 1;
        }
        while (__stlxr(v219, (unint64_t *)v210));
        if (!v219)
        {
          v220 = (void *)*v211;
          v4 = 0x1080C409938AC02;
          if (*v211)
          {
            *(_QWORD *)(v210 + 16) = v220;
LABEL_370:
            operator delete(v220);
          }
          goto LABEL_371;
        }
      }
      break;
    case 4:
      if (*(_QWORD *)v209 != 1)
      {
        v221 = operator new();
        v222 = v295[0];
        *(_QWORD *)v221 = *v295[0];
        *(_QWORD *)(v221 + 16) = 0;
        *(_QWORD *)(v221 + 24) = 0;
        *(_QWORD *)(v221 + 8) = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(v221 + 8), (uint64_t *)v222[1], (uint64_t *)v222[2], ((_BYTE *)v222[2] - (_BYTE *)v222[1]) >> 4);
        v295[0] = (void **)v221;
        *(_QWORD *)v221 = 1;
        do
        {
          v223 = __ldaxr((unint64_t *)v210);
          v224 = v223 - 1;
        }
        while (__stlxr(v224, (unint64_t *)v210));
        if (!v224)
        {
          v275 = (std::string *)v211;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
          goto LABEL_350;
        }
      }
      break;
    case 5:
      if (*(_QWORD *)v209 != 1)
      {
        v225 = operator new();
        v226 = v295[0];
        *(_QWORD *)v225 = *v295[0];
        *(_QWORD *)(v225 + 16) = 0;
        *(_QWORD *)(v225 + 24) = 0;
        *(_QWORD *)(v225 + 8) = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((_QWORD *)(v225 + 8), (uint64_t *)v226[1], (uint64_t *)v226[2], ((_BYTE *)v226[2] - (_BYTE *)v226[1]) >> 5);
        v295[0] = (void **)v225;
        *(_QWORD *)v225 = 1;
        do
        {
          v227 = __ldaxr((unint64_t *)v210);
          v228 = v227 - 1;
        }
        while (__stlxr(v228, (unint64_t *)v210));
        if (!v228)
        {
          v275 = (std::string *)v211;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
LABEL_350:
          v4 = 0x1020C405E66F15BLL;
          goto LABEL_371;
        }
      }
      break;
    case 8:
      if (*(_QWORD *)v209 != 1)
      {
        v229 = operator new();
        v230 = v295[0];
        *(_QWORD *)v229 = *v295[0];
        *(_QWORD *)(v229 + 8) = v230[1];
        v231 = (char *)v230[2];
        *(_QWORD *)(v229 + 16) = v231;
        if (v231)
        {
          v232 = (unsigned int *)(v231 + 8);
          do
            v233 = __ldxr(v232);
          while (__stxr(v233 + 1, v232));
        }
        v234 = *(_OWORD *)(v230 + 3);
        v235 = *(_OWORD *)(v230 + 5);
        *(_OWORD *)(v229 + 56) = *(_OWORD *)(v230 + 7);
        *(_OWORD *)(v229 + 40) = v235;
        *(_OWORD *)(v229 + 24) = v234;
        v295[0] = (void **)v229;
        *(_QWORD *)v229 = 1;
        do
        {
          v236 = __ldaxr((unint64_t *)v210);
          v237 = v236 - 1;
        }
        while (__stlxr(v237, (unint64_t *)v210));
        if (!v237)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v210 + 16));
          v4 = 0x1030C40F1F0227BLL;
          goto LABEL_371;
        }
      }
      break;
    case 9:
      if (*(_QWORD *)v209 != 1)
      {
        v238 = operator new();
        v239 = v295[0] + 1;
        *(_QWORD *)v238 = *v295[0];
        turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v238 + 8), (uint64_t)v239);
        v295[0] = (void **)v238;
        *(_QWORD *)v238 = 1;
        do
        {
          v240 = __ldaxr((unint64_t *)v210);
          v241 = v240 - 1;
        }
        while (__stlxr(v241, (unint64_t *)v210));
        if (!v241)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v210);
LABEL_371:
          MEMORY[0x219A19A08](v210, v4);
        }
      }
      break;
    default:
      break;
  }
  v244 = v295[0];
  std::vector<turi::flexible_type>::__vdeallocate(v295[0] + 1);
  *(std::string *)(v244 + 1) = v288;
  memset(&v288, 0, sizeof(v288));
  turi::option_manager::create_flexible_type_option((turi::option_manager *)(a1 + 224), &v285, &__p, (uint64_t)v295, 0);
  switch(BYTE4(v295[1]))
  {
    case 2:
      v245 = (unint64_t *)v295[0];
      do
      {
        v246 = __ldaxr(v245);
        v247 = v246 - 1;
      }
      while (__stlxr(v247, v245));
      if (!v247)
      {
        v248 = v295[0];
        if (v295[0])
        {
          if (*((char *)v295[0] + 31) < 0)
            operator delete(v295[0][1]);
          v249 = v248;
          v250 = 0x1012C404EF22A49;
          goto LABEL_413;
        }
      }
      break;
    case 3:
      v251 = (unint64_t *)v295[0];
      do
      {
        v252 = __ldaxr(v251);
        v253 = v252 - 1;
      }
      while (__stlxr(v253, v251));
      if (!v253)
      {
        v254 = v295[0];
        if (v295[0])
        {
          v255 = v295[0][1];
          if (v255)
          {
            v295[0][2] = v255;
            operator delete(v255);
          }
          v249 = v254;
          v250 = 0x1080C409938AC02;
          goto LABEL_413;
        }
      }
      break;
    case 4:
      v256 = (unint64_t *)v295[0];
      do
      {
        v257 = __ldaxr(v256);
        v258 = v257 - 1;
      }
      while (__stlxr(v258, v256));
      if (!v258)
      {
        v259 = v295[0];
        if (v295[0])
        {
          v275 = (std::string *)(v295[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
          goto LABEL_397;
        }
      }
      break;
    case 5:
      v260 = (unint64_t *)v295[0];
      do
      {
        v261 = __ldaxr(v260);
        v262 = v261 - 1;
      }
      while (__stlxr(v262, v260));
      if (!v262)
      {
        v259 = v295[0];
        if (v295[0])
        {
          v275 = (std::string *)(v295[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
LABEL_397:
          v249 = v259;
          v250 = 0x1020C405E66F15BLL;
          goto LABEL_413;
        }
      }
      break;
    case 8:
      v263 = (unint64_t *)v295[0];
      do
      {
        v264 = __ldaxr(v263);
        v265 = v264 - 1;
      }
      while (__stlxr(v265, v263));
      if (!v265)
      {
        v266 = v295[0];
        if (v295[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v295[0] + 2);
          v249 = v266;
          v267 = -235920773;
          goto LABEL_412;
        }
      }
      break;
    case 9:
      v268 = (unint64_t *)v295[0];
      do
      {
        v269 = __ldaxr(v268);
        v270 = v269 - 1;
      }
      while (__stlxr(v270, v268));
      if (!v270)
      {
        v271 = v295[0];
        if (v295[0])
        {
          v272 = v295[0][6];
          if (v272)
          {
            v295[0][7] = v272;
            operator delete(v272);
          }
          v273 = v271[3];
          if (v273)
          {
            v271[4] = v273;
            operator delete(v273);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v271 + 1));
          v249 = v271;
          v267 = 2071181815;
LABEL_412:
          v250 = v267 | 0x1030C4000000000;
LABEL_413:
          MEMORY[0x219A19A08](v249, v250);
        }
      }
      break;
    default:
      break;
  }
  memset(v295, 0, 13);
  v275 = &v288;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  turi::option_manager::set_options(a1 + 224, a2);
  v274 = (_QWORD *)turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
  turi::flexmap_to_varmap(v274, (uint64_t)&v285);
  turi::ml_model_base::add_or_update_state(a1, &v285);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v285, (char *)v285.__r_.__value_.__l.__size_);
}

void sub_21856D580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, int a19, char a20,uint64_t a21,int a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,char a33,void *a34,int a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,int a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;

  MEMORY[0x219A19A08](v43, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v44 - 124))
  {
    case 2:
      v46 = *(unint64_t **)(v44 - 136);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)(v44 - 136);
        if (v49)
        {
          if (*(char *)(v49 + 31) < 0)
            operator delete(*(void **)(v49 + 8));
          MEMORY[0x219A19A08](v49, 0x1012C404EF22A49);
        }
      }
      goto LABEL_40;
    case 3:
      v50 = *(unint64_t **)(v44 - 136);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_40;
      v53 = *(_QWORD **)(v44 - 136);
      if (!v53)
        goto LABEL_39;
      v54 = (void *)v53[1];
      if (v54)
      {
        v53[2] = v54;
        operator delete(v54);
      }
      v55 = v53;
      v56 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v57 = *(unint64_t **)(v44 - 136);
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (v59)
        goto LABEL_40;
      v60 = *(_QWORD *)(v44 - 136);
      if (!v60)
        goto LABEL_39;
      a9 = (void **)(v60 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
      goto LABEL_26;
    case 5:
      v61 = *(unint64_t **)(v44 - 136);
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (v63)
        goto LABEL_40;
      v60 = *(_QWORD *)(v44 - 136);
      if (!v60)
        goto LABEL_39;
      a9 = (void **)(v60 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
LABEL_26:
      v55 = (_QWORD *)v60;
      v56 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v64 = *(unint64_t **)(v44 - 136);
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (v66)
        goto LABEL_40;
      v67 = *(_QWORD *)(v44 - 136);
      if (!v67)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v67 + 16));
      v55 = (_QWORD *)v67;
      v68 = -235920773;
      goto LABEL_37;
    case 9:
      v69 = *(unint64_t **)(v44 - 136);
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (v71)
        goto LABEL_40;
      v72 = *(_QWORD **)(v44 - 136);
      if (!v72)
        goto LABEL_39;
      v55 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v72);
      v68 = 2071181815;
LABEL_37:
      v56 = v68 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v55, v56);
LABEL_39:
      *(_QWORD *)(v44 - 136) = 0;
LABEL_40:
      *(_QWORD *)(v44 - 136) = 0;
      *(_DWORD *)(v44 - 128) = 0;
      *(_BYTE *)(v44 - 124) = 0;
      a9 = &a34;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
      if (a17 < 0)
        operator delete(__p);
      if (a29 < 0)
        operator delete(a24);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void turi::supervised::linear_svm::train(turi::supervised::linear_svm_scaled_logistic_opt_interface **this)
{
  _BYTE *option_value;
  uint64_t size;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  unsigned int *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  uint64_t **v19;
  unsigned int *v20;
  int *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  _QWORD *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  _QWORD *v35;
  std::string::size_type v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  std::string::size_type v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  _QWORD *v49;
  std::string::size_type v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  std::runtime_error *exception;
  std::string *v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::string::size_type v70;
  std::string::size_type v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::string::size_type v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::string::size_type v80;
  void *v81;
  void *v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  std::string::size_type v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::string::size_type v95;
  int *v96;
  unint64_t v97;
  int *v98;
  file_logger *v99;
  file_logger *started;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  const std::locale::facet *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  int64_t v109;
  unint64_t v110;
  int *v111;
  double v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  char **v118;
  char *v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::string::size_type v125;
  unsigned int *v126;
  unsigned int v127;
  __int128 v128;
  __int128 v129;
  float v130;
  turi::flexible_type_impl *v131;
  uint64_t v132;
  __int128 v133;
  std::string::size_type v134;
  std::string *v135;
  float64x2_t *v136;
  float64x2_t *v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  char *v142;
  int64_t v143;
  float64x2_t v144;
  float64x2_t *v149;
  float64x2_t *v150;
  float64x2_t v151;
  unint64_t v152;
  double *v153;
  double *v154;
  double v155;
  _QWORD *v156;
  uint64_t v157;
  std::string *v158;
  int data;
  int v160;
  std::__shared_weak_count *v162;
  unint64_t *p_shared_owners;
  unint64_t v164;
  std::string::size_type v165;
  std::string::size_type v166;
  __int128 v167;
  void *v168;
  __int128 v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  unsigned int *v174;
  void *v175;
  unsigned int *v176;
  _QWORD *v177;
  __int128 *v178;
  uint64_t v179;
  _OWORD *v180;
  uint64_t v181;
  int64_t v182;
  int64_t v183;
  _OWORD *v184;
  __int128 *v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  _QWORD *v190;
  uint64_t v191;
  turi::supervised::linear_svm_scaled_logistic_opt_interface *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unsigned int *v209;
  unsigned int *v210;
  unsigned int *v211;
  unsigned int *v212;
  unsigned int *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unsigned int *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  void *v246;
  void *v247;
  unsigned int v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  void *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  std::string *v262;
  std::string::size_type v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  std::bad_alloc *v267;
  std::bad_alloc *v268;
  std::bad_alloc *v269;
  std::bad_alloc *v270;
  _QWORD *v271;
  std::runtime_error *v272;
  std::string *v273;
  __int128 v274;
  int v275;
  turi::unity_sframe *v276;
  std::__shared_weak_count *v277;
  void *v278;
  std::__shared_weak_count *v279;
  char v280;
  turi::unity_sframe *v281;
  std::__shared_weak_count *v282;
  turi::supervised::linear_svm_scaled_logistic_opt_interface *v283;
  std::__shared_weak_count *v284;
  turi::supervised::linear_svm_scaled_logistic_opt_interface *v285;
  std::__shared_weak_count *v286;
  uint64_t v287[3];
  uint64_t v288;
  std::__shared_weak_count *v289;
  void *v290;
  uint64_t v291;
  std::string v292;
  void *v293;
  unint64_t v294;
  void *v295[2];
  char v296;
  size_t __idx;
  uint64_t *v298;
  void **v299;
  void *v300[2];
  char v301;
  std::string v302;
  __int128 v303;
  std::string::size_type v304;
  void *v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  _BYTE v309[296];
  std::string __p[3];
  __int128 v311;
  __int128 v312;
  _BYTE v313[24];
  uint64_t v314;
  uint64_t v315;
  char v316;
  uint64_t v317;

  v317 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v300, "feature_rescaling");
  option_value = (_BYTE *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)v300);
  size = 0;
  switch(option_value[12])
  {
    case 0:
      size = *(_QWORD *)option_value;
      goto LABEL_29;
    case 1:
      size = (uint64_t)*(double *)option_value;
      goto LABEL_29;
    case 2:
      v7 = *(_QWORD *)option_value;
      v8 = (char **)(*(_QWORD *)option_value + 8);
      __idx = 0;
      v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0)
        v9 = *v8;
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      size = std::stoll(__p, &__idx, 10);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (*(char *)(v7 + 31) < 0)
        v10 = *(_QWORD *)(v7 + 16);
      else
        v10 = *(unsigned __int8 *)(v7 + 31);
      if (__idx != v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v63 = std::string::append(&v302, " cannot be interpreted as an integer");
        v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        __p[0].__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, __p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v4 = *(_QWORD *)option_value;
      memset(__p, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(_QWORD *)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      goto LABEL_28;
    case 4:
      v11 = *(_QWORD *)option_value;
      memset(__p, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v302.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
      goto LABEL_28;
    case 5:
      v12 = *(_QWORD *)option_value;
      memset(__p, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v302.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
      goto LABEL_28;
    case 6:
      size = (uint64_t)(*(_QWORD *)option_value << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v13 = *(_QWORD *)option_value;
      v14 = *(_QWORD *)(*(_QWORD *)option_value + 16);
      __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)option_value + 8);
      __p[0].__r_.__value_.__l.__size_ = v14;
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = *(_OWORD *)(v13 + 24);
      v18 = *(_OWORD *)(v13 + 56);
      *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v13 + 40);
      *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = v18;
      *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v17;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[0].__r_.__value_.__l.__size_);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)option_value + 8);
      turi::flexible_type_fail(0);
      if (__p[1].__r_.__value_.__r.__words[2])
      {
        __p[2].__r_.__value_.__r.__words[0] = __p[1].__r_.__value_.__r.__words[2];
        operator delete((void *)__p[1].__r_.__value_.__r.__words[2]);
      }
      if (__p[0].__r_.__value_.__r.__words[2])
      {
        __p[1].__r_.__value_.__r.__words[0] = __p[0].__r_.__value_.__r.__words[2];
        operator delete((void *)__p[0].__r_.__value_.__r.__words[2]);
      }
      size = __p[0].__r_.__value_.__l.__size_;
      if (!__p[0].__r_.__value_.__l.__size_)
        goto LABEL_29;
      v5 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)size + 16))(size);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
      }
LABEL_28:
      size = 0;
LABEL_29:
      if (v301 < 0)
      {
        operator delete(v300[0]);
        if (!size)
          goto LABEL_34;
      }
      else if (!size)
      {
        goto LABEL_34;
      }
      turi::supervised::linear_svm_scaled_logistic_opt_interface::init_feature_rescaling(this[51]);
LABEL_34:
      turi::supervised::get_class_weights_from_options((uint64_t)(this + 28), (uint64_t)(this + 47), &v315);
      v302.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v302.__r_.__value_.__r.__words[1]) = 0;
      v302.__r_.__value_.__s.__data_[12] = 0;
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v302, &v315);
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 5) = *(std::string::size_type *)((char *)v302.__r_.__value_.__r.__words + 5);
      __p[0].__r_.__value_.__l.__size_ = v302.__r_.__value_.__r.__words[0];
      __p[0].__r_.__value_.__s.__data_[20] = v302.__r_.__value_.__s.__data_[12];
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v302, "class_weights");
      v19 = (uint64_t **)(this + 37);
      v300[0] = &v302;
      v20 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v302.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v300);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v20 + 14, (unsigned int *)__p);
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v302.__r_.__value_.__l.__data_);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "num_classes");
      v21 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(this + 37), (const void **)&__p[0].__r_.__value_.__l.__data_);
      v22 = turi::variant_converter<unsigned long,void>::get((uint64_t)v300, v21);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(&__idx, v22);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v23 = *(_QWORD **)(v315 + 8);
      v24 = *(_QWORD **)(v315 + 16);
      if (v23 != v24)
      {
        v25 = 0;
        do
        {
          v302.__r_.__value_.__r.__words[0] = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(*(void ***)(*((_QWORD *)this[47] + 3) + 32), (const turi::flexible_type *)&v23[v25]);
          v26 = &v23[v25 + 2];
          std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<unsigned long,double const&,0>(__p, &v302, v26);
          std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](__idx + v25 * 8, (uint64_t *)__p);
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)__p);
          v25 += 4;
        }
        while (v26 + 2 != v24);
      }
      v27 = (uint64_t *)this[51];
      *(std::string::size_type *)((char *)v302.__r_.__value_.__r.__words + 5) = 0x500000000000000;
      v302.__r_.__value_.__r.__words[0] = 0;
      v28 = (_QWORD *)operator new();
      v29 = v28;
      *v28 = 0;
      v28[1] = 0;
      v30 = (void **)(v28 + 1);
      v28[2] = 0;
      v28[3] = 0;
      v302.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      *v28 = 1;
      switch(v302.__r_.__value_.__s.__data_[12])
      {
        case 2:
          if (*v28 != 1)
          {
            v31 = (_QWORD *)operator new();
            v32 = v302.__r_.__value_.__r.__words[0];
            *v31 = *(_QWORD *)v302.__r_.__value_.__l.__data_;
            v33 = (std::string *)(v31 + 1);
            if (*(char *)(v32 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)(v32 + 8), *(_QWORD *)(v32 + 16));
            }
            else
            {
              v34 = *(_OWORD *)(v32 + 8);
              v31[3] = *(_QWORD *)(v32 + 24);
              *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
            }
            v302.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
            *v31 = 1;
            do
            {
              v65 = __ldaxr(v29);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, v29));
            if (!v66)
            {
              v39 = 0x1012C404EF22A49;
              if ((*((char *)v29 + 31) & 0x80000000) == 0)
                goto LABEL_84;
              v48 = *v30;
              goto LABEL_83;
            }
          }
          break;
        case 3:
          if (*v28 != 1)
          {
            v44 = (_QWORD *)operator new();
            v45 = v302.__r_.__value_.__r.__words[0];
            *v44 = *(_QWORD *)v302.__r_.__value_.__l.__data_;
            v44[2] = 0;
            v44[3] = 0;
            v44[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v44 + 1, *(const void **)(v45 + 8), *(_QWORD *)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - *(_QWORD *)(v45 + 8)) >> 3);
            v302.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
            *v44 = 1;
            do
            {
              v46 = __ldaxr(v29);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v29));
            if (!v47)
            {
              v39 = 0x1080C409938AC02;
              v48 = *v30;
              if (*v30)
              {
                v29[2] = v48;
LABEL_83:
                operator delete(v48);
              }
              goto LABEL_84;
            }
          }
          break;
        case 4:
          if (*v28 != 1)
          {
            v35 = (_QWORD *)operator new();
            v36 = v302.__r_.__value_.__r.__words[0];
            *v35 = *(_QWORD *)v302.__r_.__value_.__l.__data_;
            v35[2] = 0;
            v35[3] = 0;
            v35[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v35 + 1, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 4);
            v302.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
            *v35 = 1;
            do
            {
              v37 = __ldaxr(v29);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v29));
            if (!v38)
            {
              v39 = 0x1020C405E66F15BLL;
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_84;
            }
          }
          break;
        case 5:
          if (*v28 != 1)
          {
            v49 = (_QWORD *)operator new();
            v50 = v302.__r_.__value_.__r.__words[0];
            *v49 = *(_QWORD *)v302.__r_.__value_.__l.__data_;
            v49[2] = 0;
            v49[3] = 0;
            v49[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v49 + 1, *(uint64_t **)(v50 + 8), *(uint64_t **)(v50 + 16), (uint64_t)(*(_QWORD *)(v50 + 16) - *(_QWORD *)(v50 + 8)) >> 5);
            v302.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
            *v49 = 1;
            do
            {
              v51 = __ldaxr(v29);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v29));
            if (!v52)
            {
              v39 = 0x1020C405E66F15BLL;
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_84;
            }
          }
          break;
        case 8:
          if (*v28 != 1)
          {
            v53 = operator new();
            v54 = v302.__r_.__value_.__r.__words[0];
            *(_QWORD *)v53 = *(_QWORD *)v302.__r_.__value_.__l.__data_;
            *(_QWORD *)(v53 + 8) = *(_QWORD *)(v54 + 8);
            v55 = *(_QWORD *)(v54 + 16);
            *(_QWORD *)(v53 + 16) = v55;
            if (v55)
            {
              v56 = (unsigned int *)(v55 + 8);
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
            }
            v58 = *(_OWORD *)(v54 + 24);
            v59 = *(_OWORD *)(v54 + 40);
            *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
            *(_OWORD *)(v53 + 40) = v59;
            *(_OWORD *)(v53 + 24) = v58;
            v302.__r_.__value_.__r.__words[0] = v53;
            *(_QWORD *)v53 = 1;
            do
            {
              v60 = __ldaxr(v29);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v29));
            if (!v61)
            {
              v39 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v29 + 2);
              goto LABEL_84;
            }
          }
          break;
        case 9:
          if (*v28 != 1)
          {
            v40 = (_QWORD *)operator new();
            v41 = v302.__r_.__value_.__r.__words[0] + 8;
            *v40 = *(_QWORD *)v302.__r_.__value_.__l.__data_;
            turi::flexible_type_impl::ndarray<double>::ndarray(v40 + 1, v41);
            v302.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
            *v40 = 1;
            do
            {
              v42 = __ldaxr(v29);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v29));
            if (!v43)
            {
              v39 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v29);
LABEL_84:
              MEMORY[0x219A19A08](v29, v39);
            }
          }
          break;
        default:
          break;
      }
      if ((size_t *)(v302.__r_.__value_.__r.__words[0] + 8) != &__idx)
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v302.__r_.__value_.__r.__words[0] + 8), (uint64_t *)__idx, v298, (uint64_t)((uint64_t)v298 - __idx) >> 5);
      turi::supervised::linear_svm_scaled_logistic_opt_interface::set_class_weights(v27, (const turi::flexible_type *)&v302);
      switch(v302.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v67 = (unint64_t *)v302.__r_.__value_.__r.__words[0];
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            v70 = v302.__r_.__value_.__r.__words[0];
            if (v302.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v302.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v302.__r_.__value_.__r.__words[0] + 8));
              v71 = v70;
              v72 = 0x1012C404EF22A49;
              goto LABEL_128;
            }
          }
          break;
        case 3:
          v84 = (unint64_t *)v302.__r_.__value_.__r.__words[0];
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, v84));
          if (!v86)
          {
            v87 = v302.__r_.__value_.__r.__words[0];
            if (v302.__r_.__value_.__r.__words[0])
            {
              v88 = *(void **)(v302.__r_.__value_.__r.__words[0] + 8);
              if (v88)
              {
                *(_QWORD *)(v302.__r_.__value_.__r.__words[0] + 16) = v88;
                operator delete(v88);
              }
              v71 = v87;
              v72 = 0x1080C409938AC02;
              goto LABEL_128;
            }
          }
          break;
        case 4:
          v73 = (unint64_t *)v302.__r_.__value_.__r.__words[0];
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
          {
            v76 = v302.__r_.__value_.__r.__words[0];
            if (v302.__r_.__value_.__r.__words[0])
            {
              __p[0].__r_.__value_.__r.__words[0] = v302.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_121;
            }
          }
          break;
        case 5:
          v89 = (unint64_t *)v302.__r_.__value_.__r.__words[0];
          do
          {
            v90 = __ldaxr(v89);
            v91 = v90 - 1;
          }
          while (__stlxr(v91, v89));
          if (!v91)
          {
            v76 = v302.__r_.__value_.__r.__words[0];
            if (v302.__r_.__value_.__r.__words[0])
            {
              __p[0].__r_.__value_.__r.__words[0] = v302.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_121:
              v71 = v76;
              v72 = 0x1020C405E66F15BLL;
              goto LABEL_128;
            }
          }
          break;
        case 8:
          v92 = (unint64_t *)v302.__r_.__value_.__r.__words[0];
          do
          {
            v93 = __ldaxr(v92);
            v94 = v93 - 1;
          }
          while (__stlxr(v94, v92));
          if (!v94)
          {
            v95 = v302.__r_.__value_.__r.__words[0];
            if (v302.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v302.__r_.__value_.__r.__words[0] + 16));
              v71 = v95;
              v83 = -235920773;
              goto LABEL_127;
            }
          }
          break;
        case 9:
          v77 = (unint64_t *)v302.__r_.__value_.__r.__words[0];
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (!v79)
          {
            v80 = v302.__r_.__value_.__r.__words[0];
            if (v302.__r_.__value_.__r.__words[0])
            {
              v81 = *(void **)(v302.__r_.__value_.__r.__words[0] + 48);
              if (v81)
              {
                *(_QWORD *)(v302.__r_.__value_.__r.__words[0] + 56) = v81;
                operator delete(v81);
              }
              v82 = *(void **)(v80 + 24);
              if (v82)
              {
                *(_QWORD *)(v80 + 32) = v82;
                operator delete(v82);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v80 + 8);
              v71 = v80;
              v83 = 2071181815;
LABEL_127:
              v72 = v83 | 0x1030C4000000000;
LABEL_128:
              MEMORY[0x219A19A08](v71, v72);
            }
          }
          break;
        default:
          break;
      }
      std::string::basic_string[abi:ne180100]<0>(v295, "SVM");
      turi::supervised::supervised_learning_model_base::display_classifier_training_summary((turi::supervised::supervised_learning_model_base *)this, (uint64_t)v295, 0);
      if (v296 < 0)
        operator delete(v295[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
      v96 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(this + 37), (const void **)&__p[0].__r_.__value_.__l.__data_);
      v97 = turi::variant_converter<unsigned long,void>::get((uint64_t)v300, v96);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v98 = (int *)global_logger();
      if (v98[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v98))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v99 = (file_logger *)global_logger();
        started = file_logger::start_stream(v99, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/linear_svm.cpp", "train", 187, 1);
        v101 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v101 && *((_BYTE *)v101 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101 + 2, (uint64_t)"Number of coefficients    : ", 28);
        v102 = file_logger::operator<<<unsigned long>((uint64_t)started);
        v103 = pthread_getspecific(*(_QWORD *)(v102 + 592));
        if (v103)
        {
          if (*((_BYTE *)v103 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(_QWORD *)(v103[2] - 24) + 16));
            v104 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v102);
            if (*(_DWORD *)(v102 + 600) == 7)
            {
              __print_back_trace();
              v271 = __cxa_allocate_exception(8uLL);
              *v271 = "LOG_FATAL encountered";
              __cxa_throw(v271, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
      v293 = 0;
      v294 = 0;
      v105 = 8 * v97;
      if (v97)
      {
        if (v97 >> 61 || (v106 = (char *)malloc_type_malloc(8 * v97, 0x1E76AA36uLL), (v107 = v106) == 0))
        {
          v267 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v268 = std::bad_alloc::bad_alloc(v267);
          __cxa_throw(v268, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        v293 = v106;
        v294 = v97;
        v108 = v97 >> 1;
        v109 = v97 & 0xFFFFFFFFFFFFFFFELL;
        if (v97 < 2)
        {
          v275 = 0;
        }
        else
        {
          v110 = 2;
          if (v109 > 2)
            v110 = v97 & 0xFFFFFFFFFFFFFFFELL;
          bzero(v106, ((8 * v110 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          v275 = 1;
        }
      }
      else
      {
        v275 = 0;
        v109 = 0;
        v108 = 0;
        v107 = 0;
        v294 = 0;
      }
      if (v109 < v97)
        bzero(&v107[16 * v108], v105 - 16 * v108);
      std::string::basic_string[abi:ne180100]<0>(v300, "penalty");
      v111 = (int *)turi::option_manager::value((uint64_t)(this + 28), (const void **)v300);
      v112 = 0.0;
      switch(*((_BYTE *)v111 + 12))
      {
        case 0:
          v112 = (double)*(uint64_t *)v111;
          goto LABEL_182;
        case 1:
          v112 = *(double *)v111;
          goto LABEL_182;
        case 2:
          v117 = *(_QWORD *)v111;
          v118 = (char **)(*(_QWORD *)v111 + 8);
          v292.__r_.__value_.__r.__words[0] = 0;
          v119 = (char *)v118;
          if (*(char *)(v117 + 31) < 0)
            v119 = *v118;
          std::string::basic_string[abi:ne180100]<0>(__p, v119);
          v120 = std::stod(__p, (size_t *)&v292);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          if (*(char *)(v117 + 31) < 0)
            v121 = *(_QWORD *)(v117 + 16);
          else
            v121 = *(unsigned __int8 *)(v117 + 31);
          if (v292.__r_.__value_.__r.__words[0] != v121)
          {
            v272 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v273 = std::string::append(&v302, " cannot be interpreted as a float");
            v274 = *(_OWORD *)&v273->__r_.__value_.__l.__data_;
            __p[0].__r_.__value_.__r.__words[2] = v273->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v274;
            v273->__r_.__value_.__l.__size_ = 0;
            v273->__r_.__value_.__r.__words[2] = 0;
            v273->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v272, __p);
            __cxa_throw(v272, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v130 = v120;
          v112 = v130;
          goto LABEL_182;
        case 3:
          v113 = *(_QWORD *)v111;
          memset(__p, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v113 + 8), *(_QWORD *)(v113 + 16), (uint64_t)(*(_QWORD *)(v113 + 16) - *(_QWORD *)(v113 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0].__r_.__value_.__r.__words[0])
          {
            __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          goto LABEL_182;
        case 4:
          v122 = *(_QWORD *)v111;
          memset(__p, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v122 + 8), *(uint64_t **)(v122 + 16), (uint64_t)(*(_QWORD *)(v122 + 16) - *(_QWORD *)(v122 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v302.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
          goto LABEL_182;
        case 5:
          v123 = *(_QWORD *)v111;
          memset(__p, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v123 + 8), *(uint64_t **)(v123 + 16), (uint64_t)(*(_QWORD *)(v123 + 16) - *(_QWORD *)(v123 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v302.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
          goto LABEL_182;
        case 6:
          v112 = (double)v111[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v111 << 8) >> 8);
          goto LABEL_182;
        case 7:
          goto LABEL_182;
        case 8:
          v124 = *(_QWORD *)v111;
          v125 = *(_QWORD *)(*(_QWORD *)v111 + 16);
          __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v111 + 8);
          __p[0].__r_.__value_.__l.__size_ = v125;
          if (v125)
          {
            v126 = (unsigned int *)(v125 + 8);
            do
              v127 = __ldxr(v126);
            while (__stxr(v127 + 1, v126));
          }
          v128 = *(_OWORD *)(v124 + 24);
          v129 = *(_OWORD *)(v124 + 56);
          *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v124 + 40);
          *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = v129;
          *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v128;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[0].__r_.__value_.__l.__size_);
          goto LABEL_182;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v111 + 8);
          turi::flexible_type_fail(0);
          if (__p[1].__r_.__value_.__r.__words[2])
          {
            __p[2].__r_.__value_.__r.__words[0] = __p[1].__r_.__value_.__r.__words[2];
            operator delete((void *)__p[1].__r_.__value_.__r.__words[2]);
          }
          if (__p[0].__r_.__value_.__r.__words[2])
          {
            __p[1].__r_.__value_.__r.__words[0] = __p[0].__r_.__value_.__r.__words[2];
            operator delete((void *)__p[0].__r_.__value_.__r.__words[2]);
          }
          v114 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
          if (__p[0].__r_.__value_.__l.__size_)
          {
            v115 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
LABEL_182:
          if (v301 < 0)
            operator delete(v300[0]);
          break;
        default:
          turi::flexible_type_fail(0);
          goto LABEL_391;
      }
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_391:
      __break(1u);
      return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v302, "solver");
  v131 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)(this + 28), (const void **)&v302.__r_.__value_.__l.__data_);
  switch(*((_BYTE *)v131 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_193;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_193:
      __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
      v134 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      __p[0].__r_.__value_.__r.__words[2] = v134;
      __p[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
      if ((v313[7] & 0x80000000) != 0)
        operator delete((void *)v312);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v314);
      goto LABEL_200;
    case 2:
      v132 = *(_QWORD *)v131;
      if (*(char *)(*(_QWORD *)v131 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(v132 + 8), *(_QWORD *)(v132 + 16));
      }
      else
      {
        v133 = *(_OWORD *)(v132 + 8);
        v292.__r_.__value_.__r.__words[2] = *(_QWORD *)(v132 + 24);
        *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v133;
      }
      goto LABEL_200;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v131 + 8));
      goto LABEL_200;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v131 + 8));
      goto LABEL_200;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v131 + 8));
      goto LABEL_200;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v131, &v292);
      goto LABEL_200;
    case 7:
      memset(&v292, 0, sizeof(v292));
      goto LABEL_200;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_200;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v131 + 8));
LABEL_200:
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v302.__r_.__value_.__l.__data_);
      if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v292.__r_.__value_.__l.__size_ != 4)
          goto LABEL_209;
        v135 = (std::string *)v292.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) != 4)
          goto LABEL_209;
        v135 = &v292;
      }
      if (LODWORD(v135->__r_.__value_.__l.__data_) == 1869903201)
        MEMORY[0x219A19390](&v292, "lbfgs");
LABEL_209:
      std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[7],std::string&,0>((uint64_t)__p, "solver", &v292);
      std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&v302, __p, 1);
      turi::ml_model_base::set_options((uint64_t)this, &v302);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v302, (_QWORD *)v302.__r_.__value_.__l.__size_);
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = -1;
      __p[0].__r_.__value_.__l.__size_ = 0xBFF0000000000000;
      memset(&__p[0].__r_.__value_.__r.__words[2], 0, 32);
      memset(&__p[2], 0, sizeof(std::string));
      v312 = 0uLL;
      turi::sframe::sframe((turi::sframe *)v313);
      if (v97)
      {
        v136 = (float64x2_t *)malloc_type_malloc(8 * v97, 0x1E76AA36uLL);
        v137 = v136;
        if (!v136)
        {
          v269 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v270 = std::bad_alloc::bad_alloc(v269);
          __cxa_throw(v270, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        if (v275)
        {
          v138 = 2;
          if (v109 > 2)
            v138 = v109;
          memset_pattern16(v136, &unk_218712770, ((8 * v138 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
      }
      else
      {
        v137 = 0;
      }
      if (v109 < v97)
        memset_pattern16(&v137[v108], &unk_218712770, v105 - 16 * v108);
      v137->f64[v97 - 1] = 0.0;
      v290 = 0;
      v291 = 0;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v290, v97, 1);
      if (v291 != v97)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v290, v97, 1);
        v97 = v291;
        if (v291 >= 0)
          v139 = v291;
        else
          v139 = v291 + 1;
        v109 = v139 & 0xFFFFFFFFFFFFFFFELL;
      }
      v140 = v112;
      *(double *)&v141 = v140;
      v142 = (char *)v290;
      if ((uint64_t)v97 >= 2)
      {
        v143 = 0;
        v144 = (float64x2_t)vdupq_lane_s64(v141, 0);
        __asm { FMOV            V2.2D, #0.5 }
        v149 = (float64x2_t *)v290;
        v150 = v137;
        do
        {
          v151 = *v150++;
          *v149++ = vdivq_f64(vmulq_f64(v151, _Q2), v144);
          v143 += 2;
        }
        while (v143 < v109);
      }
      v152 = v97 - v109;
      if ((uint64_t)v97 > v109)
      {
        v153 = &v137->f64[v109];
        v154 = (double *)&v142[8 * v109];
        do
        {
          v155 = *v153++;
          *v154++ = v155 * 0.5 / *(double *)&v141;
          --v152;
        }
        while (v152);
      }
      v288 = 0;
      v289 = 0;
      v156 = (_QWORD *)operator new();
      turi::optimization::l2_norm::l2_norm(v156, (__int128 **)&v290);
      std::shared_ptr<turi::optimization::smooth_regularizer_interface>::reset[abi:ne180100]<turi::optimization::l2_norm,void>(&v288, (uint64_t)v156);
      v157 = turi::option_manager::current_option_values((turi::option_manager *)(this + 28));
      std::map<std::string,turi::flexible_type>::map[abi:ne180100](v287, v157);
      if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v292.__r_.__value_.__l.__size_ != 5)
          goto LABEL_376;
        v158 = (std::string *)v292.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) != 5)
          goto LABEL_376;
        v158 = &v292;
      }
      data = (int)v158->__r_.__value_.__l.__data_;
      v160 = v158->__r_.__value_.__s.__data_[4];
      if (data != 1734763116 || v160 != 115)
      {
LABEL_376:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v302);
        v261 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v302, (uint64_t)"Solver ", 7);
        if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v262 = &v292;
        else
          v262 = (std::string *)v292.__r_.__value_.__r.__words[0];
        if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v263 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
        else
          v263 = v292.__r_.__value_.__l.__size_;
        v264 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v261, (uint64_t)v262, v263);
        v265 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)" is not supported.", 18);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v265);
        v266 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v302, (uint64_t)"Supported solvers are (auto, lbfgs)", 35);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v266);
        v300[0] = &v302;
        turi::supervised::linear_svm::train(void)::$_0::operator()();
      }
      v162 = (std::__shared_weak_count *)this[52];
      v285 = this[51];
      v286 = v162;
      if (v162)
      {
        p_shared_owners = (unint64_t *)&v162->__shared_owners_;
        do
          v164 = __ldxr(p_shared_owners);
        while (__stxr(v164 + 1, p_shared_owners));
      }
      turi::optimization::lbfgs_compat(&v285, (__int128 **)&v293, (uint64_t)v287, &v288, (uint64_t)&v302);
      v165 = v302.__r_.__value_.__r.__words[2];
      v166 = __p[1].__r_.__value_.__r.__words[2];
      v302.__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v302.__r_.__value_.__l.__data_;
      v167 = v303;
      v303 = *(_OWORD *)&__p[1].__r_.__value_.__l.__data_;
      *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = v167;
      __p[0].__r_.__value_.__r.__words[2] = v165;
      __p[1].__r_.__value_.__r.__words[2] = v304;
      v168 = v305;
      v304 = v166;
      v305 = __p[2].__r_.__value_.__l.__data_;
      __p[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
      v169 = v306;
      v306 = *(_OWORD *)&__p[2].__r_.__value_.__r.__words[1];
      *(_OWORD *)&__p[2].__r_.__value_.__r.__words[1] = v169;
      v312 = v308;
      v311 = v307;
      turi::sframe::operator=((uint64_t)v313, (uint64_t)v309);
      turi::sframe::~sframe((turi::sframe *)v309);
      free(v305);
      free(*((void **)&v303 + 1));
      free((void *)v302.__r_.__value_.__r.__words[2]);
      v170 = v286;
      if (v286)
      {
        v171 = (unint64_t *)&v286->__shared_owners_;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
        }
      }
      if (turi::supervised::linear_regression_opt_interface::num_validation_examples(this[51]))
      {
        turi::supervised::linear_svm_scaled_logistic_opt_interface::get_validation_accuracy(this[51]);
        v278 = v173;
        std::string::basic_string[abi:ne180100]<0>(&v302, "validation_accuracy");
        v300[0] = &v302;
        v174 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v302.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v300);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<double>(v174 + 14, &v278);
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v302.__r_.__value_.__l.__data_);
      }
      turi::supervised::linear_svm_scaled_logistic_opt_interface::get_training_accuracy(this[51]);
      v278 = v175;
      std::string::basic_string[abi:ne180100]<0>(&v302, "training_accuracy");
      v300[0] = &v302;
      v176 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v302.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v300);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<double>(v176 + 14, &v278);
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v302.__r_.__value_.__l.__data_);
      v177 = this + 49;
      v178 = (__int128 *)__p[0].__r_.__value_.__r.__words[2];
      v179 = (uint64_t)__p[1].__r_.__value_.__l.__data_;
      if (this[50] != (turi::supervised::linear_svm_scaled_logistic_opt_interface *)__p[1].__r_.__value_.__l.__data_)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(this + 49, (uint64_t)__p[1].__r_.__value_.__l.__data_, 1);
        v179 = (uint64_t)this[50];
      }
      v180 = (_OWORD *)*v177;
      if (v179 >= 0)
        v181 = v179;
      else
        v181 = v179 + 1;
      v182 = v181 & 0xFFFFFFFFFFFFFFFELL;
      if (v179 >= 2)
      {
        v183 = 0;
        v184 = (_OWORD *)*v177;
        v185 = v178;
        do
        {
          v186 = *v185++;
          *v184++ = v186;
          v183 += 2;
        }
        while (v183 < v182);
      }
      _VF = __OFSUB__(v179, v182);
      v187 = v179 - v182;
      if (!((v187 < 0) ^ _VF | (v187 == 0)))
      {
        v188 = v181 >> 1;
        v189 = (uint64_t *)&v178[v181 >> 1];
        v190 = &v180[v188];
        do
        {
          v191 = *v189++;
          *v190++ = v191;
          --v187;
        }
        while (v187);
      }
      turi::supervised::linear_svm_scaled_logistic_opt_interface::rescale_solution((uint64_t)this[51]);
      v192 = this[47];
      v193 = (std::__shared_weak_count *)this[48];
      v283 = v192;
      v284 = v193;
      if (v193)
      {
        v194 = (unint64_t *)&v193->__shared_owners_;
        do
          v195 = __ldxr(v194);
        while (__stxr(v195 + 1, v194));
        v300[0] = 0;
        v300[1] = 0;
        v278 = v192;
        v279 = v284;
        if (v284)
        {
          v196 = (unint64_t *)&v284->__shared_owners_;
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
        }
      }
      else
      {
        v300[0] = 0;
        v300[1] = 0;
        v278 = v192;
        v279 = 0;
      }
      turi::supervised::get_coefficients_as_sframe(this + 49, (uint64_t **)&v278, v300, (turi::sframe *)&v302);
      v198 = v279;
      if (v279)
      {
        v199 = (unint64_t *)&v279->__shared_owners_;
        do
          v200 = __ldaxr(v199);
        while (__stlxr(v200 - 1, v199));
        if (!v200)
        {
          ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
          std::__shared_weak_count::__release_weak(v198);
        }
      }
      free(v300[0]);
      v201 = v284;
      if (v284)
      {
        v202 = (unint64_t *)&v284->__shared_owners_;
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
      }
      _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v281);
      turi::unity_sframe::construct_from_sframe(v281, (const turi::sframe *)&v302);
      v278 = v281;
      v279 = v282;
      if (v282)
      {
        v204 = (unint64_t *)&v282->__shared_owners_;
        do
          v205 = __ldxr(v204);
        while (__stxr(v205 + 1, v204));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&v278, (uint64_t)v300);
      v206 = v279;
      if (v279)
      {
        v207 = (unint64_t *)&v279->__shared_owners_;
        do
          v208 = __ldaxr(v207);
        while (__stlxr(v208 - 1, v207));
        if (!v208)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v278, "coefficients");
      v276 = (turi::unity_sframe *)&v278;
      v209 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19, (const void **)&v278, (uint64_t)&std::piecewise_construct, (_OWORD **)&v276);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v209 + 14, (unsigned int *)v300);
      if (v280 < 0)
        operator delete(v278);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v300);
      std::string::basic_string[abi:ne180100]<0>(v300, "training_iterations");
      v278 = v300;
      v210 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19, (const void **)v300, (uint64_t)&std::piecewise_construct, (_OWORD **)&v278);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<int>(v210 + 14, (int *)__p);
      if (v301 < 0)
        operator delete(v300[0]);
      std::string::basic_string[abi:ne180100]<0>(v300, "training_time");
      v278 = v300;
      v211 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19, (const void **)v300, (uint64_t)&std::piecewise_construct, (_OWORD **)&v278);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v211 + 14, &__p[0].__r_.__value_.__l.__size_);
      if (v301 < 0)
        operator delete(v300[0]);
      std::string::basic_string[abi:ne180100]<0>(v300, "training_loss");
      v278 = v300;
      v212 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19, (const void **)v300, (uint64_t)&std::piecewise_construct, (_OWORD **)&v278);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v212 + 14, (_QWORD *)&v311 + 1);
      if (v301 < 0)
        operator delete(v300[0]);
      turi::optimization::translate_solver_status((int *)&v312 + 3, v300);
      std::string::basic_string[abi:ne180100]<0>(&v278, "training_solver_status");
      v276 = (turi::unity_sframe *)&v278;
      v213 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19, (const void **)&v278, (uint64_t)&std::piecewise_construct, (_OWORD **)&v276);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<std::string>(v213 + 14, (__int128 *)v300);
      if (v280 < 0)
        operator delete(v278);
      if (v301 < 0)
        operator delete(v300[0]);
      _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v276);
      turi::unity_sframe::construct_from_sframe(v276, (const turi::sframe *)v313);
      v278 = v276;
      v279 = v277;
      if (v277)
      {
        v214 = (unint64_t *)&v277->__shared_owners_;
        do
          v215 = __ldxr(v214);
        while (__stxr(v215 + 1, v214));
      }
      turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&v278, (uint64_t)v300);
      v216 = v279;
      if (v279)
      {
        v217 = (unint64_t *)&v279->__shared_owners_;
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
          std::__shared_weak_count::__release_weak(v216);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v278, "progress");
      v299 = &v278;
      v219 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19, (const void **)&v278, (uint64_t)&std::piecewise_construct, (_OWORD **)&v299);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v219 + 14, (unsigned int *)v300);
      if (v280 < 0)
        operator delete(v278);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v300);
      v220 = v289;
      v288 = 0;
      v289 = 0;
      if (v220)
      {
        v221 = (unint64_t *)&v220->__shared_owners_;
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      v223 = v277;
      if (v277)
      {
        v224 = (unint64_t *)&v277->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
      v226 = v282;
      if (v282)
      {
        v227 = (unint64_t *)&v282->__shared_owners_;
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      turi::sframe::~sframe((turi::sframe *)&v302);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v287, (_QWORD *)v287[1]);
      v229 = v289;
      if (v289)
      {
        v230 = (unint64_t *)&v289->__shared_owners_;
        do
          v231 = __ldaxr(v230);
        while (__stlxr(v231 - 1, v230));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
      }
      free(v290);
      free(v137);
      turi::sframe::~sframe((turi::sframe *)v313);
      free(__p[2].__r_.__value_.__l.__data_);
      free((void *)__p[1].__r_.__value_.__l.__size_);
      free((void *)__p[0].__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v292.__r_.__value_.__l.__data_);
      free(v293);
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__idx;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      switch(v316)
      {
        case 2:
          v232 = (unint64_t *)v315;
          do
          {
            v233 = __ldaxr(v232);
            v234 = v233 - 1;
          }
          while (__stlxr(v234, v232));
          if (!v234)
          {
            v235 = v315;
            if (v315)
            {
              if (*(char *)(v315 + 31) < 0)
                operator delete(*(void **)(v315 + 8));
              v236 = v235;
              v237 = 0x1012C404EF22A49;
              goto LABEL_374;
            }
          }
          break;
        case 3:
          v249 = (unint64_t *)v315;
          do
          {
            v250 = __ldaxr(v249);
            v251 = v250 - 1;
          }
          while (__stlxr(v251, v249));
          if (!v251)
          {
            v252 = v315;
            if (v315)
            {
              v253 = *(void **)(v315 + 8);
              if (v253)
              {
                *(_QWORD *)(v315 + 16) = v253;
                operator delete(v253);
              }
              v236 = v252;
              v237 = 0x1080C409938AC02;
              goto LABEL_374;
            }
          }
          break;
        case 4:
          v238 = (unint64_t *)v315;
          do
          {
            v239 = __ldaxr(v238);
            v240 = v239 - 1;
          }
          while (__stlxr(v240, v238));
          if (!v240)
          {
            v241 = v315;
            if (v315)
            {
              __p[0].__r_.__value_.__r.__words[0] = v315 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_367;
            }
          }
          break;
        case 5:
          v254 = (unint64_t *)v315;
          do
          {
            v255 = __ldaxr(v254);
            v256 = v255 - 1;
          }
          while (__stlxr(v256, v254));
          if (!v256)
          {
            v241 = v315;
            if (v315)
            {
              __p[0].__r_.__value_.__r.__words[0] = v315 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_367:
              v236 = v241;
              v237 = 0x1020C405E66F15BLL;
              goto LABEL_374;
            }
          }
          break;
        case 8:
          v257 = (unint64_t *)v315;
          do
          {
            v258 = __ldaxr(v257);
            v259 = v258 - 1;
          }
          while (__stlxr(v259, v257));
          if (!v259)
          {
            v260 = v315;
            if (v315)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v315 + 16));
              v236 = v260;
              v248 = -235920773;
              goto LABEL_373;
            }
          }
          break;
        case 9:
          v242 = (unint64_t *)v315;
          do
          {
            v243 = __ldaxr(v242);
            v244 = v243 - 1;
          }
          while (__stlxr(v244, v242));
          if (!v244)
          {
            v245 = v315;
            if (v315)
            {
              v246 = *(void **)(v315 + 48);
              if (v246)
              {
                *(_QWORD *)(v315 + 56) = v246;
                operator delete(v246);
              }
              v247 = *(void **)(v245 + 24);
              if (v247)
              {
                *(_QWORD *)(v245 + 32) = v247;
                operator delete(v247);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v245 + 8);
              v236 = v245;
              v248 = 2071181815;
LABEL_373:
              v237 = v248 | 0x1030C4000000000;
LABEL_374:
              MEMORY[0x219A19A08](v236, v237);
            }
          }
          break;
        default:
          return;
      }
      return;
    default:
      turi::flexible_type_fail(0);
      goto LABEL_391;
  }
}

void sub_21856FEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void **a56)
{
  void *v56;
  uint64_t v57;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  unsigned int v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  void *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;

  std::ostringstream::~ostringstream((uint64_t)&a56);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a22, (_QWORD *)a23);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  free(a27);
  free(v56);
  turi::optimization::_solver_return::~_solver_return((void **)&STACK[0x2F0]);
  if (a34 < 0)
    operator delete(__p);
  free(a36);
  a56 = (void **)&a41;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a56);
  switch(*(_BYTE *)(v57 - 124))
  {
    case 2:
      v59 = *(unint64_t **)(v57 - 136);
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (v61)
        goto LABEL_41;
      v62 = *(_QWORD *)(v57 - 136);
      if (!v62)
        goto LABEL_41;
      if (*(char *)(v62 + 31) < 0)
        operator delete(*(void **)(v62 + 8));
      v63 = (_QWORD *)v62;
      v64 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v74 = *(unint64_t **)(v57 - 136);
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (v76)
        goto LABEL_41;
      v77 = *(_QWORD **)(v57 - 136);
      if (!v77)
        goto LABEL_41;
      v78 = (void *)v77[1];
      if (v78)
      {
        v77[2] = v78;
        operator delete(v78);
      }
      v63 = v77;
      v64 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v65 = *(unint64_t **)(v57 - 136);
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (v67)
        goto LABEL_41;
      v68 = *(_QWORD **)(v57 - 136);
      if (!v68)
        goto LABEL_41;
      a56 = (void **)(v68 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a56);
      goto LABEL_33;
    case 5:
      v79 = *(unint64_t **)(v57 - 136);
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (v81)
        goto LABEL_41;
      v68 = *(_QWORD **)(v57 - 136);
      if (!v68)
        goto LABEL_41;
      a56 = (void **)(v68 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a56);
LABEL_33:
      v63 = v68;
      v64 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v82 = *(unint64_t **)(v57 - 136);
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (v84)
        goto LABEL_41;
      v85 = *(_QWORD *)(v57 - 136);
      if (!v85)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v85 + 16));
      v63 = (_QWORD *)v85;
      v73 = -235920773;
      goto LABEL_39;
    case 9:
      v69 = *(unint64_t **)(v57 - 136);
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (v71)
        goto LABEL_41;
      v72 = *(_QWORD **)(v57 - 136);
      if (!v72)
        goto LABEL_41;
      v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v72);
      v73 = 2071181815;
LABEL_39:
      v64 = v73 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v63, v64);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

void turi::supervised::get_class_weights_from_options(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t *v17;
  unint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  _BOOL4 v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  double v47;
  void *v48;
  double v49;
  double v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  double v64;
  float v65;
  double v66;
  double v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  double v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  void *v91;
  void *v92;
  unsigned int v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  double v97;
  void *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  double v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  double v113;
  double v114;
  _QWORD *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  size_t v138;
  double *v139;
  double *v140;
  unint64_t v141;
  double *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  size_t v153;
  int v154;
  int v155;
  int v156;
  int v157;
  BOOL v159;
  uint64_t v160;
  unint64_t v161;
  float v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  int v172;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  turi::flexible_type_impl *v180;
  _QWORD *v181;
  _QWORD *v182;
  const char *v183;
  double v184;
  __int128 v185;
  std::string *v186;
  std::string::size_type v187;
  _QWORD *v188;
  uint64_t v189;
  size_t v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  __int128 v194;
  std::string *v195;
  std::string::size_type size;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  unsigned __int8 **v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  std::string v209;
  char v210;
  double v211;
  int v212;
  char v213;
  _QWORD v214[33];
  double v215[2];
  __int128 __p;
  double v217;
  int v218;
  char v219;
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[8];
  v7 = (std::__shared_weak_count *)v5[5];
  v207 = v5[4];
  v208 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  }
  v11 = v5[6];
  v10 = (std::__shared_weak_count *)v5[7];
  v205 = v11;
  v206 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(&v203, v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "class_weights");
  v14 = turi::option_manager::value(a1, (const void **)&__p);
  memset(v215, 0, 13);
  if ((double *)v14 != v215)
  {
    v15 = *(double *)v14;
    *(double *)((char *)v215 + 5) = *(double *)(v14 + 5);
    v215[0] = v15;
    BYTE4(v215[1]) = *(_BYTE *)(v14 + 12);
    if (BYTE4(v215[1]) <= 9u && ((1 << SBYTE4(v215[1])) & 0x33C) != 0)
    {
      v17 = *(unint64_t **)&v215[0];
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
  }
  if (SHIBYTE(v217) < 0)
    operator delete((void *)__p);
  if (BYTE4(v215[1]) == 7)
  {
    if (v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v20 = *(_QWORD *)(v207 + 80) + 16 * i;
        *(_QWORD *)&__p = 0;
        DWORD2(__p) = 0;
        BYTE12(__p) = 0;
        if ((__int128 *)v20 != &__p)
        {
          v21 = *(_QWORD *)v20;
          *(_QWORD *)((char *)&__p + 5) = *(_QWORD *)(v20 + 5);
          *(_QWORD *)&__p = v21;
          v22 = *(unsigned __int8 *)(v20 + 12);
          BYTE12(__p) = v22;
          v23 = v22 > 9;
          v24 = (1 << v22) & 0x33C;
          if (!v23 && v24 != 0)
          {
            v26 = (unint64_t *)__p;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 + 1, v26));
          }
        }
        v218 = 0;
        v219 = 1;
        v217 = 1.0;
        std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v203 + 32 * i, (uint64_t *)&__p);
        std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&__p);
      }
    }
    goto LABEL_117;
  }
  v211 = 0.0;
  v212 = 0;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "auto");
  turi::flexible_type::operator=<std::string>((uint64_t *)&v211, &__p);
  if (SHIBYTE(v217) < 0)
    operator delete((void *)__p);
  switch(v213)
  {
    case 0:
      switch(BYTE4(v215[1]))
      {
        case 0:
          v28 = *(_QWORD *)&v215[0] == *(_QWORD *)&v211;
          goto LABEL_226;
        case 1:
          v49 = v215[0];
          v50 = v211;
          goto LABEL_225;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_98;
        case 6:
          v28 = *(_QWORD *)&v211 == (uint64_t)(*(_QWORD *)&v215[0] << 8) >> 8 && LODWORD(v215[1]) == 0;
          goto LABEL_226;
        default:
          goto LABEL_307;
      }
    case 1:
      switch(BYTE4(v215[1]))
      {
        case 0:
          v49 = v211;
          v50 = v215[0];
LABEL_225:
          v28 = v49 == (double)*(uint64_t *)&v50;
          goto LABEL_226;
        case 1:
          v29 = v215[0] == v211;
          goto LABEL_252;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_98;
        case 6:
          v148 = v211;
          v149 = (double)SLODWORD(v215[1]) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v215[0] << 8) >> 8);
          goto LABEL_231;
        default:
          goto LABEL_307;
      }
    case 2:
      if (BYTE4(v215[1]) - 3 < 7 || BYTE4(v215[1]) < 2u)
      {
        v29 = 0;
LABEL_52:
        v39 = *(unint64_t **)&v211;
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          v42 = v211;
          if (v211 == 0.0)
            goto LABEL_97;
          if (*(char *)(*(_QWORD *)&v211 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v211 + 8));
          v37 = v42;
          v43 = 0x1012C404EF22A49;
          goto LABEL_96;
        }
LABEL_253:
        if (!v29)
          goto LABEL_98;
        goto LABEL_254;
      }
      if (BYTE4(v215[1]) != 2)
        goto LABEL_307;
      if (*(char *)(*(_QWORD *)&v215[0] + 31) < 0)
        v138 = *(_QWORD *)(*(_QWORD *)&v215[0] + 16);
      else
        v138 = *(unsigned __int8 *)(*(_QWORD *)&v215[0] + 31);
      if (*(char *)(*(_QWORD *)&v211 + 31) < 0)
        v150 = *(_QWORD *)(*(_QWORD *)&v211 + 16);
      else
        v150 = *(unsigned __int8 *)(*(_QWORD *)&v211 + 31);
      if (v138 != v150)
        goto LABEL_250;
      v151 = (_QWORD *)(*(_QWORD *)&v215[0] + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v215[0] + 31) & 0x80) != 0)
        v151 = (_QWORD *)*v151;
      v152 = (_QWORD *)(*(_QWORD *)&v211 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v211 + 31) & 0x80) != 0)
        v152 = (_QWORD *)*v152;
      if ((*(_BYTE *)(*(_QWORD *)&v215[0] + 31) & 0x80) == 0)
      {
        if (v138)
        {
          v153 = v138 - 1;
          do
          {
            v155 = *(unsigned __int8 *)v151;
            v151 = (_QWORD *)((char *)v151 + 1);
            v154 = v155;
            v157 = *(unsigned __int8 *)v152;
            v152 = (_QWORD *)((char *)v152 + 1);
            v156 = v157;
            v159 = v153-- != 0;
            v29 = v154 == v156;
          }
          while (v154 == v156 && v159);
          goto LABEL_252;
        }
        goto LABEL_251;
      }
      v28 = memcmp(v151, v152, v138) == 0;
LABEL_226:
      v29 = v28;
      goto LABEL_252;
    case 3:
      if (BYTE4(v215[1]) > 9u)
        goto LABEL_307;
      if (BYTE4(v215[1]) != 3)
      {
        v29 = 0;
LABEL_62:
        v44 = *(unint64_t **)&v211;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          v47 = v211;
          if (v211 == 0.0)
            goto LABEL_97;
          v48 = *(void **)(*(_QWORD *)&v211 + 8);
          if (v48)
          {
            *(_QWORD *)(*(_QWORD *)&v211 + 16) = v48;
            operator delete(v48);
          }
          v37 = v47;
          v43 = 0x1080C409938AC02;
          goto LABEL_96;
        }
        goto LABEL_253;
      }
      v139 = *(double **)(*(_QWORD *)&v215[0] + 8);
      v140 = *(double **)(*(_QWORD *)&v215[0] + 16);
      v141 = v140 - v139;
      v142 = *(double **)(*(_QWORD *)&v211 + 8);
      if (v141 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v211 + 16) - (_QWORD)v142) >> 3)
        goto LABEL_250;
      if (v140 == v139)
        goto LABEL_251;
      if (v141 <= 1)
        v143 = 1;
      else
        v143 = v140 - v139;
      if (*v139 != *v142)
        goto LABEL_250;
      v144 = 1;
      do
      {
        v145 = v144;
        if (v143 == v144)
          break;
        v146 = v139[v144];
        v147 = v142[v144++];
      }
      while (v146 == v147);
      v29 = v145 >= v141;
      goto LABEL_252;
    case 4:
      if (BYTE4(v215[1]) > 9u)
        goto LABEL_307;
      if (BYTE4(v215[1]) == 4)
      {
        v112 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v210, (uint64_t *)(*(_QWORD *)&v215[0] + 8), (_QWORD *)(*(_QWORD *)&v211 + 8));
        goto LABEL_220;
      }
      v29 = 0;
LABEL_37:
      v30 = *(unint64_t **)&v211;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_253;
      v33 = v211;
      if (v211 == 0.0)
        goto LABEL_97;
      *(_QWORD *)&__p = *(_QWORD *)&v211 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_83:
      v37 = v33;
      v43 = 0x1020C405E66F15BLL;
LABEL_96:
      MEMORY[0x219A19A08](*(_QWORD *)&v37, v43);
LABEL_97:
      if (v29)
      {
LABEL_254:
        if (!v6)
          goto LABEL_117;
        v160 = 0;
        v161 = 0;
        v162 = 0.0;
        while (1)
        {
          v163 = (unint64_t *)(v205 + 80);
          if ((*(_DWORD *)(v205 + 24) | 2) != 2)
          {
            v165 = *(_QWORD *)(v205 + 32);
            if (v161 >= (*(_QWORD *)(v205 + 40) - v165) >> 3)
            {
              v164 = 0;
              goto LABEL_258;
            }
            v163 = (unint64_t *)(v165 + v160);
          }
          v164 = *v163;
LABEL_258:
          v162 = 1.0 / (double)v164 + v162;
          ++v161;
          v160 += 8;
          if (v6 == v161)
          {
            v166 = 0;
            while ((*(_DWORD *)(v205 + 24) | 2) != 2)
            {
              v176 = *(_QWORD *)(v205 + 32);
              if (v166 < (*(_QWORD *)(v205 + 40) - v176) >> 3)
              {
                v167 = (unint64_t *)(v176 + 8 * v166);
                goto LABEL_265;
              }
              v168 = 0;
LABEL_266:
              v169 = *(_QWORD *)(v207 + 80) + 16 * v166;
              *(_QWORD *)&__p = 0;
              DWORD2(__p) = 0;
              BYTE12(__p) = 0;
              if ((__int128 *)v169 != &__p)
              {
                v170 = *(_QWORD *)v169;
                *(_QWORD *)((char *)&__p + 5) = *(_QWORD *)(v169 + 5);
                *(_QWORD *)&__p = v170;
                v171 = *(unsigned __int8 *)(v169 + 12);
                BYTE12(__p) = v171;
                v23 = v171 > 9;
                v172 = (1 << v171) & 0x33C;
                if (!v23 && v172 != 0)
                {
                  v174 = (unint64_t *)__p;
                  do
                    v175 = __ldaxr(v174);
                  while (__stlxr(v175 + 1, v174));
                }
              }
              v218 = 0;
              v219 = 1;
              v217 = 1.0 / (float)(v162 * (float)v168);
              std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v203 + 32 * v166, (uint64_t *)&__p);
              std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&__p);
              if (++v166 == v6)
                goto LABEL_117;
            }
            v167 = (unint64_t *)(v205 + 80);
LABEL_265:
            v168 = *v167;
            goto LABEL_266;
          }
        }
      }
LABEL_98:
      if (BYTE4(v215[1]) != 5)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v217, (uint64_t)"The class_weights parameter cannot be of type ", 46);
        if ((unint64_t)SBYTE4(v215[1]) > 9)
          v183 = "undefined";
        else
          v183 = off_24D9493B8[SBYTE4(v215[1])];
        v190 = strlen(v183);
        v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)v183, v190);
        v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)".", 1);
        v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)" Class weights must be a dictionary, None or 'auto'", 51);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v193);
        v211 = COERCE_DOUBLE(&__p);
        turi::supervised::get_class_weights_from_options(turi::option_manager const&,std::shared_ptr<turi::ml_metadata> const&)::{lambda(void)#3}::operator()();
      }
      turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)&v200, (const turi::flexible_type *)v215);
      if (v6)
      {
        v58 = 0;
        v59 = v207;
        while ((turi::flex_dict_view::has_key(&v200, (const turi::flexible_type *)(*(_QWORD *)(v59 + 80) + v58)) & 1) != 0)
        {
          v58 += 16;
          if (!--v6)
            goto LABEL_103;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v211);
        v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)"The parameter class_weight does not contain a weight for the ", 61);
        v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"class ", 6);
        v180 = (turi::flexible_type_impl *)(*(_QWORD *)(v59 + 80) + v58);
        v181 = v179;
        switch(*((_BYTE *)v180 + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_309;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_309:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
            goto LABEL_322;
          case 2:
            v189 = *(_QWORD *)v180;
            if (*(char *)(*(_QWORD *)v180 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(v189 + 8), *(_QWORD *)(v189 + 16));
            }
            else
            {
              v194 = *(_OWORD *)(v189 + 8);
              v209.__r_.__value_.__r.__words[2] = *(_QWORD *)(v189 + 24);
              *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v194;
            }
            goto LABEL_322;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v180 + 8));
            goto LABEL_322;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v180 + 8));
            goto LABEL_322;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v180 + 8));
            goto LABEL_322;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(v180, &v209);
            goto LABEL_322;
          case 7:
            memset(&v209, 0, sizeof(v209));
            goto LABEL_322;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_322;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v180 + 8));
LABEL_322:
            if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v195 = &v209;
            else
              v195 = (std::string *)v209.__r_.__value_.__r.__words[0];
            if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v209.__r_.__value_.__r.__words[2]);
            else
              size = v209.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)v195, size);
            if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v209.__r_.__value_.__l.__data_);
            v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)".", 1);
            v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)" Make sure that the types of the keys in the class_weight ", 58);
            v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"dictionary are the same as the type of the target column.", 57);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v199);
            *(_QWORD *)&__p = &v211;
            turi::supervised::get_class_weights_from_options(turi::option_manager const&,std::shared_ptr<turi::ml_metadata> const&)::{lambda(void)#1}::operator()();
          default:
            goto LABEL_283;
        }
        goto LABEL_283;
      }
LABEL_103:
      v60 = *(__int128 **)(*(_QWORD *)&v215[0] + 8);
      v61 = *(uint64_t **)(*(_QWORD *)&v215[0] + 16);
      if (v60 != (__int128 *)v61)
      {
        v62 = 0;
        while (1)
        {
          v63 = *((unsigned __int8 *)v60 + 28);
          if (v63 > 1)
            break;
          v64 = v63 == 1 ? *((double *)v60 + 2) : (double)*((uint64_t *)v60 + 2);
          v65 = v64;
          v66 = v65;
          if (v66 <= 1.0e-20)
            break;
          *(_QWORD *)&__p = 0;
          DWORD2(__p) = 0;
          BYTE12(__p) = 0;
          if (v60 != &__p)
          {
            v67 = *(double *)v60;
            *(_QWORD *)((char *)&__p + 5) = *(_QWORD *)((char *)v60 + 5);
            *(double *)&__p = v67;
            BYTE12(__p) = *((_BYTE *)v60 + 12);
            if (BYTE12(__p) <= 9u && ((1 << SBYTE12(__p)) & 0x33C) != 0)
            {
              v68 = (unint64_t *)__p;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 + 1, v68));
            }
          }
          v218 = 0;
          v219 = 1;
          v217 = v66;
          v70 = v62 + 1;
          std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v203 + 32 * v62, (uint64_t *)&__p);
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&__p);
          v60 += 2;
          v62 = v70;
          if (v60 == (__int128 *)v61)
            goto LABEL_116;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v211);
        v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)"The class_weight parameter for the class ", 41);
        switch(*((_BYTE *)v60 + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_289;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_289:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
            goto LABEL_298;
          case 2:
            v184 = *(double *)v60;
            if (*(char *)(*(_QWORD *)v60 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(*(_QWORD *)&v184 + 8), *(_QWORD *)(*(_QWORD *)&v184 + 16));
            }
            else
            {
              v185 = *(_OWORD *)(*(_QWORD *)&v184 + 8);
              v209.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)&v184 + 24);
              *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v185;
            }
            goto LABEL_298;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v60 + 8));
            goto LABEL_298;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v60 + 8));
            goto LABEL_298;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v60 + 8));
            goto LABEL_298;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v60, &v209);
            goto LABEL_298;
          case 7:
            memset(&v209, 0, sizeof(v209));
            goto LABEL_298;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_298;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v60 + 8));
LABEL_298:
            if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v186 = &v209;
            else
              v186 = (std::string *)v209.__r_.__value_.__r.__words[0];
            if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v187 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
            else
              v187 = v209.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)v186, v187);
            if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v209.__r_.__value_.__l.__data_);
            v188 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)" must be a positive numeric value.", 34);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v188);
            *(_QWORD *)&__p = &v211;
            turi::supervised::get_class_weights_from_options(turi::option_manager const&,std::shared_ptr<turi::ml_metadata> const&)::{lambda(void)#2}::operator()();
          default:
            break;
        }
LABEL_283:
        turi::flexible_type_fail(0);
LABEL_331:
        __break(1u);
        return;
      }
LABEL_116:
      *(_QWORD *)&__p = &v202;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      *(_QWORD *)&__p = &v201;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_117:
      *(uint64_t *)((char *)a3 + 5) = 0;
      *a3 = 0;
      *((_BYTE *)a3 + 12) = 5;
      v71 = operator new();
      *(_QWORD *)v71 = 0;
      *(_QWORD *)(v71 + 8) = 0;
      *(_QWORD *)(v71 + 16) = 0;
      *(_QWORD *)(v71 + 24) = 0;
      *a3 = v71;
      *(_QWORD *)v71 = 1;
      if (*(_QWORD *)v71 != 1)
      {
        v72 = (_QWORD *)operator new();
        v73 = *(uint64_t **)(v71 + 8);
        *v72 = *(_QWORD *)v71;
        v72[2] = 0;
        v72[3] = 0;
        v72[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v72 + 1, v73, *(uint64_t **)(v71 + 16), (uint64_t)(*(_QWORD *)(v71 + 16) - (_QWORD)v73) >> 5);
        *a3 = (uint64_t)v72;
        *v72 = 1;
        do
        {
          v74 = __ldaxr((unint64_t *)v71);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, (unint64_t *)v71));
        if (!v75)
        {
          *(_QWORD *)&__p = v71 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          MEMORY[0x219A19A08](v71, 0x1020C405E66F15BLL);
        }
      }
      v76 = *a3;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v76 + 8));
      *(_OWORD *)(v76 + 8) = v203;
      *(_QWORD *)(v76 + 24) = v204;
      v203 = 0uLL;
      v204 = 0;
      switch(BYTE4(v215[1]))
      {
        case 2:
          v77 = *(unint64_t **)&v215[0];
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (!v79)
          {
            v80 = v215[0];
            if (*(_QWORD *)&v215[0])
            {
              if (*(char *)(*(_QWORD *)&v215[0] + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v215[0] + 8));
              v81 = v80;
              v82 = 0x1012C404EF22A49;
              goto LABEL_163;
            }
          }
          break;
        case 3:
          v94 = *(unint64_t **)&v215[0];
          do
          {
            v95 = __ldaxr(v94);
            v96 = v95 - 1;
          }
          while (__stlxr(v96, v94));
          if (!v96)
          {
            v97 = v215[0];
            if (*(_QWORD *)&v215[0])
            {
              v98 = *(void **)(*(_QWORD *)&v215[0] + 8);
              if (v98)
              {
                *(_QWORD *)(*(_QWORD *)&v215[0] + 16) = v98;
                operator delete(v98);
              }
              v81 = v97;
              v82 = 0x1080C409938AC02;
              goto LABEL_163;
            }
          }
          break;
        case 4:
          v83 = *(unint64_t **)&v215[0];
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            v86 = v215[0];
            if (*(_QWORD *)&v215[0])
            {
              *(_QWORD *)&__p = *(_QWORD *)&v215[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_156;
            }
          }
          break;
        case 5:
          v99 = *(unint64_t **)&v215[0];
          do
          {
            v100 = __ldaxr(v99);
            v101 = v100 - 1;
          }
          while (__stlxr(v101, v99));
          if (!v101)
          {
            v86 = v215[0];
            if (*(_QWORD *)&v215[0])
            {
              *(_QWORD *)&__p = *(_QWORD *)&v215[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_156:
              v81 = v86;
              v82 = 0x1020C405E66F15BLL;
              goto LABEL_163;
            }
          }
          break;
        case 8:
          v102 = *(unint64_t **)&v215[0];
          do
          {
            v103 = __ldaxr(v102);
            v104 = v103 - 1;
          }
          while (__stlxr(v104, v102));
          if (!v104)
          {
            v105 = v215[0];
            if (*(_QWORD *)&v215[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v215[0] + 16));
              v81 = v105;
              v93 = -235920773;
              goto LABEL_162;
            }
          }
          break;
        case 9:
          v87 = *(unint64_t **)&v215[0];
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            v90 = v215[0];
            if (*(_QWORD *)&v215[0])
            {
              v91 = *(void **)(*(_QWORD *)&v215[0] + 48);
              if (v91)
              {
                *(_QWORD *)(*(_QWORD *)&v215[0] + 56) = v91;
                operator delete(v91);
              }
              v92 = *(void **)(*(_QWORD *)&v90 + 24);
              if (v92)
              {
                *(_QWORD *)(*(_QWORD *)&v90 + 32) = v92;
                operator delete(v92);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v90 + 8);
              v81 = v90;
              v93 = 2071181815;
LABEL_162:
              v82 = v93 | 0x1030C4000000000;
LABEL_163:
              MEMORY[0x219A19A08](*(_QWORD *)&v81, v82);
            }
          }
          break;
        default:
          break;
      }
      *(_QWORD *)&__p = &v203;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v106 = v206;
      if (v206)
      {
        v107 = (unint64_t *)&v206->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = v208;
      if (v208)
      {
        v110 = (unint64_t *)&v208->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      return;
    case 5:
      if (BYTE4(v215[1]) > 9u)
        goto LABEL_307;
      if (BYTE4(v215[1]) != 5)
      {
        v29 = 0;
LABEL_78:
        v51 = *(unint64_t **)&v211;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (v53)
          goto LABEL_253;
        v33 = v211;
        if (v211 == 0.0)
          goto LABEL_97;
        *(_QWORD *)&__p = *(_QWORD *)&v211 + 8;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_83;
      }
      v112 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v210, (uint64_t **)(*(_QWORD *)&v215[0] + 8), (uint64_t **)(*(_QWORD *)&v211 + 8));
      goto LABEL_220;
    case 6:
      switch(BYTE4(v215[1]))
      {
        case 0:
          v28 = *(_QWORD *)&v215[0] == (uint64_t)(*(_QWORD *)&v211 << 8) >> 8 && v212 == 0;
          goto LABEL_226;
        case 1:
          v149 = v215[0];
          v148 = (double)v212 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v211 << 8) >> 8);
LABEL_231:
          v29 = vabdd_f64(v149, v148) < 0.0000005;
          goto LABEL_252;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_98;
        case 6:
          v28 = ((*(_QWORD *)&v211 ^ *(_QWORD *)&v215[0]) & 0xFFFFFFFFFFFFFFLL) == 0 && LODWORD(v215[1]) == v212;
          goto LABEL_226;
        default:
          goto LABEL_307;
      }
    case 7:
      if (BYTE4(v215[1]) < 7u || BYTE4(v215[1]) - 8 < 2)
        goto LABEL_98;
      if (BYTE4(v215[1]) != 7)
        goto LABEL_307;
      goto LABEL_254;
    case 8:
      if (BYTE4(v215[1]) >= 8u && BYTE4(v215[1]) != 9)
      {
        if (BYTE4(v215[1]) == 8)
        {
          v112 = turi::image_type::operator==(*(_QWORD *)&v215[0] + 8, *(_QWORD *)&v211 + 8);
LABEL_220:
          v29 = v112;
          goto LABEL_252;
        }
LABEL_307:
        turi::flexible_type_fail(0);
        goto LABEL_331;
      }
      v29 = 0;
LABEL_90:
      v54 = *(unint64_t **)&v211;
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (v56)
        goto LABEL_253;
      v57 = v211;
      if (v211 == 0.0)
        goto LABEL_97;
      boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v211 + 16));
      v37 = v57;
      v38 = -235920773;
      break;
    case 9:
      if (BYTE4(v215[1]) >= 9u)
      {
        if (BYTE4(v215[1]) == 9)
        {
          v113 = v211;
          v114 = v215[0];
          if (*(_QWORD *)&v211 == *(_QWORD *)&v215[0])
            goto LABEL_251;
          v115 = (_QWORD *)(*(_QWORD *)&v215[0] + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v215[0] + 8, *(_QWORD *)&v211 + 8))
          {
LABEL_250:
            v29 = 0;
            goto LABEL_252;
          }
          v117 = *(char **)(*(_QWORD *)&v114 + 24);
          v116 = *(char **)(*(_QWORD *)&v114 + 32);
          v118 = v116 - v117;
          if (v116 == v117)
            goto LABEL_251;
          if (!*v115)
            goto LABEL_251;
          v119 = 1;
          do
          {
            v120 = *(_QWORD *)v117;
            v117 += 8;
            v119 *= v120;
          }
          while (v117 != v116);
          if (!v119)
          {
LABEL_251:
            v29 = 1;
            goto LABEL_252;
          }
          v209.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&__p, v118 >> 3, &v209);
          do
          {
            v121 = (void *)__p;
            if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
            {
              v130 = 0;
              v131 = *(double *)(**(_QWORD **)(*(_QWORD *)&v114 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v114 + 72));
            }
            else
            {
              v122 = 0;
              v123 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
              v124 = *(uint64_t **)(*(_QWORD *)&v114 + 48);
              if (v123 <= 1)
                v123 = 1;
              v125 = (uint64_t *)__p;
              v126 = v123;
              do
              {
                v128 = *v125++;
                v127 = v128;
                v129 = *v124++;
                v122 += v129 * v127;
                --v126;
              }
              while (v126);
              v130 = 0;
              v131 = *(double *)(**(_QWORD **)(*(_QWORD *)&v114 + 8)
                               + 8 * (*(_QWORD *)(*(_QWORD *)&v114 + 72) + v122));
              v132 = *(uint64_t **)(*(_QWORD *)&v113 + 48);
              v133 = (uint64_t *)__p;
              do
              {
                v135 = *v133++;
                v134 = v135;
                v136 = *v132++;
                v130 += v136 * v134;
                --v123;
              }
              while (v123);
            }
            v137 = *(double *)(**(_QWORD **)(*(_QWORD *)&v113 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v113 + 72) + v130));
            v29 = v131 == v137;
            if (v131 != v137)
              goto LABEL_199;
          }
          while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v114 + 8, (uint64_t *)&__p));
          v121 = (void *)__p;
LABEL_199:
          if (v121)
          {
            *((_QWORD *)&__p + 1) = v121;
            operator delete(v121);
          }
LABEL_252:
          switch(v213)
          {
            case 2:
              goto LABEL_52;
            case 3:
              goto LABEL_62;
            case 4:
              goto LABEL_37;
            case 5:
              goto LABEL_78;
            case 8:
              goto LABEL_90;
            case 9:
              goto LABEL_44;
            default:
              goto LABEL_253;
          }
        }
        goto LABEL_307;
      }
      v29 = 0;
LABEL_44:
      v34 = *(unint64_t **)&v211;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_253;
      if (v211 == 0.0)
        goto LABEL_97;
      v37 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v211));
      v38 = 2071181815;
      break;
    default:
      goto LABEL_307;
  }
  v43 = v38 | 0x1030C4000000000;
  goto LABEL_96;
}

void sub_218571C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  char a67;
  void *__p;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  switch(a67)
  {
    case 2:
      v69 = (unint64_t *)a65;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (v71)
        break;
      v72 = a65;
      if (!a65)
        break;
      if (*(char *)(a65 + 31) < 0)
        operator delete(*(void **)(a65 + 8));
      v73 = (_QWORD *)v72;
      v74 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      v82 = (unint64_t *)a65;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (v84)
        break;
      v85 = a65;
      if (!a65)
        break;
      v86 = *(void **)(a65 + 8);
      if (v86)
      {
        *(_QWORD *)(a65 + 16) = v86;
        operator delete(v86);
      }
      v73 = (_QWORD *)v85;
      v74 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      v75 = (unint64_t *)a65;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (v77)
        break;
      v78 = a65;
      if (!a65)
        goto LABEL_39;
      a10 = a65 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
      goto LABEL_32;
    case 5:
      v87 = (unint64_t *)a65;
      do
      {
        v88 = __ldaxr(v87);
        v89 = v88 - 1;
      }
      while (__stlxr(v89, v87));
      if (v89)
        break;
      v78 = a65;
      if (!a65)
        goto LABEL_39;
      a10 = a65 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
LABEL_32:
      v90 = v78;
      v91 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v92 = (unint64_t *)a65;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (v94)
        break;
      v95 = a65;
      if (!a65)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a65 + 16));
      v90 = v95;
      v91 = 0x1030C40F1F0227BLL;
LABEL_38:
      MEMORY[0x219A19A08](v90, v91);
LABEL_39:
      a65 = 0;
      break;
    case 9:
      v79 = (unint64_t *)a65;
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (v81 || !a65)
        break;
      v73 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a65);
      v74 = 0x1030C407B73B9F7;
LABEL_26:
      MEMORY[0x219A19A08](v73, v74);
      break;
    default:
      break;
  }
  a10 = (uint64_t)&a17;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm::predict_single_example(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[3];
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v24[0] = a2;
  v24[1] = a1 + 49;
  if (a1[50])
  {
    v7 = a1[49];
    v26 = *a2;
    v27 = v7;
    v28 = v24;
    v8 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v25);
  }
  else
  {
    v8 = 0.0;
  }
  switch(*a3)
  {
    case 0:
    case 1:
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[47] + 24) + 32) + 80) + 16 * (v8 >= 0.0);
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 12) = 0;
      if (v9 != a4)
      {
        v10 = *(_QWORD *)v9;
        *(_QWORD *)(a4 + 5) = *(_QWORD *)(v9 + 5);
        *(_QWORD *)a4 = v10;
        v11 = *(unsigned __int8 *)(v9 + 12);
        *(_BYTE *)(a4 + 12) = v11;
        switch(v11)
        {
          case 2:
            v12 = *(unint64_t **)a4;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 + 1, v12));
            break;
          case 3:
            v14 = *(unint64_t **)a4;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
            break;
          case 4:
            v16 = *(unint64_t **)a4;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
            break;
          case 5:
            v18 = *(unint64_t **)a4;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 + 1, v18));
            break;
          case 8:
            v20 = *(unint64_t **)a4;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 + 1, v20));
            break;
          case 9:
            v22 = *(unint64_t **)a4;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 + 1, v22));
            break;
          default:
            return;
        }
      }
      break;
    case 2:
      *(_BYTE *)(a4 + 12) = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(_QWORD *)a4 = v8 >= 0.0;
      break;
    case 3:
    case 4:
    case 6:
    case 7:
      turi::supervised::linear_svm::predict_single_example(Eigen::Matrix<double,-1,1,0,-1,1> const&,turi::supervised::prediction_type_enum const&)::$_0::operator()();
    case 5:
      *(_DWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 12) = 1;
      *(double *)a4 = v8;
      break;
    default:
      turi::supervised::linear_svm::predict_single_example(Eigen::Matrix<double,-1,1,0,-1,1> const&,turi::supervised::prediction_type_enum const&)::$_1::operator()();
  }
}

uint64_t turi::supervised::linear_svm::predict_single_example@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double *v5;
  int *v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v4 = a2[3];
  if (v4 < 1)
  {
    v7 = 0.0;
  }
  else
  {
    v5 = (double *)a2[1];
    v6 = (int *)a2[2];
    v7 = 0.0;
    do
    {
      v8 = *v5++;
      v9 = v8;
      v10 = *v6++;
      v7 = v7 + v9 * *(double *)(*(_QWORD *)(result + 392) + 8 * v10);
      --v4;
    }
    while (v4);
  }
  switch(*a3)
  {
    case 0:
    case 1:
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 376) + 24) + 32) + 80) + 16 * (v7 >= 0.0);
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 12) = 0;
      if (v11 != a4)
      {
        v12 = *(_QWORD *)v11;
        *(_QWORD *)(a4 + 5) = *(_QWORD *)(v11 + 5);
        *(_QWORD *)a4 = v12;
        v13 = *(unsigned __int8 *)(v11 + 12);
        *(_BYTE *)(a4 + 12) = v13;
        switch(v13)
        {
          case 2:
            v14 = *(unint64_t **)a4;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
            break;
          case 3:
            v16 = *(unint64_t **)a4;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
            break;
          case 4:
            v18 = *(unint64_t **)a4;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 + 1, v18));
            break;
          case 5:
            v20 = *(unint64_t **)a4;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 + 1, v20));
            break;
          case 8:
            v22 = *(unint64_t **)a4;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 + 1, v22));
            break;
          case 9:
            v24 = *(unint64_t **)a4;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 + 1, v24));
            break;
          default:
            return result;
        }
      }
      break;
    case 2:
      *(_BYTE *)(a4 + 12) = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(_QWORD *)a4 = v7 >= 0.0;
      break;
    case 3:
    case 4:
    case 6:
    case 7:
      turi::supervised::linear_svm::predict_single_example(Eigen::SparseVector<double,0,int> const&,turi::supervised::prediction_type_enum const&)::$_0::operator()();
    case 5:
      *(_DWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 12) = 1;
      *(double *)a4 = v7;
      break;
    default:
      turi::supervised::linear_svm::predict_single_example(Eigen::SparseVector<double,0,int> const&,turi::supervised::prediction_type_enum const&)::$_1::operator()();
  }
  return result;
}

void turi::supervised::linear_svm::classify(uint64_t a1@<X0>, uint64_t a2@<X1>, turi::sframe *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  __int128 v13;
  _BYTE v14[296];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe(a3);
  std::string::basic_string[abi:ne180100]<0>(v11, "class");
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 120))(&v13, a1, a2, v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "class");
  turi::sframe::add_column((uint64_t)a3, &v13, (uint64_t)__p, (uint64_t)v14);
  turi::sframe::operator=((uint64_t)a3, (uint64_t)v14);
  turi::sframe::~sframe((turi::sframe *)v14);
  if (v10 < 0)
    operator delete(__p[0]);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v12 < 0)
    operator delete(v11[0]);
}

void sub_21857278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  turi::sframe *v23;

  turi::sframe::~sframe((turi::sframe *)&a23);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a20 < 0)
    operator delete(a15);
  turi::sframe::~sframe(v23);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm::fast_classify(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, turi::gl_sframe *a4@<X8>)
{
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  _QWORD v12[5];

  turi::gl_sframe::gl_sframe(a4);
  std::string::basic_string[abi:ne180100]<0>(v10, "class");
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 176))(v12, a1, a2, a3, v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "class");
  turi::gl_sframe::add_column((uint64_t)a4, (uint64_t)v12, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v12);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_2185728A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  _QWORD *v22;

  if (a15 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a22);
  if (a21 < 0)
    operator delete(a16);
  *v22 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v22 + 1));
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm::save_impl(turi::supervised::linear_svm *this, turi::oarchive *a2)
{
  turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((const void ***)this + 37, (uint64_t)a2);
  turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (turi::ml_metadata **)this + 47);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (uint64_t)this + 392);
  turi::option_manager::save((turi::supervised::linear_svm *)((char *)this + 224), a2);
}

double turi::supervised::linear_svm::set_coefs(uint64_t a1, __int128 **a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  double result;
  _OWORD *v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  double v19;

  v2 = (_QWORD *)(a1 + 392);
  v4 = *a2;
  v3 = (uint64_t)a2[1];
  if (*(_QWORD *)(a1 + 400) != v3)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 392), v3, 1);
    v3 = *(_QWORD *)(a1 + 400);
  }
  v7 = (_OWORD *)*v2;
  if (v3 >= 0)
    v8 = v3;
  else
    v8 = v3 + 1;
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    v10 = 0;
    v11 = (_OWORD *)*v2;
    v12 = v4;
    do
    {
      v13 = *v12++;
      result = *(double *)&v13;
      *v11++ = v13;
      v10 += 2;
    }
    while (v10 < v9);
  }
  v14 = __OFSUB__(v3, v9);
  v15 = v3 - v9;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    v16 = v8 >> 1;
    v17 = (double *)&v4[v8 >> 1];
    v18 = (double *)&v7[v16];
    do
    {
      v19 = *v17++;
      result = v19;
      *v18++ = v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

turi::iarchive *turi::supervised::linear_svm::load_version(turi::supervised::linear_svm *this, turi::iarchive *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  assert_msg(a3 < 6, (uint64_t)"This model version cannot be loaded. Please re-save your model.", a3, a4, a5, a6, a7, a8, v12);
  if (a3 <= 4)
    turi::supervised::linear_svm::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(a2, (turi::ml_metadata **)this + 47);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 49);
  return turi::option_manager::load((char **)this + 28, a2);
}

uint64_t turi::supervised::linear_svm::get_version(turi::supervised::linear_svm *this)
{
  return 5;
}

void turi::supervised::linear_svm::export_to_coreml(turi::supervised::linear_svm *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  char *v6;
  std::string v7;
  _BYTE v8[8];
  _QWORD *v9;
  std::string v10;
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[6];

  v13[5] = *MEMORY[0x24BDAC8D0];
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(&v10, "model_type", "linear_svm");
  v4 = (*(uint64_t (**)(turi::supervised::linear_svm *))(*(_QWORD *)this + 48))(this);
  std::to_string(&v7, v4);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(v11, "version", (__int128 *)&v7);
  v6 = (char *)(*(uint64_t (**)(turi::supervised::linear_svm *))(*(_QWORD *)this + 16))(this);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(v12, "class", &v6);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v13, "short_description", "Linear SVM Model.");
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v8, &v10, 4);
  for (i = 120; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v10 + i);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  turi::export_linear_svm_as_model_asset((_QWORD *)this + 47, (uint64_t *)this + 49, (uint64_t)v8, a2);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v8, v9);
}

void sub_218572C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, _QWORD *a19, uint64_t a20,char a21)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

const char *turi::supervised::linear_svm::name(turi::supervised::linear_svm *this)
{
  return "classifier_svm";
}

std::string *turi::supervised::linear_svm::uid(turi::supervised::linear_svm *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(&turi::supervised::linear_svm::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/linear_svm.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::supervised::linear_svm::uid(void)::_uid, &dword_217E69000);
  }
  return &turi::supervised::linear_svm::uid(void)::_uid;
}

void sub_218572D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm::set_default_evaluation_metric(turi::supervised::linear_svm *this)
{
  __int128 *v2;
  uint64_t i;
  std::string *__str;
  std::string *v5;
  std::string *v6;
  std::string **p_str;
  char v8;
  __int128 v9;
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  __int128 v14;

  *(_QWORD *)&v14 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v9, "accuracy");
  std::string::basic_string[abi:ne180100]<0>(v10, "confusion_matrix");
  std::string::basic_string[abi:ne180100]<0>(v11, "f1_score");
  std::string::basic_string[abi:ne180100]<0>(v12, "precision");
  std::string::basic_string[abi:ne180100]<0>(v13, "recall");
  __str = 0;
  v5 = 0;
  v6 = 0;
  p_str = &__str;
  v8 = 0;
  __str = (std::string *)operator new(0x78uLL);
  v5 = __str;
  v6 = __str + 5;
  v2 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, &v9, &v14, __str);
  v5 = (std::string *)v2;
  if ((std::string **)((char *)this + 320) != &__str)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 320), __str, v2, 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - (char *)__str) >> 3));
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v13[i + 2]) < 0)
      operator delete((void *)v13[i]);
  }
}

void sub_218572ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  uint64_t v16;

  a13 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 119) < 0)
      operator delete(*(void **)(&a15 + v16 + 96));
    v16 -= 24;
    if (v16 == -120)
      _Unwind_Resume(a1);
  }
}

void turi::supervised::linear_svm::set_default_tracking_metric(turi::supervised::linear_svm *this)
{
  __int128 *v2;
  std::string *__str;
  std::string *v4;
  std::string *v5;
  std::string **p_str;
  char v7;
  void *__p[2];
  char v9;
  __int128 v10;

  *(_QWORD *)&v10 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "accuracy");
  __str = 0;
  v4 = 0;
  v5 = 0;
  p_str = &__str;
  v7 = 0;
  __str = (std::string *)operator new(0x18uLL);
  v4 = __str;
  v5 = __str + 1;
  v2 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v5, (__int128 *)__p, &v10, __str);
  v4 = (std::string *)v2;
  if ((std::string **)((char *)this + 344) != &__str)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 344), __str, v2, 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - (char *)__str) >> 3));
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_218573058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  a13 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2185731F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_svm_scaled_logistic_opt_interface,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D949350;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2185732E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::linear_svm_scaled_logistic_opt_interface *,std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::__shared_ptr_default_delete<turi::supervised::linear_svm_scaled_logistic_opt_interface,turi::supervised::linear_svm_scaled_logistic_opt_interface>,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::linear_svm_scaled_logistic_opt_interface *,std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::__shared_ptr_default_delete<turi::supervised::linear_svm_scaled_logistic_opt_interface,turi::supervised::linear_svm_scaled_logistic_opt_interface>,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<unsigned long,double const&,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  *(_QWORD *)((char *)a1 + 5) = 0;
  *a1 = 0;
  *a1 = *a2;
  turi::flexible_type::flexible_type<double>((uint64_t)(a1 + 2), a3);
  return a1;
}

void sub_218573398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void __cxx_global_var_init_54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_linear_svm_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_2185737A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

turi::supervised::linear_svm_scaled_logistic_opt_interface *turi::supervised::linear_svm_scaled_logistic_opt_interface::linear_svm_scaled_logistic_opt_interface(turi::supervised::linear_svm_scaled_logistic_opt_interface *this, const turi::ml_data *a2, const turi::ml_data *a3, turi::supervised::linear_svm *a4)
{
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  turi::thread_pool *v25;
  turi::thread_pool *instance;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24D949418;
  v8 = (char *)this + 8;
  turi::ml_data::ml_data((turi::supervised::linear_svm_scaled_logistic_opt_interface *)((char *)this + 8));
  turi::ml_data::ml_data((turi::supervised::linear_svm_scaled_logistic_opt_interface *)((char *)this + 200));
  *((_QWORD *)this + 51) = 0;
  *((_BYTE *)this + 416) = 0;
  *((_QWORD *)this + 53) = (char *)this + 432;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = (char *)this + 456;
  *((_QWORD *)this + 59) = (char *)this + 480;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = (char *)this + 504;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 68) = (char *)this + 552;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 74) = (char *)this + 600;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 77) = (char *)this + 624;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 84) = 0;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 83) = (char *)this + 672;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 86) = (char *)this + 696;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_BYTE *)this + 760) = 1;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 49) = &off_24D949220;
  *((_QWORD *)this + 50) = 0;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_QWORD *)this + 105) = 2;
  v36[0] = 0x3F80000000000000;
  v36[1] = 0x3F80000000000001;
  std::map<int,float>::map[abi:ne180100]((uint64_t)this + 848, (int *)v36, 2);
  *((_BYTE *)this + 896) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((_QWORD *)this + 113) = 0x403E000000000000;
  *((_BYTE *)this + 912) = 0;
  turi::ml_data::operator=((uint64_t)v8, (uint64_t)a2);
  if (*((_QWORD *)a3 + 3) != *((_QWORD *)a3 + 2))
    turi::ml_data::operator=((uint64_t)this + 200, (uint64_t)a3);
  turi::supervised::supervised_learning_model_base::operator=((uint64_t)this + 392, (uint64_t)a4);
  v9 = (_QWORD *)((char *)this + 784);
  v11 = (__int128 *)*((_QWORD *)a4 + 49);
  v10 = *((_QWORD *)a4 + 50);
  if (*((_QWORD *)this + 99) != v10)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 98, v10, 1);
    v10 = *((_QWORD *)this + 99);
  }
  v12 = (_OWORD *)*v9;
  if (v10 >= 0)
    v13 = v10;
  else
    v13 = v10 + 1;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = (_OWORD *)*v9;
    v17 = v11;
    do
    {
      v18 = *v17++;
      *v16++ = v18;
      v15 += 2;
    }
    while (v15 < v14);
  }
  v19 = __OFSUB__(v10, v14);
  v20 = v10 - v14;
  if (!((v20 < 0) ^ v19 | (v20 == 0)))
  {
    v21 = v13 >> 1;
    v22 = (uint64_t *)&v11[v13 >> 1];
    v23 = &v12[v21];
    do
    {
      v24 = *v22++;
      *v23++ = v24;
      --v20;
    }
    while (v20);
  }
  v25 = (turi::thread_pool *)std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)this + 100, (uint64_t *)a4 + 51);
  *((_QWORD *)this + 103) = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
  *((_QWORD *)this + 102) = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 4;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v25);
  *((_QWORD *)this + 109) = turi::thread_pool::size(instance);
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  v34 = (uint64_t *)*((_QWORD *)this + 96);
  v35 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  *((_QWORD *)this + 104) = turi::supervised::get_number_of_coefficients(&v34);
  v30 = v35;
  if (v35)
  {
    v31 = (unint64_t *)&v35->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *((_BYTE *)this + 912) = *((_QWORD *)this + 104) <= (unint64_t)(3 * *((_QWORD *)this + 102));
  return this;
}

void sub_218573B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::neural_net::float_scalar *v9;
  turi::ml_data *v10;
  turi::ml_data *v11;
  turi::supervised::linear_svm *v12;
  uint64_t v13;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v9 + 880);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v13, *((_QWORD **)v9 + 107));
  turi::supervised::linear_svm::~linear_svm(v12);
  turi::ml_data::~ml_data(v11);
  turi::ml_data::~ml_data(v10);
  turi::neural_net::float_scalar::~float_scalar(v9);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::~linear_svm_scaled_logistic_opt_interface(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_24D949418;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 880);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 848, *((_QWORD **)this + 107));
  turi::supervised::linear_svm::~linear_svm((turi::supervised::linear_svm_scaled_logistic_opt_interface *)((char *)this + 392));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 376);
  v4 = (void **)((char *)this + 352);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  v4 = (void **)((char *)this + 304);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  v4 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  v4 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  turi::supervised::linear_svm_scaled_logistic_opt_interface::~linear_svm_scaled_logistic_opt_interface(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *turi::supervised::linear_svm_scaled_logistic_opt_interface::set_class_weights(uint64_t *this, const turi::flexible_type *a2)
{
  double *v2;
  uint64_t *v3;
  uint64_t **v4;
  float v5;
  double v6;
  int v7;
  unsigned int *v8;

  v2 = *(double **)(*(_QWORD *)a2 + 8);
  v3 = *(uint64_t **)(*(_QWORD *)a2 + 16);
  if (v2 != (double *)v3)
  {
    v4 = (uint64_t **)(this + 106);
    do
    {
      v5 = v2[2];
      v6 = *v2;
      v2 += 4;
      v7 = LODWORD(v6);
      v8 = (unsigned int *)&v7;
      this = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v4, &v7, (uint64_t)&std::piecewise_construct, &v8);
      *((float *)this + 8) = v5;
    }
    while (v2 != (double *)v3);
  }
  return this;
}

uint64_t turi::supervised::linear_svm_scaled_logistic_opt_interface::num_examples(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  return *((_QWORD *)this + 103);
}

uint64_t turi::supervised::linear_svm_scaled_logistic_opt_interface::num_variables(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  return *((_QWORD *)this + 104);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::get_status_header(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  turi::supervised::make_progress_header((__int128 **)(a1 + 392), a2, *(_QWORD *)(a1 + 224) != *(_QWORD *)(a1 + 216), a3);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::get_status(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  void *v7[2];

  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v7, a2);
  if (*(_BYTE *)(a1 + 896))
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 880) + 16))(*(_QWORD *)(a1 + 880), v7);
  turi::supervised::linear_svm::set_coefs(a1 + 392, (__int128 **)v7);
  turi::supervised::make_progress_row_string(a1 + 392, a1 + 8, a1 + 200, a3, a4);
  free(v7[0]);
}

void sub_218573E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::linear_svm_scaled_logistic_opt_interface::rescale_solution(uint64_t result)
{
  if (*(_BYTE *)(result + 896))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 880) + 16))(*(_QWORD *)(result + 880));
  return result;
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::init_feature_rescaling(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  uint64_t v2;

  *((_BYTE *)this + 896) = 1;
  v2 = operator new();
  turi::supervised::l2_rescaling::l2_rescaling(v2, (uint64_t **)this + 1, 1);
  std::shared_ptr<turi::supervised::l2_rescaling>::reset[abi:ne180100]<turi::supervised::l2_rescaling,void>((_QWORD *)this + 110, v2);
}

void sub_218573EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40F38A5E8DLL);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::get_validation_accuracy(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  const std::string *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::runtime_error *exception;
  std::string *v46;
  __int128 v47;
  uint64_t v48;
  char *v49[3];
  unsigned int *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[3];
  _QWORD v55[3];
  void **v56;
  std::__shared_weak_count *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *__p;
  void *v63;
  uint64_t v64;
  std::string v65;
  std::string v66;
  size_t __idx;
  uint64_t v68;
  char v69;
  void *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v70, "train");
  turi::supervised::supervised_learning_model_base::evaluate((__darwin_time_t)this + 392, (uint64_t)this + 200, (unsigned __int8 *)&v70, 0, (uint64_t)&v48);
  if (v72 < 0)
    operator delete(v70);
  std::string::basic_string[abi:ne180100]<0>(&v70, "accuracy");
  v2 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v48, (const void **)&v70);
  if (v72 < 0)
    operator delete(v70);
  if (v49 == (char **)v2)
    turi::supervised::linear_svm_scaled_logistic_opt_interface::get_validation_accuracy(void)::$_0::operator()();
  v56 = (void **)&v71;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(v2 + 56), *(_DWORD *)(v2 + 56) ^ (*(int *)(v2 + 56) >> 31), (std::string **)&v56, v2 + 64);
  LODWORD(v70) = *(_DWORD *)(v2 + 56) ^ (*(int *)(v2 + 56) >> 31);
  turi::variant_converter<turi::flexible_type,void>::get((int *)&v70, (uint64_t)&v68);
  switch(v69)
  {
    case 0:
    case 1:
    case 7:
      goto LABEL_75;
    case 2:
      v6 = v68;
      __idx = 0;
      v7 = (char *)(v68 + 8);
      if (*(char *)(v68 + 31) < 0)
        v7 = *(char **)(v68 + 8);
      v8 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, v7);
      std::stod(v8, &__idx);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (*(char *)(v6 + 31) < 0)
        v9 = *(_QWORD *)(v6 + 16);
      else
        v9 = *(unsigned __int8 *)(v6 + 31);
      if (__idx != v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v46 = std::string::append(&v65, " cannot be interpreted as a float");
        v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v66);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_32;
    case 3:
      v63 = 0;
      v64 = 0;
      __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v68 + 8), *(_QWORD *)(v68 + 16), (uint64_t)(*(_QWORD *)(v68 + 16) - *(_QWORD *)(v68 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      goto LABEL_32;
    case 4:
      memset(v55, 0, sizeof(v55));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v55, *(uint64_t **)(v68 + 8), *(uint64_t **)(v68 + 16), (uint64_t)(*(_QWORD *)(v68 + 16) - *(_QWORD *)(v68 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      goto LABEL_32;
    case 5:
      memset(v54, 0, sizeof(v54));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v54, *(uint64_t **)(v68 + 8), *(uint64_t **)(v68 + 16), (uint64_t)(*(_QWORD *)(v68 + 16) - *(_QWORD *)(v68 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      goto LABEL_32;
    case 6:
      goto LABEL_32;
    case 8:
      v10 = v68;
      v11 = *(unsigned int **)(v68 + 16);
      v49[2] = *(char **)(v68 + 8);
      v50 = v11;
      if (v11)
      {
        v12 = v11 + 2;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = *(_OWORD *)(v10 + 24);
      v15 = *(_OWORD *)(v10 + 40);
      v53 = *(_OWORD *)(v10 + 56);
      v52 = v15;
      v51 = v14;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v50);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v56, v68 + 8);
      turi::flexible_type_fail(0);
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      v3 = v57;
      if (v57)
      {
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
LABEL_32:
      switch(v69)
      {
        case 2:
          v16 = (unint64_t *)v68;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            v19 = v68;
            if (!v68)
              goto LABEL_74;
            if (*(char *)(v68 + 31) < 0)
              operator delete(*(void **)(v68 + 8));
            v20 = v19;
            v21 = 0x1012C404EF22A49;
            goto LABEL_73;
          }
          break;
        case 3:
          v33 = (unint64_t *)v68;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v36 = v68;
            if (!v68)
              goto LABEL_74;
            v37 = *(void **)(v68 + 8);
            if (v37)
            {
              *(_QWORD *)(v68 + 16) = v37;
              operator delete(v37);
            }
            v20 = v36;
            v21 = 0x1080C409938AC02;
            goto LABEL_73;
          }
          break;
        case 4:
          v22 = (unint64_t *)v68;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            v25 = v68;
            if (!v68)
              goto LABEL_74;
            v56 = (void **)(v68 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v56);
            goto LABEL_66;
          }
          break;
        case 5:
          v38 = (unint64_t *)v68;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v25 = v68;
            if (!v68)
              goto LABEL_74;
            v56 = (void **)(v68 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v56);
LABEL_66:
            v20 = v25;
            v21 = 0x1020C405E66F15BLL;
            goto LABEL_73;
          }
          break;
        case 8:
          v41 = (unint64_t *)v68;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            v44 = v68;
            if (!v68)
              goto LABEL_74;
            boost::detail::shared_count::~shared_count((unsigned int **)(v68 + 16));
            v20 = v44;
            v32 = -235920773;
            goto LABEL_72;
          }
          break;
        case 9:
          v26 = (unint64_t *)v68;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            v29 = v68;
            if (v68)
            {
              v30 = *(void **)(v68 + 48);
              if (v30)
              {
                *(_QWORD *)(v68 + 56) = v30;
                operator delete(v30);
              }
              v31 = *(void **)(v29 + 24);
              if (v31)
              {
                *(_QWORD *)(v29 + 32) = v31;
                operator delete(v31);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
              v20 = v29;
              v32 = 2071181815;
LABEL_72:
              v21 = v32 | 0x1030C4000000000;
LABEL_73:
              MEMORY[0x219A19A08](v20, v21);
            }
LABEL_74:
            v68 = 0;
          }
          break;
        default:
          break;
      }
LABEL_75:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v70);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v48, v49[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_2185744C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  if (*(char *)(v12 - 169) < 0)
    operator delete(*(void **)(v12 - 192));
  if (*(char *)(v12 - 193) < 0)
  {
    operator delete(*(void **)(v12 - 216));
    if ((v11 & 1) == 0)
    {
LABEL_8:
      switch(*(_BYTE *)(v12 - 140))
      {
        case 2:
          v14 = *(unint64_t **)(v12 - 152);
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (v16)
            goto LABEL_46;
          v17 = *(_QWORD *)(v12 - 152);
          if (!v17)
            goto LABEL_46;
          if (*(char *)(v17 + 31) < 0)
            operator delete(*(void **)(v17 + 8));
          v18 = (_QWORD *)v17;
          v19 = 0x1012C404EF22A49;
          break;
        case 3:
          v28 = *(unint64_t **)(v12 - 152);
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (v30)
            goto LABEL_46;
          v31 = *(_QWORD **)(v12 - 152);
          if (!v31)
            goto LABEL_46;
          v32 = (void *)v31[1];
          if (v32)
          {
            v31[2] = v32;
            operator delete(v32);
          }
          v18 = v31;
          v19 = 0x1080C409938AC02;
          break;
        case 4:
          v20 = *(unint64_t **)(v12 - 152);
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (v22)
            goto LABEL_46;
          v23 = *(_QWORD **)(v12 - 152);
          if (!v23)
            goto LABEL_46;
          *(_QWORD *)(v12 - 216) = v23 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
          goto LABEL_38;
        case 5:
          v33 = *(unint64_t **)(v12 - 152);
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (v35)
            goto LABEL_46;
          v23 = *(_QWORD **)(v12 - 152);
          if (!v23)
            goto LABEL_46;
          *(_QWORD *)(v12 - 216) = v23 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
LABEL_38:
          v18 = v23;
          v19 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v36 = *(unint64_t **)(v12 - 152);
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(_QWORD *)(v12 - 152);
            if (v39)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v39 + 16));
              MEMORY[0x219A19A08](v39, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v12 - 152) = 0;
          }
          goto LABEL_46;
        case 9:
          v24 = *(unint64_t **)(v12 - 152);
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (v26)
            goto LABEL_46;
          v27 = *(_QWORD **)(v12 - 152);
          if (!v27)
            goto LABEL_46;
          v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v27);
          v19 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_46;
      }
      MEMORY[0x219A19A08](v18, v19);
LABEL_46:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v12 - 136));
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a9, a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v11)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v10);
  goto LABEL_8;
}

void sub_2185747A0()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  JUMPOUT(0x218574798);
}

void sub_2185747B8()
{
  JUMPOUT(0x218574798);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::get_training_accuracy(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  const std::string *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::runtime_error *exception;
  std::string *v46;
  __int128 v47;
  uint64_t v48;
  char *v49[3];
  unsigned int *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[3];
  _QWORD v55[3];
  void **v56;
  std::__shared_weak_count *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *__p;
  void *v63;
  uint64_t v64;
  std::string v65;
  std::string v66;
  size_t __idx;
  uint64_t v68;
  char v69;
  void *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v70, "train");
  turi::supervised::supervised_learning_model_base::evaluate((__darwin_time_t)this + 392, (uint64_t)this + 8, (unsigned __int8 *)&v70, 0, (uint64_t)&v48);
  if (v72 < 0)
    operator delete(v70);
  std::string::basic_string[abi:ne180100]<0>(&v70, "accuracy");
  v2 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v48, (const void **)&v70);
  if (v72 < 0)
    operator delete(v70);
  if (v49 == (char **)v2)
    turi::supervised::linear_svm_scaled_logistic_opt_interface::get_training_accuracy(void)::$_0::operator()();
  v56 = (void **)&v71;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(v2 + 56), *(_DWORD *)(v2 + 56) ^ (*(int *)(v2 + 56) >> 31), (std::string **)&v56, v2 + 64);
  LODWORD(v70) = *(_DWORD *)(v2 + 56) ^ (*(int *)(v2 + 56) >> 31);
  turi::variant_converter<turi::flexible_type,void>::get((int *)&v70, (uint64_t)&v68);
  switch(v69)
  {
    case 0:
    case 1:
    case 7:
      goto LABEL_75;
    case 2:
      v6 = v68;
      __idx = 0;
      v7 = (char *)(v68 + 8);
      if (*(char *)(v68 + 31) < 0)
        v7 = *(char **)(v68 + 8);
      v8 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, v7);
      std::stod(v8, &__idx);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (*(char *)(v6 + 31) < 0)
        v9 = *(_QWORD *)(v6 + 16);
      else
        v9 = *(unsigned __int8 *)(v6 + 31);
      if (__idx != v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v46 = std::string::append(&v65, " cannot be interpreted as a float");
        v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v66);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_32;
    case 3:
      v63 = 0;
      v64 = 0;
      __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v68 + 8), *(_QWORD *)(v68 + 16), (uint64_t)(*(_QWORD *)(v68 + 16) - *(_QWORD *)(v68 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      goto LABEL_32;
    case 4:
      memset(v55, 0, sizeof(v55));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v55, *(uint64_t **)(v68 + 8), *(uint64_t **)(v68 + 16), (uint64_t)(*(_QWORD *)(v68 + 16) - *(_QWORD *)(v68 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      goto LABEL_32;
    case 5:
      memset(v54, 0, sizeof(v54));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v54, *(uint64_t **)(v68 + 8), *(uint64_t **)(v68 + 16), (uint64_t)(*(_QWORD *)(v68 + 16) - *(_QWORD *)(v68 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      goto LABEL_32;
    case 6:
      goto LABEL_32;
    case 8:
      v10 = v68;
      v11 = *(unsigned int **)(v68 + 16);
      v49[2] = *(char **)(v68 + 8);
      v50 = v11;
      if (v11)
      {
        v12 = v11 + 2;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = *(_OWORD *)(v10 + 24);
      v15 = *(_OWORD *)(v10 + 40);
      v53 = *(_OWORD *)(v10 + 56);
      v52 = v15;
      v51 = v14;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v50);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v56, v68 + 8);
      turi::flexible_type_fail(0);
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      v3 = v57;
      if (v57)
      {
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
LABEL_32:
      switch(v69)
      {
        case 2:
          v16 = (unint64_t *)v68;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            v19 = v68;
            if (!v68)
              goto LABEL_74;
            if (*(char *)(v68 + 31) < 0)
              operator delete(*(void **)(v68 + 8));
            v20 = v19;
            v21 = 0x1012C404EF22A49;
            goto LABEL_73;
          }
          break;
        case 3:
          v33 = (unint64_t *)v68;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v36 = v68;
            if (!v68)
              goto LABEL_74;
            v37 = *(void **)(v68 + 8);
            if (v37)
            {
              *(_QWORD *)(v68 + 16) = v37;
              operator delete(v37);
            }
            v20 = v36;
            v21 = 0x1080C409938AC02;
            goto LABEL_73;
          }
          break;
        case 4:
          v22 = (unint64_t *)v68;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            v25 = v68;
            if (!v68)
              goto LABEL_74;
            v56 = (void **)(v68 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v56);
            goto LABEL_66;
          }
          break;
        case 5:
          v38 = (unint64_t *)v68;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v25 = v68;
            if (!v68)
              goto LABEL_74;
            v56 = (void **)(v68 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v56);
LABEL_66:
            v20 = v25;
            v21 = 0x1020C405E66F15BLL;
            goto LABEL_73;
          }
          break;
        case 8:
          v41 = (unint64_t *)v68;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            v44 = v68;
            if (!v68)
              goto LABEL_74;
            boost::detail::shared_count::~shared_count((unsigned int **)(v68 + 16));
            v20 = v44;
            v32 = -235920773;
            goto LABEL_72;
          }
          break;
        case 9:
          v26 = (unint64_t *)v68;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            v29 = v68;
            if (v68)
            {
              v30 = *(void **)(v68 + 48);
              if (v30)
              {
                *(_QWORD *)(v68 + 56) = v30;
                operator delete(v30);
              }
              v31 = *(void **)(v29 + 24);
              if (v31)
              {
                *(_QWORD *)(v29 + 32) = v31;
                operator delete(v31);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
              v20 = v29;
              v32 = 2071181815;
LABEL_72:
              v21 = v32 | 0x1030C4000000000;
LABEL_73:
              MEMORY[0x219A19A08](v20, v21);
            }
LABEL_74:
            v68 = 0;
          }
          break;
        default:
          break;
      }
LABEL_75:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v70);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v48, v49[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_218574DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  if (*(char *)(v12 - 169) < 0)
    operator delete(*(void **)(v12 - 192));
  if (*(char *)(v12 - 193) < 0)
  {
    operator delete(*(void **)(v12 - 216));
    if ((v11 & 1) == 0)
    {
LABEL_8:
      switch(*(_BYTE *)(v12 - 140))
      {
        case 2:
          v14 = *(unint64_t **)(v12 - 152);
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (v16)
            goto LABEL_46;
          v17 = *(_QWORD *)(v12 - 152);
          if (!v17)
            goto LABEL_46;
          if (*(char *)(v17 + 31) < 0)
            operator delete(*(void **)(v17 + 8));
          v18 = (_QWORD *)v17;
          v19 = 0x1012C404EF22A49;
          break;
        case 3:
          v28 = *(unint64_t **)(v12 - 152);
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (v30)
            goto LABEL_46;
          v31 = *(_QWORD **)(v12 - 152);
          if (!v31)
            goto LABEL_46;
          v32 = (void *)v31[1];
          if (v32)
          {
            v31[2] = v32;
            operator delete(v32);
          }
          v18 = v31;
          v19 = 0x1080C409938AC02;
          break;
        case 4:
          v20 = *(unint64_t **)(v12 - 152);
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (v22)
            goto LABEL_46;
          v23 = *(_QWORD **)(v12 - 152);
          if (!v23)
            goto LABEL_46;
          *(_QWORD *)(v12 - 216) = v23 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
          goto LABEL_38;
        case 5:
          v33 = *(unint64_t **)(v12 - 152);
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (v35)
            goto LABEL_46;
          v23 = *(_QWORD **)(v12 - 152);
          if (!v23)
            goto LABEL_46;
          *(_QWORD *)(v12 - 216) = v23 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
LABEL_38:
          v18 = v23;
          v19 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v36 = *(unint64_t **)(v12 - 152);
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(_QWORD *)(v12 - 152);
            if (v39)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v39 + 16));
              MEMORY[0x219A19A08](v39, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v12 - 152) = 0;
          }
          goto LABEL_46;
        case 9:
          v24 = *(unint64_t **)(v12 - 152);
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (v26)
            goto LABEL_46;
          v27 = *(_QWORD **)(v12 - 152);
          if (!v27)
            goto LABEL_46;
          v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v27);
          v19 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_46;
      }
      MEMORY[0x219A19A08](v18, v19);
LABEL_46:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v12 - 136));
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a9, a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v11)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v10);
  goto LABEL_8;
}

void sub_21857507C()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  JUMPOUT(0x218575074);
}

void sub_218575094()
{
  JUMPOUT(0x218575074);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(uint64_t a1, void **a2, float64x2_t **a3, double *a4)
{
  unint64_t v8;
  unint64_t v9;
  void ***v10;
  void ***v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t *v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *f64;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  float64x2_t *v35;
  float64x2_t *v36;
  float64x2_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  double *v42;
  double v43;
  void *v44[2];
  _QWORD v45[3];
  void *__p[3];
  void **v47[3];
  void ***v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 872);
  v47[0] = 0;
  std::vector<double>::vector(__p, v8, v47);
  v9 = *(_QWORD *)(a1 + 872);
  v47[0] = *(void ***)(a1 + 832);
  v47[1] = (void **)1;
  v47[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)v44, (uint64_t *)v47);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v45, v9, (uint64_t)v44);
  free(v44[0]);
  if (*(_BYTE *)(a1 + 912))
  {
    v10 = (void ***)operator new(0x28uLL);
    *v10 = (void **)&off_24D949490;
  }
  else
  {
    v10 = (void ***)operator new(0x28uLL);
    *v10 = (void **)&off_24D949510;
  }
  v10[1] = (void **)a1;
  v10[2] = a2;
  v10[3] = __p;
  v10[4] = (void **)v45;
  v48 = v10;
  turi::in_parallel((turi::thread_pool *)v47);
  v11 = v48;
  if (v48 == v47)
  {
    v12 = 4;
    v11 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_9;
    v12 = 5;
  }
  ((void (*)(void))(*v11)[v12])();
LABEL_9:
  *a4 = *(double *)__p[0];
  v14 = *(float64x2_t **)v45[0];
  v13 = *(_QWORD *)(v45[0] + 8);
  if (a3[1] != (float64x2_t *)v13)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v13, 1);
    v13 = (uint64_t)a3[1];
  }
  v15 = *a3;
  if (v13 >= 0)
    v16 = v13;
  else
    v16 = v13 + 1;
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (v13 >= 2)
  {
    v18 = 0;
    v19 = *a3;
    v20 = v14;
    do
    {
      v21 = *v20++;
      *v19++ = v21;
      v18 += 2;
    }
    while (v18 < v17);
  }
  v22 = __OFSUB__(v13, v17);
  v23 = v13 - v17;
  if (!((v23 < 0) ^ v22 | (v23 == 0)))
  {
    v24 = v16 >> 1;
    v25 = (uint64_t *)&v14[v16 >> 1];
    f64 = (_QWORD *)v15[v24].f64;
    do
    {
      v27 = *v25++;
      *f64++ = v27;
      --v23;
    }
    while (v23);
  }
  if (*(_QWORD *)(a1 + 872) >= 2uLL)
  {
    v28 = 1;
    do
    {
      *a4 = *((double *)__p[0] + v28) + *a4;
      v29 = *(_QWORD *)(v45[0] + 16 * v28);
      v30 = *a3;
      v31 = (uint64_t)a3[1];
      if (v31 >= 0)
        v32 = (uint64_t)a3[1];
      else
        v32 = v31 + 1;
      v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
      if (v31 >= 2)
      {
        v34 = 0;
        v35 = *a3;
        v36 = *(float64x2_t **)(v45[0] + 16 * v28);
        do
        {
          v37 = *v36++;
          *v35 = vaddq_f64(v37, *v35);
          ++v35;
          v34 += 2;
        }
        while (v34 < v33);
      }
      v38 = v31 <= v33;
      v39 = v31 - v33;
      if (!v38)
      {
        v40 = v32 >> 1;
        v41 = (double *)(v29 + 16 * v40);
        v42 = v30[v40].f64;
        do
        {
          v43 = *v41++;
          *v42 = v43 + *v42;
          ++v42;
          --v39;
        }
        while (v39);
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 872));
  }
  v47[0] = (void **)v45;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100](v47);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_218575350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,char **a21)
{
  char **v21;
  char **v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))&(*v23)[8 * v24])();
LABEL_6:
  a18 = &a12;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_218575578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::map<int,float>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_hint_unique_key_args<int,std::pair<int const,float> const&>((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_218575670(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_hint_unique_key_args<int,std::pair<int const,float> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D949490;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D949490;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  int64_t v17;
  float64x2_t *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  float64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  float64x2_t *v42;
  float64_t v43;
  unint64_t *v45;
  float64_t v46;
  float64_t v47;
  float64x2_t *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  long double v65;
  uint64_t *v66;
  double v67;
  double v68;
  float64x2_t **v69;
  float64x2_t *v70;
  float64x2_t *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  double *f64;
  double *v83;
  double v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::bad_alloc *exception;
  std::bad_alloc *v91;
  uint64_t **v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  _BYTE v95[128];
  uint64_t v96;
  unsigned __int8 v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  int v108;
  float64x2_t *v109;
  uint64_t v110;
  _QWORD v111[3];
  unsigned int *v112[7];

  v3 = a1;
  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  v109 = 0;
  v110 = 0;
  v7 = *(_QWORD *)(v6 + 832);
  if (v7)
  {
    if (v7 >> 61 || (v8 = (float64x2_t *)malloc_type_malloc(8 * v7, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v91 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v91, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v109 = v8;
  }
  v110 = v7;
  v108 = 0;
  turi::ml_data::get_iterator((turi::ml_data *)(v6 + 8), v4, v5, (uint64_t)v95);
  if (v101 != v100)
  {
    v92 = (uint64_t **)(v6 + 848);
    do
    {
      v9 = v6;
      v10 = v4;
      v11 = v3;
      v13 = v103;
      v12 = v104;
      if (v104)
      {
        p_shared_owners = (unint64_t *)&v104->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v93 = v105;
      v94 = v12;
      v16 = v107;
      v18 = v109;
      v17 = v110;
      if (v110 >= 0)
        v19 = v110;
      else
        v19 = v110 + 1;
      v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if (v110 >= 2)
      {
        v21 = 2;
        if (v20 > 2)
          v21 = v19 & 0xFFFFFFFFFFFFFFFELL;
        bzero(v109, ((8 * v21 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      if (v20 < v17)
        bzero(&v18[v19 >> 1], 8 * v17 - 16 * (v19 >> 1));
      v3 = v11;
      v4 = v10;
      v6 = v9;
      if (v16)
      {
        v22 = *(_QWORD *)(v13 + 56);
        if (v22)
        {
          v23 = 0;
          v24 = 0;
          v25 = (unint64_t *)(*(_QWORD *)(v13 + 96) + 8 * v93 + 8 * (*(_BYTE *)(v13 + 18) == 0));
          v26 = *(_QWORD *)(v13 + 72);
          v27 = v109;
          do
          {
            v28 = *(_QWORD *)(v26 + 16 * v23);
            v29 = *(_QWORD *)(v28 + 64);
            switch(*(_DWORD *)(v28 + 24))
            {
              case 0:
                if (v29)
                  *(_QWORD *)&v27->f64[v24] = *v25;
                ++v25;
                goto LABEL_51;
              case 1:
                v38 = *v25++;
                v37 = v38;
                --v24;
                if (v38 < v29 && v37 != 0)
                  v27->f64[v37 + v24] = 1.0;
                goto LABEL_51;
              case 2:
                v30 = *(_QWORD *)(v28 + 72);
                if (!v30)
                  goto LABEL_51;
                v31 = 0;
                v32 = 0;
                v33 = (char *)&v109->f64[v24];
                do
                {
                  if (v32 < v29)
                    *(_QWORD *)&v33[8 * v32] = v25[v32];
                  ++v32;
                  v31 -= 8;
                }
                while (v30 != v32);
                break;
              case 3:
                v41 = *v25++;
                v40 = v41;
                --v24;
                if (v41)
                {
                  v42 = v109;
                  do
                  {
                    v43 = *(double *)v25;
                    if (*v25 < v29 && *(_QWORD *)&v43 != 0)
                      v42->f64[*(_QWORD *)&v43 + v24] = 1.0;
                    ++v25;
                    --v40;
                  }
                  while (v40);
                }
                goto LABEL_51;
              case 4:
                v47 = *(double *)v25;
                v45 = v25 + 1;
                v46 = v47;
                if (v47 == 0.0)
                {
                  v49 = v45;
                }
                else
                {
                  v48 = v109;
                  v49 = v45;
                  do
                  {
                    v51 = *v49;
                    v49 += 2;
                    v50 = v51;
                    if (v51 < v29)
                      *(_QWORD *)&v48->f64[v50 + v24] = v45[1];
                    v45 = v49;
                    --*(_QWORD *)&v46;
                  }
                  while (v46 != 0.0);
                }
                v24 += v29;
                v25 = v49;
                goto LABEL_52;
              case 7:
                v34 = *(_QWORD *)(v28 + 72);
                if (!v34)
                  goto LABEL_51;
                v31 = 0;
                v35 = 0;
                v36 = (char *)&v109->f64[v24];
                do
                {
                  if (v35 < v29)
                    *(_QWORD *)&v36[8 * v35] = v25[v35];
                  ++v35;
                  v31 -= 8;
                }
                while (v34 != v35);
                break;
              default:
                goto LABEL_52;
            }
            v25 = (unint64_t *)((char *)v25 - v31);
LABEL_51:
            v24 += v29;
LABEL_52:
            ++v23;
          }
          while (v23 != v22);
        }
      }
      if (v94)
      {
        v52 = (unint64_t *)&v94->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v109->f64[*(_QWORD *)(v9 + 832) - 1] = 1.0;
      if (*(_BYTE *)(v9 + 896))
        (*(void (**)(_QWORD, float64x2_t **))(**(_QWORD **)(v9 + 880) + 16))(*(_QWORD *)(v9 + 880), &v109);
      if (*(_BYTE *)(v103 + 16))
        v54 = *(_BYTE *)(v103 + 17) == 0;
      else
        v54 = 1;
      if (v54)
      {
        LODWORD(v55) = 0;
      }
      else
      {
        v56 = (_QWORD *)(v103 + 24);
        if (!*(_BYTE *)(v103 + 18))
          v56 = (_QWORD *)(*(_QWORD *)(v103 + 96) + 8 * v105);
        v55 = *(_QWORD *)(*(_QWORD *)(v103 + 96) + 8 * v105 + 8 * *v56 - 8);
      }
      v108 = v55;
      v57 = *(double *)(v6 + 904);
      v58 = *(_QWORD *)(v3 + 16);
      v111[0] = &v109;
      v111[1] = v58;
      v59 = 0.0;
      v60 = 0.0;
      if (*(_QWORD *)(v58 + 8))
      {
        v112[1] = (unsigned int *)v109;
        v112[3] = *(unsigned int **)v58;
        v112[5] = (unsigned int *)v111;
        v60 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v112);
      }
      v61 = (double)(2 * (int)v55) + -1.0;
      v62 = v61 * v60 + -1.0;
      v63 = -(v57 * v62);
      v64 = exp(-(v62 * -v57));
      if (v63 >= -100.0)
      {
        if (v63 <= 50.0)
        {
          v65 = exp(v63);
          v59 = log1p(v65);
        }
        else
        {
          v59 = v63;
        }
      }
      v112[0] = (unsigned int *)&v108;
      *(double *)(**(_QWORD **)(v3 + 24) + 8 * v10) = v59
                                                    * *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v92, &v108, (uint64_t)&std::piecewise_construct, v112)+ 8)/ *(double *)(v6 + 904)+ *(double *)(**(_QWORD **)(v3 + 24) + 8 * v10);
      v112[0] = (unsigned int *)&v108;
      v66 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v92, &v108, (uint64_t)&std::piecewise_construct, v112);
      v67 = -1.0 / (v64 + 1.0);
      v68 = v61 * *((float *)v66 + 8);
      v69 = (float64x2_t **)(**(_QWORD **)(v3 + 32) + 16 * v10);
      v70 = v109;
      v71 = *v69;
      v72 = (uint64_t)v69[1];
      if (v72 >= 0)
        v73 = (uint64_t)v69[1];
      else
        v73 = v72 + 1;
      v74 = v73 & 0xFFFFFFFFFFFFFFFELL;
      if (v72 >= 2)
      {
        v75 = 0;
        v76 = v71;
        v77 = v109;
        do
        {
          v78 = *v77++;
          *v76 = vaddq_f64(*v76, vmulq_n_f64(vmulq_n_f64(v78, v68), v67));
          ++v76;
          v75 += 2;
        }
        while (v75 < v74);
      }
      v79 = v72 <= v74;
      v80 = v72 - v74;
      if (!v79)
      {
        v81 = v73 >> 1;
        f64 = v70[v81].f64;
        v83 = v71[v81].f64;
        do
        {
          v84 = *f64++;
          *v83 = *v83 + v67 * (v68 * v84);
          ++v83;
          --v80;
        }
        while (v80);
      }
      if (v107 | v97)
      {
        v85 = (uint64_t *)(*(_QWORD *)(v103 + 96) + 8 * v105);
        if (v98)
          v85 = &v99;
        v105 += *v85;
      }
      v86 = v101 + 1;
      v87 = v100;
      v88 = ++v101 - v96 * v102;
      v106 = v88;
      if (v88 == v96 && v86 != v100)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v95);
        v87 = v100;
        v86 = v101;
      }
    }
    while (v86 != v87);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v95);
  free(v109);
}

void sub_218575E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 - 232));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D949510;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D949510;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 iterator;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  double v48;
  double v49;
  double *v50;
  int *v51;
  double v52;
  double v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  long double v60;
  double v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD **v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unsigned int *v76;
  char v77;
  uint64_t v78;
  double v79;
  char *v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  _BYTE v87[128];
  uint64_t v88;
  unsigned __int8 v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  int v100;
  char v101[8];
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  unsigned int *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 832);
  v101[0] = 0;
  v102 = 0u;
  v103 = 0u;
  v104 = v7;
  v100 = 0;
  iterator = turi::ml_data::get_iterator((turi::ml_data *)(v6 + 8), v4, v5, (uint64_t)v87);
  if (v93 != v92)
  {
    v72 = v4;
    v73 = (_QWORD **)a1;
    v71 = v6;
    v70 = (uint64_t **)(v6 + 848);
    do
    {
      v75 = v95;
      v9 = v96;
      if (v96)
      {
        p_shared_owners = (unint64_t *)&v96->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v74 = v9;
      *(_QWORD *)&v103 = 0;
      if (v99)
      {
        v12 = *(_QWORD *)(v75 + 56);
        if (v12)
        {
          v13 = 0;
          v14 = 0;
          v15 = (uint64_t *)(*(_QWORD *)(v75 + 96) + 8 * v97 + 8 * (*(_BYTE *)(v75 + 18) == 0));
          do
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v75 + 72) + 16 * v13);
            v17 = *(_QWORD *)(v16 + 64);
            switch(*(_DWORD *)(v16 + 24))
            {
              case 0:
                v18 = *v15++;
                v19 = v18;
                if (v17)
                {
                  v76 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v102, (int)v14, &v76) = v19;
                }
                goto LABEL_41;
              case 1:
                v31 = *v15++;
                v30 = v31;
                if (v31 < v17 && v30 != 0)
                {
                  v76 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v102, (int)v30 + (int)v14 - 1, &v76) = 0x3FF0000000000000;
                }
                goto LABEL_36;
              case 2:
                v20 = *(_QWORD *)(v16 + 72);
                if (v20)
                {
                  v21 = 0;
                  v22 = v14 << 32;
                  do
                  {
                    v23 = *v15++;
                    v24 = v23;
                    if (v21 < v17)
                    {
                      v76 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v102, v22 >> 32, &v76) = v24;
                    }
                    ++v21;
                    v22 += 0x100000000;
                  }
                  while (v20 != v21);
                }
                goto LABEL_23;
              case 3:
                v34 = *v15++;
                for (i = v34; i; --i)
                {
                  v35 = *v15;
                  if (*v15 < v17 && v35 != 0)
                  {
                    v76 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v102, (int)v35 + (int)v14 - 1, &v76) = 0x3FF0000000000000;
                  }
                  ++v15;
                }
LABEL_36:
                v14 = v17 + v14 - 1;
                break;
              case 4:
                v38 = *v15++;
                for (j = v38; j; --j)
                {
                  v39 = *v15;
                  if (*v15 < v17)
                  {
                    v40 = v15[1];
                    v76 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v102, (int)v39 + (int)v14, &v76) = v40;
                  }
                  v15 += 2;
                }
LABEL_41:
                v14 += v17;
                break;
              case 7:
                v25 = *(_QWORD *)(v16 + 72);
                if (v25)
                {
                  v26 = 0;
                  v27 = v14 << 32;
                  do
                  {
                    v28 = *v15++;
                    v29 = v28;
                    if (v26 < v17)
                    {
                      v76 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v102, v27 >> 32, &v76) = v29;
                    }
                    ++v26;
                    v27 += 0x100000000;
                  }
                  while (v25 != v26);
                }
LABEL_23:
                v14 += v17;
                break;
              default:
                break;
            }
            ++v13;
          }
          while (v13 != v12);
        }
      }
      if (v74)
      {
        v41 = (unint64_t *)&v74->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v74->__on_zero_shared)(v74, iterator);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v43 = *(_DWORD *)(v71 + 832) - 1;
      v76 = 0;
      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v102, v43, &v76) = 0x3FF0000000000000;
      if (*(_BYTE *)(v71 + 896))
        (*(void (**)(_QWORD, char *))(**(_QWORD **)(v71 + 880) + 40))(*(_QWORD *)(v71 + 880), v101);
      if (*(_BYTE *)(v95 + 16))
        v44 = *(_BYTE *)(v95 + 17) == 0;
      else
        v44 = 1;
      if (v44)
      {
        LODWORD(v45) = 0;
      }
      else
      {
        v46 = (_QWORD *)(v95 + 24);
        if (!*(_BYTE *)(v95 + 18))
          v46 = (_QWORD *)(*(_QWORD *)(v95 + 96) + 8 * v97);
        v45 = *(_QWORD *)(*(_QWORD *)(v95 + 96) + 8 * v97 + 8 * *v46 - 8);
      }
      v100 = v45;
      v47 = v103;
      v48 = 0.0;
      v49 = 0.0;
      if ((uint64_t)v103 >= 1)
      {
        v51 = (int *)*((_QWORD *)&v102 + 1);
        v50 = (double *)v102;
        do
        {
          v52 = *v50++;
          v53 = v52;
          v54 = *v51++;
          v49 = v49 + v53 * *(double *)(*v73[2] + 8 * v54);
          --v47;
        }
        while (v47);
      }
      v55 = (double)(2 * (int)v45) + -1.0;
      v56 = *(double *)(v71 + 904);
      v57 = v55 * v49 + -1.0;
      v58 = -(v56 * v57);
      v59 = exp(-(v57 * -v56));
      if (v58 >= -100.0)
      {
        if (v58 <= 50.0)
        {
          v60 = exp(v58);
          v48 = log1p(v60);
        }
        else
        {
          v48 = v58;
        }
      }
      v76 = (unsigned int *)&v100;
      *(double *)(*v73[3] + 8 * v72) = v48
                                     * *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v70, &v100, (uint64_t)&std::piecewise_construct, &v76)+ 8)/ *(double *)(v71 + 904)+ *(double *)(*v73[3] + 8 * v72);
      v105 = (unsigned int *)&v100;
      v61 = v55
          * *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v70, &v100, (uint64_t)&std::piecewise_construct, &v105)+ 8);
      LOBYTE(v76) = 0;
      v77 = 0;
      v78 = v104;
      v79 = v61;
      v80 = v101;
      v81 = v104;
      v82 = -1.0 / (v59 + 1.0);
      LOBYTE(v83) = 0;
      v84 = 0u;
      v85 = 0u;
      v86 = 0;
      LOBYTE(v105) = 0;
      v106 = 0u;
      v107 = 0u;
      v108 = v104;
      Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const> const,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>,1>::run((double *)&v105, (uint64_t)&v76);
      v62 = v86;
      v86 = v108;
      v108 = v62;
      v63 = v84;
      v84 = v106;
      v64 = v85;
      v85 = v107;
      v106 = v63;
      v107 = v64;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v106);
      turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(*v73[4] + 16 * v72), &v83);
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v84);
      if (v99 | v89)
      {
        v65 = (uint64_t *)(*(_QWORD *)(v95 + 96) + 8 * v97);
        if (v90)
          v65 = &v91;
        v97 += *v65;
      }
      v66 = v93 + 1;
      v67 = v92;
      v68 = ++v93 - v88 * v94;
      v98 = v68;
      if (v68 == v88 && v66 != v92)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v87);
        v67 = v92;
        v66 = v93;
      }
    }
    while (v66 != v67);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v87);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v102);
}

void sub_218576590(_Unwind_Exception *a1)
{
  uint64_t *v1;

  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

double *Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const> const,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>,1>::run(double *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;
  double *v7;
  int *v8;
  double v9;
  double v10;
  uint64_t v11;

  v2 = *(_QWORD **)(a2 + 40);
  v3 = v2[3];
  if (v3 >= 1)
  {
    v4 = result;
    v5 = *(double *)(a2 + 32);
    v6 = *(double *)(a2 + 72);
    v7 = (double *)v2[1];
    v8 = (int *)v2[2];
    do
    {
      v9 = *v7++;
      v10 = v6 * (v5 * v9);
      v11 = *v8++;
      result = (double *)Eigen::SparseVector<double,0,int>::insert(v4, v11);
      *result = v10;
      --v3;
    }
    while (v3);
  }
  return result;
}

void __cxx_global_var_init_13_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_linear_svm_opt_interface_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_218576A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void turi::supervised::logistic_regression::~logistic_regression(turi::supervised::logistic_regression *this)
{
  char *v2;

  *(_QWORD *)this = &off_24D949590;
  v2 = (char *)this + 400;
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)this + 50);
  free(*((void **)this + 54));
  free(*((void **)this + 52));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  turi::supervised::supervised_learning_model_base::~supervised_learning_model_base((char **)this);
}

{
  turi::supervised::logistic_regression::~logistic_regression(this);
  JUMPOUT(0x219A19A08);
}

void turi::supervised::logistic_regression::model_specific_init(turi::supervised::logistic_regression *this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  std::__shared_weak_count *v6;
  uint64_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t number_of_coefficients;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unint64_t *v31;
  unint64_t v32;
  turi::supervised::logistic_regression_opt_interface *v33;
  char *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  const turi::ml_data *v38;
  const turi::ml_data *v39;
  void **p_p;
  _QWORD *v41[2];
  uint64_t *v42;
  std::__shared_weak_count *v43;
  _OWORD *v44;
  _BYTE v45[13];
  char v46;
  void *__p;
  _BYTE v48[13];
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)*((_QWORD *)this + 47);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 56) = *(_QWORD *)(v7[3] + 64);
  v42 = v7;
  v43 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  number_of_coefficients = turi::supervised::get_number_of_coefficients(&v42);
  v11 = v43;
  if (v43)
  {
    v12 = (unint64_t *)&v43->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *((_QWORD *)this + 57) = (*((_QWORD *)this + 56) - 1) * number_of_coefficients;
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  p_p = &__p;
  v14 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v14 + 14, (_QWORD *)this + 57);
  if (v49 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  p_p = &__p;
  v15 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v15 + 14, (_QWORD *)this + 56);
  v38 = a2;
  v39 = a3;
  if (v49 < 0)
    operator delete(__p);
  v18 = *((_QWORD *)this + 47);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v41[0] = 0;
  v41[1] = 0;
  p_p = (void **)v41;
  v21 = *(_QWORD **)(v18 + 24);
  if (v21[8])
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = v21[6];
      if ((*(_DWORD *)(v25 + 24) | 2) == 2)
      {
        v26 = (uint64_t *)(v25 + 80);
      }
      else
      {
        v28 = v25 + 32;
        v27 = *(_QWORD *)(v25 + 32);
        if (v24 >= (*(_QWORD *)(v28 + 8) - v27) >> 3)
        {
          v29 = 0;
          goto LABEL_23;
        }
        v26 = (uint64_t *)(v27 + v23);
      }
      v29 = *v26;
LABEL_23:
      *(_QWORD *)v45 = *(_QWORD *)(v21[4] + 80) + v22;
      std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)&p_p, *(uint64_t *)v45, v16, (uint64_t)&std::piecewise_construct, (void **)v45)[6] = v29;
      ++v24;
      v21 = *(_QWORD **)(v18 + 24);
      v23 += 8;
      v22 += 16;
    }
    while (v24 < v21[8]);
  }
  turi::flexible_type_converter<std::map<turi::flexible_type,unsigned long>>::set(&p_p, (uint64_t)v45);
  *(_QWORD *)&v48[5] = *(_QWORD *)&v45[5];
  *(_QWORD *)v48 = *(_QWORD *)v45;
  v48[12] = v45[12];
  LODWORD(__p) = 0;
  std::string::basic_string[abi:ne180100]<0>(v45, "num_examples_per_class");
  v44 = v45;
  v30 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v45, (uint64_t)&std::piecewise_construct, &v44);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v30 + 14, (unsigned int *)&__p);
  if (v46 < 0)
    operator delete(*(void **)v45);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
  std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::destroy((uint64_t)&p_p, v41[0]);
  if (v17)
  {
    v31 = (unint64_t *)&v17->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v33 = (turi::supervised::logistic_regression_opt_interface *)operator new();
  turi::supervised::logistic_regression_opt_interface::logistic_regression_opt_interface(v33, v38, v39, this);
  std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::reset[abi:ne180100]<turi::supervised::logistic_regression_opt_interface,void>((_QWORD *)this + 50, (uint64_t)v33);
  if (*((_QWORD *)this + 53) != number_of_coefficients)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 52, number_of_coefficients, 1);
    number_of_coefficients = *((_QWORD *)this + 53);
  }
  v34 = (char *)*((_QWORD *)this + 52);
  if (number_of_coefficients >= 0)
    v35 = number_of_coefficients;
  else
    v35 = number_of_coefficients + 1;
  v36 = v35 & 0xFFFFFFFFFFFFFFFELL;
  if (number_of_coefficients >= 2)
  {
    v37 = 2;
    if (v36 > 2)
      v37 = v35 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v34, ((8 * v37 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v36 < number_of_coefficients)
    bzero(&v34[16 * (v35 >> 1)], 8 * number_of_coefficients - 16 * (v35 >> 1));
}

void sub_218576F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  MEMORY[0x219A19A08](v31, 0x10B1C40B6E18916);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::reset[abi:ne180100]<turi::supervised::logistic_regression_opt_interface,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::logistic_regression_opt_interface,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

double turi::supervised::logistic_regression::set_coefs(uint64_t a1, __int128 **a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  double result;
  _OWORD *v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  double v19;

  v2 = (_QWORD *)(a1 + 416);
  v4 = *a2;
  v3 = (uint64_t)a2[1];
  if (*(_QWORD *)(a1 + 424) != v3)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(a1 + 416), v3, 1);
    v3 = *(_QWORD *)(a1 + 424);
  }
  v7 = (_OWORD *)*v2;
  if (v3 >= 0)
    v8 = v3;
  else
    v8 = v3 + 1;
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    v10 = 0;
    v11 = (_OWORD *)*v2;
    v12 = v4;
    do
    {
      v13 = *v12++;
      result = *(double *)&v13;
      *v11++ = v13;
      v10 += 2;
    }
    while (v10 < v9);
  }
  v14 = __OFSUB__(v3, v9);
  v15 = v3 - v9;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    v16 = v8 >> 1;
    v17 = (double *)&v4[v8 >> 1];
    v18 = (double *)&v7[v16];
    do
    {
      v19 = *v17++;
      result = v19;
      *v18++ = v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

void turi::supervised::logistic_regression::init_options(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  std::string *v121;
  std::string *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  std::string::size_type v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  std::string::size_type v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  void *v137;
  void *v138;
  unsigned int v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  std::string::size_type v143;
  void *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::string::size_type v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  void *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  void *v178;
  void *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  void *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unsigned int v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  void *v207;
  void *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  void *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  std::string::size_type v241;
  std::string::size_type v242;
  uint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  std::string::size_type v247;
  void *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  std::string::size_type v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  std::string::size_type v259;
  unsigned int v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  std::string::size_type v264;
  void *v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  void **v271;
  std::string *v272;
  __int128 v273;
  uint64_t v274;
  void **v275;
  unint64_t v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  void **v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  void **v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  void **v288;
  char *v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  void **v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  void **v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t v305;
  void **v306;
  void **v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  void **v312;
  void *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  void **v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t v323;
  void **v324;
  unsigned int v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  void **v329;
  void *v330;
  void *v331;
  _QWORD *v332;
  std::string *v333;
  uint64_t *v334;
  uint64_t *p_size;
  std::string __p;
  uint64_t v337;
  int v338;
  char v339;
  _QWORD v340[2];
  std::string v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char v346;
  std::string v347;
  uint64_t v348;
  int v349;
  char v350;
  uint64_t v351;
  int v352;
  char v353;
  uint64_t v354;
  int v355;
  char v356;
  uint64_t v357;
  int v358;
  char v359;
  void **v360[5];

  v360[2] = *(void ***)MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v341, "convergence_threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convergence threshold for training");
  v358 = 0;
  v359 = 1;
  v357 = 0x3F847AE147AE147BLL;
  turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), &v341, &__p, (uint64_t)&v357, 0, 1.0e-10, 1.0e20);
  v4 = 0x1030C407B73B9F7;
  switch(v359)
  {
    case 2:
      v5 = (unint64_t *)v357;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = v357;
        if (v357)
        {
          if (*(char *)(v357 + 31) < 0)
            operator delete(*(void **)(v357 + 8));
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v11 = (unint64_t *)v357;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v357;
        if (v357)
        {
          v15 = *(void **)(v357 + 8);
          if (v15)
          {
            *(_QWORD *)(v357 + 16) = v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v357;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v357;
        if (v357)
        {
          v347.__r_.__value_.__r.__words[0] = v357 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v20 = (unint64_t *)v357;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v19 = v357;
        if (v357)
        {
          v347.__r_.__value_.__r.__words[0] = v357 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
LABEL_26:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v23 = (unint64_t *)v357;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = v357;
        if (v357)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v357 + 16));
          v9 = v26;
          v27 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v28 = (unint64_t *)v357;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = v357;
        if (v357)
        {
          v32 = *(void **)(v357 + 48);
          if (v32)
          {
            *(_QWORD *)(v357 + 56) = v32;
            operator delete(v32);
          }
          v33 = *(void **)(v31 + 24);
          if (v33)
          {
            *(_QWORD *)(v31 + 32) = v33;
            operator delete(v33);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v31 + 8);
          v9 = v31;
          v27 = 2071181815;
LABEL_41:
          v10 = v27 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v9, v10);
        }
      }
      break;
    default:
      break;
  }
  v357 = 0;
  v358 = 0;
  v359 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "step_size");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Guess for the initial step size for the solver");
  v355 = 0;
  v356 = 1;
  v354 = 0x3FF0000000000000;
  turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), &v341, &__p, (uint64_t)&v354, 0, 1.0e-10, 1.0e20);
  switch(v356)
  {
    case 2:
      v34 = (unint64_t *)v354;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v354;
        if (v354)
        {
          if (*(char *)(v354 + 31) < 0)
            operator delete(*(void **)(v354 + 8));
          v38 = v37;
          v39 = 0x1012C404EF22A49;
          goto LABEL_88;
        }
      }
      break;
    case 3:
      v40 = (unint64_t *)v354;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        v43 = v354;
        if (v354)
        {
          v44 = *(void **)(v354 + 8);
          if (v44)
          {
            *(_QWORD *)(v354 + 16) = v44;
            operator delete(v44);
          }
          v38 = v43;
          v39 = 0x1080C409938AC02;
          goto LABEL_88;
        }
      }
      break;
    case 4:
      v45 = (unint64_t *)v354;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        v48 = v354;
        if (v354)
        {
          v347.__r_.__value_.__r.__words[0] = v354 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
          goto LABEL_72;
        }
      }
      break;
    case 5:
      v49 = (unint64_t *)v354;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v48 = v354;
        if (v354)
        {
          v347.__r_.__value_.__r.__words[0] = v354 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
LABEL_72:
          v38 = v48;
          v39 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        }
      }
      break;
    case 8:
      v52 = (unint64_t *)v354;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = v354;
        if (v354)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v354 + 16));
          v38 = v55;
          v56 = -235920773;
          goto LABEL_87;
        }
      }
      break;
    case 9:
      v57 = (unint64_t *)v354;
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        v60 = v354;
        if (v354)
        {
          v61 = *(void **)(v354 + 48);
          if (v61)
          {
            *(_QWORD *)(v354 + 56) = v61;
            operator delete(v61);
          }
          v62 = *(void **)(v60 + 24);
          if (v62)
          {
            *(_QWORD *)(v60 + 32) = v62;
            operator delete(v62);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v60 + 8);
          v38 = v60;
          v56 = 2071181815;
LABEL_87:
          v39 = v56 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v38, v39);
        }
      }
      break;
    default:
      break;
  }
  v354 = 0;
  v355 = 0;
  v356 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "max_iterations");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Maximum number of iterations to perform during training");
  v353 = 0;
  v352 = 0;
  v351 = 10;
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v341, &__p, (uint64_t)&v351, 1, 0x7FFFFFFFLL, 0);
  switch(v353)
  {
    case 2:
      v63 = (unint64_t *)v351;
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        v66 = v351;
        if (v351)
        {
          if (*(char *)(v351 + 31) < 0)
            operator delete(*(void **)(v351 + 8));
          v67 = v66;
          v68 = 0x1012C404EF22A49;
          goto LABEL_134;
        }
      }
      break;
    case 3:
      v69 = (unint64_t *)v351;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        v72 = v351;
        if (v351)
        {
          v73 = *(void **)(v351 + 8);
          if (v73)
          {
            *(_QWORD *)(v351 + 16) = v73;
            operator delete(v73);
          }
          v67 = v72;
          v68 = 0x1080C409938AC02;
          goto LABEL_134;
        }
      }
      break;
    case 4:
      v74 = (unint64_t *)v351;
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        v77 = v351;
        if (v351)
        {
          v347.__r_.__value_.__r.__words[0] = v351 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
          goto LABEL_118;
        }
      }
      break;
    case 5:
      v78 = (unint64_t *)v351;
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v77 = v351;
        if (v351)
        {
          v347.__r_.__value_.__r.__words[0] = v351 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
LABEL_118:
          v67 = v77;
          v68 = 0x1020C405E66F15BLL;
          goto LABEL_134;
        }
      }
      break;
    case 8:
      v81 = (unint64_t *)v351;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
      {
        v84 = v351;
        if (v351)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v351 + 16));
          v67 = v84;
          v85 = -235920773;
          goto LABEL_133;
        }
      }
      break;
    case 9:
      v86 = (unint64_t *)v351;
      do
      {
        v87 = __ldaxr(v86);
        v88 = v87 - 1;
      }
      while (__stlxr(v88, v86));
      if (!v88)
      {
        v89 = v351;
        if (v351)
        {
          v90 = *(void **)(v351 + 48);
          if (v90)
          {
            *(_QWORD *)(v351 + 56) = v90;
            operator delete(v90);
          }
          v91 = *(void **)(v89 + 24);
          if (v91)
          {
            *(_QWORD *)(v89 + 32) = v91;
            operator delete(v91);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v89 + 8);
          v67 = v89;
          v85 = 2071181815;
LABEL_133:
          v68 = v85 | 0x1030C4000000000;
LABEL_134:
          MEMORY[0x219A19A08](v67, v68);
        }
      }
      break;
    default:
      break;
  }
  v351 = 0;
  v352 = 0;
  v353 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "lbfgs_memory_level");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Number of previous iterations to cache for LBFGS");
  v350 = 0;
  v349 = 0;
  v348 = 11;
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v341, &__p, (uint64_t)&v348, 1, 0x7FFFFFFFLL, 0);
  switch(v350)
  {
    case 2:
      v92 = (unint64_t *)v348;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = v348;
        if (v348)
        {
          if (*(char *)(v348 + 31) < 0)
            operator delete(*(void **)(v348 + 8));
          v96 = v95;
          v97 = 0x1012C404EF22A49;
          goto LABEL_180;
        }
      }
      break;
    case 3:
      v98 = (unint64_t *)v348;
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        v101 = v348;
        if (v348)
        {
          v102 = *(void **)(v348 + 8);
          if (v102)
          {
            *(_QWORD *)(v348 + 16) = v102;
            operator delete(v102);
          }
          v96 = v101;
          v97 = 0x1080C409938AC02;
          goto LABEL_180;
        }
      }
      break;
    case 4:
      v103 = (unint64_t *)v348;
      do
      {
        v104 = __ldaxr(v103);
        v105 = v104 - 1;
      }
      while (__stlxr(v105, v103));
      if (!v105)
      {
        v106 = v348;
        if (v348)
        {
          v347.__r_.__value_.__r.__words[0] = v348 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
          goto LABEL_164;
        }
      }
      break;
    case 5:
      v107 = (unint64_t *)v348;
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109)
      {
        v106 = v348;
        if (v348)
        {
          v347.__r_.__value_.__r.__words[0] = v348 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
LABEL_164:
          v96 = v106;
          v97 = 0x1020C405E66F15BLL;
          goto LABEL_180;
        }
      }
      break;
    case 8:
      v110 = (unint64_t *)v348;
      do
      {
        v111 = __ldaxr(v110);
        v112 = v111 - 1;
      }
      while (__stlxr(v112, v110));
      if (!v112)
      {
        v113 = v348;
        if (v348)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v348 + 16));
          v96 = v113;
          v114 = -235920773;
          goto LABEL_179;
        }
      }
      break;
    case 9:
      v115 = (unint64_t *)v348;
      do
      {
        v116 = __ldaxr(v115);
        v117 = v116 - 1;
      }
      while (__stlxr(v117, v115));
      if (!v117)
      {
        v118 = v348;
        if (v348)
        {
          v119 = *(void **)(v348 + 48);
          if (v119)
          {
            *(_QWORD *)(v348 + 56) = v119;
            operator delete(v119);
          }
          v120 = *(void **)(v118 + 24);
          if (v120)
          {
            *(_QWORD *)(v118 + 32) = v120;
            operator delete(v120);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v118 + 8);
          v96 = v118;
          v114 = 2071181815;
LABEL_179:
          v97 = v114 | 0x1030C4000000000;
LABEL_180:
          MEMORY[0x219A19A08](v96, v97);
        }
      }
      break;
    default:
      break;
  }
  v348 = 0;
  v349 = 0;
  v350 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "solver");
  std::string::basic_string[abi:ne180100]<0>(&v347, "Solver used for training");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v345, "auto");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v341, "auto");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v341.__r_.__value_.__r.__words[2], "newton");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v342, "lbfgs");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v343, "gd");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v344, "fista");
  v333 = 0;
  v334 = 0;
  p_size = 0;
  v360[0] = (void **)&v333;
  LOBYTE(v360[1]) = 0;
  v333 = (std::string *)operator new(0x50uLL);
  v334 = (uint64_t *)v333;
  p_size = (uint64_t *)&v333[3].__r_.__value_.__l.__size_;
  v121 = (std::string *)&v345;
  v334 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&p_size, (uint64_t *)&v341, &v345, (uint64_t)v333);
  turi::option_manager::create_categorical_option((turi::option_manager *)(a1 + 224), &__p, &v347, (uint64_t)&v345, (uint64_t **)&v333, 0);
  v360[0] = (void **)&v333;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v360);
  do
  {
    v122 = v121;
    v121 = (std::string *)((char *)v121 - 16);
    switch(v122[-1].__r_.__value_.__s.__data_[20])
    {
      case 2:
        v123 = (unint64_t *)v121->__r_.__value_.__r.__words[0];
        do
        {
          v124 = __ldaxr(v123);
          v125 = v124 - 1;
        }
        while (__stlxr(v125, v123));
        if (!v125)
        {
          v126 = v121->__r_.__value_.__r.__words[0];
          if (!v121->__r_.__value_.__r.__words[0])
            goto LABEL_228;
          if (*(char *)(v126 + 31) < 0)
            operator delete(*(void **)(v126 + 8));
          v127 = (_QWORD *)v126;
          v128 = 0x1012C404EF22A49;
          goto LABEL_227;
        }
        break;
      case 3:
        v140 = (unint64_t *)v121->__r_.__value_.__r.__words[0];
        do
        {
          v141 = __ldaxr(v140);
          v142 = v141 - 1;
        }
        while (__stlxr(v142, v140));
        if (!v142)
        {
          v143 = v121->__r_.__value_.__r.__words[0];
          if (!v121->__r_.__value_.__r.__words[0])
            goto LABEL_228;
          v144 = *(void **)(v143 + 8);
          if (v144)
          {
            *(_QWORD *)(v143 + 16) = v144;
            operator delete(v144);
          }
          v127 = (_QWORD *)v143;
          v128 = 0x1080C409938AC02;
          goto LABEL_227;
        }
        break;
      case 4:
        v129 = (unint64_t *)v121->__r_.__value_.__r.__words[0];
        do
        {
          v130 = __ldaxr(v129);
          v131 = v130 - 1;
        }
        while (__stlxr(v131, v129));
        if (!v131)
        {
          v132 = v121->__r_.__value_.__r.__words[0];
          if (!v121->__r_.__value_.__r.__words[0])
            goto LABEL_228;
          v360[0] = (void **)(v132 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v360);
          goto LABEL_220;
        }
        break;
      case 5:
        v145 = (unint64_t *)v121->__r_.__value_.__r.__words[0];
        do
        {
          v146 = __ldaxr(v145);
          v147 = v146 - 1;
        }
        while (__stlxr(v147, v145));
        if (!v147)
        {
          v132 = v121->__r_.__value_.__r.__words[0];
          if (!v121->__r_.__value_.__r.__words[0])
            goto LABEL_228;
          v360[0] = (void **)(v132 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v360);
LABEL_220:
          v127 = (_QWORD *)v132;
          v128 = 0x1020C405E66F15BLL;
          goto LABEL_227;
        }
        break;
      case 8:
        v148 = (unint64_t *)v121->__r_.__value_.__r.__words[0];
        do
        {
          v149 = __ldaxr(v148);
          v150 = v149 - 1;
        }
        while (__stlxr(v150, v148));
        if (!v150)
        {
          v151 = v121->__r_.__value_.__r.__words[0];
          if (!v121->__r_.__value_.__r.__words[0])
            goto LABEL_228;
          boost::detail::shared_count::~shared_count((unsigned int **)(v151 + 16));
          v127 = (_QWORD *)v151;
          v139 = -235920773;
          goto LABEL_226;
        }
        break;
      case 9:
        v133 = (unint64_t *)v121->__r_.__value_.__r.__words[0];
        do
        {
          v134 = __ldaxr(v133);
          v135 = v134 - 1;
        }
        while (__stlxr(v135, v133));
        if (!v135)
        {
          v136 = (_QWORD *)v121->__r_.__value_.__r.__words[0];
          if (v121->__r_.__value_.__r.__words[0])
          {
            v137 = (void *)v136[6];
            if (v137)
            {
              v136[7] = v137;
              operator delete(v137);
            }
            v138 = (void *)v136[3];
            if (v138)
            {
              v136[4] = v138;
              operator delete(v138);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v136 + 1));
            v127 = v136;
            v139 = 2071181815;
LABEL_226:
            v128 = v139 | 0x1030C4000000000;
LABEL_227:
            MEMORY[0x219A19A08](v127, v128);
          }
LABEL_228:
          v121->__r_.__value_.__r.__words[0] = 0;
        }
        break;
      default:
        break;
    }
    v122[-1].__r_.__value_.__l.__size_ = 0;
    LODWORD(v122[-1].__r_.__value_.__r.__words[2]) = 0;
    v122[-1].__r_.__value_.__s.__data_[20] = 0;
  }
  while (v121 != &v341);
  switch(v346)
  {
    case 2:
      v152 = (unint64_t *)v345;
      do
      {
        v153 = __ldaxr(v152);
        v154 = v153 - 1;
      }
      while (__stlxr(v154, v152));
      if (!v154)
      {
        v155 = v345;
        if (v345)
        {
          if (*(char *)(v345 + 31) < 0)
            operator delete(*(void **)(v345 + 8));
          v156 = v155;
          v157 = 0x1012C404EF22A49;
          goto LABEL_271;
        }
      }
      break;
    case 3:
      v158 = (unint64_t *)v345;
      do
      {
        v159 = __ldaxr(v158);
        v160 = v159 - 1;
      }
      while (__stlxr(v160, v158));
      if (!v160)
      {
        v161 = v345;
        if (v345)
        {
          v162 = *(void **)(v345 + 8);
          if (v162)
          {
            *(_QWORD *)(v345 + 16) = v162;
            operator delete(v162);
          }
          v156 = v161;
          v157 = 0x1080C409938AC02;
          goto LABEL_271;
        }
      }
      break;
    case 4:
      v163 = (unint64_t *)v345;
      do
      {
        v164 = __ldaxr(v163);
        v165 = v164 - 1;
      }
      while (__stlxr(v165, v163));
      if (!v165)
      {
        v166 = v345;
        if (v345)
        {
          v341.__r_.__value_.__r.__words[0] = v345 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
          goto LABEL_255;
        }
      }
      break;
    case 5:
      v167 = (unint64_t *)v345;
      do
      {
        v168 = __ldaxr(v167);
        v169 = v168 - 1;
      }
      while (__stlxr(v169, v167));
      if (!v169)
      {
        v166 = v345;
        if (v345)
        {
          v341.__r_.__value_.__r.__words[0] = v345 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
LABEL_255:
          v156 = v166;
          v157 = 0x1020C405E66F15BLL;
          goto LABEL_271;
        }
      }
      break;
    case 8:
      v170 = (unint64_t *)v345;
      do
      {
        v171 = __ldaxr(v170);
        v172 = v171 - 1;
      }
      while (__stlxr(v172, v170));
      if (!v172)
      {
        v173 = v345;
        if (v345)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v345 + 16));
          MEMORY[0x219A19A08](v173, 0x1030C40F1F0227BLL);
        }
        v345 = 0;
      }
      break;
    case 9:
      v174 = (unint64_t *)v345;
      do
      {
        v175 = __ldaxr(v174);
        v176 = v175 - 1;
      }
      while (__stlxr(v176, v174));
      if (!v176)
      {
        v177 = v345;
        if (v345)
        {
          v178 = *(void **)(v345 + 48);
          if (v178)
          {
            *(_QWORD *)(v345 + 56) = v178;
            operator delete(v178);
          }
          v179 = *(void **)(v177 + 24);
          if (v179)
          {
            *(_QWORD *)(v177 + 32) = v179;
            operator delete(v179);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v177 + 8);
          v156 = v177;
          v157 = 0x1030C407B73B9F7;
LABEL_271:
          MEMORY[0x219A19A08](v156, v157);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "l1_penalty");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Penalty on the L1-penalty");
  memset(v340, 0, 13);
  turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), &v341, &__p, (uint64_t)v340, 0, 0.0, 1.0e20);
  switch(BYTE4(v340[1]))
  {
    case 2:
      v180 = (unint64_t *)v340[0];
      do
      {
        v181 = __ldaxr(v180);
        v182 = v181 - 1;
      }
      while (__stlxr(v182, v180));
      if (!v182)
      {
        v183 = v340[0];
        if (v340[0])
        {
          if (*(char *)(v340[0] + 31) < 0)
            operator delete(*(void **)(v340[0] + 8));
          v184 = v183;
          v185 = 0x1012C404EF22A49;
          goto LABEL_317;
        }
      }
      break;
    case 3:
      v186 = (unint64_t *)v340[0];
      do
      {
        v187 = __ldaxr(v186);
        v188 = v187 - 1;
      }
      while (__stlxr(v188, v186));
      if (!v188)
      {
        v189 = v340[0];
        if (v340[0])
        {
          v190 = *(void **)(v340[0] + 8);
          if (v190)
          {
            *(_QWORD *)(v340[0] + 16) = v190;
            operator delete(v190);
          }
          v184 = v189;
          v185 = 0x1080C409938AC02;
          goto LABEL_317;
        }
      }
      break;
    case 4:
      v191 = (unint64_t *)v340[0];
      do
      {
        v192 = __ldaxr(v191);
        v193 = v192 - 1;
      }
      while (__stlxr(v193, v191));
      if (!v193)
      {
        v194 = v340[0];
        if (v340[0])
        {
          v347.__r_.__value_.__r.__words[0] = v340[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
          goto LABEL_301;
        }
      }
      break;
    case 5:
      v195 = (unint64_t *)v340[0];
      do
      {
        v196 = __ldaxr(v195);
        v197 = v196 - 1;
      }
      while (__stlxr(v197, v195));
      if (!v197)
      {
        v194 = v340[0];
        if (v340[0])
        {
          v347.__r_.__value_.__r.__words[0] = v340[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
LABEL_301:
          v184 = v194;
          v185 = 0x1020C405E66F15BLL;
          goto LABEL_317;
        }
      }
      break;
    case 8:
      v198 = (unint64_t *)v340[0];
      do
      {
        v199 = __ldaxr(v198);
        v200 = v199 - 1;
      }
      while (__stlxr(v200, v198));
      if (!v200)
      {
        v201 = v340[0];
        if (v340[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v340[0] + 16));
          v184 = v201;
          v202 = -235920773;
          goto LABEL_316;
        }
      }
      break;
    case 9:
      v203 = (unint64_t *)v340[0];
      do
      {
        v204 = __ldaxr(v203);
        v205 = v204 - 1;
      }
      while (__stlxr(v205, v203));
      if (!v205)
      {
        v206 = v340[0];
        if (v340[0])
        {
          v207 = *(void **)(v340[0] + 48);
          if (v207)
          {
            *(_QWORD *)(v340[0] + 56) = v207;
            operator delete(v207);
          }
          v208 = *(void **)(v206 + 24);
          if (v208)
          {
            *(_QWORD *)(v206 + 32) = v208;
            operator delete(v208);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v206 + 8);
          v184 = v206;
          v202 = 2071181815;
LABEL_316:
          v185 = v202 | 0x1030C4000000000;
LABEL_317:
          MEMORY[0x219A19A08](v184, v185);
        }
      }
      break;
    default:
      break;
  }
  memset(v340, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "l2_penalty");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Penalty on the L1-penalty");
  v338 = 0;
  v339 = 1;
  v337 = 0x3F847AE147AE147BLL;
  turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), &v341, &__p, (uint64_t)&v337, 0, 0.0, 1.0e20);
  switch(v339)
  {
    case 2:
      v209 = (unint64_t *)v337;
      do
      {
        v210 = __ldaxr(v209);
        v211 = v210 - 1;
      }
      while (__stlxr(v211, v209));
      if (!v211)
      {
        v212 = v337;
        if (v337)
        {
          if (*(char *)(v337 + 31) < 0)
            operator delete(*(void **)(v337 + 8));
          v213 = v212;
          v214 = 0x1012C404EF22A49;
          goto LABEL_363;
        }
      }
      break;
    case 3:
      v215 = (unint64_t *)v337;
      do
      {
        v216 = __ldaxr(v215);
        v217 = v216 - 1;
      }
      while (__stlxr(v217, v215));
      if (!v217)
      {
        v218 = v337;
        if (v337)
        {
          v219 = *(void **)(v337 + 8);
          if (v219)
          {
            *(_QWORD *)(v337 + 16) = v219;
            operator delete(v219);
          }
          v213 = v218;
          v214 = 0x1080C409938AC02;
          goto LABEL_363;
        }
      }
      break;
    case 4:
      v220 = (unint64_t *)v337;
      do
      {
        v221 = __ldaxr(v220);
        v222 = v221 - 1;
      }
      while (__stlxr(v222, v220));
      if (!v222)
      {
        v223 = v337;
        if (v337)
        {
          v347.__r_.__value_.__r.__words[0] = v337 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
          goto LABEL_347;
        }
      }
      break;
    case 5:
      v224 = (unint64_t *)v337;
      do
      {
        v225 = __ldaxr(v224);
        v226 = v225 - 1;
      }
      while (__stlxr(v226, v224));
      if (!v226)
      {
        v223 = v337;
        if (v337)
        {
          v347.__r_.__value_.__r.__words[0] = v337 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
LABEL_347:
          v213 = v223;
          v214 = 0x1020C405E66F15BLL;
          goto LABEL_363;
        }
      }
      break;
    case 8:
      v227 = (unint64_t *)v337;
      do
      {
        v228 = __ldaxr(v227);
        v229 = v228 - 1;
      }
      while (__stlxr(v229, v227));
      if (!v229)
      {
        v230 = v337;
        if (v337)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v337 + 16));
          v213 = v230;
          v231 = -235920773;
          goto LABEL_362;
        }
      }
      break;
    case 9:
      v232 = (unint64_t *)v337;
      do
      {
        v233 = __ldaxr(v232);
        v234 = v233 - 1;
      }
      while (__stlxr(v234, v232));
      if (!v234)
      {
        v235 = v337;
        if (v337)
        {
          v236 = *(void **)(v337 + 48);
          if (v236)
          {
            *(_QWORD *)(v337 + 56) = v236;
            operator delete(v236);
          }
          v237 = *(void **)(v235 + 24);
          if (v237)
          {
            *(_QWORD *)(v235 + 32) = v237;
            operator delete(v237);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v235 + 8);
          v213 = v235;
          v231 = 2071181815;
LABEL_362:
          v214 = v231 | 0x1030C4000000000;
LABEL_363:
          MEMORY[0x219A19A08](v213, v214);
        }
      }
      break;
    default:
      break;
  }
  v337 = 0;
  v338 = 0;
  v339 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "simple_mode");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Show progress printing with very simple options.");
  turi::option_manager::create_BOOLean_option((turi::option_manager *)(a1 + 224), &v341, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "feature_rescaling");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Rescale features to have unit L2-Norm");
  turi::option_manager::create_BOOLean_option((turi::option_manager *)(a1 + 224), &v341, &__p, 1u, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "class_weights");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Weights (during training) assigned to each class.");
  *(std::string::size_type *)((char *)v347.__r_.__value_.__r.__words + 5) = 0x700000000000000;
  v347.__r_.__value_.__r.__words[0] = 0;
  turi::option_manager::create_flexible_type_option((turi::option_manager *)(a1 + 224), &v341, &__p, (uint64_t)&v347, 1);
  switch(v347.__r_.__value_.__s.__data_[12])
  {
    case 2:
      v238 = (unint64_t *)v347.__r_.__value_.__r.__words[0];
      do
      {
        v239 = __ldaxr(v238);
        v240 = v239 - 1;
      }
      while (__stlxr(v240, v238));
      if (!v240)
      {
        v241 = v347.__r_.__value_.__r.__words[0];
        if (v347.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v347.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v347.__r_.__value_.__r.__words[0] + 8));
          v242 = v241;
          v243 = 0x1012C404EF22A49;
          goto LABEL_417;
        }
      }
      break;
    case 3:
      v244 = (unint64_t *)v347.__r_.__value_.__r.__words[0];
      do
      {
        v245 = __ldaxr(v244);
        v246 = v245 - 1;
      }
      while (__stlxr(v246, v244));
      if (!v246)
      {
        v247 = v347.__r_.__value_.__r.__words[0];
        if (v347.__r_.__value_.__r.__words[0])
        {
          v248 = *(void **)(v347.__r_.__value_.__r.__words[0] + 8);
          if (v248)
          {
            *(_QWORD *)(v347.__r_.__value_.__r.__words[0] + 16) = v248;
            operator delete(v248);
          }
          v242 = v247;
          v243 = 0x1080C409938AC02;
          goto LABEL_417;
        }
      }
      break;
    case 4:
      v249 = (unint64_t *)v347.__r_.__value_.__r.__words[0];
      do
      {
        v250 = __ldaxr(v249);
        v251 = v250 - 1;
      }
      while (__stlxr(v251, v249));
      if (!v251)
      {
        v252 = v347.__r_.__value_.__r.__words[0];
        if (v347.__r_.__value_.__r.__words[0])
        {
          v333 = (std::string *)(v347.__r_.__value_.__r.__words[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
          goto LABEL_401;
        }
      }
      break;
    case 5:
      v253 = (unint64_t *)v347.__r_.__value_.__r.__words[0];
      do
      {
        v254 = __ldaxr(v253);
        v255 = v254 - 1;
      }
      while (__stlxr(v255, v253));
      if (!v255)
      {
        v252 = v347.__r_.__value_.__r.__words[0];
        if (v347.__r_.__value_.__r.__words[0])
        {
          v333 = (std::string *)(v347.__r_.__value_.__r.__words[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
LABEL_401:
          v242 = v252;
          v243 = 0x1020C405E66F15BLL;
          goto LABEL_417;
        }
      }
      break;
    case 8:
      v256 = (unint64_t *)v347.__r_.__value_.__r.__words[0];
      do
      {
        v257 = __ldaxr(v256);
        v258 = v257 - 1;
      }
      while (__stlxr(v258, v256));
      if (!v258)
      {
        v259 = v347.__r_.__value_.__r.__words[0];
        if (v347.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v347.__r_.__value_.__r.__words[0] + 16));
          v242 = v259;
          v260 = -235920773;
          goto LABEL_416;
        }
      }
      break;
    case 9:
      v261 = (unint64_t *)v347.__r_.__value_.__r.__words[0];
      do
      {
        v262 = __ldaxr(v261);
        v263 = v262 - 1;
      }
      while (__stlxr(v263, v261));
      if (!v263)
      {
        v264 = v347.__r_.__value_.__r.__words[0];
        if (v347.__r_.__value_.__r.__words[0])
        {
          v265 = *(void **)(v347.__r_.__value_.__r.__words[0] + 48);
          if (v265)
          {
            *(_QWORD *)(v347.__r_.__value_.__r.__words[0] + 56) = v265;
            operator delete(v265);
          }
          v266 = *(void **)(v264 + 24);
          if (v266)
          {
            *(_QWORD *)(v264 + 32) = v266;
            operator delete(v266);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v264 + 8);
          v242 = v264;
          v260 = 2071181815;
LABEL_416:
          v243 = v260 | 0x1030C4000000000;
LABEL_417:
          MEMORY[0x219A19A08](v242, v243);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "disable_posttrain_evaluation");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Disable automatic computation of an evaluation report following training.");
  turi::option_manager::create_BOOLean_option((turi::option_manager *)(a1 + 224), &v341, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v341, "features");
  std::string::basic_string[abi:ne180100]<0>(&__p, "List of features that are considered during training and prediction for this model.");
  memset(&v347, 0, sizeof(v347));
  *(void ***)((char *)v360 + 5) = (void **)0x400000000000000;
  v360[0] = 0;
  v267 = operator new();
  v268 = v267;
  *(_QWORD *)v267 = 0;
  *(_QWORD *)(v267 + 8) = 0;
  v269 = (uint64_t *)(v267 + 8);
  *(_QWORD *)(v267 + 16) = 0;
  *(_QWORD *)(v267 + 24) = 0;
  v360[0] = (void **)v267;
  *(_QWORD *)v267 = 1;
  switch(BYTE4(v360[1]))
  {
    case 2:
      if (*(_QWORD *)v267 != 1)
      {
        v270 = operator new();
        v271 = v360[0];
        *(_QWORD *)v270 = *v360[0];
        v272 = (std::string *)(v270 + 8);
        if (*((char *)v271 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v272, (const std::string::value_type *)v271[1], (std::string::size_type)v271[2]);
        }
        else
        {
          v273 = *(_OWORD *)(v271 + 1);
          *(_QWORD *)(v270 + 24) = v271[3];
          *(_OWORD *)&v272->__r_.__value_.__l.__data_ = v273;
        }
        v360[0] = (void **)v270;
        *(_QWORD *)v270 = 1;
        do
        {
          v300 = __ldaxr((unint64_t *)v268);
          v301 = v300 - 1;
        }
        while (__stlxr(v301, (unint64_t *)v268));
        if (!v301)
        {
          v4 = 0x1012C404EF22A49;
          if ((*(char *)(v268 + 31) & 0x80000000) == 0)
            goto LABEL_467;
          v278 = (void *)*v269;
          goto LABEL_466;
        }
      }
      break;
    case 3:
      if (*(_QWORD *)v267 != 1)
      {
        v274 = operator new();
        v275 = v360[0];
        *(_QWORD *)v274 = *v360[0];
        *(_QWORD *)(v274 + 16) = 0;
        *(_QWORD *)(v274 + 24) = 0;
        *(_QWORD *)(v274 + 8) = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(v274 + 8), v275[1], (uint64_t)v275[2], ((_BYTE *)v275[2] - (_BYTE *)v275[1]) >> 3);
        v360[0] = (void **)v274;
        *(_QWORD *)v274 = 1;
        do
        {
          v276 = __ldaxr((unint64_t *)v268);
          v277 = v276 - 1;
        }
        while (__stlxr(v277, (unint64_t *)v268));
        if (!v277)
        {
          v278 = (void *)*v269;
          v4 = 0x1080C409938AC02;
          if (*v269)
          {
            *(_QWORD *)(v268 + 16) = v278;
LABEL_466:
            operator delete(v278);
          }
          goto LABEL_467;
        }
      }
      break;
    case 4:
      if (*(_QWORD *)v267 != 1)
      {
        v279 = operator new();
        v280 = v360[0];
        *(_QWORD *)v279 = *v360[0];
        *(_QWORD *)(v279 + 16) = 0;
        *(_QWORD *)(v279 + 24) = 0;
        *(_QWORD *)(v279 + 8) = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(v279 + 8), (uint64_t *)v280[1], (uint64_t *)v280[2], ((_BYTE *)v280[2] - (_BYTE *)v280[1]) >> 4);
        v360[0] = (void **)v279;
        *(_QWORD *)v279 = 1;
        do
        {
          v281 = __ldaxr((unint64_t *)v268);
          v282 = v281 - 1;
        }
        while (__stlxr(v282, (unint64_t *)v268));
        if (!v282)
        {
          v333 = (std::string *)v269;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
          goto LABEL_446;
        }
      }
      break;
    case 5:
      if (*(_QWORD *)v267 != 1)
      {
        v283 = operator new();
        v284 = v360[0];
        *(_QWORD *)v283 = *v360[0];
        *(_QWORD *)(v283 + 16) = 0;
        *(_QWORD *)(v283 + 24) = 0;
        *(_QWORD *)(v283 + 8) = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((_QWORD *)(v283 + 8), (uint64_t *)v284[1], (uint64_t *)v284[2], ((_BYTE *)v284[2] - (_BYTE *)v284[1]) >> 5);
        v360[0] = (void **)v283;
        *(_QWORD *)v283 = 1;
        do
        {
          v285 = __ldaxr((unint64_t *)v268);
          v286 = v285 - 1;
        }
        while (__stlxr(v286, (unint64_t *)v268));
        if (!v286)
        {
          v333 = (std::string *)v269;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
LABEL_446:
          v4 = 0x1020C405E66F15BLL;
          goto LABEL_467;
        }
      }
      break;
    case 8:
      if (*(_QWORD *)v267 != 1)
      {
        v287 = operator new();
        v288 = v360[0];
        *(_QWORD *)v287 = *v360[0];
        *(_QWORD *)(v287 + 8) = v288[1];
        v289 = (char *)v288[2];
        *(_QWORD *)(v287 + 16) = v289;
        if (v289)
        {
          v290 = (unsigned int *)(v289 + 8);
          do
            v291 = __ldxr(v290);
          while (__stxr(v291 + 1, v290));
        }
        v292 = *(_OWORD *)(v288 + 3);
        v293 = *(_OWORD *)(v288 + 5);
        *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 7);
        *(_OWORD *)(v287 + 40) = v293;
        *(_OWORD *)(v287 + 24) = v292;
        v360[0] = (void **)v287;
        *(_QWORD *)v287 = 1;
        do
        {
          v294 = __ldaxr((unint64_t *)v268);
          v295 = v294 - 1;
        }
        while (__stlxr(v295, (unint64_t *)v268));
        if (!v295)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v268 + 16));
          v4 = 0x1030C40F1F0227BLL;
          goto LABEL_467;
        }
      }
      break;
    case 9:
      if (*(_QWORD *)v267 != 1)
      {
        v296 = operator new();
        v297 = v360[0] + 1;
        *(_QWORD *)v296 = *v360[0];
        turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v296 + 8), (uint64_t)v297);
        v360[0] = (void **)v296;
        *(_QWORD *)v296 = 1;
        do
        {
          v298 = __ldaxr((unint64_t *)v268);
          v299 = v298 - 1;
        }
        while (__stlxr(v299, (unint64_t *)v268));
        if (!v299)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v268);
LABEL_467:
          MEMORY[0x219A19A08](v268, v4);
        }
      }
      break;
    default:
      break;
  }
  v302 = v360[0];
  std::vector<turi::flexible_type>::__vdeallocate(v360[0] + 1);
  *(std::string *)(v302 + 1) = v347;
  memset(&v347, 0, sizeof(v347));
  turi::option_manager::create_flexible_type_option((turi::option_manager *)(a1 + 224), &v341, &__p, (uint64_t)v360, 0);
  switch(BYTE4(v360[1]))
  {
    case 2:
      v303 = (unint64_t *)v360[0];
      do
      {
        v304 = __ldaxr(v303);
        v305 = v304 - 1;
      }
      while (__stlxr(v305, v303));
      if (!v305)
      {
        v306 = v360[0];
        if (v360[0])
        {
          if (*((char *)v360[0] + 31) < 0)
            operator delete(v360[0][1]);
          v307 = v306;
          v308 = 0x1012C404EF22A49;
          goto LABEL_509;
        }
      }
      break;
    case 3:
      v309 = (unint64_t *)v360[0];
      do
      {
        v310 = __ldaxr(v309);
        v311 = v310 - 1;
      }
      while (__stlxr(v311, v309));
      if (!v311)
      {
        v312 = v360[0];
        if (v360[0])
        {
          v313 = v360[0][1];
          if (v313)
          {
            v360[0][2] = v313;
            operator delete(v313);
          }
          v307 = v312;
          v308 = 0x1080C409938AC02;
          goto LABEL_509;
        }
      }
      break;
    case 4:
      v314 = (unint64_t *)v360[0];
      do
      {
        v315 = __ldaxr(v314);
        v316 = v315 - 1;
      }
      while (__stlxr(v316, v314));
      if (!v316)
      {
        v317 = v360[0];
        if (v360[0])
        {
          v333 = (std::string *)(v360[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
          goto LABEL_493;
        }
      }
      break;
    case 5:
      v318 = (unint64_t *)v360[0];
      do
      {
        v319 = __ldaxr(v318);
        v320 = v319 - 1;
      }
      while (__stlxr(v320, v318));
      if (!v320)
      {
        v317 = v360[0];
        if (v360[0])
        {
          v333 = (std::string *)(v360[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
LABEL_493:
          v307 = v317;
          v308 = 0x1020C405E66F15BLL;
          goto LABEL_509;
        }
      }
      break;
    case 8:
      v321 = (unint64_t *)v360[0];
      do
      {
        v322 = __ldaxr(v321);
        v323 = v322 - 1;
      }
      while (__stlxr(v323, v321));
      if (!v323)
      {
        v324 = v360[0];
        if (v360[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v360[0] + 2);
          v307 = v324;
          v325 = -235920773;
          goto LABEL_508;
        }
      }
      break;
    case 9:
      v326 = (unint64_t *)v360[0];
      do
      {
        v327 = __ldaxr(v326);
        v328 = v327 - 1;
      }
      while (__stlxr(v328, v326));
      if (!v328)
      {
        v329 = v360[0];
        if (v360[0])
        {
          v330 = v360[0][6];
          if (v330)
          {
            v360[0][7] = v330;
            operator delete(v330);
          }
          v331 = v329[3];
          if (v331)
          {
            v329[4] = v331;
            operator delete(v331);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v329 + 1));
          v307 = v329;
          v325 = 2071181815;
LABEL_508:
          v308 = v325 | 0x1030C4000000000;
LABEL_509:
          MEMORY[0x219A19A08](v307, v308);
        }
      }
      break;
    default:
      break;
  }
  memset(v360, 0, 13);
  v333 = &v347;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  turi::option_manager::set_options(a1 + 224, a2);
  v332 = (_QWORD *)turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
  turi::flexmap_to_varmap(v332, (uint64_t)&v341);
  turi::ml_model_base::add_or_update_state(a1, &v341);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v341, (char *)v341.__r_.__value_.__l.__size_);
}

void sub_218578E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, int a19, char a20,uint64_t a21,int a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,char a39,void *a40,int a41,char a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,int a48,char a49)
{
  uint64_t v49;
  uint64_t v50;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;

  MEMORY[0x219A19A08](v49, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v50 - 124))
  {
    case 2:
      v52 = *(unint64_t **)(v50 - 136);
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = *(_QWORD *)(v50 - 136);
        if (v55)
        {
          if (*(char *)(v55 + 31) < 0)
            operator delete(*(void **)(v55 + 8));
          MEMORY[0x219A19A08](v55, 0x1012C404EF22A49);
        }
      }
      goto LABEL_40;
    case 3:
      v56 = *(unint64_t **)(v50 - 136);
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (v58)
        goto LABEL_40;
      v59 = *(_QWORD **)(v50 - 136);
      if (!v59)
        goto LABEL_39;
      v60 = (void *)v59[1];
      if (v60)
      {
        v59[2] = v60;
        operator delete(v60);
      }
      v61 = v59;
      v62 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v63 = *(unint64_t **)(v50 - 136);
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (v65)
        goto LABEL_40;
      v66 = *(_QWORD *)(v50 - 136);
      if (!v66)
        goto LABEL_39;
      a9 = (void **)(v66 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
      goto LABEL_26;
    case 5:
      v67 = *(unint64_t **)(v50 - 136);
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (v69)
        goto LABEL_40;
      v66 = *(_QWORD *)(v50 - 136);
      if (!v66)
        goto LABEL_39;
      a9 = (void **)(v66 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
LABEL_26:
      v61 = (_QWORD *)v66;
      v62 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v70 = *(unint64_t **)(v50 - 136);
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (v72)
        goto LABEL_40;
      v73 = *(_QWORD *)(v50 - 136);
      if (!v73)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v73 + 16));
      v61 = (_QWORD *)v73;
      v74 = -235920773;
      goto LABEL_37;
    case 9:
      v75 = *(unint64_t **)(v50 - 136);
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (v77)
        goto LABEL_40;
      v78 = *(_QWORD **)(v50 - 136);
      if (!v78)
        goto LABEL_39;
      v61 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v78);
      v74 = 2071181815;
LABEL_37:
      v62 = v74 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v61, v62);
LABEL_39:
      *(_QWORD *)(v50 - 136) = 0;
LABEL_40:
      *(_QWORD *)(v50 - 136) = 0;
      *(_DWORD *)(v50 - 128) = 0;
      *(_BYTE *)(v50 - 124) = 0;
      a9 = &a40;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
      if (a17 < 0)
        operator delete(__p);
      if (a29 < 0)
        operator delete(a24);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void turi::supervised::logistic_regression::train(turi::supervised::logistic_regression *this)
{
  _BYTE *v2;
  uint64_t size;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  unsigned int *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *option_value;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type v33;
  unsigned int *v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  unsigned int *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t **v43;
  _QWORD *v44;
  _QWORD *v45;
  void **v46;
  _QWORD *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  _QWORD *v51;
  std::string::size_type v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  std::string::size_type v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  _QWORD *v65;
  std::string::size_type v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  std::string::size_type v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  unint64_t v77;
  std::runtime_error *exception;
  std::string *v79;
  __int128 v80;
  std::runtime_error *v81;
  std::string *v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  std::string::size_type v89;
  std::string::size_type v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::string::size_type v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  std::string::size_type v99;
  void *v100;
  void *v101;
  unsigned int v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  std::string::size_type v106;
  void *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  std::string::size_type v114;
  unint64_t v115;
  char *v116;
  char *v117;
  unint64_t v118;
  int64_t v119;
  unint64_t v120;
  int *v121;
  file_logger *v122;
  uint64_t v123;
  _QWORD *v124;
  _BYTE *v125;
  const std::locale::facet *v126;
  _QWORD *v127;
  int *v128;
  file_logger *v129;
  file_logger *started;
  _QWORD *v131;
  uint64_t v132;
  float64x2_t *v133;
  float64x2_t *v134;
  unint64_t v135;
  int64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int *v141;
  double v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  char **v148;
  char *v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  std::string::size_type v155;
  unsigned int *v156;
  unsigned int v157;
  __int128 v158;
  __int128 v159;
  float v160;
  int *v161;
  double v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  char **v168;
  char *v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  std::string::size_type v175;
  unsigned int *v176;
  unsigned int v177;
  __int128 v178;
  __int128 v179;
  float v180;
  __n128 v181;
  uint64_t v182;
  float v183;
  char *v184;
  uint64_t v185;
  int64_t v186;
  int64_t v187;
  float64x2_t *v188;
  float64x2_t *v189;
  float64x2_t v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  double *f64;
  double *v195;
  double v196;
  float v197;
  double v198;
  char *v199;
  uint64_t v200;
  int64_t v201;
  int64_t v202;
  float64x2_t *v203;
  float64x2_t *v204;
  float64x2_t v205;
  BOOL v206;
  uint64_t v207;
  uint64_t v208;
  double *v209;
  double *v210;
  double v211;
  _QWORD *v212;
  turi::flexible_type_impl *v213;
  std::string::size_type *v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  std::string::size_type v218;
  std::string *v219;
  __n128 v220;
  const char *v221;
  std::string *v224;
  int data;
  int v226;
  std::string *v228;
  int v229;
  int v230;
  BOOL v231;
  uint64_t v232;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  std::string::size_type v237;
  std::string::size_type v238;
  __int128 v239;
  void *v240;
  __int128 v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::string *v247;
  int v249;
  int v250;
  uint64_t v252;
  unint64_t *p_shared_owners;
  unint64_t v254;
  std::string::size_type v255;
  std::string::size_type v256;
  __int128 v257;
  void *v258;
  __int128 v259;
  unint64_t *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::string::size_type v264;
  std::string::size_type v265;
  __int128 v266;
  void *v267;
  __int128 v268;
  unint64_t *v269;
  _QWORD *v270;
  __int128 *v271;
  uint64_t v272;
  _OWORD *v273;
  uint64_t v274;
  int64_t v275;
  int64_t v276;
  _OWORD *v277;
  __int128 *v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  _QWORD *v283;
  uint64_t v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  char v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unsigned int *v301;
  turi::unity_sframe *v302;
  unsigned int *v303;
  turi::unity_sframe *v304;
  unsigned int *v305;
  unsigned int *v306;
  unsigned int *v307;
  unsigned int *v308;
  unsigned int *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  unsigned int *v315;
  unsigned int *v316;
  std::__shared_weak_count *v317;
  uint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::string::size_type v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  void *v351;
  void *v352;
  unsigned int v353;
  unint64_t *v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  void *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  std::string *v367;
  std::string::size_type v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  std::bad_alloc *v372;
  std::bad_alloc *v373;
  std::bad_alloc *v374;
  std::bad_alloc *v375;
  _QWORD *v376;
  std::string *v377;
  std::string::size_type v378;
  _QWORD *v379;
  _QWORD *v380;
  _QWORD *v381;
  _QWORD *v382;
  _QWORD *v383;
  std::runtime_error *v384;
  std::string *v385;
  __int128 v386;
  std::runtime_error *v387;
  std::string *v388;
  __int128 v389;
  uint64_t v390;
  __n128 v391;
  turi::unity_sframe *v392;
  std::__shared_weak_count *v393;
  void *v394;
  std::__shared_weak_count *v395;
  char v396;
  turi::unity_sframe *v397;
  std::__shared_weak_count *v398;
  uint64_t *v399;
  std::__shared_weak_count *v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  uint64_t *v407[3];
  size_t __idx[2];
  _QWORD v409[11];
  char v410;
  uint64_t v411;
  std::string v412;
  uint64_t v413;
  std::__shared_weak_count *v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  void *v417;
  uint64_t v418;
  void *v419;
  uint64_t v420;
  void *v421[2];
  char v422;
  void *v423;
  unint64_t v424;
  uint64_t *v425;
  uint64_t *v426;
  void **v427;
  void *v428[2];
  char v429;
  std::string v430;
  std::string v431;
  void *v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  _BYTE v436[296];
  std::string __p[2];
  void *v438[3];
  __int128 v439;
  __int128 v440;
  _BYTE v441[24];
  uint64_t v442;
  uint64_t v443;
  char v444;
  uint64_t v445;

  v445 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v428, "simple_mode");
  v2 = (_BYTE *)turi::option_manager::value((uint64_t)this + 224, (const void **)v428);
  size = 0;
  switch(v2[12])
  {
    case 0:
      size = *(_QWORD *)v2;
      goto LABEL_29;
    case 1:
      size = (uint64_t)*(double *)v2;
      goto LABEL_29;
    case 2:
      v7 = *(_QWORD *)v2;
      v8 = (char **)(*(_QWORD *)v2 + 8);
      __idx[0] = 0;
      v9 = (char *)v8;
      if (*(char *)(v7 + 31) < 0)
        v9 = *v8;
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      size = std::stoll(__p, __idx, 10);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (*(char *)(v7 + 31) < 0)
        v10 = *(_QWORD *)(v7 + 16);
      else
        v10 = *(unsigned __int8 *)(v7 + 31);
      if (__idx[0] != v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v79 = std::string::append(&v430, " cannot be interpreted as an integer");
        v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        __p[0].__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, __p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v4 = *(_QWORD *)v2;
      memset(__p, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(_QWORD *)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      goto LABEL_28;
    case 4:
      v11 = *(_QWORD *)v2;
      memset(__p, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v430.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
      goto LABEL_28;
    case 5:
      v12 = *(_QWORD *)v2;
      memset(__p, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v430.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
      goto LABEL_28;
    case 6:
      size = (uint64_t)(*(_QWORD *)v2 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v13 = *(_QWORD *)v2;
      v14 = *(_QWORD *)(*(_QWORD *)v2 + 16);
      __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v2 + 8);
      __p[0].__r_.__value_.__l.__size_ = v14;
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = *(_OWORD *)(v13 + 24);
      v18 = *(_OWORD *)(v13 + 56);
      *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v13 + 40);
      *(_OWORD *)v438 = v18;
      *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v17;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[0].__r_.__value_.__l.__size_);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v2 + 8);
      turi::flexible_type_fail(0);
      if (__p[1].__r_.__value_.__r.__words[2])
      {
        v438[0] = (void *)__p[1].__r_.__value_.__r.__words[2];
        operator delete((void *)__p[1].__r_.__value_.__r.__words[2]);
      }
      if (__p[0].__r_.__value_.__r.__words[2])
      {
        __p[1].__r_.__value_.__r.__words[0] = __p[0].__r_.__value_.__r.__words[2];
        operator delete((void *)__p[0].__r_.__value_.__r.__words[2]);
      }
      size = __p[0].__r_.__value_.__l.__size_;
      if (!__p[0].__r_.__value_.__l.__size_)
        goto LABEL_29;
      v5 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)size + 16))(size);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
      }
LABEL_28:
      size = 0;
LABEL_29:
      *((_BYTE *)this + 392) = size != 0;
      if (v429 < 0)
        operator delete(v428[0]);
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_573:
      __break(1u);
      return;
  }
  v20 = *((_QWORD *)this + 56);
  v19 = *((_QWORD *)this + 57);
  std::string::basic_string[abi:ne180100]<0>(v428, "feature_rescaling");
  option_value = (_BYTE *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)v428);
  v22 = 0;
  switch(option_value[12])
  {
    case 0:
      v22 = *(_QWORD *)option_value;
      goto LABEL_59;
    case 1:
      v22 = (uint64_t)*(double *)option_value;
      goto LABEL_59;
    case 2:
      v26 = *(_QWORD *)option_value;
      v27 = (char **)(*(_QWORD *)option_value + 8);
      __idx[0] = 0;
      v28 = (char *)v27;
      if (*(char *)(v26 + 31) < 0)
        v28 = *v27;
      std::string::basic_string[abi:ne180100]<0>(__p, v28);
      v22 = std::stoll(__p, __idx, 10);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (*(char *)(v26 + 31) < 0)
        v29 = *(_QWORD *)(v26 + 16);
      else
        v29 = *(unsigned __int8 *)(v26 + 31);
      if (__idx[0] != v29)
      {
        v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v82 = std::string::append(&v430, " cannot be interpreted as an integer");
        v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        __p[0].__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v81, __p);
        __cxa_throw(v81, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_59;
    case 3:
      v23 = *(_QWORD *)option_value;
      memset(__p, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v23 + 8), *(_QWORD *)(v23 + 16), (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      goto LABEL_58;
    case 4:
      v30 = *(_QWORD *)option_value;
      memset(__p, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(_QWORD *)(v30 + 16) - *(_QWORD *)(v30 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v430.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
      goto LABEL_58;
    case 5:
      v31 = *(_QWORD *)option_value;
      memset(__p, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v430.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
      goto LABEL_58;
    case 6:
      v22 = (uint64_t)(*(_QWORD *)option_value << 8) >> 8;
      goto LABEL_59;
    case 7:
      goto LABEL_59;
    case 8:
      v32 = *(_QWORD *)option_value;
      v33 = *(_QWORD *)(*(_QWORD *)option_value + 16);
      __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)option_value + 8);
      __p[0].__r_.__value_.__l.__size_ = v33;
      if (v33)
      {
        v34 = (unsigned int *)(v33 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = *(_OWORD *)(v32 + 24);
      v37 = *(_OWORD *)(v32 + 56);
      *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v32 + 40);
      *(_OWORD *)v438 = v37;
      *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v36;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[0].__r_.__value_.__l.__size_);
      goto LABEL_58;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)option_value + 8);
      turi::flexible_type_fail(0);
      if (__p[1].__r_.__value_.__r.__words[2])
      {
        v438[0] = (void *)__p[1].__r_.__value_.__r.__words[2];
        operator delete((void *)__p[1].__r_.__value_.__r.__words[2]);
      }
      if (__p[0].__r_.__value_.__r.__words[2])
      {
        __p[1].__r_.__value_.__r.__words[0] = __p[0].__r_.__value_.__r.__words[2];
        operator delete((void *)__p[0].__r_.__value_.__r.__words[2]);
      }
      v22 = __p[0].__r_.__value_.__l.__size_;
      if (!__p[0].__r_.__value_.__l.__size_)
        goto LABEL_59;
      v24 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
      }
LABEL_58:
      v22 = 0;
LABEL_59:
      if (v429 < 0)
      {
        operator delete(v428[0]);
        if (!v22)
          goto LABEL_64;
      }
      else if (!v22)
      {
        goto LABEL_64;
      }
      turi::supervised::logistic_regression_opt_interface::init_feature_rescaling(*((turi::supervised::logistic_regression_opt_interface **)this
                                                                                  + 50));
LABEL_64:
      turi::supervised::get_class_weights_from_options((uint64_t)this + 224, (uint64_t)this + 376, &v443);
      v430.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v430.__r_.__value_.__r.__words[1]) = 0;
      v430.__r_.__value_.__s.__data_[12] = 0;
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v430, &v443);
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 5) = *(std::string::size_type *)((char *)v430.__r_.__value_.__r.__words + 5);
      __p[0].__r_.__value_.__l.__size_ = v430.__r_.__value_.__r.__words[0];
      __p[0].__r_.__value_.__s.__data_[20] = v430.__r_.__value_.__s.__data_[12];
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v430, "class_weights");
      __idx[0] = (size_t)&v430;
      v38 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v430.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__idx);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v38 + 14, (unsigned int *)__p);
      if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v430.__r_.__value_.__l.__data_);
      v390 = v20;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(&v425, *((_QWORD *)this + 56));
      v39 = *(_QWORD **)(v443 + 8);
      v40 = *(_QWORD **)(v443 + 16);
      if (v39 != v40)
      {
        v41 = 0;
        do
        {
          v430.__r_.__value_.__r.__words[0] = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(*(void ***)(*(_QWORD *)(*((_QWORD *)this + 47) + 24) + 32), (const turi::flexible_type *)&v39[v41]);
          v42 = &v39[v41 + 2];
          std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<unsigned long,double const&,0>(__p, &v430, v42);
          std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)&v425[v41], (uint64_t *)__p);
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)__p);
          v41 += 4;
        }
        while (v42 + 2 != v40);
      }
      v43 = (uint64_t **)*((_QWORD *)this + 50);
      *(std::string::size_type *)((char *)v430.__r_.__value_.__r.__words + 5) = 0x500000000000000;
      v430.__r_.__value_.__r.__words[0] = 0;
      v44 = (_QWORD *)operator new();
      v45 = v44;
      *v44 = 0;
      v44[1] = 0;
      v46 = (void **)(v44 + 1);
      v44[2] = 0;
      v44[3] = 0;
      v430.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
      *v44 = 1;
      switch(v430.__r_.__value_.__s.__data_[12])
      {
        case 2:
          if (*v44 != 1)
          {
            v47 = (_QWORD *)operator new();
            v48 = v430.__r_.__value_.__r.__words[0];
            *v47 = *(_QWORD *)v430.__r_.__value_.__l.__data_;
            v49 = (std::string *)(v47 + 1);
            if (*(char *)(v48 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
            }
            else
            {
              v50 = *(_OWORD *)(v48 + 8);
              v47[3] = *(_QWORD *)(v48 + 24);
              *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
            }
            v430.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
            *v47 = 1;
            do
            {
              v84 = __ldaxr(v45);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v45));
            if (!v85)
            {
              v55 = 0x1012C404EF22A49;
              if ((*((char *)v45 + 31) & 0x80000000) == 0)
                goto LABEL_115;
              v64 = *v46;
              goto LABEL_114;
            }
          }
          break;
        case 3:
          if (*v44 != 1)
          {
            v60 = (_QWORD *)operator new();
            v61 = v430.__r_.__value_.__r.__words[0];
            *v60 = *(_QWORD *)v430.__r_.__value_.__l.__data_;
            v60[2] = 0;
            v60[3] = 0;
            v60[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v60 + 1, *(const void **)(v61 + 8), *(_QWORD *)(v61 + 16), (uint64_t)(*(_QWORD *)(v61 + 16) - *(_QWORD *)(v61 + 8)) >> 3);
            v430.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
            *v60 = 1;
            do
            {
              v62 = __ldaxr(v45);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v45));
            if (!v63)
            {
              v55 = 0x1080C409938AC02;
              v64 = *v46;
              if (*v46)
              {
                v45[2] = v64;
LABEL_114:
                operator delete(v64);
              }
              goto LABEL_115;
            }
          }
          break;
        case 4:
          if (*v44 != 1)
          {
            v51 = (_QWORD *)operator new();
            v52 = v430.__r_.__value_.__r.__words[0];
            *v51 = *(_QWORD *)v430.__r_.__value_.__l.__data_;
            v51[2] = 0;
            v51[3] = 0;
            v51[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v51 + 1, *(uint64_t **)(v52 + 8), *(uint64_t **)(v52 + 16), (uint64_t)(*(_QWORD *)(v52 + 16) - *(_QWORD *)(v52 + 8)) >> 4);
            v430.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
            *v51 = 1;
            do
            {
              v53 = __ldaxr(v45);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v45));
            if (!v54)
            {
              v55 = 0x1020C405E66F15BLL;
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_115;
            }
          }
          break;
        case 5:
          if (*v44 != 1)
          {
            v65 = (_QWORD *)operator new();
            v66 = v430.__r_.__value_.__r.__words[0];
            *v65 = *(_QWORD *)v430.__r_.__value_.__l.__data_;
            v65[2] = 0;
            v65[3] = 0;
            v65[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v65 + 1, *(uint64_t **)(v66 + 8), *(uint64_t **)(v66 + 16), (uint64_t)(*(_QWORD *)(v66 + 16) - *(_QWORD *)(v66 + 8)) >> 5);
            v430.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
            *v65 = 1;
            do
            {
              v67 = __ldaxr(v45);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v45));
            if (!v68)
            {
              v55 = 0x1020C405E66F15BLL;
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_115;
            }
          }
          break;
        case 8:
          if (*v44 != 1)
          {
            v69 = operator new();
            v70 = v430.__r_.__value_.__r.__words[0];
            *(_QWORD *)v69 = *(_QWORD *)v430.__r_.__value_.__l.__data_;
            *(_QWORD *)(v69 + 8) = *(_QWORD *)(v70 + 8);
            v71 = *(_QWORD *)(v70 + 16);
            *(_QWORD *)(v69 + 16) = v71;
            if (v71)
            {
              v72 = (unsigned int *)(v71 + 8);
              do
                v73 = __ldxr(v72);
              while (__stxr(v73 + 1, v72));
            }
            v74 = *(_OWORD *)(v70 + 24);
            v75 = *(_OWORD *)(v70 + 40);
            *(_OWORD *)(v69 + 56) = *(_OWORD *)(v70 + 56);
            *(_OWORD *)(v69 + 40) = v75;
            *(_OWORD *)(v69 + 24) = v74;
            v430.__r_.__value_.__r.__words[0] = v69;
            *(_QWORD *)v69 = 1;
            do
            {
              v76 = __ldaxr(v45);
              v77 = v76 - 1;
            }
            while (__stlxr(v77, v45));
            if (!v77)
            {
              v55 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v45 + 2);
              goto LABEL_115;
            }
          }
          break;
        case 9:
          if (*v44 != 1)
          {
            v56 = (_QWORD *)operator new();
            v57 = v430.__r_.__value_.__r.__words[0] + 8;
            *v56 = *(_QWORD *)v430.__r_.__value_.__l.__data_;
            turi::flexible_type_impl::ndarray<double>::ndarray(v56 + 1, v57);
            v430.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
            *v56 = 1;
            do
            {
              v58 = __ldaxr(v45);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v45));
            if (!v59)
            {
              v55 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v45);
LABEL_115:
              MEMORY[0x219A19A08](v45, v55);
            }
          }
          break;
        default:
          break;
      }
      if ((uint64_t **)(v430.__r_.__value_.__r.__words[0] + 8) != &v425)
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v430.__r_.__value_.__r.__words[0] + 8), v425, v426, ((char *)v426 - (char *)v425) >> 5);
      turi::supervised::logistic_regression_opt_interface::set_class_weights(v43, (const turi::flexible_type *)&v430);
      switch(v430.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v86 = (unint64_t *)v430.__r_.__value_.__r.__words[0];
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (!v88)
          {
            v89 = v430.__r_.__value_.__r.__words[0];
            if (v430.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v430.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v430.__r_.__value_.__r.__words[0] + 8));
              v90 = v89;
              v91 = 0x1012C404EF22A49;
              goto LABEL_159;
            }
          }
          break;
        case 3:
          v103 = (unint64_t *)v430.__r_.__value_.__r.__words[0];
          do
          {
            v104 = __ldaxr(v103);
            v105 = v104 - 1;
          }
          while (__stlxr(v105, v103));
          if (!v105)
          {
            v106 = v430.__r_.__value_.__r.__words[0];
            if (v430.__r_.__value_.__r.__words[0])
            {
              v107 = *(void **)(v430.__r_.__value_.__r.__words[0] + 8);
              if (v107)
              {
                *(_QWORD *)(v430.__r_.__value_.__r.__words[0] + 16) = v107;
                operator delete(v107);
              }
              v90 = v106;
              v91 = 0x1080C409938AC02;
              goto LABEL_159;
            }
          }
          break;
        case 4:
          v92 = (unint64_t *)v430.__r_.__value_.__r.__words[0];
          do
          {
            v93 = __ldaxr(v92);
            v94 = v93 - 1;
          }
          while (__stlxr(v94, v92));
          if (!v94)
          {
            v95 = v430.__r_.__value_.__r.__words[0];
            if (v430.__r_.__value_.__r.__words[0])
            {
              __p[0].__r_.__value_.__r.__words[0] = v430.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_152;
            }
          }
          break;
        case 5:
          v108 = (unint64_t *)v430.__r_.__value_.__r.__words[0];
          do
          {
            v109 = __ldaxr(v108);
            v110 = v109 - 1;
          }
          while (__stlxr(v110, v108));
          if (!v110)
          {
            v95 = v430.__r_.__value_.__r.__words[0];
            if (v430.__r_.__value_.__r.__words[0])
            {
              __p[0].__r_.__value_.__r.__words[0] = v430.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_152:
              v90 = v95;
              v91 = 0x1020C405E66F15BLL;
              goto LABEL_159;
            }
          }
          break;
        case 8:
          v111 = (unint64_t *)v430.__r_.__value_.__r.__words[0];
          do
          {
            v112 = __ldaxr(v111);
            v113 = v112 - 1;
          }
          while (__stlxr(v113, v111));
          if (!v113)
          {
            v114 = v430.__r_.__value_.__r.__words[0];
            if (v430.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v430.__r_.__value_.__r.__words[0] + 16));
              v90 = v114;
              v102 = -235920773;
              goto LABEL_158;
            }
          }
          break;
        case 9:
          v96 = (unint64_t *)v430.__r_.__value_.__r.__words[0];
          do
          {
            v97 = __ldaxr(v96);
            v98 = v97 - 1;
          }
          while (__stlxr(v98, v96));
          if (!v98)
          {
            v99 = v430.__r_.__value_.__r.__words[0];
            if (v430.__r_.__value_.__r.__words[0])
            {
              v100 = *(void **)(v430.__r_.__value_.__r.__words[0] + 48);
              if (v100)
              {
                *(_QWORD *)(v430.__r_.__value_.__r.__words[0] + 56) = v100;
                operator delete(v100);
              }
              v101 = *(void **)(v99 + 24);
              if (v101)
              {
                *(_QWORD *)(v99 + 32) = v101;
                operator delete(v101);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v99 + 8);
              v90 = v99;
              v102 = 2071181815;
LABEL_158:
              v91 = v102 | 0x1030C4000000000;
LABEL_159:
              MEMORY[0x219A19A08](v90, v91);
            }
          }
          break;
        default:
          break;
      }
      v424 = 0;
      v423 = 0;
      v115 = *((_QWORD *)this + 57);
      if (v115)
      {
        if (v115 >> 61 || (v116 = (char *)malloc_type_malloc(8 * v115, 0x1E76AA36uLL), (v117 = v116) == 0))
        {
          v372 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v373 = std::bad_alloc::bad_alloc(v372);
          __cxa_throw(v373, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        v423 = v116;
        v424 = v115;
        v118 = v115 >> 1;
        v119 = v115 & 0xFFFFFFFFFFFFFFFELL;
        if (v115 >= 2)
        {
          v120 = 2;
          if (v119 > 2)
            v120 = v115 & 0xFFFFFFFFFFFFFFFELL;
          bzero(v116, ((8 * v120 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
      }
      else
      {
        v119 = 0;
        v118 = 0;
        v117 = 0;
        v424 = 0;
      }
      if (v119 < v115)
        bzero(&v117[16 * v118], 8 * v115 - 16 * v118);
      if (!*((_BYTE *)this + 392))
      {
        std::string::basic_string[abi:ne180100]<0>(v421, "Logistic regression");
        turi::supervised::supervised_learning_model_base::display_classifier_training_summary(this, (uint64_t)v421, *((unsigned __int8 *)this + 392));
        if (v422 < 0)
          operator delete(v421[0]);
        if (*((_BYTE *)this + 392))
          goto LABEL_190;
        v128 = (int *)global_logger();
        if (v128[169] > 4)
          goto LABEL_190;
        if (!cppipc::must_cancel((cppipc *)v128))
        {
          v129 = (file_logger *)global_logger();
          started = file_logger::start_stream(v129, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression.cpp", "train", 219, 1);
          v131 = pthread_getspecific(*((_QWORD *)started + 74));
          if (v131 && *((_BYTE *)v131 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131 + 2, (uint64_t)"Number of coefficients      : ", 30);
          v123 = file_logger::operator<<<unsigned long>((uint64_t)started);
          v125 = pthread_getspecific(*(_QWORD *)(v123 + 592));
          if (!v125 || !v125[280])
            goto LABEL_190;
LABEL_178:
          std::ios_base::getloc((const std::ios_base *)&v125[*(_QWORD *)(*((_QWORD *)v125 + 2) - 24) + 16]);
          v126 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v126->__vftable[2].~facet_0)(v126, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v123);
          if (*(_DWORD *)(v123 + 600) == 7)
          {
            __print_back_trace();
            v127 = __cxa_allocate_exception(8uLL);
            *v127 = "LOG_FATAL encountered";
            __cxa_throw(v127, MEMORY[0x24BEDB718], 0);
          }
          goto LABEL_190;
        }
LABEL_560:
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      v121 = (int *)global_logger();
      if (v121[169] <= 4)
      {
        if (!cppipc::must_cancel((cppipc *)v121))
        {
          v122 = (file_logger *)global_logger();
          v123 = (uint64_t)file_logger::start_stream(v122, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression.cpp", "train", 224, 1);
          v124 = pthread_getspecific(*(_QWORD *)(v123 + 592));
          if (v124 && *((_BYTE *)v124 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124 + 2, (uint64_t)"Beginning model training on processed features. ", 48);
          v125 = pthread_getspecific(*(_QWORD *)(v123 + 592));
          if (!v125 || !v125[280])
            goto LABEL_190;
          goto LABEL_178;
        }
        goto LABEL_560;
      }
LABEL_190:
      v132 = *((_QWORD *)this + 57);
      if (v132)
      {
        if ((unint64_t)v132 >> 61
          || (v133 = (float64x2_t *)malloc_type_malloc(8 * v132, 0x1E76AA36uLL), (v134 = v133) == 0))
        {
          v374 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v375 = std::bad_alloc::bad_alloc(v374);
          __cxa_throw(v375, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        v135 = (unint64_t)v132 >> 1;
        v136 = v132 & 0xFFFFFFFFFFFFFFFELL;
        if ((unint64_t)v132 >= 2)
        {
          v137 = 2;
          if (v136 > 2)
            v137 = v132 & 0xFFFFFFFFFFFFFFFELL;
          memset_pattern16(v133, &unk_218712770, ((8 * v137 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
      }
      else
      {
        v136 = 0;
        v135 = 0;
        v134 = 0;
      }
      if (v136 < (unint64_t)v132)
        memset_pattern16(&v134[v135], &unk_218712770, 8 * v132 - 16 * v135);
      v138 = *((_QWORD *)this + 56);
      if (v138 >= 2)
      {
        v139 = v138 - 1;
        v140 = 1;
        do
        {
          v134->f64[v140 * (v19 / (v390 - 1)) - 1] = 0.0;
          ++v140;
          --v139;
        }
        while (v139);
      }
      std::string::basic_string[abi:ne180100]<0>(v428, "l1_penalty");
      v141 = (int *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)v428);
      v142 = 0.0;
      switch(*((_BYTE *)v141 + 12))
      {
        case 0:
          v142 = (double)*(uint64_t *)v141;
          goto LABEL_233;
        case 1:
          v142 = *(double *)v141;
          goto LABEL_233;
        case 2:
          v147 = *(_QWORD *)v141;
          v148 = (char **)(*(_QWORD *)v141 + 8);
          __idx[0] = 0;
          v149 = (char *)v148;
          if (*(char *)(v147 + 31) < 0)
            v149 = *v148;
          std::string::basic_string[abi:ne180100]<0>(__p, v149);
          v150 = std::stod(__p, __idx);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          if (*(char *)(v147 + 31) < 0)
            v151 = *(_QWORD *)(v147 + 16);
          else
            v151 = *(unsigned __int8 *)(v147 + 31);
          if (__idx[0] != v151)
          {
            v384 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v385 = std::string::append(&v430, " cannot be interpreted as a float");
            v386 = *(_OWORD *)&v385->__r_.__value_.__l.__data_;
            __p[0].__r_.__value_.__r.__words[2] = v385->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v386;
            v385->__r_.__value_.__l.__size_ = 0;
            v385->__r_.__value_.__r.__words[2] = 0;
            v385->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v384, __p);
            __cxa_throw(v384, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v160 = v150;
          v142 = v160;
          goto LABEL_233;
        case 3:
          v143 = *(_QWORD *)v141;
          memset(__p, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v143 + 8), *(_QWORD *)(v143 + 16), (uint64_t)(*(_QWORD *)(v143 + 16) - *(_QWORD *)(v143 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0].__r_.__value_.__r.__words[0])
          {
            __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          goto LABEL_233;
        case 4:
          v152 = *(_QWORD *)v141;
          memset(__p, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v152 + 8), *(uint64_t **)(v152 + 16), (uint64_t)(*(_QWORD *)(v152 + 16) - *(_QWORD *)(v152 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v430.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
          goto LABEL_233;
        case 5:
          v153 = *(_QWORD *)v141;
          memset(__p, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v153 + 8), *(uint64_t **)(v153 + 16), (uint64_t)(*(_QWORD *)(v153 + 16) - *(_QWORD *)(v153 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v430.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
          goto LABEL_233;
        case 6:
          v142 = (double)v141[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v141 << 8) >> 8);
          goto LABEL_233;
        case 7:
          goto LABEL_233;
        case 8:
          v154 = *(_QWORD *)v141;
          v155 = *(_QWORD *)(*(_QWORD *)v141 + 16);
          __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v141 + 8);
          __p[0].__r_.__value_.__l.__size_ = v155;
          if (v155)
          {
            v156 = (unsigned int *)(v155 + 8);
            do
              v157 = __ldxr(v156);
            while (__stxr(v157 + 1, v156));
          }
          v158 = *(_OWORD *)(v154 + 24);
          v159 = *(_OWORD *)(v154 + 56);
          *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v154 + 40);
          *(_OWORD *)v438 = v159;
          *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v158;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[0].__r_.__value_.__l.__size_);
          goto LABEL_233;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v141 + 8);
          turi::flexible_type_fail(0);
          if (__p[1].__r_.__value_.__r.__words[2])
          {
            v438[0] = (void *)__p[1].__r_.__value_.__r.__words[2];
            operator delete((void *)__p[1].__r_.__value_.__r.__words[2]);
          }
          if (__p[0].__r_.__value_.__r.__words[2])
          {
            __p[1].__r_.__value_.__r.__words[0] = __p[0].__r_.__value_.__r.__words[2];
            operator delete((void *)__p[0].__r_.__value_.__r.__words[2]);
          }
          v144 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
          if (__p[0].__r_.__value_.__l.__size_)
          {
            v145 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
LABEL_233:
          if (v429 < 0)
            operator delete(v428[0]);
          std::string::basic_string[abi:ne180100]<0>(v428, "l2_penalty");
          v161 = (int *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)v428);
          v162 = 0.0;
          switch(*((_BYTE *)v161 + 12))
          {
            case 0:
              v162 = (double)*(uint64_t *)v161;
              goto LABEL_265;
            case 1:
              v162 = *(double *)v161;
              goto LABEL_265;
            case 2:
              v167 = *(_QWORD *)v161;
              v168 = (char **)(*(_QWORD *)v161 + 8);
              __idx[0] = 0;
              v169 = (char *)v168;
              if (*(char *)(v167 + 31) < 0)
                v169 = *v168;
              std::string::basic_string[abi:ne180100]<0>(__p, v169);
              v170 = std::stod(__p, __idx);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              if (*(char *)(v167 + 31) < 0)
                v171 = *(_QWORD *)(v167 + 16);
              else
                v171 = *(unsigned __int8 *)(v167 + 31);
              if (__idx[0] != v171)
              {
                v387 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v388 = std::string::append(&v430, " cannot be interpreted as a float");
                v389 = *(_OWORD *)&v388->__r_.__value_.__l.__data_;
                __p[0].__r_.__value_.__r.__words[2] = v388->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v389;
                v388->__r_.__value_.__l.__size_ = 0;
                v388->__r_.__value_.__r.__words[2] = 0;
                v388->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v387, __p);
                __cxa_throw(v387, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v180 = v170;
              v162 = v180;
              goto LABEL_265;
            case 3:
              v163 = *(_QWORD *)v161;
              memset(__p, 0, 24);
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v163 + 8), *(_QWORD *)(v163 + 16), (uint64_t)(*(_QWORD *)(v163 + 16) - *(_QWORD *)(v163 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0].__r_.__value_.__r.__words[0])
              {
                __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              goto LABEL_265;
            case 4:
              v172 = *(_QWORD *)v161;
              memset(__p, 0, 24);
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v172 + 8), *(uint64_t **)(v172 + 16), (uint64_t)(*(_QWORD *)(v172 + 16) - *(_QWORD *)(v172 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v430.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
              goto LABEL_265;
            case 5:
              v173 = *(_QWORD *)v161;
              memset(__p, 0, 24);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v173 + 8), *(uint64_t **)(v173 + 16), (uint64_t)(*(_QWORD *)(v173 + 16) - *(_QWORD *)(v173 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v430.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
              goto LABEL_265;
            case 6:
              v162 = (double)v161[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v161 << 8) >> 8);
              goto LABEL_265;
            case 7:
              goto LABEL_265;
            case 8:
              v174 = *(_QWORD *)v161;
              v175 = *(_QWORD *)(*(_QWORD *)v161 + 16);
              __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v161 + 8);
              __p[0].__r_.__value_.__l.__size_ = v175;
              if (v175)
              {
                v176 = (unsigned int *)(v175 + 8);
                do
                  v177 = __ldxr(v176);
                while (__stxr(v177 + 1, v176));
              }
              v178 = *(_OWORD *)(v174 + 24);
              v179 = *(_OWORD *)(v174 + 56);
              *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v174 + 40);
              *(_OWORD *)v438 = v179;
              *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v178;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[0].__r_.__value_.__l.__size_);
              goto LABEL_265;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v161 + 8);
              turi::flexible_type_fail(0);
              if (__p[1].__r_.__value_.__r.__words[2])
              {
                v438[0] = (void *)__p[1].__r_.__value_.__r.__words[2];
                operator delete((void *)__p[1].__r_.__value_.__r.__words[2]);
              }
              if (__p[0].__r_.__value_.__r.__words[2])
              {
                __p[1].__r_.__value_.__r.__words[0] = __p[0].__r_.__value_.__r.__words[2];
                operator delete((void *)__p[0].__r_.__value_.__r.__words[2]);
              }
              v164 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
              if (__p[0].__r_.__value_.__l.__size_)
              {
                v165 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
                do
                  v166 = __ldaxr(v165);
                while (__stlxr(v166 - 1, v165));
                if (!v166)
                {
                  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                  std::__shared_weak_count::__release_weak(v164);
                }
              }
LABEL_265:
              if (v429 < 0)
                operator delete(v428[0]);
              v420 = 0;
              v419 = 0;
              Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v419, v132, 1);
              v182 = v132;
              if (v420 != v132)
              {
                Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v419, v132, 1);
                v182 = v420;
              }
              v183 = v142;
              v181.n128_f64[0] = v183;
              v184 = (char *)v419;
              if (v182 >= 0)
                v185 = v182;
              else
                v185 = v182 + 1;
              v186 = v185 & 0xFFFFFFFFFFFFFFFELL;
              if (v182 >= 2)
              {
                v187 = 0;
                v188 = (float64x2_t *)v419;
                v189 = v134;
                do
                {
                  v190 = *v189++;
                  *v188++ = vmulq_n_f64(v190, v181.n128_f64[0]);
                  v187 += 2;
                }
                while (v187 < v186);
              }
              v191 = v182 <= v186;
              v192 = v182 - v186;
              if (!v191)
              {
                v193 = v185 >> 1;
                f64 = v134[v185 >> 1].f64;
                v195 = (double *)&v184[16 * v193];
                do
                {
                  v196 = *f64++;
                  *v195++ = v196 * v181.n128_f64[0];
                  --v192;
                }
                while (v192);
              }
              v391 = v181;
              v418 = 0;
              v417 = 0;
              Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v417, v132, 1);
              if (v418 != v132)
              {
                Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v417, v132, 1);
                v132 = v418;
              }
              v197 = v162;
              v198 = v197;
              v199 = (char *)v417;
              if (v132 >= 0)
                v200 = v132;
              else
                v200 = v132 + 1;
              v201 = v200 & 0xFFFFFFFFFFFFFFFELL;
              if (v132 >= 2)
              {
                v202 = 0;
                v203 = (float64x2_t *)v417;
                v204 = v134;
                do
                {
                  v205 = *v204++;
                  *v203++ = vmulq_n_f64(v205, v198);
                  v202 += 2;
                }
                while (v202 < v201);
              }
              v206 = __OFSUB__(v132, v201);
              v207 = v132 - v201;
              if (!((v207 < 0) ^ v206 | (v207 == 0)))
              {
                v208 = v200 >> 1;
                v209 = v134[v200 >> 1].f64;
                v210 = (double *)&v199[16 * v208];
                do
                {
                  v211 = *v209++;
                  *v210++ = v211 * v198;
                  --v207;
                }
                while (v207);
              }
              v416 = 0;
              v414 = 0;
              v415 = 0;
              v413 = 0;
              v212 = (_QWORD *)operator new();
              if (v391.n128_f64[0] >= 1.0e-10)
              {
                turi::optimization::elastic_net::elastic_net(v212, (__int128 **)&v419, (__int128 **)&v417);
                std::shared_ptr<turi::optimization::regularizer_interface>::reset[abi:ne180100]<turi::optimization::elastic_net,void>(&v415, (uint64_t)v212);
              }
              else
              {
                turi::optimization::l2_norm::l2_norm(v212, (__int128 **)&v417);
                std::shared_ptr<turi::optimization::smooth_regularizer_interface>::reset[abi:ne180100]<turi::optimization::l2_norm,void>(&v413, (uint64_t)v212);
                std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v415, &v413);
              }
              break;
            default:
              goto LABEL_570;
          }
          break;
        default:
          goto LABEL_570;
      }
      std::string::basic_string[abi:ne180100]<0>(&v430, "solver");
      v213 = (turi::flexible_type_impl *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)&v430.__r_.__value_.__l.__data_);
      v214 = (std::string::size_type *)MEMORY[0x24BEDB7F0];
      v215 = MEMORY[0x24BEDB848];
      switch(*((_BYTE *)v213 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_301;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_301:
          __p[0].__r_.__value_.__r.__words[0] = *v214;
          v218 = v214[9];
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                    + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = v214[8];
          __p[0].__r_.__value_.__r.__words[2] = v218;
          __p[1].__r_.__value_.__r.__words[0] = v215 + 16;
          if ((v441[7] & 0x80000000) != 0)
            operator delete((void *)v440);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v442);
          goto LABEL_308;
        case 2:
          v216 = *(_QWORD *)v213;
          if (*(char *)(*(_QWORD *)v213 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v412, *(const std::string::value_type **)(v216 + 8), *(_QWORD *)(v216 + 16));
          }
          else
          {
            v217 = *(_OWORD *)(v216 + 8);
            v412.__r_.__value_.__r.__words[2] = *(_QWORD *)(v216 + 24);
            *(_OWORD *)&v412.__r_.__value_.__l.__data_ = v217;
          }
          goto LABEL_308;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v213 + 8));
          goto LABEL_308;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v213 + 8));
          goto LABEL_308;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v213 + 8));
          goto LABEL_308;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v213, &v412);
          goto LABEL_308;
        case 7:
          memset(&v412, 0, sizeof(v412));
          goto LABEL_308;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_308;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v213 + 8));
LABEL_308:
          if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v430.__r_.__value_.__l.__data_);
          if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v412.__r_.__value_.__l.__size_ != 4)
              goto LABEL_324;
            v219 = (std::string *)v412.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) != 4)
              goto LABEL_324;
            v219 = &v412;
          }
          if (LODWORD(v219->__r_.__value_.__l.__data_) == 1869903201)
          {
            if (*((_QWORD *)this + 57) < 0x1F5uLL)
            {
              v220 = v391;
              if (v391.n128_f64[0] <= 1.0e-10)
                v221 = "newton";
              else
                v221 = "fista";
            }
            else
            {
              v220 = v391;
              if (v391.n128_f64[0] > 1.0e-10)
                v221 = "fista";
              else
                v221 = "lbfgs";
            }
            MEMORY[0x219A19390](&v412, v221, v220);
          }
LABEL_324:
          std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[7],std::string&,0>((uint64_t)__p, "solver", &v412);
          std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&v430, __p, 1);
          turi::ml_model_base::set_options((uint64_t)this, &v430);
          std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v430, (_QWORD *)v430.__r_.__value_.__l.__size_);
          std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)__p);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__idx);
          if (v391.n128_f64[0] <= 1.0e-10)
            goto LABEL_347;
          if ((*((_BYTE *)&v412.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (HIBYTE(v412.__r_.__value_.__r.__words[2]) != 5)
            {
              if (HIBYTE(v412.__r_.__value_.__r.__words[2]) != 6)
                goto LABEL_358;
              if (LODWORD(v412.__r_.__value_.__l.__data_) != 1953981806
                || WORD2(v412.__r_.__value_.__r.__words[0]) != 28271)
              {
LABEL_349:
                v228 = &v412;
                goto LABEL_352;
              }
LABEL_561:
              v376 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v409, (uint64_t)"Solver '", 8);
              if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v377 = &v412;
              else
                v377 = (std::string *)v412.__r_.__value_.__r.__words[0];
              if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v378 = HIBYTE(v412.__r_.__value_.__r.__words[2]);
              else
                v378 = v412.__r_.__value_.__l.__size_;
              v379 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v376, (uint64_t)v377, v378);
              v380 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v379, (uint64_t)"' not compatible with L1-regularization. ", 41);
              v381 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v380, (uint64_t)"Try using the option solver='fista'.", 36);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v381);
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__idx;
              turi::supervised::logistic_regression::train(void)::$_0::operator()();
            }
            v224 = &v412;
            goto LABEL_343;
          }
          if (v412.__r_.__value_.__l.__size_ == 5)
          {
            v224 = (std::string *)v412.__r_.__value_.__r.__words[0];
LABEL_343:
            data = (int)v224->__r_.__value_.__l.__data_;
            v226 = v224->__r_.__value_.__s.__data_[4];
            if (data == 1734763116 && v226 == 115)
              goto LABEL_561;
LABEL_347:
            if ((*((_BYTE *)&v412.__r_.__value_.__s + 23) & 0x80) == 0)
            {
              if (HIBYTE(v412.__r_.__value_.__r.__words[2]) != 6)
                goto LABEL_358;
              goto LABEL_349;
            }
            goto LABEL_350;
          }
          if (v412.__r_.__value_.__l.__size_ == 6
            && *(_DWORD *)v412.__r_.__value_.__l.__data_ == 1953981806
            && *(_WORD *)(v412.__r_.__value_.__r.__words[0] + 4) == 28271)
          {
            goto LABEL_561;
          }
LABEL_350:
          if (v412.__r_.__value_.__l.__size_ != 6)
            goto LABEL_358;
          v228 = (std::string *)v412.__r_.__value_.__r.__words[0];
LABEL_352:
          v229 = (int)v228->__r_.__value_.__l.__data_;
          v230 = WORD2(v228->__r_.__value_.__r.__words[0]);
          v231 = v229 == 1953981806 && v230 == 28271;
          if (v231 && *((_QWORD *)this + 57) >= 0x2711uLL)
          {
            v382 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v409, (uint64_t)"Number of coefficients is too large for Newton method. ", 55);
            v383 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v382, (uint64_t)"Try using the option solver='lbfgs'.", 36);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v383);
            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__idx;
            turi::supervised::logistic_regression::train(void)::$_1::operator()();
          }
LABEL_358:
          LODWORD(__p[0].__r_.__value_.__l.__data_) = -1;
          *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = 0u;
          *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = 0u;
          memset(v438, 0, sizeof(v438));
          __p[0].__r_.__value_.__l.__size_ = 0xBFF0000000000000;
          v440 = 0uLL;
          turi::sframe::sframe((turi::sframe *)v441);
          v232 = turi::option_manager::current_option_values((turi::supervised::logistic_regression *)((char *)this + 224));
          std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)v407, v232);
          if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v412.__r_.__value_.__l.__size_ != 5)
            {
              if (v412.__r_.__value_.__l.__size_ == 6
                && *(_DWORD *)v412.__r_.__value_.__l.__data_ == 1953981806
                && *(_WORD *)(v412.__r_.__value_.__r.__words[0] + 4) == 28271)
              {
                goto LABEL_366;
              }
LABEL_551:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v430);
              v366 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v430, (uint64_t)"Solver ", 7);
              if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v367 = &v412;
              else
                v367 = (std::string *)v412.__r_.__value_.__r.__words[0];
              if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v368 = HIBYTE(v412.__r_.__value_.__r.__words[2]);
              else
                v368 = v412.__r_.__value_.__l.__size_;
              v369 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v366, (uint64_t)v367, v368);
              v370 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v369, (uint64_t)" is not supported.", 18);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v370);
              v371 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v430, (uint64_t)"Supported solvers are (auto, newton, lbfgs, fista)", 50);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v371);
              v428[0] = &v430;
              turi::supervised::logistic_regression::train(void)::$_2::operator()();
            }
            if (*(_DWORD *)v412.__r_.__value_.__l.__data_ != 1734763116
              || *(_BYTE *)(v412.__r_.__value_.__r.__words[0] + 4) != 115)
            {
              v247 = (std::string *)v412.__r_.__value_.__r.__words[0];
LABEL_390:
              v249 = (int)v247->__r_.__value_.__l.__data_;
              v250 = v247->__r_.__value_.__s.__data_[4];
              if (v249 != 1953720678 || v250 != 97)
                goto LABEL_551;
              v252 = *((_QWORD *)this + 50);
              v401 = v415;
              v402 = v416;
              if (v416)
              {
                p_shared_owners = (unint64_t *)&v416->__shared_owners_;
                do
                  v254 = __ldxr(p_shared_owners);
                while (__stxr(v254 + 1, p_shared_owners));
              }
              turi::optimization::accelerated_gradient<Eigen::Matrix<double,-1,1,0,-1,1>>(v252, (uint64_t)&v423, v407, &v401, (uint64_t)&v430);
              v255 = v430.__r_.__value_.__r.__words[2];
              v256 = v431.__r_.__value_.__r.__words[2];
              v430.__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v430.__r_.__value_.__l.__data_;
              v257 = *(_OWORD *)&v431.__r_.__value_.__l.__data_;
              v431 = __p[1];
              *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = v257;
              __p[0].__r_.__value_.__r.__words[2] = v255;
              __p[1].__r_.__value_.__r.__words[2] = v256;
              v258 = v432;
              v432 = v438[0];
              v438[0] = v258;
              v259 = v433;
              v433 = *(_OWORD *)&v438[1];
              *(_OWORD *)&v438[1] = v259;
              v440 = v435;
              v439 = v434;
              turi::sframe::operator=((uint64_t)v441, (uint64_t)v436);
              turi::sframe::~sframe((turi::sframe *)v436);
              free(v432);
              free((void *)v431.__r_.__value_.__l.__size_);
              free((void *)v430.__r_.__value_.__r.__words[2]);
              v242 = v402;
              if (!v402)
                goto LABEL_410;
              v260 = (unint64_t *)&v402->__shared_owners_;
              do
                v244 = __ldaxr(v260);
              while (__stlxr(v244 - 1, v260));
LABEL_408:
              if (!v244)
              {
                ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                std::__shared_weak_count::__release_weak(v242);
              }
              goto LABEL_410;
            }
LABEL_402:
            v261 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
            v403 = *((_QWORD *)this + 50);
            v404 = v261;
            if (v261)
            {
              v262 = (unint64_t *)&v261->__shared_owners_;
              do
                v263 = __ldxr(v262);
              while (__stxr(v263 + 1, v262));
            }
            turi::optimization::lbfgs_compat(&v403, (__int128 **)&v423, (uint64_t)v407, &v413, (uint64_t)&v430);
            v264 = v430.__r_.__value_.__r.__words[2];
            v265 = v431.__r_.__value_.__r.__words[2];
            v430.__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v430.__r_.__value_.__l.__data_;
            v266 = *(_OWORD *)&v431.__r_.__value_.__l.__data_;
            v431 = __p[1];
            *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = v266;
            __p[0].__r_.__value_.__r.__words[2] = v264;
            __p[1].__r_.__value_.__r.__words[2] = v265;
            v267 = v432;
            v432 = v438[0];
            v438[0] = v267;
            v268 = v433;
            v433 = *(_OWORD *)&v438[1];
            *(_OWORD *)&v438[1] = v268;
            v440 = v435;
            v439 = v434;
            turi::sframe::operator=((uint64_t)v441, (uint64_t)v436);
            turi::sframe::~sframe((turi::sframe *)v436);
            free(v432);
            free((void *)v431.__r_.__value_.__l.__size_);
            free((void *)v430.__r_.__value_.__r.__words[2]);
            v242 = v404;
            if (!v404)
              goto LABEL_410;
            v269 = (unint64_t *)&v404->__shared_owners_;
            do
              v244 = __ldaxr(v269);
            while (__stlxr(v244 - 1, v269));
            goto LABEL_408;
          }
          if (HIBYTE(v412.__r_.__value_.__r.__words[2]) == 5)
          {
            if (LODWORD(v412.__r_.__value_.__l.__data_) != 1734763116 || v412.__r_.__value_.__s.__data_[4] != 115)
            {
              v247 = &v412;
              goto LABEL_390;
            }
            goto LABEL_402;
          }
          if (HIBYTE(v412.__r_.__value_.__r.__words[2]) != 6)
            goto LABEL_551;
          if (LODWORD(v412.__r_.__value_.__l.__data_) != 1953981806
            || WORD2(v412.__r_.__value_.__r.__words[0]) != 28271)
          {
            goto LABEL_551;
          }
LABEL_366:
          v234 = *((_QWORD *)this + 50);
          v405 = v413;
          v406 = v414;
          if (v414)
          {
            v235 = (unint64_t *)&v414->__shared_owners_;
            do
              v236 = __ldxr(v235);
            while (__stxr(v236 + 1, v235));
          }
          turi::optimization::newton_method<Eigen::Matrix<double,-1,1,0,-1,1>>(v234, (uint64_t)&v423, v407, &v405, (uint64_t)&v430);
          v237 = v430.__r_.__value_.__r.__words[2];
          v238 = v431.__r_.__value_.__r.__words[2];
          v430.__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v430.__r_.__value_.__l.__data_;
          v239 = *(_OWORD *)&v431.__r_.__value_.__l.__data_;
          v431 = __p[1];
          *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = v239;
          __p[0].__r_.__value_.__r.__words[2] = v237;
          __p[1].__r_.__value_.__r.__words[2] = v238;
          v240 = v432;
          v432 = v438[0];
          v438[0] = v240;
          v241 = v433;
          v433 = *(_OWORD *)&v438[1];
          *(_OWORD *)&v438[1] = v241;
          v440 = v435;
          v439 = v434;
          turi::sframe::operator=((uint64_t)v441, (uint64_t)v436);
          turi::sframe::~sframe((turi::sframe *)v436);
          free(v432);
          free((void *)v431.__r_.__value_.__l.__size_);
          free((void *)v430.__r_.__value_.__r.__words[2]);
          v242 = v406;
          if (v406)
          {
            v243 = (unint64_t *)&v406->__shared_owners_;
            do
              v244 = __ldaxr(v243);
            while (__stlxr(v244 - 1, v243));
            goto LABEL_408;
          }
LABEL_410:
          v270 = (_QWORD *)((char *)this + 416);
          v271 = (__int128 *)__p[0].__r_.__value_.__r.__words[2];
          v272 = (uint64_t)__p[1].__r_.__value_.__l.__data_;
          if (*((_QWORD *)this + 53) != __p[1].__r_.__value_.__r.__words[0])
          {
            Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 52, (uint64_t)__p[1].__r_.__value_.__l.__data_, 1);
            v272 = *((_QWORD *)this + 53);
          }
          v273 = (_OWORD *)*v270;
          if (v272 >= 0)
            v274 = v272;
          else
            v274 = v272 + 1;
          v275 = v274 & 0xFFFFFFFFFFFFFFFELL;
          if (v272 >= 2)
          {
            v276 = 0;
            v277 = (_OWORD *)*v270;
            v278 = v271;
            do
            {
              v279 = *v278++;
              *v277++ = v279;
              v276 += 2;
            }
            while (v276 < v275);
          }
          v206 = __OFSUB__(v272, v275);
          v280 = v272 - v275;
          if (!((v280 < 0) ^ v206 | (v280 == 0)))
          {
            v281 = v274 >> 1;
            v282 = (uint64_t *)&v271[v274 >> 1];
            v283 = &v273[v281];
            do
            {
              v284 = *v282++;
              *v283++ = v284;
              --v280;
            }
            while (v280);
          }
          turi::supervised::logistic_regression_opt_interface::rescale_solution(*((_QWORD *)this + 50), (uint64_t *)this + 52);
          if ((uint64_t)v438[2] * (uint64_t)v438[1] < 1
            || turi::supervised::supervised_learning_model_base::num_examples(this) <= *((_QWORD *)this + 57))
          {
            v289 = 0;
          }
          else
          {
            v430.__r_.__value_.__r.__words[0] = (std::string::size_type)v438;
            Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>,Eigen::Diagonal<Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>> const,0> const>>((double **)v428, (uint64_t *)&v430);
            v285 = v428[0];
            v286 = v428[1];
            v288 = (void *)*((_QWORD *)this + 55);
            v428[0] = *((void **)this + 54);
            v287 = v428[0];
            v428[1] = v288;
            *((_QWORD *)this + 54) = v285;
            *((_QWORD *)this + 55) = v286;
            free(v287);
            turi::supervised::logistic_regression_opt_interface::rescale_solution(*((_QWORD *)this + 50), (uint64_t *)this + 54);
            v289 = 1;
          }
          v290 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
          v399 = (uint64_t *)*((_QWORD *)this + 47);
          v400 = v290;
          if (v290)
          {
            v291 = (unint64_t *)&v290->__shared_owners_;
            do
              v292 = __ldxr(v291);
            while (__stxr(v292 + 1, v291));
          }
          turi::supervised::get_coefficients_as_sframe((_QWORD *)this + 52, &v399, (_QWORD *)this + 54, (turi::sframe *)&v430);
          v293 = v400;
          if (v400)
          {
            v294 = (unint64_t *)&v400->__shared_owners_;
            do
              v295 = __ldaxr(v294);
            while (__stlxr(v295 - 1, v294));
            if (!v295)
            {
              ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
              std::__shared_weak_count::__release_weak(v293);
              if ((v289 & 1) != 0)
                goto LABEL_434;
              goto LABEL_433;
            }
          }
          if ((v289 & 1) == 0)
          {
LABEL_433:
            turi::supervised::add_na_std_err_to_coef((turi::supervised *)&v430, (uint64_t)v428);
            turi::sframe::operator=((uint64_t)&v430, (uint64_t)v428);
            turi::sframe::~sframe((turi::sframe *)v428);
          }
LABEL_434:
          _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v397);
          turi::unity_sframe::construct_from_sframe(v397, (const turi::sframe *)&v430);
          v394 = v397;
          v395 = v398;
          if (v398)
          {
            v296 = (unint64_t *)&v398->__shared_owners_;
            do
              v297 = __ldxr(v296);
            while (__stxr(v297 + 1, v296));
          }
          turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&v394, (uint64_t)v428);
          v298 = v395;
          if (v395)
          {
            v299 = (unint64_t *)&v395->__shared_owners_;
            do
              v300 = __ldaxr(v299);
            while (__stlxr(v300 - 1, v299));
            if (!v300)
            {
              ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
              std::__shared_weak_count::__release_weak(v298);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v394, "coefficients");
          v392 = (turi::unity_sframe *)&v394;
          v301 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v394, (uint64_t)&std::piecewise_construct, (_OWORD **)&v392);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v301 + 14, (unsigned int *)v428);
          if (v396 < 0)
            operator delete(v394);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v428);
          if (turi::supervised::linear_regression_opt_interface::num_validation_examples(*((turi::supervised::linear_regression_opt_interface **)this
                                                                                          + 50)))
          {
            turi::supervised::logistic_regression_opt_interface::get_validation_accuracy(*((turi::supervised::logistic_regression_opt_interface **)this
                                                                                         + 50));
            v392 = v302;
            std::string::basic_string[abi:ne180100]<0>(v428, "validation_accuracy");
            v394 = v428;
            v303 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v428, (uint64_t)&std::piecewise_construct, (_OWORD **)&v394);
            boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<double>(v303 + 14, &v392);
            if (v429 < 0)
              operator delete(v428[0]);
          }
          turi::supervised::logistic_regression_opt_interface::get_training_accuracy(*((turi::supervised::logistic_regression_opt_interface **)this
                                                                                     + 50));
          v392 = v304;
          std::string::basic_string[abi:ne180100]<0>(v428, "training_accuracy");
          v394 = v428;
          v305 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v428, (uint64_t)&std::piecewise_construct, (_OWORD **)&v394);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<double>(v305 + 14, &v392);
          if (v429 < 0)
            operator delete(v428[0]);
          std::string::basic_string[abi:ne180100]<0>(v428, "training_iterations");
          v394 = v428;
          v306 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v428, (uint64_t)&std::piecewise_construct, (_OWORD **)&v394);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<int>(v306 + 14, (int *)__p);
          if (v429 < 0)
            operator delete(v428[0]);
          std::string::basic_string[abi:ne180100]<0>(v428, "training_time");
          v394 = v428;
          v307 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v428, (uint64_t)&std::piecewise_construct, (_OWORD **)&v394);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v307 + 14, &__p[0].__r_.__value_.__l.__size_);
          if (v429 < 0)
            operator delete(v428[0]);
          std::string::basic_string[abi:ne180100]<0>(v428, "training_loss");
          v394 = v428;
          v308 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v428, (uint64_t)&std::piecewise_construct, (_OWORD **)&v394);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v308 + 14, (_QWORD *)&v439 + 1);
          if (v429 < 0)
            operator delete(v428[0]);
          turi::optimization::translate_solver_status((int *)&v440 + 3, v428);
          std::string::basic_string[abi:ne180100]<0>(&v394, "training_solver_status");
          v392 = (turi::unity_sframe *)&v394;
          v309 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v394, (uint64_t)&std::piecewise_construct, (_OWORD **)&v392);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<std::string>(v309 + 14, (__int128 *)v428);
          if (v396 < 0)
            operator delete(v394);
          if (v429 < 0)
            operator delete(v428[0]);
          _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v392);
          turi::unity_sframe::construct_from_sframe(v392, (const turi::sframe *)v441);
          v394 = v392;
          v395 = v393;
          if (v393)
          {
            v310 = (unint64_t *)&v393->__shared_owners_;
            do
              v311 = __ldxr(v310);
            while (__stxr(v311 + 1, v310));
          }
          turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&v394, (uint64_t)v428);
          v312 = v395;
          if (v395)
          {
            v313 = (unint64_t *)&v395->__shared_owners_;
            do
              v314 = __ldaxr(v313);
            while (__stlxr(v314 - 1, v313));
            if (!v314)
            {
              ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
              std::__shared_weak_count::__release_weak(v312);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v394, "progress");
          v427 = &v394;
          v315 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v394, (uint64_t)&std::piecewise_construct, (_OWORD **)&v427);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v315 + 14, (unsigned int *)v428);
          if (v396 < 0)
            operator delete(v394);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v428);
          if (turi::supervised::linear_regression_opt_interface::num_validation_examples(*((turi::supervised::linear_regression_opt_interface **)this
                                                                                          + 50)))
          {
            turi::supervised::logistic_regression_opt_interface::compute_validation_first_order_statistics(*((_QWORD *)this + 50), (uint64_t)&__p[0].__r_.__value_.__r.__words[2], (float64x2_t **)&__p[1].__r_.__value_.__l.__size_, (double *)&v439 + 1);
            std::string::basic_string[abi:ne180100]<0>(v428, "validation_loss");
            v394 = v428;
            v316 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v428, (uint64_t)&std::piecewise_construct, (_OWORD **)&v394);
            boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v316 + 14, (_QWORD *)&v439 + 1);
            if (v429 < 0)
              operator delete(v428[0]);
          }
          v317 = v416;
          v416 = 0;
          v415 = 0;
          v318 = MEMORY[0x24BEDB848];
          if (v317)
          {
            v319 = (unint64_t *)&v317->__shared_owners_;
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
              std::__shared_weak_count::__release_weak(v317);
            }
          }
          v321 = v414;
          v413 = 0;
          v414 = 0;
          if (v321)
          {
            v322 = (unint64_t *)&v321->__shared_owners_;
            do
              v323 = __ldaxr(v322);
            while (__stlxr(v323 - 1, v322));
            if (!v323)
            {
              ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
              std::__shared_weak_count::__release_weak(v321);
            }
          }
          v324 = v393;
          if (v393)
          {
            v325 = (unint64_t *)&v393->__shared_owners_;
            do
              v326 = __ldaxr(v325);
            while (__stlxr(v326 - 1, v325));
            if (!v326)
            {
              ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
              std::__shared_weak_count::__release_weak(v324);
            }
          }
          v327 = v398;
          if (v398)
          {
            v328 = (unint64_t *)&v398->__shared_owners_;
            do
              v329 = __ldaxr(v328);
            while (__stlxr(v329 - 1, v328));
            if (!v329)
            {
              ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
              std::__shared_weak_count::__release_weak(v327);
            }
          }
          turi::sframe::~sframe((turi::sframe *)&v430);
          std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v407, v407[1]);
          turi::sframe::~sframe((turi::sframe *)v441);
          free(v438[0]);
          free((void *)__p[1].__r_.__value_.__l.__size_);
          free((void *)__p[0].__r_.__value_.__r.__words[2]);
          __idx[0] = *v214;
          v330 = v214[9];
          *(size_t *)((char *)__idx + *(_QWORD *)(__idx[0] - 24)) = v214[8];
          v409[0] = v330;
          v409[1] = v318 + 16;
          if (v410 < 0)
            operator delete((void *)v409[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v411);
          if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v412.__r_.__value_.__l.__data_);
          v331 = v414;
          if (v414)
          {
            v332 = (unint64_t *)&v414->__shared_owners_;
            do
              v333 = __ldaxr(v332);
            while (__stlxr(v333 - 1, v332));
            if (!v333)
            {
              ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
              std::__shared_weak_count::__release_weak(v331);
            }
          }
          v334 = v416;
          if (v416)
          {
            v335 = (unint64_t *)&v416->__shared_owners_;
            do
              v336 = __ldaxr(v335);
            while (__stlxr(v336 - 1, v335));
            if (!v336)
            {
              ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
              std::__shared_weak_count::__release_weak(v334);
            }
          }
          free(v417);
          free(v419);
          free(v134);
          free(v423);
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v425;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          switch(v444)
          {
            case 2:
              v337 = (unint64_t *)v443;
              do
              {
                v338 = __ldaxr(v337);
                v339 = v338 - 1;
              }
              while (__stlxr(v339, v337));
              if (!v339)
              {
                v340 = v443;
                if (v443)
                {
                  if (*(char *)(v443 + 31) < 0)
                    operator delete(*(void **)(v443 + 8));
                  v341 = v340;
                  v342 = 0x1012C404EF22A49;
                  goto LABEL_549;
                }
              }
              break;
            case 3:
              v354 = (unint64_t *)v443;
              do
              {
                v355 = __ldaxr(v354);
                v356 = v355 - 1;
              }
              while (__stlxr(v356, v354));
              if (!v356)
              {
                v357 = v443;
                if (v443)
                {
                  v358 = *(void **)(v443 + 8);
                  if (v358)
                  {
                    *(_QWORD *)(v443 + 16) = v358;
                    operator delete(v358);
                  }
                  v341 = v357;
                  v342 = 0x1080C409938AC02;
                  goto LABEL_549;
                }
              }
              break;
            case 4:
              v343 = (unint64_t *)v443;
              do
              {
                v344 = __ldaxr(v343);
                v345 = v344 - 1;
              }
              while (__stlxr(v345, v343));
              if (!v345)
              {
                v346 = v443;
                if (v443)
                {
                  __p[0].__r_.__value_.__r.__words[0] = v443 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_542;
                }
              }
              break;
            case 5:
              v359 = (unint64_t *)v443;
              do
              {
                v360 = __ldaxr(v359);
                v361 = v360 - 1;
              }
              while (__stlxr(v361, v359));
              if (!v361)
              {
                v346 = v443;
                if (v443)
                {
                  __p[0].__r_.__value_.__r.__words[0] = v443 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_542:
                  v341 = v346;
                  v342 = 0x1020C405E66F15BLL;
                  goto LABEL_549;
                }
              }
              break;
            case 8:
              v362 = (unint64_t *)v443;
              do
              {
                v363 = __ldaxr(v362);
                v364 = v363 - 1;
              }
              while (__stlxr(v364, v362));
              if (!v364)
              {
                v365 = v443;
                if (v443)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v443 + 16));
                  v341 = v365;
                  v353 = -235920773;
                  goto LABEL_548;
                }
              }
              break;
            case 9:
              v347 = (unint64_t *)v443;
              do
              {
                v348 = __ldaxr(v347);
                v349 = v348 - 1;
              }
              while (__stlxr(v349, v347));
              if (!v349)
              {
                v350 = v443;
                if (v443)
                {
                  v351 = *(void **)(v443 + 48);
                  if (v351)
                  {
                    *(_QWORD *)(v443 + 56) = v351;
                    operator delete(v351);
                  }
                  v352 = *(void **)(v350 + 24);
                  if (v352)
                  {
                    *(_QWORD *)(v350 + 32) = v352;
                    operator delete(v352);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v350 + 8);
                  v341 = v350;
                  v353 = 2071181815;
LABEL_548:
                  v342 = v353 | 0x1030C4000000000;
LABEL_549:
                  MEMORY[0x219A19A08](v341, v342);
                }
              }
              break;
            default:
              return;
          }
          return;
        default:
          goto LABEL_570;
      }
    default:
LABEL_570:
      turi::flexible_type_fail(0);
      goto LABEL_573;
  }
}

void sub_21857C5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;
  void *v73;
  uint64_t v74;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  unsigned int v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a32);
  if (a72 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a73);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  free((void *)STACK[0x218]);
  free((void *)STACK[0x228]);
  free(v73);
  free((void *)STACK[0x250]);
  STACK[0x288] = (unint64_t)&STACK[0x260];
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x288]);
  switch(*(_BYTE *)(v74 - 124))
  {
    case 2:
      v76 = *(unint64_t **)(v74 - 136);
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (v78)
        goto LABEL_41;
      v79 = *(_QWORD *)(v74 - 136);
      if (!v79)
        goto LABEL_41;
      if (*(char *)(v79 + 31) < 0)
        operator delete(*(void **)(v79 + 8));
      v80 = (_QWORD *)v79;
      v81 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v91 = *(unint64_t **)(v74 - 136);
      do
      {
        v92 = __ldaxr(v91);
        v93 = v92 - 1;
      }
      while (__stlxr(v93, v91));
      if (v93)
        goto LABEL_41;
      v94 = *(_QWORD **)(v74 - 136);
      if (!v94)
        goto LABEL_41;
      v95 = (void *)v94[1];
      if (v95)
      {
        v94[2] = v95;
        operator delete(v95);
      }
      v80 = v94;
      v81 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v82 = *(unint64_t **)(v74 - 136);
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (v84)
        goto LABEL_41;
      v85 = *(_QWORD **)(v74 - 136);
      if (!v85)
        goto LABEL_41;
      STACK[0x288] = (unint64_t)(v85 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x288]);
      goto LABEL_33;
    case 5:
      v96 = *(unint64_t **)(v74 - 136);
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (v98)
        goto LABEL_41;
      v85 = *(_QWORD **)(v74 - 136);
      if (!v85)
        goto LABEL_41;
      STACK[0x288] = (unint64_t)(v85 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x288]);
LABEL_33:
      v80 = v85;
      v81 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v99 = *(unint64_t **)(v74 - 136);
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (v101)
        goto LABEL_41;
      v102 = *(_QWORD *)(v74 - 136);
      if (!v102)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v102 + 16));
      v80 = (_QWORD *)v102;
      v90 = -235920773;
      goto LABEL_39;
    case 9:
      v86 = *(unint64_t **)(v74 - 136);
      do
      {
        v87 = __ldaxr(v86);
        v88 = v87 - 1;
      }
      while (__stlxr(v88, v86));
      if (v88)
        goto LABEL_41;
      v89 = *(_QWORD **)(v74 - 136);
      if (!v89)
        goto LABEL_41;
      v80 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v89);
      v90 = 2071181815;
LABEL_39:
      v81 = v90 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v80, v81);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

void turi::supervised::logistic_regression::predict_single_example(_QWORD *a1@<X0>, void **a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  __int128 *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  double *v37;
  void *v38;
  long double *v39;
  uint64_t v40;
  long double v41;
  double v42;
  long double v43;
  long double v44;
  double v45;
  double v46;
  uint64_t v47;
  float64x2_t *v48;
  double v49;
  char *v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  float64x2_t v54;
  float64x2_t *v55;
  float64x2_t *v56;
  float64x2_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  double *f64;
  double *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  uint64_t v70;
  char *v71;
  char *v72;
  double v73;
  char *v74;
  _QWORD *v75;
  _QWORD *v76;
  void **v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  double *v83;
  _QWORD *v84;
  _QWORD *v85;
  void **v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  unint64_t *v95;
  unint64_t v96;
  char v97;
  void *v98;
  double v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  unint64_t *v103;
  unint64_t v104;
  double *i;
  double *v106;
  double v107;
  _QWORD *v108;
  _QWORD *v109;
  void **v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  double v116;
  double v117;
  double *v118;
  uint64_t *v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  __int128 v138;
  __int128 v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  void *v143;
  void **v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  __int128 v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  void *v167;
  _QWORD *v168;
  unint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  __int128 v186;
  __int128 v187;
  unint64_t v188;
  unint64_t v189;
  double *v190;
  _QWORD *v191;
  void *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  std::bad_alloc *exception;
  std::bad_alloc *v214;
  uint64_t v215;
  double v216;
  __int128 v217;
  void **v218;
  void *v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  void *v225;
  _QWORD *v226;
  uint64_t v227;
  void *__src[2];
  void **v229;
  uint64_t v230;
  void **v231;

  v8 = a1[56];
  if (v8 == 2)
  {
    v225 = a2;
    v226 = a1 + 52;
    if (a1[53])
    {
      v9 = a1[52];
      __src[1] = *a2;
      v230 = v9;
      v231 = &v225;
      v10 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)__src);
    }
    else
    {
      v10 = 0.0;
    }
    v43 = exp(-v10);
    v44 = log1p(v43);
    v45 = exp(-v44);
    v46 = v45;
    switch(*a3)
    {
      case 0:
      case 4:
        turi::supervised::logistic_regression::predict_single_example(Eigen::Matrix<double,-1,1,0,-1,1> const&,turi::supervised::prediction_type_enum const&)::$_0::operator()();
      case 1:
        v92 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[47] + 24) + 32) + 80) + 16 * (v45 >= 0.5);
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
        *((_BYTE *)a4 + 12) = 0;
        if ((uint64_t *)v92 != a4)
        {
          v93 = *(_QWORD **)v92;
          *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)(v92 + 5);
          *a4 = (uint64_t)v93;
          v94 = *(unsigned __int8 *)(v92 + 12);
          *((_BYTE *)a4 + 12) = v94;
          switch(v94)
          {
            case 2:
              v95 = (unint64_t *)*a4;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 + 1, v95));
              break;
            case 3:
              v197 = (unint64_t *)*a4;
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 + 1, v197));
              break;
            case 4:
              v193 = (unint64_t *)*a4;
              do
                v194 = __ldaxr(v193);
              while (__stlxr(v194 + 1, v193));
              break;
            case 5:
              v199 = (unint64_t *)*a4;
              do
                v200 = __ldaxr(v199);
              while (__stlxr(v200 + 1, v199));
              break;
            case 8:
              v201 = (unint64_t *)*a4;
              do
                v202 = __ldaxr(v201);
              while (__stlxr(v202 + 1, v201));
              break;
            case 9:
              v195 = (unint64_t *)*a4;
              do
                v196 = __ldaxr(v195);
              while (__stlxr(v196 + 1, v195));
              break;
            default:
              return;
          }
        }
        return;
      case 2:
        *((_BYTE *)a4 + 12) = 0;
        *((_DWORD *)a4 + 2) = 0;
        *a4 = v45 >= 0.5;
        return;
      case 3:
      case 6:
        *((_DWORD *)a4 + 2) = 0;
        *((_BYTE *)a4 + 12) = 1;
        *(double *)a4 = v45;
        return;
      case 5:
        *((_DWORD *)a4 + 2) = 0;
        *((_BYTE *)a4 + 12) = 1;
        *(double *)a4 = v10;
        return;
      case 7:
        v83 = (double *)operator new(0x10uLL);
        *v83 = 1.0 - v46;
        v83[1] = v46;
        *(uint64_t *)((char *)a4 + 5) = 0;
        *a4 = 0;
        *((_BYTE *)a4 + 12) = 3;
        v84 = (_QWORD *)operator new();
        v85 = v84;
        *v84 = 0;
        v84[1] = 0;
        v86 = (void **)(v84 + 1);
        v84[2] = 0;
        v84[3] = 0;
        *a4 = (uint64_t)v84;
        *v84 = 1;
        switch(*((_BYTE *)a4 + 12))
        {
          case 2:
            if (*v84 != 1)
            {
              v87 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v87, *a4);
              *a4 = (uint64_t)v87;
              *v87 = 1;
              do
              {
                v88 = __ldaxr(v85);
                v89 = v88 - 1;
              }
              while (__stlxr(v89, v85));
              if (!v89)
              {
                v90 = 0x1012C404EF22A49;
                if ((*((char *)v85 + 31) & 0x80000000) == 0)
                  goto LABEL_217;
                v91 = *v86;
                goto LABEL_203;
              }
            }
            break;
          case 3:
            if (*v84 != 1)
            {
              v175 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v175, *a4);
              *a4 = (uint64_t)v175;
              *v175 = 1;
              do
              {
                v176 = __ldaxr(v85);
                v177 = v176 - 1;
              }
              while (__stlxr(v177, v85));
              if (!v177)
              {
                v90 = 0x1080C409938AC02;
                v91 = *v86;
                if (*v86)
                {
                  v85[2] = v91;
LABEL_203:
                  operator delete(v91);
                }
                goto LABEL_217;
              }
            }
            break;
          case 4:
            if (*v84 != 1)
            {
              v168 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v168, *a4);
              *a4 = (uint64_t)v168;
              *v168 = 1;
              do
              {
                v169 = __ldaxr(v85);
                v170 = v169 - 1;
              }
              while (__stlxr(v170, v85));
              if (!v170)
              {
                v90 = 0x1020C405E66F15BLL;
                __src[0] = v86;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
                goto LABEL_217;
              }
            }
            break;
          case 5:
            if (*v84 != 1)
            {
              v178 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v178, *a4);
              *a4 = (uint64_t)v178;
              *v178 = 1;
              do
              {
                v179 = __ldaxr(v85);
                v180 = v179 - 1;
              }
              while (__stlxr(v180, v85));
              if (!v180)
              {
                v90 = 0x1020C405E66F15BLL;
                __src[0] = v86;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
                goto LABEL_217;
              }
            }
            break;
          case 8:
            if (*v84 != 1)
            {
              v181 = operator new();
              v182 = *a4;
              *(_QWORD *)v181 = *(_QWORD *)*a4;
              *(_QWORD *)(v181 + 8) = *(_QWORD *)(v182 + 8);
              v183 = *(_QWORD *)(v182 + 16);
              *(_QWORD *)(v181 + 16) = v183;
              if (v183)
              {
                v184 = (unsigned int *)(v183 + 8);
                do
                  v185 = __ldxr(v184);
                while (__stxr(v185 + 1, v184));
              }
              v186 = *(_OWORD *)(v182 + 24);
              v187 = *(_OWORD *)(v182 + 40);
              *(_OWORD *)(v181 + 56) = *(_OWORD *)(v182 + 56);
              *(_OWORD *)(v181 + 40) = v187;
              *(_OWORD *)(v181 + 24) = v186;
              *a4 = v181;
              *(_QWORD *)v181 = 1;
              do
              {
                v188 = __ldaxr(v85);
                v189 = v188 - 1;
              }
              while (__stlxr(v189, v85));
              if (!v189)
              {
                v90 = 0x1030C40F1F0227BLL;
                boost::detail::shared_count::~shared_count((unsigned int **)v85 + 2);
                goto LABEL_217;
              }
            }
            break;
          case 9:
            if (*v84 != 1)
            {
              v171 = (_QWORD *)operator new();
              v172 = *a4 + 8;
              *v171 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v171 + 1, v172);
              *a4 = (uint64_t)v171;
              *v171 = 1;
              do
              {
                v173 = __ldaxr(v85);
                v174 = v173 - 1;
              }
              while (__stlxr(v174, v85));
              if (!v174)
              {
                v90 = 0x1030C407B73B9F7;
                std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v85);
LABEL_217:
                MEMORY[0x219A19A08](v85, v90);
              }
            }
            break;
          default:
            break;
        }
        v190 = v83 + 2;
        v191 = (_QWORD *)*a4;
        v192 = (void *)v191[1];
        if (v192)
        {
          v191[2] = v192;
          operator delete(v192);
          v191[1] = 0;
          v191[2] = 0;
          v191[3] = 0;
        }
        v191[1] = v83;
        v191[2] = v190;
        v191[3] = v190;
        return;
      default:
        goto LABEL_251;
    }
  }
  v11 = a1[57];
  v225 = 0;
  v226 = 0;
  v227 = 0;
  v12 = (__int128 *)a1[52];
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v225, a1[53], a1[53], 1);
  v13 = (char *)v225;
  v14 = (_QWORD)v226 * v227;
  if ((uint64_t)v226 * v227 >= 0)
    v15 = (_QWORD)v226 * v227;
  else
    v15 = v14 + 1;
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v14 >= 2)
  {
    v17 = 0;
    v18 = v225;
    v19 = v12;
    do
    {
      v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  v21 = v8 - 1;
  v22 = v14 <= v16;
  v23 = v14 - v16;
  if (!v22)
  {
    v24 = v15 >> 1;
    v25 = (uint64_t *)&v12[v15 >> 1];
    v26 = &v13[16 * v24];
    do
    {
      v27 = *v25++;
      *(_QWORD *)v26 = v27;
      v26 += 8;
      --v23;
    }
    while (v23);
  }
  v28 = a1[56];
  v29 = v28 - 1;
  v30 = v11 / v21;
  if (v21 <= v11 && v28 != 1 && 0x7FFFFFFFFFFFFFFFLL / v29 < v30)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v214 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v214, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v225, v29 * v30, v30, v29);
  v223 = 0;
  v224 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v223, v227, 1);
  v31 = v227;
  if (v224 != v227)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v223, v227, 1);
    v31 = v224;
  }
  v32 = (char *)v223;
  if (v31 >= 0)
    v33 = v31;
  else
    v33 = v31 + 1;
  v34 = v33 & 0xFFFFFFFFFFFFFFFELL;
  if (v31 >= 2)
  {
    v35 = 2;
    if (v34 > 2)
      v35 = v33 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v223, ((8 * v35 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v34 < v31)
    bzero(&v32[16 * (v33 >> 1)], 8 * v31 - 16 * (v33 >> 1));
  *(_QWORD *)&v217 = 0x3FF0000000000000;
  __src[0] = &v225;
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>((uint64_t **)__src, (unint64_t *)a2, (uint64_t *)&v223, (double *)&v217);
  v221 = 0;
  v222 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v221, v224, 1);
  v37 = (double *)v223;
  v36 = v224;
  if (v222 != v224)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v221, v224, 1);
    v36 = v222;
  }
  v38 = v221;
  if (v36 >= 1)
  {
    v39 = (long double *)v221;
    v40 = v36;
    do
    {
      v41 = *v37++;
      *v39++ = exp(v41);
      --v40;
    }
    while (v40);
  }
  if (v36)
  {
    __src[0] = v38;
    v229 = &v221;
    v42 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
  }
  else
  {
    v42 = 0.0;
  }
  v47 = v222;
  v219 = 0;
  v220 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v219, v222, 1);
  v48 = (float64x2_t *)v221;
  if (v220 != v47)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v219, v47, 1);
    v47 = v220;
  }
  v49 = v42 + 1.0;
  v50 = (char *)v219;
  if (v47 >= 0)
    v51 = v47;
  else
    v51 = v47 + 1;
  v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
  if (v47 >= 2)
  {
    v53 = 0;
    v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v49, 0);
    v55 = (float64x2_t *)v219;
    v56 = v48;
    do
    {
      v57 = *v56++;
      *v55++ = vdivq_f64(v57, v54);
      v53 += 2;
    }
    while (v53 < v52);
  }
  v58 = __OFSUB__(v47, v52);
  v59 = v47 - v52;
  if (!((v59 < 0) ^ v58 | (v59 == 0)))
  {
    v60 = v51 >> 1;
    f64 = v48[v51 >> 1].f64;
    v62 = (double *)&v50[16 * v60];
    do
    {
      v63 = *f64++;
      *v62++ = v63 / v49;
      --v59;
    }
    while (v59);
  }
  switch(*a3)
  {
    case 0:
      turi::supervised::logistic_regression::predict_single_example(Eigen::Matrix<double,-1,1,0,-1,1> const&,turi::supervised::prediction_type_enum const&)::$_1::operator()();
    case 1:
    case 2:
      v64 = a1[56];
      v65 = v64 - 1;
      if (v64 == 1)
      {
        v67 = 0;
      }
      else
      {
        v66 = 0;
        v67 = 0;
        v68 = 0.0;
        do
        {
          v69 = *((double *)v223 + v66);
          if (v68 < v69)
            v67 = v66 + 1;
          v70 = v66 + 1;
          if (v68 < v69)
            v68 = *((double *)v223 + v66);
          ++v66;
        }
        while (v65 != v70);
      }
      if (*a3 == 2)
      {
        v97 = 0;
        *((_BYTE *)a4 + 12) = 0;
        *((_DWORD *)a4 + 2) = 0;
        *a4 = v67;
      }
      else
      {
        v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[47] + 24) + 32) + 80) + 16 * v67;
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
        *((_BYTE *)a4 + 12) = 0;
        if ((uint64_t *)v100 == a4)
        {
LABEL_115:
          v97 = 0;
        }
        else
        {
          v97 = 0;
          v101 = *(_QWORD **)v100;
          *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)(v100 + 5);
          *a4 = (uint64_t)v101;
          v102 = *(unsigned __int8 *)(v100 + 12);
          *((_BYTE *)a4 + 12) = v102;
          switch(v102)
          {
            case 2:
              v103 = (unint64_t *)*a4;
              v97 = 0;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 + 1, v103));
              break;
            case 3:
              v207 = (unint64_t *)*a4;
              v97 = 0;
              do
                v208 = __ldaxr(v207);
              while (__stlxr(v208 + 1, v207));
              break;
            case 4:
              v203 = (unint64_t *)*a4;
              v97 = 0;
              do
                v204 = __ldaxr(v203);
              while (__stlxr(v204 + 1, v203));
              break;
            case 5:
              v209 = (unint64_t *)*a4;
              v97 = 0;
              do
                v210 = __ldaxr(v209);
              while (__stlxr(v210 + 1, v209));
              break;
            case 8:
              v211 = (unint64_t *)*a4;
              v97 = 0;
              do
                v212 = __ldaxr(v211);
              while (__stlxr(v212 + 1, v211));
              break;
            case 9:
              v205 = (unint64_t *)*a4;
              v97 = 0;
              do
                v206 = __ldaxr(v205);
              while (__stlxr(v206 + 1, v205));
              break;
            default:
              goto LABEL_185;
          }
        }
      }
      break;
    case 3:
    case 7:
      v71 = (char *)v219 + 8 * a1[56] - 8;
      v218 = 0;
      v217 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v217, v219, (uint64_t)v71, (v71 - (_BYTE *)v219) >> 3);
      v72 = (char *)v217;
      if (v220)
      {
        __src[0] = v219;
        v229 = &v219;
        v73 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
      }
      else
      {
        v73 = 0.0;
      }
      v216 = 1.0 - v73;
      std::vector<double>::insert((uint64_t)&v217, v72, &v216);
      v106 = (double *)*((_QWORD *)&v217 + 1);
      for (i = (double *)v217; i != v106; ++i)
      {
        v107 = 0.0;
        if (*i >= 0.0)
        {
          v107 = 1.0;
          if (*i <= 1.0)
            continue;
        }
        *i = v107;
      }
      *(uint64_t *)((char *)a4 + 5) = 0;
      *a4 = 0;
      *((_BYTE *)a4 + 12) = 3;
      v108 = (_QWORD *)operator new();
      v109 = v108;
      *v108 = 0;
      v108[1] = 0;
      v110 = (void **)(v108 + 1);
      v108[2] = 0;
      v108[3] = 0;
      *a4 = (uint64_t)v108;
      *v108 = 1;
      switch(*((_BYTE *)a4 + 12))
      {
        case 2:
          if (*v108 != 1)
          {
            v111 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v111, *a4);
            *a4 = (uint64_t)v111;
            *v111 = 1;
            do
            {
              v112 = __ldaxr(v109);
              v113 = v112 - 1;
            }
            while (__stlxr(v113, v109));
            if (!v113)
            {
              v114 = 0x1012C404EF22A49;
              if ((*((char *)v109 + 31) & 0x80000000) == 0)
                goto LABEL_180;
              v115 = *v110;
              goto LABEL_166;
            }
          }
          break;
        case 3:
          if (*v108 != 1)
          {
            v152 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v152, *a4);
            *a4 = (uint64_t)v152;
            *v152 = 1;
            do
            {
              v153 = __ldaxr(v109);
              v154 = v153 - 1;
            }
            while (__stlxr(v154, v109));
            if (!v154)
            {
              v114 = 0x1080C409938AC02;
              v115 = *v110;
              if (*v110)
              {
                v109[2] = v115;
LABEL_166:
                operator delete(v115);
              }
              goto LABEL_180;
            }
          }
          break;
        case 4:
          if (*v108 != 1)
          {
            v145 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v145, *a4);
            *a4 = (uint64_t)v145;
            *v145 = 1;
            do
            {
              v146 = __ldaxr(v109);
              v147 = v146 - 1;
            }
            while (__stlxr(v147, v109));
            if (!v147)
            {
              v114 = 0x1020C405E66F15BLL;
              __src[0] = v110;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
              goto LABEL_180;
            }
          }
          break;
        case 5:
          if (*v108 != 1)
          {
            v155 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v155, *a4);
            *a4 = (uint64_t)v155;
            *v155 = 1;
            do
            {
              v156 = __ldaxr(v109);
              v157 = v156 - 1;
            }
            while (__stlxr(v157, v109));
            if (!v157)
            {
              v114 = 0x1020C405E66F15BLL;
              __src[0] = v110;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
              goto LABEL_180;
            }
          }
          break;
        case 8:
          if (*v108 != 1)
          {
            v158 = operator new();
            v159 = *a4;
            *(_QWORD *)v158 = *(_QWORD *)*a4;
            *(_QWORD *)(v158 + 8) = *(_QWORD *)(v159 + 8);
            v160 = *(_QWORD *)(v159 + 16);
            *(_QWORD *)(v158 + 16) = v160;
            if (v160)
            {
              v161 = (unsigned int *)(v160 + 8);
              do
                v162 = __ldxr(v161);
              while (__stxr(v162 + 1, v161));
            }
            v163 = *(_OWORD *)(v159 + 24);
            v164 = *(_OWORD *)(v159 + 40);
            *(_OWORD *)(v158 + 56) = *(_OWORD *)(v159 + 56);
            *(_OWORD *)(v158 + 40) = v164;
            *(_OWORD *)(v158 + 24) = v163;
            *a4 = v158;
            *(_QWORD *)v158 = 1;
            do
            {
              v165 = __ldaxr(v109);
              v166 = v165 - 1;
            }
            while (__stlxr(v166, v109));
            if (!v166)
            {
              v114 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v109 + 2);
              goto LABEL_180;
            }
          }
          break;
        case 9:
          if (*v108 != 1)
          {
            v148 = (_QWORD *)operator new();
            v149 = *a4 + 8;
            *v148 = *(_QWORD *)*a4;
            turi::flexible_type_impl::ndarray<double>::ndarray(v148 + 1, v149);
            *a4 = (uint64_t)v148;
            *v148 = 1;
            do
            {
              v150 = __ldaxr(v109);
              v151 = v150 - 1;
            }
            while (__stlxr(v151, v109));
            if (!v151)
            {
              v114 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v109);
LABEL_180:
              MEMORY[0x219A19A08](v109, v114);
            }
          }
          break;
        default:
          break;
      }
      v142 = (_QWORD *)*a4;
      v167 = (void *)v142[1];
      if (v167)
      {
        v142[2] = v167;
        operator delete(v167);
        v142[1] = 0;
        v142[2] = 0;
        v142[3] = 0;
      }
      v97 = 0;
      *(_OWORD *)(v142 + 1) = v217;
      v144 = v218;
      goto LABEL_184;
    case 4:
      v98 = v219;
      if (v220)
      {
        __src[0] = v219;
        v229 = &v219;
        v99 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
        v98 = v219;
      }
      else
      {
        v99 = 0.0;
      }
      v116 = 1.0 - v99;
      *(double *)&v217 = 1.0 - v99;
      __src[0] = v98;
      v229 = &v219;
      Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
      v216 = v117;
      v118 = (double *)&v217;
      if (v116 < v117)
        v118 = &v216;
      __src[0] = 0;
      if (*v118 < 0.0)
        v118 = (double *)__src;
      v215 = 0x3FF0000000000000;
      if (*v118 <= 1.0)
        v119 = (uint64_t *)v118;
      else
        v119 = &v215;
      turi::flexible_type::flexible_type<double>((uint64_t)a4, v119);
      goto LABEL_115;
    case 5:
    case 6:
      v74 = (char *)v223 + 8 * a1[56] - 8;
      __src[1] = 0;
      v229 = 0;
      __src[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__src, v223, (uint64_t)v74, (v74 - (_BYTE *)v223) >> 3);
      *(_QWORD *)&v217 = 0;
      std::vector<double>::insert((uint64_t)__src, (char *)__src[0], (double *)&v217);
      *(uint64_t *)((char *)a4 + 5) = 0;
      *a4 = 0;
      *((_BYTE *)a4 + 12) = 3;
      v75 = (_QWORD *)operator new();
      v76 = v75;
      *v75 = 0;
      v75[1] = 0;
      v77 = (void **)(v75 + 1);
      v75[2] = 0;
      v75[3] = 0;
      *a4 = (uint64_t)v75;
      *v75 = 1;
      switch(*((_BYTE *)a4 + 12))
      {
        case 2:
          if (*v75 != 1)
          {
            v78 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v78, *a4);
            *a4 = (uint64_t)v78;
            *v78 = 1;
            do
            {
              v79 = __ldaxr(v76);
              v80 = v79 - 1;
            }
            while (__stlxr(v80, v76));
            if (!v80)
            {
              v81 = 0x1012C404EF22A49;
              if ((*((char *)v76 + 31) & 0x80000000) == 0)
                goto LABEL_146;
              v82 = *v77;
              goto LABEL_132;
            }
          }
          break;
        case 3:
          if (*v75 != 1)
          {
            v127 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v127, *a4);
            *a4 = (uint64_t)v127;
            *v127 = 1;
            do
            {
              v128 = __ldaxr(v76);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v76));
            if (!v129)
            {
              v81 = 0x1080C409938AC02;
              v82 = *v77;
              if (*v77)
              {
                v76[2] = v82;
LABEL_132:
                operator delete(v82);
              }
              goto LABEL_146;
            }
          }
          break;
        case 4:
          if (*v75 != 1)
          {
            v120 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v120, *a4);
            *a4 = (uint64_t)v120;
            *v120 = 1;
            do
            {
              v121 = __ldaxr(v76);
              v122 = v121 - 1;
            }
            while (__stlxr(v122, v76));
            if (!v122)
            {
              v81 = 0x1020C405E66F15BLL;
              *(_QWORD *)&v217 = v77;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
              goto LABEL_146;
            }
          }
          break;
        case 5:
          if (*v75 != 1)
          {
            v130 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v130, *a4);
            *a4 = (uint64_t)v130;
            *v130 = 1;
            do
            {
              v131 = __ldaxr(v76);
              v132 = v131 - 1;
            }
            while (__stlxr(v132, v76));
            if (!v132)
            {
              v81 = 0x1020C405E66F15BLL;
              *(_QWORD *)&v217 = v77;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
              goto LABEL_146;
            }
          }
          break;
        case 8:
          if (*v75 != 1)
          {
            v133 = operator new();
            v134 = *a4;
            *(_QWORD *)v133 = *(_QWORD *)*a4;
            *(_QWORD *)(v133 + 8) = *(_QWORD *)(v134 + 8);
            v135 = *(_QWORD *)(v134 + 16);
            *(_QWORD *)(v133 + 16) = v135;
            if (v135)
            {
              v136 = (unsigned int *)(v135 + 8);
              do
                v137 = __ldxr(v136);
              while (__stxr(v137 + 1, v136));
            }
            v138 = *(_OWORD *)(v134 + 24);
            v139 = *(_OWORD *)(v134 + 40);
            *(_OWORD *)(v133 + 56) = *(_OWORD *)(v134 + 56);
            *(_OWORD *)(v133 + 40) = v139;
            *(_OWORD *)(v133 + 24) = v138;
            *a4 = v133;
            *(_QWORD *)v133 = 1;
            do
            {
              v140 = __ldaxr(v76);
              v141 = v140 - 1;
            }
            while (__stlxr(v141, v76));
            if (!v141)
            {
              v81 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v76 + 2);
              goto LABEL_146;
            }
          }
          break;
        case 9:
          if (*v75 != 1)
          {
            v123 = (_QWORD *)operator new();
            v124 = *a4 + 8;
            *v123 = *(_QWORD *)*a4;
            turi::flexible_type_impl::ndarray<double>::ndarray(v123 + 1, v124);
            *a4 = (uint64_t)v123;
            *v123 = 1;
            do
            {
              v125 = __ldaxr(v76);
              v126 = v125 - 1;
            }
            while (__stlxr(v126, v76));
            if (!v126)
            {
              v81 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v76);
LABEL_146:
              MEMORY[0x219A19A08](v76, v81);
            }
          }
          break;
        default:
          break;
      }
      v142 = (_QWORD *)*a4;
      v143 = (void *)v142[1];
      if (v143)
      {
        v142[2] = v143;
        operator delete(v143);
        v142[1] = 0;
        v142[2] = 0;
        v142[3] = 0;
      }
      v97 = 0;
      *(_OWORD *)(v142 + 1) = *(_OWORD *)__src;
      v144 = v229;
LABEL_184:
      v142[3] = v144;
      break;
    default:
      v97 = 1;
      break;
  }
LABEL_185:
  free(v219);
  free(v221);
  free(v223);
  free(v225);
  if ((v97 & 1) != 0)
LABEL_251:
    turi::supervised::logistic_regression::predict_single_example(Eigen::Matrix<double,-1,1,0,-1,1> const&,turi::supervised::prediction_type_enum const&)::$_2::operator()();
}

void sub_21857E378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,unint64_t *a23,uint64_t a24)
{
  unint64_t **v24;
  void *v25;
  uint64_t v26;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;

  MEMORY[0x219A19A08](v26, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v24 + 12))
  {
    case 2:
      v28 = *v24;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (v30)
        goto LABEL_40;
      v31 = *v24;
      if (!*v24)
        goto LABEL_39;
      if (*((char *)v31 + 31) < 0)
        operator delete((void *)v31[1]);
      v32 = v31;
      v33 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v42 = *v24;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_40;
      v45 = *v24;
      if (!*v24)
        goto LABEL_39;
      v46 = (void *)v45[1];
      if (v46)
      {
        v45[2] = (unint64_t)v46;
        operator delete(v46);
      }
      v32 = v45;
      v33 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v34 = *v24;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_40;
      v37 = *v24;
      if (!*v24)
        goto LABEL_39;
      a23 = v37 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      goto LABEL_31;
    case 5:
      v47 = *v24;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_40;
      v37 = *v24;
      if (!*v24)
        goto LABEL_39;
      a23 = v37 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
LABEL_31:
      v32 = v37;
      v33 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v50 = *v24;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_40;
      v53 = *v24;
      if (!*v24)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v53 + 2);
      v32 = v53;
      v41 = -235920773;
      goto LABEL_37;
    case 9:
      v38 = *v24;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (v40)
        goto LABEL_40;
      if (!*v24)
        goto LABEL_39;
      v32 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v24);
      v41 = 2071181815;
LABEL_37:
      v33 = v41 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v32, v33);
LABEL_39:
      *v24 = 0;
LABEL_40:
      *v24 = 0;
      *((_DWORD *)v24 + 2) = 0;
      *((_BYTE *)v24 + 12) = 0;
      operator delete(v25);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

char *std::vector<double>::insert(uint64_t a1, char *__src, double *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<double>::push_back(&__p, a3);
    v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(double *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(double *)v4 = *a3;
  }
  return v4;
}

void sub_21857EC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::supervised::logistic_regression::predict_single_example(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double *v10;
  int *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  _OWORD *v23;
  __int128 *v24;
  __int128 v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  double *v42;
  void *v43;
  long double *v44;
  uint64_t v45;
  long double v46;
  double v47;
  long double v48;
  long double v49;
  double v50;
  double v51;
  uint64_t v52;
  float64x2_t *v53;
  double v54;
  char *v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  float64x2_t v59;
  float64x2_t *v60;
  float64x2_t *v61;
  float64x2_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  double *f64;
  double *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  uint64_t v75;
  char *v76;
  char *v77;
  double v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  void **v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  double *v88;
  _QWORD *v89;
  _QWORD *v90;
  void **v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  char v102;
  void *v103;
  double v104;
  uint64_t v105;
  _QWORD *v106;
  int v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  void **v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  void *v117;
  double v118;
  double v119;
  double *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  __int128 v139;
  __int128 v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  void *v144;
  void **v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  __int128 v164;
  __int128 v165;
  unint64_t v166;
  unint64_t v167;
  void *v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unsigned int v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t v179;
  void *v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  __int128 v189;
  __int128 v190;
  unint64_t v191;
  unint64_t v192;
  double *v193;
  _QWORD *v194;
  void *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::bad_alloc *exception;
  std::bad_alloc *v217;
  double v218;
  __int128 v219;
  void **v220;
  void *v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  void *__src[2];
  void **v231;

  v8 = a1[56];
  if (v8 == 2)
  {
    v9 = a2[3];
    if (v9 < 1)
    {
      v12 = 0.0;
    }
    else
    {
      v10 = (double *)a2[1];
      v11 = (int *)a2[2];
      v12 = 0.0;
      do
      {
        v13 = *v10++;
        v14 = v13;
        v15 = *v11++;
        v12 = v12 + v14 * *(double *)(a1[52] + 8 * v15);
        --v9;
      }
      while (v9);
    }
    v48 = exp(-v12);
    v49 = log1p(v48);
    v50 = exp(-v49);
    v51 = v50;
    switch(*a3)
    {
      case 0:
      case 4:
        turi::supervised::logistic_regression::predict_single_example(Eigen::SparseVector<double,0,int> const&,turi::supervised::prediction_type_enum const&)::$_0::operator()();
      case 1:
        v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[47] + 24) + 32) + 80) + 16 * (v50 >= 0.5);
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
        *((_BYTE *)a4 + 12) = 0;
        if ((uint64_t *)v97 != a4)
        {
          v98 = *(_QWORD **)v97;
          *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)(v97 + 5);
          *a4 = (uint64_t)v98;
          v99 = *(unsigned __int8 *)(v97 + 12);
          *((_BYTE *)a4 + 12) = v99;
          switch(v99)
          {
            case 2:
              v100 = (unint64_t *)*a4;
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 + 1, v100));
              break;
            case 3:
              v200 = (unint64_t *)*a4;
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 + 1, v200));
              break;
            case 4:
              v196 = (unint64_t *)*a4;
              do
                v197 = __ldaxr(v196);
              while (__stlxr(v197 + 1, v196));
              break;
            case 5:
              v202 = (unint64_t *)*a4;
              do
                v203 = __ldaxr(v202);
              while (__stlxr(v203 + 1, v202));
              break;
            case 8:
              v204 = (unint64_t *)*a4;
              do
                v205 = __ldaxr(v204);
              while (__stlxr(v205 + 1, v204));
              break;
            case 9:
              v198 = (unint64_t *)*a4;
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 + 1, v198));
              break;
            default:
              return;
          }
        }
        return;
      case 2:
        *((_BYTE *)a4 + 12) = 0;
        *((_DWORD *)a4 + 2) = 0;
        *a4 = v50 >= 0.5;
        return;
      case 3:
      case 6:
        *((_DWORD *)a4 + 2) = 0;
        *((_BYTE *)a4 + 12) = 1;
        *(double *)a4 = v50;
        return;
      case 5:
        *((_DWORD *)a4 + 2) = 0;
        *((_BYTE *)a4 + 12) = 1;
        *(double *)a4 = v12;
        return;
      case 7:
        v88 = (double *)operator new(0x10uLL);
        *v88 = 1.0 - v51;
        v88[1] = v51;
        *(uint64_t *)((char *)a4 + 5) = 0;
        *a4 = 0;
        *((_BYTE *)a4 + 12) = 3;
        v89 = (_QWORD *)operator new();
        v90 = v89;
        *v89 = 0;
        v89[1] = 0;
        v91 = (void **)(v89 + 1);
        v89[2] = 0;
        v89[3] = 0;
        *a4 = (uint64_t)v89;
        *v89 = 1;
        switch(*((_BYTE *)a4 + 12))
        {
          case 2:
            if (*v89 != 1)
            {
              v92 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v92, *a4);
              *a4 = (uint64_t)v92;
              *v92 = 1;
              do
              {
                v93 = __ldaxr(v90);
                v94 = v93 - 1;
              }
              while (__stlxr(v94, v90));
              if (!v94)
              {
                if (*((char *)v90 + 31) < 0)
                  operator delete(*v91);
                v95 = v90;
                v96 = 0x1012C404EF22A49;
                goto LABEL_212;
              }
            }
            break;
          case 3:
            if (*v89 != 1)
            {
              v177 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v177, *a4);
              *a4 = (uint64_t)v177;
              *v177 = 1;
              do
              {
                v178 = __ldaxr(v90);
                v179 = v178 - 1;
              }
              while (__stlxr(v179, v90));
              if (!v179)
              {
                v180 = *v91;
                if (*v91)
                {
                  v90[2] = v180;
                  operator delete(v180);
                }
                v95 = v90;
                v96 = 0x1080C409938AC02;
                goto LABEL_212;
              }
            }
            break;
          case 4:
            if (*v89 != 1)
            {
              v169 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v169, *a4);
              *a4 = (uint64_t)v169;
              *v169 = 1;
              do
              {
                v170 = __ldaxr(v90);
                v171 = v170 - 1;
              }
              while (__stlxr(v171, v90));
              if (!v171)
              {
                __src[0] = v91;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
                goto LABEL_202;
              }
            }
            break;
          case 5:
            if (*v89 != 1)
            {
              v181 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v181, *a4);
              *a4 = (uint64_t)v181;
              *v181 = 1;
              do
              {
                v182 = __ldaxr(v90);
                v183 = v182 - 1;
              }
              while (__stlxr(v183, v90));
              if (!v183)
              {
                __src[0] = v91;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
LABEL_202:
                v95 = v90;
                v96 = 0x1020C405E66F15BLL;
                goto LABEL_212;
              }
            }
            break;
          case 8:
            if (*v89 != 1)
            {
              v184 = operator new();
              v185 = *a4;
              *(_QWORD *)v184 = *(_QWORD *)*a4;
              *(_QWORD *)(v184 + 8) = *(_QWORD *)(v185 + 8);
              v186 = *(_QWORD *)(v185 + 16);
              *(_QWORD *)(v184 + 16) = v186;
              if (v186)
              {
                v187 = (unsigned int *)(v186 + 8);
                do
                  v188 = __ldxr(v187);
                while (__stxr(v188 + 1, v187));
              }
              v189 = *(_OWORD *)(v185 + 24);
              v190 = *(_OWORD *)(v185 + 40);
              *(_OWORD *)(v184 + 56) = *(_OWORD *)(v185 + 56);
              *(_OWORD *)(v184 + 40) = v190;
              *(_OWORD *)(v184 + 24) = v189;
              *a4 = v184;
              *(_QWORD *)v184 = 1;
              do
              {
                v191 = __ldaxr(v90);
                v192 = v191 - 1;
              }
              while (__stlxr(v192, v90));
              if (!v192)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v90 + 2);
                v95 = v90;
                v176 = -235920773;
                goto LABEL_211;
              }
            }
            break;
          case 9:
            if (*v89 != 1)
            {
              v172 = (_QWORD *)operator new();
              v173 = *a4 + 8;
              *v172 = *(_QWORD *)*a4;
              turi::flexible_type_impl::ndarray<double>::ndarray(v172 + 1, v173);
              *a4 = (uint64_t)v172;
              *v172 = 1;
              do
              {
                v174 = __ldaxr(v90);
                v175 = v174 - 1;
              }
              while (__stlxr(v175, v90));
              if (!v175)
              {
                v95 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v90);
                v176 = 2071181815;
LABEL_211:
                v96 = v176 | 0x1030C4000000000;
LABEL_212:
                MEMORY[0x219A19A08](v95, v96);
              }
            }
            break;
          default:
            break;
        }
        v193 = v88 + 2;
        v194 = (_QWORD *)*a4;
        v195 = (void *)v194[1];
        if (v195)
        {
          v194[2] = v195;
          operator delete(v195);
          v194[1] = 0;
          v194[2] = 0;
          v194[3] = 0;
        }
        v194[1] = v88;
        v194[2] = v193;
        v194[3] = v193;
        return;
      default:
        goto LABEL_246;
    }
  }
  v16 = a1[57];
  v227 = 0;
  v228 = 0;
  v229 = 0;
  v17 = (__int128 *)a1[52];
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v227, a1[53], a1[53], 1);
  v18 = (char *)v227;
  v19 = v228 * v229;
  if (v228 * v229 >= 0)
    v20 = v228 * v229;
  else
    v20 = v19 + 1;
  v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
  if (v19 >= 2)
  {
    v22 = 0;
    v23 = v227;
    v24 = v17;
    do
    {
      v25 = *v24++;
      *v23++ = v25;
      v22 += 2;
    }
    while (v22 < v21);
  }
  v26 = v8 - 1;
  v27 = v19 <= v21;
  v28 = v19 - v21;
  if (!v27)
  {
    v29 = v20 >> 1;
    v30 = (uint64_t *)&v17[v20 >> 1];
    v31 = &v18[16 * v29];
    do
    {
      v32 = *v30++;
      *(_QWORD *)v31 = v32;
      v31 += 8;
      --v28;
    }
    while (v28);
  }
  v33 = a1[56];
  v34 = v33 - 1;
  v35 = v16 / v26;
  if (v26 <= v16 && v33 != 1 && 0x7FFFFFFFFFFFFFFFLL / v34 < v35)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v217 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v217, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v227, v34 * v35, v35, v34);
  v225 = 0;
  v226 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v225, v229, 1);
  v36 = v229;
  if (v226 != v229)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v225, v229, 1);
    v36 = v226;
  }
  v37 = (char *)v225;
  if (v36 >= 0)
    v38 = v36;
  else
    v38 = v36 + 1;
  v39 = v38 & 0xFFFFFFFFFFFFFFFELL;
  if (v36 >= 2)
  {
    v40 = 2;
    if (v39 > 2)
      v40 = v38 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v225, ((8 * v40 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v39 < v36)
    bzero(&v37[16 * (v38 >> 1)], 8 * v36 - 16 * (v38 >> 1));
  v221 = (void *)0x3FF0000000000000;
  *(_QWORD *)&v219 = &v225;
  __src[0] = 0;
  __src[1] = a2;
  v223 = &v227;
  Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run((uint64_t)__src, (uint64_t)&v223, (uint64_t **)&v219, (double *)&v221);
  v223 = 0;
  v224 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v223, v226, 1);
  v42 = (double *)v225;
  v41 = v226;
  if (v224 != v226)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v223, v226, 1);
    v41 = v224;
  }
  v43 = v223;
  if (v41 >= 1)
  {
    v44 = (long double *)v223;
    v45 = v41;
    do
    {
      v46 = *v42++;
      *v44++ = exp(v46);
      --v45;
    }
    while (v45);
  }
  if (v41)
  {
    __src[0] = v43;
    v231 = &v223;
    v47 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
  }
  else
  {
    v47 = 0.0;
  }
  v52 = v224;
  v221 = 0;
  v222 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v221, v224, 1);
  v53 = (float64x2_t *)v223;
  if (v222 != v52)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v221, v52, 1);
    v52 = v222;
  }
  v54 = v47 + 1.0;
  v55 = (char *)v221;
  if (v52 >= 0)
    v56 = v52;
  else
    v56 = v52 + 1;
  v57 = v56 & 0xFFFFFFFFFFFFFFFELL;
  if (v52 >= 2)
  {
    v58 = 0;
    v59 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v54, 0);
    v60 = (float64x2_t *)v221;
    v61 = v53;
    do
    {
      v62 = *v61++;
      *v60++ = vdivq_f64(v62, v59);
      v58 += 2;
    }
    while (v58 < v57);
  }
  v63 = __OFSUB__(v52, v57);
  v64 = v52 - v57;
  if (!((v64 < 0) ^ v63 | (v64 == 0)))
  {
    v65 = v56 >> 1;
    f64 = v53[v56 >> 1].f64;
    v67 = (double *)&v55[16 * v65];
    do
    {
      v68 = *f64++;
      *v67++ = v68 / v54;
      --v64;
    }
    while (v64);
  }
  switch(*a3)
  {
    case 0:
      turi::supervised::logistic_regression::predict_single_example(Eigen::SparseVector<double,0,int> const&,turi::supervised::prediction_type_enum const&)::$_1::operator()();
    case 1:
    case 2:
      v69 = a1[56];
      v70 = v69 - 1;
      if (v69 == 1)
      {
        v72 = 0;
      }
      else
      {
        v71 = 0;
        v72 = 0;
        v73 = 0.0;
        do
        {
          v74 = *((double *)v225 + v71);
          if (v73 < v74)
            v72 = v71 + 1;
          v75 = v71 + 1;
          if (v73 < v74)
            v73 = *((double *)v225 + v71);
          ++v71;
        }
        while (v70 != v75);
      }
      if (*a3 == 2)
      {
        v102 = 0;
        *((_BYTE *)a4 + 12) = 0;
        *((_DWORD *)a4 + 2) = 0;
        *a4 = v72;
      }
      else
      {
        v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[47] + 24) + 32) + 80) + 16 * v72;
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
        *((_BYTE *)a4 + 12) = 0;
        if ((uint64_t *)v105 == a4)
        {
LABEL_108:
          v102 = 0;
        }
        else
        {
          v102 = 0;
          v106 = *(_QWORD **)v105;
          *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)(v105 + 5);
          *a4 = (uint64_t)v106;
          v107 = *(unsigned __int8 *)(v105 + 12);
          *((_BYTE *)a4 + 12) = v107;
          switch(v107)
          {
            case 2:
              v108 = (unint64_t *)*a4;
              v102 = 0;
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 + 1, v108));
              break;
            case 3:
              v210 = (unint64_t *)*a4;
              v102 = 0;
              do
                v211 = __ldaxr(v210);
              while (__stlxr(v211 + 1, v210));
              break;
            case 4:
              v206 = (unint64_t *)*a4;
              v102 = 0;
              do
                v207 = __ldaxr(v206);
              while (__stlxr(v207 + 1, v206));
              break;
            case 5:
              v212 = (unint64_t *)*a4;
              v102 = 0;
              do
                v213 = __ldaxr(v212);
              while (__stlxr(v213 + 1, v212));
              break;
            case 8:
              v214 = (unint64_t *)*a4;
              v102 = 0;
              do
                v215 = __ldaxr(v214);
              while (__stlxr(v215 + 1, v214));
              break;
            case 9:
              v208 = (unint64_t *)*a4;
              v102 = 0;
              do
                v209 = __ldaxr(v208);
              while (__stlxr(v209 + 1, v208));
              break;
            default:
              goto LABEL_178;
          }
        }
      }
      break;
    case 3:
    case 7:
      v76 = (char *)v221 + 8 * a1[56] - 8;
      v220 = 0;
      v219 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v219, v221, (uint64_t)v76, (v76 - (_BYTE *)v221) >> 3);
      v77 = (char *)v219;
      if (v222)
      {
        __src[0] = v221;
        v231 = &v221;
        v78 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
      }
      else
      {
        v78 = 0.0;
      }
      v218 = 1.0 - v78;
      std::vector<double>::insert((uint64_t)&v219, v77, &v218);
      *(uint64_t *)((char *)a4 + 5) = 0;
      *a4 = 0;
      *((_BYTE *)a4 + 12) = 3;
      v110 = (_QWORD *)operator new();
      v111 = v110;
      *v110 = 0;
      v110[1] = 0;
      v112 = (void **)(v110 + 1);
      v110[2] = 0;
      v110[3] = 0;
      *a4 = (uint64_t)v110;
      *v110 = 1;
      switch(*((_BYTE *)a4 + 12))
      {
        case 2:
          if (*v110 != 1)
          {
            v113 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v113, *a4);
            *a4 = (uint64_t)v113;
            *v113 = 1;
            do
            {
              v114 = __ldaxr(v111);
              v115 = v114 - 1;
            }
            while (__stlxr(v115, v111));
            if (!v115)
            {
              v116 = 0x1012C404EF22A49;
              if ((*((char *)v111 + 31) & 0x80000000) == 0)
                goto LABEL_173;
              v117 = *v112;
              goto LABEL_159;
            }
          }
          break;
        case 3:
          if (*v110 != 1)
          {
            v153 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v153, *a4);
            *a4 = (uint64_t)v153;
            *v153 = 1;
            do
            {
              v154 = __ldaxr(v111);
              v155 = v154 - 1;
            }
            while (__stlxr(v155, v111));
            if (!v155)
            {
              v116 = 0x1080C409938AC02;
              v117 = *v112;
              if (*v112)
              {
                v111[2] = v117;
LABEL_159:
                operator delete(v117);
              }
              goto LABEL_173;
            }
          }
          break;
        case 4:
          if (*v110 != 1)
          {
            v146 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v146, *a4);
            *a4 = (uint64_t)v146;
            *v146 = 1;
            do
            {
              v147 = __ldaxr(v111);
              v148 = v147 - 1;
            }
            while (__stlxr(v148, v111));
            if (!v148)
            {
              v116 = 0x1020C405E66F15BLL;
              __src[0] = v112;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
              goto LABEL_173;
            }
          }
          break;
        case 5:
          if (*v110 != 1)
          {
            v156 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v156, *a4);
            *a4 = (uint64_t)v156;
            *v156 = 1;
            do
            {
              v157 = __ldaxr(v111);
              v158 = v157 - 1;
            }
            while (__stlxr(v158, v111));
            if (!v158)
            {
              v116 = 0x1020C405E66F15BLL;
              __src[0] = v112;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
              goto LABEL_173;
            }
          }
          break;
        case 8:
          if (*v110 != 1)
          {
            v159 = operator new();
            v160 = *a4;
            *(_QWORD *)v159 = *(_QWORD *)*a4;
            *(_QWORD *)(v159 + 8) = *(_QWORD *)(v160 + 8);
            v161 = *(_QWORD *)(v160 + 16);
            *(_QWORD *)(v159 + 16) = v161;
            if (v161)
            {
              v162 = (unsigned int *)(v161 + 8);
              do
                v163 = __ldxr(v162);
              while (__stxr(v163 + 1, v162));
            }
            v164 = *(_OWORD *)(v160 + 24);
            v165 = *(_OWORD *)(v160 + 40);
            *(_OWORD *)(v159 + 56) = *(_OWORD *)(v160 + 56);
            *(_OWORD *)(v159 + 40) = v165;
            *(_OWORD *)(v159 + 24) = v164;
            *a4 = v159;
            *(_QWORD *)v159 = 1;
            do
            {
              v166 = __ldaxr(v111);
              v167 = v166 - 1;
            }
            while (__stlxr(v167, v111));
            if (!v167)
            {
              v116 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v111 + 2);
              goto LABEL_173;
            }
          }
          break;
        case 9:
          if (*v110 != 1)
          {
            v149 = (_QWORD *)operator new();
            v150 = *a4 + 8;
            *v149 = *(_QWORD *)*a4;
            turi::flexible_type_impl::ndarray<double>::ndarray(v149 + 1, v150);
            *a4 = (uint64_t)v149;
            *v149 = 1;
            do
            {
              v151 = __ldaxr(v111);
              v152 = v151 - 1;
            }
            while (__stlxr(v152, v111));
            if (!v152)
            {
              v116 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v111);
LABEL_173:
              MEMORY[0x219A19A08](v111, v116);
            }
          }
          break;
        default:
          break;
      }
      v143 = (_QWORD *)*a4;
      v168 = (void *)v143[1];
      if (v168)
      {
        v143[2] = v168;
        operator delete(v168);
        v143[1] = 0;
        v143[2] = 0;
        v143[3] = 0;
      }
      v102 = 0;
      *(_OWORD *)(v143 + 1) = v219;
      v145 = v220;
      goto LABEL_177;
    case 4:
      v103 = v221;
      if (v222)
      {
        __src[0] = v221;
        v231 = &v221;
        v104 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
        v103 = v221;
      }
      else
      {
        v104 = 0.0;
      }
      v118 = 1.0 - v104;
      *(double *)&v219 = 1.0 - v104;
      __src[0] = v103;
      v231 = &v221;
      Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
      v218 = v119;
      if (v118 >= v119)
        v120 = (double *)&v219;
      else
        v120 = &v218;
      turi::flexible_type::flexible_type<double>((uint64_t)a4, v120);
      goto LABEL_108;
    case 5:
    case 6:
      v79 = (char *)v225 + 8 * a1[56] - 8;
      __src[1] = 0;
      v231 = 0;
      __src[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__src, v225, (uint64_t)v79, (v79 - (_BYTE *)v225) >> 3);
      *(_QWORD *)&v219 = 0;
      std::vector<double>::insert((uint64_t)__src, (char *)__src[0], (double *)&v219);
      *(uint64_t *)((char *)a4 + 5) = 0;
      *a4 = 0;
      *((_BYTE *)a4 + 12) = 3;
      v80 = (_QWORD *)operator new();
      v81 = v80;
      *v80 = 0;
      v80[1] = 0;
      v82 = (void **)(v80 + 1);
      v80[2] = 0;
      v80[3] = 0;
      *a4 = (uint64_t)v80;
      *v80 = 1;
      switch(*((_BYTE *)a4 + 12))
      {
        case 2:
          if (*v80 != 1)
          {
            v83 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v83, *a4);
            *a4 = (uint64_t)v83;
            *v83 = 1;
            do
            {
              v84 = __ldaxr(v81);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v81));
            if (!v85)
            {
              v86 = 0x1012C404EF22A49;
              if ((*((char *)v81 + 31) & 0x80000000) == 0)
                goto LABEL_139;
              v87 = *v82;
              goto LABEL_125;
            }
          }
          break;
        case 3:
          if (*v80 != 1)
          {
            v128 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v128, *a4);
            *a4 = (uint64_t)v128;
            *v128 = 1;
            do
            {
              v129 = __ldaxr(v81);
              v130 = v129 - 1;
            }
            while (__stlxr(v130, v81));
            if (!v130)
            {
              v86 = 0x1080C409938AC02;
              v87 = *v82;
              if (*v82)
              {
                v81[2] = v87;
LABEL_125:
                operator delete(v87);
              }
              goto LABEL_139;
            }
          }
          break;
        case 4:
          if (*v80 != 1)
          {
            v121 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v121, *a4);
            *a4 = (uint64_t)v121;
            *v121 = 1;
            do
            {
              v122 = __ldaxr(v81);
              v123 = v122 - 1;
            }
            while (__stlxr(v123, v81));
            if (!v123)
            {
              v86 = 0x1020C405E66F15BLL;
              *(_QWORD *)&v219 = v82;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
              goto LABEL_139;
            }
          }
          break;
        case 5:
          if (*v80 != 1)
          {
            v131 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v131, *a4);
            *a4 = (uint64_t)v131;
            *v131 = 1;
            do
            {
              v132 = __ldaxr(v81);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, v81));
            if (!v133)
            {
              v86 = 0x1020C405E66F15BLL;
              *(_QWORD *)&v219 = v82;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
              goto LABEL_139;
            }
          }
          break;
        case 8:
          if (*v80 != 1)
          {
            v134 = operator new();
            v135 = *a4;
            *(_QWORD *)v134 = *(_QWORD *)*a4;
            *(_QWORD *)(v134 + 8) = *(_QWORD *)(v135 + 8);
            v136 = *(_QWORD *)(v135 + 16);
            *(_QWORD *)(v134 + 16) = v136;
            if (v136)
            {
              v137 = (unsigned int *)(v136 + 8);
              do
                v138 = __ldxr(v137);
              while (__stxr(v138 + 1, v137));
            }
            v139 = *(_OWORD *)(v135 + 24);
            v140 = *(_OWORD *)(v135 + 40);
            *(_OWORD *)(v134 + 56) = *(_OWORD *)(v135 + 56);
            *(_OWORD *)(v134 + 40) = v140;
            *(_OWORD *)(v134 + 24) = v139;
            *a4 = v134;
            *(_QWORD *)v134 = 1;
            do
            {
              v141 = __ldaxr(v81);
              v142 = v141 - 1;
            }
            while (__stlxr(v142, v81));
            if (!v142)
            {
              v86 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v81 + 2);
              goto LABEL_139;
            }
          }
          break;
        case 9:
          if (*v80 != 1)
          {
            v124 = (_QWORD *)operator new();
            v125 = *a4 + 8;
            *v124 = *(_QWORD *)*a4;
            turi::flexible_type_impl::ndarray<double>::ndarray(v124 + 1, v125);
            *a4 = (uint64_t)v124;
            *v124 = 1;
            do
            {
              v126 = __ldaxr(v81);
              v127 = v126 - 1;
            }
            while (__stlxr(v127, v81));
            if (!v127)
            {
              v86 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v81);
LABEL_139:
              MEMORY[0x219A19A08](v81, v86);
            }
          }
          break;
        default:
          break;
      }
      v143 = (_QWORD *)*a4;
      v144 = (void *)v143[1];
      if (v144)
      {
        v143[2] = v144;
        operator delete(v144);
        v143[1] = 0;
        v143[2] = 0;
        v143[3] = 0;
      }
      v102 = 0;
      *(_OWORD *)(v143 + 1) = *(_OWORD *)__src;
      v145 = v231;
LABEL_177:
      v143[3] = v145;
      break;
    default:
      v102 = 1;
      break;
  }
LABEL_178:
  free(v221);
  free(v223);
  free(v225);
  free(v227);
  if ((v102 & 1) != 0)
LABEL_246:
    turi::supervised::logistic_regression::predict_single_example(Eigen::SparseVector<double,0,int> const&,turi::supervised::prediction_type_enum const&)::$_2::operator()();
}

void sub_21857FEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t *a25,uint64_t a26)
{
  unint64_t **v26;
  void *v27;
  uint64_t v28;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;

  MEMORY[0x219A19A08](v28, 0x1020C405E66F15BLL);
  switch(*((_BYTE *)v26 + 12))
  {
    case 2:
      v30 = *v26;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_40;
      v33 = *v26;
      if (!*v26)
        goto LABEL_39;
      if (*((char *)v33 + 31) < 0)
        operator delete((void *)v33[1]);
      v34 = v33;
      v35 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v44 = *v26;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_40;
      v47 = *v26;
      if (!*v26)
        goto LABEL_39;
      v48 = (void *)v47[1];
      if (v48)
      {
        v47[2] = (unint64_t)v48;
        operator delete(v48);
      }
      v34 = v47;
      v35 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v36 = *v26;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v39 = *v26;
      if (!*v26)
        goto LABEL_39;
      a25 = v39 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
      goto LABEL_31;
    case 5:
      v49 = *v26;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_40;
      v39 = *v26;
      if (!*v26)
        goto LABEL_39;
      a25 = v39 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
LABEL_31:
      v34 = v39;
      v35 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v52 = *v26;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (v54)
        goto LABEL_40;
      v55 = *v26;
      if (!*v26)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v55 + 2);
      v34 = v55;
      v43 = -235920773;
      goto LABEL_37;
    case 9:
      v40 = *v26;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_40;
      if (!*v26)
        goto LABEL_39;
      v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v26);
      v43 = 2071181815;
LABEL_37:
      v35 = v43 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v34, v35);
LABEL_39:
      *v26 = 0;
LABEL_40:
      *v26 = 0;
      *((_DWORD *)v26 + 2) = 0;
      *((_BYTE *)v26 + 12) = 0;
      operator delete(v27);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void turi::supervised::logistic_regression::fast_predict_topk(turi::supervised::supervised_learning_model_base *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string::value_type *a4@<X3>, std::vector<std::pair<unsigned long, const char *>>::size_type a5@<X4>, _QWORD *a6@<X8>)
{
  int *v10;
  int *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  char *v16;
  char v17;
  unint64_t v18;
  std::vector<std::pair<unsigned long, const char *>>::size_type v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  std::string **v23;
  std::string *v24;
  std::string *v25;
  std::string::size_type *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t i;
  uint64_t v43;
  std::string::size_type v44;
  uint64_t j;
  uint64_t v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  __n128 v56;
  std::string **v57;
  std::string **v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  std::string **v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  std::string **v73;
  uint64_t v74;
  unint64_t v75;
  std::string **v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  std::string **v83;
  std::string *v84;
  unint64_t *v86;
  std::string *v87;
  std::string *v88;
  std::string **v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *size;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  char v99;
  _QWORD *v100;
  const char *v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  void *v111;
  void *v112;
  double *p_first;
  std::pair<unsigned long, const char *> *v114;
  double v115;
  double v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  char *v123;
  double v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int v128;
  __int128 v129;
  __int128 v130;
  float v131;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  char *v136;
  double v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  __int128 v142;
  __int128 v143;
  double *v144;
  uint64_t *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  void *v160;
  void *v161;
  unsigned int v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  void *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  void *v192;
  void *v193;
  unsigned int v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  void *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  int v209;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  std::vector<std::pair<unsigned long, const char *>>::pointer v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  void *v238;
  void *v239;
  unsigned int v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  _QWORD *v244;
  void *v245;
  void *v246;
  unsigned int v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  void *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  void *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  BOOL v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  BOOL v279;
  unint64_t v280;
  unint64_t v281;
  BOOL v282;
  void *v283;
  void *v284;
  unsigned int v285;
  unint64_t v286;
  unint64_t v287;
  BOOL v288;
  void *v289;
  unint64_t v290;
  unint64_t v291;
  BOOL v292;
  unint64_t v293;
  unint64_t v294;
  BOOL v295;
  std::bad_alloc *exception;
  std::bad_alloc *v297;
  uint64_t v298;
  unsigned int *v299;
  unsigned int v300;
  __int128 v301;
  __int128 v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  std::string *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  std::runtime_error *v316;
  std::string *v317;
  __int128 v318;
  std::runtime_error *v319;
  std::string *v320;
  __int128 v321;
  __int128 v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v326;
  _BYTE *v327;
  int missing_value_enum_from_string;
  unint64_t v329;
  std::vector<std::pair<unsigned long, const char *>>::size_type __sz;
  std::vector<std::pair<unsigned long, const char *>>::size_type v332;
  std::string *v333;
  _BYTE *v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t *v337;
  char v338[8];
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341[3];
  std::vector<std::pair<unsigned long, const char *>> v342;
  void **v343;
  void *v344;
  unint64_t v345;
  char *v346;
  std::string *v347;
  std::string *v348;
  std::string *v349;
  char v350;
  std::string v351;
  size_t __idx;
  std::string __p;
  __int128 v354;
  void *v355;
  std::string v356;
  __int128 v357[13];
  std::string **p_p;
  int64_t v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;

  v363 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  v10 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  __sz = turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v350 = turi::supervised::prediction_type_enum_from_name(a4);
  missing_value_enum_from_string = turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string((uint64_t)a1, a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  v11 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  v326 = turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (__sz < a5)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"The training data contained ", 28);
    v312 = (_QWORD *)std::ostream::operator<<();
    v313 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v312, (uint64_t)" classes.", 9);
    v314 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v313, (uint64_t)" The parameter 'k' must be less than or equal to the number of ", 63);
    v315 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v314, (uint64_t)"classes in the training data.", 29);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v315);
    p_p = (std::string **)&__p;
    turi::supervised::logistic_regression::fast_predict_topk(std::vector<turi::flexible_type> const&,std::string const&,std::string const&,unsigned long)::$_0::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "id");
  std::string::basic_string[abi:ne180100]<0>(&v354, "class");
  if (a4[23] < 0)
    std::string::__init_copy_ctor_external(&v356, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  else
    v356 = *(std::string *)a4;
  v347 = 0;
  v348 = 0;
  v349 = 0;
  p_p = &v347;
  LOBYTE(v359) = 0;
  v347 = (std::string *)operator new(0x48uLL);
  v348 = v347;
  v349 = v347 + 3;
  v12 = 0;
  v348 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v349, (__int128 *)&__p, v357, v347);
  v329 = v326 / (__sz - 1);
  do
  {
    if (SHIBYTE(v356.__r_.__value_.__r.__words[v12 + 2]) < 0)
      operator delete(*(void **)((char *)&v356.__r_.__value_.__l.__data_ + v12 * 8));
    v12 -= 3;
  }
  while (v12 != -9);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 47) + 24) + 28);
  v14 = (uint64_t)operator new(2uLL);
  *(_WORD *)v14 = v13 << 8;
  v345 = v14 + 2;
  v346 = (char *)(v14 + 2);
  v344 = (void *)v14;
  v15 = a4[23];
  if (v15 < 0)
  {
    if (*((_QWORD *)a4 + 1) != 4)
    {
LABEL_19:
      v16 = (char *)operator new(4uLL);
      v17 = 1;
      goto LABEL_20;
    }
    a4 = *(std::string::value_type **)a4;
  }
  else if (v15 != 4)
  {
    goto LABEL_19;
  }
  if (*(_DWORD *)a4 != 1802396018)
    goto LABEL_19;
  v16 = (char *)operator new(4uLL);
  v17 = 0;
LABEL_20:
  v16[2] = v17;
  *(_WORD *)v16 = *(_WORD *)v14;
  v18 = (unint64_t)(v16 + 3);
  v344 = v16;
  v346 = v16 + 4;
  operator delete((void *)v14);
  v345 = v18;
  turi::gl_sframe_writer::gl_sframe_writer(&v343, &v347, &v344, 1);
  v19 = __sz;
  if (__sz <= 1)
    v20 = 1;
  else
    v20 = __sz;
  v336 = (uint64_t *)v20;
  v334 = *(_BYTE **)a2;
  v327 = *(_BYTE **)(a2 + 8);
  if (*(_BYTE **)a2 != v327)
  {
    v21 = 0;
    v337 = (uint64_t *)((char *)a1 + 376);
    v332 = a5;
    do
    {
      memset(&v342, 0, sizeof(v342));
      std::vector<std::pair<unsigned long,char const*>>::resize(&v342, v19);
      memset(v341, 0, sizeof(v341));
      std::vector<turi::flexible_type>::resize((uint64_t *)v341, 3uLL);
      if (v334[12] != 5)
        turi::supervised::logistic_regression::fast_predict_topk(std::vector<turi::flexible_type> const&,std::string const&,std::string const&,unsigned long)::$_1::operator()();
      v22 = *(_QWORD *)(*((_QWORD *)a1 + 47) + 64);
      v335 = v21;
      if (v22 <= 3 * turi::supervised::supervised_learning_model_base::num_features(a1))
      {
        p_p = 0;
        v359 = 0;
        if (__sz - 1 <= v326)
        {
          if (v329 >> 61 || (v57 = (std::string **)malloc_type_malloc(8 * v329, 0x1E76AA36uLL)) == 0)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v297 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v297, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          p_p = v57;
        }
        v359 = v326 / (__sz - 1);
        turi::ml_data_row_reference::from_row(v337, (_QWORD *)(*(_QWORD *)v334 + 8), missing_value_enum_from_string, (uint64_t)&__p);
        v58 = p_p;
        v18 = v359;
        if (v359 >= 0)
          v59 = v359;
        else
          v59 = v359 + 1;
        v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
        if (v359 >= 2)
        {
          v61 = 2;
          if (v60 > 2)
            v61 = v59 & 0xFFFFFFFFFFFFFFFELL;
          bzero(p_p, ((8 * v61 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if (v60 < (uint64_t)v18)
          bzero(&v58[2 * (v59 >> 1)], 8 * v18 - 16 * (v59 >> 1));
        a5 = v332;
        v21 = v335;
        if (BYTE8(v354))
        {
          v62 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 56);
          if (v62)
          {
            v63 = 0;
            v64 = 0;
            v65 = (unint64_t *)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 96)
                                     + 8 * __p.__r_.__value_.__r.__words[2]
                                     + 8 * (*(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 18) == 0));
            v66 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 72);
            v67 = p_p;
            while (2)
            {
              v68 = *(_QWORD *)(v66 + 16 * v63);
              v69 = *(_QWORD *)(v68 + 64);
              switch(*(_DWORD *)(v68 + 24))
              {
                case 0:
                  if (v69)
                    v67[v64] = (std::string *)*v65;
                  ++v65;
                  goto LABEL_106;
                case 1:
                  v78 = *v65++;
                  v77 = v78;
                  v79 = v64 - 1;
                  if (v78 < v69 && v77 != 0)
                    *(&v67[v79] + v77) = (std::string *)0x3FF0000000000000;
                  goto LABEL_120;
                case 2:
                  v70 = *(_QWORD *)(v68 + 72);
                  if (!v70)
                    goto LABEL_106;
                  v71 = 0;
                  v72 = 0;
                  v73 = &p_p[v64];
                  do
                  {
                    if (v72 < v69)
                      v73[v72] = (std::string *)v65[v72];
                    ++v72;
                    v71 -= 8;
                  }
                  while (v70 != v72);
                  goto LABEL_105;
                case 3:
                  v82 = *v65++;
                  v81 = v82;
                  v79 = v64 - 1;
                  if (v82)
                  {
                    v83 = p_p;
                    do
                    {
                      v84 = (std::string *)*v65;
                      if (*v65 < v69 && v84 != 0)
                        v83[(_QWORD)v84 + v79] = (std::string *)0x3FF0000000000000;
                      ++v65;
                      --v81;
                    }
                    while (v81);
                  }
LABEL_120:
                  v64 = v79 + v69;
                  goto LABEL_129;
                case 4:
                  v88 = (std::string *)*v65;
                  v86 = v65 + 1;
                  v87 = v88;
                  if (v88)
                  {
                    v89 = p_p;
                    v90 = v86;
                    do
                    {
                      v92 = *v90;
                      v90 += 2;
                      v91 = v92;
                      if (v92 < v69)
                        *(&v89[v91] + v64) = (std::string *)v86[1];
                      v86 = v90;
                      v87 = (std::string *)((char *)v87 - 1);
                    }
                    while (v87);
                  }
                  else
                  {
                    v90 = v86;
                  }
                  v64 += v69;
                  v65 = v90;
                  goto LABEL_129;
                case 7:
                  v74 = *(_QWORD *)(v68 + 72);
                  if (!v74)
                    goto LABEL_106;
                  v71 = 0;
                  v75 = 0;
                  v76 = &p_p[v64];
                  do
                  {
                    if (v75 < v69)
                      v76[v75] = (std::string *)v65[v75];
                    ++v75;
                    v71 -= 8;
                  }
                  while (v74 != v75);
LABEL_105:
                  v65 = (unint64_t *)((char *)v65 - v71);
LABEL_106:
                  v64 += v69;
LABEL_129:
                  if (++v63 == v62)
                    break;
                  continue;
                default:
                  goto LABEL_129;
              }
              break;
            }
          }
        }
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v94 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        p_p[v329 - 1] = (std::string *)0x3FF0000000000000;
        (*(void (**)(std::string *__return_ptr, turi::supervised::supervised_learning_model_base *, std::string ***, char *))(*(_QWORD *)a1 + 88))(&__p, a1, &p_p, &v350);
        v53 = __p.__r_.__value_.__r.__words[0];
        v54 = __p.__r_.__value_.__r.__words[1];
        v55 = __p.__r_.__value_.__s.__data_[12];
        free(p_p);
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
        v354 = 0u;
        v355 = (void *)(v326 / (__sz - 1));
        turi::ml_data_row_reference::from_row(v337, (_QWORD *)(*(_QWORD *)v334 + 8), missing_value_enum_from_string, (uint64_t)&p_p);
        *(_QWORD *)&v354 = 0;
        if ((_BYTE)v361)
        {
          v23 = p_p;
          v24 = p_p[7];
          if (v24)
          {
            v25 = 0;
            v14 = 0;
            v26 = &p_p[12]->__r_.__value_.__r.__words[v360 + (*((_BYTE *)p_p + 18) == 0)];
            v333 = p_p[7];
            do
            {
              v27 = *((_QWORD *)&v23[9]->__r_.__value_.__l.__data_ + 2 * (_QWORD)v25);
              v18 = *(_QWORD *)(v27 + 64);
              switch(*(_DWORD *)(v27 + 24))
              {
                case 0:
                  v28 = *v26++;
                  v29 = v28;
                  if (v18)
                  {
                    __idx = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&__p.__r_.__value_.__l.__size_, (int)v14, &__idx) = v29;
                  }
                  v14 += v18;
                  break;
                case 1:
                  v40 = *v26++;
                  v39 = v40;
                  if (v40 < v18 && v39 != 0)
                  {
                    __idx = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&__p.__r_.__value_.__l.__size_, (int)v39 + (int)v14 - 1, &__idx) = 0x3FF0000000000000;
                  }
                  v14 = v14 + v18 - 1;
                  break;
                case 2:
                  v30 = *(_QWORD *)(v27 + 72);
                  if (!v30)
                    goto LABEL_46;
                  v31 = 0;
                  v32 = 0;
                  v33 = v14 << 32;
                  do
                  {
                    if (v32 < v18)
                    {
                      v34 = v26[v32];
                      __idx = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&__p.__r_.__value_.__l.__size_, v33 >> 32, &__idx) = v34;
                    }
                    ++v32;
                    v33 += 0x100000000;
                    v31 -= 8;
                  }
                  while (v30 != v32);
                  goto LABEL_45;
                case 3:
                  v43 = *v26++;
                  for (i = v43; i; --i)
                  {
                    v44 = *v26;
                    if (*v26 < v18 && v44 != 0)
                    {
                      __idx = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&__p.__r_.__value_.__l.__size_, (int)v44 + (int)v14 - 1, &__idx) = 0x3FF0000000000000;
                    }
                    ++v26;
                  }
                  v14 = v14 + v18 - 1;
                  goto LABEL_66;
                case 4:
                  v47 = *v26++;
                  for (j = v47; j; --j)
                  {
                    v48 = *v26;
                    if (*v26 < v18)
                    {
                      v49 = v26[1];
                      __idx = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&__p.__r_.__value_.__l.__size_, (int)v48 + (int)v14, &__idx) = v49;
                    }
                    v26 += 2;
                  }
                  v14 += v18;
LABEL_66:
                  v21 = v335;
                  break;
                case 7:
                  v35 = *(_QWORD *)(v27 + 72);
                  if (v35)
                  {
                    v31 = 0;
                    v36 = 0;
                    v37 = v14 << 32;
                    do
                    {
                      if (v36 < v18)
                      {
                        v38 = v26[v36];
                        __idx = 0;
                        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&__p.__r_.__value_.__l.__size_, v37 >> 32, &__idx) = v38;
                      }
                      ++v36;
                      v37 += 0x100000000;
                      v31 -= 8;
                    }
                    while (v35 != v36);
LABEL_45:
                    v26 = (std::string::size_type *)((char *)v26 - v31);
                    a5 = v332;
                    v21 = v335;
                  }
LABEL_46:
                  v14 += v18;
                  v24 = v333;
                  break;
                default:
                  break;
              }
              v25 = (std::string *)((char *)v25 + 1);
            }
            while (v25 != v24);
          }
        }
        v50 = (std::__shared_weak_count *)v359;
        if (v359)
        {
          v51 = (unint64_t *)(v359 + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        p_p = 0;
        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&__p.__r_.__value_.__l.__size_, (int)v329 - 1, &p_p) = 0x3FF0000000000000;
        (*(void (**)(std::string ***__return_ptr, turi::supervised::supervised_learning_model_base *, std::string *, char *))(*(_QWORD *)a1 + 96))(&p_p, a1, &__p, &v350);
        v53 = (uint64_t)p_p;
        v54 = v359;
        v55 = BYTE4(v359);
        Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&__p.__r_.__value_.__l.__size_);
      }
      v96 = 1;
      switch(v55)
      {
        case 3:
          v97 = (_QWORD *)(v53 + 8);
          v98 = (_QWORD *)(v53 + 16);
          v99 = 3;
          goto LABEL_140;
        case 4:
          v97 = (_QWORD *)(v53 + 8);
          v98 = (_QWORD *)(v53 + 16);
          v99 = 4;
          goto LABEL_140;
        case 5:
          v97 = (_QWORD *)(v53 + 8);
          v98 = (_QWORD *)(v53 + 16);
          v99 = 5;
LABEL_140:
          v96 = (uint64_t)(*v98 - *v97) >> v99;
          break;
        case 9:
          v118 = *(uint64_t **)(v53 + 24);
          v117 = *(uint64_t **)(v53 + 32);
          if (v117 == v118)
          {
            v96 = 0;
          }
          else
          {
            v96 = *(_QWORD *)(v53 + 8);
            if (v96)
            {
              v96 = 1;
              do
              {
                v119 = *v118++;
                v96 *= v119;
              }
              while (v118 != v117);
            }
          }
          break;
        default:
          break;
      }
      if (v96 != __sz)
      {
        v115 = 0.0;
        v56.n128_u64[0] = 0;
        if (v350 != 5)
        {
          v116 = 0.0;
          switch(v55)
          {
            case 0:
              v116 = (double)v53;
              goto LABEL_210;
            case 1:
              v116 = *(double *)&v53;
              goto LABEL_210;
            case 2:
              v14 = v53 + 8;
              __idx = 0;
              v123 = (char *)(v53 + 8);
              if (*(char *)(v53 + 31) < 0)
                v123 = *(char **)v14;
              std::string::basic_string[abi:ne180100]<0>(&__p, v123);
              v124 = std::stod(&__p, &__idx);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(char *)(v53 + 31) < 0)
                v125 = *(_QWORD *)(v53 + 16);
              else
                v125 = *(unsigned __int8 *)(v53 + 31);
              if (__idx != v125)
              {
                v319 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v320 = std::string::append(&v351, " cannot be interpreted as a float");
                v321 = *(_OWORD *)&v320->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v320->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v321;
                v320->__r_.__value_.__l.__size_ = 0;
                v320->__r_.__value_.__r.__words[2] = 0;
                v320->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v319, &__p);
                __cxa_throw(v319, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v131 = v124;
              v116 = v131;
              goto LABEL_210;
            case 3:
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v53 + 8), *(_QWORD *)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_210;
            case 4:
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v351);
              goto LABEL_210;
            case 5:
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v351);
              goto LABEL_210;
            case 6:
              v116 = (double)v54 / 1000000.0 + (double)(v53 << 8 >> 8);
              goto LABEL_210;
            case 7:
              goto LABEL_210;
            case 8:
              v126 = *(unsigned int **)(v53 + 16);
              p_p = *(std::string ***)(v53 + 8);
              v359 = (int64_t)v126;
              if (v126)
              {
                v127 = v126 + 2;
                do
                  v128 = __ldxr(v127);
                while (__stxr(v128 + 1, v127));
              }
              v129 = *(_OWORD *)(v53 + 24);
              v130 = *(_OWORD *)(v53 + 56);
              v361 = *(_OWORD *)(v53 + 40);
              v362 = v130;
              v360 = v129;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&v359);
              goto LABEL_210;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v53 + 8);
              turi::flexible_type_fail(0);
              if (v355)
              {
                v356.__r_.__value_.__r.__words[0] = (std::string::size_type)v355;
                operator delete(v355);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                *(_QWORD *)&v354 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              v120 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v121 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
LABEL_210:
              v56.n128_f64[0] = 1.0 - v116;
              break;
            default:
LABEL_511:
              v311 = (std::string *)turi::flexible_type_fail(0);
              goto LABEL_514;
          }
        }
        begin = v342.__begin_;
        v342.__begin_->first = 0;
        begin->second = (const char *)v56.n128_u64[0];
        switch(v55)
        {
          case 0:
            v115 = (double)v53;
            goto LABEL_241;
          case 1:
            v115 = *(double *)&v53;
            goto LABEL_241;
          case 2:
            v14 = v53 + 8;
            __idx = 0;
            v136 = (char *)(v53 + 8);
            if (*(char *)(v53 + 31) < 0)
              v136 = *(char **)v14;
            std::string::basic_string[abi:ne180100]<0>(&__p, v136);
            v56.n128_f64[0] = std::stod(&__p, &__idx);
            v137 = v56.n128_f64[0];
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (*(char *)(v53 + 31) < 0)
              v138 = *(_QWORD *)(v53 + 16);
            else
              v138 = *(unsigned __int8 *)(v53 + 31);
            if (__idx != v138)
            {
              v316 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v317 = std::string::append(&v351, " cannot be interpreted as a float");
              v318 = *(_OWORD *)&v317->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v317->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v318;
              v317->__r_.__value_.__l.__size_ = 0;
              v317->__r_.__value_.__r.__words[2] = 0;
              v317->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v316, &__p);
              __cxa_throw(v316, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            v56.n128_f32[0] = v137;
            v115 = v56.n128_f32[0];
            goto LABEL_241;
          case 3:
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v53 + 8), *(_QWORD *)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_241;
          case 4:
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v351);
            goto LABEL_241;
          case 5:
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v351);
            goto LABEL_241;
          case 6:
            v56.n128_f64[0] = (double)(v53 << 8 >> 8);
            v115 = (double)v54 / 1000000.0 + v56.n128_f64[0];
            goto LABEL_241;
          case 7:
            goto LABEL_241;
          case 8:
            v139 = *(unsigned int **)(v53 + 16);
            p_p = *(std::string ***)(v53 + 8);
            v359 = (int64_t)v139;
            if (v139)
            {
              v140 = v139 + 2;
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
            }
            v142 = *(_OWORD *)(v53 + 24);
            v143 = *(_OWORD *)(v53 + 56);
            v361 = *(_OWORD *)(v53 + 40);
            v362 = v143;
            v360 = v142;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&v359);
            goto LABEL_241;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v53 + 8);
            turi::flexible_type_fail(0);
            if (v355)
            {
              v356.__r_.__value_.__r.__words[0] = (std::string::size_type)v355;
              operator delete(v355);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              *(_QWORD *)&v354 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            v133 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v134 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 - 1, v134));
              if (!v135)
              {
                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                std::__shared_weak_count::__release_weak(v133);
              }
            }
LABEL_241:
            p_first = (double *)&v342.__begin_->first;
            v342.__begin_[1].first = 1;
            p_first[3] = v115;
            goto LABEL_242;
          default:
            goto LABEL_511;
        }
      }
      if (__sz)
      {
        switch(v55)
        {
          case 1:
          case 3:
          case 9:
            v18 = 0;
            v14 = v53;
            break;
          case 2:
            if (*(_QWORD *)v53 == 1)
              goto LABEL_506;
            v14 = operator new();
            *(_QWORD *)v14 = *(_QWORD *)v53;
            v311 = (std::string *)(v14 + 8);
            v18 = v53 + 8;
            if ((*(char *)(v53 + 31) & 0x80000000) == 0)
              goto LABEL_515;
            std::string::__init_copy_ctor_external(v311, *(const std::string::value_type **)(v53 + 8), *(_QWORD *)(v53 + 16));
            goto LABEL_516;
          case 4:
            if (*(_QWORD *)v53 == 1)
              goto LABEL_506;
            v14 = operator new();
            *(_QWORD *)v14 = *(_QWORD *)v53;
            *(_QWORD *)(v14 + 16) = 0;
            *(_QWORD *)(v14 + 24) = 0;
            *(_QWORD *)(v14 + 8) = 0;
            v18 = v53 + 8;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(v14 + 8), *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 4);
            *(_QWORD *)v14 = 1;
            do
            {
              v309 = __ldaxr((unint64_t *)v53);
              v310 = v309 - 1;
            }
            while (__stlxr(v310, (unint64_t *)v53));
            if (v310)
              goto LABEL_507;
            __p.__r_.__value_.__r.__words[0] = v53 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_504;
          case 5:
            if (*(_QWORD *)v53 == 1)
              goto LABEL_506;
            v14 = operator new();
            *(_QWORD *)v14 = *(_QWORD *)v53;
            *(_QWORD *)(v14 + 16) = 0;
            *(_QWORD *)(v14 + 24) = 0;
            *(_QWORD *)(v14 + 8) = 0;
            v18 = v53 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((_QWORD *)(v14 + 8), *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 5);
            *(_QWORD *)v14 = 1;
            do
            {
              v307 = __ldaxr((unint64_t *)v53);
              v308 = v307 - 1;
            }
            while (__stlxr(v308, (unint64_t *)v53));
            if (v308)
              goto LABEL_507;
            __p.__r_.__value_.__r.__words[0] = v53 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_504:
            v305 = v53;
            v306 = 0x1020C405E66F15BLL;
            goto LABEL_522;
          case 8:
            if (*(_QWORD *)v53 == 1)
              goto LABEL_506;
            v14 = operator new();
            *(_QWORD *)v14 = *(_QWORD *)v53;
            v298 = *(_QWORD *)(v53 + 16);
            *(_QWORD *)(v14 + 8) = *(_QWORD *)(v53 + 8);
            *(_QWORD *)(v14 + 16) = v298;
            if (v298)
            {
              v299 = (unsigned int *)(v298 + 8);
              do
                v300 = __ldxr(v299);
              while (__stxr(v300 + 1, v299));
            }
            v301 = *(_OWORD *)(v53 + 24);
            v302 = *(_OWORD *)(v53 + 40);
            *(_OWORD *)(v14 + 56) = *(_OWORD *)(v53 + 56);
            *(_OWORD *)(v14 + 40) = v302;
            *(_OWORD *)(v14 + 24) = v301;
            *(_QWORD *)v14 = 1;
            do
            {
              v303 = __ldaxr((unint64_t *)v53);
              v304 = v303 - 1;
            }
            while (__stlxr(v304, (unint64_t *)v53));
            if (v304)
              goto LABEL_507;
            boost::detail::shared_count::~shared_count((unsigned int **)(v53 + 16));
            v305 = v53;
            v306 = 0x1030C40F1F0227BLL;
            goto LABEL_522;
          default:
LABEL_506:
            v14 = v53;
            goto LABEL_507;
        }
        do
        {
          if (v55 == 1)
          {
            v101 = (const char *)v14;
            if (v18)
            {
              while (1)
              {
LABEL_507:
                v53 = v14;
                v311 = (std::string *)turi::flexible_type_fail(0);
LABEL_514:
                __break(1u);
LABEL_515:
                v322 = *(_OWORD *)v18;
                v311->__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
                *(_OWORD *)&v311->__r_.__value_.__l.__data_ = v322;
LABEL_516:
                *(_QWORD *)v14 = 1;
                do
                {
                  v323 = __ldaxr((unint64_t *)v53);
                  v324 = v323 - 1;
                }
                while (__stlxr(v324, (unint64_t *)v53));
                if (!v324)
                {
                  if (*(char *)(v53 + 31) < 0)
                    operator delete(*(void **)v18);
                  v305 = v53;
                  v306 = 0x1012C404EF22A49;
LABEL_522:
                  MEMORY[0x219A19A08](v305, v306);
                }
              }
            }
          }
          else
          {
            if (v55 == 3)
            {
              if (*(_QWORD *)v14 == 1)
              {
                v100 = (_QWORD *)v14;
              }
              else
              {
                v102 = (_QWORD *)operator new();
                *v102 = *(_QWORD *)v14;
                v102[2] = 0;
                v102[3] = 0;
                v102[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v102 + 1, *(const void **)(v14 + 8), *(_QWORD *)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 3);
                *v102 = 1;
                do
                {
                  v103 = __ldaxr((unint64_t *)v14);
                  v104 = v103 - 1;
                }
                while (__stlxr(v104, (unint64_t *)v14));
                v100 = v102;
                if (!v104)
                {
                  v105 = *(void **)(v14 + 8);
                  if (v105)
                  {
                    *(_QWORD *)(v14 + 16) = v105;
                    operator delete(v105);
                  }
                  MEMORY[0x219A19A08](v14, 0x1080C409938AC02);
                  v100 = v102;
                }
              }
              v106 = v100 + 1;
              v107 = v18;
            }
            else
            {
              if (*(_QWORD *)v14 == 1)
              {
                v100 = (_QWORD *)v14;
              }
              else
              {
                v108 = (_QWORD *)operator new();
                *v108 = *(_QWORD *)v14;
                turi::flexible_type_impl::ndarray<double>::ndarray(v108 + 1, v14 + 8);
                *v108 = 1;
                do
                {
                  v109 = __ldaxr((unint64_t *)v14);
                  v110 = v109 - 1;
                }
                while (__stlxr(v110, (unint64_t *)v14));
                v100 = v108;
                if (!v110)
                {
                  v111 = *(void **)(v14 + 48);
                  if (v111)
                  {
                    *(_QWORD *)(v14 + 56) = v111;
                    operator delete(v111);
                  }
                  v112 = *(void **)(v14 + 24);
                  if (v112)
                  {
                    *(_QWORD *)(v14 + 32) = v112;
                    operator delete(v112);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 8);
                  MEMORY[0x219A19A08](v14, 0x1030C407B73B9F7);
                  v100 = v108;
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v100 + 1);
              v106 = (_QWORD *)v100[1];
              v107 = v100[9] + v18;
            }
            v101 = *(const char **)(*v106 + 8 * v107);
            v14 = (uint64_t)v100;
          }
          p_first = (double *)&v342.__begin_->first;
          v114 = &v342.__begin_[v18];
          v114->first = v18;
          v114->second = v101;
          ++v18;
        }
        while ((uint64_t *)v18 != v336);
        v53 = v14;
      }
      else
      {
        p_first = (double *)&v342.__begin_->first;
      }
LABEL_242:
      v144 = &p_first[2 * a5 - 2];
      v339 = 8;
      v340 = 8;
      if (v144 != (double *)v342.__end_)
        v56.n128_f64[0] = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(p_first, v144, (double *)&v342.__end_->first, (uint64_t)v338, v56.n128_f64[0]);
      if (a5)
      {
        v14 = 0;
        do
        {
          v145 = v341[0];
          switch(*((_BYTE *)v341[0] + 12))
          {
            case 2:
              v146 = (unint64_t *)*v341[0];
              do
              {
                v147 = __ldaxr(v146);
                v148 = v147 - 1;
              }
              while (__stlxr(v148, v146));
              if (!v148)
              {
                v149 = *v145;
                if (!*v145)
                  goto LABEL_288;
                if (*(char *)(v149 + 31) < 0)
                  operator delete(*(void **)(v149 + 8));
                v150 = (_QWORD *)v149;
                v151 = 0x1012C404EF22A49;
                goto LABEL_287;
              }
              break;
            case 3:
              v163 = (unint64_t *)*v341[0];
              do
              {
                v164 = __ldaxr(v163);
                v165 = v164 - 1;
              }
              while (__stlxr(v165, v163));
              if (!v165)
              {
                v166 = *v145;
                if (!*v145)
                  goto LABEL_288;
                v167 = *(void **)(v166 + 8);
                if (v167)
                {
                  *(_QWORD *)(v166 + 16) = v167;
                  operator delete(v167);
                }
                v150 = (_QWORD *)v166;
                v151 = 0x1080C409938AC02;
                goto LABEL_287;
              }
              break;
            case 4:
              v152 = (unint64_t *)*v341[0];
              do
              {
                v153 = __ldaxr(v152);
                v154 = v153 - 1;
              }
              while (__stlxr(v154, v152));
              if (!v154)
              {
                v155 = *v145;
                if (!*v145)
                  goto LABEL_288;
                __p.__r_.__value_.__r.__words[0] = v155 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_280;
              }
              break;
            case 5:
              v168 = (unint64_t *)*v341[0];
              do
              {
                v169 = __ldaxr(v168);
                v170 = v169 - 1;
              }
              while (__stlxr(v170, v168));
              if (!v170)
              {
                v155 = *v145;
                if (!*v145)
                  goto LABEL_288;
                __p.__r_.__value_.__r.__words[0] = v155 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_280:
                v150 = (_QWORD *)v155;
                v151 = 0x1020C405E66F15BLL;
                goto LABEL_287;
              }
              break;
            case 8:
              v171 = (unint64_t *)*v341[0];
              do
              {
                v172 = __ldaxr(v171);
                v173 = v172 - 1;
              }
              while (__stlxr(v173, v171));
              if (!v173)
              {
                v174 = *v145;
                if (!*v145)
                  goto LABEL_288;
                boost::detail::shared_count::~shared_count((unsigned int **)(v174 + 16));
                v150 = (_QWORD *)v174;
                v162 = -235920773;
                goto LABEL_286;
              }
              break;
            case 9:
              v156 = (unint64_t *)*v341[0];
              do
              {
                v157 = __ldaxr(v156);
                v158 = v157 - 1;
              }
              while (__stlxr(v158, v156));
              if (!v158)
              {
                v159 = (_QWORD *)*v145;
                if (*v145)
                {
                  v160 = (void *)v159[6];
                  if (v160)
                  {
                    v159[7] = v160;
                    operator delete(v160);
                  }
                  v161 = (void *)v159[3];
                  if (v161)
                  {
                    v159[4] = v161;
                    operator delete(v161);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v159 + 1));
                  v150 = v159;
                  v162 = 2071181815;
LABEL_286:
                  v151 = v162 | 0x1030C4000000000;
LABEL_287:
                  MEMORY[0x219A19A08](v150, v151, v56);
                }
LABEL_288:
                *v145 = 0;
              }
              break;
            default:
              break;
          }
          *((_DWORD *)v145 + 2) = 0;
          *((_BYTE *)v145 + 12) = 0;
          *v145 = v21;
          v175 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v337 + 24) + 32) + 80) + 16 * v342.__begin_[v14].first;
          v176 = v341[0];
          v177 = v341[0] + 2;
          if ((uint64_t *)v175 != v341[0] + 2)
          {
            switch(*((_BYTE *)v341[0] + 28))
            {
              case 2:
                v178 = (unint64_t *)*v177;
                do
                {
                  v179 = __ldaxr(v178);
                  v180 = v179 - 1;
                }
                while (__stlxr(v180, v178));
                if (!v180)
                {
                  v181 = *v177;
                  if (!*v177)
                    goto LABEL_332;
                  if (*(char *)(v181 + 31) < 0)
                    operator delete(*(void **)(v181 + 8));
                  v182 = (_QWORD *)v181;
                  v183 = 0x1012C404EF22A49;
                  goto LABEL_331;
                }
                break;
              case 3:
                v195 = (unint64_t *)*v177;
                do
                {
                  v196 = __ldaxr(v195);
                  v197 = v196 - 1;
                }
                while (__stlxr(v197, v195));
                if (!v197)
                {
                  v198 = *v177;
                  if (!*v177)
                    goto LABEL_332;
                  v199 = *(void **)(v198 + 8);
                  if (v199)
                  {
                    *(_QWORD *)(v198 + 16) = v199;
                    operator delete(v199);
                  }
                  v182 = (_QWORD *)v198;
                  v183 = 0x1080C409938AC02;
                  goto LABEL_331;
                }
                break;
              case 4:
                v184 = (unint64_t *)*v177;
                do
                {
                  v185 = __ldaxr(v184);
                  v186 = v185 - 1;
                }
                while (__stlxr(v186, v184));
                if (!v186)
                {
                  v187 = *v177;
                  if (!*v177)
                    goto LABEL_332;
                  __p.__r_.__value_.__r.__words[0] = v187 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_324;
                }
                break;
              case 5:
                v200 = (unint64_t *)*v177;
                do
                {
                  v201 = __ldaxr(v200);
                  v202 = v201 - 1;
                }
                while (__stlxr(v202, v200));
                if (!v202)
                {
                  v187 = *v177;
                  if (!*v177)
                    goto LABEL_332;
                  __p.__r_.__value_.__r.__words[0] = v187 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_324:
                  v182 = (_QWORD *)v187;
                  v183 = 0x1020C405E66F15BLL;
                  goto LABEL_331;
                }
                break;
              case 8:
                v203 = (unint64_t *)*v177;
                do
                {
                  v204 = __ldaxr(v203);
                  v205 = v204 - 1;
                }
                while (__stlxr(v205, v203));
                if (!v205)
                {
                  v206 = *v177;
                  if (!*v177)
                    goto LABEL_332;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v206 + 16));
                  v182 = (_QWORD *)v206;
                  v194 = -235920773;
                  goto LABEL_330;
                }
                break;
              case 9:
                v188 = (unint64_t *)*v177;
                do
                {
                  v189 = __ldaxr(v188);
                  v190 = v189 - 1;
                }
                while (__stlxr(v190, v188));
                if (!v190)
                {
                  v191 = (_QWORD *)*v177;
                  if (*v177)
                  {
                    v192 = (void *)v191[6];
                    if (v192)
                    {
                      v191[7] = v192;
                      operator delete(v192);
                    }
                    v193 = (void *)v191[3];
                    if (v193)
                    {
                      v191[4] = v193;
                      operator delete(v193);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v191 + 1));
                    v182 = v191;
                    v194 = 2071181815;
LABEL_330:
                    v183 = v194 | 0x1030C4000000000;
LABEL_331:
                    MEMORY[0x219A19A08](v182, v183, v56);
                  }
LABEL_332:
                  *v177 = 0;
                }
                break;
              default:
                break;
            }
            v207 = *(_QWORD *)v175;
            *(uint64_t *)((char *)v177 + 5) = *(_QWORD *)(v175 + 5);
            *v177 = v207;
            LODWORD(v207) = *(unsigned __int8 *)(v175 + 12);
            *((_BYTE *)v176 + 28) = v207;
            v208 = v207 > 9;
            v209 = (1 << v207) & 0x33C;
            if (!v208 && v209 != 0)
            {
              v211 = (unint64_t *)*v177;
              do
                v212 = __ldaxr(v211);
              while (__stlxr(v212 + 1, v211));
            }
          }
          if (v350 == 6)
          {
            v18 = (unint64_t)v341[0];
            switch(*((_BYTE *)v341[0] + 44))
            {
              case 2:
                v213 = (unint64_t *)v341[0][4];
                do
                {
                  v214 = __ldaxr(v213);
                  v215 = v214 - 1;
                }
                while (__stlxr(v215, v213));
                if (!v215)
                {
                  v216 = *(_QWORD *)(v18 + 32);
                  if (!v216)
                    goto LABEL_417;
                  if (*(char *)(v216 + 31) < 0)
                    operator delete(*(void **)(v216 + 8));
                  v217 = (_QWORD *)v216;
                  v218 = 0x1012C404EF22A49;
                  goto LABEL_416;
                }
                break;
              case 3:
                v248 = (unint64_t *)v341[0][4];
                do
                {
                  v249 = __ldaxr(v248);
                  v250 = v249 - 1;
                }
                while (__stlxr(v250, v248));
                if (!v250)
                {
                  v251 = *(_QWORD *)(v18 + 32);
                  if (!v251)
                    goto LABEL_417;
                  v252 = *(void **)(v251 + 8);
                  if (v252)
                  {
                    *(_QWORD *)(v251 + 16) = v252;
                    operator delete(v252);
                  }
                  v217 = (_QWORD *)v251;
                  v218 = 0x1080C409938AC02;
                  goto LABEL_416;
                }
                break;
              case 4:
                v226 = (unint64_t *)v341[0][4];
                do
                {
                  v227 = __ldaxr(v226);
                  v228 = v227 - 1;
                }
                while (__stlxr(v228, v226));
                if (!v228)
                {
                  v229 = *(_QWORD *)(v18 + 32);
                  if (!v229)
                    goto LABEL_417;
                  __p.__r_.__value_.__r.__words[0] = v229 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_403;
                }
                break;
              case 5:
                v258 = (unint64_t *)v341[0][4];
                do
                {
                  v259 = __ldaxr(v258);
                  v260 = v259 - 1;
                }
                while (__stlxr(v260, v258));
                if (!v260)
                {
                  v229 = *(_QWORD *)(v18 + 32);
                  if (!v229)
                    goto LABEL_417;
                  __p.__r_.__value_.__r.__words[0] = v229 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_403:
                  v217 = (_QWORD *)v229;
                  v218 = 0x1020C405E66F15BLL;
                  goto LABEL_416;
                }
                break;
              case 8:
                v264 = (unint64_t *)v341[0][4];
                do
                {
                  v265 = __ldaxr(v264);
                  v266 = v265 - 1;
                }
                while (__stlxr(v266, v264));
                if (!v266)
                {
                  v267 = *(_QWORD *)(v18 + 32);
                  if (!v267)
                    goto LABEL_417;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v267 + 16));
                  v217 = (_QWORD *)v267;
                  v240 = -235920773;
                  goto LABEL_415;
                }
                break;
              case 9:
                v234 = (unint64_t *)v341[0][4];
                do
                {
                  v235 = __ldaxr(v234);
                  v236 = v235 - 1;
                }
                while (__stlxr(v236, v234));
                if (!v236)
                {
                  v237 = *(_QWORD **)(v18 + 32);
                  if (v237)
                  {
                    v238 = (void *)v237[6];
                    if (v238)
                    {
                      v237[7] = v238;
                      operator delete(v238);
                    }
                    v239 = (void *)v237[3];
                    if (v239)
                    {
                      v237[4] = v239;
                      operator delete(v239);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v237 + 1));
                    v217 = v237;
                    v240 = 2071181815;
LABEL_415:
                    v218 = v240 | 0x1030C4000000000;
LABEL_416:
                    MEMORY[0x219A19A08](v217, v218, v56);
                  }
LABEL_417:
                  *(_QWORD *)(v18 + 32) = 0;
                }
                break;
              default:
                break;
            }
            *(_DWORD *)(v18 + 40) = 0;
            *(_BYTE *)(v18 + 44) = 0;
            *(_QWORD *)(v18 + 32) = v14;
          }
          else
          {
            v219 = v342.__begin_;
            v18 = (unint64_t)v341[0];
            switch(*((_BYTE *)v341[0] + 44))
            {
              case 2:
                v220 = (unint64_t *)v341[0][4];
                do
                {
                  v221 = __ldaxr(v220);
                  v222 = v221 - 1;
                }
                while (__stlxr(v222, v220));
                if (!v222)
                {
                  v223 = *(_QWORD *)(v18 + 32);
                  if (!v223)
                    goto LABEL_426;
                  if (*(char *)(v223 + 31) < 0)
                    operator delete(*(void **)(v223 + 8));
                  v224 = (_QWORD *)v223;
                  v225 = 0x1012C404EF22A49;
                  goto LABEL_425;
                }
                break;
              case 3:
                v253 = (unint64_t *)v341[0][4];
                do
                {
                  v254 = __ldaxr(v253);
                  v255 = v254 - 1;
                }
                while (__stlxr(v255, v253));
                if (!v255)
                {
                  v256 = *(_QWORD *)(v18 + 32);
                  if (!v256)
                    goto LABEL_426;
                  v257 = *(void **)(v256 + 8);
                  if (v257)
                  {
                    *(_QWORD *)(v256 + 16) = v257;
                    operator delete(v257);
                  }
                  v224 = (_QWORD *)v256;
                  v225 = 0x1080C409938AC02;
                  goto LABEL_425;
                }
                break;
              case 4:
                v230 = (unint64_t *)v341[0][4];
                do
                {
                  v231 = __ldaxr(v230);
                  v232 = v231 - 1;
                }
                while (__stlxr(v232, v230));
                if (!v232)
                {
                  v233 = *(_QWORD *)(v18 + 32);
                  if (!v233)
                    goto LABEL_426;
                  __p.__r_.__value_.__r.__words[0] = v233 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_409;
                }
                break;
              case 5:
                v261 = (unint64_t *)v341[0][4];
                do
                {
                  v262 = __ldaxr(v261);
                  v263 = v262 - 1;
                }
                while (__stlxr(v263, v261));
                if (!v263)
                {
                  v233 = *(_QWORD *)(v18 + 32);
                  if (!v233)
                    goto LABEL_426;
                  __p.__r_.__value_.__r.__words[0] = v233 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_409:
                  v224 = (_QWORD *)v233;
                  v225 = 0x1020C405E66F15BLL;
                  goto LABEL_425;
                }
                break;
              case 8:
                v268 = (unint64_t *)v341[0][4];
                do
                {
                  v269 = __ldaxr(v268);
                  v270 = v269 - 1;
                }
                while (__stlxr(v270, v268));
                if (!v270)
                {
                  v271 = *(_QWORD *)(v18 + 32);
                  if (!v271)
                    goto LABEL_426;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v271 + 16));
                  v224 = (_QWORD *)v271;
                  v247 = -235920773;
                  goto LABEL_424;
                }
                break;
              case 9:
                v241 = (unint64_t *)v341[0][4];
                do
                {
                  v242 = __ldaxr(v241);
                  v243 = v242 - 1;
                }
                while (__stlxr(v243, v241));
                if (!v243)
                {
                  v244 = *(_QWORD **)(v18 + 32);
                  if (v244)
                  {
                    v245 = (void *)v244[6];
                    if (v245)
                    {
                      v244[7] = v245;
                      operator delete(v245);
                    }
                    v246 = (void *)v244[3];
                    if (v246)
                    {
                      v244[4] = v246;
                      operator delete(v246);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v244 + 1));
                    v224 = v244;
                    v247 = 2071181815;
LABEL_424:
                    v225 = v247 | 0x1030C4000000000;
LABEL_425:
                    MEMORY[0x219A19A08](v224, v225, v56);
                  }
LABEL_426:
                  *(_QWORD *)(v18 + 32) = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)(v18 + 32) = 0;
            *(_DWORD *)(v18 + 40) = 0;
            *(_BYTE *)(v18 + 44) = 1;
            *(_QWORD *)(v18 + 32) = v219[v14].second;
          }
          turi::gl_sframe_writer::write((turi::gl_sframe_writer_impl **)&v343, v341, 0);
          ++v14;
        }
        while (v14 != a5);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v341;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      switch(v55)
      {
        case 2:
          do
          {
            v272 = __ldaxr((unint64_t *)v53);
            v273 = v272 - 1;
          }
          while (__stlxr(v273, (unint64_t *)v53));
          if (v273)
            v274 = 1;
          else
            v274 = v53 == 0;
          if (!v274)
          {
            if (*(char *)(v53 + 31) < 0)
              operator delete(*(void **)(v53 + 8));
            v275 = v53;
            v276 = 0x1012C404EF22A49;
            goto LABEL_476;
          }
          break;
        case 3:
          do
          {
            v286 = __ldaxr((unint64_t *)v53);
            v287 = v286 - 1;
          }
          while (__stlxr(v287, (unint64_t *)v53));
          if (v287)
            v288 = 1;
          else
            v288 = v53 == 0;
          if (!v288)
          {
            v289 = *(void **)(v53 + 8);
            if (v289)
            {
              *(_QWORD *)(v53 + 16) = v289;
              operator delete(v289);
            }
            v275 = v53;
            v276 = 0x1080C409938AC02;
            goto LABEL_476;
          }
          break;
        case 4:
          do
          {
            v277 = __ldaxr((unint64_t *)v53);
            v278 = v277 - 1;
          }
          while (__stlxr(v278, (unint64_t *)v53));
          if (v278)
            v279 = 1;
          else
            v279 = v53 == 0;
          if (!v279)
          {
            __p.__r_.__value_.__r.__words[0] = v53 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_468;
          }
          break;
        case 5:
          do
          {
            v290 = __ldaxr((unint64_t *)v53);
            v291 = v290 - 1;
          }
          while (__stlxr(v291, (unint64_t *)v53));
          if (v291)
            v292 = 1;
          else
            v292 = v53 == 0;
          if (!v292)
          {
            __p.__r_.__value_.__r.__words[0] = v53 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_468:
            v275 = v53;
            v276 = 0x1020C405E66F15BLL;
            goto LABEL_476;
          }
          break;
        case 8:
          do
          {
            v293 = __ldaxr((unint64_t *)v53);
            v294 = v293 - 1;
          }
          while (__stlxr(v294, (unint64_t *)v53));
          if (v294)
            v295 = 1;
          else
            v295 = v53 == 0;
          if (!v295)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v53 + 16));
            v275 = v53;
            v285 = -235920773;
            goto LABEL_475;
          }
          break;
        case 9:
          do
          {
            v280 = __ldaxr((unint64_t *)v53);
            v281 = v280 - 1;
          }
          while (__stlxr(v281, (unint64_t *)v53));
          if (v281)
            v282 = 1;
          else
            v282 = v53 == 0;
          if (!v282)
          {
            v283 = *(void **)(v53 + 48);
            if (v283)
            {
              *(_QWORD *)(v53 + 56) = v283;
              operator delete(v283);
            }
            v284 = *(void **)(v53 + 24);
            if (v284)
            {
              *(_QWORD *)(v53 + 32) = v284;
              operator delete(v284);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v53 + 8);
            v275 = v53;
            v285 = 2071181815;
LABEL_475:
            v276 = v285 | 0x1030C4000000000;
LABEL_476:
            MEMORY[0x219A19A08](v275, v276);
          }
          break;
        default:
          break;
      }
      if (v342.__begin_)
      {
        v342.__end_ = v342.__begin_;
        operator delete(v342.__begin_);
      }
      ++v21;
      v334 += 16;
      v19 = __sz;
    }
    while (v334 != v327);
  }
  turi::gl_sframe_writer::close((turi::gl_sframe_writer_impl **)&v343, a6);
  turi::gl_sframe_writer::~gl_sframe_writer(&v343);
  if (v344)
  {
    v345 = (unint64_t)v344;
    operator delete(v344);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v347;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_218582504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::prediction_type_enum_from_name(void *a1)
{
  unsigned __int8 v2;
  uint64_t v4;
  const void *v5[3];
  char v6;
  _QWORD v7[3];
  char v8;
  _QWORD v9[3];
  char v10;
  _QWORD v11[3];
  char v12;
  _QWORD v13[3];
  char v14;
  _QWORD v15[3];
  char v16;
  _QWORD v17[3];
  char v18;
  _QWORD v19[3];
  char v20;
  _QWORD v21[3];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if ((v2 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "na");
    v6 = 0;
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    v8 = 0;
    std::string::basic_string[abi:ne180100]<0>(v9, "class");
    v10 = 1;
    std::string::basic_string[abi:ne180100]<0>(v11, "class_index");
    v12 = 2;
    std::string::basic_string[abi:ne180100]<0>(v13, "probability");
    v14 = 3;
    std::string::basic_string[abi:ne180100]<0>(v15, "max_probability");
    v16 = 4;
    std::string::basic_string[abi:ne180100]<0>(v17, "margin");
    v18 = 5;
    std::string::basic_string[abi:ne180100]<0>(v19, "rank");
    v20 = 6;
    std::string::basic_string[abi:ne180100]<0>(v21, "probability_vector");
    v22 = 7;
    std::map<std::string,turi::supervised::prediction_type_enum>::map[abi:ne180100]((uint64_t)&turi::supervised::prediction_type_enum_from_name(std::string const&)::type_map, v5, 9);
    v4 = 36;
    do
    {
      if (*((char *)&v5[v4 - 1] - 1) < 0)
        operator delete((void *)v5[v4 - 4]);
      v4 -= 4;
    }
    while (v4 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,turi::supervised::prediction_type_enum>::~map[abi:ne180100], &turi::supervised::prediction_type_enum_from_name(std::string const&)::type_map, &dword_217E69000);
  }
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::supervised::prediction_type_enum_from_name(std::string const&)::type_map, (const void **)a1))
  {
    v5[0] = a1;
    turi::supervised::prediction_type_enum_from_name(std::string const&)::{lambda(void)#1}::operator()();
  }
  return *(char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::supervised::prediction_type_enum_from_name(std::string const&)::type_map, (const void **)a1);
}

void sub_218582C5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 288;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0)
      operator delete(*(void **)(v1 + v3 - 32));
    v3 -= 32;
    if (!v3)
    {
      _Unwind_Resume(a1);
    }
  }
}

void turi::supervised::logistic_regression::save_impl(turi::supervised::logistic_regression *this, turi::oarchive *a2)
{
  turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((const void ***)this + 37, (uint64_t)a2);
  turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (turi::ml_metadata **)this + 47);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (uint64_t)this + 416);
  turi::option_manager::save((turi::supervised::logistic_regression *)((char *)this + 224), a2);
}

void turi::supervised::logistic_regression::load_version(turi::supervised::logistic_regression *this, turi::iarchive *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  int *v12;
  unsigned int *v13;
  uint64_t v14;
  void **v15;
  void *v16[2];
  char v17;
  void *__p;
  _BYTE v19[13];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  assert_msg(a3 < 7, (uint64_t)"This model version cannot be loaded. Please re-save your state.", a3, a4, a5, a6, a7, a8, v14);
  if (a3 <= 5)
    turi::supervised::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  v16[0] = &__p;
  v11 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v16);
  *((_QWORD *)this + 56) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v11 + 14);
  if (v20 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  v16[0] = &__p;
  v12 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v16);
  *((_QWORD *)this + 57) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v12 + 14);
  if (v20 < 0)
    operator delete(__p);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(a2, (turi::ml_metadata **)this + 47);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 52);
  turi::option_manager::load((char **)this + 28, a2);
  memset(v16, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v16, &turi::FLEX_UNDEFINED);
  *(void **)&v19[5] = *(void **)((char *)v16 + 5);
  *(void **)v19 = v16[0];
  v19[12] = BYTE4(v16[1]);
  LODWORD(__p) = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "progress");
  v15 = v16;
  v13 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v16, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v13 + 14, (unsigned int *)&__p);
  if (v17 < 0)
    operator delete(v16[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
}

void sub_218582F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a17);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::logistic_regression::get_version(turi::supervised::logistic_regression *this)
{
  return 6;
}

void turi::supervised::logistic_regression::export_to_coreml(turi::supervised::logistic_regression *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  std::string v6;
  char *v7;
  _BYTE v8[8];
  _QWORD *v9;
  std::string v10;
  _QWORD v11[5];
  _QWORD v12[6];

  v12[5] = *MEMORY[0x24BDAC8D0];
  v7 = (char *)(*(uint64_t (**)(turi::supervised::logistic_regression *))(*(_QWORD *)this + 16))(this);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(&v10, "class", &v7);
  v4 = (*(uint64_t (**)(turi::supervised::logistic_regression *))(*(_QWORD *)this + 48))(this);
  std::to_string(&v6, v4);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(v11, "version", (__int128 *)&v6);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v12, "short_description", "Logisitic regression model.");
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v8, &v10, 3);
  for (i = 80; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v10 + i);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  turi::export_logistic_model_as_model_asset((_QWORD *)this + 47, (uint64_t *)this + 52, (uint64_t)v8, a2);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v8, v9);
}

void sub_2185830FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, char a20)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

const char *turi::supervised::logistic_regression::name(turi::supervised::logistic_regression *this)
{
  return "classifier_logistic_regression";
}

std::string *turi::supervised::logistic_regression::uid(turi::supervised::logistic_regression *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(&turi::supervised::logistic_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::supervised::logistic_regression::uid(void)::_uid, &dword_217E69000);
  }
  return &turi::supervised::logistic_regression::uid(void)::_uid;
}

void sub_218583214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,turi::supervised::prediction_type_enum>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::string,turi::supervised::prediction_type_enum>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2185832B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_218583428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::logistic_regression_opt_interface,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D9496C0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_218583514(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::logistic_regression_opt_interface *,std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::__shared_ptr_default_delete<turi::supervised::logistic_regression_opt_interface,turi::supervised::logistic_regression_opt_interface>,std::allocator<turi::supervised::logistic_regression_opt_interface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::logistic_regression_opt_interface *,std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::__shared_ptr_default_delete<turi::supervised::logistic_regression_opt_interface,turi::supervised::logistic_regression_opt_interface>,std::allocator<turi::supervised::logistic_regression_opt_interface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t **a1, unint64_t *a2, uint64_t *a3, double *a4)
{
  unint64_t v4;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  std::bad_alloc *exception;
  std::bad_alloc *v18;
  _QWORD v20[2];
  uint64_t v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  if (v4 >> 61)
    goto LABEL_14;
  v7 = *a1;
  v8 = *a4;
  v9 = *a2;
  if (*a2)
  {
    v10 = *a2;
    goto LABEL_8;
  }
  v11 = 8 * v4;
  if (v4 <= 0x4000)
  {
    v12 = (char *)&v20[-1] - ((MEMORY[0x24BDAC7A8](v11, v11 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v12, v13);
    v9 = 0;
    v10 = (unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  v10 = (unint64_t)malloc_type_malloc(v11, 0x1E76AA36uLL);
  if (!v10)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v18 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v18, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v9 = *a2;
  v4 = a2[1];
LABEL_8:
  if (v9)
    v14 = 0;
  else
    v14 = (void *)v10;
  v15 = v7[1];
  v16 = v7[2];
  v21[0] = *v7;
  v21[1] = v15;
  v20[0] = v10;
  v20[1] = 1;
  Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(v16, v15, v21, v20, *a3, 1, v8);
  if (8 * v4 > 0x20000)
    free(v14);
}

void Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run(uint64_t a1, uint64_t a2, uint64_t **a3, double *a4)
{
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 8);
  if (*(uint64_t *)(*(_QWORD *)a2 + 16) >= 1)
  {
    v7 = 0;
    do
      Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow((uint64_t)v8, a2, a3, a4, 0, v7++);
    while (v7 < *(_QWORD *)(*(_QWORD *)a2 + 16));
  }
}

double Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow(uint64_t a1, uint64_t a2, uint64_t **a3, double *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  double *v8;
  int *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = v6[3];
  if (v7 < 1)
  {
    v10 = 0.0;
  }
  else
  {
    v8 = (double *)v6[1];
    v9 = (int *)v6[2];
    v10 = 0.0;
    do
    {
      v11 = *v8++;
      v12 = v11;
      v13 = *v9++;
      v10 = v10 + v12 * *(double *)(**(_QWORD **)a2 + 8 * (*(_QWORD *)(*(_QWORD *)a2 + 8) * a6 + v13));
      --v7;
    }
    while (v7);
  }
  v14 = **a3;
  result = *(double *)(v14 + 8 * a6) + *a4 * v10;
  *(double *)(v14 + 8 * a6) = result;
  return result;
}

double std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(double *a1, double *a2, double *a3, uint64_t a4, double result)
{
  double *v6;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double *v16;
  double v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double *v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v9 = ((char *)v6 - (char *)a1) >> 4;
      if (v9 < 2)
        break;
      if (v9 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>((uint64_t *)a1, (uint64_t *)a1 + 2, (uint64_t *)v6 - 2, a4);
        return result;
      }
      if (v9 == 2)
      {
        result = *(double *)((char *)v6 + *(_QWORD *)(a4 + 8) - 16);
        if (result > *(double *)((char *)a1 + *(_QWORD *)(a4 + 24)))
        {
          v40 = *(_QWORD *)a1;
          *a1 = *(v6 - 2);
          *((_QWORD *)v6 - 2) = v40;
          result = a1[1];
          a1[1] = *(v6 - 1);
          *(v6 - 1) = result;
        }
        return result;
      }
      if ((char *)v6 - (char *)a1 <= 127)
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(a1, v6, a4);
      v10 = (uint64_t *)&a1[2 * (v9 >> 1)];
      v11 = (uint64_t *)(v6 - 2);
      v12 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>((uint64_t *)a1, v10, (uint64_t *)v6 - 2, a4);
      v13 = *(_QWORD *)(a4 + 8);
      v14 = *(_QWORD *)(a4 + 24);
      result = *(double *)((char *)a1 + v13);
      v15 = *(double *)((char *)v10 + v14);
      if (result > v15)
      {
LABEL_12:
        v21 = (unint64_t)(a1 + 2);
        if (a1 + 2 < (double *)v11)
        {
          while (1)
          {
            result = *(double *)((char *)v10 + v14);
            do
            {
              v22 = *(double *)(v21 + v13);
              v21 += 16;
            }
            while (v22 > result);
            v23 = (uint64_t *)(v21 - 16);
            do
            {
              v24 = *(double *)((char *)v11 + v13 - 16);
              v11 -= 2;
            }
            while (v24 <= result);
            if (v23 >= v11)
              break;
            v25 = *(_QWORD *)(v21 - 16);
            *(_QWORD *)(v21 - 16) = *v11;
            *v11 = v25;
            v26 = *(_QWORD *)(v21 - 8);
            *(_QWORD *)(v21 - 8) = v11[1];
            v11[1] = v26;
            ++v12;
            if (v23 == v10)
              v10 = v11;
          }
          v21 -= 16;
        }
        if ((uint64_t *)v21 != v10)
        {
          result = *(double *)((char *)v10 + v13);
          if (result > *(double *)(v21 + v14))
          {
            v27 = *(_QWORD *)v21;
            *(_QWORD *)v21 = *v10;
            *v10 = v27;
            result = *(double *)(v21 + 8);
            *(_QWORD *)(v21 + 8) = v10[1];
            *((double *)v10 + 1) = result;
            ++v12;
          }
        }
        if ((double *)v21 == a2)
          return result;
        if (!v12)
        {
          v28 = v13 + 16;
          if (v21 <= (unint64_t)a2)
          {
            v32 = v21;
            while ((double *)(v32 + 16) != v6)
            {
              result = *(double *)(v32 + v28);
              v33 = *(double *)(v32 + v14);
              v32 += 16;
              if (result > v33)
                goto LABEL_27;
            }
          }
          else
          {
            v29 = a1;
            while (v29 + 2 != (double *)v21)
            {
              result = *(double *)((char *)v29 + v28);
              v30 = *(double *)((char *)v29 + v14);
              v29 += 2;
              if (result > v30)
                goto LABEL_27;
            }
          }
          return result;
        }
LABEL_27:
        if (v21 <= (unint64_t)a2)
          a1 = (double *)(v21 + 16);
        else
          v6 = (double *)v21;
      }
      else
      {
        v16 = v6 - 4;
        while (v16 != a1)
        {
          v17 = *(double *)((char *)v16 + v13);
          v16 -= 2;
          if (v17 > v15)
          {
            v18 = *(_QWORD *)a1;
            v20 = *((_QWORD *)v16 + 2);
            v19 = (uint64_t *)(v16 + 2);
            *(_QWORD *)a1 = v20;
            *v19 = v18;
            result = a1[1];
            *((_QWORD *)a1 + 1) = v19[1];
            *((double *)v19 + 1) = result;
            ++v12;
            v11 = v19;
            goto LABEL_12;
          }
        }
        v31 = a1 + 2;
        if (result <= *(double *)((char *)v11 + v14))
        {
          while (v31 != (double *)v11)
          {
            if (result > *(double *)((char *)v31 + v14))
            {
              v34 = *v31;
              *v31 = *(v6 - 2);
              *(v6 - 2) = v34;
              result = v31[1];
              v31[1] = *(v6 - 1);
              *(v6 - 1) = result;
              v31 += 2;
              goto LABEL_44;
            }
            v31 += 2;
          }
          return result;
        }
LABEL_44:
        if (v31 == (double *)v11)
          return result;
        while (1)
        {
          result = *(double *)((char *)a1 + v13);
          do
          {
            v35 = *(double *)((char *)v31 + v14);
            v31 += 2;
          }
          while (result <= v35);
          v36 = (unint64_t)(v31 - 2);
          do
          {
            v37 = *(double *)((char *)v11 + v14 - 16);
            v11 -= 2;
          }
          while (result > v37);
          if (v36 >= (unint64_t)v11)
            break;
          v38 = *((_QWORD *)v31 - 2);
          *((_QWORD *)v31 - 2) = *v11;
          *v11 = v38;
          v39 = *((_QWORD *)v31 - 1);
          *((_QWORD *)v31 - 1) = v11[1];
          v11[1] = v39;
        }
        a1 = v31 - 2;
        if (v36 > (unint64_t)a2)
          return result;
      }
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a4 + 8);
  v5 = *(_QWORD *)(a4 + 24);
  v6 = *(double *)((char *)a3 + v4);
  v7 = *(double *)((char *)a2 + v5);
  if (*(double *)((char *)a2 + v4) > *(double *)((char *)a1 + v5))
  {
    v8 = *a1;
    if (v6 > v7)
    {
      *a1 = *a3;
      *a3 = v8;
      v9 = a1[1];
      a1[1] = a3[1];
      a3[1] = v9;
      return 1;
    }
    *a1 = *a2;
    *a2 = v8;
    v14 = a1[1];
    a1[1] = a2[1];
    a2[1] = v14;
    if (*(double *)((char *)a3 + v4) <= *(double *)((char *)a2 + v5))
      return 1;
    *a2 = *a3;
    *a3 = v8;
    a2[1] = a3[1];
    a3[1] = v14;
    return 2;
  }
  if (v6 > v7)
  {
    v10 = *a2;
    *a2 = *a3;
    *a3 = v10;
    v11 = a2[1];
    a2[1] = a3[1];
    a3[1] = v11;
    if (*(double *)((char *)a2 + v4) <= *(double *)((char *)a1 + v5))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    v13 = a1[1];
    a1[1] = a2[1];
    a2[1] = v13;
    return 2;
  }
  return 0;
}

double std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(double *a1, double *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double *v7;
  double result;
  double v9;

  if (a2 - 2 != a1)
  {
    v3 = *(_QWORD *)(a3 + 8);
    v4 = *(_QWORD *)(a3 + 24);
    do
    {
      v5 = a1;
      a1 += 2;
      if (v5 != a2 && a1 != a2)
      {
        v6 = a1;
        v7 = v5;
        do
        {
          result = *(double *)((char *)v6 + v3);
          if (result > *(double *)((char *)v7 + v4))
            v7 = v6;
          v6 += 2;
        }
        while (v6 != a2);
        if (v7 != v5)
        {
          v9 = *v5;
          *v5 = *v7;
          *v7 = v9;
          result = v5[1];
          v5[1] = v7[1];
          v7[1] = result;
        }
      }
    }
    while (a1 != a2 - 2);
  }
  return result;
}

_QWORD *OUTLINED_FUNCTION_55(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 25);
}

void __cxx_global_var_init_70_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_logistic_regression_cpp_0()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_218584060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

double *turi::supervised::flattened_sparse_vector_outer_prod(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  double *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  _DWORD *v12;
  double v13;
  double v14;
  uint64_t v15;

  v5 = a3 + 8;
  result = (double *)Eigen::internal::CompressedStorage<double,int>::reserve(a3 + 8, a2[1] * a1[3]);
  v7 = a2[1];
  if (v7)
  {
    v8 = 0;
    v9 = a1[5];
    do
    {
      v10 = a1[3];
      if (v10 >= 1)
      {
        v11 = (double *)a1[1];
        v12 = (_DWORD *)a1[2];
        do
        {
          v13 = *v11++;
          v14 = *(double *)(*a2 + 8 * v8) * v13;
          LODWORD(v13) = *v12++;
          v15 = 0;
          result = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v5, (int)v8 * (int)v9 + LODWORD(v13), &v15);
          *result = v14;
          --v10;
        }
        while (v10);
        v7 = a2[1];
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

turi::supervised::logistic_regression_opt_interface *turi::supervised::logistic_regression_opt_interface::logistic_regression_opt_interface(turi::supervised::logistic_regression_opt_interface *this, const turi::ml_data *a2, const turi::ml_data *a3, turi::supervised::logistic_regression *a4)
{
  char *v8;
  turi::thread_pool *v9;
  turi::thread_pool *instance;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24D949738;
  v8 = (char *)this + 8;
  turi::ml_data::ml_data((turi::supervised::logistic_regression_opt_interface *)((char *)this + 8));
  turi::ml_data::ml_data((turi::supervised::logistic_regression_opt_interface *)((char *)this + 200));
  *((_QWORD *)this + 49) = a4;
  *((_OWORD *)this + 25) = xmmword_2186C4970;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  v27 = 0;
  LODWORD(v28) = 1065353216;
  v29 = 1;
  v30 = 1065353216;
  std::map<unsigned long,float>::map[abi:ne180100]((uint64_t)this + 440, (unint64_t *)&v27, 2);
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_WORD *)this + 240) = 0;
  v9 = (turi::thread_pool *)turi::ml_data::operator=((uint64_t)v8, (uint64_t)a2);
  if (*((_QWORD *)a3 + 3) != *((_QWORD *)a3 + 2))
    v9 = (turi::thread_pool *)turi::ml_data::operator=((uint64_t)this + 200, (uint64_t)a3);
  *((_QWORD *)this + 50) = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
  *((_QWORD *)this + 52) = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 4;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v9);
  *((_QWORD *)this + 54) = turi::thread_pool::size(instance);
  v11 = *((_QWORD *)this + 49);
  v12 = *(uint64_t **)(v11 + 376);
  v13 = *(std::__shared_weak_count **)(v11 + 384);
  v27 = v12;
  v28 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    *((_QWORD *)this + 51) = *(_QWORD *)(v12[3] + 64);
    v25 = v12;
    v26 = v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  else
  {
    *((_QWORD *)this + 51) = *(_QWORD *)(v12[3] + 64);
    v25 = v12;
    v26 = 0;
  }
  *((_QWORD *)this + 53) = turi::supervised::get_number_of_coefficients(&v25);
  v17 = v26;
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *((_QWORD *)this + 53);
  *((_BYTE *)this + 481) = v20 <= 3 * *((_QWORD *)this + 6);
  *((_QWORD *)this + 53) = (*((_QWORD *)this + 51) - 1) * v20;
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return this;
}

void sub_218584420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  turi::neural_net::float_scalar *v12;
  turi::ml_data *v13;
  turi::ml_data *v14;
  uint64_t v15;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v12 + 464);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v15, *((_QWORD **)v12 + 56));
  turi::ml_data::~ml_data(v14);
  turi::ml_data::~ml_data(v13);
  turi::neural_net::float_scalar::~float_scalar(v12);
  _Unwind_Resume(a1);
}

void turi::supervised::logistic_regression_opt_interface::~logistic_regression_opt_interface(turi::supervised::logistic_regression_opt_interface *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_24D949738;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 440, *((_QWORD **)this + 56));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 376);
  v4 = (void **)((char *)this + 352);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  v4 = (void **)((char *)this + 304);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  v4 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  v4 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  turi::supervised::logistic_regression_opt_interface::~logistic_regression_opt_interface(this);
  JUMPOUT(0x219A19A08);
}

uint64_t **turi::supervised::logistic_regression_opt_interface::set_class_weights(uint64_t **this, const turi::flexible_type *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (v2 != v3)
  {
    v4 = this + 55;
    do
    {
      v5 = *(double *)(v2 + 16);
      v6 = *(_QWORD *)v2;
      v2 += 32;
      v7 = v6;
      v8 = &v7;
      this = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, &v7, (uint64_t)&std::piecewise_construct, &v8);
      *((float *)this + 10) = v5;
    }
    while (v2 != v3);
  }
  return this;
}

void turi::supervised::logistic_regression_opt_interface::init_feature_rescaling(turi::supervised::logistic_regression_opt_interface *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;

  *((_BYTE *)this + 480) = 1;
  v2 = operator new();
  v3 = v2;
  v4 = *((_QWORD *)this + 49);
  v6 = *(uint64_t **)(v4 + 376);
  v5 = *(std::__shared_weak_count **)(v4 + 384);
  v12 = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  turi::supervised::l2_rescaling::l2_rescaling(v2, &v12, 1);
  std::shared_ptr<turi::supervised::l2_rescaling>::reset[abi:ne180100]<turi::supervised::l2_rescaling,void>((_QWORD *)this + 58, v3);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_2185846E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::supervised::logistic_regression_opt_interface::rescale_solution(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  _OWORD *v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  std::bad_alloc *exception;
  std::bad_alloc *v38;
  void *v39;
  uint64_t v40;

  if (*(_BYTE *)(a1 + 480))
  {
    v4 = *(_QWORD *)(a1 + 424);
    v5 = *(_QWORD *)(a1 + 408) - 1;
    v39 = 0;
    v40 = 0;
    v6 = v4 / v5;
    if (v5 <= v4)
    {
      if ((unint64_t)v6 >> 61 || (v7 = malloc_type_malloc(8 * v6, 0x1E76AA36uLL)) == 0)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v38 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v38, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v8 = *(_QWORD *)(a1 + 408);
      v39 = v7;
      v40 = v6;
      if (v8 == 1)
        goto LABEL_37;
    }
    else
    {
      v40 = v4 / v5;
    }
    v9 = 0;
    do
    {
      v10 = *a2;
      v11 = v6;
      if (v40 != v6)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v39, v6, 1);
        v11 = v40;
      }
      v12 = v10 + 8 * v9 * v6;
      v13 = (char *)v39;
      if (v11 >= 0)
        v14 = v11;
      else
        v14 = v11 + 1;
      v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 >= 2)
      {
        v16 = 0;
        v17 = v39;
        do
        {
          *v17++ = *(_OWORD *)(v12 + 8 * v16);
          v16 += 2;
        }
        while (v16 < v15);
      }
      v18 = v11 <= v15;
      v19 = v11 - v15;
      if (!v18)
      {
        v20 = &v13[16 * (v14 >> 1)];
        do
        {
          *(_QWORD *)v20 = *(_QWORD *)(v12 + 8 * v15);
          v20 += 8;
          ++v15;
          --v19;
        }
        while (v19);
      }
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 464) + 16))(*(_QWORD *)(a1 + 464), &v39);
      v21 = *a2 + 8 * v9 * v6;
      v22 = (char *)v39;
      v23 = (v21 >> 3) & 1;
      if (v23 >= v6)
        v23 = v6;
      if ((v21 & 7) != 0)
        v23 = v6;
      v24 = v6 - v23;
      if (v6 >= v23)
        v25 = v6 - v23;
      else
        v25 = v24 + 1;
      if (v23 >= 1)
      {
        v26 = 0;
        v27 = (uint64_t *)v39;
        v28 = v23;
        do
        {
          v29 = *v27++;
          *(_QWORD *)(v21 + 8 * v26++) = v29;
          --v28;
        }
        while (v28);
      }
      v30 = (v25 & 0xFFFFFFFFFFFFFFFELL) + v23;
      if (v24 > 1)
      {
        v31 = &v22[8 * v23];
        v32 = v23;
        do
        {
          v33 = *(_OWORD *)v31;
          v31 += 16;
          *(_OWORD *)(v21 + 8 * v32) = v33;
          v32 += 2;
        }
        while (v32 < v30);
      }
      if (v30 < v6)
      {
        v34 = v24 - (v25 & 0xFFFFFFFFFFFFFFFELL);
        v35 = &v22[16 * (v25 >> 1) + 8 * v23];
        do
        {
          v36 = *(_QWORD *)v35;
          v35 += 8;
          *(_QWORD *)(v21 + 8 * v30++) = v36;
          --v34;
        }
        while (v34);
      }
      ++v9;
    }
    while (v9 < *(_QWORD *)(a1 + 408) - 1);
    v7 = v39;
LABEL_37:
    free(v7);
  }
}

void sub_218584944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::logistic_regression_opt_interface::num_examples(turi::supervised::logistic_regression_opt_interface *this)
{
  return *((_QWORD *)this + 50);
}

uint64_t turi::supervised::logistic_regression_opt_interface::num_variables(turi::supervised::logistic_regression_opt_interface *this)
{
  return *((_QWORD *)this + 53);
}

void turi::supervised::logistic_regression_opt_interface::get_status_header(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  turi::supervised::make_progress_header(*(__int128 ***)(a1 + 392), a2, *(_QWORD *)(a1 + 224) != *(_QWORD *)(a1 + 216), a3);
}

void turi::supervised::logistic_regression_opt_interface::get_validation_accuracy(turi::supervised::logistic_regression_opt_interface *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  const std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::runtime_error *exception;
  std::string *v47;
  __int128 v48;
  uint64_t v49;
  char *v50[3];
  unsigned int *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[3];
  _QWORD v56[3];
  void **v57;
  std::__shared_weak_count *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *__p;
  void *v64;
  uint64_t v65;
  std::string v66;
  std::string v67;
  size_t __idx;
  uint64_t v69;
  char v70;
  void *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 49);
  std::string::basic_string[abi:ne180100]<0>(&v71, "train");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char *, void **, _QWORD))(*(_QWORD *)v2 + 104))(&v49, v2, (char *)this + 200, &v71, 0);
  if (v73 < 0)
    operator delete(v71);
  std::string::basic_string[abi:ne180100]<0>(&v71, "accuracy");
  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v49, (const void **)&v71);
  if (v73 < 0)
    operator delete(v71);
  if (v50 == (char **)v3)
    turi::supervised::logistic_regression_opt_interface::get_validation_accuracy(void)::$_0::operator()();
  v57 = (void **)&v72;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(v3 + 56), *(_DWORD *)(v3 + 56) ^ (*(int *)(v3 + 56) >> 31), (std::string **)&v57, v3 + 64);
  LODWORD(v71) = *(_DWORD *)(v3 + 56) ^ (*(int *)(v3 + 56) >> 31);
  turi::variant_converter<turi::flexible_type,void>::get((int *)&v71, (uint64_t)&v69);
  switch(v70)
  {
    case 0:
    case 1:
    case 7:
      goto LABEL_75;
    case 2:
      v7 = v69;
      __idx = 0;
      v8 = (char *)(v69 + 8);
      if (*(char *)(v69 + 31) < 0)
        v8 = *(char **)(v69 + 8);
      v9 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v67, v8);
      std::stod(v9, &__idx);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (*(char *)(v7 + 31) < 0)
        v10 = *(_QWORD *)(v7 + 16);
      else
        v10 = *(unsigned __int8 *)(v7 + 31);
      if (__idx != v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v47 = std::string::append(&v66, " cannot be interpreted as a float");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v67);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_32;
    case 3:
      v64 = 0;
      v65 = 0;
      __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v69 + 8), *(_QWORD *)(v69 + 16), (uint64_t)(*(_QWORD *)(v69 + 16) - *(_QWORD *)(v69 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p)
      {
        v64 = __p;
        operator delete(__p);
      }
      goto LABEL_32;
    case 4:
      memset(v56, 0, sizeof(v56));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v56, *(uint64_t **)(v69 + 8), *(uint64_t **)(v69 + 16), (uint64_t)(*(_QWORD *)(v69 + 16) - *(_QWORD *)(v69 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      goto LABEL_32;
    case 5:
      memset(v55, 0, sizeof(v55));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v55, *(uint64_t **)(v69 + 8), *(uint64_t **)(v69 + 16), (uint64_t)(*(_QWORD *)(v69 + 16) - *(_QWORD *)(v69 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      goto LABEL_32;
    case 6:
      goto LABEL_32;
    case 8:
      v11 = v69;
      v12 = *(unsigned int **)(v69 + 16);
      v50[2] = *(char **)(v69 + 8);
      v51 = v12;
      if (v12)
      {
        v13 = v12 + 2;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = *(_OWORD *)(v11 + 24);
      v16 = *(_OWORD *)(v11 + 40);
      v54 = *(_OWORD *)(v11 + 56);
      v53 = v16;
      v52 = v15;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v51);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v57, v69 + 8);
      turi::flexible_type_fail(0);
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      v4 = v58;
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
LABEL_32:
      switch(v70)
      {
        case 2:
          v17 = (unint64_t *)v69;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = v69;
            if (!v69)
              goto LABEL_74;
            if (*(char *)(v69 + 31) < 0)
              operator delete(*(void **)(v69 + 8));
            v21 = v20;
            v22 = 0x1012C404EF22A49;
            goto LABEL_73;
          }
          break;
        case 3:
          v34 = (unint64_t *)v69;
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            v37 = v69;
            if (!v69)
              goto LABEL_74;
            v38 = *(void **)(v69 + 8);
            if (v38)
            {
              *(_QWORD *)(v69 + 16) = v38;
              operator delete(v38);
            }
            v21 = v37;
            v22 = 0x1080C409938AC02;
            goto LABEL_73;
          }
          break;
        case 4:
          v23 = (unint64_t *)v69;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = v69;
            if (!v69)
              goto LABEL_74;
            v57 = (void **)(v69 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v57);
            goto LABEL_66;
          }
          break;
        case 5:
          v39 = (unint64_t *)v69;
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            v26 = v69;
            if (!v69)
              goto LABEL_74;
            v57 = (void **)(v69 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v57);
LABEL_66:
            v21 = v26;
            v22 = 0x1020C405E66F15BLL;
            goto LABEL_73;
          }
          break;
        case 8:
          v42 = (unint64_t *)v69;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            v45 = v69;
            if (!v69)
              goto LABEL_74;
            boost::detail::shared_count::~shared_count((unsigned int **)(v69 + 16));
            v21 = v45;
            v33 = -235920773;
            goto LABEL_72;
          }
          break;
        case 9:
          v27 = (unint64_t *)v69;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            v30 = v69;
            if (v69)
            {
              v31 = *(void **)(v69 + 48);
              if (v31)
              {
                *(_QWORD *)(v69 + 56) = v31;
                operator delete(v31);
              }
              v32 = *(void **)(v30 + 24);
              if (v32)
              {
                *(_QWORD *)(v30 + 32) = v32;
                operator delete(v32);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v30 + 8);
              v21 = v30;
              v33 = 2071181815;
LABEL_72:
              v22 = v33 | 0x1030C4000000000;
LABEL_73:
              MEMORY[0x219A19A08](v21, v22);
            }
LABEL_74:
            v69 = 0;
          }
          break;
        default:
          break;
      }
LABEL_75:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v71);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v49, v50[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_218584F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  if (*(char *)(v12 - 169) < 0)
    operator delete(*(void **)(v12 - 192));
  if (*(char *)(v12 - 193) < 0)
  {
    operator delete(*(void **)(v12 - 216));
    if ((v11 & 1) == 0)
    {
LABEL_8:
      switch(*(_BYTE *)(v12 - 140))
      {
        case 2:
          v14 = *(unint64_t **)(v12 - 152);
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (v16)
            goto LABEL_46;
          v17 = *(_QWORD *)(v12 - 152);
          if (!v17)
            goto LABEL_46;
          if (*(char *)(v17 + 31) < 0)
            operator delete(*(void **)(v17 + 8));
          v18 = (_QWORD *)v17;
          v19 = 0x1012C404EF22A49;
          break;
        case 3:
          v28 = *(unint64_t **)(v12 - 152);
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (v30)
            goto LABEL_46;
          v31 = *(_QWORD **)(v12 - 152);
          if (!v31)
            goto LABEL_46;
          v32 = (void *)v31[1];
          if (v32)
          {
            v31[2] = v32;
            operator delete(v32);
          }
          v18 = v31;
          v19 = 0x1080C409938AC02;
          break;
        case 4:
          v20 = *(unint64_t **)(v12 - 152);
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (v22)
            goto LABEL_46;
          v23 = *(_QWORD **)(v12 - 152);
          if (!v23)
            goto LABEL_46;
          *(_QWORD *)(v12 - 216) = v23 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
          goto LABEL_38;
        case 5:
          v33 = *(unint64_t **)(v12 - 152);
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (v35)
            goto LABEL_46;
          v23 = *(_QWORD **)(v12 - 152);
          if (!v23)
            goto LABEL_46;
          *(_QWORD *)(v12 - 216) = v23 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
LABEL_38:
          v18 = v23;
          v19 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v36 = *(unint64_t **)(v12 - 152);
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(_QWORD *)(v12 - 152);
            if (v39)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v39 + 16));
              MEMORY[0x219A19A08](v39, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v12 - 152) = 0;
          }
          goto LABEL_46;
        case 9:
          v24 = *(unint64_t **)(v12 - 152);
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (v26)
            goto LABEL_46;
          v27 = *(_QWORD **)(v12 - 152);
          if (!v27)
            goto LABEL_46;
          v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v27);
          v19 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_46;
      }
      MEMORY[0x219A19A08](v18, v19);
LABEL_46:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v12 - 136));
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a9, a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v11)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v10);
  goto LABEL_8;
}

void sub_21858524C()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  JUMPOUT(0x218585244);
}

void sub_218585264()
{
  JUMPOUT(0x218585244);
}

void turi::supervised::logistic_regression_opt_interface::get_training_accuracy(turi::supervised::logistic_regression_opt_interface *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  const std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::runtime_error *exception;
  std::string *v47;
  __int128 v48;
  uint64_t v49;
  char *v50[3];
  unsigned int *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[3];
  _QWORD v56[3];
  void **v57;
  std::__shared_weak_count *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *__p;
  void *v64;
  uint64_t v65;
  std::string v66;
  std::string v67;
  size_t __idx;
  uint64_t v69;
  char v70;
  void *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 49);
  std::string::basic_string[abi:ne180100]<0>(&v71, "train");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char *, void **, _QWORD))(*(_QWORD *)v2 + 104))(&v49, v2, (char *)this + 8, &v71, 0);
  if (v73 < 0)
    operator delete(v71);
  std::string::basic_string[abi:ne180100]<0>(&v71, "accuracy");
  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v49, (const void **)&v71);
  if (v73 < 0)
    operator delete(v71);
  if (v50 == (char **)v3)
    turi::supervised::logistic_regression_opt_interface::get_training_accuracy(void)::$_0::operator()();
  v57 = (void **)&v72;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(v3 + 56), *(_DWORD *)(v3 + 56) ^ (*(int *)(v3 + 56) >> 31), (std::string **)&v57, v3 + 64);
  LODWORD(v71) = *(_DWORD *)(v3 + 56) ^ (*(int *)(v3 + 56) >> 31);
  turi::variant_converter<turi::flexible_type,void>::get((int *)&v71, (uint64_t)&v69);
  switch(v70)
  {
    case 0:
    case 1:
    case 7:
      goto LABEL_75;
    case 2:
      v7 = v69;
      __idx = 0;
      v8 = (char *)(v69 + 8);
      if (*(char *)(v69 + 31) < 0)
        v8 = *(char **)(v69 + 8);
      v9 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v67, v8);
      std::stod(v9, &__idx);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (*(char *)(v7 + 31) < 0)
        v10 = *(_QWORD *)(v7 + 16);
      else
        v10 = *(unsigned __int8 *)(v7 + 31);
      if (__idx != v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v47 = std::string::append(&v66, " cannot be interpreted as a float");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v67);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_32;
    case 3:
      v64 = 0;
      v65 = 0;
      __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v69 + 8), *(_QWORD *)(v69 + 16), (uint64_t)(*(_QWORD *)(v69 + 16) - *(_QWORD *)(v69 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p)
      {
        v64 = __p;
        operator delete(__p);
      }
      goto LABEL_32;
    case 4:
      memset(v56, 0, sizeof(v56));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v56, *(uint64_t **)(v69 + 8), *(uint64_t **)(v69 + 16), (uint64_t)(*(_QWORD *)(v69 + 16) - *(_QWORD *)(v69 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      goto LABEL_32;
    case 5:
      memset(v55, 0, sizeof(v55));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v55, *(uint64_t **)(v69 + 8), *(uint64_t **)(v69 + 16), (uint64_t)(*(_QWORD *)(v69 + 16) - *(_QWORD *)(v69 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      goto LABEL_32;
    case 6:
      goto LABEL_32;
    case 8:
      v11 = v69;
      v12 = *(unsigned int **)(v69 + 16);
      v50[2] = *(char **)(v69 + 8);
      v51 = v12;
      if (v12)
      {
        v13 = v12 + 2;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = *(_OWORD *)(v11 + 24);
      v16 = *(_OWORD *)(v11 + 40);
      v54 = *(_OWORD *)(v11 + 56);
      v53 = v16;
      v52 = v15;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v51);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v57, v69 + 8);
      turi::flexible_type_fail(0);
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      v4 = v58;
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
LABEL_32:
      switch(v70)
      {
        case 2:
          v17 = (unint64_t *)v69;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = v69;
            if (!v69)
              goto LABEL_74;
            if (*(char *)(v69 + 31) < 0)
              operator delete(*(void **)(v69 + 8));
            v21 = v20;
            v22 = 0x1012C404EF22A49;
            goto LABEL_73;
          }
          break;
        case 3:
          v34 = (unint64_t *)v69;
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            v37 = v69;
            if (!v69)
              goto LABEL_74;
            v38 = *(void **)(v69 + 8);
            if (v38)
            {
              *(_QWORD *)(v69 + 16) = v38;
              operator delete(v38);
            }
            v21 = v37;
            v22 = 0x1080C409938AC02;
            goto LABEL_73;
          }
          break;
        case 4:
          v23 = (unint64_t *)v69;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = v69;
            if (!v69)
              goto LABEL_74;
            v57 = (void **)(v69 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v57);
            goto LABEL_66;
          }
          break;
        case 5:
          v39 = (unint64_t *)v69;
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            v26 = v69;
            if (!v69)
              goto LABEL_74;
            v57 = (void **)(v69 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v57);
LABEL_66:
            v21 = v26;
            v22 = 0x1020C405E66F15BLL;
            goto LABEL_73;
          }
          break;
        case 8:
          v42 = (unint64_t *)v69;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            v45 = v69;
            if (!v69)
              goto LABEL_74;
            boost::detail::shared_count::~shared_count((unsigned int **)(v69 + 16));
            v21 = v45;
            v33 = -235920773;
            goto LABEL_72;
          }
          break;
        case 9:
          v27 = (unint64_t *)v69;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            v30 = v69;
            if (v69)
            {
              v31 = *(void **)(v69 + 48);
              if (v31)
              {
                *(_QWORD *)(v69 + 56) = v31;
                operator delete(v31);
              }
              v32 = *(void **)(v30 + 24);
              if (v32)
              {
                *(_QWORD *)(v30 + 32) = v32;
                operator delete(v32);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v30 + 8);
              v21 = v30;
              v33 = 2071181815;
LABEL_72:
              v22 = v33 | 0x1030C4000000000;
LABEL_73:
              MEMORY[0x219A19A08](v21, v22);
            }
LABEL_74:
            v69 = 0;
          }
          break;
        default:
          break;
      }
LABEL_75:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v71);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v49, v50[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_218585858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  if (*(char *)(v12 - 169) < 0)
    operator delete(*(void **)(v12 - 192));
  if (*(char *)(v12 - 193) < 0)
  {
    operator delete(*(void **)(v12 - 216));
    if ((v11 & 1) == 0)
    {
LABEL_8:
      switch(*(_BYTE *)(v12 - 140))
      {
        case 2:
          v14 = *(unint64_t **)(v12 - 152);
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (v16)
            goto LABEL_46;
          v17 = *(_QWORD *)(v12 - 152);
          if (!v17)
            goto LABEL_46;
          if (*(char *)(v17 + 31) < 0)
            operator delete(*(void **)(v17 + 8));
          v18 = (_QWORD *)v17;
          v19 = 0x1012C404EF22A49;
          break;
        case 3:
          v28 = *(unint64_t **)(v12 - 152);
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (v30)
            goto LABEL_46;
          v31 = *(_QWORD **)(v12 - 152);
          if (!v31)
            goto LABEL_46;
          v32 = (void *)v31[1];
          if (v32)
          {
            v31[2] = v32;
            operator delete(v32);
          }
          v18 = v31;
          v19 = 0x1080C409938AC02;
          break;
        case 4:
          v20 = *(unint64_t **)(v12 - 152);
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (v22)
            goto LABEL_46;
          v23 = *(_QWORD **)(v12 - 152);
          if (!v23)
            goto LABEL_46;
          *(_QWORD *)(v12 - 216) = v23 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
          goto LABEL_38;
        case 5:
          v33 = *(unint64_t **)(v12 - 152);
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (v35)
            goto LABEL_46;
          v23 = *(_QWORD **)(v12 - 152);
          if (!v23)
            goto LABEL_46;
          *(_QWORD *)(v12 - 216) = v23 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
LABEL_38:
          v18 = v23;
          v19 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v36 = *(unint64_t **)(v12 - 152);
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(_QWORD *)(v12 - 152);
            if (v39)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v39 + 16));
              MEMORY[0x219A19A08](v39, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v12 - 152) = 0;
          }
          goto LABEL_46;
        case 9:
          v24 = *(unint64_t **)(v12 - 152);
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (v26)
            goto LABEL_46;
          v27 = *(_QWORD **)(v12 - 152);
          if (!v27)
            goto LABEL_46;
          v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v27);
          v19 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_46;
      }
      MEMORY[0x219A19A08](v18, v19);
LABEL_46:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v12 - 136));
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a9, a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v11)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v10);
  goto LABEL_8;
}

void sub_218585B34()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  JUMPOUT(0x218585B2CLL);
}

void sub_218585B4C()
{
  JUMPOUT(0x218585B2CLL);
}

void turi::supervised::logistic_regression_opt_interface::get_status(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  void *v7[2];

  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v7, a2);
  turi::supervised::logistic_regression_opt_interface::rescale_solution(a1, (uint64_t *)v7);
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 392) + 208))(*(_QWORD *)(a1 + 392), v7);
  turi::supervised::make_progress_row_string(*(_QWORD *)(a1 + 392), a1 + 8, a1 + 200, a3, a4);
  free(v7[0]);
}

void sub_218585BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(__darwin_time_t a1, __darwin_time_t a2, uint64_t a3, float64x2_t **a4, double *a5)
{
  unint64_t v10;
  unint64_t v11;
  int *v12;
  file_logger *v13;
  file_logger *started;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  timeval *v18;
  timeval *v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  float64x2_t *v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  float64x2_t *v27;
  float64x2_t *v28;
  float64x2_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *f64;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float64x2_t *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  double *v50;
  double v51;
  int *v52;
  file_logger *v53;
  file_logger *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _BYTE *v58;
  const std::locale::facet *v59;
  _QWORD *exception;
  timeval v61;
  unint64_t v62;
  void *__p[3];
  _QWORD v64[3];
  timeval v65;
  uint64_t v66;
  timeval *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 432);
  v65.tv_sec = *(_QWORD *)(a1 + 424);
  *(_QWORD *)&v65.tv_usec = 1;
  v66 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)__p, &v65.tv_sec);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v64, v10, (uint64_t)__p);
  free(__p[0]);
  v11 = *(_QWORD *)(a1 + 432);
  v65.tv_sec = 0;
  std::vector<double>::vector(__p, v11, &v65);
  v62 = *(_QWORD *)(a1 + 424) / (unint64_t)(*(_QWORD *)(a1 + 408) - 1);
  gettimeofday(&v61, 0);
  gettimeofday(&v65, 0);
  v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12))
      goto LABEL_54;
    v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression_opt_interface.cpp", "compute_first_order_statistics", 244, 1);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Starting first order stats computation", 38);
    v16 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v16)
    {
      if (*((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet((const std::locale *)&v65, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale((std::locale *)&v65);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
          goto LABEL_55;
      }
    }
  }
  if (*(_BYTE *)(a1 + 481))
  {
    v18 = (timeval *)operator new(0x38uLL);
    v18->tv_sec = (__darwin_time_t)&off_24D9497C0;
  }
  else
  {
    v18 = (timeval *)operator new(0x38uLL);
    v18->tv_sec = (__darwin_time_t)&off_24D949840;
  }
  *(_QWORD *)&v18->tv_usec = &v62;
  v18[1].tv_sec = a1;
  *(_QWORD *)&v18[1].tv_usec = a3;
  v18[2].tv_sec = a2;
  *(_QWORD *)&v18[2].tv_usec = v64;
  v18[3].tv_sec = (__darwin_time_t)__p;
  v67 = v18;
  turi::in_parallel((turi::thread_pool *)&v65);
  v19 = v67;
  if (v67 == &v65)
  {
    v20 = 4;
    v19 = &v65;
  }
  else
  {
    if (!v67)
      goto LABEL_17;
    v20 = 5;
  }
  (*(void (**)(void))(v19->tv_sec + 8 * v20))();
LABEL_17:
  *a5 = *(double *)__p[0];
  v22 = *(float64x2_t **)v64[0];
  v21 = *(_QWORD *)(v64[0] + 8);
  if (a4[1] != (float64x2_t *)v21)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v21, 1);
    v21 = (uint64_t)a4[1];
  }
  v23 = *a4;
  if (v21 >= 0)
    v24 = v21;
  else
    v24 = v21 + 1;
  v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
  if (v21 >= 2)
  {
    v26 = 0;
    v27 = *a4;
    v28 = v22;
    do
    {
      v29 = *v28++;
      *v27++ = v29;
      v26 += 2;
    }
    while (v26 < v25);
  }
  v30 = __OFSUB__(v21, v25);
  v31 = v21 - v25;
  if (!((v31 < 0) ^ v30 | (v31 == 0)))
  {
    v32 = v24 >> 1;
    v33 = (uint64_t *)&v22[v24 >> 1];
    f64 = (_QWORD *)v23[v32].f64;
    do
    {
      v35 = *v33++;
      *f64++ = v35;
      --v31;
    }
    while (v31);
  }
  if (*(_QWORD *)(a1 + 432) >= 2uLL)
  {
    v36 = 1;
    do
    {
      v37 = *(_QWORD *)(v64[0] + 16 * v36);
      v38 = *a4;
      v39 = (uint64_t)a4[1];
      if (v39 >= 0)
        v40 = (uint64_t)a4[1];
      else
        v40 = v39 + 1;
      v41 = v40 & 0xFFFFFFFFFFFFFFFELL;
      if (v39 >= 2)
      {
        v42 = 0;
        v43 = *a4;
        v44 = *(float64x2_t **)(v64[0] + 16 * v36);
        do
        {
          v45 = *v44++;
          *v43 = vaddq_f64(v45, *v43);
          ++v43;
          v42 += 2;
        }
        while (v42 < v41);
      }
      v46 = v39 <= v41;
      v47 = v39 - v41;
      if (!v46)
      {
        v48 = v40 >> 1;
        v49 = (double *)(v37 + 16 * v48);
        v50 = v38[v48].f64;
        do
        {
          v51 = *v49++;
          *v50 = v51 + *v50;
          ++v50;
          --v47;
        }
        while (v47);
      }
      *a5 = *((double *)__p[0] + v36++) + *a5;
    }
    while (v36 < *(_QWORD *)(a1 + 432));
  }
  v52 = (int *)global_logger();
  if (v52[169] <= 2)
  {
    if (!cppipc::must_cancel((cppipc *)v52))
    {
      v53 = (file_logger *)global_logger();
      v54 = file_logger::start_stream(v53, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression_opt_interface.cpp", "compute_first_order_statistics", 338, 1);
      v55 = pthread_getspecific(*((_QWORD *)v54 + 74));
      if (v55 && *((_BYTE *)v55 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55 + 2, (uint64_t)"Computation done at ", 20);
      gettimeofday(&v65, 0);
      v56 = file_logger::operator<<<double>((uint64_t)v54);
      v57 = pthread_getspecific(*(_QWORD *)(v56 + 592));
      if (v57 && *((_BYTE *)v57 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57 + 2, (uint64_t)"s", 1);
      v58 = pthread_getspecific(*(_QWORD *)(v56 + 592));
      if (!v58)
        goto LABEL_51;
      if (!v58[280])
        goto LABEL_51;
      std::ios_base::getloc((const std::ios_base *)&v58[*(_QWORD *)(*((_QWORD *)v58 + 2) - 24) + 16]);
      v59 = std::locale::use_facet((const std::locale *)&v65, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
      std::locale::~locale((std::locale *)&v65);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v56);
      if (*(_DWORD *)(v56 + 600) != 7)
        goto LABEL_51;
LABEL_55:
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      *exception = "LOG_FATAL encountered";
      __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
    }
LABEL_54:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_51:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v65.tv_sec = (__darwin_time_t)v64;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
}

void sub_21858618C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, char *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,std::locale *a23)
{
  std::locale *v23;
  std::locale *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*((void (**)(void))v25->__locale_ + v26))();
LABEL_6:
  if (__p)
  {
    a15 = __p;
    operator delete(__p);
  }
  __p = &a17;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(__darwin_time_t a1, uint64_t a2, float64x2_t **a3, float64x2_t **a4, double *a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  timeval *v19;
  timeval *v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  uint64_t v24;
  float64x2_t *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *f64;
  uint64_t v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  uint64_t v42;
  int64_t v43;
  int64_t v44;
  float64x2_t *v45;
  float64x2_t *v46;
  float64x2_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  float64x2_t *v62;
  float64x2_t *v63;
  float64x2_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  double *v68;
  double v69;
  uint64_t v70;
  float64x2_t *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  double *v82;
  double v83;
  int *v84;
  file_logger *v85;
  file_logger *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  const std::locale::facet *v91;
  std::bad_alloc *v92;
  std::bad_alloc *v93;
  _QWORD *exception;
  _QWORD *v95;
  unint64_t v96;
  void *__p[3];
  uint64_t v98[3];
  _QWORD v99[3];
  timeval v100;
  timeval v101;
  uint64_t v102;
  timeval *v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  gettimeofday(&v100, 0);
  gettimeofday(&v101, 0);
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression_opt_interface.cpp", "compute_second_order_statistics", 351, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet((const std::locale *)&v101, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v101);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v16 = *(_QWORD *)(a1 + 432);
  v98[0] = *(_QWORD *)(a1 + 424);
  v98[1] = v98[0];
  v98[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)&v101, v98);
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::vector(v99, v16, (uint64_t)&v101);
  free((void *)v101.tv_sec);
  v17 = *(_QWORD *)(a1 + 432);
  v101.tv_sec = *(_QWORD *)(a1 + 424);
  *(_QWORD *)&v101.tv_usec = 1;
  v102 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)__p, &v101.tv_sec);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v98, v17, (uint64_t)__p);
  free(__p[0]);
  v18 = *(_QWORD *)(a1 + 432);
  v101.tv_sec = 0;
  std::vector<double>::vector(__p, v18, &v101);
  v96 = *(_QWORD *)(a1 + 424) / (unint64_t)(*(_QWORD *)(a1 + 408) - 1);
  if (*(_BYTE *)(a1 + 481))
  {
    v19 = (timeval *)operator new(0x38uLL);
    v19->tv_sec = (__darwin_time_t)&off_24D9498C0;
    *(_QWORD *)&v19->tv_usec = &v96;
    v19[1].tv_sec = a1;
    *(_QWORD *)&v19[1].tv_usec = a2;
    v19[2].tv_sec = (__darwin_time_t)__p;
    *(_QWORD *)&v19[2].tv_usec = v98;
  }
  else
  {
    v19 = (timeval *)operator new(0x38uLL);
    v19->tv_sec = (__darwin_time_t)&off_24D949940;
    *(_QWORD *)&v19->tv_usec = &v96;
    v19[1].tv_sec = a1;
    *(_QWORD *)&v19[1].tv_usec = a2;
    v19[2].tv_sec = (__darwin_time_t)v98;
    *(_QWORD *)&v19[2].tv_usec = __p;
  }
  v19[3].tv_sec = (__darwin_time_t)v99;
  v103 = v19;
  turi::in_parallel((turi::thread_pool *)&v101);
  v20 = v103;
  if (v103 == &v101)
  {
    v21 = 4;
    v20 = &v101;
    goto LABEL_16;
  }
  if (v103)
  {
    v21 = 5;
LABEL_16:
    (*(void (**)(void))(v20->tv_sec + 8 * v21))();
  }
  *a5 = *(double *)__p[0];
  v23 = *(float64x2_t **)v99[0];
  v22 = *(_QWORD *)(v99[0] + 8);
  v24 = *(_QWORD *)(v99[0] + 16);
  if (a3[1] != (float64x2_t *)v22 || a3[2] != (float64x2_t *)v24)
  {
    if (v22 && v24 && 0x7FFFFFFFFFFFFFFFLL / v24 < v22)
    {
      v92 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v93 = std::bad_alloc::bad_alloc(v92);
      __cxa_throw(v93, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a3, v24 * v22, v22, v24);
    v22 = (uint64_t)a3[1];
    v24 = (uint64_t)a3[2];
  }
  v25 = *a3;
  v26 = v22 * v24;
  if (v22 * v24 >= 0)
    v27 = v22 * v24;
  else
    v27 = v26 + 1;
  v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if (v26 >= 2)
  {
    v29 = 0;
    v30 = *a3;
    v31 = v23;
    do
    {
      v32 = *v31++;
      *v30++ = v32;
      v29 += 2;
    }
    while (v29 < v28);
  }
  v33 = v26 <= v28;
  v34 = v26 - v28;
  if (!v33)
  {
    v35 = v27 >> 1;
    v36 = (uint64_t *)&v23[v27 >> 1];
    f64 = (_QWORD *)v25[v35].f64;
    do
    {
      v38 = *v36++;
      *f64++ = v38;
      --v34;
    }
    while (v34);
  }
  v40 = *(float64x2_t **)v98[0];
  v39 = *(_QWORD *)(v98[0] + 8);
  if (a4[1] != (float64x2_t *)v39)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v39, 1);
    v39 = (uint64_t)a4[1];
  }
  v41 = *a4;
  if (v39 >= 0)
    v42 = v39;
  else
    v42 = v39 + 1;
  v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
  if (v39 >= 2)
  {
    v44 = 0;
    v45 = *a4;
    v46 = v40;
    do
    {
      v47 = *v46++;
      *v45++ = v47;
      v44 += 2;
    }
    while (v44 < v43);
  }
  v48 = __OFSUB__(v39, v43);
  v49 = v39 - v43;
  if (!((v49 < 0) ^ v48 | (v49 == 0)))
  {
    v50 = v42 >> 1;
    v51 = (uint64_t *)&v40[v42 >> 1];
    v52 = (_QWORD *)v41[v50].f64;
    do
    {
      v53 = *v51++;
      *v52++ = v53;
      --v49;
    }
    while (v49);
  }
  if (*(_QWORD *)(a1 + 432) >= 2uLL)
  {
    v54 = 1;
    do
    {
      v55 = *(_QWORD *)(v99[0] + 24 * v54);
      v56 = *a3;
      v57 = a3[1];
      v58 = (_QWORD)a3[2] * (_QWORD)v57;
      if (v58 >= 0)
        v59 = (_QWORD)a3[2] * (_QWORD)v57;
      else
        v59 = v58 + 1;
      v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
      if (v58 >= 2)
      {
        v61 = 0;
        v62 = *a3;
        v63 = *(float64x2_t **)(v99[0] + 24 * v54);
        do
        {
          v64 = *v63++;
          *v62 = vaddq_f64(v64, *v62);
          ++v62;
          v61 += 2;
        }
        while (v61 < v60);
      }
      v33 = v58 <= v60;
      v65 = v58 - v60;
      if (!v33)
      {
        v66 = v59 >> 1;
        v67 = (double *)(v55 + 16 * v66);
        v68 = v56[v66].f64;
        do
        {
          v69 = *v67++;
          *v68 = v69 + *v68;
          ++v68;
          --v65;
        }
        while (v65);
      }
      v70 = *(_QWORD *)(v98[0] + 16 * v54);
      v71 = *a4;
      v72 = (uint64_t)a4[1];
      if (v72 >= 0)
        v73 = (uint64_t)a4[1];
      else
        v73 = v72 + 1;
      v74 = v73 & 0xFFFFFFFFFFFFFFFELL;
      if (v72 >= 2)
      {
        v75 = 0;
        v76 = *a4;
        v77 = *(float64x2_t **)(v98[0] + 16 * v54);
        do
        {
          v78 = *v77++;
          *v76 = vaddq_f64(v78, *v76);
          ++v76;
          v75 += 2;
        }
        while (v75 < v74);
      }
      v33 = v72 <= v74;
      v79 = v72 - v74;
      if (!v33)
      {
        v80 = v73 >> 1;
        v81 = (double *)(v70 + 16 * v80);
        v82 = v71[v80].f64;
        do
        {
          v83 = *v81++;
          *v82 = v83 + *v82;
          ++v82;
          --v79;
        }
        while (v79);
      }
      *a5 = *((double *)__p[0] + v54++) + *a5;
    }
    while (v54 < *(_QWORD *)(a1 + 432));
  }
  v84 = (int *)global_logger();
  if (v84[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v84))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v85 = (file_logger *)global_logger();
    v86 = file_logger::start_stream(v85, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression_opt_interface.cpp", "compute_second_order_statistics", 477, 1);
    v87 = pthread_getspecific(*((_QWORD *)v86 + 74));
    if (v87 && *((_BYTE *)v87 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87 + 2, (uint64_t)"Computation done at ", 20);
    gettimeofday(&v101, 0);
    v88 = file_logger::operator<<<double>((uint64_t)v86);
    v89 = pthread_getspecific(*(_QWORD *)(v88 + 592));
    if (v89 && *((_BYTE *)v89 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89 + 2, (uint64_t)"s", 1);
    v90 = pthread_getspecific(*(_QWORD *)(v88 + 592));
    if (v90)
    {
      if (*((_BYTE *)v90 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v90 + *(_QWORD *)(v90[2] - 24) + 16));
        v91 = std::locale::use_facet((const std::locale *)&v101, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10);
        std::locale::~locale((std::locale *)&v101);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v88);
        if (*(_DWORD *)(v88 + 600) == 7)
        {
          __print_back_trace();
          v95 = __cxa_allocate_exception(8uLL);
          *v95 = "LOG_FATAL encountered";
          __cxa_throw(v95, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v101.tv_sec = (__darwin_time_t)v98;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  v101.tv_sec = (__darwin_time_t)v99;
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
}

void sub_2185869A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char **__p, char **a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,std::locale *a26)
{
  std::locale *v26;
  std::locale *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v29 = 5;
  }
  (*((void (**)(void))v28->__locale_ + v29))();
LABEL_6:
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a15 = &a18;
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(__darwin_time_t a1, uint64_t a2, float64x2_t **a3, double *a4)
{
  turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(a1, a1 + 8, a2, a3, a4);
}

void turi::supervised::logistic_regression_opt_interface::compute_validation_first_order_statistics(__darwin_time_t a1, uint64_t a2, float64x2_t **a3, double *a4)
{
  turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(a1, a1 + 200, a2, a3, a4);
}

void sub_218586C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::map<unsigned long,float>::map[abi:ne180100](uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_218586D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24D9497C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D9497C0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  void **v17;
  void *v18;
  __int128 **v19;
  __int128 *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  _OWORD *v26;
  __int128 *v27;
  __int128 v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int64_t v50;
  char *v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  _QWORD *v89;
  double *v90;
  double v91;
  uint64_t v92;
  uint64_t *v93;
  long double *v94;
  uint64_t v95;
  long double v96;
  double v97;
  double v98;
  uint64_t v99;
  double v100;
  char *v101;
  uint64_t v102;
  int64_t v103;
  int64_t v104;
  float64x2_t v105;
  float64x2_t *v106;
  float64x2_t *v107;
  float64x2_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  double *v112;
  double *v113;
  double v114;
  double v115;
  char *v116;
  float64x2_t **v117;
  float64x2_t *v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  int64_t v122;
  float64x2_t *v123;
  float64x2_t *v124;
  float64x2_t v125;
  uint64_t v126;
  uint64_t v127;
  double *v128;
  double *f64;
  double v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::bad_alloc *exception;
  std::bad_alloc *v137;
  std::bad_alloc *v138;
  std::bad_alloc *v139;
  std::bad_alloc *v140;
  std::bad_alloc *v141;
  std::bad_alloc *v142;
  std::bad_alloc *v143;
  std::bad_alloc *v144;
  std::bad_alloc *v145;
  uint64_t **v146;
  uint64_t v147;
  void *v148;
  _BYTE v149[128];
  uint64_t v150;
  unsigned __int8 v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void **v167;
  void *v168;
  unint64_t v169;
  double *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t *v174;
  void **v175;
  char **v176;
  void **v177;
  double v178;
  char **v179;
  void **v180;
  uint64_t v181;

  v3 = a1;
  v181 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  v6 = *(unint64_t **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v172 = 0;
  v173 = 0;
  v8 = *v6;
  if (*v6)
  {
    if (v8 >> 61 || (v9 = (char *)malloc_type_malloc(8 * v8, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v137 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v137, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v172 = v9;
  }
  v173 = v8;
  v10 = *(_QWORD *)(v7 + 408);
  v170 = 0;
  v171 = 0;
  v11 = v10 - 1;
  if (v10 == 1)
  {
    v168 = 0;
    v169 = 0;
LABEL_16:
    v17 = 0;
    v169 = 0;
    v166 = 0;
    v167 = 0;
    goto LABEL_17;
  }
  if (v11 >> 61 || (v12 = (double *)malloc_type_malloc(8 * v11, 0x1E76AA36uLL)) == 0)
  {
    v138 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v139 = std::bad_alloc::bad_alloc(v138);
    __cxa_throw(v139, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v13 = *(_QWORD *)(v7 + 408);
  v170 = v12;
  v171 = v11;
  v168 = 0;
  v169 = 0;
  v14 = v13 - 1;
  if (v13 == 1)
    goto LABEL_16;
  if (v14 >> 61 || (v15 = malloc_type_malloc(8 * v14, 0x1E76AA36uLL)) == 0)
  {
    v140 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v141 = std::bad_alloc::bad_alloc(v140);
    __cxa_throw(v141, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v16 = *(_QWORD *)(v7 + 408);
  v168 = v15;
  v169 = v14;
  v166 = 0;
  v167 = 0;
  v17 = (void **)(v16 - 1);
  if (v16 != 1)
  {
    if ((unint64_t)v17 >> 61 || (v18 = malloc_type_malloc(8 * (_QWORD)v17, 0x1E76AA36uLL)) == 0)
    {
      v144 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v145 = std::bad_alloc::bad_alloc(v144);
      __cxa_throw(v145, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v166 = v18;
  }
LABEL_17:
  v167 = v17;
  v19 = *(__int128 ***)(v3 + 24);
  v164 = 0;
  v165 = 0;
  v163 = 0;
  v20 = *v19;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v163, (unint64_t)v19[1], (uint64_t)v19[1], 1);
  v21 = (char *)v163;
  v22 = v164 * v165;
  if (v164 * v165 >= 0)
    v23 = v164 * v165;
  else
    v23 = v22 + 1;
  v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (v22 >= 2)
  {
    v25 = 0;
    v26 = v163;
    v27 = v20;
    do
    {
      v28 = *v27++;
      *v26++ = v28;
      v25 += 2;
    }
    while (v25 < v24);
  }
  v29 = v22 <= v24;
  v30 = v22 - v24;
  if (!v29)
  {
    v31 = v23 >> 1;
    v32 = (uint64_t *)&v20[v23 >> 1];
    v33 = &v21[16 * v31];
    do
    {
      v34 = *v32++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      --v30;
    }
    while (v30);
  }
  v35 = **(_QWORD **)(v3 + 8);
  v36 = *(_QWORD *)(v7 + 408);
  v37 = v36 - 1;
  if (v35)
    v38 = v36 == 1;
  else
    v38 = 1;
  if (!v38 && 0x7FFFFFFFFFFFFFFFLL / v37 < v35)
  {
    v142 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v143 = std::bad_alloc::bad_alloc(v142);
    __cxa_throw(v143, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v163, v37 * v35, v35, v37);
  v162 = 0;
  turi::ml_data::get_iterator(*(turi::ml_data **)(v3 + 32), v4, v5, (uint64_t)v149);
  if (v155 != v154)
  {
    v146 = (uint64_t **)(v7 + 440);
    v147 = v4;
    do
    {
      v39 = v157;
      if (*(_BYTE *)(v157 + 16))
        v40 = *(_BYTE *)(v157 + 17) == 0;
      else
        v40 = 1;
      if (v40)
      {
        v41 = 0;
      }
      else
      {
        if (*(_BYTE *)(v157 + 18))
          v42 = (_QWORD *)(v157 + 24);
        else
          v42 = (_QWORD *)(*(_QWORD *)(v157 + 96) + 8 * v159);
        v41 = *(_QWORD *)(*(_QWORD *)(v157 + 96) + 8 * v159 + 8 * *v42 - 8);
      }
      v162 = v41;
      if (v41 < *(_QWORD *)(v7 + 408))
      {
        v43 = v7;
        v44 = v3;
        v45 = v158;
        if (v158)
        {
          p_shared_owners = (unint64_t *)&v158->__shared_owners_;
          do
            v47 = __ldxr(p_shared_owners);
          while (__stxr(v47 + 1, p_shared_owners));
        }
        v48 = v159;
        v49 = v161;
        v51 = v172;
        v50 = v173;
        if (v173 >= 0)
          v52 = v173;
        else
          v52 = v173 + 1;
        v53 = v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v173 >= 2)
        {
          v54 = 2;
          if (v53 > 2)
            v54 = v52 & 0xFFFFFFFFFFFFFFFELL;
          bzero(v172, ((8 * v54 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if (v53 < v50)
          bzero(&v51[16 * (v52 >> 1)], 8 * v50 - 16 * (v52 >> 1));
        v3 = v44;
        v7 = v43;
        if (v49)
        {
          v55 = *(_QWORD *)(v39 + 56);
          if (v55)
          {
            v56 = 0;
            v57 = 0;
            v58 = (unint64_t *)(*(_QWORD *)(v39 + 96) + 8 * v48 + 8 * (*(_BYTE *)(v39 + 18) == 0));
            v59 = *(_QWORD *)(v39 + 72);
            v60 = v172;
            do
            {
              v61 = *(_QWORD *)(v59 + 16 * v56);
              v62 = *(_QWORD *)(v61 + 64);
              switch(*(_DWORD *)(v61 + 24))
              {
                case 0:
                  if (v62)
                    *(_QWORD *)&v60[8 * v57] = *v58;
                  ++v58;
                  goto LABEL_88;
                case 1:
                  v71 = *v58++;
                  v70 = v71;
                  --v57;
                  if (v71 < v62 && v70 != 0)
                    *(_QWORD *)&v60[8 * v70 + 8 * v57] = 0x3FF0000000000000;
                  goto LABEL_88;
                case 2:
                  v63 = *(_QWORD *)(v61 + 72);
                  if (!v63)
                    goto LABEL_88;
                  v64 = 0;
                  v65 = 0;
                  v66 = &v172[8 * v57];
                  do
                  {
                    if (v65 < v62)
                      *(_QWORD *)&v66[8 * v65] = v58[v65];
                    ++v65;
                    v64 -= 8;
                  }
                  while (v63 != v65);
                  break;
                case 3:
                  v74 = *v58++;
                  v73 = v74;
                  --v57;
                  if (v74)
                  {
                    v75 = v172;
                    do
                    {
                      v76 = *v58;
                      if (*v58 < v62 && v76 != 0)
                        *(_QWORD *)&v75[8 * v76 + 8 * v57] = 0x3FF0000000000000;
                      ++v58;
                      --v73;
                    }
                    while (v73);
                  }
                  goto LABEL_88;
                case 4:
                  v80 = *v58;
                  v78 = v58 + 1;
                  v79 = v80;
                  if (v80)
                  {
                    v81 = v172;
                    v82 = v78;
                    do
                    {
                      v84 = *v82;
                      v82 += 2;
                      v83 = v84;
                      if (v84 < v62)
                        *(_QWORD *)&v81[8 * v83 + 8 * v57] = v78[1];
                      v78 = v82;
                      --v79;
                    }
                    while (v79);
                  }
                  else
                  {
                    v82 = v78;
                  }
                  v57 += v62;
                  v58 = v82;
                  goto LABEL_89;
                case 7:
                  v67 = *(_QWORD *)(v61 + 72);
                  if (!v67)
                    goto LABEL_88;
                  v64 = 0;
                  v68 = 0;
                  v69 = &v172[8 * v57];
                  do
                  {
                    if (v68 < v62)
                      *(_QWORD *)&v69[8 * v68] = v58[v68];
                    ++v68;
                    v64 -= 8;
                  }
                  while (v67 != v68);
                  break;
                default:
                  goto LABEL_89;
              }
              v58 = (unint64_t *)((char *)v58 - v64);
LABEL_88:
              v57 += v62;
LABEL_89:
              ++v56;
            }
            while (v56 != v55);
          }
        }
        if (v45)
        {
          v85 = (unint64_t *)&v45->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        *(_QWORD *)&v172[8 * **(_QWORD **)(v3 + 8) - 8] = 0x3FF0000000000000;
        if (*(_BYTE *)(v43 + 480))
          (*(void (**)(_QWORD, char **))(**(_QWORD **)(v43 + 464) + 16))(*(_QWORD *)(v43 + 464), &v172);
        if (*(_BYTE *)(v157 + 16))
          v87 = *(_BYTE *)(v157 + 17) == 0;
        else
          v87 = 1;
        if (v87)
        {
          v88 = 0;
        }
        else
        {
          v89 = (_QWORD *)(v157 + 24);
          if (!*(_BYTE *)(v157 + 18))
            v89 = (_QWORD *)(*(_QWORD *)(v157 + 96) + 8 * v159);
          v88 = *(_QWORD *)(*(_QWORD *)(v157 + 96) + 8 * v159 + 8 * *v89 - 8);
        }
        v162 = v88;
        v175 = &v163;
        v176 = &v172;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(&v170, (uint64_t **)&v175);
        v90 = v170;
        if (v162)
          v91 = v170[v162 - 1];
        else
          v91 = 0.0;
        v92 = v171;
        if (v169 != v171)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v168, v171, 1);
          v92 = v169;
        }
        v93 = (uint64_t *)v168;
        if (v92 >= 1)
        {
          v94 = (long double *)v168;
          v95 = v92;
          do
          {
            v96 = *v90++;
            *v94++ = exp(v96);
            --v95;
          }
          while (v95);
        }
        if (v92)
        {
          v175 = (void **)v93;
          v177 = &v168;
          v97 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v175);
          v93 = (uint64_t *)v168;
        }
        else
        {
          v97 = 0.0;
        }
        v98 = log1p(v97);
        v99 = v169;
        if (v167 != (void **)v169)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v166, v169, 1);
          v99 = (uint64_t)v167;
        }
        v100 = v97 + 1.0;
        v101 = (char *)v166;
        if (v99 >= 0)
          v102 = v99;
        else
          v102 = v99 + 1;
        v103 = v102 & 0xFFFFFFFFFFFFFFFELL;
        if (v99 >= 2)
        {
          v104 = 0;
          v105 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100, 0);
          v106 = (float64x2_t *)v166;
          v107 = (float64x2_t *)v93;
          do
          {
            v108 = *v107++;
            *v106++ = vdivq_f64(v108, v105);
            v104 += 2;
          }
          while (v104 < v103);
        }
        v109 = __OFSUB__(v99, v103);
        v110 = v99 - v103;
        if (!((v110 < 0) ^ v109 | (v110 == 0)))
        {
          v111 = v102 >> 1;
          v112 = (double *)&v93[2 * (v102 >> 1)];
          v113 = (double *)&v101[16 * v111];
          do
          {
            v114 = *v112++;
            *v113++ = v114 / v100;
            --v110;
          }
          while (v110);
        }
        if (v162)
          *((double *)v166 + v162 - 1) = *((double *)v166 + v162 - 1) + -1.0;
        v174 = &v162;
        v115 = *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v146, &v162, (uint64_t)&std::piecewise_construct, &v174)+ 10);
        v176 = (char **)v173;
        v177 = v167;
        v178 = v115;
        v179 = &v172;
        v180 = &v166;
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(&v148, &v175);
        v116 = (char *)v148;
        v117 = (float64x2_t **)(**(_QWORD **)(v3 + 40) + 16 * v147);
        v118 = *v117;
        v119 = (uint64_t)v117[1];
        if (v119 >= 0)
          v120 = (uint64_t)v117[1];
        else
          v120 = v119 + 1;
        v121 = v120 & 0xFFFFFFFFFFFFFFFELL;
        if (v119 >= 2)
        {
          v122 = 0;
          v123 = v118;
          v124 = (float64x2_t *)v148;
          do
          {
            v125 = *v124++;
            *v123 = vaddq_f64(v125, *v123);
            ++v123;
            v122 += 2;
          }
          while (v122 < v121);
        }
        v29 = v119 <= v121;
        v126 = v119 - v121;
        if (!v29)
        {
          v127 = v120 >> 1;
          v128 = (double *)&v116[16 * v127];
          f64 = v118[v127].f64;
          do
          {
            v130 = *v128++;
            *f64 = v130 + *f64;
            ++f64;
            --v126;
          }
          while (v126);
        }
        v175 = (void **)&v162;
        *(double *)(**(_QWORD **)(v3 + 48) + 8 * v147) = *(double *)(**(_QWORD **)(v3 + 48) + 8 * v147)
                                                       + *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v146, &v162, (uint64_t)&std::piecewise_construct, &v175)+ 10)* (v98 - v91);
        free(v148);
      }
      if (v161 | v151)
      {
        v131 = (uint64_t *)(*(_QWORD *)(v157 + 96) + 8 * v159);
        if (v152)
          v131 = &v153;
        v159 += *v131;
      }
      v132 = v155 + 1;
      v133 = v154;
      v134 = ++v155 - v150 * v156;
      v160 = v134;
      if (v134 == v150 && v132 != v154)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v149);
        v133 = v154;
        v132 = v155;
      }
    }
    while (v132 != v133);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v149);
  free(v163);
  free(v166);
  free(v168);
  free(v170);
  free(v172);
}

void sub_218587830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a66;
  uint64_t v66;

  free(a64);
  free(a66);
  free(*(void **)(v66 - 248));
  free(*(void **)(v66 - 232));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v27 = 0;
  v28 = 0;
  v4 = (*a2)[2];
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v27, v4, 1);
    v5 = (char *)v27;
    v6 = v28;
    v7 = (unint64_t *)a2[1];
    if (v28 >= 0)
      v8 = v28;
    else
      v8 = v28 + 1;
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v28 >= 2)
    {
      v10 = 2;
      if (v9 > 2)
        v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      bzero(v27, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6)
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
  }
  else
  {
    v7 = (unint64_t *)a2[1];
  }
  v11 = *a2;
  v29 = 0x3FF0000000000000;
  v30 = v11;
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(&v30, v7, (uint64_t *)&v27, (double *)&v29);
  v13 = (__int128 *)v27;
  v12 = v28;
  if (a1[1] != v28)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v28, 1);
    v12 = a1[1];
  }
  v14 = (_OWORD *)*a1;
  if (v12 >= 0)
    v15 = v12;
  else
    v15 = v12 + 1;
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v17 = 0;
    v18 = (_OWORD *)*a1;
    v19 = v13;
    do
    {
      v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  v21 = __OFSUB__(v12, v16);
  v22 = v12 - v16;
  if (!((v22 < 0) ^ v21 | (v22 == 0)))
  {
    v23 = v15 >> 1;
    v24 = (uint64_t *)&v13[v15 >> 1];
    v25 = &v14[v23];
    do
    {
      v26 = *v24++;
      *v25++ = v26;
      --v22;
    }
    while (v22);
  }
  free(v27);
}

void sub_218587A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::bad_alloc *exception;
  std::bad_alloc *v14;
  char v15;
  _BYTE v16[8];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20[2];

  v20[1] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2[4] + 8);
  v5 = *(_QWORD *)(a2[5] + 8);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
    goto LABEL_13;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v5 * v4, v4, v5);
  v7 = a2[4];
  v8 = (uint64_t *)a2[5];
  v9 = *(_QWORD *)(v7 + 8);
  v10 = a2[3];
  v17 = v9;
  v18 = v10;
  v19 = v7;
  v20[0] = v8;
  v11 = v8[1];
  if (a1[1] != v9 || a1[2] != v11)
  {
    if (!v9 || !v11 || 0x7FFFFFFFFFFFFFFFLL / v11 >= v9)
    {
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v11 * v9, v9, v11);
      goto LABEL_12;
    }
LABEL_13:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v14, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
LABEL_12:
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(a1, (uint64_t)v16, v20, (uint64_t)&v15);
  return a1;
}

void sub_218587BB4(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24D949840;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D949840;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  float64x2_t *v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  __int128 **v17;
  __int128 *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  __n128 iterator;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t i;
  uint64_t v67;
  uint64_t v68;
  uint64_t j;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  unint64_t v78;
  _QWORD *v79;
  double *v80;
  double v81;
  uint64_t v82;
  float64x2_t *v83;
  long double *v84;
  uint64_t v85;
  long double v86;
  double v87;
  double v88;
  uint64_t v89;
  double v90;
  double *v91;
  uint64_t v92;
  int64_t v93;
  int64_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t *v97;
  float64x2_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  double *f64;
  double *v103;
  double v104;
  uint64_t v105;
  uint64_t **v106;
  uint64_t v107;
  double v108;
  double *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::bad_alloc *exception;
  std::bad_alloc *v117;
  std::bad_alloc *v118;
  std::bad_alloc *v119;
  std::bad_alloc *v120;
  std::bad_alloc *v121;
  std::bad_alloc *v122;
  std::bad_alloc *v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t **v127;
  uint64_t v128;
  uint64_t v129;
  float64x2_t *v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _BYTE v134[128];
  uint64_t v135;
  unsigned __int8 v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  double *v151;
  uint64_t v152;
  float64x2_t *v153;
  unint64_t v154;
  double *v155;
  unint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _QWORD *v161[2];

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = **(_QWORD **)(a1 + 8);
  LOBYTE(v157) = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = v7;
  v128 = v6;
  v8 = *(_QWORD *)(v6 + 408);
  v155 = 0;
  v156 = 0;
  v9 = v8 - 1;
  if (v8 == 1)
  {
    v153 = 0;
    v154 = 0;
LABEL_12:
    v15 = 0;
    v154 = 0;
    v151 = 0;
    v152 = 0;
    goto LABEL_13;
  }
  if (v9 >> 61 || (v10 = (double *)malloc_type_malloc(8 * v9, 0x1E76AA36uLL)) == 0)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v117 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v117, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v11 = *(_QWORD *)(v128 + 408);
  v155 = v10;
  v156 = v9;
  v153 = 0;
  v154 = 0;
  v12 = v11 - 1;
  if (v11 == 1)
    goto LABEL_12;
  if (v12 >> 61 || (v13 = (float64x2_t *)malloc_type_malloc(8 * v12, 0x1E76AA36uLL)) == 0)
  {
    v118 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v119 = std::bad_alloc::bad_alloc(v118);
    __cxa_throw(v119, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v14 = *(_QWORD *)(v128 + 408);
  v153 = v13;
  v154 = v12;
  v151 = 0;
  v152 = 0;
  v15 = v14 - 1;
  if (v14 != 1)
  {
    if (v15 >> 61 || (v16 = (double *)malloc_type_malloc(8 * v15, 0x1E76AA36uLL)) == 0)
    {
      v122 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v123 = std::bad_alloc::bad_alloc(v122);
      __cxa_throw(v123, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v151 = v16;
  }
LABEL_13:
  v152 = v15;
  v17 = *(__int128 ***)(a1 + 24);
  v149 = 0;
  v150 = 0;
  v148 = 0;
  v18 = *v17;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v148, (unint64_t)v17[1], (uint64_t)v17[1], 1);
  v19 = (char *)v148;
  v20 = v149 * v150;
  if (v149 * v150 >= 0)
    v21 = v149 * v150;
  else
    v21 = v20 + 1;
  v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (v20 >= 2)
  {
    v23 = 0;
    v24 = v148;
    v25 = v18;
    do
    {
      v26 = *v25++;
      *v24++ = v26;
      v23 += 2;
    }
    while (v23 < v22);
  }
  v27 = v20 <= v22;
  v28 = v20 - v22;
  if (!v27)
  {
    v29 = v21 >> 1;
    v30 = (uint64_t *)&v18[v21 >> 1];
    v31 = &v19[16 * v29];
    do
    {
      v32 = *v30++;
      *(_QWORD *)v31 = v32;
      v31 += 8;
      --v28;
    }
    while (v28);
  }
  v33 = **(_QWORD **)(a1 + 8);
  v34 = *(_QWORD *)(v128 + 408);
  v35 = v34 - 1;
  if (v33)
    v36 = v34 == 1;
  else
    v36 = 1;
  if (!v36 && 0x7FFFFFFFFFFFFFFFLL / v35 < v33)
  {
    v120 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v121 = std::bad_alloc::bad_alloc(v120);
    __cxa_throw(v121, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v148, v35 * v33, v33, v35);
  v147 = 0;
  iterator = turi::ml_data::get_iterator((turi::ml_data *)*(_QWORD *)(a1 + 32), v4, v5, (uint64_t)v134);
  v38 = v128;
  if (v140 != v139)
  {
    v127 = (uint64_t **)(v128 + 440);
    v125 = a1;
    v124 = v4;
    do
    {
      v39 = v142;
      if (*(_BYTE *)(v142 + 16))
        v40 = *(_BYTE *)(v142 + 17) == 0;
      else
        v40 = 1;
      if (v40)
      {
        v41 = 0;
      }
      else
      {
        if (*(_BYTE *)(v142 + 18))
          v42 = (_QWORD *)(v142 + 24);
        else
          v42 = (_QWORD *)(*(_QWORD *)(v142 + 96) + 8 * v144);
        v41 = *(_QWORD *)(*(_QWORD *)(v142 + 96) + 8 * v144 + 8 * *v42 - 8);
      }
      v147 = v41;
      if (v41 < *(_QWORD *)(v38 + 408))
      {
        v43 = v143;
        if (v143)
        {
          p_shared_owners = (unint64_t *)&v143->__shared_owners_;
          do
            v45 = __ldxr(p_shared_owners);
          while (__stxr(v45 + 1, p_shared_owners));
        }
        v126 = v43;
        *(_QWORD *)&v159 = 0;
        if (v146)
        {
          v129 = *(_QWORD *)(v39 + 56);
          if (v129)
          {
            v46 = 0;
            v47 = 0;
            v48 = (uint64_t *)(*(_QWORD *)(v39 + 96) + 8 * v144 + 8 * (*(_BYTE *)(v39 + 18) == 0));
            do
            {
              v49 = *(_QWORD *)(*(_QWORD *)(v39 + 72) + 16 * v46);
              v50 = *(_QWORD *)(v49 + 64);
              switch(*(_DWORD *)(v49 + 24))
              {
                case 0:
                  v51 = *v48++;
                  v52 = v51;
                  if (v50)
                  {
                    v130 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v158, (int)v47, &v130) = v52;
                  }
                  goto LABEL_78;
                case 1:
                  v64 = *v48++;
                  v63 = v64;
                  if (v64 < v50 && v63 != 0)
                  {
                    v130 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v158, (int)v63 + (int)v47 - 1, &v130) = 0x3FF0000000000000;
                  }
                  goto LABEL_73;
                case 2:
                  v53 = *(_QWORD *)(v49 + 72);
                  if (v53)
                  {
                    v54 = 0;
                    v55 = v47 << 32;
                    do
                    {
                      v56 = *v48++;
                      v57 = v56;
                      if (v54 < v50)
                      {
                        v130 = 0;
                        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v158, v55 >> 32, &v130) = v57;
                      }
                      ++v54;
                      v55 += 0x100000000;
                    }
                    while (v53 != v54);
                  }
                  goto LABEL_60;
                case 3:
                  v67 = *v48++;
                  for (i = v67; i; --i)
                  {
                    v68 = *v48;
                    if (*v48 < v50 && v68 != 0)
                    {
                      v130 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v158, (int)v68 + (int)v47 - 1, &v130) = 0x3FF0000000000000;
                    }
                    ++v48;
                  }
LABEL_73:
                  v47 = v50 + v47 - 1;
                  break;
                case 4:
                  v71 = *v48++;
                  for (j = v71; j; --j)
                  {
                    v72 = *v48;
                    if (*v48 < v50)
                    {
                      v73 = v48[1];
                      v130 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v158, (int)v72 + (int)v47, &v130) = v73;
                    }
                    v48 += 2;
                  }
LABEL_78:
                  v47 += v50;
                  break;
                case 7:
                  v58 = *(_QWORD *)(v49 + 72);
                  if (v58)
                  {
                    v59 = 0;
                    v60 = v47 << 32;
                    do
                    {
                      v61 = *v48++;
                      v62 = v61;
                      if (v59 < v50)
                      {
                        v130 = 0;
                        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v158, v60 >> 32, &v130) = v62;
                      }
                      ++v59;
                      v60 += 0x100000000;
                    }
                    while (v58 != v59);
                  }
LABEL_60:
                  v47 += v50;
                  break;
                default:
                  break;
              }
              ++v46;
            }
            while (v46 != v129);
          }
        }
        if (v126)
        {
          v74 = (unint64_t *)&v126->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v126->__on_zero_shared)(v126, iterator);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        v76 = **(_DWORD **)(v125 + 8) - 1;
        v130 = 0;
        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v158, v76, &v130) = 0x3FF0000000000000;
        if (*(_BYTE *)(v128 + 480))
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v128 + 464) + 40))(*(_QWORD *)(v128 + 464), &v157);
        if (*(_BYTE *)(v142 + 16))
          v77 = *(_BYTE *)(v142 + 17) == 0;
        else
          v77 = 1;
        if (v77)
        {
          v78 = 0;
        }
        else
        {
          v79 = (_QWORD *)(v142 + 24);
          if (!*(_BYTE *)(v142 + 18))
            v79 = (_QWORD *)(*(_QWORD *)(v142 + 96) + 8 * v144);
          v78 = *(_QWORD *)(*(_QWORD *)(v142 + 96) + 8 * v144 + 8 * *v79 - 8);
        }
        v147 = v78;
        v130 = (float64x2_t *)&v148;
        *(_QWORD *)&v131 = &v157;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(&v155, &v130);
        v80 = v155;
        if (v147)
          v81 = v155[v147 - 1];
        else
          v81 = 0.0;
        v82 = v156;
        if (v154 != v156)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v153, v156, 1);
          v82 = v154;
        }
        v83 = v153;
        if (v82 >= 1)
        {
          v84 = (long double *)v153;
          v85 = v82;
          do
          {
            v86 = *v80++;
            *v84++ = exp(v86);
            --v85;
          }
          while (v85);
        }
        if (v82)
        {
          v130 = v83;
          *((_QWORD *)&v131 + 1) = &v153;
          v38 = v128;
          v87 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run(&v130);
          v83 = v153;
        }
        else
        {
          v87 = 0.0;
          v38 = v128;
        }
        v88 = log1p(v87);
        v89 = v154;
        if (v152 != v154)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v151, v154, 1);
          v89 = v152;
        }
        v90 = v87 + 1.0;
        v91 = v151;
        if (v89 >= 0)
          v92 = v89;
        else
          v92 = v89 + 1;
        v93 = v92 & 0xFFFFFFFFFFFFFFFELL;
        if (v89 >= 2)
        {
          v94 = 0;
          v95 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v90, 0);
          v96 = (float64x2_t *)v151;
          v97 = v83;
          do
          {
            v98 = *v97++;
            *v96++ = vdivq_f64(v98, v95);
            v94 += 2;
          }
          while (v94 < v93);
        }
        v99 = __OFSUB__(v89, v93);
        v100 = v89 - v93;
        if (!((v100 < 0) ^ v99 | (v100 == 0)))
        {
          v101 = v92 >> 1;
          f64 = v83[v92 >> 1].f64;
          v103 = &v91[2 * v101];
          do
          {
            v104 = *f64++;
            *v103++ = v104 / v90;
            --v100;
          }
          while (v100);
        }
        v105 = *(_QWORD *)(v38 + 424);
        LOBYTE(v130) = 0;
        v131 = 0u;
        v132 = 0u;
        v133 = v105;
        if (v147)
          v151[v147 - 1] = v151[v147 - 1] + -1.0;
        turi::supervised::flattened_sparse_vector_outer_prod(&v157, &v151, (uint64_t)&v130);
        v161[0] = &v147;
        v106 = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v127, &v147, (uint64_t)&std::piecewise_construct, v161);
        v107 = v132;
        if ((uint64_t)v132 >= 1)
        {
          v108 = *((float *)v106 + 10);
          v109 = (double *)v131;
          do
          {
            *v109 = *v109 * v108;
            ++v109;
            --v107;
          }
          while (v107);
        }
        turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(**(_QWORD **)(v125 + 40) + 16 * v124), &v130);
        v161[0] = &v147;
        *(double *)(**(_QWORD **)(v125 + 48) + 8 * v124) = *(double *)(**(_QWORD **)(v125 + 48) + 8 * v124)
                                                         + *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v127, &v147, (uint64_t)&std::piecewise_construct, v161)+ 10)* (v88 - v81);
        Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v131);
      }
      if (v146 | v136)
      {
        v110 = (uint64_t *)(*(_QWORD *)(v142 + 96) + 8 * v144);
        if (v137)
          v110 = &v138;
        v144 += *v110;
      }
      v111 = v140 + 1;
      v112 = v139;
      v113 = ++v140 - v135 * v141;
      v145 = v113;
      if (v113 == v135 && v111 != v139)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v134);
        v112 = v139;
        v111 = v140;
      }
    }
    while (v111 != v112);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v134);
  free(v148);
  free(v151);
  free(v153);
  free(v155);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v158);
}

void sub_218588590(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  free(*(void **)(v2 - 248));
  free(*(void **)(v2 - 232));
  free(*(void **)(v2 - 216));
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  void **v32;

  v27 = 0;
  v28 = 0;
  v4 = *(_QWORD *)(*a2 + 16);
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v27, v4, 1);
    v5 = (char *)v27;
    v6 = v28;
    v7 = a2[1];
    if (v28 >= 0)
      v8 = v28;
    else
      v8 = v28 + 1;
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v28 >= 2)
    {
      v10 = 2;
      if (v9 > 2)
        v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      bzero(v27, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6)
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
  }
  else
  {
    v7 = a2[1];
  }
  v11 = *a2;
  v31[1] = v7;
  v32 = &v27;
  v31[0] = 0;
  v29 = 0x3FF0000000000000;
  v30 = v11;
  Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run((uint64_t)v31, (uint64_t)&v30, (uint64_t **)&v32, (double *)&v29);
  v13 = (__int128 *)v27;
  v12 = v28;
  if (a1[1] != v28)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v28, 1);
    v12 = a1[1];
  }
  v14 = (_OWORD *)*a1;
  if (v12 >= 0)
    v15 = v12;
  else
    v15 = v12 + 1;
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v17 = 0;
    v18 = (_OWORD *)*a1;
    v19 = v13;
    do
    {
      v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  v21 = __OFSUB__(v12, v16);
  v22 = v12 - v16;
  if (!((v22 < 0) ^ v21 | (v22 == 0)))
  {
    v23 = v15 >> 1;
    v24 = (uint64_t *)&v13[v15 >> 1];
    v25 = &v14[v23];
    do
    {
      v26 = *v24++;
      *v25++ = v26;
      --v22;
    }
    while (v22);
  }
  free(v27);
}

void sub_21858881C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24D9498C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D9498C0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  void **v17;
  void *v18;
  __int128 **v19;
  __int128 *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  _OWORD *v26;
  __int128 *v27;
  __int128 v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  int64_t v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  _QWORD *v85;
  double *v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  long double *v90;
  long double v91;
  double v92;
  float64x2_t *v93;
  uint64_t v94;
  double v95;
  char *v96;
  uint64_t v97;
  int64_t v98;
  int64_t v99;
  float64x2_t v100;
  float64x2_t *v101;
  float64x2_t *v102;
  float64x2_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  double *f64;
  double *v108;
  double v109;
  double *v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  double *v114;
  double v115;
  double v116;
  double v117;
  char *v118;
  float64x2_t **v119;
  float64x2_t *v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  int64_t v124;
  float64x2_t *v125;
  float64x2_t *v126;
  float64x2_t v127;
  uint64_t v128;
  uint64_t v129;
  double *v130;
  double *v131;
  double v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t **v135;
  double v136;
  _QWORD *v137;
  void **v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::bad_alloc *exception;
  std::bad_alloc *v147;
  std::bad_alloc *v148;
  std::bad_alloc *v149;
  std::bad_alloc *v150;
  std::bad_alloc *v151;
  std::bad_alloc *v152;
  std::bad_alloc *v153;
  std::bad_alloc *v154;
  std::bad_alloc *v155;
  std::bad_alloc *v156;
  std::bad_alloc *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t *v164;
  void *v165[3];
  void *v166;
  _BYTE v167[128];
  uint64_t v168;
  unsigned __int8 v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  void **v187;
  void *v188;
  unint64_t v189;
  void *v190;
  unint64_t v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  char v195;
  _QWORD v196[4];
  _QWORD v197[3];
  _QWORD *v198[5];
  void **v199;
  void **v200;
  void **v201;
  double v202;
  void **v203;
  void **v204;
  uint64_t v205;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  v6 = *(unint64_t **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v194 = 0;
  v193 = 0;
  v8 = *v6;
  if (*v6)
  {
    if (v8 >> 61 || (v9 = malloc_type_malloc(8 * v8, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v147 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v147, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v193 = v9;
  }
  v194 = v8;
  v192 = 0;
  v10 = *(_QWORD *)(v7 + 408);
  v191 = 0;
  v190 = 0;
  v11 = v10 - 1;
  if (v10 == 1)
  {
    v189 = 0;
    v188 = 0;
LABEL_16:
    v17 = 0;
    v189 = 0;
    v186 = 0;
    v187 = 0;
    goto LABEL_17;
  }
  if (v11 >> 61 || (v12 = malloc_type_malloc(8 * v11, 0x1E76AA36uLL)) == 0)
  {
    v148 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v149 = std::bad_alloc::bad_alloc(v148);
    __cxa_throw(v149, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v13 = *(_QWORD *)(v7 + 408);
  v190 = v12;
  v191 = v11;
  v189 = 0;
  v188 = 0;
  v14 = v13 - 1;
  if (v13 == 1)
    goto LABEL_16;
  if (v14 >> 61 || (v15 = malloc_type_malloc(8 * v14, 0x1E76AA36uLL)) == 0)
  {
    v150 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v151 = std::bad_alloc::bad_alloc(v150);
    __cxa_throw(v151, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v16 = *(_QWORD *)(v7 + 408);
  v188 = v15;
  v189 = v14;
  v186 = 0;
  v187 = 0;
  v17 = (void **)(v16 - 1);
  if (v16 != 1)
  {
    if ((unint64_t)v17 >> 61 || (v18 = malloc_type_malloc(8 * (_QWORD)v17, 0x1E76AA36uLL)) == 0)
    {
      v156 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v157 = std::bad_alloc::bad_alloc(v156);
      __cxa_throw(v157, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v186 = v18;
  }
LABEL_17:
  v187 = v17;
  v19 = *(__int128 ***)(a1 + 24);
  v184 = 0;
  v185 = 0;
  v183 = 0;
  v20 = *v19;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v183, (unint64_t)v19[1], (uint64_t)v19[1], 1);
  v21 = (char *)v183;
  v22 = v184 * v185;
  if (v184 * v185 >= 0)
    v23 = v184 * v185;
  else
    v23 = v22 + 1;
  v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (v22 >= 2)
  {
    v25 = 0;
    v26 = v183;
    v27 = v20;
    do
    {
      v28 = *v27++;
      *v26++ = v28;
      v25 += 2;
    }
    while (v25 < v24);
  }
  v29 = v22 <= v24;
  v30 = v22 - v24;
  if (!v29)
  {
    v31 = v23 >> 1;
    v32 = (uint64_t *)&v20[v23 >> 1];
    v33 = &v21[16 * v31];
    do
    {
      v34 = *v32++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      --v30;
    }
    while (v30);
  }
  v35 = **(_QWORD **)(a1 + 8);
  v36 = *(_QWORD *)(v7 + 408);
  v37 = v36 - 1;
  if (v35)
    v38 = v36 == 1;
  else
    v38 = 1;
  if (!v38 && 0x7FFFFFFFFFFFFFFFLL / v37 < v35)
  {
    v154 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v155 = std::bad_alloc::bad_alloc(v154);
    __cxa_throw(v155, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v183, v37 * v35, v35, v37);
  v39 = *(_QWORD *)(v7 + 408);
  v181 = 0;
  v182 = 0;
  v180 = 0;
  v40 = v39 - 1;
  if (v39 != 1 && 0x7FFFFFFFFFFFFFFFLL / v40 < v40)
  {
    v152 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v153 = std::bad_alloc::bad_alloc(v152);
    __cxa_throw(v153, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v180, v40 * v40, v40, v40);
  turi::ml_data::get_iterator((turi::ml_data *)(v7 + 8), v4, v5, (uint64_t)v167);
  if (v173 != v172)
  {
    do
    {
      v42 = v175;
      v41 = v176;
      if (v176)
      {
        p_shared_owners = (unint64_t *)&v176->__shared_owners_;
        do
          v44 = __ldxr(p_shared_owners);
        while (__stxr(v44 + 1, p_shared_owners));
      }
      v163 = v41;
      v160 = v177;
      v161 = v179;
      v45 = v194;
      v46 = (char *)v193;
      if (v194 >= 0)
        v47 = v194;
      else
        v47 = v194 + 1;
      v48 = v47 & 0xFFFFFFFFFFFFFFFELL;
      if (v194 >= 2)
      {
        v158 = v47;
        v159 = v42;
        v49 = 2;
        if (v48 > 2)
          v49 = v48;
        bzero(v193, ((8 * v49 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        v47 = v158;
        v42 = v159;
      }
      if (v48 < v45)
      {
        v50 = v42;
        bzero(&v46[16 * (v47 >> 1)], 8 * v45 - 16 * (v47 >> 1));
        v42 = v50;
      }
      if (v161)
      {
        v51 = *(_QWORD *)(v42 + 56);
        if (v51)
        {
          v52 = 0;
          v53 = 0;
          v54 = (unint64_t *)(*(_QWORD *)(v42 + 96) + 8 * v160 + 8 * (*(_BYTE *)(v42 + 18) == 0));
          v55 = *(_QWORD *)(v42 + 72);
          v56 = v193;
          do
          {
            v57 = *(_QWORD *)(v55 + 16 * v52);
            v58 = *(_QWORD *)(v57 + 64);
            switch(*(_DWORD *)(v57 + 24))
            {
              case 0:
                if (v58)
                  v56[v53] = *v54;
                ++v54;
                goto LABEL_78;
              case 1:
                v67 = *v54++;
                v66 = v67;
                --v53;
                if (v67 < v58 && v66 != 0)
                  v56[v66 + v53] = 0x3FF0000000000000;
                goto LABEL_78;
              case 2:
                v59 = *(_QWORD *)(v57 + 72);
                if (!v59)
                  goto LABEL_78;
                v60 = 0;
                v61 = 0;
                v62 = (char *)v193 + 8 * v53;
                do
                {
                  if (v61 < v58)
                    *(_QWORD *)&v62[8 * v61] = v54[v61];
                  ++v61;
                  v60 -= 8;
                }
                while (v59 != v61);
                break;
              case 3:
                v70 = *v54++;
                v69 = v70;
                --v53;
                if (v70)
                {
                  v71 = v193;
                  do
                  {
                    v72 = *v54;
                    if (*v54 < v58 && v72 != 0)
                      v71[v72 + v53] = 0x3FF0000000000000;
                    ++v54;
                    --v69;
                  }
                  while (v69);
                }
                goto LABEL_78;
              case 4:
                v76 = *v54;
                v74 = v54 + 1;
                v75 = v76;
                if (v76)
                {
                  v77 = v193;
                  v78 = v74;
                  do
                  {
                    v80 = *v78;
                    v78 += 2;
                    v79 = v80;
                    if (v80 < v58)
                      v77[v79 + v53] = v74[1];
                    v74 = v78;
                    --v75;
                  }
                  while (v75);
                }
                else
                {
                  v78 = v74;
                }
                v53 += v58;
                v54 = v78;
                goto LABEL_79;
              case 7:
                v63 = *(_QWORD *)(v57 + 72);
                if (!v63)
                  goto LABEL_78;
                v60 = 0;
                v64 = 0;
                v65 = (char *)v193 + 8 * v53;
                do
                {
                  if (v64 < v58)
                    *(_QWORD *)&v65[8 * v64] = v54[v64];
                  ++v64;
                  v60 -= 8;
                }
                while (v63 != v64);
                break;
              default:
                goto LABEL_79;
            }
            v54 = (unint64_t *)((char *)v54 - v60);
LABEL_78:
            v53 += v58;
LABEL_79:
            ++v52;
          }
          while (v52 != v51);
        }
      }
      if (v163)
      {
        v81 = (unint64_t *)&v163->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      *((_QWORD *)v193 + **(_QWORD **)(a1 + 8) - 1) = 0x3FF0000000000000;
      if (*(_BYTE *)(v7 + 480))
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v7 + 464) + 16))(*(_QWORD *)(v7 + 464), &v193);
      if (*(_BYTE *)(v175 + 16))
        v83 = *(_BYTE *)(v175 + 17) == 0;
      else
        v83 = 1;
      if (v83)
      {
        v84 = 0;
      }
      else
      {
        v85 = (_QWORD *)(v175 + 24);
        if (!*(_BYTE *)(v175 + 18))
          v85 = (_QWORD *)(*(_QWORD *)(v175 + 96) + 8 * v177);
        v84 = *(_QWORD *)(*(_QWORD *)(v175 + 96) + 8 * v177 + 8 * *v85 - 8);
      }
      v192 = v84;
      v199 = &v183;
      v200 = &v193;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(&v190, (uint64_t **)&v199);
      v86 = (double *)v190;
      if (v192)
        v87 = *((double *)v190 + v192 - 1);
      else
        v87 = 0.0;
      v88 = v191;
      if (v189 != v191)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v188, v191, 1);
        v88 = v189;
      }
      v162 = v88;
      v164 = (uint64_t *)v188;
      if (v88 >= 1)
      {
        v89 = v88;
        v90 = (long double *)v188;
        do
        {
          v91 = *v86++;
          *v90++ = exp(v91);
          --v89;
        }
        while (v89);
      }
      if (v162)
      {
        v199 = (void **)v164;
        v201 = &v188;
        v92 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v199);
        v93 = (float64x2_t *)v188;
      }
      else
      {
        v92 = 0.0;
        v93 = (float64x2_t *)v164;
      }
      v94 = v189;
      if (v187 != (void **)v189)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v186, v189, 1);
        v94 = (uint64_t)v187;
      }
      v95 = v92 + 1.0;
      v96 = (char *)v186;
      if (v94 >= 0)
        v97 = v94;
      else
        v97 = v94 + 1;
      v98 = v97 & 0xFFFFFFFFFFFFFFFELL;
      if (v94 >= 2)
      {
        v99 = 0;
        v100 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v95, 0);
        v101 = (float64x2_t *)v186;
        v102 = v93;
        do
        {
          v103 = *v102++;
          *v101++ = vdivq_f64(v103, v100);
          v99 += 2;
        }
        while (v99 < v98);
      }
      v104 = __OFSUB__(v94, v98);
      v105 = v94 - v98;
      if (!((v105 < 0) ^ v104 | (v105 == 0)))
      {
        v106 = v97 >> 1;
        f64 = v93[v97 >> 1].f64;
        v108 = (double *)&v96[16 * v106];
        do
        {
          v109 = *f64++;
          *v108++ = v109 / v95;
          --v105;
        }
        while (v105);
      }
      v199 = &v186;
      v201 = &v186;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(&v180, (float64x2_t ***)&v199);
      v110 = (double *)v186;
      v111 = v182;
      if (v182 >= v181)
        v111 = v181;
      if (v111 >= 1)
      {
        v112 = (double *)v180;
        v113 = 8 * v181 + 8;
        v114 = (double *)v186;
        do
        {
          v115 = *v114++;
          *v112 = v115 + *v112;
          v112 = (double *)((char *)v112 + v113);
          --v111;
        }
        while (v111);
      }
      v116 = log1p(v92);
      if (v192)
        v110[v192 - 1] = v110[v192 - 1] + -1.0;
      v199 = (void **)&v192;
      *(double *)(**(_QWORD **)(a1 + 32) + 8 * v4) = *(double *)(**(_QWORD **)(a1 + 32) + 8 * v4)
                                                   + *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t **)(v7 + 440), &v192, (uint64_t)&std::piecewise_construct, &v199)+ 10)* (v116 - v87);
      v198[0] = &v192;
      v117 = *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t **)(v7 + 440), &v192, (uint64_t)&std::piecewise_construct, v198)+ 10);
      v200 = (void **)v194;
      v201 = v187;
      v202 = v117;
      v203 = &v193;
      v204 = &v186;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(&v166, &v199);
      v118 = (char *)v166;
      v119 = (float64x2_t **)(**(_QWORD **)(a1 + 40) + 16 * v4);
      v120 = *v119;
      v121 = (uint64_t)v119[1];
      if (v121 >= 0)
        v122 = (uint64_t)v119[1];
      else
        v122 = v121 + 1;
      v123 = v122 & 0xFFFFFFFFFFFFFFFELL;
      if (v121 >= 2)
      {
        v124 = 0;
        v125 = v120;
        v126 = (float64x2_t *)v166;
        do
        {
          v127 = *v126++;
          *v125 = vaddq_f64(v127, *v125);
          ++v125;
          v124 += 2;
        }
        while (v124 < v123);
      }
      v29 = v121 <= v123;
      v128 = v121 - v123;
      if (!v29)
      {
        v129 = v122 >> 1;
        v130 = (double *)&v118[16 * v129];
        v131 = v120[v129].f64;
        do
        {
          v132 = *v130++;
          *v131 = v132 + *v131;
          ++v131;
          --v128;
        }
        while (v128);
      }
      v199 = &v193;
      v200 = &v193;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>>(v165, (uint64_t **)&v199);
      if (*(_QWORD *)(v7 + 408) != 1)
      {
        v133 = 0;
        do
        {
          v134 = 0;
          do
          {
            v199 = (void **)&v192;
            v135 = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t **)(v7 + 440), &v192, (uint64_t)&std::piecewise_construct, &v199);
            v136 = *((double *)v180 + v133 + v181 * v134) * *((float *)v135 + 10);
            v137 = (_QWORD *)(**(_QWORD **)(a1 + 48) + 24 * v4);
            v138 = **(void ****)(a1 + 8);
            v139 = v137[1];
            v199 = (void **)(*v137 + 8 * (_QWORD)v138 * v133 + 8 * v139 * (_QWORD)v138 * v134);
            v200 = v138;
            v201 = v138;
            v202 = *(double *)&v137;
            v203 = (void **)((_QWORD)v138 * v133);
            v204 = (void **)((_QWORD)v138 * v134);
            v205 = v139;
            v198[1] = *(_QWORD **)&v136;
            v198[3] = (_QWORD *)v165[0];
            v198[4] = (_QWORD *)v165[1];
            v197[0] = v199;
            v197[2] = v139;
            v196[0] = v197;
            v196[1] = v198;
            v196[2] = &v195;
            v196[3] = &v199;
            Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,-1,0,-1,-1> const>>,Eigen::internal::add_assign_op<double,double>,0>,4,0>::run(v196);
            ++v134;
            v140 = *(_QWORD *)(v7 + 408) - 1;
          }
          while (v134 < v140);
          ++v133;
        }
        while (v133 < v140);
      }
      free(v165[0]);
      free(v166);
      if (v179 | v169)
      {
        v141 = (uint64_t *)(*(_QWORD *)(v175 + 96) + 8 * v177);
        if (v170)
          v141 = &v171;
        v177 += *v141;
      }
      v142 = v173 + 1;
      v143 = v172;
      v144 = ++v173 - v168 * v174;
      v178 = v144;
      if (v144 == v168 && v142 != v172)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v167);
        v143 = v172;
        v142 = v173;
      }
    }
    while (v142 != v143);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v167);
  free(v180);
  free(v183);
  free(v186);
  free(v188);
  free(v190);
  free(v193);
}

void sub_2185893EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;

  free(a72);
  free((void *)STACK[0x208]);
  free((void *)STACK[0x218]);
  free((void *)STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(_QWORD *a1, float64x2_t ***a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  std::bad_alloc *v27;
  std::bad_alloc *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v30 = 0;
  v31 = 0;
  v29 = 0;
  v4 = (uint64_t)(*a2)[1];
  v5 = (uint64_t **)(a2 + 2);
  v6 = (uint64_t)a2[2][1];
  if (v4 | v6)
  {
    if (v4)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v29, v6 * v4, v4, v6);
  }
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(&v29, a2, v5, (uint64_t)&v32);
  v9 = (__int128 *)v29;
  v8 = v30;
  v10 = v31;
  if (a1[1] != v30 || a1[2] != v31)
  {
    if (v30 && v31 && 0x7FFFFFFFFFFFFFFFLL / v31 < v30)
    {
      v27 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v28 = std::bad_alloc::bad_alloc(v27);
      __cxa_throw(v28, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v31 * v30, v30, v31);
    v8 = a1[1];
    v10 = a1[2];
  }
  v11 = (_OWORD *)*a1;
  v12 = v8 * v10;
  if (v8 * v10 >= 0)
    v13 = v8 * v10;
  else
    v13 = v12 + 1;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v15 = 0;
    v16 = (_OWORD *)*a1;
    v17 = v9;
    do
    {
      v18 = *v17++;
      *v16++ = v18;
      v15 += 2;
    }
    while (v15 < v14);
  }
  v19 = v12 <= v14;
  v20 = v12 - v14;
  if (!v19)
  {
    v21 = v13 >> 1;
    v22 = (uint64_t *)&v9[v13 >> 1];
    v23 = &v11[v21];
    do
    {
      v24 = *v22++;
      *v23++ = v24;
      --v20;
    }
    while (v20);
  }
  free(v29);
}

void sub_218589678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(_QWORD *a1, float64x2_t ***a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v6;
  float64x2_t **v7;
  uint64_t v8;
  float64x2_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  double *f64;
  double *v24;
  double v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[7];
  void *v31;
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = **a3;
  v31 = 0;
  v32 = 0;
  v7 = *a2;
  v8 = (uint64_t)(*a2)[1];
  if (v8)
  {
    v9 = *v7;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v31, v8, 1);
    v10 = (char *)v31;
    v11 = v32;
    if (v32 >= 0)
      v12 = v32;
    else
      v12 = v32 + 1;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (v32 >= 2)
    {
      v14 = 0;
      v15 = (float64x2_t *)v31;
      v16 = v9;
      do
      {
        v17 = *v16++;
        *v15++ = vnegq_f64(v17);
        v14 += 2;
      }
      while (v14 < v13);
    }
    v20 = __OFSUB__(v11, v13);
    v18 = v11 == v13;
    v19 = v11 - v13 < 0;
    v21 = v11 - v13;
    if (!(v19 ^ v20 | v18))
    {
      v22 = v12 >> 1;
      f64 = v9[v12 >> 1].f64;
      v24 = (double *)&v10[16 * v22];
      do
      {
        v25 = *f64++;
        *v24++ = -v25;
        --v21;
      }
      while (v21);
    }
  }
  v26 = a1[2];
  if (v26 >= 1)
  {
    for (i = 0; i != v26; ++i)
    {
      v28 = a1[1];
      v30[0] = *a1 + 8 * v28 * i;
      v30[1] = v28;
      v30[3] = a1;
      v30[4] = 0;
      v30[5] = i;
      v30[6] = v28;
      v29 = *(_QWORD *)(v6 + 8 * i);
      v34 = v32;
      v35 = v29;
      v36 = &v31;
      Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set::operator()<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(a4, v30, (uint64_t)v33);
    }
  }
  free(v31);
}

void sub_2185897E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  free(a16);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>>(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;
  char v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (*a2)[1];
  v5 = a2 + 1;
  v6 = a2[1][1];
  if (v4)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v4)
    goto LABEL_17;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v6 * v4, v4, v6);
  v8 = (uint64_t)*a2;
  v9 = (*a2)[1];
  v10 = a2[1][1];
  if (a1[1] != v9 || a1[2] != v10)
  {
    if (v9)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (v12 || 0x7FFFFFFFFFFFFFFFLL / v10 >= v9)
    {
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v10 * v9, v9, v10);
      v8 = (uint64_t)*a2;
      goto LABEL_16;
    }
LABEL_17:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
LABEL_16:
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(a1, v8, v5, (uint64_t)&v16);
  return a1;
}

void sub_2185898F4(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24D949940;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D949940;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  __int128 **v15;
  __int128 *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  _OWORD *v22;
  __int128 *v23;
  __int128 v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  __n128 iterator;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t i;
  uint64_t v65;
  uint64_t v66;
  uint64_t j;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  _QWORD *v77;
  double *v78;
  double v79;
  uint64_t v80;
  void **v81;
  long double *v82;
  uint64_t v83;
  long double v84;
  double v85;
  uint64_t v86;
  double v87;
  char *v88;
  uint64_t v89;
  int64_t v90;
  int64_t v91;
  float64x2_t v92;
  float64x2_t *v93;
  float64x2_t *v94;
  float64x2_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  double *v99;
  double *v100;
  double v101;
  double *v102;
  uint64_t v103;
  double *v104;
  uint64_t v105;
  double *v106;
  double v107;
  double v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  __int128 v122;
  int *v123;
  double *v124;
  uint64_t **v125;
  double v126;
  double v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::bad_alloc *exception;
  std::bad_alloc *v138;
  std::bad_alloc *v139;
  std::bad_alloc *v140;
  std::bad_alloc *v141;
  std::bad_alloc *v142;
  std::bad_alloc *v143;
  std::bad_alloc *v144;
  std::bad_alloc *v145;
  std::bad_alloc *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  unint64_t v150;
  char v152[8];
  uint64_t *v153;
  uint64_t v154;
  double v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  _BYTE v160[128];
  uint64_t v161;
  unsigned __int8 v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  void *v181;
  unint64_t v182;
  double *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  void **v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;

  v150 = *a2;
  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = **(_QWORD **)(a1 + 8);
  LOBYTE(v186) = 0;
  v147 = v4;
  v187 = 0u;
  v188 = 0u;
  v189 = v5;
  v184 = 0;
  v185 = 0;
  v6 = *(_QWORD *)(v4 + 408);
  v183 = 0;
  v7 = v6 - 1;
  if (v6 == 1)
  {
    v182 = 0;
    v181 = 0;
LABEL_12:
    v13 = 0;
    v182 = 0;
    v180 = 0;
    v179 = 0;
    goto LABEL_13;
  }
  if (v7 >> 61 || (v8 = (double *)malloc_type_malloc(8 * v7, 0x1E76AA36uLL)) == 0)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v138 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v138, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v9 = *(_QWORD *)(v147 + 408);
  v183 = v8;
  v184 = v7;
  v182 = 0;
  v181 = 0;
  v10 = v9 - 1;
  if (v9 == 1)
    goto LABEL_12;
  if (v10 >> 61 || (v11 = malloc_type_malloc(8 * v10, 0x1E76AA36uLL)) == 0)
  {
    v139 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v140 = std::bad_alloc::bad_alloc(v139);
    __cxa_throw(v140, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v12 = *(_QWORD *)(v147 + 408);
  v181 = v11;
  v182 = v10;
  v180 = 0;
  v179 = 0;
  v13 = v12 - 1;
  if (v12 != 1)
  {
    if (v13 >> 61 || (v14 = malloc_type_malloc(8 * v13, 0x1E76AA36uLL)) == 0)
    {
      v145 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v146 = std::bad_alloc::bad_alloc(v145);
      __cxa_throw(v146, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v179 = v14;
  }
LABEL_13:
  v180 = v13;
  v15 = *(__int128 ***)(a1 + 24);
  v178 = 0;
  v176 = 0;
  v177 = 0;
  v16 = *v15;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v176, (unint64_t)v15[1], (uint64_t)v15[1], 1);
  v17 = (char *)v176;
  v18 = v177 * v178;
  if (v177 * v178 >= 0)
    v19 = v177 * v178;
  else
    v19 = v18 + 1;
  v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
  if (v18 >= 2)
  {
    v21 = 0;
    v22 = v176;
    v23 = v16;
    do
    {
      v24 = *v23++;
      *v22++ = v24;
      v21 += 2;
    }
    while (v21 < v20);
  }
  v25 = v18 <= v20;
  v26 = v18 - v20;
  if (!v25)
  {
    v27 = v19 >> 1;
    v28 = (uint64_t *)&v16[v19 >> 1];
    v29 = &v17[16 * v27];
    do
    {
      v30 = *v28++;
      *(_QWORD *)v29 = v30;
      v29 += 8;
      --v26;
    }
    while (v26);
  }
  v31 = **(_QWORD **)(a1 + 8);
  v32 = *(_QWORD *)(v147 + 408);
  v33 = v32 - 1;
  if (v31)
    v34 = v32 == 1;
  else
    v34 = 1;
  if (!v34 && 0x7FFFFFFFFFFFFFFFLL / v33 < v31)
  {
    v143 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v144 = std::bad_alloc::bad_alloc(v143);
    __cxa_throw(v144, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v176, v33 * v31, v31, v33);
  v35 = *(_QWORD *)(v147 + 408);
  v175 = 0;
  v173 = 0;
  v174 = 0;
  v36 = v35 - 1;
  if (v35 != 1 && 0x7FFFFFFFFFFFFFFFLL / v36 < v36)
  {
    v141 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v142 = std::bad_alloc::bad_alloc(v141);
    __cxa_throw(v142, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v173, v36 * v36, v36, v36);
  iterator = turi::ml_data::get_iterator((turi::ml_data *)(v147 + 8), v150, v3, (uint64_t)v160);
  if (v166 != v165)
  {
    v149 = (uint64_t **)(v147 + 440);
    do
    {
      v40 = v168;
      v39 = v169;
      if (v169)
      {
        p_shared_owners = (unint64_t *)&v169->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
      *(_QWORD *)&v188 = 0;
      if (v172)
      {
        v43 = *(_QWORD *)(v40 + 56);
        if (v43)
        {
          v44 = 0;
          v45 = 0;
          v46 = (uint64_t *)(*(_QWORD *)(v40 + 96) + 8 * v170 + 8 * (*(_BYTE *)(v40 + 18) == 0));
          do
          {
            v47 = *(_QWORD *)(*(_QWORD *)(v40 + 72) + 16 * v44);
            v48 = *(_QWORD *)(v47 + 64);
            switch(*(_DWORD *)(v47 + 24))
            {
              case 0:
                v49 = *v46++;
                v50 = v49;
                if (v48)
                {
                  v190 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v187, (int)v45, &v190) = v50;
                }
                goto LABEL_70;
              case 1:
                v62 = *v46++;
                v61 = v62;
                if (v62 < v48 && v61 != 0)
                {
                  v190 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v187, (int)v61 + (int)v45 - 1, &v190) = 0x3FF0000000000000;
                }
                goto LABEL_65;
              case 2:
                v51 = *(_QWORD *)(v47 + 72);
                if (v51)
                {
                  v52 = 0;
                  v53 = v45 << 32;
                  do
                  {
                    v54 = *v46++;
                    v55 = v54;
                    if (v52 < v48)
                    {
                      v190 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v187, v53 >> 32, &v190) = v55;
                    }
                    ++v52;
                    v53 += 0x100000000;
                  }
                  while (v51 != v52);
                }
                goto LABEL_52;
              case 3:
                v65 = *v46++;
                for (i = v65; i; --i)
                {
                  v66 = *v46;
                  if (*v46 < v48 && v66 != 0)
                  {
                    v190 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v187, (int)v66 + (int)v45 - 1, &v190) = 0x3FF0000000000000;
                  }
                  ++v46;
                }
LABEL_65:
                v45 = v48 + v45 - 1;
                break;
              case 4:
                v69 = *v46++;
                for (j = v69; j; --j)
                {
                  v70 = *v46;
                  if (*v46 < v48)
                  {
                    v71 = v46[1];
                    v190 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v187, (int)v70 + (int)v45, &v190) = v71;
                  }
                  v46 += 2;
                }
LABEL_70:
                v45 += v48;
                break;
              case 7:
                v56 = *(_QWORD *)(v47 + 72);
                if (v56)
                {
                  v57 = 0;
                  v58 = v45 << 32;
                  do
                  {
                    v59 = *v46++;
                    v60 = v59;
                    if (v57 < v48)
                    {
                      v190 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v187, v58 >> 32, &v190) = v60;
                    }
                    ++v57;
                    v58 += 0x100000000;
                  }
                  while (v56 != v57);
                }
LABEL_52:
                v45 += v48;
                break;
              default:
                break;
            }
            ++v44;
          }
          while (v44 != v43);
        }
      }
      if (v39)
      {
        v72 = (unint64_t *)&v39->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, iterator);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v74 = **(_DWORD **)(a1 + 8) - 1;
      v190 = 0;
      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v187, v74, &v190) = 0x3FF0000000000000;
      if (*(_BYTE *)(v147 + 480))
        (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v147 + 464) + 40))(*(_QWORD *)(v147 + 464), &v186);
      if (*(_BYTE *)(v168 + 16))
        v75 = *(_BYTE *)(v168 + 17) == 0;
      else
        v75 = 1;
      if (v75)
      {
        v76 = 0;
      }
      else
      {
        v77 = (_QWORD *)(v168 + 24);
        if (!*(_BYTE *)(v168 + 18))
          v77 = (_QWORD *)(*(_QWORD *)(v168 + 96) + 8 * v170);
        v76 = *(_QWORD *)(*(_QWORD *)(v168 + 96) + 8 * v170 + 8 * *v77 - 8);
      }
      v185 = v76;
      v190 = &v176;
      *(_QWORD *)&v191 = &v186;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(&v183, &v190);
      v78 = v183;
      if (v185)
        v79 = v183[v185 - 1];
      else
        v79 = 0.0;
      v80 = v184;
      if (v182 != v184)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v181, v184, 1);
        v80 = v182;
      }
      v81 = (void **)v181;
      if (v80 >= 1)
      {
        v82 = (long double *)v181;
        v83 = v80;
        do
        {
          v84 = *v78++;
          *v82++ = exp(v84);
          --v83;
        }
        while (v83);
      }
      if (v80)
      {
        v190 = v81;
        *((_QWORD *)&v191 + 1) = &v181;
        v85 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v190);
        v81 = (void **)v181;
      }
      else
      {
        v85 = 0.0;
      }
      v86 = v182;
      if (v180 != v182)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v179, v182, 1);
        v86 = v180;
      }
      v87 = v85 + 1.0;
      v88 = (char *)v179;
      if (v86 >= 0)
        v89 = v86;
      else
        v89 = v86 + 1;
      v90 = v89 & 0xFFFFFFFFFFFFFFFELL;
      if (v86 >= 2)
      {
        v91 = 0;
        v92 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v87, 0);
        v93 = (float64x2_t *)v179;
        v94 = (float64x2_t *)v81;
        do
        {
          v95 = *v94++;
          *v93++ = vdivq_f64(v95, v92);
          v91 += 2;
        }
        while (v91 < v90);
      }
      v96 = __OFSUB__(v86, v90);
      v97 = v86 - v90;
      if (!((v97 < 0) ^ v96 | (v97 == 0)))
      {
        v98 = v89 >> 1;
        v99 = (double *)&v81[2 * (v89 >> 1)];
        v100 = (double *)&v88[16 * v98];
        do
        {
          v101 = *v99++;
          *v100++ = v101 / v87;
          --v97;
        }
        while (v97);
      }
      v190 = &v179;
      *((_QWORD *)&v191 + 1) = &v179;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(&v173, (float64x2_t ***)&v190);
      v102 = (double *)v179;
      v103 = v175;
      if (v175 >= v174)
        v103 = v174;
      if (v103 >= 1)
      {
        v104 = (double *)v173;
        v105 = 8 * v174 + 8;
        v106 = (double *)v179;
        do
        {
          v107 = *v106++;
          *v104 = v107 + *v104;
          v104 = (double *)((char *)v104 + v105);
          --v103;
        }
        while (v103);
      }
      v108 = log1p(v85);
      v109 = *(_QWORD *)(v147 + 424);
      LOBYTE(v156) = 0;
      v157 = 0u;
      v158 = 0u;
      v159 = v109;
      if (v185)
        v102[v185 - 1] = v102[v185 - 1] + -1.0;
      turi::supervised::flattened_sparse_vector_outer_prod(&v186, &v179, (uint64_t)&v156);
      v190 = (void **)&v185;
      v110 = *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v149, &v185, (uint64_t)&std::piecewise_construct, &v190)+ 10);
      v152[0] = 0;
      v153 = &v156;
      v154 = v159;
      v155 = v110;
      LOBYTE(v190) = 0;
      v191 = 0u;
      v192 = 0u;
      v193 = v159;
      Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::SparseVector<double,0,int> const,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>,1>::run((double *)&v190, (uint64_t)v152);
      v111 = v159;
      v159 = v193;
      v193 = v111;
      v112 = v157;
      v157 = v191;
      v113 = v158;
      v158 = v192;
      v191 = v112;
      v192 = v113;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v191);
      turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(**(_QWORD **)(a1 + 32) + 16 * v150), &v156);
      v190 = (void **)&v185;
      *(double *)(**(_QWORD **)(a1 + 40) + 8 * v150) = *(double *)(**(_QWORD **)(a1 + 40) + 8 * v150)
                                                     + *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v149, &v185, (uint64_t)&std::piecewise_construct, &v190)+ 10)* (v108 - v79);
      v114 = *(_QWORD *)(v147 + 408);
      if (v114 != 1)
      {
        v115 = 0;
        do
        {
          v116 = 0;
          do
          {
            v117 = v188;
            if ((uint64_t)v188 >= 1)
            {
              v118 = 0;
              v119 = **(_QWORD **)(a1 + 8);
              v120 = v119 * v115;
              v121 = v119 * v116;
              v122 = v187;
              v123 = (int *)*((_QWORD *)&v187 + 1);
              v124 = (double *)v187;
              v148 = v188;
              while (1)
              {
                if (v117 >= 1)
                {
                  do
                  {
                    v190 = (void **)&v185;
                    v125 = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v149, &v185, (uint64_t)&std::piecewise_construct, &v190);
                    v126 = *v124++;
                    v127 = *(double *)(v122 + 8 * v118) * *((float *)v125 + 10) * v126;
                    v128 = (uint64_t *)(**(_QWORD **)(a1 + 48) + 24 * v150);
                    v129 = *v123++;
                    v130 = *v128;
                    v131 = v120 + *(int *)(*((_QWORD *)&v122 + 1) + 4 * v118) + v128[1] * (v121 + v129);
                    *(double *)(v130 + 8 * v131) = *(double *)(v130 + 8 * v131)
                                                 + v127 * *((double *)v173 + v115 + v174 * v116);
                    --v117;
                  }
                  while (v117);
                }
                if (++v118 == v148)
                  break;
                v123 = (int *)*((_QWORD *)&v187 + 1);
                v117 = v188;
                v124 = (double *)v187;
              }
              v114 = *(_QWORD *)(v147 + 408);
            }
            ++v116;
          }
          while (v116 < v114 - 1);
          ++v115;
        }
        while (v115 < v114 - 1);
      }
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v157);
      if (v172 | v162)
      {
        v132 = (uint64_t *)(*(_QWORD *)(v168 + 96) + 8 * v170);
        if (v163)
          v132 = &v164;
        v170 += *v132;
      }
      v133 = v166 + 1;
      v134 = v165;
      v135 = ++v166 - v161 * v167;
      v171 = v135;
      if (v135 == v161 && v133 != v165)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v160);
        v134 = v165;
        v133 = v166;
      }
    }
    while (v133 != v134);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v160);
  free(v173);
  free(v176);
  free(v179);
  free(v181);
  free(v183);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v187);
}

void sub_21858A4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  uint64_t v13;

  free((void *)STACK[0x248]);
  free((void *)STACK[0x258]);
  free(*(void **)(v13 - 248));
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(a13);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

double *Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::SparseVector<double,0,int> const,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>,1>::run(double *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  double *v4;
  double v5;
  double *v6;
  int *v7;
  double v8;
  double v9;
  uint64_t v10;

  v2 = *(_QWORD **)(a2 + 8);
  v3 = v2[3];
  if (v3 >= 1)
  {
    v4 = result;
    v5 = *(double *)(a2 + 32);
    v6 = (double *)v2[1];
    v7 = (int *)v2[2];
    do
    {
      v8 = *v6++;
      v9 = v5 * v8;
      v10 = *v7++;
      result = (double *)Eigen::SparseVector<double,0,int>::insert(v4, v10);
      *result = v9;
      --v3;
    }
    while (v3);
  }
  return result;
}

void __cxx_global_var_init_18_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_logistic_regression_opt_interface_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_21858A9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void turi::supervised::xgboost::init_random_forest_common_options(turi::supervised::xgboost *this, turi::option_manager *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  unsigned int v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  unsigned int v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  void *v170;
  void *v171;
  unsigned int v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  void *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  void *v199;
  void *v200;
  unsigned int v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  unsigned int **v209;
  unsigned int **v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unsigned int **v215;
  unsigned int *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  unsigned int **v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  unsigned int **v224;
  unsigned int *v225;
  unsigned int *v226;
  unsigned int v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unsigned int **v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  void *v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  void *v257;
  void *v258;
  unsigned int v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  void *v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  void *v286;
  void *v287;
  unsigned int v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  void *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  void *v315;
  void *v316;
  unsigned int v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  std::string __p;
  std::string v323;
  uint64_t v324;
  int v325;
  char v326;
  unsigned int **v327;
  char v328;
  _QWORD v329[2];
  uint64_t v330;
  int v331;
  char v332;
  uint64_t v333;
  int v334;
  char v335;
  uint64_t v336;
  int v337;
  char v338;
  uint64_t v339;
  int v340;
  char v341;
  uint64_t v342;
  int v343;
  char v344;
  uint64_t v345;
  int v346;
  char v347;
  _BYTE v348[13];
  uint64_t v349;

  v349 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v323, "max_iterations");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Maximum number of iterations to perform.");
  v347 = 0;
  v346 = 0;
  v345 = 10;
  turi::option_manager::create_integer_option(this, &v323, &__p, (uint64_t)&v345, 1, 0x7FFFFFFFLL, 0);
  switch(v347)
  {
    case 2:
      v3 = (unint64_t *)v345;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        v6 = v345;
        if (v345)
        {
          if (*(char *)(v345 + 31) < 0)
            operator delete(*(void **)(v345 + 8));
          v7 = v6;
          v8 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v9 = (unint64_t *)v345;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v345;
        if (v345)
        {
          v13 = *(void **)(v345 + 8);
          if (v13)
          {
            *(_QWORD *)(v345 + 16) = v13;
            operator delete(v13);
          }
          v7 = v12;
          v8 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v14 = (unint64_t *)v345;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = v345;
        if (v345)
        {
          *(_QWORD *)v348 = v345 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v18 = (unint64_t *)v345;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v17 = v345;
        if (v345)
        {
          *(_QWORD *)v348 = v345 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
LABEL_26:
          v7 = v17;
          v8 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v21 = (unint64_t *)v345;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = v345;
        if (v345)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v345 + 16));
          v7 = v24;
          v25 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v26 = (unint64_t *)v345;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v345;
        if (v345)
        {
          v30 = *(void **)(v345 + 48);
          if (v30)
          {
            *(_QWORD *)(v345 + 56) = v30;
            operator delete(v30);
          }
          v31 = *(void **)(v29 + 24);
          if (v31)
          {
            *(_QWORD *)(v29 + 32) = v31;
            operator delete(v31);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
          v7 = v29;
          v25 = 2071181815;
LABEL_41:
          v8 = v25 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v7, v8);
        }
      }
      break;
    default:
      break;
  }
  v345 = 0;
  v346 = 0;
  v347 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "max_depth");
  std::string::basic_string[abi:ne180100]<0>(&__p, "The maximum depth of individual trees");
  v344 = 0;
  v343 = 0;
  v342 = 6;
  turi::option_manager::create_integer_option(this, &v323, &__p, (uint64_t)&v342, 1, 0x7FFFFFFFLL, 0);
  switch(v344)
  {
    case 2:
      v32 = (unint64_t *)v342;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v342;
        if (v342)
        {
          if (*(char *)(v342 + 31) < 0)
            operator delete(*(void **)(v342 + 8));
          v36 = v35;
          v37 = 0x1012C404EF22A49;
          goto LABEL_88;
        }
      }
      break;
    case 3:
      v38 = (unint64_t *)v342;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = v342;
        if (v342)
        {
          v42 = *(void **)(v342 + 8);
          if (v42)
          {
            *(_QWORD *)(v342 + 16) = v42;
            operator delete(v42);
          }
          v36 = v41;
          v37 = 0x1080C409938AC02;
          goto LABEL_88;
        }
      }
      break;
    case 4:
      v43 = (unint64_t *)v342;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        v46 = v342;
        if (v342)
        {
          *(_QWORD *)v348 = v342 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
          goto LABEL_72;
        }
      }
      break;
    case 5:
      v47 = (unint64_t *)v342;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        v46 = v342;
        if (v342)
        {
          *(_QWORD *)v348 = v342 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
LABEL_72:
          v36 = v46;
          v37 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        }
      }
      break;
    case 8:
      v57 = (unint64_t *)v342;
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        v60 = v342;
        if (v342)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v342 + 16));
          v36 = v60;
          v56 = -235920773;
          goto LABEL_87;
        }
      }
      break;
    case 9:
      v50 = (unint64_t *)v342;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        v53 = v342;
        if (v342)
        {
          v54 = *(void **)(v342 + 48);
          if (v54)
          {
            *(_QWORD *)(v342 + 56) = v54;
            operator delete(v54);
          }
          v55 = *(void **)(v53 + 24);
          if (v55)
          {
            *(_QWORD *)(v53 + 32) = v55;
            operator delete(v55);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v53 + 8);
          v36 = v53;
          v56 = 2071181815;
LABEL_87:
          v37 = v56 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v36, v37);
        }
      }
      break;
    default:
      break;
  }
  v342 = 0;
  v343 = 0;
  v344 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "min_child_weight");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Minimum weight required on the leave nodes");
  v340 = 0;
  v341 = 1;
  v339 = 0x3FB999999999999ALL;
  turi::option_manager::create_real_option(this, &v323, &__p, (uint64_t)&v339, 0, 0.0, 3.40282347e38);
  switch(v341)
  {
    case 2:
      v61 = (unint64_t *)v339;
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v64 = v339;
        if (v339)
        {
          if (*(char *)(v339 + 31) < 0)
            operator delete(*(void **)(v339 + 8));
          v65 = v64;
          v66 = 0x1012C404EF22A49;
          goto LABEL_134;
        }
      }
      break;
    case 3:
      v67 = (unint64_t *)v339;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = v339;
        if (v339)
        {
          v71 = *(void **)(v339 + 8);
          if (v71)
          {
            *(_QWORD *)(v339 + 16) = v71;
            operator delete(v71);
          }
          v65 = v70;
          v66 = 0x1080C409938AC02;
          goto LABEL_134;
        }
      }
      break;
    case 4:
      v72 = (unint64_t *)v339;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = v339;
        if (v339)
        {
          *(_QWORD *)v348 = v339 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
          goto LABEL_118;
        }
      }
      break;
    case 5:
      v76 = (unint64_t *)v339;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        v75 = v339;
        if (v339)
        {
          *(_QWORD *)v348 = v339 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
LABEL_118:
          v65 = v75;
          v66 = 0x1020C405E66F15BLL;
          goto LABEL_134;
        }
      }
      break;
    case 8:
      v86 = (unint64_t *)v339;
      do
      {
        v87 = __ldaxr(v86);
        v88 = v87 - 1;
      }
      while (__stlxr(v88, v86));
      if (!v88)
      {
        v89 = v339;
        if (v339)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v339 + 16));
          v65 = v89;
          v85 = -235920773;
          goto LABEL_133;
        }
      }
      break;
    case 9:
      v79 = (unint64_t *)v339;
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        v82 = v339;
        if (v339)
        {
          v83 = *(void **)(v339 + 48);
          if (v83)
          {
            *(_QWORD *)(v339 + 56) = v83;
            operator delete(v83);
          }
          v84 = *(void **)(v82 + 24);
          if (v84)
          {
            *(_QWORD *)(v82 + 32) = v84;
            operator delete(v84);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v82 + 8);
          v65 = v82;
          v85 = 2071181815;
LABEL_133:
          v66 = v85 | 0x1030C4000000000;
LABEL_134:
          MEMORY[0x219A19A08](v65, v66);
        }
      }
      break;
    default:
      break;
  }
  v339 = 0;
  v340 = 0;
  v341 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "min_loss_reduction");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Minimun loss reduction required for splitting a node");
  v337 = 0;
  v338 = 1;
  v336 = 0;
  turi::option_manager::create_real_option(this, &v323, &__p, (uint64_t)&v336, 0, 0.0, 3.40282347e38);
  switch(v338)
  {
    case 2:
      v90 = (unint64_t *)v336;
      do
      {
        v91 = __ldaxr(v90);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, v90));
      if (!v92)
      {
        v93 = v336;
        if (v336)
        {
          if (*(char *)(v336 + 31) < 0)
            operator delete(*(void **)(v336 + 8));
          v94 = v93;
          v95 = 0x1012C404EF22A49;
          goto LABEL_180;
        }
      }
      break;
    case 3:
      v96 = (unint64_t *)v336;
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        v99 = v336;
        if (v336)
        {
          v100 = *(void **)(v336 + 8);
          if (v100)
          {
            *(_QWORD *)(v336 + 16) = v100;
            operator delete(v100);
          }
          v94 = v99;
          v95 = 0x1080C409938AC02;
          goto LABEL_180;
        }
      }
      break;
    case 4:
      v101 = (unint64_t *)v336;
      do
      {
        v102 = __ldaxr(v101);
        v103 = v102 - 1;
      }
      while (__stlxr(v103, v101));
      if (!v103)
      {
        v104 = v336;
        if (v336)
        {
          *(_QWORD *)v348 = v336 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
          goto LABEL_164;
        }
      }
      break;
    case 5:
      v105 = (unint64_t *)v336;
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        v104 = v336;
        if (v336)
        {
          *(_QWORD *)v348 = v336 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
LABEL_164:
          v94 = v104;
          v95 = 0x1020C405E66F15BLL;
          goto LABEL_180;
        }
      }
      break;
    case 8:
      v115 = (unint64_t *)v336;
      do
      {
        v116 = __ldaxr(v115);
        v117 = v116 - 1;
      }
      while (__stlxr(v117, v115));
      if (!v117)
      {
        v118 = v336;
        if (v336)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v336 + 16));
          v94 = v118;
          v114 = -235920773;
          goto LABEL_179;
        }
      }
      break;
    case 9:
      v108 = (unint64_t *)v336;
      do
      {
        v109 = __ldaxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
      {
        v111 = v336;
        if (v336)
        {
          v112 = *(void **)(v336 + 48);
          if (v112)
          {
            *(_QWORD *)(v336 + 56) = v112;
            operator delete(v112);
          }
          v113 = *(void **)(v111 + 24);
          if (v113)
          {
            *(_QWORD *)(v111 + 32) = v113;
            operator delete(v113);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v111 + 8);
          v94 = v111;
          v114 = 2071181815;
LABEL_179:
          v95 = v114 | 0x1030C4000000000;
LABEL_180:
          MEMORY[0x219A19A08](v94, v95);
        }
      }
      break;
    default:
      break;
  }
  v336 = 0;
  v337 = 0;
  v338 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "row_subsample");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Percentage of the examples (rows) for training each individual tree");
  v334 = 0;
  v335 = 1;
  v333 = 0x3FE999999999999ALL;
  turi::option_manager::create_real_option(this, &v323, &__p, (uint64_t)&v333, 0, 0.0, 1.0);
  switch(v335)
  {
    case 2:
      v119 = (unint64_t *)v333;
      do
      {
        v120 = __ldaxr(v119);
        v121 = v120 - 1;
      }
      while (__stlxr(v121, v119));
      if (!v121)
      {
        v122 = v333;
        if (v333)
        {
          if (*(char *)(v333 + 31) < 0)
            operator delete(*(void **)(v333 + 8));
          v123 = v122;
          v124 = 0x1012C404EF22A49;
          goto LABEL_226;
        }
      }
      break;
    case 3:
      v125 = (unint64_t *)v333;
      do
      {
        v126 = __ldaxr(v125);
        v127 = v126 - 1;
      }
      while (__stlxr(v127, v125));
      if (!v127)
      {
        v128 = v333;
        if (v333)
        {
          v129 = *(void **)(v333 + 8);
          if (v129)
          {
            *(_QWORD *)(v333 + 16) = v129;
            operator delete(v129);
          }
          v123 = v128;
          v124 = 0x1080C409938AC02;
          goto LABEL_226;
        }
      }
      break;
    case 4:
      v130 = (unint64_t *)v333;
      do
      {
        v131 = __ldaxr(v130);
        v132 = v131 - 1;
      }
      while (__stlxr(v132, v130));
      if (!v132)
      {
        v133 = v333;
        if (v333)
        {
          *(_QWORD *)v348 = v333 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
          goto LABEL_210;
        }
      }
      break;
    case 5:
      v134 = (unint64_t *)v333;
      do
      {
        v135 = __ldaxr(v134);
        v136 = v135 - 1;
      }
      while (__stlxr(v136, v134));
      if (!v136)
      {
        v133 = v333;
        if (v333)
        {
          *(_QWORD *)v348 = v333 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
LABEL_210:
          v123 = v133;
          v124 = 0x1020C405E66F15BLL;
          goto LABEL_226;
        }
      }
      break;
    case 8:
      v144 = (unint64_t *)v333;
      do
      {
        v145 = __ldaxr(v144);
        v146 = v145 - 1;
      }
      while (__stlxr(v146, v144));
      if (!v146)
      {
        v147 = v333;
        if (v333)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v333 + 16));
          v123 = v147;
          v143 = -235920773;
          goto LABEL_225;
        }
      }
      break;
    case 9:
      v137 = (unint64_t *)v333;
      do
      {
        v138 = __ldaxr(v137);
        v139 = v138 - 1;
      }
      while (__stlxr(v139, v137));
      if (!v139)
      {
        v140 = v333;
        if (v333)
        {
          v141 = *(void **)(v333 + 48);
          if (v141)
          {
            *(_QWORD *)(v333 + 56) = v141;
            operator delete(v141);
          }
          v142 = *(void **)(v140 + 24);
          if (v142)
          {
            *(_QWORD *)(v140 + 32) = v142;
            operator delete(v142);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v140 + 8);
          v123 = v140;
          v143 = 2071181815;
LABEL_225:
          v124 = v143 | 0x1030C4000000000;
LABEL_226:
          MEMORY[0x219A19A08](v123, v124);
        }
      }
      break;
    default:
      break;
  }
  v333 = 0;
  v334 = 0;
  v335 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "column_subsample");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Percentage of the features(columns) sampled for training each individual tree");
  v331 = 0;
  v332 = 1;
  v330 = 0x3FE999999999999ALL;
  turi::option_manager::create_real_option(this, &v323, &__p, (uint64_t)&v330, 0, 0.0, 1.0);
  switch(v332)
  {
    case 2:
      v148 = (unint64_t *)v330;
      do
      {
        v149 = __ldaxr(v148);
        v150 = v149 - 1;
      }
      while (__stlxr(v150, v148));
      if (!v150)
      {
        v151 = v330;
        if (v330)
        {
          if (*(char *)(v330 + 31) < 0)
            operator delete(*(void **)(v330 + 8));
          v152 = v151;
          v153 = 0x1012C404EF22A49;
          goto LABEL_272;
        }
      }
      break;
    case 3:
      v154 = (unint64_t *)v330;
      do
      {
        v155 = __ldaxr(v154);
        v156 = v155 - 1;
      }
      while (__stlxr(v156, v154));
      if (!v156)
      {
        v157 = v330;
        if (v330)
        {
          v158 = *(void **)(v330 + 8);
          if (v158)
          {
            *(_QWORD *)(v330 + 16) = v158;
            operator delete(v158);
          }
          v152 = v157;
          v153 = 0x1080C409938AC02;
          goto LABEL_272;
        }
      }
      break;
    case 4:
      v159 = (unint64_t *)v330;
      do
      {
        v160 = __ldaxr(v159);
        v161 = v160 - 1;
      }
      while (__stlxr(v161, v159));
      if (!v161)
      {
        v162 = v330;
        if (v330)
        {
          *(_QWORD *)v348 = v330 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
          goto LABEL_256;
        }
      }
      break;
    case 5:
      v163 = (unint64_t *)v330;
      do
      {
        v164 = __ldaxr(v163);
        v165 = v164 - 1;
      }
      while (__stlxr(v165, v163));
      if (!v165)
      {
        v162 = v330;
        if (v330)
        {
          *(_QWORD *)v348 = v330 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
LABEL_256:
          v152 = v162;
          v153 = 0x1020C405E66F15BLL;
          goto LABEL_272;
        }
      }
      break;
    case 8:
      v173 = (unint64_t *)v330;
      do
      {
        v174 = __ldaxr(v173);
        v175 = v174 - 1;
      }
      while (__stlxr(v175, v173));
      if (!v175)
      {
        v176 = v330;
        if (v330)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v330 + 16));
          v152 = v176;
          v172 = -235920773;
          goto LABEL_271;
        }
      }
      break;
    case 9:
      v166 = (unint64_t *)v330;
      do
      {
        v167 = __ldaxr(v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, v166));
      if (!v168)
      {
        v169 = v330;
        if (v330)
        {
          v170 = *(void **)(v330 + 48);
          if (v170)
          {
            *(_QWORD *)(v330 + 56) = v170;
            operator delete(v170);
          }
          v171 = *(void **)(v169 + 24);
          if (v171)
          {
            *(_QWORD *)(v169 + 32) = v171;
            operator delete(v171);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v169 + 8);
          v152 = v169;
          v172 = 2071181815;
LABEL_271:
          v153 = v172 | 0x1030C4000000000;
LABEL_272:
          MEMORY[0x219A19A08](v152, v153);
        }
      }
      break;
    default:
      break;
  }
  v330 = 0;
  v331 = 0;
  v332 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "random_seed");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Seed for row and column subselection");
  *(_QWORD *)((char *)v329 + 5) = 0x700000000000000;
  v329[0] = 0;
  turi::option_manager::create_integer_option(this, &v323, &__p, (uint64_t)v329, -2147483647, 0x7FFFFFFFLL, 0);
  switch(BYTE4(v329[1]))
  {
    case 2:
      v177 = (unint64_t *)v329[0];
      do
      {
        v178 = __ldaxr(v177);
        v179 = v178 - 1;
      }
      while (__stlxr(v179, v177));
      if (!v179)
      {
        v180 = v329[0];
        if (v329[0])
        {
          if (*(char *)(v329[0] + 31) < 0)
            operator delete(*(void **)(v329[0] + 8));
          v181 = v180;
          v182 = 0x1012C404EF22A49;
          goto LABEL_318;
        }
      }
      break;
    case 3:
      v183 = (unint64_t *)v329[0];
      do
      {
        v184 = __ldaxr(v183);
        v185 = v184 - 1;
      }
      while (__stlxr(v185, v183));
      if (!v185)
      {
        v186 = v329[0];
        if (v329[0])
        {
          v187 = *(void **)(v329[0] + 8);
          if (v187)
          {
            *(_QWORD *)(v329[0] + 16) = v187;
            operator delete(v187);
          }
          v181 = v186;
          v182 = 0x1080C409938AC02;
          goto LABEL_318;
        }
      }
      break;
    case 4:
      v188 = (unint64_t *)v329[0];
      do
      {
        v189 = __ldaxr(v188);
        v190 = v189 - 1;
      }
      while (__stlxr(v190, v188));
      if (!v190)
      {
        v191 = v329[0];
        if (v329[0])
        {
          *(_QWORD *)v348 = v329[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
          goto LABEL_302;
        }
      }
      break;
    case 5:
      v192 = (unint64_t *)v329[0];
      do
      {
        v193 = __ldaxr(v192);
        v194 = v193 - 1;
      }
      while (__stlxr(v194, v192));
      if (!v194)
      {
        v191 = v329[0];
        if (v329[0])
        {
          *(_QWORD *)v348 = v329[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
LABEL_302:
          v181 = v191;
          v182 = 0x1020C405E66F15BLL;
          goto LABEL_318;
        }
      }
      break;
    case 8:
      v202 = (unint64_t *)v329[0];
      do
      {
        v203 = __ldaxr(v202);
        v204 = v203 - 1;
      }
      while (__stlxr(v204, v202));
      if (!v204)
      {
        v205 = v329[0];
        if (v329[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v329[0] + 16));
          v181 = v205;
          v201 = -235920773;
          goto LABEL_317;
        }
      }
      break;
    case 9:
      v195 = (unint64_t *)v329[0];
      do
      {
        v196 = __ldaxr(v195);
        v197 = v196 - 1;
      }
      while (__stlxr(v197, v195));
      if (!v197)
      {
        v198 = v329[0];
        if (v329[0])
        {
          v199 = *(void **)(v329[0] + 48);
          if (v199)
          {
            *(_QWORD *)(v329[0] + 56) = v199;
            operator delete(v199);
          }
          v200 = *(void **)(v198 + 24);
          if (v200)
          {
            *(_QWORD *)(v198 + 32) = v200;
            operator delete(v200);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v198 + 8);
          v181 = v198;
          v201 = 2071181815;
LABEL_317:
          v182 = v201 | 0x1030C4000000000;
LABEL_318:
          MEMORY[0x219A19A08](v181, v182);
        }
      }
      break;
    default:
      break;
  }
  memset(v329, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "metric");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Performance metric(s) to track during training iterations");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v327, "auto");
  turi::option_manager::create_flexible_type_option(this, &v323, &__p, (uint64_t)&v327, 0);
  switch(v328)
  {
    case 2:
      v206 = (unint64_t *)v327;
      do
      {
        v207 = __ldaxr(v206);
        v208 = v207 - 1;
      }
      while (__stlxr(v208, v206));
      if (!v208)
      {
        v209 = v327;
        if (v327)
        {
          if (*((char *)v327 + 31) < 0)
            operator delete(v327[1]);
          v210 = v209;
          v211 = 0x1012C404EF22A49;
          goto LABEL_364;
        }
      }
      break;
    case 3:
      v212 = (unint64_t *)v327;
      do
      {
        v213 = __ldaxr(v212);
        v214 = v213 - 1;
      }
      while (__stlxr(v214, v212));
      if (!v214)
      {
        v215 = v327;
        if (v327)
        {
          v216 = v327[1];
          if (v216)
          {
            v327[2] = v216;
            operator delete(v216);
          }
          v210 = v215;
          v211 = 0x1080C409938AC02;
          goto LABEL_364;
        }
      }
      break;
    case 4:
      v217 = (unint64_t *)v327;
      do
      {
        v218 = __ldaxr(v217);
        v219 = v218 - 1;
      }
      while (__stlxr(v219, v217));
      if (!v219)
      {
        v220 = v327;
        if (v327)
        {
          *(_QWORD *)v348 = v327 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
          goto LABEL_357;
        }
      }
      break;
    case 5:
      v228 = (unint64_t *)v327;
      do
      {
        v229 = __ldaxr(v228);
        v230 = v229 - 1;
      }
      while (__stlxr(v230, v228));
      if (!v230)
      {
        v220 = v327;
        if (v327)
        {
          *(_QWORD *)v348 = v327 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
LABEL_357:
          v210 = v220;
          v211 = 0x1020C405E66F15BLL;
          goto LABEL_364;
        }
      }
      break;
    case 8:
      v231 = (unint64_t *)v327;
      do
      {
        v232 = __ldaxr(v231);
        v233 = v232 - 1;
      }
      while (__stlxr(v233, v231));
      if (!v233)
      {
        v234 = v327;
        if (v327)
        {
          boost::detail::shared_count::~shared_count(v327 + 2);
          v210 = v234;
          v227 = -235920773;
          goto LABEL_363;
        }
      }
      break;
    case 9:
      v221 = (unint64_t *)v327;
      do
      {
        v222 = __ldaxr(v221);
        v223 = v222 - 1;
      }
      while (__stlxr(v223, v221));
      if (!v223)
      {
        v224 = v327;
        if (v327)
        {
          v225 = v327[6];
          if (v225)
          {
            v327[7] = v225;
            operator delete(v225);
          }
          v226 = v224[3];
          if (v226)
          {
            v224[4] = v226;
            operator delete(v226);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v224 + 1));
          v210 = v224;
          v227 = 2071181815;
LABEL_363:
          v211 = v227 | 0x1030C4000000000;
LABEL_364:
          MEMORY[0x219A19A08](v210, v211);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "disable_posttrain_evaluation");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Disable automatic computation of an evaluation report following training.");
  turi::option_manager::create_BOOLean_option(this, &v323, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "model_checkpoint_path");
  std::string::basic_string[abi:ne180100]<0>(&__p, "The path for saving model during training");
  *(_QWORD *)&v348[5] = 0x700000000000000;
  *(_QWORD *)v348 = 0;
  turi::option_manager::create_string_option(this, &v323, &__p, (uint64_t)v348, 1);
  switch(v348[12])
  {
    case 2:
      v235 = *(unint64_t **)v348;
      do
      {
        v236 = __ldaxr(v235);
        v237 = v236 - 1;
      }
      while (__stlxr(v237, v235));
      if (!v237)
      {
        v238 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          if (*(char *)(*(_QWORD *)v348 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v348 + 8));
          v239 = v238;
          v240 = 0x1012C404EF22A49;
          goto LABEL_414;
        }
      }
      break;
    case 3:
      v241 = *(unint64_t **)v348;
      do
      {
        v242 = __ldaxr(v241);
        v243 = v242 - 1;
      }
      while (__stlxr(v243, v241));
      if (!v243)
      {
        v244 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          v245 = *(void **)(*(_QWORD *)v348 + 8);
          if (v245)
          {
            *(_QWORD *)(*(_QWORD *)v348 + 16) = v245;
            operator delete(v245);
          }
          v239 = v244;
          v240 = 0x1080C409938AC02;
          goto LABEL_414;
        }
      }
      break;
    case 4:
      v246 = *(unint64_t **)v348;
      do
      {
        v247 = __ldaxr(v246);
        v248 = v247 - 1;
      }
      while (__stlxr(v248, v246));
      if (!v248)
      {
        v249 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          v327 = (unsigned int **)(*(_QWORD *)v348 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v327);
          goto LABEL_398;
        }
      }
      break;
    case 5:
      v250 = *(unint64_t **)v348;
      do
      {
        v251 = __ldaxr(v250);
        v252 = v251 - 1;
      }
      while (__stlxr(v252, v250));
      if (!v252)
      {
        v249 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          v327 = (unsigned int **)(*(_QWORD *)v348 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v327);
LABEL_398:
          v239 = v249;
          v240 = 0x1020C405E66F15BLL;
          goto LABEL_414;
        }
      }
      break;
    case 8:
      v260 = *(unint64_t **)v348;
      do
      {
        v261 = __ldaxr(v260);
        v262 = v261 - 1;
      }
      while (__stlxr(v262, v260));
      if (!v262)
      {
        v263 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v348 + 16));
          v239 = v263;
          v259 = -235920773;
          goto LABEL_413;
        }
      }
      break;
    case 9:
      v253 = *(unint64_t **)v348;
      do
      {
        v254 = __ldaxr(v253);
        v255 = v254 - 1;
      }
      while (__stlxr(v255, v253));
      if (!v255)
      {
        v256 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          v257 = *(void **)(*(_QWORD *)v348 + 48);
          if (v257)
          {
            *(_QWORD *)(*(_QWORD *)v348 + 56) = v257;
            operator delete(v257);
          }
          v258 = *(void **)(v256 + 24);
          if (v258)
          {
            *(_QWORD *)(v256 + 32) = v258;
            operator delete(v258);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v256 + 8);
          v239 = v256;
          v259 = 2071181815;
LABEL_413:
          v240 = v259 | 0x1030C4000000000;
LABEL_414:
          MEMORY[0x219A19A08](v239, v240);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "model_checkpoint_interval");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Save model every K iteration");
  v326 = 0;
  v325 = 0;
  v324 = 5;
  turi::option_manager::create_integer_option(this, &v323, &__p, (uint64_t)&v324, 0, 0x7FFFFFFFLL, 0);
  switch(v326)
  {
    case 2:
      v264 = (unint64_t *)v324;
      do
      {
        v265 = __ldaxr(v264);
        v266 = v265 - 1;
      }
      while (__stlxr(v266, v264));
      if (!v266)
      {
        v267 = v324;
        if (v324)
        {
          if (*(char *)(v324 + 31) < 0)
            operator delete(*(void **)(v324 + 8));
          v268 = v267;
          v269 = 0x1012C404EF22A49;
          goto LABEL_460;
        }
      }
      break;
    case 3:
      v270 = (unint64_t *)v324;
      do
      {
        v271 = __ldaxr(v270);
        v272 = v271 - 1;
      }
      while (__stlxr(v272, v270));
      if (!v272)
      {
        v273 = v324;
        if (v324)
        {
          v274 = *(void **)(v324 + 8);
          if (v274)
          {
            *(_QWORD *)(v324 + 16) = v274;
            operator delete(v274);
          }
          v268 = v273;
          v269 = 0x1080C409938AC02;
          goto LABEL_460;
        }
      }
      break;
    case 4:
      v275 = (unint64_t *)v324;
      do
      {
        v276 = __ldaxr(v275);
        v277 = v276 - 1;
      }
      while (__stlxr(v277, v275));
      if (!v277)
      {
        v278 = v324;
        if (v324)
        {
          *(_QWORD *)v348 = v324 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
          goto LABEL_444;
        }
      }
      break;
    case 5:
      v279 = (unint64_t *)v324;
      do
      {
        v280 = __ldaxr(v279);
        v281 = v280 - 1;
      }
      while (__stlxr(v281, v279));
      if (!v281)
      {
        v278 = v324;
        if (v324)
        {
          *(_QWORD *)v348 = v324 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
LABEL_444:
          v268 = v278;
          v269 = 0x1020C405E66F15BLL;
          goto LABEL_460;
        }
      }
      break;
    case 8:
      v289 = (unint64_t *)v324;
      do
      {
        v290 = __ldaxr(v289);
        v291 = v290 - 1;
      }
      while (__stlxr(v291, v289));
      if (!v291)
      {
        v292 = v324;
        if (v324)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v324 + 16));
          v268 = v292;
          v288 = -235920773;
          goto LABEL_459;
        }
      }
      break;
    case 9:
      v282 = (unint64_t *)v324;
      do
      {
        v283 = __ldaxr(v282);
        v284 = v283 - 1;
      }
      while (__stlxr(v284, v282));
      if (!v284)
      {
        v285 = v324;
        if (v324)
        {
          v286 = *(void **)(v324 + 48);
          if (v286)
          {
            *(_QWORD *)(v324 + 56) = v286;
            operator delete(v286);
          }
          v287 = *(void **)(v285 + 24);
          if (v287)
          {
            *(_QWORD *)(v285 + 32) = v287;
            operator delete(v287);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v285 + 8);
          v268 = v285;
          v288 = 2071181815;
LABEL_459:
          v269 = v288 | 0x1030C4000000000;
LABEL_460:
          MEMORY[0x219A19A08](v268, v269);
        }
      }
      break;
    default:
      break;
  }
  v324 = 0;
  v325 = 0;
  v326 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v323, "resume_from_checkpoint");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Load saved model from the path and continue training");
  *(_QWORD *)&v348[5] = 0x700000000000000;
  *(_QWORD *)v348 = 0;
  turi::option_manager::create_string_option(this, &v323, &__p, (uint64_t)v348, 1);
  switch(v348[12])
  {
    case 2:
      v293 = *(unint64_t **)v348;
      do
      {
        v294 = __ldaxr(v293);
        v295 = v294 - 1;
      }
      while (__stlxr(v295, v293));
      if (!v295)
      {
        v296 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          if (*(char *)(*(_QWORD *)v348 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v348 + 8));
          v297 = v296;
          v298 = 0x1012C404EF22A49;
          goto LABEL_506;
        }
      }
      break;
    case 3:
      v299 = *(unint64_t **)v348;
      do
      {
        v300 = __ldaxr(v299);
        v301 = v300 - 1;
      }
      while (__stlxr(v301, v299));
      if (!v301)
      {
        v302 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          v303 = *(void **)(*(_QWORD *)v348 + 8);
          if (v303)
          {
            *(_QWORD *)(*(_QWORD *)v348 + 16) = v303;
            operator delete(v303);
          }
          v297 = v302;
          v298 = 0x1080C409938AC02;
          goto LABEL_506;
        }
      }
      break;
    case 4:
      v304 = *(unint64_t **)v348;
      do
      {
        v305 = __ldaxr(v304);
        v306 = v305 - 1;
      }
      while (__stlxr(v306, v304));
      if (!v306)
      {
        v307 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          v327 = (unsigned int **)(*(_QWORD *)v348 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v327);
          goto LABEL_490;
        }
      }
      break;
    case 5:
      v308 = *(unint64_t **)v348;
      do
      {
        v309 = __ldaxr(v308);
        v310 = v309 - 1;
      }
      while (__stlxr(v310, v308));
      if (!v310)
      {
        v307 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          v327 = (unsigned int **)(*(_QWORD *)v348 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v327);
LABEL_490:
          v297 = v307;
          v298 = 0x1020C405E66F15BLL;
          goto LABEL_506;
        }
      }
      break;
    case 8:
      v318 = *(unint64_t **)v348;
      do
      {
        v319 = __ldaxr(v318);
        v320 = v319 - 1;
      }
      while (__stlxr(v320, v318));
      if (!v320)
      {
        v321 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v348 + 16));
          v297 = v321;
          v317 = -235920773;
          goto LABEL_505;
        }
      }
      break;
    case 9:
      v311 = *(unint64_t **)v348;
      do
      {
        v312 = __ldaxr(v311);
        v313 = v312 - 1;
      }
      while (__stlxr(v313, v311));
      if (!v313)
      {
        v314 = *(_QWORD *)v348;
        if (*(_QWORD *)v348)
        {
          v315 = *(void **)(*(_QWORD *)v348 + 48);
          if (v315)
          {
            *(_QWORD *)(*(_QWORD *)v348 + 56) = v315;
            operator delete(v315);
          }
          v316 = *(void **)(v314 + 24);
          if (v316)
          {
            *(_QWORD *)(v314 + 32) = v316;
            operator delete(v316);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v314 + 8);
          v297 = v314;
          v317 = 2071181815;
LABEL_505:
          v298 = v317 | 0x1030C4000000000;
LABEL_506:
          MEMORY[0x219A19A08](v297, v298);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
}

void sub_21858C450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,int a23,char a24,uint64_t a25,int a26,char a27,uint64_t a28,int a29,char a30,uint64_t a31,int a32,char a33,uint64_t a34,int a35,char a36,uint64_t a37,int a38,char a39)
{
  uint64_t v39;

  switch(*(_BYTE *)(v39 - 60))
  {
    case 2:
      turi::gl_sarray::clip((unint64_t **)(v39 - 72));
      break;
    case 3:
      turi::gl_sarray::clip((unint64_t **)(v39 - 72));
      break;
    case 4:
      tc_init_set_config_parameter_cold_4((unint64_t **)(v39 - 72));
      break;
    case 5:
      tc_init_set_config_parameter_cold_5((unint64_t **)(v39 - 72));
      break;
    case 8:
      turi::gl_sarray::clip((unint64_t **)(v39 - 72));
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((unint64_t **)(v39 - 72));
      break;
    default:
      break;
  }
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::set_xgboost_random_forest_common_options(turi::option_manager *a1, xgboost_old::learner::BoostLearner *a2)
{
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::string *v11;
  BOOL v12;
  std::string::size_type size;
  BOOL v14;
  std::string *v21;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string v28;
  void *v29[2];
  char v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;
  std::string v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v29, "1.0");
  if (v30 >= 0)
    v4 = (char *)v29;
  else
    v4 = (char *)v29[0];
  xgboost_old::learner::BoostLearner::SetParam(a2, "eta", v4);
  v5 = (_QWORD *)turi::option_manager::current_option_values(a1);
  v6 = v5 + 1;
  v7 = (_QWORD *)*v5;
  if ((_QWORD *)*v5 != v5 + 1)
  {
    v8 = *MEMORY[0x24BEDB7F0];
    v26 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v27 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v25 = MEMORY[0x24BEDB848] + 16;
    do
    {
      std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100](&v37, (std::string *)(v7 + 4));
      switch(v39)
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
          std::ostream::operator<<();
          std::stringbuf::str();
          v31[0] = v8;
          *(_QWORD *)((char *)v31 + *(_QWORD *)(v8 - 24)) = v27;
          v32 = v26;
          v9 = v25;
          goto LABEL_15;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
          std::ostream::operator<<();
          std::stringbuf::str();
          v31[0] = v8;
          *(_QWORD *)((char *)v31 + *(_QWORD *)(v8 - 24)) = v27;
          v9 = MEMORY[0x24BEDB848] + 16;
          v32 = v26;
LABEL_15:
          v33 = v9;
          if (v35 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v36);
          break;
        case 2:
          if (*(char *)(v38 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
          }
          else
          {
            v10 = *(_OWORD *)(v38 + 8);
            v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 24);
            *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v10;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v31, (_QWORD *)(v38 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v31, (uint64_t *)(v38 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v31, (_QWORD *)(v38 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v38, &v28);
          break;
        case 7:
          memset(&v28, 0, sizeof(v28));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v31, (_QWORD *)(v38 + 8));
          break;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
      if ((*((_BYTE *)&v37.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v11 = &v37;
        switch(*((_BYTE *)&v37.__r_.__value_.__s + 23))
        {
          case 0xB:
            goto LABEL_52;
          case 0xD:
            goto LABEL_46;
          case 0x10:
            v12 = v37.__r_.__value_.__r.__words[0] == 0x735F6E6D756C6F63
               && v37.__r_.__value_.__l.__size_ == 0x656C706D61736275;
            if (!v12)
              goto LABEL_86;
            goto LABEL_70;
          case 0x12:
            if (v37.__r_.__value_.__r.__words[0] != 0x73736F6C5F6E696DLL
              || v37.__r_.__value_.__l.__size_ != 0x697463756465725FLL
              || LOWORD(v37.__r_.__value_.__r.__words[2]) != 28271)
            {
              goto LABEL_86;
            }
            goto LABEL_66;
          default:
            goto LABEL_86;
        }
      }
      size = v37.__r_.__value_.__l.__size_;
      v11 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if (v37.__r_.__value_.__l.__size_ == 16)
      {
        if (*(_QWORD *)v37.__r_.__value_.__l.__data_ == 0x735F6E6D756C6F63
          && *(_QWORD *)(v37.__r_.__value_.__r.__words[0] + 8) == 0x656C706D61736275)
        {
LABEL_70:
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v28;
          else
            v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
          v11 = (std::string *)"colsample_bytree";
          goto LABEL_94;
        }
        size = v37.__r_.__value_.__l.__size_;
        v11 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      else if (v37.__r_.__value_.__l.__size_ == 18)
      {
        v14 = *(_QWORD *)v37.__r_.__value_.__l.__data_ == 0x73736F6C5F6E696DLL
           && *(_QWORD *)(v37.__r_.__value_.__r.__words[0] + 8) == 0x697463756465725FLL;
        if (v14 && *(_WORD *)(v37.__r_.__value_.__r.__words[0] + 16) == 28271)
        {
LABEL_66:
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v28;
          else
            v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
          v11 = (std::string *)"gamma";
          goto LABEL_94;
        }
      }
      if (size == 13)
      {
LABEL_46:
        if (v11->__r_.__value_.__r.__words[0] == 0x736275735F776F72
          && *(std::string::size_type *)((char *)v11->__r_.__value_.__r.__words + 5) == 0x656C706D61736275)
        {
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v28;
          else
            v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
          v11 = (std::string *)"subsample";
          goto LABEL_94;
        }
        if ((*((_BYTE *)&v37.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (HIBYTE(v37.__r_.__value_.__r.__words[2]) != 11)
            goto LABEL_85;
LABEL_52:
          if (v37.__r_.__value_.__r.__words[0] != 0x735F6D6F646E6172
            || *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 3) != 0x646565735F6D6F64)
          {
            goto LABEL_85;
          }
          goto LABEL_89;
        }
        size = v37.__r_.__value_.__l.__size_;
        v11 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if (size != 11)
        goto LABEL_86;
      if (v11->__r_.__value_.__r.__words[0] != 0x735F6D6F646E6172
        || *(std::string::size_type *)((char *)v11->__r_.__value_.__r.__words + 3) != 0x646565735F6D6F64)
      {
        if ((*((_BYTE *)&v37.__r_.__value_.__s + 23) & 0x80) == 0)
LABEL_85:
          v11 = &v37;
LABEL_86:
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v28;
        else
          v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
LABEL_94:
        xgboost_old::learner::BoostLearner::SetParam(a2, (std::string::value_type *)v11, (char *)v21);
        goto LABEL_95;
      }
LABEL_89:
      if (v39 != 7)
      {
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v28;
        else
          v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
        v11 = (std::string *)"seed";
        goto LABEL_94;
      }
LABEL_95:
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v37);
      v23 = (_QWORD *)v7[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v7[2];
          v12 = *v24 == (_QWORD)v7;
          v7 = v24;
        }
        while (!v12);
      }
      v7 = v24;
    }
    while (v24 != v6);
  }
  if (v30 < 0)
    operator delete(v29[0]);
}

void sub_21858D05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::random_forest_regression::configure(turi::supervised::xgboost::random_forest_regression *this)
{
  void *__p[2];
  char v3;
  uint64_t v4[3];
  _QWORD v5[3];
  uint64_t v6[3];
  void **v7;

  xgboost_old::learner::BoostLearner::SetParam(*((xgboost_old::learner::BoostLearner **)this + 208), "silent", "1");
  xgboost_old::learner::BoostLearner::SetParam(*((xgboost_old::learner::BoostLearner **)this + 208), "objective", "reg:linear");
  std::map<std::string,unsigned long>::map[abi:ne180100](v4, (const void ***)this + 28);
  memset(v5, 0, sizeof(v5));
  std::vector<turi::option_handling::option_info>::__init_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>(v5, *((_QWORD *)this + 31), *((_QWORD *)this + 32), (uint64_t)(*((_QWORD *)this + 32) - *((_QWORD *)this + 31)) >> 7);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v6, (uint64_t)this + 272);
  turi::supervised::xgboost::set_xgboost_random_forest_common_options((turi::option_manager *)v4, *((xgboost_old::learner::BoostLearner **)this + 208));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v6, (_QWORD *)v6[1]);
  v7 = (void **)v5;
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v4, (char *)v4[1]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Random forest regression");
  turi::supervised::supervised_learning_model_base::display_regression_training_summary(this, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_21858D1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::random_forest_regression::init_options(uint64_t a1, _QWORD *a2)
{
  turi::option_manager *v4;
  _QWORD *v5;
  _QWORD v6[3];

  turi::supervised::xgboost::xgboost_model::init_options(a1, (uint64_t)a2);
  turi::supervised::xgboost::init_random_forest_common_options((turi::supervised::xgboost *)(a1 + 224), v4);
  turi::option_manager::set_options(a1 + 224, a2);
  v5 = (_QWORD *)turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
  turi::flexmap_to_varmap(v5, (uint64_t)v6);
  turi::ml_model_base::add_or_update_state(a1, v6);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v6, (char *)v6[1]);
}

void sub_21858D288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::random_forest_regression::export_to_coreml(std::__shared_weak_count **this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  char *v6;
  std::string v7;
  _BYTE v8[8];
  _QWORD *v9;
  std::string v10;
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[6];

  v13[5] = *MEMORY[0x24BDAC8D0];
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(&v10, "model_type", "random_forest");
  v4 = ((uint64_t (*)(std::__shared_weak_count **))(*this)[2].__vftable)(this);
  std::to_string(&v7, v4);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(v11, "version", (__int128 *)&v7);
  v6 = (char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(v12, "class", &v6);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v13, "short_description", "Random Forest Regression model.");
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v8, &v10, 4);
  for (i = 120; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v10 + i);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  turi::supervised::xgboost::xgboost_model::_export_xgboost_model(this, 0, 1, (uint64_t)v8, a2);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v8, v9);
}

void sub_21858D404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, _QWORD *a19, uint64_t a20,char a21)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::random_forest_classifier::model_specific_init(uint64_t **this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  uint64_t **v4;
  unsigned int *v5;
  __n128 v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t *v21;
  unint64_t v22;
  void **p_p;
  _QWORD *v24[2];
  _OWORD *v25;
  _BYTE v26[13];
  char v27;
  void *__p;
  _BYTE v29[13];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  turi::supervised::xgboost::xgboost_model::model_specific_init((turi::supervised::xgboost::xgboost_model *)this, a2, a3);
  *(_QWORD *)v26 = *(_QWORD *)(this[47][3] + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  v4 = this + 37;
  p_p = &__p;
  v5 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v5 + 14, v26);
  if (v30 < 0)
    operator delete(__p);
  v8 = this[47];
  v7 = (std::__shared_weak_count *)this[48];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v24[0] = 0;
  v24[1] = 0;
  p_p = (void **)v24;
  v11 = (_QWORD *)v8[3];
  if (v11[8])
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v11[6];
      if ((*(_DWORD *)(v15 + 24) | 2) == 2)
      {
        v16 = (uint64_t *)(v15 + 80);
      }
      else
      {
        v18 = v15 + 32;
        v17 = *(_QWORD *)(v15 + 32);
        if (v14 >= (*(_QWORD *)(v18 + 8) - v17) >> 3)
        {
          v19 = 0;
          goto LABEL_13;
        }
        v16 = (uint64_t *)(v17 + v13);
      }
      v19 = *v16;
LABEL_13:
      *(_QWORD *)v26 = *(_QWORD *)(v11[4] + 80) + v12;
      std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)&p_p, *(uint64_t *)v26, v6, (uint64_t)&std::piecewise_construct, (void **)v26)[6] = v19;
      ++v14;
      v11 = (_QWORD *)v8[3];
      v13 += 8;
      v12 += 16;
    }
    while (v14 < v11[8]);
  }
  turi::flexible_type_converter<std::map<turi::flexible_type,unsigned long>>::set(&p_p, (uint64_t)v26);
  *(_QWORD *)&v29[5] = *(_QWORD *)&v26[5];
  *(_QWORD *)v29 = *(_QWORD *)v26;
  v29[12] = v26[12];
  LODWORD(__p) = 0;
  std::string::basic_string[abi:ne180100]<0>(v26, "num_examples_per_class");
  v25 = v26;
  v20 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v26, (uint64_t)&std::piecewise_construct, &v25);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v20 + 14, (unsigned int *)&__p);
  if (v27 < 0)
    operator delete(*(void **)v26);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
  std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::destroy((uint64_t)&p_p, v24[0]);
  if (v7)
  {
    v21 = (unint64_t *)&v7->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21858D710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a23);
  std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::destroy((uint64_t)&a12, a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::random_forest_classifier::configure(turi::supervised::xgboost::random_forest_classifier *this)
{
  int *v2;
  unint64_t v3;
  xgboost_old::learner::BoostLearner *v4;
  std::string *p_p;
  char *v6;
  uint64_t v7;
  void *v9[2];
  char v10;
  uint64_t v11[3];
  _QWORD v12[3];
  uint64_t v13[3];
  std::string __p;
  _QWORD v15[13];
  char v16;
  uint64_t v17;
  char v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v18, v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xgboost_old::learner::BoostLearner::SetParam(*((xgboost_old::learner::BoostLearner **)this + 208), "silent", "1");
  v4 = (xgboost_old::learner::BoostLearner *)*((_QWORD *)this + 208);
  if (v3 < 3)
  {
    v6 = "binary:logistic";
  }
  else
  {
    std::to_string(&__p, v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    xgboost_old::learner::BoostLearner::SetParam(v4, "num_class", (char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v4 = (xgboost_old::learner::BoostLearner *)*((_QWORD *)this + 208);
    v6 = "multi:softprob";
  }
  xgboost_old::learner::BoostLearner::SetParam(v4, "objective", v6);
  std::map<std::string,unsigned long>::map[abi:ne180100](v11, (const void ***)this + 28);
  memset(v12, 0, sizeof(v12));
  std::vector<turi::option_handling::option_info>::__init_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>(v12, *((_QWORD *)this + 31), *((_QWORD *)this + 32), (uint64_t)(*((_QWORD *)this + 32) - *((_QWORD *)this + 31)) >> 7);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v13, (uint64_t)this + 272);
  turi::supervised::xgboost::set_xgboost_random_forest_common_options((turi::option_manager *)v11, *((xgboost_old::learner::BoostLearner **)this + 208));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v13, (_QWORD *)v13[1]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v11, (char *)v11[1]);
  std::string::basic_string[abi:ne180100]<0>(v9, "Random forest classifier");
  turi::supervised::supervised_learning_model_base::display_classifier_training_summary(this, (uint64_t)v9, 0);
  if (v10 < 0)
    operator delete(v9[0]);
  v15[0] = *MEMORY[0x24BEDB7F0];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[2] = v7;
  v15[3] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v17);
}

void sub_21858D984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::random_forest_classifier::init_options(uint64_t a1, _QWORD *a2)
{
  turi::option_manager *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  std::string __p;
  std::string v36;
  void **v37;
  _QWORD v38[3];

  v38[2] = *MEMORY[0x24BDAC8D0];
  turi::supervised::xgboost::xgboost_model::init_options(a1, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&v36, "class_weights");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Weights (during training) assigned to each class.");
  *(_QWORD *)((char *)v38 + 5) = 0x700000000000000;
  v38[0] = 0;
  turi::option_manager::create_flexible_type_option((turi::option_manager *)(a1 + 224), &v36, &__p, (uint64_t)v38, 1);
  switch(BYTE4(v38[1]))
  {
    case 2:
      v5 = (unint64_t *)v38[0];
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = v38[0];
        if (v38[0])
        {
          if (*(char *)(v38[0] + 31) < 0)
            operator delete(*(void **)(v38[0] + 8));
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v11 = (unint64_t *)v38[0];
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v38[0];
        if (v38[0])
        {
          v15 = *(void **)(v38[0] + 8);
          if (v15)
          {
            *(_QWORD *)(v38[0] + 16) = v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v38[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v38[0];
        if (v38[0])
        {
          v37 = (void **)(v38[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v37);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v20 = (unint64_t *)v38[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v19 = v38[0];
        if (v38[0])
        {
          v37 = (void **)(v38[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v37);
LABEL_26:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v30 = (unint64_t *)v38[0];
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v38[0];
        if (v38[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v38[0] + 16));
          v9 = v33;
          v29 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v23 = (unint64_t *)v38[0];
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = v38[0];
        if (v38[0])
        {
          v27 = *(void **)(v38[0] + 48);
          if (v27)
          {
            *(_QWORD *)(v38[0] + 56) = v27;
            operator delete(v27);
          }
          v28 = *(void **)(v26 + 24);
          if (v28)
          {
            *(_QWORD *)(v26 + 32) = v28;
            operator delete(v28);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v26 + 8);
          v9 = v26;
          v29 = 2071181815;
LABEL_41:
          v10 = v29 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v9, v10);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  turi::supervised::xgboost::init_random_forest_common_options((turi::supervised::xgboost *)(a1 + 224), v4);
  turi::option_manager::set_options(a1 + 224, a2);
  v34 = (_QWORD *)turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
  turi::flexmap_to_varmap(v34, (uint64_t)&v36);
  turi::ml_model_base::add_or_update_state(a1, &v36);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v36, (char *)v36.__r_.__value_.__l.__size_);
}

void sub_21858DCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, char *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,int a23,int a24,char a25)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::random_forest_classifier::export_to_coreml(std::__shared_weak_count **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  char *v6;
  _BYTE v7[8];
  _QWORD *v8;
  std::string v9;
  _QWORD v10[4];
  int v11;
  char v12;
  _QWORD v13[5];
  _QWORD v14[6];

  v14[5] = *MEMORY[0x24BDAC8D0];
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(&v9, "model_type", "random_forest");
  v4 = ((uint64_t (*)(std::__shared_weak_count **))(*this)[2].__vftable)(this);
  std::string::basic_string[abi:ne180100]<0>(v10, "version");
  v12 = 0;
  v11 = 0;
  v10[3] = v4;
  v6 = (char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(v13, "class", &v6);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v14, "short_description", "Random Forest Classifier model.");
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v7, &v9, 4);
  for (i = 120; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v9 + i);
  turi::supervised::xgboost::xgboost_model::_export_xgboost_model(this, 1, 1, (uint64_t)v7, a2);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v7, v8);
}

void sub_21858DEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

const char *turi::supervised::xgboost::random_forest_regression::name(turi::supervised::xgboost::random_forest_regression *this)
{
  return "random_forest_regression";
}

std::string *turi::supervised::xgboost::random_forest_regression::uid(turi::supervised::xgboost::random_forest_regression *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&turi::supervised::xgboost::random_forest_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/random_forest.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::supervised::xgboost::random_forest_regression::uid(void)::_uid, &dword_217E69000);
  }
  return &turi::supervised::xgboost::random_forest_regression::uid(void)::_uid;
}

void sub_21858DFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *turi::supervised::xgboost::random_forest_classifier::name(turi::supervised::xgboost::random_forest_classifier *this)
{
  return "random_forest_classifier";
}

std::string *turi::supervised::xgboost::random_forest_classifier::uid(turi::supervised::xgboost::random_forest_classifier *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&turi::supervised::xgboost::random_forest_classifier::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/random_forest.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::supervised::xgboost::random_forest_classifier::uid(void)::_uid, &dword_217E69000);
  }
  return &turi::supervised::xgboost::random_forest_classifier::uid(void)::_uid;
}

void sub_21858E084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21858E238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_54_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_random_forest_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::supervised::check_target_column_type(uint64_t *a1, turi::sframe *a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v15;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v43;
  _QWORD *v45;
  std::string *p_str;
  std::string::size_type size;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v52;
  std::string *v53;
  std::string::size_type v54;
  _QWORD *v55;
  _QWORD *v56;
  std::string __str;
  void *__p[2];
  char v59;
  _QWORD v60[2];
  uint64_t v61;
  _QWORD v62[8];
  std::string v63;
  uint64_t v64;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v60);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (*((char *)a1 + 23) < 0)
  {
    v6 = a1[1];
    if (v6 != 14
      || (*(_QWORD *)*a1 == 0x6966697373616C63 ? (v7 = *(_QWORD *)(*a1 + 6) == 0x6D76735F72656966) : (v7 = 0), !v7))
    {
      if (v6 != 30)
        goto LABEL_31;
      v5 = (uint64_t *)*a1;
      goto LABEL_12;
    }
LABEL_29:
    v15 = "SVM";
    goto LABEL_30;
  }
  v4 = *((unsigned __int8 *)a1 + 23);
  if (v4 != 14)
  {
    v5 = a1;
    if (v4 != 30)
      goto LABEL_32;
LABEL_12:
    v8 = *v5;
    v9 = v5[1];
    v10 = v5[2];
    v11 = *(uint64_t *)((char *)v5 + 22);
    if (v8 != 0x6966697373616C63
      || v9 != 0x7369676F6C5F7265
      || v10 != 0x726765725F636974
      || v11 != 0x6E6F697373657267)
    {
      goto LABEL_31;
    }
    v15 = "Logistic Regression";
LABEL_30:
    MEMORY[0x219A19390](__p, v15);
    goto LABEL_31;
  }
  if (*a1 == 0x6966697373616C63 && *(uint64_t *)((char *)a1 + 6) == 0x6D76735F72656966)
    goto LABEL_29;
LABEL_31:
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    v17 = 0;
    if (v4 != 14)
    {
      if (v4 == 24)
        goto LABEL_63;
      v18 = a1;
      if (v4 != 30)
        goto LABEL_94;
LABEL_47:
      v24 = *v18;
      v25 = v18[1];
      v26 = v18[2];
      v27 = *(uint64_t *)((char *)v18 + 22);
      if (v24 == 0x6966697373616C63
        && v25 == 0x7369676F6C5F7265
        && v26 == 0x726765725F636974
        && v27 == 0x6E6F697373657267)
      {
        goto LABEL_106;
      }
      if (v17)
      {
        v19 = a1[1];
        goto LABEL_59;
      }
      if (v4 != 24)
        goto LABEL_94;
      v17 = 0;
LABEL_63:
      v31 = a1;
      goto LABEL_64;
    }
    v20 = a1;
    goto LABEL_39;
  }
  v19 = a1[1];
  if (v19 != 14)
    goto LABEL_45;
  v20 = (uint64_t *)*a1;
  v17 = 1;
LABEL_39:
  v21 = *v20;
  v22 = *(uint64_t *)((char *)v20 + 6);
  if (v21 == 0x6966697373616C63 && v22 == 0x6D76735F72656966)
    goto LABEL_106;
  if (!v17)
    goto LABEL_94;
  v19 = a1[1];
LABEL_45:
  if (v19 == 30)
  {
    v18 = (uint64_t *)*a1;
    v17 = 1;
    goto LABEL_47;
  }
LABEL_59:
  if (v19 != 24)
    goto LABEL_94;
  v31 = (uint64_t *)*a1;
  v17 = 1;
LABEL_64:
  v32 = *v31;
  v33 = v31[1];
  v34 = v31[2];
  if (v32 != 0x665F6D6F646E6172 || v33 != 0x6C635F747365726FLL || v34 != 0x7265696669737361)
  {
    if (v17)
    {
      if (a1[1] != 24)
        goto LABEL_94;
      v37 = (uint64_t *)*a1;
    }
    else
    {
      if (v4 != 24)
        goto LABEL_94;
      v37 = a1;
    }
    v38 = *v37;
    v39 = v37[1];
    v40 = v37[2];
    v41 = v38 == 0x6E6F697369636564 && v39 == 0x6C635F656572745FLL;
    if (!v41 || v40 != 0x7265696669737361)
    {
      if (v17)
      {
        if (a1[1] != 24)
          goto LABEL_94;
        a1 = (uint64_t *)*a1;
      }
      else if (v4 != 24)
      {
        goto LABEL_94;
      }
      v43 = *a1 == 0x5F646574736F6F62 && a1[1] == 0x6C635F7365657274;
      if (!v43 || a1[2] != 0x7265696669737361)
      {
LABEL_94:
        if (turi::sframe::column_type(a2, 0) >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          std::string::operator=(&v63, &__str);
          std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v62);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Column type of target '", 23);
          turi::sframe::column_name(a2, 0, &__str);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            size = __str.__r_.__value_.__l.__size_;
          v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_str, size);
          v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"' must be int or float.", 23);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v49);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
          turi::supervised::check_target_column_type(std::string,turi::sframe)::{lambda(void)#2}::operator()();
        }
        goto LABEL_107;
      }
    }
  }
LABEL_106:
  if ((turi::sframe::column_type(a2, 0) & 0xFFFFFFFD) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    std::string::operator=(&v63, &__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v62);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Column type of target '", 23);
    turi::sframe::column_name(a2, 0, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &__str;
    else
      v53 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v54 = __str.__r_.__value_.__l.__size_;
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"' must be int or str.", 21);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v56);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    turi::supervised::check_target_column_type(std::string,turi::sframe)::{lambda(void)#1}::operator()();
  }
LABEL_107:
  if (v59 < 0)
    operator delete(__p[0]);
  v60[0] = *MEMORY[0x24BEDB7F0];
  v50 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v60 + *(_QWORD *)(v60[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v61 = v50;
  v62[0] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v64);
}

void sub_21858E910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  __int128 *v7;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  void *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  __n128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned int *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96[2];
  char v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t *v100;
  std::__shared_weak_count *v101;
  std::vector<std::string> v102;
  __int128 *v103[3];
  const void **v104[3];
  __int128 v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  std::vector<std::string> v119;
  char **v120;
  char *v121[2];
  std::string v122;
  void **v123;
  void *v124;
  _BYTE v125[13];
  char v126;
  void *__p;
  void *v128;
  _BYTE v129[40];
  std::__shared_weak_count *v130;
  _BYTE v131[32];
  std::__shared_weak_count *v132;
  __int128 v133;
  char v134;
  void *v135;
  void *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  std::string __str;
  __int128 v142[17];
  _QWORD v143[3];
  _QWORD *v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v7 = *(__int128 **)(a3 + 40);
  if (*(__int128 **)(a3 + 48) == v7)
    turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v15 = *v7;
    v122.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v15;
  }
  v121[0] = 0;
  v121[1] = 0;
  v120 = v121;
  memset(&v119, 0, sizeof(v119));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1))
  {
    v124 = &v122;
    *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v120, (const void **)&v122.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v124)+ 14) = 6;
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
    else
      __str = v122;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v119, &__str, v142, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v117);
  v16 = v117;
  turi::sframe::select_column(a3, 0, &v116);
  turi::unity_sarray::construct_from_sarray(v16, (uint64_t *)&v116);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v114 = v117;
  v115 = v118;
  if (v118)
  {
    p_shared_owners = (unint64_t *)&v118->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  turi::gl_sarray::gl_sarray((uint64_t)&v124, &v114);
  v143[0] = &off_24D949D60;
  v144 = v143;
  turi::gl_sarray::apply((uint64_t)&v124, (uint64_t)v143, 0, 0, (uint64_t)&__str);
  v22 = turi::gl_sarray::any((turi::gl_sarray *)&__str);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__str);
  v23 = v144;
  if (v144 == v143)
  {
    v24 = 4;
    v23 = v143;
    goto LABEL_23;
  }
  if (v144)
  {
    v24 = 5;
LABEL_23:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v124);
  v25 = v115;
  if (v115)
  {
    v26 = (unint64_t *)&v115->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v22)
    turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_1::operator()();
  turi::ml_data::ml_data((turi::ml_data *)&v106);
  turi::sframe::select_column(a3, 0, &v105);
  turi::sframe::add_column(a2, &v105, (uint64_t)&v122, (uint64_t)&__str);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (!*((_QWORD *)&v105 + 1))
    goto LABEL_34;
  v29 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!a7)
      goto LABEL_53;
  }
  else
  {
LABEL_34:
    if (!a7)
      goto LABEL_53;
  }
  turi::ml_data::ml_data((uint64_t)&v124, (_QWORD *)(a1 + 376));
  turi::ml_data::operator=((uint64_t)&v106, (uint64_t)&v124);
  v31 = v132;
  if (v132)
  {
    v32 = (unint64_t *)&v132->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  *(_QWORD *)&v133 = v131;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  v34 = v130;
  if (v130)
  {
    v35 = (unint64_t *)&v130->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *(_QWORD *)&v133 = v129;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  if (__p)
  {
    v128 = __p;
    operator delete(__p);
  }
  v37 = *(std::__shared_weak_count **)v125;
  if (*(_QWORD *)v125)
  {
    v38 = (unint64_t *)(*(_QWORD *)v125 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_53:
  std::map<std::string,turi::ml_column_mode>::map[abi:ne180100]((uint64_t *)v104, (const void ***)&v120);
  turi::ml_data::fill((uint64_t)&v106, (uint64_t)&__str, (std::string::size_type)&v122, v104, 0, a6);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v104, (char *)v104[1]);
  v40 = a1 + 376;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(a1 + 376), &v106);
  turi::ml_metadata::feature_names(*(turi::ml_metadata **)(a1 + 376), 0, (uint64_t)v103);
  turi::ml_metadata::column_names(*(turi::ml_metadata **)(a1 + 376), &v102);
  turi::flexible_type_converter<std::string>::set(*(const std::string **)(*(_QWORD *)(a1 + 376) + 24), (uint64_t)&v133);
  *(_QWORD *)&v125[5] = *(_QWORD *)((char *)&v133 + 5);
  *(_QWORD *)v125 = v133;
  v125[12] = BYTE12(v133);
  LODWORD(v124) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v133, "target");
  v96[0] = &v133;
  v41 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)&v133, (uint64_t)&std::piecewise_construct, (_OWORD **)v96);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v41 + 14, (unsigned int *)&v124);
  if (v134 < 0)
    operator delete((void *)v133);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v124);
  turi::flexible_type_converter<std::vector<std::string>>::set(v103, (uint64_t)&v133);
  *(_QWORD *)&v125[5] = *(_QWORD *)((char *)&v133 + 5);
  *(_QWORD *)v125 = v133;
  v125[12] = BYTE12(v133);
  LODWORD(v124) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v133, "unpacked_features");
  v96[0] = &v133;
  v42 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)&v133, (uint64_t)&std::piecewise_construct, (_OWORD **)v96);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v42 + 14, (unsigned int *)&v124);
  if (v134 < 0)
    operator delete((void *)v133);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v124);
  turi::flexible_type_converter<std::vector<std::string>>::set((__int128 **)&v102, (uint64_t)&v133);
  *(_QWORD *)&v125[5] = *(_QWORD *)((char *)&v133 + 5);
  *(_QWORD *)v125 = v133;
  v125[12] = BYTE12(v133);
  LODWORD(v124) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v133, "features");
  v96[0] = &v133;
  v43 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)&v133, (uint64_t)&std::piecewise_construct, (_OWORD **)v96);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v43 + 14, (unsigned int *)&v124);
  if (v134 < 0)
    operator delete((void *)v133);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v124);
  if (*(_BYTE *)(a2 + 288))
    v44 = *(void **)(a2 + 32);
  else
    v44 = 0;
  v96[0] = v44;
  std::string::basic_string[abi:ne180100]<0>(&v124, "num_examples");
  *(_QWORD *)&v133 = &v124;
  v45 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)&v124, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v45 + 14, v96);
  if (v126 < 0)
    operator delete(v124);
  v96[0] = (void *)(0xAAAAAAAAAAAAAAABLL * (((char *)v102.__end_ - (char *)v102.__begin_) >> 3));
  std::string::basic_string[abi:ne180100]<0>(&v124, "num_features");
  *(_QWORD *)&v133 = &v124;
  v46 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)&v124, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v46 + 14, v96);
  if (v126 < 0)
    operator delete(v124);
  v96[0] = (void *)(0xAAAAAAAAAAAAAAABLL * (((char *)v103[1] - (char *)v103[0]) >> 3));
  std::string::basic_string[abi:ne180100]<0>(&v124, "num_unpacked_features");
  *(_QWORD *)&v133 = &v124;
  v47 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)&v124, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v47 + 14, v96);
  if (v126 < 0)
    operator delete(v124);
  v48.n128_f64[0] = turi::ml_data::ml_data((turi::ml_data *)&v133);
  if (*(_BYTE *)(a4 + 288) && *(_QWORD *)(a4 + 32))
  {
    turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(a1, a4, a5, a6, (uint64_t)&v124);
    turi::ml_data::operator=((uint64_t)&v133, (uint64_t)&v124);
    v49 = v132;
    if (v132)
    {
      v50 = (unint64_t *)&v132->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v96[0] = v131;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
    v52 = v130;
    if (v130)
    {
      v53 = (unint64_t *)&v130->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v96[0] = v129;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
    if (__p)
    {
      v128 = __p;
      operator delete(__p);
    }
    v55 = *(std::__shared_weak_count **)v125;
    if (*(_QWORD *)v125)
    {
      v56 = (unint64_t *)(*(_QWORD *)v125 + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  (*(void (**)(uint64_t, __n128))(*(_QWORD *)a1 + 216))(a1, v48);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)a1 + 240))(a1, &v106, &v133);
  v58 = *(std::__shared_weak_count **)(a1 + 384);
  v100 = *(uint64_t **)(a1 + 376);
  v101 = v58;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  turi::supervised::check_feature_means_and_variances(&v100, 0);
  v61 = v101;
  if (v101)
  {
    v62 = (unint64_t *)&v101->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1))
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v40 + 24) + 64) == 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v124);
      v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v125[8], (uint64_t)"One-class classification is not currently supported. ", 53);
      v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Please check your target column. ", 33);
      v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"If you used data for validation tracking (by default, a 5% split is used), ", 75);
      v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"please make sure the training data contains at least 2 classes.", 63);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v95);
      v96[0] = &v124;
      turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_2::operator()();
    }
    v64 = *(std::__shared_weak_count **)(a1 + 384);
    v98 = *(_QWORD *)v40;
    v99 = v64;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    turi::supervised::get_class_names((uint64_t)&v98, (uint64_t *)&v124);
    std::string::basic_string[abi:ne180100]<0>(v96, "classes");
    v123 = v96;
    v67 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)v96, (uint64_t)&std::piecewise_construct, (_OWORD **)&v123);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<std::vector<turi::flexible_type>>(v67 + 14, (__n128 *)&v124);
    if (v97 < 0)
      operator delete(v96[0]);
    v96[0] = &v124;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
    v68 = v99;
    if (v99)
    {
      v69 = (unint64_t *)&v99->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }
  v71 = v140;
  if (v140)
  {
    v72 = (unint64_t *)&v140->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v124 = &v139;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
  v74 = v138;
  if (v138)
  {
    v75 = (unint64_t *)&v138->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v124 = &v137;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v124 = &v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
  v124 = v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
  turi::sframe::~sframe((turi::sframe *)&__str);
  v80 = v113;
  if (v113)
  {
    v81 = (unint64_t *)&v113->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v83 = v111;
  if (v111)
  {
    v84 = (unint64_t *)&v111->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  v86 = v107;
  if (v107)
  {
    v87 = (unint64_t *)&v107->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v118;
  if (v118)
  {
    v90 = (unint64_t *)&v118->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v120, v121[0]);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
}

void sub_21858F628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  void *a71;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a71);
  turi::ml_data::~ml_data((turi::ml_data *)&STACK[0x2F0]);
  a71 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  a71 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x3B0]);
  turi::ml_data::~ml_data((turi::ml_data *)&a27);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  STACK[0x3B0] = (unint64_t)&a57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a60, (char *)a61);
  if (a68 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  __int128 *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char **v14;
  char *v15[2];
  __int128 v16;
  std::string v17;
  _BYTE v18[296];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  turi::ml_data::ml_data(a5, (_QWORD *)(a1 + 376));
  v9 = *(__int128 **)(a3 + 40);
  if (*(__int128 **)(a3 + 48) == v9)
    turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    v17.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v10;
  }
  turi::sframe::select_column(a3, 0, &v16);
  turi::sframe::add_column(a2, &v16, (uint64_t)&v17, (uint64_t)v18);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15[0] = 0;
  v15[1] = 0;
  v14 = v15;
  turi::ml_data::fill(a5, (uint64_t)v18, (std::string::size_type)&v17, (const void ***)&v14, 1, a4);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v14, v15[0]);
  turi::sframe::~sframe((turi::sframe *)v18);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_21858F9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  turi::ml_data *v22;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a10, a11);
  turi::sframe::~sframe((turi::sframe *)&a22);
  if (a20 < 0)
    operator delete(__p);
  turi::ml_data::~ml_data(v22);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::check_feature_means_and_variances(uint64_t **a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 **v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  turi::ml_data_internal::column_statistics *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t data;
  uint64_t size;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  std::string *v46;
  std::string::size_type v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int *v53;
  file_logger *v54;
  file_logger *started;
  uint64_t v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  std::string *v59;
  std::string *i;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 **v80;
  std::__shared_weak_count *v81;
  __int128 *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  unint64_t v87;
  turi::ml_data_internal::column_statistics *v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v97;
  int v98;
  std::string *v99;
  std::string::size_type v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *exception;
  void *__p;
  char v112;
  std::string v113;
  turi::ml_data_internal::column_statistics *v114;
  std::__shared_weak_count *v115;
  std::string *v116;
  std::string *v117;
  unint64_t v118;
  _QWORD v119[2];
  _QWORD v120[11];
  char v121;
  uint64_t v122;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v119);
  v117 = 0;
  v118 = 0;
  v116 = 0;
  v4 = **a1;
  if ((*a1)[1] != v4)
  {
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v4 + 16 * v5);
      v8 = *v6;
      v7 = (std::__shared_weak_count *)v6[1];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v12 = *(std::__shared_weak_count **)(v8 + 56);
      v114 = *(turi::ml_data_internal::column_statistics **)(v8 + 48);
      v115 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = (uint64_t *)(**a1 + 16 * v5);
      v16 = *v15;
      v17 = (std::__shared_weak_count *)v15[1];
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        v20 = *(_QWORD *)(v16 + 64);
        do
          v21 = __ldaxr(v18);
        while (__stlxr(v21 - 1, v18));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      else
      {
        v20 = *(_QWORD *)(v16 + 64);
      }
      v22 = (__int128 **)(**a1 + 16 * v5);
      v24 = *v22;
      v23 = (std::__shared_weak_count *)v22[1];
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 - 1, v25));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (*((char *)v24 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
      }
      else
      {
        v28 = *v24;
        v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v28;
      }
      if (v20)
      {
        v29 = 0;
        v30 = v114;
        while (fabs(turi::ml_data_internal::column_statistics::stdev(v30, v29)) >= 1.0e-20)
        {
          if (v20 == ++v29)
            goto LABEL_41;
        }
        v31 = v117;
        if ((unint64_t)v117 >= v118)
        {
          v33 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v116, (__int128 *)&v113);
        }
        else
        {
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v117, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
          }
          else
          {
            v32 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
            v117->__r_.__value_.__r.__words[2] = v113.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
          }
          v33 = v31 + 1;
        }
        v117 = v33;
      }
LABEL_41:
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      v34 = v115;
      if (v115)
      {
        v35 = (unint64_t *)&v115->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      ++v5;
      v4 = **a1;
    }
    while (v5 < ((*a1)[1] - v4) >> 4);
    if (v117 != v116 && (a2 & 1) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"WARNING: Detected extremely low variance for feature(s) ", 56);
      if ((char *)v117 - (char *)v116 != 24)
      {
        v37 = 0;
        v38 = 0;
        do
        {
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"'", 1);
          v40 = SHIBYTE(v116[v37].__r_.__value_.__r.__words[2]);
          if (v40 >= 0)
            data = (uint64_t)&v116[v37];
          else
            data = (uint64_t)v116[v37].__r_.__value_.__l.__data_;
          if (v40 >= 0)
            size = HIBYTE(v116[v37].__r_.__value_.__r.__words[2]);
          else
            size = v116[v37].__r_.__value_.__l.__size_;
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, data, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"', ", 3);
          ++v38;
          ++v37;
        }
        while (v38 < -1 - 0x5555555555555555 * (((char *)v117 - (char *)v116) >> 3));
      }
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"'", 1);
      v45 = SHIBYTE(v117[-1].__r_.__value_.__r.__words[2]);
      if (v45 >= 0)
        v46 = v117 - 1;
      else
        v46 = (std::string *)v117[-1].__r_.__value_.__l.__data_;
      if (v45 >= 0)
        v47 = HIBYTE(v117[-1].__r_.__value_.__r.__words[2]);
      else
        v47 = v117[-1].__r_.__value_.__l.__size_;
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"'", 1);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" because all entries are nearly the same.\n", 42);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Proceeding with model training using all features. ", 51);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"If the model does not provide results of adequate quality, ", 59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"exclude the above mentioned feature(s) from the input dataset.", 62);
      v53 = (int *)global_logger();
      if (v53[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v53))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v54 = (file_logger *)global_logger();
        started = file_logger::start_stream(v54, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning_utils-inl.hpp", "check_feature_means_and_variances", 275, 1);
        std::stringbuf::str();
        v56 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
        v57 = pthread_getspecific(*(_QWORD *)(v56 + 592));
        if (v57)
        {
          if (*((_BYTE *)v57 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(v57[2] - 24) + 16));
            v58 = std::locale::use_facet((const std::locale *)&v113, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
            std::locale::~locale((std::locale *)&v113);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v56);
            if (*(_DWORD *)(v56 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
            }
          }
        }
        if (v112 < 0)
          operator delete(__p);
      }
    }
  }
  v59 = v116;
  for (i = v117; i != v59; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(i[-1].__r_.__value_.__l.__data_);
  }
  v117 = v59;
  v61 = **a1;
  if ((*a1)[1] != v61)
  {
    v62 = 0;
    v63 = 0;
    do
    {
      v64 = (uint64_t *)(v61 + 16 * v62);
      v66 = *v64;
      v65 = (std::__shared_weak_count *)v64[1];
      if (v65)
      {
        v67 = (unint64_t *)&v65->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
        do
          v69 = __ldaxr(v67);
        while (__stlxr(v69 - 1, v67));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v70 = *(std::__shared_weak_count **)(v66 + 56);
      v114 = *(turi::ml_data_internal::column_statistics **)(v66 + 48);
      v115 = v70;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v73 = (uint64_t *)(**a1 + 16 * v62);
      v74 = *v73;
      v75 = (std::__shared_weak_count *)v73[1];
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
        v78 = *(_QWORD *)(v74 + 64);
        do
          v79 = __ldaxr(v76);
        while (__stlxr(v79 - 1, v76));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      else
      {
        v78 = *(_QWORD *)(v74 + 64);
      }
      v80 = (__int128 **)(**a1 + 16 * v62);
      v82 = *v80;
      v81 = (std::__shared_weak_count *)v80[1];
      if (v81)
      {
        v83 = (unint64_t *)&v81->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
        do
          v85 = __ldaxr(v83);
        while (__stlxr(v85 - 1, v83));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      if (*((char *)v82 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v82, *((_QWORD *)v82 + 1));
      }
      else
      {
        v86 = *v82;
        v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v82 + 2);
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v86;
      }
      if (v78)
      {
        v87 = 0;
        v88 = v114;
        while ((COERCE_UNSIGNED_INT64(turi::ml_data_internal::column_statistics::mean(v88, v87)) & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
        {
          if (v78 == ++v87)
            goto LABEL_118;
        }
        v89 = v117;
        if ((unint64_t)v117 >= v118)
        {
          v91 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v116, (__int128 *)&v113);
        }
        else
        {
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v117, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
          }
          else
          {
            v90 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
            v117->__r_.__value_.__r.__words[2] = v113.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
          }
          v91 = v89 + 1;
          v117 = v89 + 1;
        }
        v117 = v91;
        v63 = 1;
      }
LABEL_118:
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      v92 = v115;
      if (v115)
      {
        v93 = (unint64_t *)&v115->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      ++v62;
      v61 = **a1;
    }
    while (v62 < ((*a1)[1] - v61) >> 4);
    if ((v63 & 1) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"Detected inf/nan values in feature(s) ", 38);
      if ((char *)v117 - (char *)v116 != 24)
      {
        v103 = 0;
        v104 = 0;
        do
        {
          v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"'", 1);
          v106 = SHIBYTE(v116[v103].__r_.__value_.__r.__words[2]);
          if (v106 >= 0)
            v107 = (uint64_t)&v116[v103];
          else
            v107 = (uint64_t)v116[v103].__r_.__value_.__l.__data_;
          if (v106 >= 0)
            v108 = HIBYTE(v116[v103].__r_.__value_.__r.__words[2]);
          else
            v108 = v116[v103].__r_.__value_.__l.__size_;
          v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, v107, v108);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"', ", 3);
          ++v104;
          ++v103;
        }
        while (v104 < -1 - 0x5555555555555555 * (((char *)v117 - (char *)v116) >> 3));
      }
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"'", 1);
      v98 = SHIBYTE(v117[-1].__r_.__value_.__r.__words[2]);
      if (v98 >= 0)
        v99 = v117 - 1;
      else
        v99 = (std::string *)v117[-1].__r_.__value_.__l.__data_;
      if (v98 >= 0)
        v100 = HIBYTE(v117[-1].__r_.__value_.__r.__words[2]);
      else
        v100 = v117[-1].__r_.__value_.__l.__size_;
      v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v99, v100);
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"'. ", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"Cannot proceed with model training.", 35);
      v113.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
      turi::supervised::check_feature_means_and_variances(std::shared_ptr<turi::ml_metadata>,BOOL)::{lambda(void)#1}::operator()();
    }
  }
  v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
  v119[0] = *MEMORY[0x24BEDB7F0];
  v95 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v119 + *(_QWORD *)(v119[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v120[0] = v95;
  v120[1] = MEMORY[0x24BEDB848] + 16;
  if (v121 < 0)
    operator delete((void *)v120[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v122);
}

void sub_218590350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  a23 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void turi::supervised::get_class_names(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  unint64_t *v42;
  unint64_t v43;
  void **v44;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<turi::flexible_type>::resize(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 64));
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 32) + 80);
      if (v6 != v4)
      {
        v7 = v4 + 16 * v5;
        switch(*(_BYTE *)(v7 + 12))
        {
          case 2:
            v8 = *(unint64_t **)v7;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              v11 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_46;
              if (*((char *)v11 + 31) < 0)
                operator delete((void *)v11[1]);
              v12 = v11;
              v13 = 0x1012C404EF22A49;
              goto LABEL_45;
            }
            break;
          case 3:
            v14 = *(unint64_t **)v7;
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              v17 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_46;
              v18 = (void *)v17[1];
              if (v18)
              {
                v17[2] = (unint64_t)v18;
                operator delete(v18);
              }
              v12 = v17;
              v13 = 0x1080C409938AC02;
              goto LABEL_45;
            }
            break;
          case 4:
            v19 = *(unint64_t **)v7;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v22 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_46;
              v44 = (void **)(v22 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v44);
              goto LABEL_29;
            }
            break;
          case 5:
            v23 = *(unint64_t **)v7;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              v22 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_46;
              v44 = (void **)(v22 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v44);
LABEL_29:
              v12 = v22;
              v13 = 0x1020C405E66F15BLL;
              goto LABEL_45;
            }
            break;
          case 8:
            v26 = *(unint64_t **)v7;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = *(unint64_t **)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_46;
              boost::detail::shared_count::~shared_count((unsigned int **)v29 + 2);
              v12 = v29;
              v30 = -235920773;
              goto LABEL_44;
            }
            break;
          case 9:
            v31 = *(unint64_t **)v7;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v34 = *(unint64_t **)v7;
              if (*(_QWORD *)v7)
              {
                v35 = (void *)v34[6];
                if (v35)
                {
                  v34[7] = (unint64_t)v35;
                  operator delete(v35);
                }
                v36 = (void *)v34[3];
                if (v36)
                {
                  v34[4] = (unint64_t)v36;
                  operator delete(v36);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v34 + 1));
                v12 = v34;
                v30 = 2071181815;
LABEL_44:
                v13 = v30 | 0x1030C4000000000;
LABEL_45:
                MEMORY[0x219A19A08](v12, v13);
              }
LABEL_46:
              *(_QWORD *)v7 = 0;
            }
            break;
          default:
            break;
        }
        v37 = v6 + 16 * v5;
        v38 = *(_QWORD *)v37;
        *(_QWORD *)(v7 + 5) = *(_QWORD *)(v37 + 5);
        *(_QWORD *)v7 = v38;
        LODWORD(v37) = *(unsigned __int8 *)(v37 + 12);
        *(_BYTE *)(v7 + 12) = v37;
        v39 = v37 > 9;
        v40 = (1 << v37) & 0x33C;
        if (!v39 && v40 != 0)
        {
          v42 = *(unint64_t **)v7;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
      }
      ++v5;
      v4 = *a2;
    }
    while (v5 < (a2[1] - *a2) >> 4);
  }
}

void sub_2185906BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::impute_missing_columns_using_current_metadata(turi::supervised::supervised_learning_model_base *this@<X0>, const turi::sframe *a2@<X1>, turi::sframe *a3@<X8>)
{
  const turi::sframe *v3;
  uint64_t v5;
  turi::ml_metadata *v6;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer begin;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t i;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  const std::string::value_type ***v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  const turi::sframe *v65;
  __int128 v67;
  __int128 v68;
  std::string v69;
  std::vector<std::string> v70;
  void **v71;
  _BYTE v72[286];
  const std::string::value_type **v73[3];
  const std::string::value_type ***v74;
  _BYTE v75[24];
  _BYTE *v76;
  _BYTE v77[24];
  _BYTE *v78;
  _BYTE v79[296];
  uint64_t v80;

  v3 = a2;
  v80 = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe((turi::sframe *)v79, a2);
  if (*((_BYTE *)v3 + 288) && (v5 = *((_QWORD *)v3 + 4)) != 0)
  {
    v6 = (turi::ml_metadata *)*((_QWORD *)this + 47);
    if (!v6)
      turi::supervised::supervised_learning_model_base::impute_missing_columns_using_current_metadata(turi::sframe const&)const::$_0::operator()();
    turi::ml_metadata::column_names(v6, &v70);
    begin = v70.__begin_;
    end = v70.__end_;
    if (v70.__begin_ != v70.__end_)
    {
      v65 = v3;
      while (1)
      {
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v69, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        }
        else
        {
          v9 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          v69.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v9;
        }
        if (!turi::sframe::contains_column((uint64_t)v3, (unsigned __int8 **)&v69))
          break;
LABEL_92:
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (++begin == end)
          goto LABEL_95;
      }
      v10 = operator new();
      turi::sarray<turi::flexible_type>::sarray(v10);
      std::shared_ptr<turi::sarray<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(&v68, v10);
      turi::sarray<turi::flexible_type>::open_for_write(v68, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 0);
      v11 = v68;
      v12 = (_QWORD *)*((_QWORD *)this + 47);
      v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)(v12 + 10), (const void **)&v69.__r_.__value_.__l.__data_);
      if (v12 + 11 == (_QWORD *)v13)
      {
        v73[0] = (const std::string::value_type **)&v69;
        turi::ml_metadata::column_index(std::string const&,BOOL)const::{lambda(void)#1}::operator()(v73);
      }
      v14 = (uint64_t *)(*v12 + 16 * *(_QWORD *)(v13 + 56));
      v15 = *v14;
      v16 = (std::__shared_weak_count *)v14[1];
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = *(_BYTE *)(v15 + 28);
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      else
      {
        v19 = *(_BYTE *)(v15 + 28);
      }
      turi::sarray<turi::flexible_type>::set_type(v11, v19);
      (*(void (**)(const std::string::value_type ***__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v68 + 32))(v73, v68, 0);
      for (i = 0; i != v5; ++i)
      {
        *(_QWORD *)&v72[5] = 0x700000000000000;
        *(_QWORD *)v72 = 0;
        if (!v76)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v76 + 48))(v76, v72);
        switch(v72[12])
        {
          case 2:
            v22 = *(unint64_t **)v72;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v25 = *(_QWORD *)v72;
              if (*(_QWORD *)v72)
              {
                if (*(char *)(*(_QWORD *)v72 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)v72 + 8));
                v26 = v25;
                v27 = 0x1012C404EF22A49;
                goto LABEL_62;
              }
            }
            break;
          case 3:
            v39 = *(unint64_t **)v72;
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              v42 = *(_QWORD *)v72;
              if (*(_QWORD *)v72)
              {
                v43 = *(void **)(*(_QWORD *)v72 + 8);
                if (v43)
                {
                  *(_QWORD *)(*(_QWORD *)v72 + 16) = v43;
                  operator delete(v43);
                }
                v26 = v42;
                v27 = 0x1080C409938AC02;
                goto LABEL_62;
              }
            }
            break;
          case 4:
            v28 = *(unint64_t **)v72;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              v31 = *(_QWORD *)v72;
              if (*(_QWORD *)v72)
              {
                v71 = (void **)(*(_QWORD *)v72 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v71);
                goto LABEL_55;
              }
            }
            break;
          case 5:
            v44 = *(unint64_t **)v72;
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              v31 = *(_QWORD *)v72;
              if (*(_QWORD *)v72)
              {
                v71 = (void **)(*(_QWORD *)v72 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v71);
LABEL_55:
                v26 = v31;
                v27 = 0x1020C405E66F15BLL;
                goto LABEL_62;
              }
            }
            break;
          case 8:
            v47 = *(unint64_t **)v72;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              v50 = *(_QWORD *)v72;
              if (*(_QWORD *)v72)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v72 + 16));
                v26 = v50;
                v38 = -235920773;
                goto LABEL_61;
              }
            }
            break;
          case 9:
            v32 = *(unint64_t **)v72;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              v35 = *(_QWORD *)v72;
              if (*(_QWORD *)v72)
              {
                v36 = *(void **)(*(_QWORD *)v72 + 48);
                if (v36)
                {
                  *(_QWORD *)(*(_QWORD *)v72 + 56) = v36;
                  operator delete(v36);
                }
                v37 = *(void **)(v35 + 24);
                if (v37)
                {
                  *(_QWORD *)(v35 + 32) = v37;
                  operator delete(v37);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35 + 8);
                v26 = v35;
                v38 = 2071181815;
LABEL_61:
                v27 = v38 | 0x1030C4000000000;
LABEL_62:
                MEMORY[0x219A19A08](v26, v27);
              }
            }
            break;
          default:
            continue;
        }
      }
      (*(void (**)(_QWORD))(*(_QWORD *)v68 + 40))(v68);
      v67 = v68;
      v3 = v65;
      if (*((_QWORD *)&v68 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      turi::sframe::add_column((uint64_t)v79, &v67, (uint64_t)&v69, (uint64_t)v72);
      turi::sframe::operator=((uint64_t)v79, (uint64_t)v72);
      turi::sframe::~sframe((turi::sframe *)v72);
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
      if (*((_QWORD *)&v67 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = v78;
      if (v78 == v77)
      {
        v56 = v77;
        v57 = 4;
      }
      else
      {
        if (!v78)
          goto LABEL_77;
        v57 = 5;
      }
      (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_77:
      v58 = v76;
      if (v76 == v75)
      {
        v58 = v75;
        v59 = 4;
      }
      else
      {
        if (!v76)
          goto LABEL_82;
        v59 = 5;
      }
      (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_82:
      v60 = v74;
      if (v74 == v73)
      {
        v60 = v73;
        v61 = 4;
      }
      else
      {
        if (!v74)
        {
LABEL_87:
          v62 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
          if (*((_QWORD *)&v68 + 1))
          {
            v63 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          goto LABEL_92;
        }
        v61 = 5;
      }
      ((void (*)(void))(*v60)[v61])();
      goto LABEL_87;
    }
LABEL_95:
    *(_QWORD *)v72 = &v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    turi::sframe::sframe(a3, (uint64_t)v79);
  }
  else
  {
    turi::sframe::sframe(a3, v3);
  }
  turi::sframe::~sframe((turi::sframe *)v79);
}

void sub_218590C88(_Unwind_Exception *a1)
{
  turi::sframe::~sframe((turi::sframe *)&STACK[0x208]);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char **v7;
  char *v8[2];
  void *__p[2];
  char v10;

  turi::ml_data::ml_data(a4, (_QWORD *)(a1 + 376));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v8[0] = 0;
  v8[1] = 0;
  v7 = v8;
  turi::ml_data::fill(a4, a2, (std::string::size_type)__p, (const void ***)&v7, 1, a3);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v7, v8[0]);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_218590F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  turi::ml_data *v17;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a9, a10);
  if (a17 < 0)
    operator delete(__p);
  turi::ml_data::~ml_data(v17);
  _Unwind_Resume(a1);
}

unint64_t turi::supervised::supervised_learning_model_base::num_features(turi::supervised::supervised_learning_model_base *this)
{
  int *v2;
  unint64_t v3;
  void *__p[2];
  char v6;
  std::string *v7;
  int v8;
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "num_features");
  v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  v7 = (std::string *)v9;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*v2, *v2 ^ (*v2 >> 31), &v7, (uint64_t)(v2 + 2));
  v8 = *v2 ^ (*v2 >> 31);
  if (v6 < 0)
    operator delete(__p[0]);
  v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)__p, &v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v8);
  return v3;
}

void sub_218591098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, unsigned int a17)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a17);
  _Unwind_Resume(a1);
}

unint64_t turi::supervised::supervised_learning_model_base::num_unpacked_features(turi::supervised::supervised_learning_model_base *this)
{
  int *v2;
  unint64_t v3;
  void *__p[2];
  char v6;
  std::string *v7;
  int v8;
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "num_unpacked_features");
  v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  v7 = (std::string *)v9;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*v2, *v2 ^ (*v2 >> 31), &v7, (uint64_t)(v2 + 2));
  v8 = *v2 ^ (*v2 >> 31);
  if (v6 < 0)
    operator delete(__p[0]);
  v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)__p, &v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v8);
  return v3;
}

void sub_21859119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, unsigned int a17)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a17);
  _Unwind_Resume(a1);
}

unint64_t turi::supervised::supervised_learning_model_base::num_examples(turi::supervised::supervised_learning_model_base *this)
{
  int *v2;
  unint64_t v3;
  void *__p[2];
  char v6;
  std::string *v7;
  int v8;
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "num_examples");
  v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  v7 = (std::string *)v9;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*v2, *v2 ^ (*v2 >> 31), &v7, (uint64_t)(v2 + 2));
  v8 = *v2 ^ (*v2 >> 31);
  if (v6 < 0)
    operator delete(__p[0]);
  v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)__p, &v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v8);
  return v3;
}

void sub_2185912A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, unsigned int a17)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a17);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::get_train_stats(turi::supervised::supervised_learning_model_base *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  std::string *v6;
  char *v7;
  int *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  void *v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  std::string *v70;
  std::string *v71;
  std::string *v72;
  std::string *v73;
  __int128 v74;
  _QWORD v75[3];
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v74, "num_examples");
  std::string::basic_string[abi:ne180100]<0>(v75, "num_features");
  v70 = 0;
  v71 = 0;
  v72 = 0;
  *(_QWORD *)&v76 = &v70;
  BYTE8(v76) = 0;
  v70 = (std::string *)operator new(0x30uLL);
  v71 = v70;
  v72 = v70 + 2;
  v4 = 0;
  v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v72, &v74, &v76, v70);
  do
  {
    if (SHIBYTE(v75[v4 + 2]) < 0)
      operator delete((void *)v75[v4]);
    v4 -= 3;
  }
  while (v4 != -6);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v5 = v70;
  v6 = v71;
  if (v70 != v71)
  {
    v7 = (char *)this + 296;
    do
    {
      v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)&v5->__r_.__value_.__l.__data_);
      turi::variant_converter<turi::flexible_type,void>::get(v8, (uint64_t)&v76);
      v73 = v5;
      v9 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v5->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v73);
      v10 = v9;
      v11 = v9 + 7;
      if (&v76 == (__int128 *)(v9 + 7))
      {
        switch(BYTE12(v76))
        {
          case 2:
            v41 = (unint64_t *)v76;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              v44 = v76;
              if ((_QWORD)v76)
              {
                if (*(char *)(v76 + 31) < 0)
                  operator delete(*(void **)(v76 + 8));
                v45 = v44;
                v46 = 0x1012C404EF22A49;
                goto LABEL_95;
              }
            }
            break;
          case 3:
            v47 = (unint64_t *)v76;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              v50 = v76;
              if ((_QWORD)v76)
              {
                v51 = *(void **)(v76 + 8);
                if (v51)
                {
                  *(_QWORD *)(v76 + 16) = v51;
                  operator delete(v51);
                }
                v45 = v50;
                v46 = 0x1080C409938AC02;
                goto LABEL_95;
              }
            }
            break;
          case 4:
            v52 = (unint64_t *)v76;
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              v55 = v76;
              if ((_QWORD)v76)
              {
                *(_QWORD *)&v74 = v76 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
                goto LABEL_79;
              }
            }
            break;
          case 5:
            v56 = (unint64_t *)v76;
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              v55 = v76;
              if ((_QWORD)v76)
              {
                *(_QWORD *)&v74 = v76 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
LABEL_79:
                v45 = v55;
                v46 = 0x1020C405E66F15BLL;
                goto LABEL_95;
              }
            }
            break;
          case 8:
            v59 = (unint64_t *)v76;
            do
            {
              v60 = __ldaxr(v59);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v59));
            if (!v61)
            {
              v62 = v76;
              if ((_QWORD)v76)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v76 + 16));
                v45 = v62;
                v63 = -235920773;
                goto LABEL_94;
              }
            }
            break;
          case 9:
            v64 = (unint64_t *)v76;
            do
            {
              v65 = __ldaxr(v64);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, v64));
            if (!v66)
            {
              v67 = v76;
              if ((_QWORD)v76)
              {
                v68 = *(void **)(v76 + 48);
                if (v68)
                {
                  *(_QWORD *)(v76 + 56) = v68;
                  operator delete(v68);
                }
                v69 = *(void **)(v67 + 24);
                if (v69)
                {
                  *(_QWORD *)(v67 + 32) = v69;
                  operator delete(v69);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v67 + 8);
                v45 = v67;
                v63 = 2071181815;
LABEL_94:
                v46 = v63 | 0x1030C4000000000;
LABEL_95:
                MEMORY[0x219A19A08](v45, v46);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        switch(*((_BYTE *)v9 + 68))
        {
          case 2:
            v12 = (unint64_t *)*v11;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v15 = (unint64_t *)*v11;
              if (!*v11)
                goto LABEL_50;
              if (*((char *)v15 + 31) < 0)
                operator delete((void *)v15[1]);
              v16 = v15;
              v17 = 0x1012C404EF22A49;
              goto LABEL_49;
            }
            break;
          case 3:
            v18 = (unint64_t *)*v11;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = (unint64_t *)*v11;
              if (!*v11)
                goto LABEL_50;
              v22 = (void *)v21[1];
              if (v22)
              {
                v21[2] = (unint64_t)v22;
                operator delete(v22);
              }
              v16 = v21;
              v17 = 0x1080C409938AC02;
              goto LABEL_49;
            }
            break;
          case 4:
            v23 = (unint64_t *)*v11;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              v26 = (unint64_t *)*v11;
              if (!*v11)
                goto LABEL_50;
              *(_QWORD *)&v74 = v26 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
              goto LABEL_33;
            }
            break;
          case 5:
            v27 = (unint64_t *)*v11;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              v26 = (unint64_t *)*v11;
              if (!*v11)
                goto LABEL_50;
              *(_QWORD *)&v74 = v26 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
LABEL_33:
              v16 = v26;
              v17 = 0x1020C405E66F15BLL;
              goto LABEL_49;
            }
            break;
          case 8:
            v30 = (unint64_t *)*v11;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = (unint64_t *)*v11;
              if (!*v11)
                goto LABEL_50;
              boost::detail::shared_count::~shared_count((unsigned int **)v33 + 2);
              v16 = v33;
              v34 = -235920773;
              goto LABEL_48;
            }
            break;
          case 9:
            v35 = (unint64_t *)*v11;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v38 = (unint64_t *)*v11;
              if (*v11)
              {
                v39 = (void *)v38[6];
                if (v39)
                {
                  v38[7] = (unint64_t)v39;
                  operator delete(v39);
                }
                v40 = (void *)v38[3];
                if (v40)
                {
                  v38[4] = (unint64_t)v40;
                  operator delete(v40);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v38 + 1));
                v16 = v38;
                v34 = 2071181815;
LABEL_48:
                v17 = v34 | 0x1030C4000000000;
LABEL_49:
                MEMORY[0x219A19A08](v16, v17);
              }
LABEL_50:
              *v11 = 0;
            }
            break;
          default:
            break;
        }
        *v11 = v76;
        *(uint64_t *)((char *)v11 + 5) = *(_QWORD *)((char *)&v76 + 5);
        *((_BYTE *)v10 + 68) = BYTE12(v76);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  *(_QWORD *)&v74 = &v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
}

void sub_218591824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  uint64_t v26;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  v26 = 0;
  while (1)
  {
    if (*((char *)&a22 + v26 + 7) < 0)
      operator delete(*(void **)((char *)&a20 + v26));
    v26 -= 24;
    if (v26 == -48)
      _Unwind_Resume(a1);
  }
}

void turi::supervised::supervised_learning_model_base::get_feature_names(turi::supervised::supervised_learning_model_base *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  char *v3;
  int *v4;
  void *__p[2];
  char v6;

  v3 = (char *)this + 296;
  std::string::basic_string[abi:ne180100]<0>(__p, "features");
  v4 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v3, (const void **)__p);
  turi::variant_converter<std::vector<std::string>,void>::get(v4, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_2185919FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::supervised::supervised_learning_model_base::get_target_name(turi::supervised::supervised_learning_model_base *this@<X0>, std::string *a2@<X8>)
{
  char *v3;
  int *v4;
  void *__p[2];
  char v6;

  v3 = (char *)this + 296;
  std::string::basic_string[abi:ne180100]<0>(__p, "target");
  v4 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v3, (const void **)__p);
  turi::variant_converter<std::string,void>::get(v4, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_218591A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *turi::supervised::supervised_learning_model_base::get_tracking_metrics@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[43], this[44], 0xAAAAAAAAAAAAAAABLL * (((char *)this[44] - (char *)this[43]) >> 3));
}

void turi::supervised::supervised_learning_model_base::get_metric_display_name(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 *v5;
  __int128 v6;
  uint64_t i;
  unsigned __int8 v8[48];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[7];

  v12[6] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v8, "accuracy", "Accuracy");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v9, "auc", "Area Under Curve");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v10, "log_loss", "Log Loss");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v11, "max_error", "Max Error");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v12, "rmse", "Root-Mean-Square Error");
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)turi::supervised::supervised_learning_model_base::get_metric_display_name(std::string const&)const::display_names, v8, 5);
    for (i = 192; i != -48; i -= 48)
      std::pair<std::string,std::string>::~pair((uint64_t)&v8[i]);
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100], turi::supervised::supervised_learning_model_base::get_metric_display_name(std::string const&)const::display_names, &dword_217E69000);
  }
  v5 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(turi::supervised::supervised_learning_model_base::get_metric_display_name(std::string const&)const::display_names, (unsigned __int8 *)a1);
  if (v5)
  {
    if ((char)v5[63] < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)v5 + 5), *((_QWORD *)v5 + 6));
    }
    else
    {
      v6 = *(_OWORD *)(v5 + 40);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 7);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
    }
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_218591CA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 192; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::classify(uint64_t a1@<X0>, uint64_t a2@<X1>, turi::sframe *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int *v14;
  file_logger *v15;
  file_logger *started;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  std::string::size_type v20;
  turi::thread_pool *v21;
  _BYTE *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  turi::thread_pool *instance;
  turi::thread *v31;
  turi::thread_pool *tls_data;
  uint64_t v33;
  turi::thread_pool *v34;
  uint64_t v35;
  double v36;
  turi::thread *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  _QWORD *exception;
  __int128 v53;
  __int128 v54;
  int v55[2];
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  void *__p[2];
  _BYTE *v63;
  char *v64;
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void *v70[2];
  unint64_t v71;
  uint64_t v72;
  std::locale v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe(a3);
  std::string::basic_string[abi:ne180100]<0>(v70, "class");
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 120))(&v61, a1, a2, v70);
  std::string::basic_string[abi:ne180100]<0>(__p, "class");
  turi::sframe::add_column((uint64_t)a3, &v61, (uint64_t)__p, (uint64_t)&v73);
  turi::sframe::operator=((uint64_t)a3, (uint64_t)&v73);
  turi::sframe::~sframe((turi::sframe *)&v73);
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v71) < 0)
    operator delete(v70[0]);
  std::string::basic_string[abi:ne180100]<0>(&v73, "num_classes");
  v9 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&v73.__locale_);
  v10 = turi::variant_converter<unsigned long,void>::get((uint64_t)v70, v9);
  if (v74 < 0)
    operator delete(v73.__locale_);
  if (v10 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v73, "probability");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, std::locale *))(*(_QWORD *)a1 + 120))(&v59, a1, a2, &v73);
    if (v74 < 0)
      operator delete(v73.__locale_);
    v11 = operator new();
    turi::sarray<turi::flexible_type>::sarray(v11);
    std::shared_ptr<turi::sarray<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(&v58, v11);
    turi::sarray<turi::flexible_type>::open_for_write(v58, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 0);
    turi::sarray<turi::flexible_type>::set_type(v58, 1);
    v12 = v59;
    v13 = (_BYTE *)v58;
    v56 = 0;
    v57 = 0;
    *(_QWORD *)v55 = &v56;
    v14 = (int *)global_logger();
    if (v14[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v14))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v15 = (file_logger *)global_logger();
      started = file_logger::start_stream(v15, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "transform", 67, 1);
      v17 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v17 && *((_BYTE *)v17 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"Function entry", 14);
      v18 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v18)
      {
        if (*((_BYTE *)v18 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(v18[2] - 24) + 16));
          v19 = std::locale::use_facet(&v73, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
          std::locale::~locale(&v73);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    if (!*(_BYTE *)(v12 + 248) || *(_BYTE *)(v12 + 249))
      turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#1}::operator()();
    if (!v13[248] || !v13[249])
      turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#2}::operator()();
    v20 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 24))(v13);
    turi::sarray<turi::flexible_type>::get_reader(v12, v20, &v68);
    v65 = 0;
    v66 = 0;
    v67 = 0;
    if (v57)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::vector<unsigned long>>>(0, *(char **)v55, (char *)&v56, (uint64_t)&v65, (char **)&v73);
      v23 = v65;
      v22 = v66;
    }
    else
    {
      v27 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 24))(v13);
      std::vector<unsigned long>::resize((uint64_t)&v65, v27);
      v23 = v65;
      v22 = v66;
      if (v66 == v65)
      {
        v23 = v66;
      }
      else
      {
        v28 = 0;
        v29 = (v66 - (_BYTE *)v65) >> 3;
        if (v29 <= 1)
          v29 = 1;
        do
        {
          v23[v28] = v28;
          ++v28;
        }
        while (v29 != v28);
      }
    }
    __p[0] = &v65;
    __p[1] = &v68;
    v63 = v13;
    v64 = &v69;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v21);
    v31 = (turi::thread *)turi::thread_pool::size(instance);
    tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v31);
    v33 = (v22 - (_BYTE *)v23) >> 3;
    if (*((_BYTE *)tls_data + 8) || (unint64_t)v31 <= 1)
    {
      if (v22 != (_BYTE *)v23)
      {
        v39 = 0;
        do
          turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()((uint64_t)__p, v39++);
        while (v33 != v39);
      }
    }
    else
    {
      v34 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v73, v34);
      v35 = 0;
      v36 = (double)(unint64_t)v33 / (double)(unint64_t)v31;
      do
      {
        v37 = (turi::thread *)(v35 + 1);
        v38 = (unint64_t)(v36 * (double)(unint64_t)(v35 + 1) + 0.0);
        if ((turi::thread *)v35 == (turi::thread *)((char *)v31 - 1))
          v38 = (v22 - (_BYTE *)v23) >> 3;
        v71 = (unint64_t)(v36 * (double)(unint64_t)v35 + 0.0);
        v72 = v38;
        v70[0] = (char *)boost::function0<void>::assign_to<void turi::parallel_for<void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1}>(turi::sarray<turi::flexible_type> &)::stored_vtable
               + 1;
        v70[1] = __p;
        turi::parallel_task_queue::launch((uint64_t)&v73, (uint64_t)v70, v35);
        boost::function0<void>::~function0((uint64_t *)v70);
        v35 = (uint64_t)v37;
      }
      while (v37 != v31);
      turi::parallel_task_queue::join((turi::parallel_task_queue *)&v73);
      turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v73);
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    v40 = v68;
    v68 = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v55, v56);
    (*(void (**)(_QWORD))(*(_QWORD *)v58 + 40))(v58);
    v54 = v58;
    if (*((_QWORD *)&v58 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::string::basic_string[abi:ne180100]<0>(v70, "probability");
    turi::sframe::add_column((uint64_t)a3, &v54, (uint64_t)v70, (uint64_t)&v73);
    turi::sframe::operator=((uint64_t)a3, (uint64_t)&v73);
    turi::sframe::~sframe((turi::sframe *)&v73);
    if (SHIBYTE(v71) < 0)
      operator delete(v70[0]);
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v51 = __ldaxr(p_shared_owners);
      while (__stlxr(v51 - 1, p_shared_owners));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v70, "max_probability");
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 120))(&v53, a1, a2, v70);
    std::string::basic_string[abi:ne180100]<0>(__p, "probability");
    turi::sframe::add_column((uint64_t)a3, &v53, (uint64_t)__p, (uint64_t)&v73);
    turi::sframe::operator=((uint64_t)a3, (uint64_t)&v73);
    turi::sframe::~sframe((turi::sframe *)&v73);
    if (SHIBYTE(v63) < 0)
      operator delete(__p[0]);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(v71) < 0)
      operator delete(v70[0]);
  }
}

void sub_218592424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,std::locale a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  turi::sframe *v46;

  std::locale::~locale(&a41);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a13, a14);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  turi::sframe::~sframe(v46);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::supervised_learning_model_base::predict@<X0>(turi::thread_pool *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  turi::thread_pool *instance;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  int *v14;
  unint64_t v15;
  int *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  char v31;
  void **v33;
  void **v34;
  uint64_t v35;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void **v44;
  char v45;
  unint64_t v46;
  void *__p[2];
  uint64_t v48;
  void **v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v9 = turi::thread_pool::size(instance);
  v45 = turi::supervised::prediction_type_enum_from_name((void *)a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
  v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a1 + 296, (const void **)__p);
  v11 = v10;
  if (SHIBYTE(v48) < 0)
  {
    operator delete(__p[0]);
    if (v11)
      goto LABEL_3;
  }
  else if (v10)
  {
LABEL_3:
    std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
    v12 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)__p);
    v13 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v44, v12);
    goto LABEL_6;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num_features");
  v14 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)__p);
  v13 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v44, v14);
LABEL_6:
  v15 = v13;
  v46 = v13;
  if (SHIBYTE(v48) < 0)
    operator delete(__p[0]);
  if ((*(unsigned int (**)(turi::thread_pool *))(*(_QWORD *)a1 + 232))(a1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "num_classes");
    v16 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)__p);
    v17 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v44, v16);
    if (SHIBYTE(v48) < 0)
      operator delete(__p[0]);
    if (*(char *)(a3 + 23) < 0)
    {
      v19 = *(_QWORD *)(a3 + 8);
      if (v19 == 6 && **(_DWORD **)a3 == 1735549293 && *(_WORD *)(*(_QWORD *)a3 + 4) == 28265)
      {
        if (v17 < 3)
          goto LABEL_33;
        goto LABEL_67;
      }
      if (v19 != 11)
      {
LABEL_33:
        v46 = v15 / (v17 - 1);
        goto LABEL_34;
      }
      v18 = *(uint64_t **)a3;
    }
    else
    {
      if (*(_BYTE *)(a3 + 23) == 6)
      {
        if (*(_DWORD *)a3 != 1735549293 || *(_WORD *)(a3 + 4) != 28265)
          goto LABEL_33;
        goto LABEL_32;
      }
      v18 = (uint64_t *)a3;
      if (*(_BYTE *)(a3 + 23) != 11)
        goto LABEL_33;
    }
    v21 = *v18;
    v22 = *(uint64_t *)((char *)v18 + 3);
    if (v21 != 0x6C696261626F7270 || v22 != 0x7974696C69626162)
      goto LABEL_33;
LABEL_32:
    if (v17 <= 2)
      goto LABEL_33;
LABEL_67:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Output type '", 13);
    v38 = *(char *)(a3 + 23);
    if (v38 >= 0)
      v39 = a3;
    else
      v39 = *(_QWORD *)a3;
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a3 + 23);
    else
      v40 = *(_QWORD *)(a3 + 8);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"' is only supported for binary classification.", 46);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" For multi-class classification, use predict_topk() instead.", 60);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v43);
    v44 = __p;
    turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_0::operator()();
  }
LABEL_34:
  v25 = operator new();
  turi::sarray<turi::flexible_type>::sarray(v25);
  std::shared_ptr<turi::sarray<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(a4, v25);
  turi::sarray<turi::flexible_type>::open_for_write(*a4, v9, 0);
  if (*(char *)(a3 + 23) < 0)
  {
    v27 = *(_QWORD *)(a3 + 8);
    if (v27 != 5 || (**(_DWORD **)a3 == 1935764579 ? (v28 = *(_BYTE *)(*(_QWORD *)a3 + 4) == 115) : (v28 = 0), !v28))
    {
      if (v27 != 18)
      {
LABEL_58:
        v31 = 1;
        goto LABEL_59;
      }
      a3 = *(_QWORD *)a3;
LABEL_45:
      if (*(_QWORD *)a3 == 0x6C696261626F7270
        && *(_QWORD *)(a3 + 8) == 0x746365765F797469
        && *(_WORD *)(a3 + 16) == 29295)
      {
        v31 = 3;
        goto LABEL_59;
      }
      goto LABEL_58;
    }
  }
  else
  {
    v26 = *(unsigned __int8 *)(a3 + 23);
    if (v26 != 5)
    {
      if (v26 != 18)
        goto LABEL_58;
      goto LABEL_45;
    }
    if (*(_DWORD *)a3 != 1935764579 || *(_BYTE *)(a3 + 4) != 115)
      goto LABEL_58;
  }
  v31 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 47) + 24) + 28);
LABEL_59:
  turi::sarray<turi::flexible_type>::set_type(*a4, v31);
  v33 = (void **)operator new(0x30uLL);
  *v33 = &off_24D949E00;
  v33[1] = &v46;
  v33[2] = a4;
  v33[3] = a2;
  v33[4] = a1;
  v33[5] = &v45;
  v49 = v33;
  turi::in_parallel((turi::thread_pool *)__p);
  v34 = v49;
  if (v49 == __p)
  {
    v35 = 4;
    v34 = __p;
    goto LABEL_63;
  }
  if (v49)
  {
    v35 = 5;
LABEL_63:
    (*((void (**)(void))*v34 + v35))();
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 40))(*a4);
}

void sub_218592A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::fast_predict(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  int v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t *v20;
  BOOL v21;
  uint64_t v24;
  uint64_t v25;
  int *v27;
  unint64_t v28;
  char v30;
  int missing_value_enum_from_string;
  _BYTE *v32;
  turi::supervised::supervised_learning_model_base *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t i;
  uint64_t v58;
  uint64_t v59;
  uint64_t j;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  int64_t v75;
  char *v76;
  uint64_t v77;
  int64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  unsigned int v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  void *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  unsigned int v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  std::bad_alloc *exception;
  std::bad_alloc *v167;
  int v169;
  unint64_t v170;
  _BYTE *v172;
  uint64_t *v173;
  _BYTE *v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  void *__p;
  __int128 v181;
  __int128 v182;
  unint64_t v183;
  char v184;
  turi::gl_sarray_writer_impl *v185;
  _QWORD v186[3];
  uint64_t v187;
  char v188;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  v8 = (uint64_t)(a1 + 37);
  v9 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(a1 + 37), (const void **)&__p);
  v10 = v9;
  if ((SHIBYTE(v181) & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_3;
LABEL_6:
    v170 = 0;
    goto LABEL_7;
  }
  operator delete(__p);
  if (!v10)
    goto LABEL_6;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  v11 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(v8, (const void **)&__p);
  v170 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v176, v11);
  if (SHIBYTE(v181) < 0)
    operator delete(__p);
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  v12 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v8, (const void **)&__p);
  v13 = v12;
  if (SHIBYTE(v181) < 0)
  {
    operator delete(__p);
    if (!v13)
      goto LABEL_14;
  }
  else if (!v12)
  {
    goto LABEL_14;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  v14 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(v8, (const void **)&__p);
  v15 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v176, v14);
  if (SHIBYTE(v181) < 0)
    operator delete(__p);
  v170 /= v15 - 1;
LABEL_14:
  std::vector<turi::flexible_type>::vector(v186, (uint64_t)(a2[1] - *a2) >> 4);
  if (*((char *)a4 + 23) < 0)
  {
    v20 = a4[1];
    if (v20 != (uint64_t *)5 || (*(_DWORD *)*a4 == 1935764579 ? (v21 = *((_BYTE *)*a4 + 4) == 115) : (v21 = 0), !v21))
    {
      if (v20 == (uint64_t *)18)
      {
        if (**a4 == 0x6C696261626F7270 && (*a4)[1] == 0x746365765F797469 && *((_WORD *)*a4 + 8) == 29295)
        {
LABEL_253:
          v30 = 3;
          goto LABEL_56;
        }
        v20 = a4[1];
      }
      if (v20 != (uint64_t *)11)
      {
LABEL_55:
        v30 = 1;
        goto LABEL_56;
      }
      v17 = *a4;
LABEL_42:
      v24 = *v17;
      v25 = *(uint64_t *)((char *)v17 + 3);
      if (v24 == 0x6C696261626F7270 && v25 == 0x7974696C69626162)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
        v27 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(v8, (const void **)&__p);
        v28 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v176, v27);
        if (SHIBYTE(v181) < 0)
          operator delete(__p);
        if (v28 >= 3)
          turi::supervised::supervised_learning_model_base::fast_predict(std::vector<turi::flexible_type> const&,std::string const&,std::string const&)::$_0::operator()();
      }
      goto LABEL_55;
    }
  }
  else
  {
    v16 = *((unsigned __int8 *)a4 + 23);
    if (v16 != 5)
    {
      v17 = (uint64_t *)a4;
      if (v16 != 11)
      {
        if (v16 != 18)
          goto LABEL_55;
        v18 = *a4 == (uint64_t *)0x6C696261626F7270 && a4[1] == (uint64_t *)0x746365765F797469;
        if (!v18 || *((_WORD *)a4 + 8) != 29295)
          goto LABEL_55;
        goto LABEL_253;
      }
      goto LABEL_42;
    }
    if (*(_DWORD *)a4 != 1935764579 || *((_BYTE *)a4 + 4) != 115)
      goto LABEL_55;
  }
  v30 = *(_BYTE *)(*(_QWORD *)(a1[47] + 24) + 28);
LABEL_56:
  turi::gl_sarray_writer::gl_sarray_writer(&v185, v30, 1);
  missing_value_enum_from_string = turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string((uint64_t)a1, a3);
  v184 = 0;
  v184 = turi::supervised::prediction_type_enum_from_name(a4);
  v32 = (_BYTE *)*a2;
  v174 = (_BYTE *)a2[1];
  v34 = v170;
  v33 = (turi::supervised::supervised_learning_model_base *)a1;
  if ((_BYTE *)*a2 != v174)
  {
    v173 = a1 + 47;
    v169 = missing_value_enum_from_string;
    do
    {
      if (v32[12] != 5)
        turi::supervised::supervised_learning_model_base::fast_predict(std::vector<turi::flexible_type> const&,std::string const&,std::string const&)::$_1::operator()();
      v35 = *(_QWORD *)(*((_QWORD *)v33 + 47) + 64);
      if (v35 <= 3 * turi::supervised::supervised_learning_model_base::num_features(v33))
      {
        v176 = 0;
        v177 = 0;
        if (v34)
        {
          if (v34 >> 61 || (v74 = malloc_type_malloc(8 * v170, 0x1E76AA36uLL)) == 0)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v167 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v167, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          v176 = v74;
        }
        v177 = v34;
        turi::ml_data_row_reference::from_row(v173, (_QWORD *)(*(_QWORD *)v32 + 8), missing_value_enum_from_string, (uint64_t)&__p);
        v76 = (char *)v176;
        v75 = v177;
        if (v177 >= 0)
          v77 = v177;
        else
          v77 = v177 + 1;
        v78 = v77 & 0xFFFFFFFFFFFFFFFELL;
        if (v177 >= 2)
        {
          v79 = 2;
          if (v78 > 2)
            v79 = v77 & 0xFFFFFFFFFFFFFFFELL;
          bzero(v176, ((8 * v79 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if (v78 < v75)
          bzero(&v76[16 * (v77 >> 1)], 8 * v75 - 16 * (v77 >> 1));
        if (BYTE8(v182))
        {
          v80 = *((_QWORD *)__p + 7);
          if (v80)
          {
            v81 = 0;
            v82 = 0;
            v83 = (unint64_t *)(*((_QWORD *)__p + 12)
                                     + 8 * *((_QWORD *)&v181 + 1)
                                     + 8 * (*((_BYTE *)__p + 18) == 0));
            v84 = *((_QWORD *)__p + 9);
            v85 = v176;
            while (2)
            {
              v86 = *(_QWORD *)(v84 + 16 * v81);
              v87 = *(_QWORD *)(v86 + 64);
              switch(*(_DWORD *)(v86 + 24))
              {
                case 0:
                  if (v87)
                    v85[v82] = *v83;
                  ++v83;
                  goto LABEL_144;
                case 1:
                  v96 = *v83++;
                  v95 = v96;
                  v97 = v82 - 1;
                  if (v96 < v87 && v95 != 0)
                    v85[v97 + v95] = 0x3FF0000000000000;
                  goto LABEL_158;
                case 2:
                  v88 = *(_QWORD *)(v86 + 72);
                  if (!v88)
                    goto LABEL_144;
                  v89 = 0;
                  v90 = 0;
                  v91 = (char *)v176 + 8 * v82;
                  do
                  {
                    if (v90 < v87)
                      *(_QWORD *)&v91[8 * v90] = v83[v90];
                    ++v90;
                    v89 -= 8;
                  }
                  while (v88 != v90);
                  goto LABEL_143;
                case 3:
                  v100 = *v83++;
                  v99 = v100;
                  v97 = v82 - 1;
                  if (v100)
                  {
                    v101 = v176;
                    do
                    {
                      v102 = *v83;
                      if (*v83 < v87 && v102 != 0)
                        v101[v97 + v102] = 0x3FF0000000000000;
                      ++v83;
                      --v99;
                    }
                    while (v99);
                  }
LABEL_158:
                  v82 = v97 + v87;
                  goto LABEL_167;
                case 4:
                  v106 = *v83;
                  v104 = v83 + 1;
                  v105 = v106;
                  if (v106)
                  {
                    v107 = v176;
                    v108 = v104;
                    do
                    {
                      v110 = *v108;
                      v108 += 2;
                      v109 = v110;
                      if (v110 < v87)
                        v107[v109 + v82] = v104[1];
                      v104 = v108;
                      --v105;
                    }
                    while (v105);
                  }
                  else
                  {
                    v108 = v104;
                  }
                  v82 += v87;
                  v83 = v108;
                  goto LABEL_167;
                case 7:
                  v92 = *(_QWORD *)(v86 + 72);
                  if (!v92)
                    goto LABEL_144;
                  v89 = 0;
                  v93 = 0;
                  v94 = (char *)v176 + 8 * v82;
                  do
                  {
                    if (v93 < v87)
                      *(_QWORD *)&v94[8 * v93] = v83[v93];
                    ++v93;
                    v89 -= 8;
                  }
                  while (v92 != v93);
LABEL_143:
                  v83 = (unint64_t *)((char *)v83 - v89);
LABEL_144:
                  v82 += v87;
LABEL_167:
                  if (++v81 == v80)
                    break;
                  continue;
                default:
                  goto LABEL_167;
              }
              break;
            }
          }
        }
        v111 = (std::__shared_weak_count *)v181;
        if ((_QWORD)v181)
        {
          v112 = (unint64_t *)(v181 + 8);
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        *((_QWORD *)v176 + v170 - 1) = 0x3FF0000000000000;
        (*(void (**)(uint64_t *__return_ptr, turi::supervised::supervised_learning_model_base *, void **, char *))(*(_QWORD *)v33 + 88))(&v187, v33, &v176, &v184);
        turi::gl_sarray_writer::write(&v185, (const turi::flexible_type *)&v187, 0);
        switch(v188)
        {
          case 2:
            v114 = (unint64_t *)v187;
            do
            {
              v115 = __ldaxr(v114);
              v116 = v115 - 1;
            }
            while (__stlxr(v116, v114));
            if (!v116)
            {
              v117 = v187;
              if (v187)
              {
                if (*(char *)(v187 + 31) < 0)
                  operator delete(*(void **)(v187 + 8));
                v118 = v117;
                v119 = 0x1012C404EF22A49;
                goto LABEL_214;
              }
            }
            break;
          case 3:
            v131 = (unint64_t *)v187;
            do
            {
              v132 = __ldaxr(v131);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, v131));
            if (!v133)
            {
              v134 = v187;
              if (v187)
              {
                v135 = *(void **)(v187 + 8);
                if (v135)
                {
                  *(_QWORD *)(v187 + 16) = v135;
                  operator delete(v135);
                }
                v118 = v134;
                v119 = 0x1080C409938AC02;
                goto LABEL_214;
              }
            }
            break;
          case 4:
            v120 = (unint64_t *)v187;
            do
            {
              v121 = __ldaxr(v120);
              v122 = v121 - 1;
            }
            while (__stlxr(v122, v120));
            if (!v122)
            {
              v123 = v187;
              if (v187)
              {
                __p = (void *)(v187 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_207;
              }
            }
            break;
          case 5:
            v136 = (unint64_t *)v187;
            do
            {
              v137 = __ldaxr(v136);
              v138 = v137 - 1;
            }
            while (__stlxr(v138, v136));
            if (!v138)
            {
              v123 = v187;
              if (v187)
              {
                __p = (void *)(v187 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_207:
                v118 = v123;
                v119 = 0x1020C405E66F15BLL;
                goto LABEL_214;
              }
            }
            break;
          case 8:
            v139 = (unint64_t *)v187;
            do
            {
              v140 = __ldaxr(v139);
              v141 = v140 - 1;
            }
            while (__stlxr(v141, v139));
            if (!v141)
            {
              v142 = v187;
              if (v187)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v187 + 16));
                v118 = v142;
                v130 = -235920773;
                goto LABEL_213;
              }
            }
            break;
          case 9:
            v124 = (unint64_t *)v187;
            do
            {
              v125 = __ldaxr(v124);
              v126 = v125 - 1;
            }
            while (__stlxr(v126, v124));
            if (!v126)
            {
              v127 = v187;
              if (v187)
              {
                v128 = *(void **)(v187 + 48);
                if (v128)
                {
                  *(_QWORD *)(v187 + 56) = v128;
                  operator delete(v128);
                }
                v129 = *(void **)(v127 + 24);
                if (v129)
                {
                  *(_QWORD *)(v127 + 32) = v129;
                  operator delete(v129);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v127 + 8);
                v118 = v127;
                v130 = 2071181815;
LABEL_213:
                v119 = v130 | 0x1030C4000000000;
LABEL_214:
                MEMORY[0x219A19A08](v118, v119);
              }
            }
            break;
          default:
            break;
        }
        free(v176);
      }
      else
      {
        LOBYTE(__p) = 0;
        v181 = 0u;
        v182 = 0u;
        v183 = v34;
        v172 = v32;
        turi::ml_data_row_reference::from_row(v173, (_QWORD *)(*(_QWORD *)v32 + 8), missing_value_enum_from_string, (uint64_t)&v176);
        *(_QWORD *)&v182 = 0;
        if (v179)
        {
          v36 = v176;
          v37 = *((_QWORD *)v176 + 7);
          if (v37)
          {
            v38 = 0;
            v39 = 0;
            v40 = (uint64_t *)(*((_QWORD *)v176 + 12) + 8 * v178 + 8 * (*((_BYTE *)v176 + 18) == 0));
            v175 = *((_QWORD *)v176 + 7);
            do
            {
              v41 = *(_QWORD *)(v36[9] + 16 * v38);
              v42 = *(_QWORD *)(v41 + 64);
              switch(*(_DWORD *)(v41 + 24))
              {
                case 0:
                  v43 = *v40++;
                  v44 = v43;
                  if (v42)
                  {
                    v187 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v181, (int)v39, &v187) = v44;
                  }
                  v39 += v42;
                  goto LABEL_98;
                case 1:
                  v55 = *v40++;
                  v54 = v55;
                  if (v55 < v42 && v54 != 0)
                  {
                    v187 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v181, (int)v54 + (int)v39 - 1, &v187) = 0x3FF0000000000000;
                  }
                  goto LABEL_92;
                case 2:
                  v45 = *(_QWORD *)(v41 + 72);
                  if (!v45)
                    goto LABEL_79;
                  v46 = 0;
                  v47 = 0;
                  v48 = v39 << 32;
                  do
                  {
                    if (v47 < v42)
                    {
                      v49 = v40[v47];
                      v187 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v181, v48 >> 32, &v187) = v49;
                    }
                    ++v47;
                    v48 += 0x100000000;
                    v46 -= 8;
                  }
                  while (v45 != v47);
                  break;
                case 3:
                  v58 = *v40++;
                  for (i = v58; i; --i)
                  {
                    v59 = *v40;
                    if (*v40 < v42 && v59 != 0)
                    {
                      v187 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v181, (int)v59 + (int)v39 - 1, &v187) = 0x3FF0000000000000;
                    }
                    ++v40;
                  }
LABEL_92:
                  v39 = v39 + v42 - 1;
                  goto LABEL_98;
                case 4:
                  v62 = *v40++;
                  for (j = v62; j; --j)
                  {
                    v63 = *v40;
                    if (*v40 < v42)
                    {
                      v64 = v40[1];
                      v187 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v181, (int)v63 + (int)v39, &v187) = v64;
                    }
                    v40 += 2;
                  }
                  v39 += v42;
                  v37 = v175;
                  goto LABEL_98;
                case 7:
                  v50 = *(_QWORD *)(v41 + 72);
                  if (!v50)
                    goto LABEL_79;
                  v46 = 0;
                  v51 = 0;
                  v52 = v39 << 32;
                  do
                  {
                    if (v51 < v42)
                    {
                      v53 = v40[v51];
                      v187 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v181, v52 >> 32, &v187) = v53;
                    }
                    ++v51;
                    v52 += 0x100000000;
                    v46 -= 8;
                  }
                  while (v50 != v51);
                  break;
                default:
                  goto LABEL_98;
              }
              v40 = (uint64_t *)((char *)v40 - v46);
              v37 = v175;
LABEL_79:
              v39 += v42;
LABEL_98:
              ++v38;
            }
            while (v38 != v37);
          }
        }
        v65 = (std::__shared_weak_count *)v177;
        v34 = v170;
        v33 = (turi::supervised::supervised_learning_model_base *)a1;
        if (v177)
        {
          v66 = (unint64_t *)(v177 + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v176 = 0;
        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v181, (int)v170 - 1, &v176) = 0x3FF0000000000000;
        (*(void (**)(uint64_t *__return_ptr, uint64_t *, void **, char *))(*a1 + 96))(&v187, a1, &__p, &v184);
        turi::gl_sarray_writer::write(&v185, (const turi::flexible_type *)&v187, 0);
        missing_value_enum_from_string = v169;
        v32 = v172;
        switch(v188)
        {
          case 2:
            v68 = (unint64_t *)v187;
            do
            {
              v69 = __ldaxr(v68);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, v68));
            if (!v70)
            {
              v71 = v187;
              if (v187)
              {
                if (*(char *)(v187 + 31) < 0)
                  operator delete(*(void **)(v187 + 8));
                v72 = v71;
                v73 = 0x1012C404EF22A49;
                goto LABEL_249;
              }
            }
            break;
          case 3:
            v154 = (unint64_t *)v187;
            do
            {
              v155 = __ldaxr(v154);
              v156 = v155 - 1;
            }
            while (__stlxr(v156, v154));
            if (!v156)
            {
              v157 = v187;
              if (v187)
              {
                v158 = *(void **)(v187 + 8);
                if (v158)
                {
                  *(_QWORD *)(v187 + 16) = v158;
                  operator delete(v158);
                }
                v72 = v157;
                v73 = 0x1080C409938AC02;
                goto LABEL_249;
              }
            }
            break;
          case 4:
            v143 = (unint64_t *)v187;
            do
            {
              v144 = __ldaxr(v143);
              v145 = v144 - 1;
            }
            while (__stlxr(v145, v143));
            if (!v145)
            {
              v146 = v187;
              if (v187)
              {
                v176 = (void *)(v187 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
                goto LABEL_242;
              }
            }
            break;
          case 5:
            v159 = (unint64_t *)v187;
            do
            {
              v160 = __ldaxr(v159);
              v161 = v160 - 1;
            }
            while (__stlxr(v161, v159));
            if (!v161)
            {
              v146 = v187;
              if (v187)
              {
                v176 = (void *)(v187 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
LABEL_242:
                v72 = v146;
                v73 = 0x1020C405E66F15BLL;
                goto LABEL_249;
              }
            }
            break;
          case 8:
            v162 = (unint64_t *)v187;
            do
            {
              v163 = __ldaxr(v162);
              v164 = v163 - 1;
            }
            while (__stlxr(v164, v162));
            if (!v164)
            {
              v165 = v187;
              if (v187)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v187 + 16));
                v72 = v165;
                v153 = -235920773;
                goto LABEL_248;
              }
            }
            break;
          case 9:
            v147 = (unint64_t *)v187;
            do
            {
              v148 = __ldaxr(v147);
              v149 = v148 - 1;
            }
            while (__stlxr(v149, v147));
            if (!v149)
            {
              v150 = v187;
              if (v187)
              {
                v151 = *(void **)(v187 + 48);
                if (v151)
                {
                  *(_QWORD *)(v187 + 56) = v151;
                  operator delete(v151);
                }
                v152 = *(void **)(v150 + 24);
                if (v152)
                {
                  *(_QWORD *)(v150 + 32) = v152;
                  operator delete(v152);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v150 + 8);
                v72 = v150;
                v153 = 2071181815;
LABEL_248:
                v73 = v153 | 0x1030C4000000000;
LABEL_249:
                MEMORY[0x219A19A08](v72, v73);
              }
            }
            break;
          default:
            break;
        }
        Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v181);
      }
      v32 += 16;
    }
    while (v32 != v174);
  }
  turi::gl_sarray_writer::close(&v185, a5);
  turi::gl_sarray_writer::~gl_sarray_writer((turi::gl_sarray_writer *)&v185);
  __p = v186;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_218593890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  __p = (void *)(v31 - 152);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;

  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    switch(*(_BYTE *)(a2 + 23))
    {
      case 0:
        goto LABEL_7;
      case 4:
        v2 = (_DWORD *)a2;
        if (*(_DWORD *)a2 != 1869903201)
          goto LABEL_34;
        goto LABEL_7;
      case 5:
        if (*(_DWORD *)a2 != 1869771365 || *(_BYTE *)(a2 + 4) != 114)
          goto LABEL_37;
        return 1;
      case 6:
        if (*(_DWORD *)a2 == 1970302313 && *(_WORD *)(a2 + 4) == 25972)
          return 0;
        v2 = (_DWORD *)a2;
        if (*(_BYTE *)(a2 + 23) != 4)
          goto LABEL_37;
        goto LABEL_34;
      default:
        goto LABEL_37;
    }
  }
  v3 = *(_QWORD *)(a2 + 8);
  switch(v3)
  {
    case 0:
      goto LABEL_7;
    case 4:
      if (**(_DWORD **)a2 != 1869903201)
        goto LABEL_33;
LABEL_7:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1))
        return 2;
      else
        return 0;
    case 5:
      if (**(_DWORD **)a2 == 1869771365 && *(_BYTE *)(*(_QWORD *)a2 + 4) == 114)
        return 1;
      if (v3 != 6)
        goto LABEL_32;
LABEL_27:
      if (**(_DWORD **)a2 != 1970302313 || *(_WORD *)(*(_QWORD *)a2 + 4) != 25972)
      {
        v3 = *(_QWORD *)(a2 + 8);
LABEL_32:
        if (v3 == 4)
        {
LABEL_33:
          v2 = *(_DWORD **)a2;
LABEL_34:
          if (*v2 == 1701736302)
            return 2;
        }
LABEL_37:
        turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string(std::string const&)const::$_0::operator()();
      }
      return 0;
    case 6:
      goto LABEL_27;
    default:
      goto LABEL_32;
  }
}

void turi::supervised::supervised_learning_model_base::fast_classify(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, turi::gl_sframe *a4@<X8>)
{
  int *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16;
  char v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  turi::gl_sframe::gl_sframe(a4);
  std::string::basic_string[abi:ne180100]<0>(v20, "class");
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 176))(v14, a1, a2, a3, v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "class");
  turi::gl_sframe::add_column((uint64_t)a4, (uint64_t)v14, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v14);
  if (v21 < 0)
    operator delete(v20[0]);
  std::string::basic_string[abi:ne180100]<0>(v14, "num_classes");
  v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)v14);
  v9 = turi::variant_converter<unsigned long,void>::get((uint64_t)v20, v8);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v9 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "error");
    std::string::basic_string[abi:ne180100]<0>(__p, "probability");
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 176))(v20, a1, a2, v14, __p);
    if (v19 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    v22[0] = &off_24D949E80;
    v23 = v22;
    turi::gl_sarray::apply((uint64_t)v20, (uint64_t)v22, 1, 1, (uint64_t)__p);
    std::string::basic_string[abi:ne180100]<0>(v12, "probability");
    turi::gl_sframe::operator[]((uint64_t)a4, (uint64_t)v12, (turi::gl_sarray *)v14);
    turi::gl_sarray_reference::operator=((uint64_t)v14, (uint64_t)__p);
    v14[0] = off_24D91EA30;
    if (v17 < 0)
      operator delete(v16);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v14);
    if (v13 < 0)
      operator delete(v12[0]);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
    v10 = v23;
    if (v23 == v22)
    {
      v11 = 4;
      v10 = v22;
    }
    else
    {
      if (!v23)
      {
LABEL_25:
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v20);
        return;
      }
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
    goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "max_probability");
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 176))(v14, a1, a2, a3, v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "probability");
  turi::gl_sframe::add_column((uint64_t)a4, (uint64_t)v14, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v14);
  if (v21 < 0)
    operator delete(v20[0]);
}

void sub_218593FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _QWORD *v33;
  uint64_t v34;

  if (a33 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a16);
  if (*(char *)(v34 - 105) < 0)
    operator delete(*(void **)(v34 - 128));
  *v33 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::predict_topk(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, std::string::value_type *a3@<X2>, unint64_t a4@<X3>, turi::sframe *a5@<X8>)
{
  int *v10;
  turi::thread_pool *v11;
  turi::thread_pool *v12;
  turi::thread_pool *instance;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  int *v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  _WORD *v23;
  int v24;
  _BYTE *v25;
  char v26;
  char *v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *p_p_p;
  void *v36;
  _WORD *v37;
  std::string *p_p;
  std::string *v39;
  std::string *v40;
  char v41;
  unint64_t v42;
  turi::thread_pool *v43;
  unint64_t v44;
  std::string __p;
  std::string *v46;
  std::string v47;
  __int128 v48[13];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v44 = a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  v10 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  v11 = (turi::thread_pool *)turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v10);
  v12 = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v43 = v12;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v11);
  v14 = turi::thread_pool::size(instance);
  v42 = 0;
  v41 = turi::supervised::prediction_type_enum_from_name(a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  v16 = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
      goto LABEL_5;
  }
  else if (v15)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
    v17 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
    v18 = turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v17);
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_features");
  v19 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  v18 = turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v19);
LABEL_8:
  v20 = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v42 = v20 / ((unint64_t)v12 - 1);
  if ((unint64_t)v12 < a4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"The training data contained ", 28);
    v31 = (_QWORD *)std::ostream::operator<<();
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" classes.", 9);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" The parameter 'k' must be less than or equal to the number of ", 63);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"classes in the training data.", 29);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v34);
    p_p = &__p;
    turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_0::operator()();
  }
  turi::sframe::sframe(a5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "id");
  std::string::basic_string[abi:ne180100]<0>(&v46, "class");
  if (a3[23] < 0)
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v47 = *(std::string *)a3;
  p_p = 0;
  v39 = 0;
  v40 = 0;
  p_p_p = &p_p;
  LOBYTE(v36) = 0;
  p_p = (std::string *)operator new(0x48uLL);
  v39 = p_p;
  v40 = p_p + 3;
  v21 = 0;
  v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, (__int128 *)&__p, v48, p_p);
  do
  {
    if (SHIBYTE(v47.__r_.__value_.__r.__words[v21 + 2]) < 0)
      operator delete(*(void **)((char *)&v47.__r_.__value_.__l.__data_ + v21 * 8));
    v21 -= 3;
  }
  while (v21 != -9);
  v22 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 24) + 28);
  v36 = 0;
  v23 = operator new(2uLL);
  *v23 = v22 << 8;
  p_p_p = v23;
  v37 = v23 + 1;
  v24 = a3[23];
  if (v24 < 0)
  {
    if (*((_QWORD *)a3 + 1) != 4)
    {
LABEL_24:
      v25 = operator new(4uLL);
      v26 = 1;
      goto LABEL_25;
    }
    a3 = *(std::string::value_type **)a3;
  }
  else if (v24 != 4)
  {
    goto LABEL_24;
  }
  if (*(_DWORD *)a3 != 1802396018)
    goto LABEL_24;
  v25 = operator new(4uLL);
  v26 = 0;
LABEL_25:
  v25[2] = v26;
  *(_WORD *)v25 = *v23;
  v27 = v25 + 3;
  p_p_p = v25;
  v37 = v25 + 4;
  operator delete(v23);
  v36 = v27;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write((uint64_t)a5, &p_p, &p_p_p, &__p, v14, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = (std::string *)operator new(0x40uLL);
  v28->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24D949F00;
  v28->__r_.__value_.__l.__size_ = (std::string::size_type)&v42;
  v28->__r_.__value_.__r.__words[2] = (std::string::size_type)a5;
  v28[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  v28[1].__r_.__value_.__l.__size_ = a2;
  v28[1].__r_.__value_.__r.__words[2] = a1;
  v28[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  v28[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v44;
  v46 = v28;
  turi::in_parallel((turi::thread_pool *)&__p);
  v29 = v46;
  if (v46 == &__p)
  {
    v30 = 4;
    v29 = &__p;
  }
  else
  {
    if (!v46)
      goto LABEL_32;
    v30 = 5;
  }
  (*(void (**)(void))(v29->__r_.__value_.__r.__words[0] + 8 * v30))();
LABEL_32:
  turi::sframe::close(a5);
  if (p_p_p)
  {
    v36 = p_p_p;
    operator delete(p_p_p);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_21859455C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::evaluate(__darwin_time_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  cppipc *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  const std::locale::facet *v10;
  turi::thread_pool *instance;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t i;
  uint64_t v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t **v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  BOOL v56;
  int v57;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *tv_sec;
  unint64_t v63;
  unint64_t v64;
  __darwin_time_t v65;
  __darwin_time_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  __darwin_time_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  __darwin_time_t v75;
  void *v76;
  void *v77;
  unsigned int v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  __darwin_time_t v82;
  void *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  __darwin_time_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  int v98;
  int v99;
  int v100;
  int v101;
  BOOL v102;
  char v103;
  _BOOL4 v104;
  std::string **v105;
  __int128 **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  int v114;
  int v115;
  int v116;
  int v117;
  char v118;
  _BOOL4 v119;
  std::vector<std::string>::pointer begin;
  unint64_t v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  timeval *v131;
  uint64_t v132;
  uint64_t v133;
  timeval *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unsigned int *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  int *v155;
  file_logger *v156;
  file_logger *v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  const std::locale::facet *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *exception;
  _QWORD *v170;
  std::vector<std::string>::pointer j;
  uint64_t v175;
  uint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unsigned __int8 v181;
  std::string __p;
  char v183[8];
  char *v184;
  char v185;
  std::vector<std::string> v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  std::string *v191;
  unint64_t v192;
  char v193;
  _OWORD v194[2];
  int v195;
  uint64_t *v196;
  _QWORD *v197[2];
  unint64_t v198;
  BOOL v199;
  unint64_t v200;
  timeval v201;
  _BYTE v202[63];
  _BYTE v203[63];
  _BYTE v204[63];
  _BYTE v205[21];
  char v206;
  _BYTE v207[24];
  timeval *v208;
  __int128 v209;
  timeval v210;
  unsigned __int8 v211;
  timeval *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE v217[13];
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  gettimeofday(&v201, 0);
  gettimeofday(&v210, 0);
  v6 = (cppipc *)global_logger();
  if (*((int *)v6 + 169) <= 2)
  {
    if (cppipc::must_cancel(v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "evaluate", 711, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Starting evaluation", 19);
    v6 = (cppipc *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*((_QWORD *)v6 + 2) - 24) + 16));
        v10 = std::locale::use_facet((const std::locale *)&v210, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale((std::locale *)&v210);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v6);
  v175 = turi::thread_pool::size(instance);
  v200 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v210, "num_coefficients");
  v12 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&v210);
  v13 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v208, v12);
  if ((char)v211 < 0)
    operator delete((void *)v210.tv_sec);
  v200 = v13;
  v199 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 64);
  v199 = v14 <= 3
              * turi::supervised::supervised_learning_model_base::num_features((turi::supervised::supervised_learning_model_base *)a1);
  v197[1] = 0;
  v198 = 0;
  v196 = (uint64_t *)v197;
  v197[0] = 0;
  memset(v194, 0, sizeof(v194));
  v195 = 1065353216;
  v193 = 0;
  v15 = (*(uint64_t (**)(__darwin_time_t))(*(_QWORD *)a1 + 232))(a1);
  v193 = v15;
  if (v15)
  {
    std::string::basic_string[abi:ne180100]<0>(&v210, "num_classes");
    v16 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&v210);
    v198 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v208, v16);
    if ((char)v211 < 0)
      operator delete((void *)v210.tv_sec);
    v17 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v18 = *(_DWORD *)(v17 + 24);
    if (v18 <= 6 && ((1 << v18) & 0x5A) != 0)
      v19 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 104);
    else
      v19 = *(_QWORD *)(v17 + 72);
    v200 /= v198 - 1;
    *(_QWORD *)v205 = 0;
    if (v19)
    {
      for (i = 0; i < v19; *(_QWORD *)v205 = i)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 24) + 32) + 80);
        v210.tv_sec = (__darwin_time_t)v205;
        v22 = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v196, (unint64_t *)v205, (uint64_t)&std::piecewise_construct, &v210);
        v23 = v22;
        v24 = v21 + 16 * i;
        v25 = v22 + 5;
        if ((uint64_t **)v24 != v22 + 5)
        {
          switch(*((_BYTE *)v22 + 52))
          {
            case 2:
              v26 = (unint64_t *)*v25;
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                v29 = (unint64_t *)*v25;
                if (!*v25)
                  goto LABEL_62;
                if (*((char *)v29 + 31) < 0)
                  operator delete((void *)v29[1]);
                v30 = v29;
                v31 = 0x1012C404EF22A49;
                goto LABEL_61;
              }
              break;
            case 3:
              v43 = (unint64_t *)*v25;
              do
              {
                v44 = __ldaxr(v43);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, v43));
              if (!v45)
              {
                v46 = (unint64_t *)*v25;
                if (!*v25)
                  goto LABEL_62;
                v47 = (void *)v46[1];
                if (v47)
                {
                  v46[2] = (unint64_t)v47;
                  operator delete(v47);
                }
                v30 = v46;
                v31 = 0x1080C409938AC02;
                goto LABEL_61;
              }
              break;
            case 4:
              v32 = (unint64_t *)*v25;
              do
              {
                v33 = __ldaxr(v32);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, v32));
              if (!v34)
              {
                v35 = (unint64_t *)*v25;
                if (!*v25)
                  goto LABEL_62;
                v210.tv_sec = (__darwin_time_t)(v35 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
                goto LABEL_54;
              }
              break;
            case 5:
              v48 = (unint64_t *)*v25;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                v35 = (unint64_t *)*v25;
                if (!*v25)
                  goto LABEL_62;
                v210.tv_sec = (__darwin_time_t)(v35 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_54:
                v30 = v35;
                v31 = 0x1020C405E66F15BLL;
                goto LABEL_61;
              }
              break;
            case 8:
              v51 = (unint64_t *)*v25;
              do
              {
                v52 = __ldaxr(v51);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v51));
              if (!v53)
              {
                v54 = (unint64_t *)*v25;
                if (!*v25)
                  goto LABEL_62;
                boost::detail::shared_count::~shared_count((unsigned int **)v54 + 2);
                v30 = v54;
                v42 = -235920773;
                goto LABEL_60;
              }
              break;
            case 9:
              v36 = (unint64_t *)*v25;
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
              {
                v39 = (unint64_t *)*v25;
                if (*v25)
                {
                  v40 = (void *)v39[6];
                  if (v40)
                  {
                    v39[7] = (unint64_t)v40;
                    operator delete(v40);
                  }
                  v41 = (void *)v39[3];
                  if (v41)
                  {
                    v39[4] = (unint64_t)v41;
                    operator delete(v41);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
                  v30 = v39;
                  v42 = 2071181815;
LABEL_60:
                  v31 = v42 | 0x1030C4000000000;
LABEL_61:
                  MEMORY[0x219A19A08](v30, v31);
                }
LABEL_62:
                *v25 = 0;
              }
              break;
            default:
              break;
          }
          v55 = *(uint64_t **)v24;
          *(uint64_t **)((char *)v25 + 5) = *(uint64_t **)(v24 + 5);
          *v25 = v55;
          LODWORD(v55) = *(unsigned __int8 *)(v24 + 12);
          *((_BYTE *)v23 + 52) = (_BYTE)v55;
          v56 = v55 > 9;
          v57 = (1 << (char)v55) & 0x33C;
          if (!v56 && v57 != 0)
          {
            v59 = (unint64_t *)*v25;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 + 1, v59));
          }
        }
        v61 = *(_QWORD *)v205;
        *((_BYTE *)&v210.tv_usec + 4) = 0;
        v210.tv_usec = 0;
        v210.tv_sec = *(_QWORD *)v205;
        v208 = &v210;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>((uint64_t)v194, (unsigned __int8 *)&v210, (uint64_t)&std::piecewise_construct, (uint64_t **)&v208)+ 4) = v61;
        switch(*((_BYTE *)&v210.tv_usec + 4))
        {
          case 2:
            tv_sec = (unint64_t *)v210.tv_sec;
            do
            {
              v63 = __ldaxr(tv_sec);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, tv_sec));
            if (!v64)
            {
              v65 = v210.tv_sec;
              if (v210.tv_sec)
              {
                if (*(char *)(v210.tv_sec + 31) < 0)
                  operator delete(*(void **)(v210.tv_sec + 8));
                v66 = v65;
                v67 = 0x1012C404EF22A49;
                goto LABEL_110;
              }
            }
            break;
          case 3:
            v79 = (unint64_t *)v210.tv_sec;
            do
            {
              v80 = __ldaxr(v79);
              v81 = v80 - 1;
            }
            while (__stlxr(v81, v79));
            if (!v81)
            {
              v82 = v210.tv_sec;
              if (v210.tv_sec)
              {
                v83 = *(void **)(v210.tv_sec + 8);
                if (v83)
                {
                  *(_QWORD *)(v210.tv_sec + 16) = v83;
                  operator delete(v83);
                }
                v66 = v82;
                v67 = 0x1080C409938AC02;
                goto LABEL_110;
              }
            }
            break;
          case 4:
            v68 = (unint64_t *)v210.tv_sec;
            do
            {
              v69 = __ldaxr(v68);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, v68));
            if (!v70)
            {
              v71 = v210.tv_sec;
              if (v210.tv_sec)
              {
                v208 = (timeval *)(v210.tv_sec + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
                goto LABEL_103;
              }
            }
            break;
          case 5:
            v84 = (unint64_t *)v210.tv_sec;
            do
            {
              v85 = __ldaxr(v84);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v84));
            if (!v86)
            {
              v71 = v210.tv_sec;
              if (v210.tv_sec)
              {
                v208 = (timeval *)(v210.tv_sec + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
LABEL_103:
                v66 = v71;
                v67 = 0x1020C405E66F15BLL;
                goto LABEL_110;
              }
            }
            break;
          case 8:
            v87 = (unint64_t *)v210.tv_sec;
            do
            {
              v88 = __ldaxr(v87);
              v89 = v88 - 1;
            }
            while (__stlxr(v89, v87));
            if (!v89)
            {
              v90 = v210.tv_sec;
              if (v210.tv_sec)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v210.tv_sec + 16));
                v66 = v90;
                v78 = -235920773;
                goto LABEL_109;
              }
            }
            break;
          case 9:
            v72 = (unint64_t *)v210.tv_sec;
            do
            {
              v73 = __ldaxr(v72);
              v74 = v73 - 1;
            }
            while (__stlxr(v74, v72));
            if (!v74)
            {
              v75 = v210.tv_sec;
              if (v210.tv_sec)
              {
                v76 = *(void **)(v210.tv_sec + 48);
                if (v76)
                {
                  *(_QWORD *)(v210.tv_sec + 56) = v76;
                  operator delete(v76);
                }
                v77 = *(void **)(v75 + 24);
                if (v77)
                {
                  *(_QWORD *)(v75 + 32) = v77;
                  operator delete(v77);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v75 + 8);
                v66 = v75;
                v78 = 2071181815;
LABEL_109:
                v67 = v78 | 0x1030C4000000000;
LABEL_110:
                MEMORY[0x219A19A08](v66, v67);
              }
            }
            break;
          default:
            break;
        }
        i = *(_QWORD *)v205 + 1;
      }
    }
  }
  v190 = 0;
  v191 = 0;
  v192 = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  memset(&v186, 0, sizeof(v186));
  std::string::basic_string[abi:ne180100]<0>(&v210, "auto");
  v91 = a3[23];
  if ((v91 & 0x80u) == 0)
    v92 = a3[23];
  else
    v92 = *((_QWORD *)a3 + 1);
  v93 = v211;
  v94 = (char)v211;
  if ((v211 & 0x80u) != 0)
    v93 = *(_QWORD *)&v210.tv_usec;
  if (v92 != v93)
  {
    v104 = 0;
    if (((char)v211 & 0x80000000) == 0)
      goto LABEL_130;
    goto LABEL_134;
  }
  if ((v211 & 0x80u) == 0)
    v95 = (unsigned __int8 *)&v210;
  else
    v95 = (unsigned __int8 *)v210.tv_sec;
  if ((v91 & 0x80) != 0)
  {
    v104 = memcmp(*(const void **)a3, v95, *((_QWORD *)a3 + 1)) == 0;
    if ((v94 & 0x80000000) == 0)
      goto LABEL_130;
    goto LABEL_134;
  }
  if (!a3[23])
  {
    v104 = 1;
    if (((char)v211 & 0x80000000) == 0)
      goto LABEL_130;
LABEL_134:
    operator delete((void *)v210.tv_sec);
    if (v104)
      goto LABEL_131;
    goto LABEL_135;
  }
  v96 = v91 - 1;
  v97 = a3;
  do
  {
    v99 = *v97++;
    v98 = v99;
    v101 = *v95++;
    v100 = v101;
    v102 = v96-- != 0;
    v103 = v102;
    v104 = v98 == v100;
  }
  while (v98 == v100 && (v103 & 1) != 0);
  if ((char)v211 < 0)
    goto LABEL_134;
LABEL_130:
  if (v104)
  {
LABEL_131:
    v105 = (std::string **)(a1 + 320);
    if (&v186 == (std::vector<std::string> *)(a1 + 320))
      goto LABEL_169;
    v106 = (__int128 **)(a1 + 328);
LABEL_156:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v186, *v105, *v106, 0xAAAAAAAAAAAAAAABLL * (((char *)*v106 - (char *)*v105) >> 3));
    goto LABEL_169;
  }
LABEL_135:
  std::string::basic_string[abi:ne180100]<0>(&v210, "train");
  v107 = a3[23];
  if ((v107 & 0x80u) == 0)
    v108 = a3[23];
  else
    v108 = *((_QWORD *)a3 + 1);
  v109 = v211;
  v110 = (char)v211;
  if ((v211 & 0x80u) != 0)
    v109 = *(_QWORD *)&v210.tv_usec;
  if (v108 != v109)
  {
    v119 = 0;
    if (((char)v211 & 0x80000000) == 0)
      goto LABEL_153;
    goto LABEL_158;
  }
  if ((v211 & 0x80u) == 0)
    v111 = (unsigned __int8 *)&v210;
  else
    v111 = (unsigned __int8 *)v210.tv_sec;
  if ((v107 & 0x80) != 0)
  {
    v119 = memcmp(*(const void **)a3, v111, *((_QWORD *)a3 + 1)) == 0;
    if ((v110 & 0x80000000) == 0)
      goto LABEL_153;
    goto LABEL_158;
  }
  if (!a3[23])
  {
    v119 = 1;
    if (((char)v211 & 0x80000000) == 0)
      goto LABEL_153;
LABEL_158:
    operator delete((void *)v210.tv_sec);
    if (v119)
      goto LABEL_154;
    goto LABEL_159;
  }
  v112 = v107 - 1;
  v113 = a3;
  do
  {
    v115 = *v113++;
    v114 = v115;
    v117 = *v111++;
    v116 = v117;
    v102 = v112-- != 0;
    v118 = v102;
    v119 = v114 == v116;
  }
  while (v114 == v116 && (v118 & 1) != 0);
  if ((char)v211 < 0)
    goto LABEL_158;
LABEL_153:
  if (v119)
  {
LABEL_154:
    v105 = (std::string **)(a1 + 344);
    if (&v186 == (std::vector<std::string> *)(a1 + 344))
      goto LABEL_169;
    v106 = (__int128 **)(a1 + 352);
    goto LABEL_156;
  }
LABEL_159:
  v186.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v186, (__int128 *)a3);
LABEL_169:
  v185 = 0;
  begin = v186.__begin_;
  for (j = v186.__end_; begin != j; ++begin)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "default");
    turi::flexible_type_converter<std::string>::set(&__p, (uint64_t)v205);
    *(_QWORD *)((char *)&v209 + 5) = *(_QWORD *)&v205[5];
    *(_QWORD *)&v209 = *(_QWORD *)v205;
    BYTE12(v209) = v205[12];
    LODWORD(v208) = 0;
    std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v210, "average", (unsigned int *)&v208);
    v181 = 0;
    turi::flexible_type_converter<BOOL>::set(&v181, (uint64_t)v204);
    *(_QWORD *)&v205[13] = *(_QWORD *)&v204[5];
    *(_QWORD *)&v205[8] = *(_QWORD *)v204;
    v205[20] = v204[12];
    *(_DWORD *)v205 = 0;
    std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v213, "binary", (unsigned int *)v205);
    turi::flexible_type_converter<std::unordered_map<turi::flexible_type,unsigned long>>::set((uint64_t)v194, (uint64_t)v203);
    *(_QWORD *)&v204[13] = *(_QWORD *)&v203[5];
    *(_QWORD *)&v204[8] = *(_QWORD *)v203;
    v204[20] = v203[12];
    *(_DWORD *)v204 = 0;
    std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v214, "index_map", (unsigned int *)v204);
    turi::flexible_type_converter<unsigned long>::set((uint64_t *)&v198, (uint64_t)v202);
    *(_QWORD *)&v203[13] = *(_QWORD *)&v202[5];
    *(_QWORD *)&v203[8] = *(_QWORD *)v202;
    v203[20] = v202[12];
    *(_DWORD *)v203 = 0;
    std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v215, "num_classes", (unsigned int *)v203);
    turi::flexible_type_converter<std::map<unsigned long,turi::flexible_type>>::set(&v196, (uint64_t)v217);
    *(_QWORD *)&v202[13] = *(_QWORD *)&v217[5];
    *(_QWORD *)&v202[8] = *(_QWORD *)v217;
    v202[20] = v217[12];
    *(_DWORD *)v202 = 0;
    std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v216, "inv_index_map", (unsigned int *)v202);
    std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v183, (const void **)&v210, 5);
    v121 = 520;
    do
    {
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)((char *)&v208 + v121));
      if ((char)v207[v121 + 23] < 0)
        operator delete(*(void **)&v207[v121]);
      v121 -= 104;
    }
    while (v121);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v202);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v203);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v204);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v205);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v208);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    turi::evaluation::get_evaluator_metric(begin, (uint64_t)v183, &v210);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](&v187, (__int128 *)&v210.tv_sec);
    v122 = v191;
    if ((unint64_t)v191 >= v192)
    {
      v124 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v190, (__int128 *)begin);
    }
    else
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v191, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
      }
      else
      {
        v123 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        v191->__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
      }
      v124 = v122 + 1;
    }
    v191 = v124;
    if (!v185)
      v185 = (*(uint64_t (**)(__darwin_time_t))(*(_QWORD *)v210.tv_sec + 32))(v210.tv_sec);
    v125 = *(std::__shared_weak_count **)&v210.tv_usec;
    if (*(_QWORD *)&v210.tv_usec)
    {
      v126 = (unint64_t *)(*(_QWORD *)&v210.tv_usec + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v183, v184);
  }
  v128 = v187;
  if (v188 != v187)
  {
    v129 = 0;
    v130 = 0;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v128[v129] + 24))(*(_QWORD *)&v128[v129], v175);
      ++v130;
      v128 = v187;
      v129 += 16;
    }
    while (v130 < (v188 - v187) >> 4);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v204);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v203);
  if (v185)
  {
    turi::sarray<turi::flexible_type>::open_for_write(*(uint64_t *)v204, v175, 0);
    turi::sarray<turi::flexible_type>::set_type(*(uint64_t *)v204, 3);
    turi::sarray<turi::flexible_type>::open_for_write(*(uint64_t *)v203, v175, 0);
    turi::sarray<turi::flexible_type>::set_type(*(uint64_t *)v203, *(char *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 24) + 28));
  }
  v131 = (timeval *)operator new(0x50uLL);
  v131->tv_sec = (__darwin_time_t)&off_24D949F80;
  *(_QWORD *)&v131->tv_usec = &v200;
  v131[1].tv_sec = (__darwin_time_t)&v185;
  *(_QWORD *)&v131[1].tv_usec = v204;
  v131[2].tv_sec = (__darwin_time_t)v203;
  *(_QWORD *)&v131[2].tv_usec = a2;
  v131[3].tv_sec = (__darwin_time_t)&v193;
  *(_QWORD *)&v131[3].tv_usec = &v199;
  v131[4].tv_sec = a1;
  *(_QWORD *)&v131[4].tv_usec = &v187;
  v212 = v131;
  turi::in_parallel((turi::thread_pool *)&v210);
  v134 = v212;
  if (v212 == &v210)
  {
    v135 = 4;
    v134 = &v210;
  }
  else
  {
    if (!v212)
      goto LABEL_200;
    v135 = 5;
  }
  (*(void (**)(timeval *, uint64_t, uint64_t))(v134->tv_sec + 8 * v135))(v134, v132, v133);
LABEL_200:
  if (v185)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)v204 + 40))(*(_QWORD *)v204);
    (*(void (**)(_QWORD))(**(_QWORD **)v203 + 40))(*(_QWORD *)v203);
  }
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  v136 = v187;
  if (v188 != v187)
  {
    v137 = 0;
    v138 = 0;
    v139 = 0;
    do
    {
      (*(void (**)(timeval *__return_ptr))(**(_QWORD **)&v136[v138] + 64))(&v210);
      *(_QWORD *)v205 = v190 + v137;
      v140 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a5, (const void **)(v190 + v137), (uint64_t)&std::piecewise_construct, (__int128 **)v205);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v140 + 14, (unsigned int *)&v210);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v210);
      ++v139;
      v136 = v187;
      v138 += 16;
      v137 += 24;
    }
    while (v139 < (v188 - v187) >> 4);
  }
  if (v185 && (a4 & 1) != 0)
  {
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v208);
    v179 = *(_QWORD *)v204;
    v180 = *(std::__shared_weak_count **)&v204[8];
    if (*(_QWORD *)&v204[8])
    {
      v141 = (unint64_t *)(*(_QWORD *)&v204[8] + 8);
      do
        v142 = __ldxr(v141);
      while (__stxr(v142 + 1, v141));
    }
    turi::gl_sarray::gl_sarray(&v210, &v179);
    std::string::basic_string[abi:ne180100]<0>(v205, "probs");
    turi::gl_sframe::add_column((uint64_t)&v208, (uint64_t)&v210, (uint64_t)v205);
    if (v206 < 0)
      operator delete(*(void **)v205);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v210);
    v143 = v180;
    if (v180)
    {
      p_shared_owners = (unint64_t *)&v180->__shared_owners_;
      do
        v145 = __ldaxr(p_shared_owners);
      while (__stlxr(v145 - 1, p_shared_owners));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    v177 = *(_QWORD *)v203;
    v178 = *(std::__shared_weak_count **)&v203[8];
    if (*(_QWORD *)&v203[8])
    {
      v146 = (unint64_t *)(*(_QWORD *)&v203[8] + 8);
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
    }
    turi::gl_sarray::gl_sarray(&v210, &v177);
    std::string::basic_string[abi:ne180100]<0>(v205, "class");
    turi::gl_sframe::add_column((uint64_t)&v208, (uint64_t)&v210, (uint64_t)v205);
    if (v206 < 0)
      operator delete(*(void **)v205);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v210);
    v148 = v178;
    if (v178)
    {
      v149 = (unint64_t *)&v178->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v210, "predictions");
    *(_QWORD *)v205 = &v210;
    v151 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a5, (const void **)&v210, (uint64_t)&std::piecewise_construct, (_OWORD **)v205);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<turi::gl_sframe>(v151 + 14, (uint64_t)&v208);
    if ((char)v211 < 0)
      operator delete((void *)v210.tv_sec);
    v208 = (timeval *)off_24D91E9C0;
    v152 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
    if (*((_QWORD *)&v209 + 1))
    {
      v153 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
  }
  v155 = (int *)global_logger();
  if (v155[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v155))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v156 = (file_logger *)global_logger();
    v157 = file_logger::start_stream(v156, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "evaluate", 908, 1);
    v158 = pthread_getspecific(*((_QWORD *)v157 + 74));
    if (v158 && *((_BYTE *)v158 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158 + 2, (uint64_t)"Evaluation done at ", 19);
    gettimeofday(&v210, 0);
    v159 = file_logger::operator<<<double>((uint64_t)v157);
    v160 = pthread_getspecific(*(_QWORD *)(v159 + 592));
    if (v160 && *((_BYTE *)v160 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160 + 2, (uint64_t)"s", 1);
    v161 = pthread_getspecific(*(_QWORD *)(v159 + 592));
    if (v161)
    {
      if (*((_BYTE *)v161 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v161 + *(_QWORD *)(v161[2] - 24) + 16));
        v162 = std::locale::use_facet((const std::locale *)&v210, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v162->__vftable[2].~facet_0)(v162, 10);
        std::locale::~locale((std::locale *)&v210);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v159);
        if (*(_DWORD *)(v159 + 600) == 7)
        {
          __print_back_trace();
          v170 = __cxa_allocate_exception(8uLL);
          *v170 = "LOG_FATAL encountered";
          __cxa_throw(v170, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v163 = *(std::__shared_weak_count **)&v203[8];
  if (*(_QWORD *)&v203[8])
  {
    v164 = (unint64_t *)(*(_QWORD *)&v203[8] + 8);
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = *(std::__shared_weak_count **)&v204[8];
  if (*(_QWORD *)&v204[8])
  {
    v167 = (unint64_t *)(*(_QWORD *)&v204[8] + 8);
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v210.tv_sec = (__darwin_time_t)&v186;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
  v210.tv_sec = (__darwin_time_t)&v187;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
  v210.tv_sec = (__darwin_time_t)&v190;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v194);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v196, v197[0]);
}

void sub_2185959DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49)
{
  STACK[0x2C0] = (unint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  STACK[0x2C0] = (unint64_t)&a36;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  STACK[0x2C0] = (unint64_t)&a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&a43);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&a48, (_QWORD *)a49);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::display_classifier_training_summary(turi::supervised::supervised_learning_model_base *a1, uint64_t a2, int a3)
{
  int *v6;
  cppipc *v7;
  int v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  int *v24;
  file_logger *v25;
  file_logger *v26;
  _QWORD *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  int *v30;
  file_logger *v31;
  file_logger *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  int *v37;
  file_logger *v38;
  file_logger *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  int *v44;
  file_logger *v45;
  file_logger *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  int *v51;
  file_logger *v52;
  file_logger *v53;
  _QWORD *v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  _QWORD *v57;
  _QWORD *exception;
  std::string v59;
  void *__p[2];
  char v61;
  char v62;

  turi::supervised::supervised_learning_model_base::num_examples(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_classes");
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)__p);
  turi::variant_converter<unsigned long,void>::get((uint64_t)&v62, v6);
  if (v61 < 0)
    operator delete(__p[0]);
  turi::supervised::supervised_learning_model_base::num_features(a1);
  turi::supervised::supervised_learning_model_base::num_unpacked_features(a1);
  v7 = (cppipc *)global_logger();
  v8 = *((_DWORD *)v7 + 169);
  if (a3)
  {
    if (v8 > 4)
      return;
    if (!cppipc::must_cancel(v7))
    {
      v9 = (file_logger *)global_logger();
      started = file_logger::start_stream(v9, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 928, 1);
      v11 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v11 && *((_BYTE *)v11 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Training a classifier on ", 25);
      v12 = file_logger::operator<<<unsigned long>((uint64_t)started);
      v13 = pthread_getspecific(*(_QWORD *)(v12 + 592));
      if (v13 && *((_BYTE *)v13 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)" examples mapping to ", 21);
      v14 = file_logger::operator<<<unsigned long>(v12);
      v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
      if (v15 && *((_BYTE *)v15 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)" classes.", 9);
      v16 = pthread_getspecific(*(_QWORD *)(v14 + 592));
      if (v16 && *((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        goto LABEL_71;
      }
      return;
    }
    goto LABEL_73;
  }
  if (v8 <= 4)
  {
    if (cppipc::must_cancel(v7))
      goto LABEL_73;
    v18 = (file_logger *)global_logger();
    v19 = file_logger::start_stream(v18, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 933, 1);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v59 = *(std::string *)a2;
    v20 = file_logger::operator<<<std::string>((uint64_t)v19, (uint64_t)&v59);
    v21 = pthread_getspecific(*(_QWORD *)(v20 + 592));
    if (v21 && *((_BYTE *)v21 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)":", 1);
    v22 = pthread_getspecific(*(_QWORD *)(v20 + 592));
    if (v22)
    {
      if (*((_BYTE *)v22 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(v22[2] - 24) + 16));
        v23 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v20);
        if (*(_DWORD *)(v20 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  v24 = (int *)global_logger();
  if (v24[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v24))
      goto LABEL_73;
    v25 = (file_logger *)global_logger();
    v26 = file_logger::start_stream(v25, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 934, 1);
    v27 = pthread_getspecific(*((_QWORD *)v26 + 74));
    if (v27 && *((_BYTE *)v27 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27 + 2, (uint64_t)"--------------------------------------------------------", 56);
    v28 = pthread_getspecific(*((_QWORD *)v26 + 74));
    if (v28)
    {
      if (*((_BYTE *)v28 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(v28[2] - 24) + 16));
        v29 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7)
          goto LABEL_74;
      }
    }
  }
  v30 = (int *)global_logger();
  if (v30[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v30))
      goto LABEL_73;
    v31 = (file_logger *)global_logger();
    v32 = file_logger::start_stream(v31, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 935, 1);
    v33 = pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v33 && *((_BYTE *)v33 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33 + 2, (uint64_t)"Number of examples          : ", 30);
    v34 = file_logger::operator<<<unsigned long>((uint64_t)v32);
    v35 = pthread_getspecific(*(_QWORD *)(v34 + 592));
    if (v35)
    {
      if (*((_BYTE *)v35 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(v35[2] - 24) + 16));
        v36 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v34);
        if (*(_DWORD *)(v34 + 600) == 7)
          goto LABEL_74;
      }
    }
  }
  v37 = (int *)global_logger();
  if (v37[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v37))
      goto LABEL_73;
    v38 = (file_logger *)global_logger();
    v39 = file_logger::start_stream(v38, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 936, 1);
    v40 = pthread_getspecific(*((_QWORD *)v39 + 74));
    if (v40 && *((_BYTE *)v40 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)"Number of classes           : ", 30);
    v41 = file_logger::operator<<<unsigned long>((uint64_t)v39);
    v42 = pthread_getspecific(*(_QWORD *)(v41 + 592));
    if (v42)
    {
      if (*((_BYTE *)v42 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(v42[2] - 24) + 16));
        v43 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v41);
        if (*(_DWORD *)(v41 + 600) == 7)
          goto LABEL_74;
      }
    }
  }
  v44 = (int *)global_logger();
  if (v44[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v44))
      goto LABEL_73;
    v45 = (file_logger *)global_logger();
    v46 = file_logger::start_stream(v45, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 937, 1);
    v47 = pthread_getspecific(*((_QWORD *)v46 + 74));
    if (v47 && *((_BYTE *)v47 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47 + 2, (uint64_t)"Number of feature columns   : ", 30);
    v48 = file_logger::operator<<<unsigned long>((uint64_t)v46);
    v49 = pthread_getspecific(*(_QWORD *)(v48 + 592));
    if (v49)
    {
      if (*((_BYTE *)v49 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(v49[2] - 24) + 16));
        v50 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v48);
        if (*(_DWORD *)(v48 + 600) == 7)
          goto LABEL_74;
      }
    }
  }
  v51 = (int *)global_logger();
  if (v51[169] > 4)
    return;
  if (cppipc::must_cancel((cppipc *)v51))
LABEL_73:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v52 = (file_logger *)global_logger();
  v53 = file_logger::start_stream(v52, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 938, 1);
  v54 = pthread_getspecific(*((_QWORD *)v53 + 74));
  if (v54 && *((_BYTE *)v54 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54 + 2, (uint64_t)"Number of unpacked features : ", 30);
  v14 = file_logger::operator<<<unsigned long>((uint64_t)v53);
  v55 = pthread_getspecific(*(_QWORD *)(v14 + 592));
  if (v55 && *((_BYTE *)v55 + 280))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(_QWORD *)(v55[2] - 24) + 16));
    v56 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
LABEL_71:
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    file_logger::stream_flush((file_logger *)v14);
    if (*(_DWORD *)(v14 + 600) != 7)
      return;
LABEL_74:
    __print_back_trace();
    v57 = __cxa_allocate_exception(8uLL);
    *v57 = "LOG_FATAL encountered";
    __cxa_throw(v57, MEMORY[0x24BEDB718], 0);
  }
}

void sub_2185965B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::locale::~locale(&a16);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::display_regression_training_summary(turi::supervised::supervised_learning_model_base *a1, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  int *v11;
  file_logger *v12;
  file_logger *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  int *v17;
  file_logger *v18;
  file_logger *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  int *v24;
  file_logger *v25;
  file_logger *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  int *v31;
  file_logger *v32;
  file_logger *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  _QWORD *exception;
  std::string __p;
  std::locale v41;

  turi::supervised::supervised_learning_model_base::num_examples(a1);
  turi::supervised::supervised_learning_model_base::num_features(a1);
  turi::supervised::supervised_learning_model_base::num_unpacked_features(a1);
  v4 = (int *)global_logger();
  if (v4[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      goto LABEL_47;
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 955, 1);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    v7 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v8 = pthread_getspecific(*(_QWORD *)(v7 + 592));
    if (v8 && *((_BYTE *)v8 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)":", 1);
    v9 = pthread_getspecific(*(_QWORD *)(v7 + 592));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet(&v41, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v7);
        if (*(_DWORD *)(v7 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v11 = (int *)global_logger();
  if (v11[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      goto LABEL_47;
    v12 = (file_logger *)global_logger();
    v13 = file_logger::start_stream(v12, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 956, 1);
    v14 = pthread_getspecific(*((_QWORD *)v13 + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"--------------------------------------------------------", 56);
    v15 = pthread_getspecific(*((_QWORD *)v13 + 74));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet(&v41, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v13);
        if (*((_DWORD *)v13 + 150) == 7)
          goto LABEL_48;
      }
    }
  }
  v17 = (int *)global_logger();
  if (v17[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v17))
      goto LABEL_47;
    v18 = (file_logger *)global_logger();
    v19 = file_logger::start_stream(v18, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 957, 1);
    v20 = pthread_getspecific(*((_QWORD *)v19 + 74));
    if (v20 && *((_BYTE *)v20 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)"Number of examples          : ", 30);
    v21 = file_logger::operator<<<unsigned long>((uint64_t)v19);
    v22 = pthread_getspecific(*(_QWORD *)(v21 + 592));
    if (v22)
    {
      if (*((_BYTE *)v22 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(v22[2] - 24) + 16));
        v23 = std::locale::use_facet(&v41, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v21);
        if (*(_DWORD *)(v21 + 600) == 7)
          goto LABEL_48;
      }
    }
  }
  v24 = (int *)global_logger();
  if (v24[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v24))
      goto LABEL_47;
    v25 = (file_logger *)global_logger();
    v26 = file_logger::start_stream(v25, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 958, 1);
    v27 = pthread_getspecific(*((_QWORD *)v26 + 74));
    if (v27 && *((_BYTE *)v27 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27 + 2, (uint64_t)"Number of features          : ", 30);
    v28 = file_logger::operator<<<unsigned long>((uint64_t)v26);
    v29 = pthread_getspecific(*(_QWORD *)(v28 + 592));
    if (v29)
    {
      if (*((_BYTE *)v29 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(v29[2] - 24) + 16));
        v30 = std::locale::use_facet(&v41, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v28);
        if (*(_DWORD *)(v28 + 600) == 7)
        {
LABEL_48:
          __print_back_trace();
          v38 = __cxa_allocate_exception(8uLL);
          *v38 = "LOG_FATAL encountered";
          __cxa_throw(v38, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v31 = (int *)global_logger();
  if (v31[169] > 4)
    return;
  if (cppipc::must_cancel((cppipc *)v31))
LABEL_47:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v32 = (file_logger *)global_logger();
  v33 = file_logger::start_stream(v32, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 959, 1);
  v34 = pthread_getspecific(*((_QWORD *)v33 + 74));
  if (v34 && *((_BYTE *)v34 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34 + 2, (uint64_t)"Number of unpacked features : ", 30);
  v35 = file_logger::operator<<<unsigned long>((uint64_t)v33);
  v36 = pthread_getspecific(*(_QWORD *)(v35 + 592));
  if (v36)
  {
    if (*((_BYTE *)v36 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(v36[2] - 24) + 16));
      v37 = std::locale::use_facet(&v41, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
      std::locale::~locale(&v41);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v35);
      if (*(_DWORD *)(v35 + 600) == 7)
        goto LABEL_48;
    }
  }
}

void sub_218596BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::get_metadata_mapping(turi::supervised::supervised_learning_model_base *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const std::string *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t i;
  uint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  unsigned int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  turi::flexible_type_impl *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t **v79;
  uint64_t *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  void *v95;
  void *v96;
  unsigned int v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t **v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;
  void **v116;
  std::string v117;
  uint64_t *v118;
  uint64_t *v119;
  _QWORD *v120;
  std::__shared_weak_count *v121;
  void **v122[2];
  uint64_t v123;
  uint64_t v124;
  void *__p;
  char v126;
  uint64_t v127;

  v4 = (_QWORD *)*((_QWORD *)this + 47);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  v120 = v4;
  v121 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::vector<std::vector<turi::flexible_type>>::vector(a2, v4[8]);
  if (v4[1] != *v4)
  {
    v7 = 0;
    v8 = 0;
    v115 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v116 = (void **)*MEMORY[0x24BEDB7F0];
    v114 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v113 = MEMORY[0x24BEDB848] + 16;
    do
    {
      std::vector<turi::flexible_type>::vector(&v118, 2uLL);
      v9 = *v4 + 16 * v7;
      v10 = *(const std::string **)v9;
      v11 = *(std::__shared_weak_count **)(v9 + 8);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
        do
          v14 = __ldaxr(v12);
        while (__stlxr(v14 - 1, v12));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      turi::flexible_type::operator=<std::string>(v118, v10);
      v15 = (uint64_t *)(*v120 + 16 * v7);
      v16 = *v15;
      v17 = (std::__shared_weak_count *)v15[1];
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        v20 = *(_DWORD *)(v16 + 24);
        do
          v21 = __ldaxr(v18);
        while (__stlxr(v21 - 1, v18));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      else
      {
        v20 = *(_DWORD *)(v16 + 24);
      }
      if (v20 > 7)
LABEL_172:
        turi::supervised::supervised_learning_model_base::get_metadata_mapping(void)::$_0::operator()();
      if (((1 << v20) & 0x1A) != 0)
      {
        v61 = 0;
        while (2)
        {
          v62 = (uint64_t *)(*v120 + 16 * v7);
          v63 = *v62;
          v64 = (std::__shared_weak_count *)v62[1];
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
            v67 = *(_QWORD *)(v63 + 64);
            do
              v68 = __ldaxr(v65);
            while (__stlxr(v68 - 1, v65));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          else
          {
            v67 = *(_QWORD *)(v63 + 64);
          }
          if (v61 < v67)
          {
            v69 = (uint64_t *)(*v120 + 16 * v7);
            v71 = *v69;
            v70 = (std::__shared_weak_count *)v69[1];
            if (v70)
            {
              v72 = (unint64_t *)&v70->__shared_owners_;
              do
                v73 = __ldxr(v72);
              while (__stxr(v73 + 1, v72));
              do
                v74 = __ldaxr(v72);
              while (__stlxr(v74 - 1, v72));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v75 = (turi::flexible_type_impl *)(*(_QWORD *)(*(_QWORD *)(v71 + 32) + 80) + 16 * v61);
            switch(*((_BYTE *)v75 + 12))
            {
              case 0:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v122);
                std::ostream::operator<<();
                std::stringbuf::str();
                v122[0] = v116;
                *(void ***)((char *)v122 + (_QWORD)*(v116 - 3)) = v115;
                v123 = v114;
                v76 = v113;
                goto LABEL_104;
              case 1:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v122);
                std::ostream::operator<<();
                std::stringbuf::str();
                v122[0] = v116;
                *(void ***)((char *)v122 + (_QWORD)*(v116 - 3)) = v115;
                v76 = MEMORY[0x24BEDB848] + 16;
                v123 = v114;
LABEL_104:
                v124 = v76;
                if (v126 < 0)
                  operator delete(__p);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x219A198F4](&v127);
                goto LABEL_111;
              case 2:
                v77 = *(_QWORD *)v75;
                if (*(char *)(*(_QWORD *)v75 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)(v77 + 8), *(_QWORD *)(v77 + 16));
                }
                else
                {
                  v78 = *(_OWORD *)(v77 + 8);
                  v117.__r_.__value_.__r.__words[2] = *(_QWORD *)(v77 + 24);
                  *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v78;
                }
                goto LABEL_111;
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v122, (_QWORD *)(*(_QWORD *)v75 + 8));
                goto LABEL_111;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v122, (uint64_t *)(*(_QWORD *)v75 + 8));
                goto LABEL_111;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v122, (_QWORD *)(*(_QWORD *)v75 + 8));
                goto LABEL_111;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()(v75, &v117);
                goto LABEL_111;
              case 7:
                memset(&v117, 0, sizeof(v117));
                goto LABEL_111;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_111;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v122, (_QWORD *)(*(_QWORD *)v75 + 8));
LABEL_111:
                turi::flexible_type::operator=<std::string>(v118 + 2, (__int128 *)&v117);
                if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v117.__r_.__value_.__l.__data_);
                v79 = (uint64_t **)(*a2 + 24 * v8);
                if (v79 != &v118)
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v79, v118, v119, ((char *)v119 - (char *)v118) >> 4);
                ++v8;
                ++v61;
                continue;
              default:
                turi::flexible_type_fail(0);
                __break(1u);
                return;
            }
          }
          break;
        }
      }
      else if (((1 << v20) & 0x84) != 0)
      {
        for (i = 0; ; ++i)
        {
          v23 = (uint64_t *)(*v120 + 16 * v7);
          v24 = *v23;
          v25 = (std::__shared_weak_count *)v23[1];
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = *(_QWORD *)(v24 + 64);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          else
          {
            v28 = *(_QWORD *)(v24 + 64);
          }
          if (i >= v28)
            break;
          v30 = v118;
          switch(*((_BYTE *)v118 + 28))
          {
            case 2:
              v31 = (unint64_t *)v118[2];
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                v34 = v30[2];
                if (!v34)
                  goto LABEL_75;
                if (*(char *)(v34 + 31) < 0)
                  operator delete(*(void **)(v34 + 8));
                v35 = (_QWORD *)v34;
                v36 = 0x1012C404EF22A49;
                goto LABEL_74;
              }
              break;
            case 3:
              v48 = (unint64_t *)v118[2];
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                v51 = v30[2];
                if (!v51)
                  goto LABEL_75;
                v52 = *(void **)(v51 + 8);
                if (v52)
                {
                  *(_QWORD *)(v51 + 16) = v52;
                  operator delete(v52);
                }
                v35 = (_QWORD *)v51;
                v36 = 0x1080C409938AC02;
                goto LABEL_74;
              }
              break;
            case 4:
              v37 = (unint64_t *)v118[2];
              do
              {
                v38 = __ldaxr(v37);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v37));
              if (!v39)
              {
                v40 = v30[2];
                if (!v40)
                  goto LABEL_75;
                v122[0] = (void **)(v40 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v122);
                goto LABEL_67;
              }
              break;
            case 5:
              v53 = (unint64_t *)v118[2];
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
              {
                v40 = v30[2];
                if (!v40)
                  goto LABEL_75;
                v122[0] = (void **)(v40 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v122);
LABEL_67:
                v35 = (_QWORD *)v40;
                v36 = 0x1020C405E66F15BLL;
                goto LABEL_74;
              }
              break;
            case 8:
              v56 = (unint64_t *)v118[2];
              do
              {
                v57 = __ldaxr(v56);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v56));
              if (!v58)
              {
                v59 = v30[2];
                if (!v59)
                  goto LABEL_75;
                boost::detail::shared_count::~shared_count((unsigned int **)(v59 + 16));
                v35 = (_QWORD *)v59;
                v47 = -235920773;
                goto LABEL_73;
              }
              break;
            case 9:
              v41 = (unint64_t *)v118[2];
              do
              {
                v42 = __ldaxr(v41);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v41));
              if (!v43)
              {
                v44 = (_QWORD *)v30[2];
                if (v44)
                {
                  v45 = (void *)v44[6];
                  if (v45)
                  {
                    v44[7] = v45;
                    operator delete(v45);
                  }
                  v46 = (void *)v44[3];
                  if (v46)
                  {
                    v44[4] = v46;
                    operator delete(v46);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v44 + 1));
                  v35 = v44;
                  v47 = 2071181815;
LABEL_73:
                  v36 = v47 | 0x1030C4000000000;
LABEL_74:
                  MEMORY[0x219A19A08](v35, v36);
                }
LABEL_75:
                v30[2] = 0;
              }
              break;
            default:
              break;
          }
          *((_DWORD *)v30 + 6) = 0;
          *((_BYTE *)v30 + 28) = 0;
          v30[2] = i;
          v60 = (uint64_t **)(*a2 + 24 * v8);
          if (v60 != &v118)
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v60, v118, v119, ((char *)v119 - (char *)v118) >> 4);
          ++v8;
        }
      }
      else
      {
        if (v20)
          goto LABEL_172;
        v80 = v118;
        switch(*((_BYTE *)v118 + 28))
        {
          case 2:
            v81 = (unint64_t *)v118[2];
            do
            {
              v82 = __ldaxr(v81);
              v83 = v82 - 1;
            }
            while (__stlxr(v83, v81));
            if (!v83)
            {
              v84 = v80[2];
              if (!v84)
                goto LABEL_159;
              if (*(char *)(v84 + 31) < 0)
                operator delete(*(void **)(v84 + 8));
              v85 = (_QWORD *)v84;
              v86 = 0x1012C404EF22A49;
              goto LABEL_158;
            }
            break;
          case 3:
            v98 = (unint64_t *)v118[2];
            do
            {
              v99 = __ldaxr(v98);
              v100 = v99 - 1;
            }
            while (__stlxr(v100, v98));
            if (!v100)
            {
              v101 = v80[2];
              if (!v101)
                goto LABEL_159;
              v102 = *(void **)(v101 + 8);
              if (v102)
              {
                *(_QWORD *)(v101 + 16) = v102;
                operator delete(v102);
              }
              v85 = (_QWORD *)v101;
              v86 = 0x1080C409938AC02;
              goto LABEL_158;
            }
            break;
          case 4:
            v87 = (unint64_t *)v118[2];
            do
            {
              v88 = __ldaxr(v87);
              v89 = v88 - 1;
            }
            while (__stlxr(v89, v87));
            if (!v89)
            {
              v90 = v80[2];
              if (!v90)
                goto LABEL_159;
              v122[0] = (void **)(v90 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v122);
              goto LABEL_151;
            }
            break;
          case 5:
            v103 = (unint64_t *)v118[2];
            do
            {
              v104 = __ldaxr(v103);
              v105 = v104 - 1;
            }
            while (__stlxr(v105, v103));
            if (!v105)
            {
              v90 = v80[2];
              if (!v90)
                goto LABEL_159;
              v122[0] = (void **)(v90 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v122);
LABEL_151:
              v85 = (_QWORD *)v90;
              v86 = 0x1020C405E66F15BLL;
              goto LABEL_158;
            }
            break;
          case 8:
            v106 = (unint64_t *)v118[2];
            do
            {
              v107 = __ldaxr(v106);
              v108 = v107 - 1;
            }
            while (__stlxr(v108, v106));
            if (!v108)
            {
              v109 = v80[2];
              if (!v109)
                goto LABEL_159;
              boost::detail::shared_count::~shared_count((unsigned int **)(v109 + 16));
              v85 = (_QWORD *)v109;
              v97 = -235920773;
              goto LABEL_157;
            }
            break;
          case 9:
            v91 = (unint64_t *)v118[2];
            do
            {
              v92 = __ldaxr(v91);
              v93 = v92 - 1;
            }
            while (__stlxr(v93, v91));
            if (!v93)
            {
              v94 = (_QWORD *)v80[2];
              if (v94)
              {
                v95 = (void *)v94[6];
                if (v95)
                {
                  v94[7] = v95;
                  operator delete(v95);
                }
                v96 = (void *)v94[3];
                if (v96)
                {
                  v94[4] = v96;
                  operator delete(v96);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v94 + 1));
                v85 = v94;
                v97 = 2071181815;
LABEL_157:
                v86 = v97 | 0x1030C4000000000;
LABEL_158:
                MEMORY[0x219A19A08](v85, v86);
              }
LABEL_159:
              v80[2] = 0;
            }
            break;
          default:
            break;
        }
        v80[2] = 0;
        *((_DWORD *)v80 + 6) = 0;
        *((_BYTE *)v80 + 28) = 7;
        v110 = (uint64_t **)(*a2 + 24 * v8);
        if (v110 != &v118)
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v110, v118, v119, ((char *)v119 - (char *)v118) >> 4);
        ++v8;
      }
      v122[0] = (void **)&v118;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v122);
      ++v7;
      v4 = v120;
    }
    while (v7 < (uint64_t)(v120[1] - *v120) >> 4);
    v3 = v121;
  }
  if (v3)
  {
    v111 = (unint64_t *)&v3->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_218597598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_218597600(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x2185975D4);
}

void turi::supervised::supervised_learning_model_base::get_metadata_mapping(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "operator()", 1006, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::supervised_learning_model_base::get_metadata_mapping(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218597710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::api_train(turi::supervised::supervised_learning_model_base *a1, const turi::gl_sframe *a2, __int128 *a3, int *a4, uint64_t a5)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type size;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  size_t v69;
  double *v70;
  double *v71;
  unint64_t v72;
  double *v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  int v77;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::string::size_type v88;
  uint64_t *v89;
  uint64_t v90;
  int64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  double v118;
  double v119;
  size_t v121;
  double *v122;
  double *v123;
  unint64_t v124;
  double *v125;
  uint64_t v126;
  double v128;
  double v129;
  double v130;
  double v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  void *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  void **v160;
  _QWORD *v161;
  uint64_t v162;
  std::string *v163;
  __int128 v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  void *v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  uint64_t v195;
  unsigned __int8 *v196;
  unsigned __int8 *v197;
  uint64_t v198;
  unint64_t v199;
  double v200;
  double v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  turi::flexible_type_impl *v205;
  turi::flexible_type_impl *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  void **v212;
  _QWORD *v213;
  std::string::size_type v214;
  std::string *v215;
  __int128 v216;
  _QWORD *v217;
  std::string::size_type v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  std::string::size_type v227;
  unint64_t v228;
  unint64_t v229;
  void *v230;
  _QWORD *v231;
  std::string::size_type v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  std::string::size_type v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  std::string::size_type v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  std::string::size_type v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  std::string::size_type v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  unsigned int v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  std::string::size_type v264;
  void *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  std::string::size_type v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  void *v287;
  void *v288;
  unsigned int v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  void *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  char *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  char *v313;
  _OWORD *v314;
  __int128 v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  _BYTE *option_value;
  uint64_t v321;
  uint64_t v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t v325;
  char **v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int *v333;
  unsigned int v334;
  __int128 v335;
  __int128 v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::string::__raw *v340;
  unsigned int *v341;
  std::string *v342;
  std::string *v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::string::__raw *v347;
  unsigned int *v348;
  std::string *v349;
  std::string *v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::runtime_error *exception;
  std::string *v358;
  __int128 v359;
  _BYTE v360[40];
  void *v361[2];
  char v362;
  void *v363[2];
  char v364;
  _QWORD v365[2];
  std::__shared_weak_count *v366;
  _BYTE v367[40];
  void *v368[2];
  char v369;
  void *v370[2];
  char v371;
  _QWORD v372[2];
  std::__shared_weak_count *v373;
  void *v374[2];
  char v375;
  void *v376;
  void *v377;
  char *v378;
  void *v379[2];
  char v380;
  _QWORD v381[2];
  std::__shared_weak_count *v382;
  _QWORD v383[2];
  std::__shared_weak_count *v384;
  _QWORD v385[2];
  std::__shared_weak_count *v386;
  void **v387;
  char v388;
  _BYTE v389[296];
  std::string v390;
  uint64_t v391;
  _BYTE __str[32];
  __int128 v393;
  __int128 v394;
  std::string *v395;
  std::string *v396;
  void **p_data;
  __int128 v398;
  std::__shared_weak_count *v399;
  _BYTE v400[296];
  std::string v401[12];
  std::string __p;
  uint64_t (**v403)(turi::gl_sframe *__hidden);
  std::__shared_weak_count *v404;
  std::string v405;
  uint64_t v406;

  v406 = *MEMORY[0x24BDAC8D0];
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v385);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v383, a2);
  turi::supervised::create_validation_data((uint64_t)v383, a4, (turi::gl_sframe *)&__p);
  turi::gl_sframe::operator=((uint64_t)a2, (uint64_t)&__p);
  turi::gl_sframe::operator=((uint64_t)v385, (uint64_t)&v403);
  v403 = off_24D91E9C0;
  v10 = v404;
  if (v404)
  {
    p_shared_owners = (unint64_t *)&v404->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
  v13 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v14 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v383[0] = off_24D91E9C0;
  v16 = v384;
  if (v384)
  {
    v17 = (unint64_t *)&v384->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v381, a2);
  turi::gl_sframe::remove_column((uint64_t)v381, (unsigned __int8 **)a3);
  (*(void (**)(turi::supervised::supervised_learning_model_base *, uint64_t))(*(_QWORD *)a1 + 64))(a1, a5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "features");
  v19 = turi::option_manager::value((uint64_t)a1 + 224, (const void **)&__p.__r_.__value_.__l.__data_);
  *(_QWORD *)__str = 0;
  *(_DWORD *)&__str[8] = 0;
  __str[12] = 0;
  if ((_BYTE *)v19 != __str)
  {
    v20 = *(_QWORD *)v19;
    *(_QWORD *)&__str[5] = *(_QWORD *)(v19 + 5);
    *(_QWORD *)__str = v20;
    __str[12] = *(_BYTE *)(v19 + 12);
    if (__str[12] <= 9u && ((1 << __str[12]) & 0x33C) != 0)
    {
      v21 = *(unint64_t **)__str;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  switch(byte_254FF5714)
  {
    case 0:
      v23 = __str[12];
      switch(__str[12])
      {
        case 0:
          v24 = *(_QWORD *)__str == turi::FLEX_UNDEFINED;
          goto LABEL_286;
        case 1:
          v75 = *(double *)__str;
          v76 = turi::FLEX_UNDEFINED;
          goto LABEL_175;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_94;
        case 6:
          if (turi::FLEX_UNDEFINED != (uint64_t)(*(_QWORD *)__str << 8) >> 8)
            goto LABEL_291;
          v77 = *(_DWORD *)&__str[8];
          break;
        default:
          goto LABEL_586;
      }
LABEL_179:
      v24 = v77 == 0;
      goto LABEL_286;
    case 1:
      v23 = __str[12];
      switch(__str[12])
      {
        case 0:
          v75 = *(double *)&turi::FLEX_UNDEFINED;
          v76 = *(_QWORD *)__str;
LABEL_175:
          v128 = (double)v76;
          goto LABEL_176;
        case 1:
          v75 = *(double *)__str;
          v128 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_176:
          v24 = v75 == v128;
          goto LABEL_286;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_94;
        case 6:
          v129 = *(double *)&turi::FLEX_UNDEFINED;
          v130 = (double)*(int *)&__str[8] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)__str << 8) >> 8);
          goto LABEL_185;
        default:
          goto LABEL_586;
      }
    case 2:
      v23 = __str[12];
      if (__str[12] - 3 < 7 || __str[12] < 2u)
        goto LABEL_94;
      if (__str[12] != 2)
        goto LABEL_586;
      if (*(char *)(*(_QWORD *)__str + 31) < 0)
        v69 = *(_QWORD *)(*(_QWORD *)__str + 16);
      else
        v69 = *(unsigned __int8 *)(*(_QWORD *)__str + 31);
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
        v192 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
      else
        v192 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v69 != v192)
        goto LABEL_291;
      v193 = (unsigned __int8 *)(*(_QWORD *)__str + 8);
      if ((*(_BYTE *)(*(_QWORD *)__str + 31) & 0x80) != 0)
        v193 = *(unsigned __int8 **)v193;
      v194 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v194 = *(unsigned __int8 **)v194;
      if ((*(_BYTE *)(*(_QWORD *)__str + 31) & 0x80) != 0)
      {
        v24 = memcmp(v193, v194, v69) == 0;
LABEL_286:
        v57 = v24;
        goto LABEL_289;
      }
      if (v69)
      {
        while (*v193 == *v194)
        {
          ++v193;
          ++v194;
          if (!--v69)
            goto LABEL_95;
        }
LABEL_291:
        turi::supervised::supervised_learning_model_base::api_train(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)::$_0::operator()();
      }
      goto LABEL_95;
    case 3:
      v23 = __str[12];
      if (__str[12] > 9u)
        goto LABEL_586;
      if (__str[12] != 3)
        goto LABEL_94;
      v70 = *(double **)(*(_QWORD *)__str + 8);
      v71 = *(double **)(*(_QWORD *)__str + 16);
      v72 = v71 - v70;
      v73 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v72 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v73) >> 3)
        goto LABEL_291;
      if (v71 == v70)
        goto LABEL_95;
      if (v72 <= 1)
        v74 = 1;
      else
        v74 = v71 - v70;
      if (*v70 == *v73)
      {
        v198 = 1;
        do
        {
          v199 = v198;
          if (v74 == v198)
            break;
          v200 = v70[v198];
          v201 = v73[v198++];
        }
        while (v200 == v201);
        v57 = v199 >= v72;
      }
      else
      {
        v57 = 0;
      }
      goto LABEL_289;
    case 4:
      v23 = __str[12];
      if (__str[12] > 9u)
        goto LABEL_586;
      if (__str[12] != 4)
        goto LABEL_94;
      v25 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v395, (uint64_t *)(*(_QWORD *)__str + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_173;
    case 5:
      v23 = __str[12];
      if (__str[12] > 9u)
        goto LABEL_586;
      if (__str[12] != 5)
        goto LABEL_94;
      v25 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v395, (uint64_t **)(*(_QWORD *)__str + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_173;
    case 6:
      v23 = __str[12];
      switch(__str[12])
      {
        case 0:
          if (*(_QWORD *)__str != turi::FLEX_UNDEFINED << 8 >> 8)
            goto LABEL_291;
          v77 = dword_254FF5710;
          goto LABEL_179;
        case 1:
          v130 = *(double *)__str;
          v129 = (double)dword_254FF5710 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_185:
          v57 = vabdd_f64(v130, v129) < 0.0000005;
          goto LABEL_289;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_94;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)__str) & 0xFFFFFFFFFFFFFFLL) != 0)
            goto LABEL_291;
          v24 = *(_DWORD *)&__str[8] == dword_254FF5710;
          goto LABEL_286;
        default:
          goto LABEL_586;
      }
    case 7:
      v23 = __str[12];
      if (__str[12] < 7u || __str[12] - 8 < 2)
        goto LABEL_94;
      if (__str[12] != 7)
        goto LABEL_586;
      goto LABEL_95;
    case 8:
      v23 = __str[12];
      if (__str[12] < 8u || __str[12] == 9)
        goto LABEL_94;
      if (__str[12] != 8)
        goto LABEL_586;
      v25 = turi::image_type::operator==(*(_QWORD *)__str + 8, turi::FLEX_UNDEFINED + 8);
LABEL_173:
      v57 = v25;
      goto LABEL_289;
    case 9:
      v23 = __str[12];
      if (__str[12] < 9u)
        goto LABEL_94;
      if (__str[12] == 9)
      {
        v26 = turi::FLEX_UNDEFINED;
        v27 = *(_QWORD *)__str;
        if (turi::FLEX_UNDEFINED != *(_QWORD *)__str)
        {
          v28 = (_QWORD *)(*(_QWORD *)__str + 8);
          if (turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)__str + 8, turi::FLEX_UNDEFINED + 8))
          {
            v30 = *(char **)(v27 + 24);
            v29 = *(char **)(v27 + 32);
            v31 = v29 - v30;
            if (v29 != v30)
            {
              if (*v28)
              {
                v32 = 1;
                do
                {
                  v33 = *(_QWORD *)v30;
                  v30 += 8;
                  v32 *= v33;
                }
                while (v30 != v29);
                if (v32)
                {
                  *(_QWORD *)&v398 = 0;
                  std::vector<unsigned long>::vector(&__p, v31 >> 3, &v398);
                  size = __p.__r_.__value_.__l.__size_;
                  v35 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                  v36 = **(_QWORD **)(v26 + 8);
                  v37 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
                  v38 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                  v39 = v38 - 1;
                  if (v38 <= 1)
                    v40 = 1;
                  else
                    v40 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                  do
                  {
                    if ((uint64_t *)size == v35)
                    {
                      v48 = 0;
                      v49 = *(double *)(**(_QWORD **)(v27 + 8) + 8 * *(_QWORD *)(v27 + 72));
                    }
                    else
                    {
                      v41 = 0;
                      v42 = *(uint64_t **)(v27 + 48);
                      v43 = v35;
                      v44 = v40;
                      do
                      {
                        v46 = *v43++;
                        v45 = v46;
                        v47 = *v42++;
                        v41 += v47 * v45;
                        --v44;
                      }
                      while (v44);
                      v48 = 0;
                      v49 = *(double *)(**(_QWORD **)(v27 + 8) + 8 * (*(_QWORD *)(v27 + 72) + v41));
                      v50 = *(uint64_t **)(v26 + 48);
                      v51 = v35;
                      v52 = v40;
                      do
                      {
                        v54 = *v51++;
                        v53 = v54;
                        v55 = *v50++;
                        v48 += v55 * v53;
                        --v52;
                      }
                      while (v52);
                    }
                    v56 = *(double *)(v36 + 8 * (*(_QWORD *)(v26 + 72) + v48));
                    v57 = v49 == v56;
                    if (v49 != v56)
                      break;
                    v58 = v38;
                    v59 = v38 - 1;
                    if (v37 >= 1)
                    {
                      v60 = *(_QWORD *)(v27 + 24);
                      v61 = v35[v39] + 1;
                      v35[v39] = v61;
                      if (v61 >= *(_QWORD *)(v60 + 8 * v39))
                      {
                        v62 = v60 - 16;
                        v63 = v38;
                        v64 = (unint64_t *)((char *)v35 + (v37 & 0xFFFFFFFFFFFFFFF8) - 16);
                        while (1)
                        {
                          v65 = v63 - 1;
                          v64[1] = 0;
                          if ((uint64_t)(v63 - 1) <= 0)
                            break;
                          v66 = *v64 + 1;
                          *v64-- = v66;
                          v67 = *(_QWORD *)(v62 + 8 * v63--);
                          if (v66 < v67)
                          {
                            v59 = v65 - 1;
                            v58 = 1;
                            goto LABEL_56;
                          }
                        }
                        v57 = 1;
                        goto LABEL_584;
                      }
                      v58 = 1;
                      v59 = v38 - 1;
                    }
LABEL_56:
                    ;
                  }
                  while ((v59 & 0x8000000000000000) == 0 && v58);
                  if (!v35)
                    goto LABEL_289;
LABEL_584:
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
                  operator delete(v35);
LABEL_289:
                  if (!v57 && __str[12] != 4)
                    goto LABEL_291;
                }
              }
            }
          }
          else
          {
            v23 = __str[12];
LABEL_94:
            if (v23 != 4)
              goto LABEL_291;
          }
        }
LABEL_95:
        switch(byte_254FF5714)
        {
          case 0:
            switch(__str[12])
            {
              case 0:
                if (*(_QWORD *)__str != turi::FLEX_UNDEFINED)
                  goto LABEL_320;
                goto LABEL_200;
              case 1:
                v103 = *(double *)__str;
                v126 = turi::FLEX_UNDEFINED;
                goto LABEL_194;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_320;
              case 6:
                if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)__str << 8) >> 8 && !*(_DWORD *)&__str[8])
                  goto LABEL_200;
                goto LABEL_320;
              default:
                goto LABEL_586;
            }
          case 1:
            switch(__str[12])
            {
              case 0:
                v103 = *(double *)&turi::FLEX_UNDEFINED;
                v126 = *(_QWORD *)__str;
LABEL_194:
                v110 = (double)v126;
                goto LABEL_195;
              case 1:
                v103 = *(double *)__str;
                v110 = *(double *)&turi::FLEX_UNDEFINED;
                goto LABEL_195;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_320;
              case 6:
                v131 = vabdd_f64((double)*(int *)&__str[8] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)__str << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
                goto LABEL_199;
              default:
                goto LABEL_586;
            }
          case 2:
            if (__str[12] - 3 < 7 || __str[12] < 2u)
              goto LABEL_320;
            if (__str[12] != 2)
              goto LABEL_586;
            if (*(char *)(*(_QWORD *)__str + 31) < 0)
              v121 = *(_QWORD *)(*(_QWORD *)__str + 16);
            else
              v121 = *(unsigned __int8 *)(*(_QWORD *)__str + 31);
            if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
              v195 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
            else
              v195 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            if (v121 != v195)
              goto LABEL_320;
            v196 = (unsigned __int8 *)(*(_QWORD *)__str + 8);
            if ((*(_BYTE *)(*(_QWORD *)__str + 31) & 0x80) != 0)
              v196 = *(unsigned __int8 **)v196;
            v197 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
            if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
              v197 = *(unsigned __int8 **)v197;
            if ((*(_BYTE *)(*(_QWORD *)__str + 31) & 0x80) != 0)
            {
              if (memcmp(v196, v197, v121))
                goto LABEL_320;
            }
            else
            {
              if (!v121)
                goto LABEL_200;
              do
              {
                if (*v196 != *v197)
                  goto LABEL_320;
                ++v196;
                ++v197;
                --v121;
              }
              while (v121);
            }
            goto LABEL_200;
          case 3:
            if (__str[12] > 9u)
              goto LABEL_586;
            if (__str[12] != 3)
              goto LABEL_320;
            v122 = *(double **)(*(_QWORD *)__str + 8);
            v123 = *(double **)(*(_QWORD *)__str + 16);
            v124 = v123 - v122;
            v125 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v124 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v125) >> 3)
              goto LABEL_320;
            if (v123 == v122)
              goto LABEL_200;
            if (v124 <= 1)
              v124 = 1;
            while (*v122 == *v125)
            {
              ++v122;
              ++v125;
              if (!--v124)
                goto LABEL_200;
            }
            goto LABEL_320;
          case 4:
            if (__str[12] > 9u)
              goto LABEL_586;
            if (__str[12] != 4)
              goto LABEL_320;
            v79 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v395, (uint64_t *)(*(_QWORD *)__str + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
            goto LABEL_169;
          case 5:
            if (__str[12] > 9u)
              goto LABEL_586;
            if (__str[12] != 5)
              goto LABEL_320;
            v79 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v395, (uint64_t **)(*(_QWORD *)__str + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
            goto LABEL_169;
          case 6:
            switch(__str[12])
            {
              case 0:
                if (*(_QWORD *)__str == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF5710)
                  goto LABEL_200;
                goto LABEL_320;
              case 1:
                v131 = vabdd_f64(*(double *)__str, (double)dword_254FF5710 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_199:
                if (v131 < 0.0000005)
                  goto LABEL_200;
                goto LABEL_320;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_320;
              case 6:
                if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)__str) & 0xFFFFFFFFFFFFFFLL) != 0
                  || *(_DWORD *)&__str[8] != dword_254FF5710)
                {
                  goto LABEL_320;
                }
                goto LABEL_200;
              default:
                goto LABEL_586;
            }
          case 7:
            if (__str[12] < 7u || __str[12] - 8 < 2)
              goto LABEL_320;
            if (__str[12] != 7)
              goto LABEL_586;
            goto LABEL_200;
          case 8:
            if (__str[12] < 8u || __str[12] == 9)
              goto LABEL_320;
            if (__str[12] != 8)
              goto LABEL_586;
            v79 = turi::image_type::operator==(*(_QWORD *)__str + 8, turi::FLEX_UNDEFINED + 8);
LABEL_169:
            if (!v79)
              goto LABEL_320;
            goto LABEL_200;
          case 9:
            if (__str[12] < 9u)
              goto LABEL_320;
            if (__str[12] != 9)
              goto LABEL_586;
            v80 = turi::FLEX_UNDEFINED;
            v81 = *(_QWORD *)__str;
            if (turi::FLEX_UNDEFINED == *(_QWORD *)__str)
              goto LABEL_200;
            v82 = (_QWORD *)(*(_QWORD *)__str + 8);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)__str + 8, turi::FLEX_UNDEFINED + 8))goto LABEL_320;
            v84 = *(char **)(v81 + 24);
            v83 = *(char **)(v81 + 32);
            v85 = v83 - v84;
            if (v83 == v84)
              goto LABEL_200;
            if (!*v82)
              goto LABEL_200;
            v86 = 1;
            do
            {
              v87 = *(_QWORD *)v84;
              v84 += 8;
              v86 *= v87;
            }
            while (v84 != v83);
            if (!v86)
              goto LABEL_200;
            *(_QWORD *)&v398 = 0;
            std::vector<unsigned long>::vector(&__p, v85 >> 3, &v398);
            v88 = __p.__r_.__value_.__l.__size_;
            v89 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            v90 = **(_QWORD **)(v80 + 8);
            v91 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
            v92 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
            v93 = v92 - 1;
            if (v92 <= 1)
              v94 = 1;
            else
              v94 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
            break;
          default:
            goto LABEL_586;
        }
        do
        {
          if ((uint64_t *)v88 == v89)
          {
            v102 = 0;
            v103 = *(double *)(**(_QWORD **)(v81 + 8) + 8 * *(_QWORD *)(v81 + 72));
          }
          else
          {
            v95 = 0;
            v96 = *(uint64_t **)(v81 + 48);
            v97 = v89;
            v98 = v94;
            do
            {
              v100 = *v97++;
              v99 = v100;
              v101 = *v96++;
              v95 += v101 * v99;
              --v98;
            }
            while (v98);
            v102 = 0;
            v103 = *(double *)(**(_QWORD **)(v81 + 8) + 8 * (*(_QWORD *)(v81 + 72) + v95));
            v104 = *(uint64_t **)(v80 + 48);
            v105 = v89;
            v106 = v94;
            do
            {
              v108 = *v105++;
              v107 = v108;
              v109 = *v104++;
              v102 += v109 * v107;
              --v106;
            }
            while (v106);
          }
          v110 = *(double *)(v90 + 8 * (*(_QWORD *)(v80 + 72) + v102));
          if (v103 != v110)
            break;
          v111 = v92;
          v112 = v92 - 1;
          if (v91 >= 1)
          {
            v113 = *(_QWORD *)(v81 + 24);
            v114 = v89[v93] + 1;
            v89[v93] = v114;
            v115 = (v91 & 0xFFFFFFFFFFFFFFF8) - 16;
            v112 = v92 - 1;
            if (v114 >= *(_QWORD *)(v113 + 8 * v93))
            {
              while (1)
              {
                *(uint64_t *)((char *)v89 + v115 + 8) = 0;
                if (v112 <= 0)
                  break;
                --v112;
                v116 = *(uint64_t *)((char *)v89 + v115) + 1;
                *(uint64_t *)((char *)v89 + v115) = v116;
                v117 = *(_QWORD *)(v113 + v115);
                v115 -= 8;
                if (v116 < v117)
                {
                  v111 = 1;
                  goto LABEL_128;
                }
              }
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
              operator delete(v89);
              goto LABEL_200;
            }
            v111 = 1;
            v112 = v92 - 1;
          }
LABEL_128:
          ;
        }
        while ((v112 & 0x8000000000000000) == 0 && v111);
        if (v89)
        {
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
          v118 = v103;
          v119 = v110;
          operator delete(v89);
          if (v118 != v119)
            goto LABEL_320;
        }
        else
        {
LABEL_195:
          if (v103 != v110)
            goto LABEL_320;
        }
LABEL_200:
        memset(&__p, 0, sizeof(__p));
        switch(__str[12])
        {
          case 2:
            v132 = *(unint64_t **)__str;
            do
            {
              v133 = __ldaxr(v132);
              v134 = v133 - 1;
            }
            while (__stlxr(v134, v132));
            if (!v134)
            {
              v135 = *(_QWORD **)__str;
              if (*(_QWORD *)__str)
              {
                if (*(char *)(*(_QWORD *)__str + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)__str + 8));
                v136 = v135;
                v137 = 0x1012C404EF22A49;
                goto LABEL_237;
              }
            }
            break;
          case 3:
            v146 = *(unint64_t **)__str;
            do
            {
              v147 = __ldaxr(v146);
              v148 = v147 - 1;
            }
            while (__stlxr(v148, v146));
            if (!v148)
            {
              v149 = *(_QWORD **)__str;
              if (*(_QWORD *)__str)
              {
                v150 = *(void **)(*(_QWORD *)__str + 8);
                if (v150)
                {
                  *(_QWORD *)(*(_QWORD *)__str + 16) = v150;
                  operator delete(v150);
                }
                v136 = v149;
                v137 = 0x1080C409938AC02;
                goto LABEL_237;
              }
            }
            break;
          case 4:
            v138 = *(unint64_t **)__str;
            do
            {
              v139 = __ldaxr(v138);
              v140 = v139 - 1;
            }
            while (__stlxr(v140, v138));
            if (!v140)
            {
              v141 = *(_QWORD **)__str;
              if (*(_QWORD *)__str)
              {
                v401[0].__r_.__value_.__r.__words[0] = *(_QWORD *)__str + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v401);
                goto LABEL_230;
              }
            }
            break;
          case 5:
            v151 = *(unint64_t **)__str;
            do
            {
              v152 = __ldaxr(v151);
              v153 = v152 - 1;
            }
            while (__stlxr(v153, v151));
            if (!v153)
            {
              v141 = *(_QWORD **)__str;
              if (*(_QWORD *)__str)
              {
                v401[0].__r_.__value_.__r.__words[0] = *(_QWORD *)__str + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v401);
LABEL_230:
                v136 = v141;
                v137 = 0x1020C405E66F15BLL;
                goto LABEL_237;
              }
            }
            break;
          case 8:
            v154 = *(unint64_t **)__str;
            do
            {
              v155 = __ldaxr(v154);
              v156 = v155 - 1;
            }
            while (__stlxr(v156, v154));
            if (!v156)
            {
              v157 = *(_QWORD **)__str;
              if (*(_QWORD *)__str)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)__str + 16));
                v136 = v157;
                v145 = -235920773;
                goto LABEL_236;
              }
            }
            break;
          case 9:
            v142 = *(unint64_t **)__str;
            do
            {
              v143 = __ldaxr(v142);
              v144 = v143 - 1;
            }
            while (__stlxr(v144, v142));
            if (!v144 && *(_QWORD *)__str)
            {
              v136 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)__str);
              v145 = 2071181815;
LABEL_236:
              v137 = v145 | 0x1030C4000000000;
LABEL_237:
              MEMORY[0x219A19A08](v136, v137);
            }
            break;
          default:
            break;
        }
        *(_QWORD *)__str = 0;
        *(_DWORD *)&__str[8] = 0;
        __str[12] = 4;
        v158 = (_QWORD *)operator new();
        v159 = v158;
        *v158 = 0;
        v158[1] = 0;
        v160 = (void **)(v158 + 1);
        v158[2] = 0;
        v158[3] = 0;
        *(_QWORD *)__str = v158;
        *v158 = 1;
        switch(__str[12])
        {
          case 2:
            if (*v158 != 1)
            {
              v161 = (_QWORD *)operator new();
              v162 = *(_QWORD *)__str;
              *v161 = **(_QWORD **)__str;
              v163 = (std::string *)(v161 + 1);
              if (*(char *)(v162 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v163, *(const std::string::value_type **)(v162 + 8), *(_QWORD *)(v162 + 16));
              }
              else
              {
                v164 = *(_OWORD *)(v162 + 8);
                v161[3] = *(_QWORD *)(v162 + 24);
                *(_OWORD *)&v163->__r_.__value_.__l.__data_ = v164;
              }
              *(_QWORD *)__str = v161;
              *v161 = 1;
              do
              {
                v202 = __ldaxr(v159);
                v203 = v202 - 1;
              }
              while (__stlxr(v203, v159));
              if (!v203)
              {
                v169 = 0x1012C404EF22A49;
                if ((*((char *)v159 + 31) & 0x80000000) == 0)
                  goto LABEL_318;
                v178 = *v160;
                goto LABEL_317;
              }
            }
            break;
          case 3:
            if (*v158 != 1)
            {
              v174 = (_QWORD *)operator new();
              v175 = *(_QWORD *)__str;
              *v174 = **(_QWORD **)__str;
              v174[2] = 0;
              v174[3] = 0;
              v174[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v174 + 1, *(const void **)(v175 + 8), *(_QWORD *)(v175 + 16), (uint64_t)(*(_QWORD *)(v175 + 16) - *(_QWORD *)(v175 + 8)) >> 3);
              *(_QWORD *)__str = v174;
              *v174 = 1;
              do
              {
                v176 = __ldaxr(v159);
                v177 = v176 - 1;
              }
              while (__stlxr(v177, v159));
              if (!v177)
              {
                v169 = 0x1080C409938AC02;
                v178 = *v160;
                if (*v160)
                {
                  v159[2] = v178;
LABEL_317:
                  operator delete(v178);
                }
                goto LABEL_318;
              }
            }
            break;
          case 4:
            if (*v158 != 1)
            {
              v165 = (_QWORD *)operator new();
              v166 = *(_QWORD *)__str;
              *v165 = **(_QWORD **)__str;
              v165[2] = 0;
              v165[3] = 0;
              v165[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v165 + 1, *(uint64_t **)(v166 + 8), *(uint64_t **)(v166 + 16), (uint64_t)(*(_QWORD *)(v166 + 16) - *(_QWORD *)(v166 + 8)) >> 4);
              *(_QWORD *)__str = v165;
              *v165 = 1;
              do
              {
                v167 = __ldaxr(v159);
                v168 = v167 - 1;
              }
              while (__stlxr(v168, v159));
              if (!v168)
              {
                v169 = 0x1020C405E66F15BLL;
                v401[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v401);
                goto LABEL_318;
              }
            }
            break;
          case 5:
            if (*v158 != 1)
            {
              v179 = (_QWORD *)operator new();
              v180 = *(_QWORD *)__str;
              *v179 = **(_QWORD **)__str;
              v179[2] = 0;
              v179[3] = 0;
              v179[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v179 + 1, *(uint64_t **)(v180 + 8), *(uint64_t **)(v180 + 16), (uint64_t)(*(_QWORD *)(v180 + 16) - *(_QWORD *)(v180 + 8)) >> 5);
              *(_QWORD *)__str = v179;
              *v179 = 1;
              do
              {
                v181 = __ldaxr(v159);
                v182 = v181 - 1;
              }
              while (__stlxr(v182, v159));
              if (!v182)
              {
                v169 = 0x1020C405E66F15BLL;
                v401[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v401);
                goto LABEL_318;
              }
            }
            break;
          case 8:
            if (*v158 != 1)
            {
              v183 = operator new();
              v184 = *(_QWORD *)__str;
              *(_QWORD *)v183 = **(_QWORD **)__str;
              *(_QWORD *)(v183 + 8) = *(_QWORD *)(v184 + 8);
              v185 = *(_QWORD *)(v184 + 16);
              *(_QWORD *)(v183 + 16) = v185;
              if (v185)
              {
                v186 = (unsigned int *)(v185 + 8);
                do
                  v187 = __ldxr(v186);
                while (__stxr(v187 + 1, v186));
              }
              v188 = *(_OWORD *)(v184 + 24);
              v189 = *(_OWORD *)(v184 + 40);
              *(_OWORD *)(v183 + 56) = *(_OWORD *)(v184 + 56);
              *(_OWORD *)(v183 + 40) = v189;
              *(_OWORD *)(v183 + 24) = v188;
              *(_QWORD *)__str = v183;
              *(_QWORD *)v183 = 1;
              do
              {
                v190 = __ldaxr(v159);
                v191 = v190 - 1;
              }
              while (__stlxr(v191, v159));
              if (!v191)
              {
                v169 = 0x1030C40F1F0227BLL;
                boost::detail::shared_count::~shared_count((unsigned int **)v159 + 2);
                goto LABEL_318;
              }
            }
            break;
          case 9:
            if (*v158 != 1)
            {
              v170 = (_QWORD *)operator new();
              v171 = *(_QWORD *)__str + 8;
              *v170 = **(_QWORD **)__str;
              turi::flexible_type_impl::ndarray<double>::ndarray(v170 + 1, v171);
              *(_QWORD *)__str = v170;
              *v170 = 1;
              do
              {
                v172 = __ldaxr(v159);
                v173 = v172 - 1;
              }
              while (__stlxr(v173, v159));
              if (!v173)
              {
                v169 = 0x1030C407B73B9F7;
                std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v159);
LABEL_318:
                MEMORY[0x219A19A08](v159, v169);
              }
            }
            break;
          default:
            break;
        }
        v204 = *(_QWORD *)__str;
        std::vector<turi::flexible_type>::__vdeallocate((void **)(*(_QWORD *)__str + 8));
        *(std::string *)(v204 + 8) = __p;
        memset(&__p, 0, sizeof(__p));
        v401[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v401);
LABEL_320:
        v205 = *(turi::flexible_type_impl **)(*(_QWORD *)__str + 8);
        v206 = *(turi::flexible_type_impl **)(*(_QWORD *)__str + 16);
        memset(&__p, 0, sizeof(__p));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&__p, v205, v206, (v206 - v205) >> 4);
        if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
        {
          turi::gl_sframe::column_names((turi::gl_sframe *)v381);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&__p);
          __p = v401[0];
          memset(v401, 0, 24);
          *(_QWORD *)&v398 = v401;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v398);
          std::string::basic_string[abi:ne180100]<0>(v401, "features");
          v399 = 0;
          v398 = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>((uint64_t *)&v398, (const std::string *)__p.__r_.__value_.__l.__data_, (const std::string *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
          *(std::string::size_type *)((char *)v405.__r_.__value_.__r.__words + 5) = 0x400000000000000;
          v405.__r_.__value_.__r.__words[0] = 0;
          v210 = (_QWORD *)operator new();
          v211 = v210;
          *v210 = 0;
          v210[1] = 0;
          v212 = (void **)(v210 + 1);
          v210[2] = 0;
          v210[3] = 0;
          v405.__r_.__value_.__r.__words[0] = (std::string::size_type)v210;
          *v210 = 1;
          switch(v405.__r_.__value_.__s.__data_[12])
          {
            case 2:
              if (*v210 != 1)
              {
                v213 = (_QWORD *)operator new();
                v214 = v405.__r_.__value_.__r.__words[0];
                *v213 = *(_QWORD *)v405.__r_.__value_.__l.__data_;
                v215 = (std::string *)(v213 + 1);
                if (*(char *)(v214 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(v215, *(const std::string::value_type **)(v214 + 8), *(_QWORD *)(v214 + 16));
                }
                else
                {
                  v216 = *(_OWORD *)(v214 + 8);
                  v213[3] = *(_QWORD *)(v214 + 24);
                  *(_OWORD *)&v215->__r_.__value_.__l.__data_ = v216;
                }
                v405.__r_.__value_.__r.__words[0] = (std::string::size_type)v213;
                *v213 = 1;
                do
                {
                  v244 = __ldaxr(v211);
                  v245 = v244 - 1;
                }
                while (__stlxr(v245, v211));
                if (!v245)
                {
                  v221 = 0x1012C404EF22A49;
                  if ((*((char *)v211 + 31) & 0x80000000) == 0)
                    goto LABEL_366;
                  v230 = *v212;
                  goto LABEL_365;
                }
              }
              break;
            case 3:
              if (*v210 != 1)
              {
                v226 = (_QWORD *)operator new();
                v227 = v405.__r_.__value_.__r.__words[0];
                *v226 = *(_QWORD *)v405.__r_.__value_.__l.__data_;
                v226[2] = 0;
                v226[3] = 0;
                v226[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v226 + 1, *(const void **)(v227 + 8), *(_QWORD *)(v227 + 16), (uint64_t)(*(_QWORD *)(v227 + 16) - *(_QWORD *)(v227 + 8)) >> 3);
                v405.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
                *v226 = 1;
                do
                {
                  v228 = __ldaxr(v211);
                  v229 = v228 - 1;
                }
                while (__stlxr(v229, v211));
                if (!v229)
                {
                  v221 = 0x1080C409938AC02;
                  v230 = *v212;
                  if (*v212)
                  {
                    v211[2] = v230;
LABEL_365:
                    operator delete(v230);
                  }
                  goto LABEL_366;
                }
              }
              break;
            case 4:
              if (*v210 != 1)
              {
                v217 = (_QWORD *)operator new();
                v218 = v405.__r_.__value_.__r.__words[0];
                *v217 = *(_QWORD *)v405.__r_.__value_.__l.__data_;
                v217[2] = 0;
                v217[3] = 0;
                v217[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v217 + 1, *(uint64_t **)(v218 + 8), *(uint64_t **)(v218 + 16), (uint64_t)(*(_QWORD *)(v218 + 16) - *(_QWORD *)(v218 + 8)) >> 4);
                v405.__r_.__value_.__r.__words[0] = (std::string::size_type)v217;
                *v217 = 1;
                do
                {
                  v219 = __ldaxr(v211);
                  v220 = v219 - 1;
                }
                while (__stlxr(v220, v211));
                if (!v220)
                {
                  v221 = 0x1020C405E66F15BLL;
                  v395 = (std::string *)v212;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v395);
                  goto LABEL_366;
                }
              }
              break;
            case 5:
              if (*v210 != 1)
              {
                v231 = (_QWORD *)operator new();
                v232 = v405.__r_.__value_.__r.__words[0];
                *v231 = *(_QWORD *)v405.__r_.__value_.__l.__data_;
                v231[2] = 0;
                v231[3] = 0;
                v231[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v231 + 1, *(uint64_t **)(v232 + 8), *(uint64_t **)(v232 + 16), (uint64_t)(*(_QWORD *)(v232 + 16) - *(_QWORD *)(v232 + 8)) >> 5);
                v405.__r_.__value_.__r.__words[0] = (std::string::size_type)v231;
                *v231 = 1;
                do
                {
                  v233 = __ldaxr(v211);
                  v234 = v233 - 1;
                }
                while (__stlxr(v234, v211));
                if (!v234)
                {
                  v221 = 0x1020C405E66F15BLL;
                  v395 = (std::string *)v212;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v395);
                  goto LABEL_366;
                }
              }
              break;
            case 8:
              if (*v210 != 1)
              {
                v235 = operator new();
                v236 = v405.__r_.__value_.__r.__words[0];
                *(_QWORD *)v235 = *(_QWORD *)v405.__r_.__value_.__l.__data_;
                *(_QWORD *)(v235 + 8) = *(_QWORD *)(v236 + 8);
                v237 = *(_QWORD *)(v236 + 16);
                *(_QWORD *)(v235 + 16) = v237;
                if (v237)
                {
                  v238 = (unsigned int *)(v237 + 8);
                  do
                    v239 = __ldxr(v238);
                  while (__stxr(v239 + 1, v238));
                }
                v240 = *(_OWORD *)(v236 + 24);
                v241 = *(_OWORD *)(v236 + 40);
                *(_OWORD *)(v235 + 56) = *(_OWORD *)(v236 + 56);
                *(_OWORD *)(v235 + 40) = v241;
                *(_OWORD *)(v235 + 24) = v240;
                v405.__r_.__value_.__r.__words[0] = v235;
                *(_QWORD *)v235 = 1;
                do
                {
                  v242 = __ldaxr(v211);
                  v243 = v242 - 1;
                }
                while (__stlxr(v243, v211));
                if (!v243)
                {
                  v221 = 0x1030C40F1F0227BLL;
                  boost::detail::shared_count::~shared_count((unsigned int **)v211 + 2);
                  goto LABEL_366;
                }
              }
              break;
            case 9:
              if (*v210 != 1)
              {
                v222 = (_QWORD *)operator new();
                v223 = v405.__r_.__value_.__r.__words[0] + 8;
                *v222 = *(_QWORD *)v405.__r_.__value_.__l.__data_;
                turi::flexible_type_impl::ndarray<double>::ndarray(v222 + 1, v223);
                v405.__r_.__value_.__r.__words[0] = (std::string::size_type)v222;
                *v222 = 1;
                do
                {
                  v224 = __ldaxr(v211);
                  v225 = v224 - 1;
                }
                while (__stlxr(v225, v211));
                if (!v225)
                {
                  v221 = 0x1030C407B73B9F7;
                  std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v211);
LABEL_366:
                  MEMORY[0x219A19A08](v211, v221);
                }
              }
              break;
            default:
              break;
          }
          v246 = v405.__r_.__value_.__r.__words[0];
          std::vector<turi::flexible_type>::__vdeallocate((void **)(v405.__r_.__value_.__r.__words[0] + 8));
          *(_OWORD *)(v246 + 8) = v398;
          *(_QWORD *)(v246 + 24) = v399;
          v398 = 0uLL;
          v399 = 0;
          turi::option_manager::set_option((uint64_t)a1 + 224, (uint64_t)v401, (uint64_t)&v405);
          switch(v405.__r_.__value_.__s.__data_[12])
          {
            case 2:
              v247 = (unint64_t *)v405.__r_.__value_.__r.__words[0];
              do
              {
                v248 = __ldaxr(v247);
                v249 = v248 - 1;
              }
              while (__stlxr(v249, v247));
              if (!v249)
              {
                v250 = v405.__r_.__value_.__r.__words[0];
                if (v405.__r_.__value_.__r.__words[0])
                {
                  if (*(char *)(v405.__r_.__value_.__r.__words[0] + 31) < 0)
                    operator delete(*(void **)(v405.__r_.__value_.__r.__words[0] + 8));
                  v251 = (_QWORD *)v250;
                  v252 = 0x1012C404EF22A49;
                  goto LABEL_404;
                }
              }
              break;
            case 3:
              v261 = (unint64_t *)v405.__r_.__value_.__r.__words[0];
              do
              {
                v262 = __ldaxr(v261);
                v263 = v262 - 1;
              }
              while (__stlxr(v263, v261));
              if (!v263)
              {
                v264 = v405.__r_.__value_.__r.__words[0];
                if (v405.__r_.__value_.__r.__words[0])
                {
                  v265 = *(void **)(v405.__r_.__value_.__r.__words[0] + 8);
                  if (v265)
                  {
                    *(_QWORD *)(v405.__r_.__value_.__r.__words[0] + 16) = v265;
                    operator delete(v265);
                  }
                  v251 = (_QWORD *)v264;
                  v252 = 0x1080C409938AC02;
                  goto LABEL_404;
                }
              }
              break;
            case 4:
              v253 = (unint64_t *)v405.__r_.__value_.__r.__words[0];
              do
              {
                v254 = __ldaxr(v253);
                v255 = v254 - 1;
              }
              while (__stlxr(v255, v253));
              if (!v255)
              {
                v256 = v405.__r_.__value_.__r.__words[0];
                if (v405.__r_.__value_.__r.__words[0])
                {
                  v395 = (std::string *)(v405.__r_.__value_.__r.__words[0] + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v395);
                  goto LABEL_397;
                }
              }
              break;
            case 5:
              v266 = (unint64_t *)v405.__r_.__value_.__r.__words[0];
              do
              {
                v267 = __ldaxr(v266);
                v268 = v267 - 1;
              }
              while (__stlxr(v268, v266));
              if (!v268)
              {
                v256 = v405.__r_.__value_.__r.__words[0];
                if (v405.__r_.__value_.__r.__words[0])
                {
                  v395 = (std::string *)(v405.__r_.__value_.__r.__words[0] + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v395);
LABEL_397:
                  v251 = (_QWORD *)v256;
                  v252 = 0x1020C405E66F15BLL;
                  goto LABEL_404;
                }
              }
              break;
            case 8:
              v269 = (unint64_t *)v405.__r_.__value_.__r.__words[0];
              do
              {
                v270 = __ldaxr(v269);
                v271 = v270 - 1;
              }
              while (__stlxr(v271, v269));
              if (!v271)
              {
                v272 = v405.__r_.__value_.__r.__words[0];
                if (v405.__r_.__value_.__r.__words[0])
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v405.__r_.__value_.__r.__words[0] + 16));
                  v251 = (_QWORD *)v272;
                  v260 = -235920773;
                  goto LABEL_403;
                }
              }
              break;
            case 9:
              v257 = (unint64_t *)v405.__r_.__value_.__r.__words[0];
              do
              {
                v258 = __ldaxr(v257);
                v259 = v258 - 1;
              }
              while (__stlxr(v259, v257));
              if (!v259 && v405.__r_.__value_.__r.__words[0])
              {
                v251 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v405.__r_.__value_.__l.__data_);
                v260 = 2071181815;
LABEL_403:
                v252 = v260 | 0x1030C4000000000;
LABEL_404:
                MEMORY[0x219A19A08](v251, v252);
              }
              break;
            default:
              break;
          }
          v405.__r_.__value_.__r.__words[0] = 0;
          LODWORD(v405.__r_.__value_.__r.__words[1]) = 0;
          v405.__r_.__value_.__s.__data_[12] = 0;
          v395 = (std::string *)&v398;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v395);
          if (SHIBYTE(v401[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v401[0].__r_.__value_.__l.__data_);
        }
        else
        {
          turi::gl_sframe::select_columns((uint64_t)v381, (uint64_t)&__p, v401);
          turi::gl_sframe::operator=((uint64_t)v381, (uint64_t)v401);
          v401[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
          v207 = (std::__shared_weak_count *)v401[0].__r_.__value_.__r.__words[2];
          if (v401[0].__r_.__value_.__r.__words[2])
          {
            v208 = (unint64_t *)(v401[0].__r_.__value_.__r.__words[2] + 8);
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }
        }
        v401[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v401);
        switch(__str[12])
        {
          case 2:
            v273 = *(unint64_t **)__str;
            do
            {
              v274 = __ldaxr(v273);
              v275 = v274 - 1;
            }
            while (__stlxr(v275, v273));
            if (!v275)
            {
              v276 = *(_QWORD *)__str;
              if (*(_QWORD *)__str)
              {
                if (*(char *)(*(_QWORD *)__str + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)__str + 8));
                v277 = v276;
                v278 = 0x1012C404EF22A49;
                goto LABEL_448;
              }
            }
            break;
          case 3:
            v290 = *(unint64_t **)__str;
            do
            {
              v291 = __ldaxr(v290);
              v292 = v291 - 1;
            }
            while (__stlxr(v292, v290));
            if (!v292)
            {
              v293 = *(_QWORD *)__str;
              if (*(_QWORD *)__str)
              {
                v294 = *(void **)(*(_QWORD *)__str + 8);
                if (v294)
                {
                  *(_QWORD *)(*(_QWORD *)__str + 16) = v294;
                  operator delete(v294);
                }
                v277 = v293;
                v278 = 0x1080C409938AC02;
                goto LABEL_448;
              }
            }
            break;
          case 4:
            v279 = *(unint64_t **)__str;
            do
            {
              v280 = __ldaxr(v279);
              v281 = v280 - 1;
            }
            while (__stlxr(v281, v279));
            if (!v281)
            {
              v282 = *(_QWORD *)__str;
              if (*(_QWORD *)__str)
              {
                __p.__r_.__value_.__r.__words[0] = *(_QWORD *)__str + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_441;
              }
            }
            break;
          case 5:
            v295 = *(unint64_t **)__str;
            do
            {
              v296 = __ldaxr(v295);
              v297 = v296 - 1;
            }
            while (__stlxr(v297, v295));
            if (!v297)
            {
              v282 = *(_QWORD *)__str;
              if (*(_QWORD *)__str)
              {
                __p.__r_.__value_.__r.__words[0] = *(_QWORD *)__str + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_441:
                v277 = v282;
                v278 = 0x1020C405E66F15BLL;
                goto LABEL_448;
              }
            }
            break;
          case 8:
            v298 = *(unint64_t **)__str;
            do
            {
              v299 = __ldaxr(v298);
              v300 = v299 - 1;
            }
            while (__stlxr(v300, v298));
            if (!v300)
            {
              v301 = *(_QWORD *)__str;
              if (*(_QWORD *)__str)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)__str + 16));
                v277 = v301;
                v289 = -235920773;
                goto LABEL_447;
              }
            }
            break;
          case 9:
            v283 = *(unint64_t **)__str;
            do
            {
              v284 = __ldaxr(v283);
              v285 = v284 - 1;
            }
            while (__stlxr(v285, v283));
            if (!v285)
            {
              v286 = *(_QWORD *)__str;
              if (*(_QWORD *)__str)
              {
                v287 = *(void **)(*(_QWORD *)__str + 48);
                if (v287)
                {
                  *(_QWORD *)(*(_QWORD *)__str + 56) = v287;
                  operator delete(v287);
                }
                v288 = *(void **)(v286 + 24);
                if (v288)
                {
                  *(_QWORD *)(v286 + 32) = v288;
                  operator delete(v288);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v286 + 8);
                v277 = v286;
                v289 = 2071181815;
LABEL_447:
                v278 = v289 | 0x1030C4000000000;
LABEL_448:
                MEMORY[0x219A19A08](v277, v278);
              }
            }
            break;
          default:
            break;
        }
        turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)v381, (turi::sframe *)&__p);
        if (*((char *)a3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
        }
        else
        {
          *(_OWORD *)__str = *a3;
          *(_QWORD *)&__str[16] = *((_QWORD *)a3 + 2);
        }
        v396 = 0;
        v395 = 0;
        p_data = 0;
        v405.__r_.__value_.__r.__words[0] = (std::string::size_type)&v395;
        v405.__r_.__value_.__s.__data_[8] = 0;
        v395 = (std::string *)operator new(0x18uLL);
        v396 = v395;
        p_data = (void **)&v395[1].__r_.__value_.__l.__data_;
        v396 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)__str, (__int128 *)&__str[24], v395);
        turi::gl_sframe::select_columns((uint64_t)a2, (uint64_t)&v395, &v398);
        turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v398, (turi::sframe *)v401);
        *(_QWORD *)&v398 = off_24D91E9C0;
        v302 = v399;
        if (v399)
        {
          v303 = (unint64_t *)&v399->__shared_owners_;
          do
            v304 = __ldaxr(v303);
          while (__stlxr(v304 - 1, v303));
          if (!v304)
          {
            ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
            std::__shared_weak_count::__release_weak(v302);
          }
        }
        v405.__r_.__value_.__r.__words[0] = (std::string::size_type)&v395;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v305 = (char *)(*(uint64_t (**)(turi::supervised::supervised_learning_model_base *))(*(_QWORD *)a1 + 16))(a1);
        std::string::basic_string[abi:ne180100]<0>(v379, v305);
        turi::sframe::sframe((turi::sframe *)v400, (const turi::sframe *)v401);
        turi::supervised::check_target_column_type((uint64_t *)v379, (turi::sframe *)v400);
        turi::sframe::~sframe((turi::sframe *)v400);
        if (v380 < 0)
          operator delete(v379[0]);
        if ((*(unsigned int (**)(turi::supervised::supervised_learning_model_base *))(*(_QWORD *)a1 + 248))(a1))
          v306 = 2;
        else
          v306 = 1;
        turi::sframe::sframe((turi::sframe *)&v398);
        turi::sframe::sframe((turi::sframe *)&v395);
        if (turi::gl_sframe::num_columns((turi::gl_sframe *)v385))
        {
          turi::gl_sframe::column_names((turi::gl_sframe *)v381);
          turi::gl_sframe::select_columns((uint64_t)v385, (uint64_t)&v376, &v405);
          turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v405, (turi::sframe *)__str);
          turi::sframe::operator=((uint64_t)&v398, (uint64_t)__str);
          turi::sframe::~sframe((turi::sframe *)__str);
          v405.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
          v307 = (std::__shared_weak_count *)v405.__r_.__value_.__r.__words[2];
          if (v405.__r_.__value_.__r.__words[2])
          {
            v308 = (unint64_t *)(v405.__r_.__value_.__r.__words[2] + 8);
            do
              v309 = __ldaxr(v308);
            while (__stlxr(v309 - 1, v308));
            if (!v309)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v307);
            }
          }
          v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v376;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
          if (*((char *)a3 + 23) < 0)
            std::string::__init_copy_ctor_external(&v390, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
          else
            v390 = *(std::string *)a3;
          v376 = 0;
          v377 = 0;
          v378 = 0;
          v387 = &v376;
          v388 = 0;
          v376 = operator new(0x18uLL);
          v377 = v376;
          v378 = (char *)v376 + 24;
          v377 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v378, (__int128 *)&v390, (__int128 *)&v391, (std::string *)v376);
          turi::gl_sframe::select_columns((uint64_t)v385, (uint64_t)&v376, &v405);
          turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v405, (turi::sframe *)__str);
          turi::sframe::operator=((uint64_t)&v395, (uint64_t)__str);
          turi::sframe::~sframe((turi::sframe *)__str);
          v405.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
          v310 = (std::__shared_weak_count *)v405.__r_.__value_.__r.__words[2];
          if (v405.__r_.__value_.__r.__words[2])
          {
            v311 = (unint64_t *)(v405.__r_.__value_.__r.__words[2] + 8);
            do
              v312 = __ldaxr(v311);
            while (__stlxr(v312 - 1, v311));
            if (!v312)
            {
              ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
              std::__shared_weak_count::__release_weak(v310);
            }
          }
          v387 = &v376;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v387);
          if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v390.__r_.__value_.__l.__data_);
          v313 = (char *)(*(uint64_t (**)(turi::supervised::supervised_learning_model_base *))(*(_QWORD *)a1 + 16))(a1);
          std::string::basic_string[abi:ne180100]<0>(v374, v313);
          turi::sframe::sframe((turi::sframe *)v389, (const turi::sframe *)&v395);
          turi::supervised::check_target_column_type((uint64_t *)v374, (turi::sframe *)v389);
          turi::sframe::~sframe((turi::sframe *)v389);
          if (v375 < 0)
            operator delete(v374[0]);
          turi::gl_sframe::column_names((turi::gl_sframe *)v381);
          v314 = *(_OWORD **)&__str[8];
          if (*(_QWORD *)&__str[8] >= *(_QWORD *)&__str[16])
          {
            v316 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__str, a3);
          }
          else
          {
            if (*((char *)a3 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)&__str[8], *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
            }
            else
            {
              v315 = *a3;
              *(_QWORD *)(*(_QWORD *)&__str[8] + 16) = *((_QWORD *)a3 + 2);
              *v314 = v315;
            }
            v316 = (uint64_t)v314 + 24;
          }
          *(_QWORD *)&__str[8] = v316;
          turi::gl_sframe::select_columns((uint64_t)v385, (uint64_t)__str, &v405);
          turi::gl_sframe::operator=((uint64_t)v385, (uint64_t)&v405);
          v405.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
          v317 = (std::__shared_weak_count *)v405.__r_.__value_.__r.__words[2];
          if (v405.__r_.__value_.__r.__words[2])
          {
            v318 = (unint64_t *)(v405.__r_.__value_.__r.__words[2] + 8);
            do
              v319 = __ldaxr(v318);
            while (__stlxr(v319 - 1, v318));
            if (!v319)
            {
              ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
              std::__shared_weak_count::__release_weak(v317);
            }
          }
          v405.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
        }
        std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],turi::gl_sframe,0>((uint64_t)__str, "validation_data", (uint64_t)v385);
        std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v405, (const void **)__str, 1);
        turi::ml_model_base::add_or_update_state((uint64_t)a1, &v405);
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v405, (char *)v405.__r_.__value_.__l.__size_);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__str[24]);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        (*(void (**)(turi::supervised::supervised_learning_model_base *, std::string *, std::string *, __int128 *, std::string **, uint64_t, _QWORD))(*(_QWORD *)a1 + 200))(a1, &__p, v401, &v398, &v395, v306, 0);
        (*(void (**)(turi::supervised::supervised_learning_model_base *))(*(_QWORD *)a1 + 72))(a1);
        std::string::basic_string[abi:ne180100]<0>(&v376, "disable_posttrain_evaluation");
        option_value = (_BYTE *)turi::ml_model_base::get_option_value((uint64_t)a1, (const void **)&v376);
        v321 = 0;
        switch(option_value[12])
        {
          case 0:
            v321 = *(_QWORD *)option_value;
            goto LABEL_524;
          case 1:
            v321 = (uint64_t)*(double *)option_value;
            goto LABEL_524;
          case 2:
            v325 = *(_QWORD *)option_value;
            v326 = (char **)(*(_QWORD *)option_value + 8);
            v390.__r_.__value_.__r.__words[0] = 0;
            v327 = (char *)v326;
            if (*(char *)(v325 + 31) < 0)
              v327 = *v326;
            std::string::basic_string[abi:ne180100]<0>(__str, v327);
            v321 = std::stoll((const std::string *)__str, (size_t *)&v390, 10);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            if (*(char *)(v325 + 31) < 0)
              v328 = *(_QWORD *)(v325 + 16);
            else
              v328 = *(unsigned __int8 *)(v325 + 31);
            if (v390.__r_.__value_.__r.__words[0] != v328)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v358 = std::string::append(&v405, " cannot be interpreted as an integer");
              v359 = *(_OWORD *)&v358->__r_.__value_.__l.__data_;
              *(_QWORD *)&__str[16] = *((_QWORD *)&v358->__r_.__value_.__l + 2);
              *(_OWORD *)__str = v359;
              v358->__r_.__value_.__l.__size_ = 0;
              v358->__r_.__value_.__r.__words[2] = 0;
              v358->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)__str);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_524;
          case 3:
            v322 = *(_QWORD *)option_value;
            memset(__str, 0, 24);
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v322 + 8), *(_QWORD *)(v322 + 16), (uint64_t)(*(_QWORD *)(v322 + 16) - *(_QWORD *)(v322 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (*(_QWORD *)__str)
            {
              *(_QWORD *)&__str[8] = *(_QWORD *)__str;
              operator delete(*(void **)__str);
            }
            goto LABEL_523;
          case 4:
            v329 = *(_QWORD *)option_value;
            memset(__str, 0, 24);
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v329 + 8), *(uint64_t **)(v329 + 16), (uint64_t)(*(_QWORD *)(v329 + 16) - *(_QWORD *)(v329 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v405.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
            goto LABEL_523;
          case 5:
            v330 = *(_QWORD *)option_value;
            memset(__str, 0, 24);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v330 + 8), *(uint64_t **)(v330 + 16), (uint64_t)(*(_QWORD *)(v330 + 16) - *(_QWORD *)(v330 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v405.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
            goto LABEL_523;
          case 6:
            v321 = (uint64_t)(*(_QWORD *)option_value << 8) >> 8;
            goto LABEL_524;
          case 7:
            goto LABEL_524;
          case 8:
            v331 = *(_QWORD *)option_value;
            v332 = *(_QWORD *)(*(_QWORD *)option_value + 16);
            *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)option_value + 8);
            *(_QWORD *)&__str[8] = v332;
            if (v332)
            {
              v333 = (unsigned int *)(v332 + 8);
              do
                v334 = __ldxr(v333);
              while (__stxr(v334 + 1, v333));
            }
            v335 = *(_OWORD *)(v331 + 24);
            v336 = *(_OWORD *)(v331 + 56);
            v393 = *(_OWORD *)(v331 + 40);
            v394 = v336;
            *(_OWORD *)&__str[16] = v335;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
            goto LABEL_523;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)option_value + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v393 + 1))
            {
              *(_QWORD *)&v394 = *((_QWORD *)&v393 + 1);
              operator delete(*((void **)&v393 + 1));
            }
            if (*(_QWORD *)&__str[16])
            {
              *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
              operator delete(*(void **)&__str[16]);
            }
            v321 = *(_QWORD *)&__str[8];
            if (!*(_QWORD *)&__str[8])
              goto LABEL_524;
            v323 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
            do
              v324 = __ldaxr(v323);
            while (__stlxr(v324 - 1, v323));
            if (!v324)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v321 + 16))(v321);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v321);
            }
LABEL_523:
            v321 = 0;
LABEL_524:
            if (SHIBYTE(v378) < 0)
            {
              operator delete(v376);
              if (v321)
                goto LABEL_567;
            }
            else if (v321)
            {
              goto LABEL_567;
            }
            *(_OWORD *)&__str[8] = 0uLL;
            *(_QWORD *)__str = &__str[8];
            turi::gl_sframe::gl_sframe((turi::gl_sframe *)v372, a2);
            std::string::basic_string[abi:ne180100]<0>(v370, "auto");
            std::string::basic_string[abi:ne180100]<0>(v368, "report");
            turi::gl_sarray::gl_sarray((turi::gl_sarray *)v367);
            turi::supervised::supervised_learning_model_base::api_evaluate(a1, (turi::gl_sframe *)v372, (uint64_t)v370, (uint64_t *)v368, (turi::gl_sarray *)v367, 0, (uint64_t **)&v405);
            turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v367);
            if (v369 < 0)
              operator delete(v368[0]);
            if (v371 < 0)
              operator delete(v370[0]);
            v372[0] = off_24D91E9C0;
            v337 = v373;
            if (v373)
            {
              v338 = (unint64_t *)&v373->__shared_owners_;
              do
                v339 = __ldaxr(v338);
              while (__stlxr(v339 - 1, v338));
              if (!v339)
              {
                ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                std::__shared_weak_count::__release_weak(v337);
              }
            }
            v340 = (std::string::__raw *)v405.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)v405.__r_.__value_.__l.__data_ != &v405.__r_.__value_.__r.__words[1])
            {
              do
              {
                std::operator+<char>();
                v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v376;
                v341 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__str, (const void **)&v376, (uint64_t)&std::piecewise_construct, &v390);
                boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v341 + 14, (uint64_t *)&v340[2].__words[1]);
                if (SHIBYTE(v378) < 0)
                  operator delete(v376);
                v342 = (std::string *)v340->__words[1];
                if (v342)
                {
                  do
                  {
                    v343 = v342;
                    v342 = (std::string *)v342->__r_.__value_.__r.__words[0];
                  }
                  while (v342);
                }
                else
                {
                  do
                  {
                    v343 = (std::string *)v340->__words[2];
                    v24 = v343->__r_.__value_.__r.__words[0] == (_QWORD)v340;
                    v340 = (std::string::__raw *)v343;
                  }
                  while (!v24);
                }
                v340 = (std::string::__raw *)v343;
              }
              while (v343 != (std::string *)&v405.__r_.__value_.__r.__words[1]);
            }
            std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v405, (char *)v405.__r_.__value_.__l.__size_);
            if (turi::gl_sframe::size((turi::gl_sframe *)v385))
            {
              turi::gl_sframe::gl_sframe((turi::gl_sframe *)v365, (const turi::gl_sframe *)v385);
              std::string::basic_string[abi:ne180100]<0>(v363, "auto");
              std::string::basic_string[abi:ne180100]<0>(v361, "report");
              turi::gl_sarray::gl_sarray((turi::gl_sarray *)v360);
              turi::supervised::supervised_learning_model_base::api_evaluate(a1, (turi::gl_sframe *)v365, (uint64_t)v363, (uint64_t *)v361, (turi::gl_sarray *)v360, 0, (uint64_t **)&v405);
              turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v360);
              if (v362 < 0)
                operator delete(v361[0]);
              if (v364 < 0)
                operator delete(v363[0]);
              v365[0] = off_24D91E9C0;
              v344 = v366;
              if (v366)
              {
                v345 = (unint64_t *)&v366->__shared_owners_;
                do
                  v346 = __ldaxr(v345);
                while (__stlxr(v346 - 1, v345));
                if (!v346)
                {
                  ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                  std::__shared_weak_count::__release_weak(v344);
                }
              }
              v347 = (std::string::__raw *)v405.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v405.__r_.__value_.__l.__data_ != &v405.__r_.__value_.__r.__words[1])
              {
                do
                {
                  std::operator+<char>();
                  v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v376;
                  v348 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__str, (const void **)&v376, (uint64_t)&std::piecewise_construct, &v390);
                  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v348 + 14, (uint64_t *)&v347[2].__words[1]);
                  if (SHIBYTE(v378) < 0)
                    operator delete(v376);
                  v349 = (std::string *)v347->__words[1];
                  if (v349)
                  {
                    do
                    {
                      v350 = v349;
                      v349 = (std::string *)v349->__r_.__value_.__r.__words[0];
                    }
                    while (v349);
                  }
                  else
                  {
                    do
                    {
                      v350 = (std::string *)v347->__words[2];
                      v24 = v350->__r_.__value_.__r.__words[0] == (_QWORD)v347;
                      v347 = (std::string::__raw *)v350;
                    }
                    while (!v24);
                  }
                  v347 = (std::string::__raw *)v350;
                }
                while (v350 != (std::string *)&v405.__r_.__value_.__r.__words[1]);
              }
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v405, (char *)v405.__r_.__value_.__l.__size_);
            }
            turi::ml_model_base::add_or_update_state((uint64_t)a1, __str);
            std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)__str, *(char **)&__str[8]);
LABEL_567:
            turi::sframe::~sframe((turi::sframe *)&v395);
            turi::sframe::~sframe((turi::sframe *)&v398);
            turi::sframe::~sframe((turi::sframe *)v401);
            turi::sframe::~sframe((turi::sframe *)&__p);
            v381[0] = off_24D91E9C0;
            v351 = v382;
            if (v382)
            {
              v352 = (unint64_t *)&v382->__shared_owners_;
              do
                v353 = __ldaxr(v352);
              while (__stlxr(v353 - 1, v352));
              if (!v353)
              {
                ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                std::__shared_weak_count::__release_weak(v351);
              }
            }
            v385[0] = off_24D91E9C0;
            v354 = v386;
            if (v386)
            {
              v355 = (unint64_t *)&v386->__shared_owners_;
              do
                v356 = __ldaxr(v355);
              while (__stlxr(v356 - 1, v355));
              if (!v356)
              {
                ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                std::__shared_weak_count::__release_weak(v354);
              }
            }
            break;
          default:
            turi::flexible_type_fail(0);
            goto LABEL_588;
        }
      }
      else
      {
LABEL_586:
        turi::flexible_type_fail(0);
LABEL_588:
        __break(1u);
      }
      return;
    default:
      goto LABEL_586;
  }
}

void sub_218599F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t (**a53)(turi::gl_sframe *__hidden this),uint64_t a54)
{
  uint64_t v54;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;

  MEMORY[0x219A19A08](v54, 0x1012C404EF22A49);
  STACK[0x770] = (unint64_t)&STACK[0x8A0];
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x770]);
  switch(LOBYTE(STACK[0x2DC]))
  {
    case 2:
      v56 = (unint64_t *)STACK[0x2D0];
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (v58)
        break;
      v59 = STACK[0x2D0];
      if (!STACK[0x2D0])
        break;
      if (*(char *)(v59 + 31) < 0)
        operator delete(*(void **)(v59 + 8));
      v60 = (_QWORD *)v59;
      v61 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      v69 = (unint64_t *)STACK[0x2D0];
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (v71)
        break;
      v72 = STACK[0x2D0];
      if (!STACK[0x2D0])
        break;
      v73 = *(void **)(v72 + 8);
      if (v73)
      {
        *(_QWORD *)(v72 + 16) = v73;
        operator delete(v73);
      }
      v60 = (_QWORD *)v72;
      v61 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      v62 = (unint64_t *)STACK[0x2D0];
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        break;
      v65 = STACK[0x2D0];
      if (!STACK[0x2D0])
        goto LABEL_39;
      STACK[0x770] = v65 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x770]);
      goto LABEL_32;
    case 5:
      v74 = (unint64_t *)STACK[0x2D0];
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (v76)
        break;
      v65 = STACK[0x2D0];
      if (!STACK[0x2D0])
        goto LABEL_39;
      STACK[0x770] = v65 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x770]);
LABEL_32:
      v77 = v65;
      v78 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v79 = (unint64_t *)STACK[0x2D0];
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (v81)
        break;
      v82 = STACK[0x2D0];
      if (!STACK[0x2D0])
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v82 + 16));
      v77 = v82;
      v78 = 0x1030C40F1F0227BLL;
LABEL_38:
      MEMORY[0x219A19A08](v77, v78);
LABEL_39:
      STACK[0x2D0] = 0;
      break;
    case 9:
      v66 = (unint64_t *)STACK[0x2D0];
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (v68 || !STACK[0x2D0])
        break;
      v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)STACK[0x2D0]);
      v61 = 0x1030C407B73B9F7;
LABEL_26:
      MEMORY[0x219A19A08](v60, v61);
      break;
    default:
      break;
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  a53 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::api_evaluate(turi::supervised::supervised_learning_model_base *a1@<X0>, turi::gl_sframe *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, turi::gl_sarray *a5@<X4>, uint64_t a6@<X5>, uint64_t **a7@<X8>)
{
  turi::supervised::supervised_learning_model_base *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int missing_value_enum_from_string;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  int *v31;
  _QWORD *has_fallback_type;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_size;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned int *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned int *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  double v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int **v66;
  char *v67;
  const std::string *v68;
  double v69;
  unsigned int *v70;
  unsigned int **v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  __int128 v75;
  __int128 v76;
  float v77;
  unsigned int *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int **v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int **v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int **v96;
  unsigned int *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int **v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::runtime_error *exception;
  std::string *v109;
  __int128 v110;
  void *v111[2];
  char v112;
  void *v113;
  char v114;
  void *v115[2];
  char v116;
  void *v117[2];
  char v118;
  double v119;
  _QWORD v120[2];
  std::__shared_weak_count *v121;
  _QWORD v122[2];
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  std::string v126;
  _QWORD v127[2];
  std::__shared_weak_count *v128;
  std::exception v129;
  char v130;
  char v131;
  void *__p;
  char v133;
  _QWORD v134[2];
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  void *v138[2];
  char v139;
  std::string *v140;
  std::string *v141;
  const void **p_data;
  void *v143;
  void *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  turi::supervised::supervised_learning_model_base *v149;
  std::__shared_weak_count *v150;
  turi::supervised::supervised_learning_model_base *v151;
  std::__shared_weak_count *v152;
  std::string v153;
  size_t __idx;
  double v155;
  int v156;
  char v157;
  _BYTE v158[296];
  _BYTE v159[296];
  void *lpsrc;
  std::__shared_weak_count *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  char v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, (_QWORD *)a1 + 1);
  if (lpsrc
  {
    v151 = v14;
    v152 = v161;
    if (v161)
    {
      p_shared_owners = (unint64_t *)&v161->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  else
  {
    v152 = 0;
    v151 = 0;
  }
  v17 = v161;
  if (v161)
  {
    v18 = (unint64_t *)&v161->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  missing_value_enum_from_string = turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string((uint64_t)a1, a3);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)&lpsrc);
  v149 = v151;
  v150 = v152;
  if (v152)
  {
    v21 = (unint64_t *)&v152->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  turi::supervised::setup_test_data_sframe((const turi::sframe *)&lpsrc, &v149, missing_value_enum_from_string, (turi::sframe *)v159);
  v23 = v150;
  if (v150)
  {
    v24 = (unint64_t *)&v150->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  turi::supervised::supervised_learning_model_base::get_target_name(a1, (std::string *)&v162);
  v140 = 0;
  v141 = 0;
  p_data = 0;
  v130 = 0;
  v140 = (std::string *)operator new(0x18uLL);
  v141 = v140;
  p_data = (const void **)&v140[1].__r_.__value_.__l.__data_;
  v141 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v162, (__int128 *)((char *)&v163 + 8), v140);
  turi::sframe::select_columns((uint64_t *)&lpsrc, (const void ***)&v140, (uint64_t)v158);
  v129.__vftable = (std::exception_vtbl *)&v140;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  if (SBYTE7(v163) < 0)
    operator delete((void *)v162);
  turi::supervised::setup_ml_data_for_evaluation((uint64_t)v159, (uint64_t)v158, (uint64_t *)&v151, missing_value_enum_from_string, (turi::ml_data *)&v140);
  v26 = *((char *)a4 + 23);
  if (v26 < 0)
  {
    if (a4[1] != 6)
      goto LABEL_47;
    v27 = (int *)*a4;
  }
  else
  {
    v27 = (int *)a4;
    if (v26 != 6)
      goto LABEL_47;
  }
  v28 = *v27;
  v29 = *((unsigned __int16 *)v27 + 2);
  if (v28 == 1869636978 && v29 == 29810)
  {
    if ((*(unsigned int (**)(turi::supervised::supervised_learning_model_base *))(*(_QWORD *)a1 + 232))(a1))
    {
      std::string::basic_string[abi:ne180100]<0>(v138, "class");
      std::string::basic_string[abi:ne180100]<0>(v136, "predicted_class");
      turi::gl_sframe::gl_sframe((turi::gl_sframe *)v134);
      std::string::basic_string[abi:ne180100]<0>(v111, "target");
      v31 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)v111);
      v129.__vftable = (std::exception_vtbl *)v117;
      has_fallback_type = (_QWORD *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*v31, *v31 ^ (*v31 >> 31), (uint64_t)&v129, (uint64_t)(v31 + 2));
      if (has_fallback_type)
      {
        turi::gl_sframe::operator[]((uint64_t)a2, *has_fallback_type + 8, (turi::gl_sarray *)&v162);
        std::string::basic_string[abi:ne180100]<0>(v117, "class");
        turi::gl_sframe::operator[]((uint64_t)v134, (uint64_t)v117, (turi::gl_sarray *)&v129);
        turi::gl_sarray_reference::operator=(&v129, &v162);
        v129.__vftable = (std::exception_vtbl *)off_24D91EA30;
        if (v133 < 0)
          operator delete(__p);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v129);
        if (v118 < 0)
          operator delete(v117[0]);
        *(_QWORD *)&v162 = off_24D91EA30;
        if (v166 < 0)
          operator delete((void *)v165);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v162);
        if (v112 < 0)
          operator delete(v111[0]);
        if (turi::gl_sarray::empty(a5))
        {
          turi::gl_sframe::gl_sframe((turi::gl_sframe *)v127, a2);
          if (*(char *)(a3 + 23) < 0)
            std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
          else
            v126 = *(std::string *)a3;
          std::string::basic_string[abi:ne180100]<0>(v124, "class");
          turi::supervised::supervised_learning_model_base::api_predict(a1, (turi::gl_sframe *)v127, (uint64_t)&v126, (uint64_t)v124, (uint64_t)&v129);
          turi::gl_sframe::operator[]((uint64_t)v134, (uint64_t)v136, (turi::gl_sarray *)&v162);
          turi::gl_sarray_reference::operator=((uint64_t)&v162, (uint64_t)&v129);
          *(_QWORD *)&v162 = off_24D91EA30;
          if (v166 < 0)
            operator delete((void *)v165);
          turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v162);
          turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v129);
          if (v125 < 0)
            operator delete(v124[0]);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
          v127[0] = off_24D91E9C0;
          v45 = v128;
          if (v128)
          {
            v46 = (unint64_t *)&v128->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
        }
        else
        {
          turi::gl_sframe::operator[]((uint64_t)v134, (uint64_t)v136, (turi::gl_sarray *)&v162);
          turi::gl_sarray_reference::operator=((uint64_t)&v162, (uint64_t)a5);
          *(_QWORD *)&v162 = off_24D91EA30;
          if (v166 < 0)
            operator delete((void *)v165);
          turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v162);
        }
        std::string::basic_string[abi:ne180100]<0>(&v162, "auto");
        (*(void (**)(turi::supervised::supervised_learning_model_base *, std::string **, __int128 *, uint64_t))(*(_QWORD *)a1 + 104))(a1, &v140, &v162, a6);
        if (SBYTE7(v163) < 0)
          operator delete((void *)v162);
        turi::gl_sframe::gl_sframe((turi::gl_sframe *)v122, (const turi::gl_sframe *)v134);
        turi::supervised::confusion_matrix((uint64_t)v122, (uint64_t)v138, (uint64_t)v136, &v162);
        std::string::basic_string[abi:ne180100]<0>(&v129, "confusion_matrix");
        v111[0] = &v129;
        v48 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a7, (const void **)&v129.__vftable, (uint64_t)&std::piecewise_construct, (_OWORD **)v111);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::gl_sframe>(v48 + 14, (uint64_t)&v162);
        if (v131 < 0)
          operator delete(v129.__vftable);
        *(_QWORD *)&v162 = off_24D91E9C0;
        v49 = (std::__shared_weak_count *)v163;
        if ((_QWORD)v163)
        {
          v50 = (unint64_t *)(v163 + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v122[0] = off_24D91E9C0;
        v52 = v123;
        if (v123)
        {
          v53 = (unint64_t *)&v123->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        turi::gl_sframe::gl_sframe((turi::gl_sframe *)v120, (const turi::gl_sframe *)v134);
        turi::supervised::classifier_report_by_class((uint64_t)v120, (uint64_t)v138, (uint64_t)v136, (uint64_t)&v162);
        std::string::basic_string[abi:ne180100]<0>(&v129, "report_by_class");
        v111[0] = &v129;
        v55 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a7, (const void **)&v129.__vftable, (uint64_t)&std::piecewise_construct, (_OWORD **)v111);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::gl_sframe>(v55 + 14, (uint64_t)&v162);
        if (v131 < 0)
          operator delete(v129.__vftable);
        *(_QWORD *)&v162 = off_24D91E9C0;
        v56 = (std::__shared_weak_count *)v163;
        if ((_QWORD)v163)
        {
          v57 = (unint64_t *)(v163 + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v120[0] = off_24D91E9C0;
        v59 = v121;
        if (v121)
        {
          v60 = (unint64_t *)&v121->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(v115, "class");
        turi::gl_sframe::operator[]((uint64_t)v134, (uint64_t)v115, (turi::gl_sarray *)&v129);
        turi::gl_sframe::operator[]((uint64_t)v134, (uint64_t)v136, (turi::gl_sarray *)v111);
        turi::gl_sarray::operator==((uint64_t)&v129, (uint64_t)v111, (uint64_t)v117);
        turi::gl_sarray::sum((turi::gl_sarray *)v117);
        v62 = 0.0;
        switch(v157)
        {
          case 0:
            v62 = (double)*(uint64_t *)&v155;
            goto LABEL_142;
          case 1:
            v62 = v155;
            goto LABEL_142;
          case 2:
            v66 = *(unsigned int ***)&v155;
            __idx = 0;
            v67 = (char *)(*(_QWORD *)&v155 + 8);
            if (*(char *)(*(_QWORD *)&v155 + 31) < 0)
              v67 = *(char **)(*(_QWORD *)&v155 + 8);
            v68 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v162, v67);
            v69 = std::stod(v68, &__idx);
            if (SBYTE7(v163) < 0)
              operator delete((void *)v162);
            if (*((char *)v66 + 31) < 0)
              v70 = v66[2];
            else
              v70 = (unsigned int *)*((unsigned __int8 *)v66 + 31);
            if ((unsigned int *)__idx != v70)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v109 = std::string::append(&v153, " cannot be interpreted as a float");
              v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              *(_QWORD *)&v163 = *((_QWORD *)&v109->__r_.__value_.__l + 2);
              v162 = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)&v162);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            v77 = v69;
            v62 = v77;
            goto LABEL_142;
          case 3:
            *(_QWORD *)&v163 = 0;
            v162 = 0uLL;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v162, *(const void **)(*(_QWORD *)&v155 + 8), *(_QWORD *)(*(_QWORD *)&v155 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v155 + 16) - *(_QWORD *)(*(_QWORD *)&v155 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if ((_QWORD)v162)
            {
              *((_QWORD *)&v162 + 1) = v162;
              operator delete((void *)v162);
            }
            goto LABEL_142;
          case 4:
            *(_QWORD *)&v163 = 0;
            v162 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v162, *(uint64_t **)(*(_QWORD *)&v155 + 8), *(uint64_t **)(*(_QWORD *)&v155 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v155 + 16) - *(_QWORD *)(*(_QWORD *)&v155 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
            goto LABEL_142;
          case 5:
            *(_QWORD *)&v163 = 0;
            v162 = 0uLL;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v162, *(uint64_t **)(*(_QWORD *)&v155 + 8), *(uint64_t **)(*(_QWORD *)&v155 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v155 + 16) - *(_QWORD *)(*(_QWORD *)&v155 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
            goto LABEL_142;
          case 6:
            v62 = (double)v156 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v155 << 8) >> 8);
            goto LABEL_142;
          case 7:
            goto LABEL_142;
          case 8:
            v71 = *(unsigned int ***)&v155;
            v72 = *(unsigned int **)(*(_QWORD *)&v155 + 16);
            *(_QWORD *)&v162 = *(_QWORD *)(*(_QWORD *)&v155 + 8);
            *((_QWORD *)&v162 + 1) = v72;
            if (v72)
            {
              v73 = v72 + 2;
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
            }
            v75 = *(_OWORD *)(v71 + 3);
            v76 = *(_OWORD *)(v71 + 5);
            v165 = *(_OWORD *)(v71 + 7);
            v164 = v76;
            v163 = v75;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&v162 + 1);
            goto LABEL_142;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&v162, *(_QWORD *)&v155 + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v164 + 1))
            {
              *(_QWORD *)&v165 = *((_QWORD *)&v164 + 1);
              operator delete(*((void **)&v164 + 1));
            }
            if ((_QWORD)v163)
            {
              *((_QWORD *)&v163 + 1) = v163;
              operator delete((void *)v163);
            }
            v63 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
            if (*((_QWORD *)&v162 + 1))
            {
              v64 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
LABEL_142:
            v119 = v62 / (double)(unint64_t)turi::gl_sframe::size((turi::gl_sframe *)v134);
            std::string::basic_string[abi:ne180100]<0>(&v162, "accuracy");
            __idx = (size_t)&v162;
            v78 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a7, (const void **)&v162, (uint64_t)&std::piecewise_construct, (_OWORD **)&__idx);
            boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<double>(v78 + 14, &v119);
            if (SBYTE7(v163) < 0)
              operator delete((void *)v162);
            switch(v157)
            {
              case 2:
                v79 = *(unint64_t **)&v155;
                do
                {
                  v80 = __ldaxr(v79);
                  v81 = v80 - 1;
                }
                while (__stlxr(v81, v79));
                if (!v81)
                {
                  v82 = *(unsigned int ***)&v155;
                  if (v155 != 0.0)
                  {
                    if (*(char *)(*(_QWORD *)&v155 + 31) < 0)
                      operator delete(*(void **)(*(_QWORD *)&v155 + 8));
                    v83 = v82;
                    v84 = 0x1012C404EF22A49;
                    goto LABEL_181;
                  }
                }
                break;
              case 3:
                v93 = *(unint64_t **)&v155;
                do
                {
                  v94 = __ldaxr(v93);
                  v95 = v94 - 1;
                }
                while (__stlxr(v95, v93));
                if (!v95)
                {
                  v96 = *(unsigned int ***)&v155;
                  if (v155 != 0.0)
                  {
                    v97 = *(unsigned int **)(*(_QWORD *)&v155 + 8);
                    if (v97)
                    {
                      *(_QWORD *)(*(_QWORD *)&v155 + 16) = v97;
                      operator delete(v97);
                    }
                    v83 = v96;
                    v84 = 0x1080C409938AC02;
                    goto LABEL_181;
                  }
                }
                break;
              case 4:
                v85 = *(unint64_t **)&v155;
                do
                {
                  v86 = __ldaxr(v85);
                  v87 = v86 - 1;
                }
                while (__stlxr(v87, v85));
                if (!v87)
                {
                  v88 = *(unsigned int ***)&v155;
                  if (v155 != 0.0)
                  {
                    *(_QWORD *)&v162 = *(_QWORD *)&v155 + 8;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
                    goto LABEL_174;
                  }
                }
                break;
              case 5:
                v98 = *(unint64_t **)&v155;
                do
                {
                  v99 = __ldaxr(v98);
                  v100 = v99 - 1;
                }
                while (__stlxr(v100, v98));
                if (!v100)
                {
                  v88 = *(unsigned int ***)&v155;
                  if (v155 != 0.0)
                  {
                    *(_QWORD *)&v162 = *(_QWORD *)&v155 + 8;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
LABEL_174:
                    v83 = v88;
                    v84 = 0x1020C405E66F15BLL;
                    goto LABEL_181;
                  }
                }
                break;
              case 8:
                v101 = *(unint64_t **)&v155;
                do
                {
                  v102 = __ldaxr(v101);
                  v103 = v102 - 1;
                }
                while (__stlxr(v103, v101));
                if (!v103)
                {
                  v104 = *(unsigned int ***)&v155;
                  if (v155 != 0.0)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v155 + 16));
                    v83 = v104;
                    v92 = -235920773;
                    goto LABEL_180;
                  }
                }
                break;
              case 9:
                v89 = *(unint64_t **)&v155;
                do
                {
                  v90 = __ldaxr(v89);
                  v91 = v90 - 1;
                }
                while (__stlxr(v91, v89));
                if (!v91 && v155 != 0.0)
                {
                  v83 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v155);
                  v92 = 2071181815;
LABEL_180:
                  v84 = v92 | 0x1030C4000000000;
LABEL_181:
                  MEMORY[0x219A19A08](v83, v84);
                }
                break;
              default:
                break;
            }
            v155 = 0.0;
            v156 = 0;
            v157 = 0;
            turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v117);
            v111[0] = off_24D91EA30;
            if (v114 < 0)
              operator delete(v113);
            turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v111);
            v129.__vftable = (std::exception_vtbl *)off_24D91EA30;
            if (v133 < 0)
              operator delete(__p);
            turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v129);
            if (v116 < 0)
              operator delete(v115[0]);
            v134[0] = off_24D91E9C0;
            v105 = v135;
            if (v135)
            {
              v106 = (unint64_t *)&v135->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            if (v137 < 0)
              operator delete(v136[0]);
            if (v139 < 0)
              operator delete(v138[0]);
            goto LABEL_48;
          default:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
        }
      }
      v129.__vftable = (std::exception_vtbl *)&unk_24D918C20;
      boost::throw_exception<boost::bad_get>();
    }
    MEMORY[0x219A19390](a4, "auto");
  }
LABEL_47:
  (*(void (**)(turi::supervised::supervised_learning_model_base *, std::string **, uint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, &v140, a4, a6);
LABEL_48:
  v33 = v148;
  if (v148)
  {
    v34 = (unint64_t *)&v148->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *(_QWORD *)&v162 = &v147;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
  v36 = v146;
  if (v146)
  {
    v37 = (unint64_t *)&v146->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_QWORD *)&v162 = &v145;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  v39 = (std::__shared_weak_count *)v141;
  if (v141)
  {
    p_size = &v141->__r_.__value_.__l.__size_;
    do
      v41 = __ldaxr(p_size);
    while (__stlxr(v41 - 1, p_size));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v158);
  turi::sframe::~sframe((turi::sframe *)v159);
  turi::sframe::~sframe((turi::sframe *)&lpsrc);
  v42 = v152;
  if (v152)
  {
    v43 = (unint64_t *)&v152->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_21859BAAC()
{
  void *v0;
  char v1;

  __cxa_end_catch();
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x21859BD70);
}

void sub_21859BAB8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x21859BE60);
}

void sub_21859BAD4()
{
  JUMPOUT(0x21859BD8CLL);
}

void sub_21859BADC()
{
  JUMPOUT(0x21859BD9CLL);
}

void sub_21859BCE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;

  if (a48 < 0)
    operator delete(__p);
  *(_QWORD *)(v49 - 192) = v48 + 16;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v49 - 184);
  JUMPOUT(0x21859BD5CLL);
}

void sub_21859BD18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[21];
  void *v51[4];
  char v52;
  void *v53;
  char v54;

  if (a48 < 0)
    operator delete(__p);
  *(_QWORD *)(v49 - 192) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v49 - 184);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v50);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v48, *(char **)(v48 + 8));
  v50[20] = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v51);
  if (v52 < 0)
    operator delete(v51[2]);
  if (v54 < 0)
    operator delete(v53);
  JUMPOUT(0x21859BE38);
}

void sub_21859BDC8()
{
  JUMPOUT(0x21859BE40);
}

void sub_21859BDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43)
{
  uint64_t v43;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a43);
  if (*(char *)(v43 - 169) < 0)
    operator delete(*(void **)(v43 - 192));
  JUMPOUT(0x21859BE48);
}

void sub_21859BE08()
{
  JUMPOUT(0x21859BE48);
}

void sub_21859BE10()
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  JUMPOUT(0x21859BE50);
}

void sub_21859BE20()
{
  JUMPOUT(0x21859BE58);
}

void sub_21859BE2C()
{
  JUMPOUT(0x21859BE60);
}

void turi::supervised::supervised_learning_model_base::api_predict(_QWORD *a1@<X0>, turi::gl_sframe *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int missing_value_enum_from_string;
  turi::supervised::supervised_learning_model_base *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *lpsrc;
  std::__shared_weak_count *v34;
  turi::supervised::supervised_learning_model_base *v35;
  std::__shared_weak_count *v36;
  _BYTE v37[8];
  std::__shared_weak_count *v38;
  void *__p;
  void *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _BYTE v45[296];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  missing_value_enum_from_string = turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string((uint64_t)a1, a3);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)v37);
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, a1 + 1);
  if (lpsrc
  {
    v35 = v10;
    v36 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v35 = 0;
    v36 = 0;
  }
  turi::supervised::setup_test_data_sframe((const turi::sframe *)v37, &v35, missing_value_enum_from_string, (turi::sframe *)v45);
  v13 = v36;
  if (v36)
  {
    v14 = (unint64_t *)&v36->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v34;
  if (v34)
  {
    v17 = (unint64_t *)&v34->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v37);
  turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata((uint64_t)a1, (uint64_t)v45, missing_value_enum_from_string, (uint64_t)v37);
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, _BYTE *, uint64_t))(*a1 + 120))(&v31, a1, v37, a4);
  turi::gl_sarray::gl_sarray(a5, &v31);
  v19 = v32;
  if (v32)
  {
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v44;
  if (v44)
  {
    v23 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  lpsrc = &v43;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  v25 = v42;
  if (v42)
  {
    v26 = (unint64_t *)&v42->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  lpsrc = &v41;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v45);
}

void sub_21859C128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  turi::ml_data::~ml_data((turi::ml_data *)&a16);
  turi::sframe::~sframe((turi::sframe *)&a53);
  _Unwind_Resume(a1);
}

void sub_21859C180()
{
  JUMPOUT(0x21859C178);
}

void turi::supervised::setup_test_data_sframe(const turi::sframe *a1@<X0>, turi::supervised::supervised_learning_model_base **a2@<X1>, int a3@<W2>, turi::sframe *a4@<X8>)
{
  BOOL v8;
  std::vector<std::string> v9;
  void **v10[37];
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe(a4);
  turi::sframe::sframe((turi::sframe *)v11, a1);
  if (v14)
    v8 = v13 == 0;
  else
    v8 = 1;
  if (v8)
    turi::supervised::check_empty_data(turi::sframe)::{lambda(void)#1}::operator()();
  if (!v12)
    turi::supervised::check_empty_data(turi::sframe)::{lambda(void)#2}::operator()();
  turi::sframe::~sframe((turi::sframe *)v11);
  turi::supervised::supervised_learning_model_base::get_feature_names(*a2, &v9);
  if (!a3)
    goto LABEL_12;
  if (a3 != 1)
  {
    if (a3 != 2)
      turi::supervised::setup_test_data_sframe(turi::sframe const&,std::shared_ptr<turi::supervised::supervised_learning_model_base>,turi::ml_missing_value_action)::{lambda(void)#2}::operator()();
    if (!(*(unsigned int (**)(turi::supervised::supervised_learning_model_base *))(*(_QWORD *)*a2 + 248))(*a2))
      turi::supervised::setup_test_data_sframe(turi::sframe const&,std::shared_ptr<turi::supervised::supervised_learning_model_base>,turi::ml_missing_value_action)::{lambda(void)#1}::operator()();
LABEL_12:
    turi::supervised::supervised_learning_model_base::impute_missing_columns_using_current_metadata(*a2, a1, (turi::sframe *)v10);
    turi::sframe::operator=((uint64_t)a4, (uint64_t)v10);
    turi::sframe::~sframe((turi::sframe *)v10);
    goto LABEL_13;
  }
  turi::sframe::operator=((uint64_t)a4, (uint64_t)a1);
LABEL_13:
  turi::sframe::select_columns((uint64_t *)a4, (const void ***)&v9, (uint64_t)v10);
  turi::sframe::operator=((uint64_t)a4, (uint64_t)v10);
  turi::sframe::~sframe((turi::sframe *)v10);
  v10[0] = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_21859C318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  turi::sframe *v12;

  turi::sframe::~sframe((turi::sframe *)&a12);
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  turi::sframe::~sframe(v12);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::api_predict_topk(_QWORD *a1@<X0>, turi::gl_sframe *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, turi::gl_sframe *a6@<X8>)
{
  int missing_value_enum_from_string;
  turi::supervised::supervised_learning_model_base *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *lpsrc;
  std::__shared_weak_count *v31;
  void *__p;
  void *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  turi::supervised::supervised_learning_model_base *v38;
  std::__shared_weak_count *v39;
  void **v40[37];
  _BYTE v41[296];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    turi::supervised::supervised_learning_model_base::api_predict_topk(turi::gl_sframe,std::string,std::string,unsigned long)::$_0::operator()();
  missing_value_enum_from_string = turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string((uint64_t)a1, a3);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)v40);
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, a1 + 1);
  if (lpsrc
  {
    v38 = v12;
    v39 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  turi::supervised::setup_test_data_sframe((const turi::sframe *)v40, &v38, missing_value_enum_from_string, (turi::sframe *)v41);
  v15 = v39;
  if (v39)
  {
    v16 = (unint64_t *)&v39->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v40);
  turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata((uint64_t)a1, (uint64_t)v41, missing_value_enum_from_string, (uint64_t)&lpsrc);
  (*(void (**)(void ***__return_ptr, _QWORD *, void **, uint64_t, uint64_t))(*a1 + 152))(v40, a1, &lpsrc, a4, a5);
  turi::gl_sframe::gl_sframe(a6, (const turi::sframe *)v40);
  turi::sframe::~sframe((turi::sframe *)v40);
  v21 = v37;
  if (v37)
  {
    v22 = (unint64_t *)&v37->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v40[0] = (void **)&v36;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v40);
  v24 = v35;
  if (v35)
  {
    v25 = (unint64_t *)&v35->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v40[0] = (void **)&v34;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v40);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  v27 = v31;
  if (v31)
  {
    v28 = (unint64_t *)&v31->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v41);
}

void sub_21859C62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  turi::sframe::~sframe((turi::sframe *)&a36);
  turi::ml_data::~ml_data((turi::ml_data *)&a10);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_21859C684()
{
  JUMPOUT(0x21859C67CLL);
}

void turi::supervised::supervised_learning_model_base::api_classify(_QWORD *a1@<X0>, turi::gl_sframe *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, turi::gl_sframe *a5@<X8>)
{
  int missing_value_enum_from_string;
  turi::supervised::supervised_learning_model_base *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *lpsrc;
  std::__shared_weak_count *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  turi::supervised::supervised_learning_model_base *v36;
  std::__shared_weak_count *v37;
  void **v38[37];
  _BYTE v39[296];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  missing_value_enum_from_string = turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string((uint64_t)a1, a3);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)v38);
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, a1 + 1);
  if (lpsrc
  {
    v36 = v10;
    v37 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v36 = 0;
    v37 = 0;
  }
  turi::supervised::setup_test_data_sframe((const turi::sframe *)v38, &v36, missing_value_enum_from_string, (turi::sframe *)v39);
  v13 = v37;
  if (v37)
  {
    v14 = (unint64_t *)&v37->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v29;
  if (v29)
  {
    v17 = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v38);
  turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata((uint64_t)a1, (uint64_t)v39, missing_value_enum_from_string, (uint64_t)&lpsrc);
  (*(void (**)(void ***__return_ptr, _QWORD *, void **, uint64_t))(*a1 + 160))(v38, a1, &lpsrc, a4);
  turi::gl_sframe::gl_sframe(a5, (const turi::sframe *)v38);
  turi::sframe::~sframe((turi::sframe *)v38);
  v19 = v35;
  if (v35)
  {
    v20 = (unint64_t *)&v35->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v38[0] = (void **)&v34;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v38);
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v38[0] = (void **)&v32;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v38);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  v25 = v29;
  if (v29)
  {
    v26 = (unint64_t *)&v29->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v39);
}

void sub_21859C91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  turi::sframe::~sframe((turi::sframe *)&a36);
  turi::ml_data::~ml_data((turi::ml_data *)&a10);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_21859C974()
{
  JUMPOUT(0x21859C96CLL);
}

void turi::supervised::setup_ml_data_for_evaluation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, turi::ml_data *a5@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE v19[8];
  std::__shared_weak_count *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void **v27;

  turi::ml_data::ml_data(a5);
  turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(*a3, a1, a2, a4, (uint64_t)v19);
  turi::ml_data::operator=((uint64_t)a5, (uint64_t)v19);
  v10 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v27 = (void **)&v25;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v27);
  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v27 = (void **)&v23;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_21859CACC(_Unwind_Exception *a1)
{
  turi::ml_data *v1;

  turi::ml_data::~ml_data(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::api_extract_features(_QWORD *a1@<X0>, turi::gl_sframe *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  turi::supervised::supervised_learning_model_base *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t missing_value_enum_from_string;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  turi::supervised::supervised_learning_model_base *v28;
  std::__shared_weak_count *v29;
  turi::supervised::supervised_learning_model_base *v30;
  std::__shared_weak_count *v31;
  _BYTE v32[296];
  void *lpsrc;
  std::__shared_weak_count *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, a1 + 1);
  if (lpsrc
  {
    v30 = v8;
    v31 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  v11 = v34;
  if (v34)
  {
    v12 = (unint64_t *)&v34->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  missing_value_enum_from_string = turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string((uint64_t)a1, a3);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)&lpsrc);
  v28 = v30;
  v29 = v31;
  if (v31)
  {
    v15 = (unint64_t *)&v31->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  turi::supervised::setup_test_data_sframe((const turi::sframe *)&lpsrc, &v28, missing_value_enum_from_string, (turi::sframe *)v32);
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, _BYTE *, uint64_t))(*a1 + 136))(&v26, a1, v32, missing_value_enum_from_string);
  turi::gl_sarray::gl_sarray(a4, &v26);
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v32);
  turi::sframe::~sframe((turi::sframe *)&lpsrc);
  v23 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_21859CD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  turi::sframe::~sframe((turi::sframe *)&a16);
  turi::sframe::~sframe((turi::sframe *)&a53);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_21859CD5C()
{
  JUMPOUT(0x21859CD54);
}

void turi::supervised::supervised_learning_model_base::api_export_to_coreml(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 256))(a3);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      return;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 23))
LABEL_5:
    turi::coreml::MLModelWrapper::save(*a3);
}

void sub_21859CDB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::supervised::_get_metadata_mapping(turi::supervised::supervised_learning_model_base **a1@<X0>, _QWORD *a2@<X8>)
{
  turi::supervised::supervised_learning_model_base::get_metadata_mapping(*a1, a2);
}

void sub_21859CF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D949D60;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D949D60;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_QWORD *)a2 = v2 == 7;
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, (__int128 *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_21859D118(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_21859D394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_21859D408(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 68, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21859D5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 69, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21859D750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  __int128 v34;
  _BYTE v35[13];
  __int128 v36;
  __int128 v37;
  _BYTE v38[13];
  __int128 v39;
  _BYTE v40[24];
  _BYTE *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _QWORD v46[3];
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  __int128 v52;
  _BYTE v53[13];
  __int128 v54;
  __int128 v55;
  _BYTE v56[13];
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(**(_QWORD **)a1 + 8 * a2);
  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8));
  if (v3 < result)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 8) + 32))(&v55, **(_QWORD **)(a1 + 8), v3);
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 8) + 40))(&v52, **(_QWORD **)(a1 + 8), v3);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(a1 + 16) + 32))(v46, *(_QWORD *)(a1 + 16), v3);
    v37 = v55;
    *(_QWORD *)&v38[5] = *(_QWORD *)&v56[5];
    *(_QWORD *)v38 = *(_QWORD *)v56;
    v38[12] = v56[12];
    if (v56[12] <= 9u && ((1 << v56[12]) & 0x33C) != 0)
    {
      do
        v5 = __ldaxr(*(unint64_t **)v38);
      while (__stlxr(v5 + 1, *(unint64_t **)v38));
    }
    v39 = v57;
    v34 = v52;
    *(_QWORD *)&v35[5] = *(_QWORD *)&v53[5];
    *(_QWORD *)v35 = *(_QWORD *)v53;
    v35[12] = v53[12];
    if (v53[12] <= 9u && ((1 << v53[12]) & 0x33C) != 0)
    {
      do
        v6 = __ldaxr(*(unint64_t **)v35);
      while (__stlxr(v6 + 1, *(unint64_t **)v35));
    }
    v36 = v54;
    v7 = (uint64_t)v47;
    if (v47)
    {
      if (v47 == v46)
      {
        v29 = v28;
        (*(void (**)(_QWORD *, _BYTE *))(v46[0] + 24))(v46, v28);
LABEL_13:
        v8 = v30;
        v9 = v48;
        v10 = (uint64_t)v49;
        if (v49)
        {
          if (v49 == v48)
          {
            v31 = v30;
            (*(void (**)(_QWORD *, _BYTE *))(v48[0] + 24))(v48, v30);
LABEL_18:
            v11 = v32;
            v12 = v50;
            v13 = (uint64_t)v51;
            if (v51)
            {
              if (v51 == v50)
              {
                v33 = v32;
                (*(void (**)(_QWORD *, _BYTE *))(v50[0] + 24))(v50, v32);
LABEL_23:
                std::transform[abi:ne180100]<turi::sarray_iterator<turi::flexible_type>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0>((uint64_t)&v37, &v34, (uint64_t)v28, (uint64_t)v40);
                v14 = v45;
                if (v45 == v44)
                {
                  v15 = 4;
                  v14 = v44;
                }
                else
                {
                  if (!v45)
                    goto LABEL_28;
                  v15 = 5;
                }
                (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_28:
                v16 = v43;
                if (v43 == v42)
                {
                  v17 = 4;
                  v16 = v42;
                }
                else
                {
                  if (!v43)
                    goto LABEL_33;
                  v17 = 5;
                }
                (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_33:
                v18 = v41;
                if (v41 == v40)
                {
                  v19 = 4;
                  v18 = v40;
                }
                else
                {
                  if (!v41)
                    goto LABEL_38;
                  v19 = 5;
                }
                (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_38:
                if (v33 == v32)
                {
                  v20 = 4;
                }
                else
                {
                  if (!v33)
                    goto LABEL_43;
                  v20 = 5;
                  v11 = v33;
                }
                (*(void (**)(_QWORD *))(*v11 + 8 * v20))(v11);
LABEL_43:
                if (v31 == v30)
                {
                  v21 = 4;
                }
                else
                {
                  if (!v31)
                    goto LABEL_48;
                  v21 = 5;
                  v8 = v31;
                }
                (*(void (**)(_QWORD *))(*v8 + 8 * v21))(v8);
LABEL_48:
                v22 = v29;
                if (v29 == v28)
                {
                  v23 = 4;
                  v22 = v28;
                }
                else
                {
                  if (!v29)
                    goto LABEL_53;
                  v23 = 5;
                }
                (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_53:
                turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v34);
                turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v37);
                if (v51 == v50)
                {
                  v24 = 4;
                }
                else
                {
                  if (!v51)
                    goto LABEL_58;
                  v24 = 5;
                  v12 = v51;
                }
                (*(void (**)(_QWORD *))(*v12 + 8 * v24))(v12);
LABEL_58:
                if (v49 == v48)
                {
                  v25 = 4;
                }
                else
                {
                  if (!v49)
                    goto LABEL_63;
                  v25 = 5;
                  v9 = v49;
                }
                (*(void (**)(_QWORD *))(*v9 + 8 * v25))(v9);
LABEL_63:
                v26 = v47;
                if (v47 == v46)
                {
                  v27 = 4;
                  v26 = v46;
                }
                else
                {
                  if (!v47)
                  {
LABEL_68:
                    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v52);
                    return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v55);
                  }
                  v27 = 5;
                }
                (*(void (**)(void))(*v26 + 8 * v27))();
                goto LABEL_68;
              }
              v13 = (*(uint64_t (**)(void))(*v51 + 16))();
            }
            v33 = (_BYTE *)v13;
            goto LABEL_23;
          }
          v10 = (*(uint64_t (**)(void))(*v49 + 16))();
        }
        v31 = (_BYTE *)v10;
        goto LABEL_18;
      }
      v7 = (*(uint64_t (**)(void))(*v47 + 16))();
    }
    v29 = (_BYTE *)v7;
    goto LABEL_13;
  }
  return result;
}

void sub_21859DC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  if (a16 == v27)
  {
    v30 = 4;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v30 = 5;
    v27 = a16;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v30))(v27);
LABEL_6:
  v31 = a12;
  if (a12 == &a9)
  {
    v32 = 4;
    v31 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_11;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_11:
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a21);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a27);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v28 - 248));
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v28 - 152);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v28 - 104);
  _Unwind_Resume(a1);
}

void sub_21859DCF4()
{
  JUMPOUT(0x21859DCECLL);
}

uint64_t std::transform[abi:ne180100]<turi::sarray_iterator<turi::flexible_type>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  double *v8;
  __n128 v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  unsigned int v16;
  unint64_t *v17;
  double *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  double v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v69;
  size_t v70;
  unsigned int v71;
  unint64_t *v72;
  _QWORD *v73;
  unint64_t v74;
  double *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  double v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  double v88;
  double v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  double v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  void *v99;
  void *v100;
  unsigned int v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  double v105;
  void *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  double v113;
  unint64_t v114;
  unsigned int v115;
  double *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  std::string *v123;
  void **v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  unsigned int v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  void *v147;
  double *v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  void *v154;
  void *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void **v161;
  void **v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  unint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int v183;
  __int128 v184;
  __int128 v185;
  unint64_t v186;
  unint64_t v187;
  double v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  double v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  void *v198;
  double *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t *v202;
  _QWORD *v203;
  unint64_t v204;
  unint64_t v205;
  void *v206;
  void *v207;
  double v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  void **v214;
  void **v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  unint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  double v234;
  _QWORD *v235;
  std::string *v236;
  void **v237;
  __int128 v238;
  double v239;
  _QWORD *v240;
  unint64_t v241;
  unint64_t v242;
  _QWORD *v243;
  unint64_t v244;
  unint64_t v245;
  double v246;
  uint64_t v247;
  double v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int *v251;
  unsigned int v252;
  __int128 v253;
  __int128 v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  void *v264;
  void *v265;
  unsigned int v266;
  unint64_t v267;
  void *v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  double v275;
  double v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  double v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  double v285;
  void *v286;
  void *v287;
  unsigned int v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  double v292;
  void *v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  double v300;
  int v301;
  size_t v302;
  const void *v303;
  size_t v304;
  int v305;
  BOOL v306;
  uint64_t v307;
  _QWORD *v308;
  _QWORD *v309;
  size_t v310;
  int v311;
  int v312;
  int v313;
  int v314;
  char v315;
  uint64_t v319;
  uint64_t v320;
  void **v321;
  void **v322;
  uint64_t v323;
  double v324[2];
  double v325;
  int v326;
  char v327;
  uint64_t v328;

  v6 = a2;
  v328 = *MEMORY[0x24BDAC8D0];
  v8 = (double *)(a1 + 16);
  while (*(_QWORD *)a1 != *v6 || *(_QWORD *)(a1 + 8) != v6[1] || *(_QWORD *)(a1 + 32) != v6[4])
  {
    v319 = 0x3FE0000000000000;
    v325 = 0.0;
    v326 = 0;
    v327 = 0;
    turi::flexible_type::operator=<double>((uint64_t)&v325, &v319);
    switch(v327)
    {
      case 0:
        switch(*(_BYTE *)(a1 + 28))
        {
          case 0:
            if (*(_QWORD *)v8 < *(uint64_t *)&v325)
              goto LABEL_471;
            goto LABEL_44;
          case 1:
            v9.n128_f64[0] = *v8;
            v188 = (double)*(uint64_t *)&v325;
            goto LABEL_267;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_43;
          case 6:
            if (*(uint64_t *)&v325 > (uint64_t)(*(_QWORD *)v8 << 8) >> 8)
              goto LABEL_471;
            goto LABEL_44;
          default:
            goto LABEL_496;
        }
      case 1:
        switch(*(_BYTE *)(a1 + 28))
        {
          case 0:
            v9.n128_f64[0] = v325;
            if (v325 > (double)*(uint64_t *)v8)
              goto LABEL_471;
            goto LABEL_44;
          case 1:
            v9.n128_f64[0] = *v8;
            v188 = v325;
            goto LABEL_267;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_43;
          case 6:
            v188 = v325;
            v9.n128_f64[0] = (double)*(int *)(a1 + 24) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8);
LABEL_267:
            if (v9.n128_f64[0] < v188)
              goto LABEL_471;
            goto LABEL_44;
          default:
            goto LABEL_496;
        }
      case 2:
        v11 = *(unsigned __int8 *)(a1 + 28);
        v12 = v11 - 3 >= 7 && v11 >= 2;
        if (!v12)
          goto LABEL_43;
        if (v11 != 2)
        {
LABEL_496:
          turi::flexible_type_fail(0);
          __break(1u);
        }
        v13 = *(_QWORD *)v8;
        if (*(char *)(*(_QWORD *)v8 + 31) < 0)
        {
          v14 = *(const void **)(v13 + 8);
          v15 = *(_QWORD *)(v13 + 16);
        }
        else
        {
          v14 = (const void *)(v13 + 8);
          v15 = *(unsigned __int8 *)(*(_QWORD *)v8 + 31);
        }
        v301 = *(char *)(*(_QWORD *)&v325 + 31);
        if (v301 >= 0)
          v302 = *(unsigned __int8 *)(*(_QWORD *)&v325 + 31);
        else
          v302 = *(_QWORD *)(*(_QWORD *)&v325 + 16);
        if (v301 >= 0)
          v303 = (const void *)(*(_QWORD *)&v325 + 8);
        else
          v303 = *(const void **)(*(_QWORD *)&v325 + 8);
        if (v302 >= v15)
          v304 = v15;
        else
          v304 = v302;
        v305 = memcmp(v14, v303, v304);
        v306 = v15 < v302;
        if (v305)
          v306 = v305 < 0;
        if (v306)
          goto LABEL_471;
        goto LABEL_44;
      case 3:
        v16 = *(unsigned __int8 *)(a1 + 28);
        if (v16 > 9)
          goto LABEL_496;
        if (v16 != 3)
          goto LABEL_43;
        v17 = *(unint64_t **)(*(_QWORD *)v8 + 8);
        v18 = *(double **)(*(_QWORD *)&v325 + 8);
        v19 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v325 + 16) - (_QWORD)v18) >> 3;
        v20 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v8 + 16) - (_QWORD)v17) >> 3;
        if (*(unint64_t **)(*(_QWORD *)v8 + 16) == v17)
          goto LABEL_31;
        if (v20 <= 1)
          v21 = 1;
        else
          v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v8 + 16) - (_QWORD)v17) >> 3;
        v22 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v325 + 16) - (_QWORD)v18) >> 3;
        do
        {
          if (!v22)
            goto LABEL_44;
          v9.n128_u64[0] = *v17;
          if (*(double *)v17 > *v18)
            goto LABEL_44;
          if (*(double *)v17 < *v18)
            goto LABEL_471;
          ++v18;
          ++v17;
          --v22;
          --v21;
        }
        while (v21);
LABEL_31:
        if (v20 < v19)
          goto LABEL_471;
        goto LABEL_44;
      case 4:
        v10 = *(unsigned __int8 *)(a1 + 28);
        if (v10 > 9)
          goto LABEL_496;
        if (v10 == 4)
        {
          if (turi::flexible_type_impl::lt_operator::operator()(v9, (uint64_t)&v321, (uint64_t *)(*(_QWORD *)v8 + 8), (_QWORD *)(*(_QWORD *)&v325 + 8)))
          {
LABEL_471:
            v23 = 1;
            goto LABEL_121;
          }
        }
        else
        {
LABEL_43:
          turi::flexible_type_fail(0);
        }
LABEL_44:
        switch(v327)
        {
          case 0:
            v23 = 0;
            switch(*(_BYTE *)(a1 + 28))
            {
              case 0:
                v24 = *(_QWORD *)v8 == *(_QWORD *)&v325;
                goto LABEL_103;
              case 1:
                v9.n128_f64[0] = *v8;
                v81 = *(_QWORD *)&v325;
                goto LABEL_282;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_121;
              case 6:
                v24 = *(_QWORD *)&v325 == (uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8 && *(_DWORD *)(a1 + 24) == 0;
                goto LABEL_103;
              default:
                goto LABEL_496;
            }
          case 1:
            v23 = 0;
            switch(*(_BYTE *)(a1 + 28))
            {
              case 0:
                v9.n128_f64[0] = v325;
                v81 = *(_QWORD *)v8;
LABEL_282:
                v24 = v9.n128_f64[0] == (double)v81;
                goto LABEL_103;
              case 1:
                v9.n128_f64[0] = *v8;
                v23 = *v8 == v325;
                goto LABEL_121;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_121;
              case 6:
                v9.n128_f64[0] = vabdd_f64((double)*(int *)(a1 + 24) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8), v325);
                goto LABEL_285;
              default:
                goto LABEL_496;
            }
          case 2:
            v67 = *(unsigned __int8 *)(a1 + 28);
            if (v67 - 3 < 7 || v67 < 2)
              goto LABEL_120;
            if (v67 != 2)
              goto LABEL_496;
            v69 = *(_QWORD *)v8;
            if (*(char *)(*(_QWORD *)v8 + 31) < 0)
              v70 = *(_QWORD *)(v69 + 16);
            else
              v70 = *(unsigned __int8 *)(*(_QWORD *)v8 + 31);
            if (*(char *)(*(_QWORD *)&v325 + 31) < 0)
              v307 = *(_QWORD *)(*(_QWORD *)&v325 + 16);
            else
              v307 = *(unsigned __int8 *)(*(_QWORD *)&v325 + 31);
            if (v70 != v307)
              goto LABEL_120;
            v308 = (_QWORD *)(v69 + 8);
            if ((*(_BYTE *)(*(_QWORD *)v8 + 31) & 0x80) != 0)
              v308 = (_QWORD *)*v308;
            v309 = (_QWORD *)(*(_QWORD *)&v325 + 8);
            if ((*(_BYTE *)(*(_QWORD *)&v325 + 31) & 0x80) != 0)
            {
              v309 = (_QWORD *)*v309;
              if ((*(_BYTE *)(*(_QWORD *)v8 + 31) & 0x80) != 0)
              {
LABEL_490:
                v24 = memcmp(v308, v309, v70) == 0;
LABEL_103:
                v23 = v24;
                break;
              }
            }
            else if ((*(_BYTE *)(*(_QWORD *)v8 + 31) & 0x80) != 0)
            {
              goto LABEL_490;
            }
            if (!v70)
              goto LABEL_471;
            v310 = v70 - 1;
            do
            {
              v312 = *(unsigned __int8 *)v308;
              v308 = (_QWORD *)((char *)v308 + 1);
              v311 = v312;
              v314 = *(unsigned __int8 *)v309;
              v309 = (_QWORD *)((char *)v309 + 1);
              v313 = v314;
              v12 = v310-- != 0;
              v315 = v12;
              v23 = v311 == v313;
            }
            while (v311 == v313 && (v315 & 1) != 0);
            break;
          case 3:
            v71 = *(unsigned __int8 *)(a1 + 28);
            if (v71 > 9)
              goto LABEL_496;
            if (v71 != 3)
              goto LABEL_120;
            v72 = *(unint64_t **)(*(_QWORD *)v8 + 8);
            v73 = *(_QWORD **)(*(_QWORD *)v8 + 16);
            v74 = v73 - v72;
            v75 = *(double **)(*(_QWORD *)&v325 + 8);
            if (v74 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v325 + 16) - (_QWORD)v75) >> 3)
              goto LABEL_120;
            if (v73 == v72)
              goto LABEL_471;
            if (v74 <= 1)
              v76 = 1;
            else
              v76 = v73 - v72;
            v9.n128_u64[0] = *v72;
            if (*(double *)v72 != *v75)
              goto LABEL_120;
            v77 = 1;
            do
            {
              v78 = v77;
              if (v76 == v77)
                break;
              v9.n128_u64[0] = v72[v77];
              v79 = v75[v77++];
            }
            while (v9.n128_f64[0] == v79);
            v23 = v78 >= v74;
            break;
          case 4:
            v25 = *(unsigned __int8 *)(a1 + 28);
            if (v25 > 9)
              goto LABEL_496;
            if (v25 != 4)
              goto LABEL_120;
            v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, (uint64_t *)(*(_QWORD *)v8 + 8), (_QWORD *)(*(_QWORD *)&v325 + 8));
            goto LABEL_273;
          case 5:
            v82 = *(unsigned __int8 *)(a1 + 28);
            if (v82 > 9)
              goto LABEL_496;
            if (v82 != 5)
              goto LABEL_120;
            v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, (uint64_t **)(*(_QWORD *)v8 + 8), (uint64_t **)(*(_QWORD *)&v325 + 8));
            goto LABEL_273;
          case 6:
            v23 = 0;
            switch(*(_BYTE *)(a1 + 28))
            {
              case 0:
                v24 = *(_QWORD *)v8 == (uint64_t)(*(_QWORD *)&v325 << 8) >> 8 && v326 == 0;
                goto LABEL_103;
              case 1:
                v9.n128_f64[0] = vabdd_f64(*v8, (double)v326 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v325 << 8) >> 8));
LABEL_285:
                v23 = v9.n128_f64[0] < 0.0000005;
                goto LABEL_121;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_121;
              case 6:
                v24 = ((*(_QWORD *)&v325 ^ *(_QWORD *)(a1 + 16)) & 0xFFFFFFFFFFFFFFLL) == 0
                   && *(_DWORD *)(a1 + 24) == v326;
                goto LABEL_103;
              default:
                goto LABEL_496;
            }
          case 7:
            v80 = *(unsigned __int8 *)(a1 + 28);
            if (v80 >= 0xA)
              goto LABEL_496;
            v24 = v80 == 7;
            goto LABEL_103;
          case 8:
            v83 = *(unsigned __int8 *)(a1 + 28);
            if (v83 < 8 || v83 == 9)
              goto LABEL_120;
            if (v83 != 8)
              goto LABEL_496;
            v26 = turi::image_type::operator==(*(_QWORD *)v8 + 8, *(_QWORD *)&v325 + 8);
LABEL_273:
            v23 = v26;
            break;
          case 9:
            v27 = *(unsigned __int8 *)(a1 + 28);
            if (v27 < 9)
              goto LABEL_120;
            if (v27 != 9)
              goto LABEL_496;
            v28 = v325;
            v29 = *(_QWORD **)v8;
            if (*(_QWORD *)&v325 == *(_QWORD *)v8)
              goto LABEL_471;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v29 + 1), *(_QWORD *)&v325 + 8))
            {
LABEL_120:
              v23 = 0;
              break;
            }
            v31 = (char *)v29[3];
            v30 = (char *)v29[4];
            v32 = v30 - v31;
            if (v30 == v31)
              goto LABEL_471;
            if (!v29[1])
              goto LABEL_471;
            v33 = 1;
            do
            {
              v34 = *(_QWORD *)v31;
              v31 += 8;
              v33 *= v34;
            }
            while (v31 != v30);
            if (!v33)
              goto LABEL_471;
            v320 = 0;
            std::vector<unsigned long>::vector(&v321, v32 >> 3, &v320);
            v35 = v321;
            v36 = v322;
            v37 = **(_QWORD **)(*(_QWORD *)&v28 + 8);
            v38 = (char *)v322 - (char *)v321;
            v39 = v322 - v321;
            v40 = v39 - 1;
            if (v39 <= 1)
              v41 = 1;
            else
              v41 = v322 - v321;
            while (2)
            {
              if (v36 == v35)
              {
                v49 = 0;
                v9.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v29[1] + 8 * v29[9]);
              }
              else
              {
                v42 = 0;
                v43 = (uint64_t *)v29[6];
                v44 = v35;
                v45 = v41;
                do
                {
                  v47 = (uint64_t)*v44++;
                  v46 = v47;
                  v48 = *v43++;
                  v42 += v48 * v46;
                  --v45;
                }
                while (v45);
                v49 = 0;
                v9.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v29[1] + 8 * (v29[9] + v42));
                v50 = *(uint64_t **)(*(_QWORD *)&v28 + 48);
                v51 = v35;
                v52 = v41;
                do
                {
                  v54 = (uint64_t)*v51++;
                  v53 = v54;
                  v55 = *v50++;
                  v49 += v55 * v53;
                  --v52;
                }
                while (v52);
              }
              v56 = *(double *)(v37 + 8 * (*(_QWORD *)(*(_QWORD *)&v28 + 72) + v49));
              v23 = v9.n128_f64[0] == v56;
              if (v9.n128_f64[0] != v56)
                goto LABEL_492;
              v57 = v39;
              v58 = v39 - 1;
              if (v38 < 1)
                goto LABEL_73;
              v59 = v29[3];
              v60 = (unint64_t)v35[v40] + 1;
              v35[v40] = (void *)v60;
              if (v60 < *(_QWORD *)(v59 + 8 * v40))
              {
                v57 = 1;
                v58 = v39 - 1;
LABEL_73:
                if ((v58 & 0x8000000000000000) != 0)
                  goto LABEL_492;
LABEL_74:
                if (!v57)
                  goto LABEL_492;
                continue;
              }
              break;
            }
            v61 = v59 - 16;
            v62 = v39;
            v63 = (unint64_t *)((char *)v35 + (v38 & 0xFFFFFFFFFFFFFFF8) - 16);
            do
            {
              v64 = v62 - 1;
              v63[1] = 0;
              if ((uint64_t)(v62 - 1) <= 0)
              {
                v23 = 1;
                goto LABEL_492;
              }
              v65 = *v63 + 1;
              *v63-- = v65;
              v66 = *(_QWORD *)(v61 + 8 * v62--);
            }
            while (v65 >= v66);
            v57 = 1;
            if (((v64 - 1) & 0x8000000000000000) == 0)
              goto LABEL_74;
LABEL_492:
            if (v35)
            {
              v322 = v35;
              operator delete(v35);
            }
            break;
          default:
            goto LABEL_496;
        }
LABEL_121:
        switch(v327)
        {
          case 2:
            v85 = *(unint64_t **)&v325;
            do
            {
              v86 = __ldaxr(v85);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, v85));
            if (!v87)
            {
              v88 = v325;
              if (v325 != 0.0)
              {
                if (*(char *)(*(_QWORD *)&v325 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v325 + 8));
                v89 = v88;
                v90 = 0x1012C404EF22A49;
                goto LABEL_162;
              }
            }
            break;
          case 3:
            v102 = *(unint64_t **)&v325;
            do
            {
              v103 = __ldaxr(v102);
              v104 = v103 - 1;
            }
            while (__stlxr(v104, v102));
            if (!v104)
            {
              v105 = v325;
              if (v325 != 0.0)
              {
                v106 = *(void **)(*(_QWORD *)&v325 + 8);
                if (v106)
                {
                  *(_QWORD *)(*(_QWORD *)&v325 + 16) = v106;
                  operator delete(v106);
                }
                v89 = v105;
                v90 = 0x1080C409938AC02;
                goto LABEL_162;
              }
            }
            break;
          case 4:
            v91 = *(unint64_t **)&v325;
            do
            {
              v92 = __ldaxr(v91);
              v93 = v92 - 1;
            }
            while (__stlxr(v93, v91));
            if (!v93)
            {
              v94 = v325;
              if (v325 != 0.0)
              {
                v321 = (void **)(*(_QWORD *)&v325 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v321);
                goto LABEL_155;
              }
            }
            break;
          case 5:
            v107 = *(unint64_t **)&v325;
            do
            {
              v108 = __ldaxr(v107);
              v109 = v108 - 1;
            }
            while (__stlxr(v109, v107));
            if (!v109)
            {
              v94 = v325;
              if (v325 != 0.0)
              {
                v321 = (void **)(*(_QWORD *)&v325 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v321);
LABEL_155:
                v89 = v94;
                v90 = 0x1020C405E66F15BLL;
                goto LABEL_162;
              }
            }
            break;
          case 8:
            v110 = *(unint64_t **)&v325;
            do
            {
              v111 = __ldaxr(v110);
              v112 = v111 - 1;
            }
            while (__stlxr(v112, v110));
            if (!v112)
            {
              v113 = v325;
              if (v325 != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v325 + 16));
                v89 = v113;
                v101 = -235920773;
                goto LABEL_161;
              }
            }
            break;
          case 9:
            v95 = *(unint64_t **)&v325;
            do
            {
              v96 = __ldaxr(v95);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, v95));
            if (!v97)
            {
              v98 = v325;
              if (v325 != 0.0)
              {
                v99 = *(void **)(*(_QWORD *)&v325 + 48);
                if (v99)
                {
                  *(_QWORD *)(*(_QWORD *)&v325 + 56) = v99;
                  operator delete(v99);
                }
                v100 = *(void **)(*(_QWORD *)&v98 + 24);
                if (v100)
                {
                  *(_QWORD *)(*(_QWORD *)&v98 + 32) = v100;
                  operator delete(v100);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v98 + 8);
                v89 = v98;
                v101 = 2071181815;
LABEL_161:
                v90 = v101 | 0x1030C4000000000;
LABEL_162:
                MEMORY[0x219A19A08](*(_QWORD *)&v89, v90, v9);
              }
            }
            break;
          default:
            break;
        }
        if (!v23)
        {
          memset(v324, 0, 13);
          if (v8 != v324)
          {
            *(double *)((char *)v324 + 5) = *(double *)((char *)v8 + 5);
            v324[0] = *v8;
            BYTE4(v324[1]) = *(_BYTE *)(a1 + 28);
            switch(BYTE4(v324[1]))
            {
              case 2:
                v126 = *(unint64_t **)&v324[0];
                do
                  v127 = __ldaxr(v126);
                while (__stlxr(v127 + 1, v126));
                break;
              case 3:
                v133 = *(unint64_t **)&v324[0];
                do
                  v134 = __ldaxr(v133);
                while (__stlxr(v134 + 1, v133));
                break;
              case 4:
                v129 = *(unint64_t **)&v324[0];
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 + 1, v129));
                break;
              case 5:
                v135 = *(unint64_t **)&v324[0];
                do
                  v136 = __ldaxr(v135);
                while (__stlxr(v136 + 1, v135));
                break;
              case 8:
                v137 = *(unint64_t **)&v324[0];
                do
                  v138 = __ldaxr(v137);
                while (__stlxr(v138 + 1, v137));
                break;
              case 9:
                v131 = *(unint64_t **)&v324[0];
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 + 1, v131));
                break;
              default:
                goto LABEL_414;
            }
          }
          goto LABEL_414;
        }
        v114 = *(_QWORD *)(a1 + 16);
        v115 = *(unsigned __int8 *)(a1 + 28);
        v116 = v8;
        v117 = a3;
        v118 = v4;
        v119 = *(_DWORD *)(a1 + 24);
        v120 = v114;
        switch(*(_BYTE *)(a1 + 28))
        {
          case 0:
            v120 = -(uint64_t)v114;
            goto LABEL_177;
          case 1:
            v120 = v114 ^ 0x8000000000000000;
LABEL_177:
            *(_QWORD *)&v324[0] = v120;
            LODWORD(v324[1]) = v119;
            v128 = v115;
            BYTE4(v324[1]) = v115;
            goto LABEL_299;
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            do
              v121 = __ldaxr((unint64_t *)v114);
            while (__stlxr(v121 + 1, (unint64_t *)v114));
            v120 = v114;
            switch(v115)
            {
              case 2u:
                if (*(_QWORD *)v114 == 1)
                  goto LABEL_209;
                v122 = operator new();
                *(_QWORD *)v122 = *(_QWORD *)v114;
                v123 = (std::string *)(v122 + 8);
                v124 = (void **)(v114 + 8);
                if (*(char *)(v114 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(v123, *(const std::string::value_type **)(v114 + 8), *(_QWORD *)(v114 + 16));
                }
                else
                {
                  v125 = *(_OWORD *)v124;
                  *(_QWORD *)(v122 + 24) = *(_QWORD *)(v114 + 24);
                  *(_OWORD *)&v123->__r_.__value_.__l.__data_ = v125;
                }
                *(_QWORD *)v122 = 1;
                do
                {
                  v190 = __ldaxr((unint64_t *)v114);
                  v191 = v190 - 1;
                }
                while (__stlxr(v191, (unint64_t *)v114));
                v120 = v122;
                if (v191)
                  goto LABEL_294;
                v143 = 0x1012C404EF22A49;
                v120 = v122;
                if ((*(char *)(v114 + 31) & 0x80000000) == 0)
                  goto LABEL_293;
                operator delete(*v124);
                v143 = 0x1012C404EF22A49;
                goto LABEL_292;
              case 3u:
                if (*(_QWORD *)v114 == 1)
                {
                  v120 = v114;
                }
                else
                {
                  v144 = (_QWORD *)operator new();
                  *v144 = *(_QWORD *)v114;
                  v144[2] = 0;
                  v144[3] = 0;
                  v144[1] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v144 + 1, *(const void **)(v114 + 8), *(_QWORD *)(v114 + 16), (uint64_t)(*(_QWORD *)(v114 + 16) - *(_QWORD *)(v114 + 8)) >> 3);
                  *v144 = 1;
                  do
                  {
                    v145 = __ldaxr((unint64_t *)v114);
                    v146 = v145 - 1;
                  }
                  while (__stlxr(v146, (unint64_t *)v114));
                  v120 = (unint64_t)v144;
                  if (!v146)
                  {
                    v147 = *(void **)(v114 + 8);
                    if (v147)
                    {
                      *(_QWORD *)(v114 + 16) = v147;
                      operator delete(v147);
                    }
                    MEMORY[0x219A19A08](v114, 0x1080C409938AC02);
                    v120 = (unint64_t)v144;
                  }
                }
                v148 = *(double **)(v120 + 8);
                v149 = *(_QWORD *)(v120 + 16) - (_QWORD)v148;
                if (!v149)
                  goto LABEL_250;
                v150 = v149 >> 3;
                if (v150 <= 1)
                  v150 = 1;
                do
                {
                  v9.n128_f64[0] = -*v148;
                  *v148++ = v9.n128_f64[0];
                  --v150;
                }
                while (v150);
                goto LABEL_295;
              case 4u:
                if (*(_QWORD *)v114 == 1)
                  goto LABEL_209;
                v122 = operator new();
                *(_QWORD *)v122 = *(_QWORD *)v114;
                *(_QWORD *)(v122 + 16) = 0;
                *(_QWORD *)(v122 + 24) = 0;
                *(_QWORD *)(v122 + 8) = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(v122 + 8), *(uint64_t **)(v114 + 8), *(uint64_t **)(v114 + 16), (uint64_t)(*(_QWORD *)(v114 + 16) - *(_QWORD *)(v114 + 8)) >> 4);
                *(_QWORD *)v122 = 1;
                do
                {
                  v139 = __ldaxr((unint64_t *)v114);
                  v140 = v139 - 1;
                }
                while (__stlxr(v140, (unint64_t *)v114));
                v120 = v122;
                if (v140)
                  goto LABEL_294;
                v321 = (void **)(v114 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v321);
                goto LABEL_207;
              case 5u:
                if (*(_QWORD *)v114 == 1)
                  goto LABEL_209;
                v122 = operator new();
                *(_QWORD *)v122 = *(_QWORD *)v114;
                *(_QWORD *)(v122 + 16) = 0;
                *(_QWORD *)(v122 + 24) = 0;
                *(_QWORD *)(v122 + 8) = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((_QWORD *)(v122 + 8), *(uint64_t **)(v114 + 8), *(uint64_t **)(v114 + 16), (uint64_t)(*(_QWORD *)(v114 + 16) - *(_QWORD *)(v114 + 8)) >> 5);
                *(_QWORD *)v122 = 1;
                do
                {
                  v141 = __ldaxr((unint64_t *)v114);
                  v142 = v141 - 1;
                }
                while (__stlxr(v142, (unint64_t *)v114));
                v120 = v122;
                if (v142)
                  goto LABEL_294;
                v321 = (void **)(v114 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v321);
LABEL_207:
                v143 = 0x1020C405E66F15BLL;
                goto LABEL_292;
              case 6u:
              case 7u:
                goto LABEL_294;
              case 8u:
                if (*(_QWORD *)v114 == 1)
                {
LABEL_209:
                  v120 = v114;
                }
                else
                {
                  v122 = operator new();
                  *(_QWORD *)v122 = *(_QWORD *)v114;
                  v181 = *(_QWORD *)(v114 + 16);
                  *(_QWORD *)(v122 + 8) = *(_QWORD *)(v114 + 8);
                  *(_QWORD *)(v122 + 16) = v181;
                  if (v181)
                  {
                    v182 = (unsigned int *)(v181 + 8);
                    do
                      v183 = __ldxr(v182);
                    while (__stxr(v183 + 1, v182));
                  }
                  v184 = *(_OWORD *)(v114 + 24);
                  v185 = *(_OWORD *)(v114 + 40);
                  *(_OWORD *)(v122 + 56) = *(_OWORD *)(v114 + 56);
                  *(_OWORD *)(v122 + 40) = v185;
                  *(_OWORD *)(v122 + 24) = v184;
                  *(_QWORD *)v122 = 1;
                  do
                  {
                    v186 = __ldaxr((unint64_t *)v114);
                    v187 = v186 - 1;
                  }
                  while (__stlxr(v187, (unint64_t *)v114));
                  v120 = v122;
                  if (!v187)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(v114 + 16));
                    v143 = 0x1030C40F1F0227BLL;
LABEL_292:
                    v120 = v122;
LABEL_293:
                    MEMORY[0x219A19A08](v114, v143);
                  }
                }
                goto LABEL_294;
              case 9u:
                if (*(_QWORD *)v114 == 1)
                {
                  v120 = v114;
                }
                else
                {
                  v151 = (_QWORD *)operator new();
                  *v151 = *(_QWORD *)v114;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v151 + 1, v114 + 8);
                  *v151 = 1;
                  do
                  {
                    v152 = __ldaxr((unint64_t *)v114);
                    v153 = v152 - 1;
                  }
                  while (__stlxr(v153, (unint64_t *)v114));
                  v120 = (unint64_t)v151;
                  if (!v153)
                  {
                    v154 = *(void **)(v114 + 48);
                    if (v154)
                    {
                      *(_QWORD *)(v114 + 56) = v154;
                      operator delete(v154);
                    }
                    v155 = *(void **)(v114 + 24);
                    if (v155)
                    {
                      *(_QWORD *)(v114 + 32) = v155;
                      operator delete(v155);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v114 + 8);
                    MEMORY[0x219A19A08](v114, 0x1030C407B73B9F7);
                    v120 = (unint64_t)v151;
                  }
                }
                v157 = *(uint64_t **)(v120 + 24);
                v156 = *(uint64_t **)(v120 + 32);
                if (v156 == v157 || !*(_QWORD *)(v120 + 8))
                {
LABEL_250:
                  *(_QWORD *)&v324[0] = v120;
                  LODWORD(v324[1]) = v119;
                  BYTE4(v324[1]) = v115;
                  goto LABEL_297;
                }
                v158 = 1;
                do
                {
                  v159 = *v157++;
                  v158 *= v159;
                }
                while (v157 != v156);
                if (!v158)
                  goto LABEL_295;
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v120 + 8));
                v160 = (uint64_t)(*(_QWORD *)(v120 + 32) - *(_QWORD *)(v120 + 24)) >> 3;
                v323 = 0;
                std::vector<unsigned long>::vector(&v321, v160, &v323);
                v161 = v321;
                v162 = v322;
                break;
              default:
                goto LABEL_496;
            }
            break;
          case 6:
          case 7:
LABEL_294:
            turi::flexible_type_fail(0);
            goto LABEL_295;
          default:
            goto LABEL_496;
        }
        break;
      case 5:
      case 8:
      case 9:
        if (*(unsigned __int8 *)(a1 + 28) >= 0xAu)
          goto LABEL_496;
        goto LABEL_43;
      case 6:
        switch(*(_BYTE *)(a1 + 28))
        {
          case 0:
            if (*(_QWORD *)v8 < (uint64_t)(*(_QWORD *)&v325 << 8) >> 8)
              goto LABEL_471;
            goto LABEL_44;
          case 1:
            v9.n128_f64[0] = *v8;
            if ((double)v326 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v325 << 8) >> 8) > *v8)
              goto LABEL_471;
            goto LABEL_44;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_43;
          case 6:
            v189 = (uint64_t)(*(_QWORD *)v8 << 8) >> 8;
            if (v189 < (uint64_t)(*(_QWORD *)&v325 << 8) >> 8
              || v189 == (uint64_t)(*(_QWORD *)&v325 << 8) >> 8 && *(_DWORD *)(a1 + 24) < v326)
            {
              goto LABEL_471;
            }
            goto LABEL_44;
          default:
            goto LABEL_496;
        }
      case 7:
        if (*(unsigned __int8 *)(a1 + 28) <= 9u)
          goto LABEL_43;
        goto LABEL_496;
      default:
        goto LABEL_496;
    }
    while (1)
    {
      v163 = 0;
      v164 = (char *)v162 - (char *)v161;
      if (v164)
      {
        v165 = v164 >> 3;
        v166 = *(uint64_t **)(v120 + 48);
        if (v165 <= 1)
          v165 = 1;
        do
        {
          v168 = (uint64_t)*v161++;
          v167 = v168;
          v169 = *v166++;
          v163 += v169 * v167;
          --v165;
        }
        while (v165);
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v120 + 8));
      v170 = *(_QWORD *)(v120 + 72) + v163;
      v171 = **(_QWORD **)(v120 + 8);
      v9.n128_f64[0] = -*(double *)(v171 + 8 * v170);
      *(_QWORD *)(v171 + 8 * v170) = v9.n128_u64[0];
      v161 = v321;
      v162 = v322;
      v172 = v322 - v321;
      v173 = v172 - 1;
      if ((char *)v322 - (char *)v321 < 1)
        goto LABEL_246;
      v174 = *(_QWORD *)(v120 + 24);
      v175 = (char *)v321[v173] + 1;
      v321[v173] = v175;
      if ((unint64_t)v175 >= *(_QWORD *)(v174 + 8 * v173))
        break;
LABEL_245:
      v172 = 1;
LABEL_246:
      if (v173 < 0 || !v172)
        goto LABEL_248;
    }
    v176 = (unint64_t *)&v161[v172 - 2];
    v177 = v174 - 16;
    while (1)
    {
      v178 = v172 - 1;
      v176[1] = 0;
      if (v172 - 1 <= 0)
        break;
      v179 = *v176 + 1;
      *v176-- = v179;
      v180 = *(_QWORD *)(v177 + 8 * v172--);
      if (v179 < v180)
      {
        v173 = v178 - 1;
        goto LABEL_245;
      }
    }
LABEL_248:
    if (v161)
    {
      v322 = v161;
      operator delete(v161);
    }
LABEL_295:
    *(_QWORD *)&v324[0] = v120;
    LODWORD(v324[1]) = v119;
    BYTE4(v324[1]) = v115;
    if (v115 > 9)
    {
      v128 = v115;
    }
    else
    {
      v128 = v115;
      if (((1 << v115) & 0x33C) != 0)
      {
        do
LABEL_297:
          v192 = __ldaxr((unint64_t *)v120);
        while (__stlxr(v192 + 1, (unint64_t *)v120));
        v128 = BYTE4(v324[1]);
      }
    }
LABEL_299:
    switch(v128)
    {
      case 0u:
        v193 = *(_QWORD *)&v324[0] + 1;
        goto LABEL_347;
      case 1u:
        v9.n128_f64[0] = v324[0] + 1.0;
        v324[0] = v324[0] + 1.0;
        goto LABEL_378;
      case 2u:
        v234 = v324[0];
        if (**(_QWORD **)&v324[0] == 1)
          goto LABEL_377;
        v235 = (_QWORD *)operator new();
        *v235 = **(_QWORD **)&v234;
        v236 = (std::string *)(v235 + 1);
        v237 = (void **)(*(_QWORD *)&v234 + 8);
        if (*(char *)(*(_QWORD *)&v234 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v236, *(const std::string::value_type **)(*(_QWORD *)&v234 + 8), *(_QWORD *)(*(_QWORD *)&v234 + 16));
        }
        else
        {
          v238 = *(_OWORD *)v237;
          v235[3] = *(_QWORD *)(*(_QWORD *)&v234 + 24);
          *(_OWORD *)&v236->__r_.__value_.__l.__data_ = v238;
        }
        *(_QWORD *)&v324[0] = v235;
        *v235 = 1;
        do
        {
          v257 = __ldaxr(*(unint64_t **)&v234);
          v258 = v257 - 1;
        }
        while (__stlxr(v258, *(unint64_t **)&v234));
        if (v258)
          goto LABEL_377;
        if (*(char *)(*(_QWORD *)&v234 + 31) < 0)
          operator delete(*v237);
        v246 = v234;
        v247 = 0x1012C404EF22A49;
        goto LABEL_376;
      case 3u:
        v194 = v324[0];
        if (**(_QWORD **)&v324[0] != 1)
        {
          v195 = (_QWORD *)operator new();
          *v195 = **(_QWORD **)&v194;
          v195[2] = 0;
          v195[3] = 0;
          v195[1] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v195 + 1, *(const void **)(*(_QWORD *)&v194 + 8), *(_QWORD *)(*(_QWORD *)&v194 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v194 + 16) - *(_QWORD *)(*(_QWORD *)&v194 + 8)) >> 3);
          *(_QWORD *)&v324[0] = v195;
          *v195 = 1;
          do
          {
            v196 = __ldaxr(*(unint64_t **)&v194);
            v197 = v196 - 1;
          }
          while (__stlxr(v197, *(unint64_t **)&v194));
          if (!v197)
          {
            v198 = *(void **)(*(_QWORD *)&v194 + 8);
            if (v198)
            {
              *(_QWORD *)(*(_QWORD *)&v194 + 16) = v198;
              operator delete(v198);
            }
            MEMORY[0x219A19A08](*(_QWORD *)&v194, 0x1080C409938AC02);
          }
        }
        v199 = *(double **)(*(_QWORD *)&v324[0] + 8);
        v200 = *(_QWORD *)(*(_QWORD *)&v324[0] + 16) - (_QWORD)v199;
        if (v200)
        {
          v201 = v200 >> 3;
          if (v201 <= 1)
            v201 = 1;
          do
          {
            v9.n128_f64[0] = *v199 + 1.0;
            *v199++ = v9.n128_f64[0];
            --v201;
          }
          while (v201);
        }
        goto LABEL_378;
      case 4u:
        v239 = v324[0];
        if (**(_QWORD **)&v324[0] == 1)
          goto LABEL_377;
        v240 = (_QWORD *)operator new();
        *v240 = **(_QWORD **)&v239;
        v240[2] = 0;
        v240[3] = 0;
        v240[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v240 + 1, *(uint64_t **)(*(_QWORD *)&v239 + 8), *(uint64_t **)(*(_QWORD *)&v239 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v239 + 16) - *(_QWORD *)(*(_QWORD *)&v239 + 8)) >> 4);
        *(_QWORD *)&v324[0] = v240;
        *v240 = 1;
        do
        {
          v241 = __ldaxr(*(unint64_t **)&v239);
          v242 = v241 - 1;
        }
        while (__stlxr(v242, *(unint64_t **)&v239));
        if (v242)
          goto LABEL_377;
        v321 = (void **)(*(_QWORD *)&v239 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v321);
        goto LABEL_359;
      case 5u:
        v239 = v324[0];
        if (**(_QWORD **)&v324[0] == 1)
          goto LABEL_377;
        v243 = (_QWORD *)operator new();
        *v243 = **(_QWORD **)&v239;
        v243[2] = 0;
        v243[3] = 0;
        v243[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v243 + 1, *(uint64_t **)(*(_QWORD *)&v239 + 8), *(uint64_t **)(*(_QWORD *)&v239 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v239 + 16) - *(_QWORD *)(*(_QWORD *)&v239 + 8)) >> 5);
        *(_QWORD *)&v324[0] = v243;
        *v243 = 1;
        do
        {
          v244 = __ldaxr(*(unint64_t **)&v239);
          v245 = v244 - 1;
        }
        while (__stlxr(v245, *(unint64_t **)&v239));
        if (v245)
          goto LABEL_377;
        v321 = (void **)(*(_QWORD *)&v239 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v321);
LABEL_359:
        v246 = v239;
        v247 = 0x1020C405E66F15BLL;
        goto LABEL_376;
      case 6u:
        v193 = *(_QWORD *)&v324[0] & 0xFF00000000000000 | (*(_QWORD *)&v324[0] + 1) & 0xFFFFFFFFFFFFFFLL;
LABEL_347:
        *(_QWORD *)&v324[0] = v193;
        goto LABEL_378;
      case 7u:
        goto LABEL_377;
      case 8u:
        v248 = v324[0];
        if (**(_QWORD **)&v324[0] == 1)
          goto LABEL_377;
        v249 = operator new();
        *(_QWORD *)v249 = **(_QWORD **)&v248;
        v250 = *(_QWORD *)(*(_QWORD *)&v248 + 16);
        *(_QWORD *)(v249 + 8) = *(_QWORD *)(*(_QWORD *)&v248 + 8);
        *(_QWORD *)(v249 + 16) = v250;
        if (v250)
        {
          v251 = (unsigned int *)(v250 + 8);
          do
            v252 = __ldxr(v251);
          while (__stxr(v252 + 1, v251));
        }
        v253 = *(_OWORD *)(*(_QWORD *)&v248 + 24);
        v254 = *(_OWORD *)(*(_QWORD *)&v248 + 40);
        *(_OWORD *)(v249 + 56) = *(_OWORD *)(*(_QWORD *)&v248 + 56);
        *(_OWORD *)(v249 + 40) = v254;
        *(_OWORD *)(v249 + 24) = v253;
        *(_QWORD *)&v324[0] = v249;
        *(_QWORD *)v249 = 1;
        do
        {
          v255 = __ldaxr(*(unint64_t **)&v248);
          v256 = v255 - 1;
        }
        while (__stlxr(v256, *(unint64_t **)&v248));
        if (v256)
          goto LABEL_377;
        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v248 + 16));
        v246 = v248;
        v247 = 0x1030C40F1F0227BLL;
LABEL_376:
        MEMORY[0x219A19A08](*(_QWORD *)&v246, v247);
LABEL_377:
        turi::flexible_type_fail(0);
        goto LABEL_378;
      case 9u:
        v202 = *(unint64_t **)&v324[0];
        if (**(_QWORD **)&v324[0] != 1)
        {
          v203 = (_QWORD *)operator new();
          *v203 = *v202;
          turi::flexible_type_impl::ndarray<double>::ndarray(v203 + 1, (uint64_t)(v202 + 1));
          *(_QWORD *)&v324[0] = v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr(v202);
            v205 = v204 - 1;
          }
          while (__stlxr(v205, v202));
          if (!v205)
          {
            v206 = (void *)v202[6];
            if (v206)
            {
              v202[7] = (unint64_t)v206;
              operator delete(v206);
            }
            v207 = (void *)v202[3];
            if (v207)
            {
              v202[4] = (unint64_t)v207;
              operator delete(v207);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v202 + 1));
            MEMORY[0x219A19A08](v202, 0x1030C407B73B9F7);
          }
        }
        v208 = v324[0];
        v210 = *(uint64_t **)(*(_QWORD *)&v324[0] + 24);
        v209 = *(uint64_t **)(*(_QWORD *)&v324[0] + 32);
        if (v209 == v210)
          goto LABEL_378;
        if (!*(_QWORD *)(*(_QWORD *)&v324[0] + 8))
          goto LABEL_378;
        v211 = 1;
        do
        {
          v212 = *v210++;
          v211 *= v212;
        }
        while (v210 != v209);
        if (!v211)
          goto LABEL_378;
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v324[0] + 8));
        v213 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v208 + 32) - *(_QWORD *)(*(_QWORD *)&v208 + 24)) >> 3;
        v323 = 0;
        std::vector<unsigned long>::vector(&v321, v213, &v323);
        v214 = v321;
        v215 = v322;
        break;
      default:
        goto LABEL_496;
    }
    do
    {
      v216 = 0;
      v217 = (char *)v215 - (char *)v214;
      if (v217)
      {
        v218 = v217 >> 3;
        v219 = *(uint64_t **)(*(_QWORD *)&v208 + 48);
        if (v218 <= 1)
          v218 = 1;
        do
        {
          v221 = (uint64_t)*v214++;
          v220 = v221;
          v222 = *v219++;
          v216 += v222 * v220;
          --v218;
        }
        while (v218);
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v208 + 8));
      v223 = *(_QWORD *)(*(_QWORD *)&v208 + 72) + v216;
      v224 = **(_QWORD **)(*(_QWORD *)&v208 + 8);
      v9.n128_f64[0] = *(double *)(v224 + 8 * v223) + 1.0;
      *(_QWORD *)(v224 + 8 * v223) = v9.n128_u64[0];
      v214 = v321;
      v215 = v322;
      v225 = v322 - v321;
      v226 = v225 - 1;
      if ((char *)v322 - (char *)v321 >= 1)
      {
        v227 = *(_QWORD *)(*(_QWORD *)&v208 + 24);
        v228 = (char *)v321[v226] + 1;
        v321[v226] = v228;
        if ((unint64_t)v228 >= *(_QWORD *)(v227 + 8 * v226))
        {
          v229 = (unint64_t *)&v214[v225 - 2];
          v230 = v227 - 16;
          while (1)
          {
            v231 = v225 - 1;
            v229[1] = 0;
            if (v225 - 1 <= 0)
              goto LABEL_342;
            v232 = *v229 + 1;
            *v229-- = v232;
            v233 = *(_QWORD *)(v230 + 8 * v225--);
            if (v232 < v233)
            {
              v226 = v231 - 1;
              break;
            }
          }
        }
        v225 = 1;
      }
    }
    while ((v226 & 0x8000000000000000) == 0 && v225);
    if (!v214)
      goto LABEL_378;
LABEL_342:
    v322 = v214;
    operator delete(v214);
LABEL_378:
    v4 = v118;
    a3 = v117;
    v8 = v116;
    v6 = a2;
    switch(v115)
    {
      case 2u:
        do
          v259 = __ldaxr((unint64_t *)v120);
        while (__stlxr(v259 - 1, (unint64_t *)v120));
        if (v120 && v259 == 1)
        {
          if (*(char *)(v120 + 31) < 0)
            operator delete(*(void **)(v120 + 8));
          v260 = v120;
          v261 = 0x1012C404EF22A49;
          goto LABEL_413;
        }
        break;
      case 3u:
        do
          v267 = __ldaxr((unint64_t *)v120);
        while (__stlxr(v267 - 1, (unint64_t *)v120));
        if (v120 && v267 == 1)
        {
          v268 = *(void **)(v120 + 8);
          if (v268)
          {
            *(_QWORD *)(v120 + 16) = v268;
            operator delete(v268);
          }
          v260 = v120;
          v261 = 0x1080C409938AC02;
          goto LABEL_413;
        }
        break;
      case 4u:
        do
          v262 = __ldaxr((unint64_t *)v120);
        while (__stlxr(v262 - 1, (unint64_t *)v120));
        if (v120 && v262 == 1)
        {
          v321 = (void **)(v120 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v321);
          goto LABEL_407;
        }
        break;
      case 5u:
        do
          v269 = __ldaxr((unint64_t *)v120);
        while (__stlxr(v269 - 1, (unint64_t *)v120));
        if (v120 && v269 == 1)
        {
          v321 = (void **)(v120 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v321);
LABEL_407:
          v260 = v120;
          v261 = 0x1020C405E66F15BLL;
          goto LABEL_413;
        }
        break;
      case 8u:
        do
          v270 = __ldaxr((unint64_t *)v120);
        while (__stlxr(v270 - 1, (unint64_t *)v120));
        if (v120 && v270 == 1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v120 + 16));
          v260 = v120;
          v266 = -235920773;
          goto LABEL_412;
        }
        break;
      case 9u:
        do
          v263 = __ldaxr((unint64_t *)v120);
        while (__stlxr(v263 - 1, (unint64_t *)v120));
        if (v120 && v263 == 1)
        {
          v264 = *(void **)(v120 + 48);
          if (v264)
          {
            *(_QWORD *)(v120 + 56) = v264;
            operator delete(v264);
          }
          v265 = *(void **)(v120 + 24);
          if (v265)
          {
            *(_QWORD *)(v120 + 32) = v265;
            operator delete(v265);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v120 + 8);
          v260 = v120;
          v266 = 2071181815;
LABEL_412:
          v261 = v266 | 0x1030C4000000000;
LABEL_413:
          MEMORY[0x219A19A08](v260, v261);
        }
        break;
      default:
        break;
    }
LABEL_414:
    v271 = *(_QWORD *)(a3 + 56);
    if (!v271)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, double *, __n128))(*(_QWORD *)v271 + 48))(v271, v324, v9);
    switch(BYTE4(v324[1]))
    {
      case 2:
        v272 = *(unint64_t **)&v324[0];
        do
        {
          v273 = __ldaxr(v272);
          v274 = v273 - 1;
        }
        while (__stlxr(v274, v272));
        if (!v274)
        {
          v275 = v324[0];
          if (*(_QWORD *)&v324[0])
          {
            if (*(char *)(*(_QWORD *)&v324[0] + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v324[0] + 8));
            v276 = v275;
            v277 = 0x1012C404EF22A49;
            goto LABEL_456;
          }
        }
        break;
      case 3:
        v289 = *(unint64_t **)&v324[0];
        do
        {
          v290 = __ldaxr(v289);
          v291 = v290 - 1;
        }
        while (__stlxr(v291, v289));
        if (!v291)
        {
          v292 = v324[0];
          if (*(_QWORD *)&v324[0])
          {
            v293 = *(void **)(*(_QWORD *)&v324[0] + 8);
            if (v293)
            {
              *(_QWORD *)(*(_QWORD *)&v324[0] + 16) = v293;
              operator delete(v293);
            }
            v276 = v292;
            v277 = 0x1080C409938AC02;
            goto LABEL_456;
          }
        }
        break;
      case 4:
        v278 = *(unint64_t **)&v324[0];
        do
        {
          v279 = __ldaxr(v278);
          v280 = v279 - 1;
        }
        while (__stlxr(v280, v278));
        if (!v280)
        {
          v281 = v324[0];
          if (*(_QWORD *)&v324[0])
          {
            v321 = (void **)(*(_QWORD *)&v324[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v321);
            goto LABEL_449;
          }
        }
        break;
      case 5:
        v294 = *(unint64_t **)&v324[0];
        do
        {
          v295 = __ldaxr(v294);
          v296 = v295 - 1;
        }
        while (__stlxr(v296, v294));
        if (!v296)
        {
          v281 = v324[0];
          if (*(_QWORD *)&v324[0])
          {
            v321 = (void **)(*(_QWORD *)&v324[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v321);
LABEL_449:
            v276 = v281;
            v277 = 0x1020C405E66F15BLL;
            goto LABEL_456;
          }
        }
        break;
      case 8:
        v297 = *(unint64_t **)&v324[0];
        do
        {
          v298 = __ldaxr(v297);
          v299 = v298 - 1;
        }
        while (__stlxr(v299, v297));
        if (!v299)
        {
          v300 = v324[0];
          if (*(_QWORD *)&v324[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v324[0] + 16));
            v276 = v300;
            v288 = -235920773;
            goto LABEL_455;
          }
        }
        break;
      case 9:
        v282 = *(unint64_t **)&v324[0];
        do
        {
          v283 = __ldaxr(v282);
          v284 = v283 - 1;
        }
        while (__stlxr(v284, v282));
        if (!v284)
        {
          v285 = v324[0];
          if (*(_QWORD *)&v324[0])
          {
            v286 = *(void **)(*(_QWORD *)&v324[0] + 48);
            if (v286)
            {
              *(_QWORD *)(*(_QWORD *)&v324[0] + 56) = v286;
              operator delete(v286);
            }
            v287 = *(void **)(*(_QWORD *)&v285 + 24);
            if (v287)
            {
              *(_QWORD *)(*(_QWORD *)&v285 + 32) = v287;
              operator delete(v287);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v285 + 8);
            v276 = v285;
            v288 = 2071181815;
LABEL_455:
            v277 = v288 | 0x1030C4000000000;
LABEL_456:
            MEMORY[0x219A19A08](*(_QWORD *)&v276, v277);
          }
        }
        break;
      default:
        break;
    }
    turi::sarray_iterator<turi::flexible_type>::operator++(a1);
  }
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a4, a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](a4 + 32, a3 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a4 + 64, a3 + 64);
}

void sub_21859F8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,uint64_t a21,int a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;

  MEMORY[0x219A19A08](v24, 0x1012C404EF22A49);
  do
    v26 = __ldaxr((unint64_t *)v23);
  while (__stlxr(v26 - 1, (unint64_t *)v23));
  if (v23 && v26 == 1)
  {
    if (*(char *)(v23 + 31) < 0)
      operator delete(*(void **)(v23 + 8));
    MEMORY[0x219A19A08](v23, 0x1012C404EF22A49);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZNS_10s"
                                        "upervised30supervised_learning_model_base8classifyERKNS_7ml_dataERKNSt3__112basi"
                                        "c_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEE3$_0vvEEvOT_OT0_T1_NSB_3setI"
                                        "mNSB_4lessImEENSF_ImEEEEEUlmE_EEvmmRKSL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZNS_10supervised30supervised_learning_model_base8classifyERKNS_7ml_dataERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEE3$_0vvEEvOT_OT0_T1_NSB_3setImNSB_4lessImEENSF_ImEEEEEUlmE_EEvmmRKSL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1},void>::invoke(unint64_t result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = (uint64_t *)result;
    do
      result = turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D949E00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D949E00;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  turi::supervised::supervised_learning_model_base *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int64_t v56;
  char *v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  BOOL v100;
  unint64_t *v101;
  unint64_t v102;
  BOOL v103;
  unint64_t *v104;
  unint64_t v105;
  BOOL v106;
  unint64_t *v107;
  unint64_t v108;
  BOOL v109;
  unint64_t *v110;
  unint64_t v111;
  BOOL v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  unsigned int v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  void *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  std::bad_alloc *exception;
  std::bad_alloc *v172;
  turi::supervised::supervised_learning_model_base *v173;
  std::__shared_weak_count *v174;
  uint64_t v175;
  void **v176[16];
  uint64_t v177;
  unsigned __int8 v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int8 v188;
  char v189[8];
  __int128 v190;
  __int128 v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  void **v195;
  _BYTE v196[13];
  _QWORD v197[3];
  _QWORD *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  _QWORD v203[4];

  v203[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  v6 = *(turi::supervised::supervised_learning_model_base **)(a1 + 32);
  v7 = *(unint64_t **)(a1 + 8);
  v193 = 0;
  v194 = 0;
  v8 = *v7;
  if (*v7)
  {
    if (v8 >> 61 || (v9 = malloc_type_malloc(8 * v8, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v172 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v172, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v7 = *(unint64_t **)(a1 + 8);
    v193 = v9;
  }
  v194 = v8;
  v10 = *v7;
  v189[0] = 0;
  v190 = 0u;
  v191 = 0u;
  v192 = v10;
  memset(v203, 0, 13);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 16) + 32))(v197, **(_QWORD **)(a1 + 16), v4);
  turi::ml_data::get_iterator(*(turi::ml_data **)(a1 + 24), v4, v5, (uint64_t)v176);
  if (v182 != v181)
  {
    v173 = v6;
    v175 = a1;
    do
    {
      v11 = *(_QWORD *)(*((_QWORD *)v6 + 47) + 64);
      v12 = turi::supervised::supervised_learning_model_base::num_features(v6);
      v13 = v184;
      v14 = v185;
      if (v11 <= 3 * v12)
      {
        if (v185)
        {
          p_shared_owners = (unint64_t *)&v185->__shared_owners_;
          do
            v53 = __ldxr(p_shared_owners);
          while (__stxr(v53 + 1, p_shared_owners));
        }
        v54 = v186;
        v55 = v188;
        v57 = (char *)v193;
        v56 = v194;
        if (v194 >= 0)
          v58 = v194;
        else
          v58 = v194 + 1;
        v59 = v58 & 0xFFFFFFFFFFFFFFFELL;
        if (v194 >= 2)
        {
          v60 = 2;
          if (v59 > 2)
            v60 = v58 & 0xFFFFFFFFFFFFFFFELL;
          bzero(v193, ((8 * v60 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if (v59 < v56)
          bzero(&v57[16 * (v58 >> 1)], 8 * v56 - 16 * (v58 >> 1));
        if (v55)
        {
          v61 = *(_QWORD *)(v13 + 56);
          if (v61)
          {
            v62 = 0;
            v63 = 0;
            v64 = (unint64_t *)(*(_QWORD *)(v13 + 96) + 8 * v54 + 8 * (*(_BYTE *)(v13 + 18) == 0));
            v65 = *(_QWORD *)(v13 + 72);
            v66 = v193;
            do
            {
              v67 = *(_QWORD *)(v65 + 16 * v62);
              v68 = *(_QWORD *)(v67 + 64);
              switch(*(_DWORD *)(v67 + 24))
              {
                case 0:
                  if (v68)
                    v66[v63] = *v64;
                  ++v64;
                  goto LABEL_101;
                case 1:
                  v77 = *v64++;
                  v76 = v77;
                  --v63;
                  if (v77 < v68 && v76 != 0)
                    v66[v76 + v63] = 0x3FF0000000000000;
                  goto LABEL_101;
                case 2:
                  v69 = *(_QWORD *)(v67 + 72);
                  if (!v69)
                    goto LABEL_101;
                  v70 = 0;
                  v71 = 0;
                  v72 = (char *)v193 + 8 * v63;
                  do
                  {
                    if (v71 < v68)
                      *(_QWORD *)&v72[8 * v71] = v64[v71];
                    ++v71;
                    v70 -= 8;
                  }
                  while (v69 != v71);
                  break;
                case 3:
                  v80 = *v64++;
                  v79 = v80;
                  --v63;
                  if (v80)
                  {
                    v81 = v193;
                    do
                    {
                      v82 = *v64;
                      if (*v64 < v68 && v82 != 0)
                        v81[v82 + v63] = 0x3FF0000000000000;
                      ++v64;
                      --v79;
                    }
                    while (v79);
                  }
                  goto LABEL_101;
                case 4:
                  v86 = *v64;
                  v84 = v64 + 1;
                  v85 = v86;
                  if (v86)
                  {
                    v87 = v193;
                    v88 = v84;
                    do
                    {
                      v90 = *v88;
                      v88 += 2;
                      v89 = v90;
                      if (v90 < v68)
                        v87[v89 + v63] = v84[1];
                      v84 = v88;
                      --v85;
                    }
                    while (v85);
                  }
                  else
                  {
                    v88 = v84;
                  }
                  v63 += v68;
                  v64 = v88;
                  goto LABEL_102;
                case 7:
                  v73 = *(_QWORD *)(v67 + 72);
                  if (!v73)
                    goto LABEL_101;
                  v70 = 0;
                  v74 = 0;
                  v75 = (char *)v193 + 8 * v63;
                  do
                  {
                    if (v74 < v68)
                      *(_QWORD *)&v75[8 * v74] = v64[v74];
                    ++v74;
                    v70 -= 8;
                  }
                  while (v73 != v74);
                  break;
                default:
                  goto LABEL_102;
              }
              v64 = (unint64_t *)((char *)v64 - v70);
LABEL_101:
              v63 += v68;
LABEL_102:
              ++v62;
            }
            while (v62 != v61);
          }
        }
        if (v14)
        {
          v91 = (unint64_t *)&v14->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        *((_QWORD *)v193 + **(_QWORD **)(v175 + 8) - 1) = 0x3FF0000000000000;
        (*(void (**)(_BYTE *__return_ptr, turi::supervised::supervised_learning_model_base *, void **, _QWORD))(*(_QWORD *)v6 + 88))(v196, v6, &v193, *(_QWORD *)(v175 + 40));
        switch(BYTE4(v203[1]))
        {
          case 2:
            v93 = (unint64_t *)v203[0];
            do
            {
              v94 = __ldaxr(v93);
              v51 = --v94 == 0;
            }
            while (__stlxr(v94, v93));
LABEL_120:
            if (v51)
            {
              v95 = v203[0];
              if (v203[0])
              {
                if (*(char *)(v203[0] + 31) < 0)
                  operator delete(*(void **)(v203[0] + 8));
                v96 = v95;
                v97 = 0x1012C404EF22A49;
                goto LABEL_179;
              }
            }
            break;
          case 3:
            v104 = (unint64_t *)v203[0];
            do
            {
              v105 = __ldaxr(v104);
              v106 = --v105 == 0;
            }
            while (__stlxr(v105, v104));
LABEL_159:
            if (v106)
            {
              v124 = v203[0];
              if (v203[0])
              {
                v125 = *(void **)(v203[0] + 8);
                if (v125)
                {
                  *(_QWORD *)(v203[0] + 16) = v125;
                  operator delete(v125);
                }
                v96 = v124;
                v97 = 0x1080C409938AC02;
                goto LABEL_179;
              }
            }
            break;
          case 4:
            v98 = (unint64_t *)v203[0];
            do
            {
              v99 = __ldaxr(v98);
              v100 = --v99 == 0;
            }
            while (__stlxr(v99, v98));
LABEL_143:
            if (v100)
            {
              v115 = v203[0];
              if (v203[0])
              {
                v195 = (void **)(v203[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v195);
                goto LABEL_171;
              }
            }
            break;
          case 5:
            v107 = (unint64_t *)v203[0];
            do
            {
              v108 = __ldaxr(v107);
              v109 = --v108 == 0;
            }
            while (__stlxr(v108, v107));
LABEL_167:
            if (v109)
            {
              v115 = v203[0];
              if (v203[0])
              {
                v195 = (void **)(v203[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v195);
LABEL_171:
                v96 = v115;
                v97 = 0x1020C405E66F15BLL;
                goto LABEL_179;
              }
            }
            break;
          case 8:
            v110 = (unint64_t *)v203[0];
            do
            {
              v111 = __ldaxr(v110);
              v112 = --v111 == 0;
            }
            while (__stlxr(v111, v110));
LABEL_174:
            if (v112)
            {
              v130 = v203[0];
              if (v203[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v203[0] + 16));
                v96 = v130;
                v121 = -235920773;
                goto LABEL_178;
              }
            }
            break;
          case 9:
            v101 = (unint64_t *)v203[0];
            do
            {
              v102 = __ldaxr(v101);
              v103 = --v102 == 0;
            }
            while (__stlxr(v102, v101));
LABEL_149:
            if (v103)
            {
              v118 = v203[0];
              if (v203[0])
              {
                v119 = *(void **)(v203[0] + 48);
                if (v119)
                {
                  *(_QWORD *)(v203[0] + 56) = v119;
                  operator delete(v119);
                }
                v120 = *(void **)(v118 + 24);
                if (v120)
                {
                  *(_QWORD *)(v118 + 32) = v120;
                  operator delete(v120);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v118 + 8);
                v96 = v118;
                v121 = 2071181815;
LABEL_178:
                v97 = v121 | 0x1030C4000000000;
LABEL_179:
                MEMORY[0x219A19A08](v96, v97);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        if (v185)
        {
          v15 = (unint64_t *)&v185->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v174 = v14;
        *(_QWORD *)&v191 = 0;
        if (v188)
        {
          v17 = *(_QWORD *)(v13 + 56);
          if (v17)
          {
            v18 = 0;
            v19 = 0;
            v20 = (uint64_t *)(*(_QWORD *)(v13 + 96) + 8 * v186 + 8 * (*(_BYTE *)(v13 + 18) == 0));
            do
            {
              v21 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 16 * v18);
              v22 = *(_QWORD *)(v21 + 64);
              switch(*(_DWORD *)(v21 + 24))
              {
                case 0:
                  v23 = *v20++;
                  v24 = v23;
                  if (v22)
                  {
                    *(_QWORD *)v196 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v190, (int)v19, v196) = v24;
                  }
                  goto LABEL_46;
                case 1:
                  v36 = *v20++;
                  v35 = v36;
                  if (v36 < v22 && v35 != 0)
                  {
                    *(_QWORD *)v196 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v190, (int)v35 + (int)v19 - 1, v196) = 0x3FF0000000000000;
                  }
                  goto LABEL_41;
                case 2:
                  v25 = *(_QWORD *)(v21 + 72);
                  if (v25)
                  {
                    v26 = 0;
                    v27 = v19 << 32;
                    do
                    {
                      v28 = *v20++;
                      v29 = v28;
                      if (v26 < v22)
                      {
                        *(_QWORD *)v196 = 0;
                        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v190, v27 >> 32, v196) = v29;
                      }
                      ++v26;
                      v27 += 0x100000000;
                    }
                    while (v25 != v26);
                  }
                  goto LABEL_28;
                case 3:
                  v39 = *v20++;
                  for (i = v39; i; --i)
                  {
                    v40 = *v20;
                    if (*v20 < v22 && v40 != 0)
                    {
                      *(_QWORD *)v196 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v190, (int)v40 + (int)v19 - 1, v196) = 0x3FF0000000000000;
                    }
                    ++v20;
                  }
LABEL_41:
                  v19 = v22 + v19 - 1;
                  break;
                case 4:
                  v43 = *v20++;
                  for (j = v43; j; --j)
                  {
                    v44 = *v20;
                    if (*v20 < v22)
                    {
                      v45 = v20[1];
                      *(_QWORD *)v196 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v190, (int)v44 + (int)v19, v196) = v45;
                    }
                    v20 += 2;
                  }
LABEL_46:
                  v19 += v22;
                  break;
                case 7:
                  v30 = *(_QWORD *)(v21 + 72);
                  if (v30)
                  {
                    v31 = 0;
                    v32 = v19 << 32;
                    do
                    {
                      v33 = *v20++;
                      v34 = v33;
                      if (v31 < v22)
                      {
                        *(_QWORD *)v196 = 0;
                        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v190, v32 >> 32, v196) = v34;
                      }
                      ++v31;
                      v32 += 0x100000000;
                    }
                    while (v30 != v31);
                  }
LABEL_28:
                  v19 += v22;
                  break;
                default:
                  break;
              }
              ++v18;
            }
            while (v18 != v17);
          }
        }
        v6 = v173;
        if (v174)
        {
          v46 = (unint64_t *)&v174->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
        v48 = **(_DWORD **)(v175 + 8) - 1;
        *(_QWORD *)v196 = 0;
        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v190, v48, v196) = 0x3FF0000000000000;
        (*(void (**)(_BYTE *__return_ptr, turi::supervised::supervised_learning_model_base *, char *, _QWORD))(*(_QWORD *)v173 + 96))(v196, v173, v189, *(_QWORD *)(v175 + 40));
        switch(BYTE4(v203[1]))
        {
          case 2:
            v49 = (unint64_t *)v203[0];
            do
            {
              v50 = __ldaxr(v49);
              v51 = --v50 == 0;
            }
            while (__stlxr(v50, v49));
            goto LABEL_120;
          case 3:
            v122 = (unint64_t *)v203[0];
            do
            {
              v123 = __ldaxr(v122);
              v106 = --v123 == 0;
            }
            while (__stlxr(v123, v122));
            goto LABEL_159;
          case 4:
            v113 = (unint64_t *)v203[0];
            do
            {
              v114 = __ldaxr(v113);
              v100 = --v114 == 0;
            }
            while (__stlxr(v114, v113));
            goto LABEL_143;
          case 5:
            v126 = (unint64_t *)v203[0];
            do
            {
              v127 = __ldaxr(v126);
              v109 = --v127 == 0;
            }
            while (__stlxr(v127, v126));
            goto LABEL_167;
          case 8:
            v128 = (unint64_t *)v203[0];
            do
            {
              v129 = __ldaxr(v128);
              v112 = --v129 == 0;
            }
            while (__stlxr(v129, v128));
            goto LABEL_174;
          case 9:
            v116 = (unint64_t *)v203[0];
            do
            {
              v117 = __ldaxr(v116);
              v103 = --v117 == 0;
            }
            while (__stlxr(v117, v116));
            goto LABEL_149;
          default:
            break;
        }
      }
      *(_QWORD *)((char *)v203 + 5) = *(_QWORD *)&v196[5];
      v203[0] = *(_QWORD *)v196;
      BYTE4(v203[1]) = v196[12];
      if (!v198)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, _QWORD *))(*v198 + 48))(v198, v203);
      if (v188 | v178)
      {
        v131 = (uint64_t *)(*(_QWORD *)(v184 + 96) + 8 * v186);
        if (v179)
          v131 = &v180;
        v186 += *v131;
      }
      v132 = v182 + 1;
      v133 = v181;
      v134 = ++v182 - v177 * v183;
      v187 = v134;
      if (v134 == v177 && v132 != v181)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v176);
        v133 = v181;
        v132 = v182;
      }
    }
    while (v132 != v133);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v176);
  v136 = v202;
  if (v202 == v201)
  {
    v137 = 4;
    v136 = v201;
  }
  else
  {
    if (!v202)
      goto LABEL_196;
    v137 = 5;
  }
  (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_196:
  v138 = v200;
  if (v200 == v199)
  {
    v139 = 4;
    v138 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_201;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_201:
  v140 = v198;
  if (v198 == v197)
  {
    v141 = 4;
    v140 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_206;
    v141 = 5;
  }
  (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_206:
  switch(BYTE4(v203[1]))
  {
    case 2:
      v142 = (unint64_t *)v203[0];
      do
      {
        v143 = __ldaxr(v142);
        v144 = v143 - 1;
      }
      while (__stlxr(v144, v142));
      if (!v144)
      {
        v145 = v203[0];
        if (v203[0])
        {
          if (*(char *)(v203[0] + 31) < 0)
            operator delete(*(void **)(v203[0] + 8));
          v146 = v145;
          v147 = 0x1012C404EF22A49;
          goto LABEL_247;
        }
      }
      break;
    case 3:
      v159 = (unint64_t *)v203[0];
      do
      {
        v160 = __ldaxr(v159);
        v161 = v160 - 1;
      }
      while (__stlxr(v161, v159));
      if (!v161)
      {
        v162 = v203[0];
        if (v203[0])
        {
          v163 = *(void **)(v203[0] + 8);
          if (v163)
          {
            *(_QWORD *)(v203[0] + 16) = v163;
            operator delete(v163);
          }
          v146 = v162;
          v147 = 0x1080C409938AC02;
          goto LABEL_247;
        }
      }
      break;
    case 4:
      v148 = (unint64_t *)v203[0];
      do
      {
        v149 = __ldaxr(v148);
        v150 = v149 - 1;
      }
      while (__stlxr(v150, v148));
      if (!v150)
      {
        v151 = v203[0];
        if (v203[0])
        {
          v176[0] = (void **)(v203[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v176);
          goto LABEL_240;
        }
      }
      break;
    case 5:
      v164 = (unint64_t *)v203[0];
      do
      {
        v165 = __ldaxr(v164);
        v166 = v165 - 1;
      }
      while (__stlxr(v166, v164));
      if (!v166)
      {
        v151 = v203[0];
        if (v203[0])
        {
          v176[0] = (void **)(v203[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v176);
LABEL_240:
          v146 = v151;
          v147 = 0x1020C405E66F15BLL;
          goto LABEL_247;
        }
      }
      break;
    case 8:
      v167 = (unint64_t *)v203[0];
      do
      {
        v168 = __ldaxr(v167);
        v169 = v168 - 1;
      }
      while (__stlxr(v169, v167));
      if (!v169)
      {
        v170 = v203[0];
        if (v203[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v203[0] + 16));
          v146 = v170;
          v158 = -235920773;
          goto LABEL_246;
        }
      }
      break;
    case 9:
      v152 = (unint64_t *)v203[0];
      do
      {
        v153 = __ldaxr(v152);
        v154 = v153 - 1;
      }
      while (__stlxr(v154, v152));
      if (!v154)
      {
        v155 = v203[0];
        if (v203[0])
        {
          v156 = *(void **)(v203[0] + 48);
          if (v156)
          {
            *(_QWORD *)(v203[0] + 56) = v156;
            operator delete(v156);
          }
          v157 = *(void **)(v155 + 24);
          if (v157)
          {
            *(_QWORD *)(v155 + 32) = v157;
            operator delete(v157);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v155 + 8);
          v146 = v155;
          v158 = 2071181815;
LABEL_246:
          v147 = v158 | 0x1030C4000000000;
LABEL_247:
          MEMORY[0x219A19A08](v146, v147);
        }
      }
      break;
    default:
      break;
  }
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v190);
  free(v193);
}

void sub_2185A0FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;

  v67 = *(_QWORD **)(v65 - 136);
  if (v67 == (_QWORD *)(v65 - 160))
  {
    v68 = 4;
    v67 = (_QWORD *)(v65 - 160);
  }
  else
  {
    if (!v67)
      goto LABEL_6;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_6:
  v69 = *(_QWORD **)(v65 - 168);
  if (v69 == (_QWORD *)(v65 - 192))
  {
    v70 = 4;
    v69 = (_QWORD *)(v65 - 192);
  }
  else
  {
    if (!v69)
      goto LABEL_11;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_11:
  v71 = *(_QWORD **)(v65 - 200);
  if (v71 == (_QWORD *)(v65 - 224))
  {
    v72 = 4;
    v71 = (_QWORD *)(v65 - 224);
  }
  else
  {
    if (!v71)
      goto LABEL_16;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_16:
  switch(*(_BYTE *)(v65 - 116))
  {
    case 2:
      turi::full_type_name<turi::flexible_type>((unint64_t **)(v65 - 128));
      goto LABEL_37;
    case 3:
      turi::full_type_name<turi::flexible_type>((unint64_t **)(v65 - 128));
      goto LABEL_37;
    case 4:
      v73 = *(unint64_t **)(v65 - 128);
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (v75)
        goto LABEL_37;
      v76 = *(_QWORD *)(v65 - 128);
      if (!v76)
        goto LABEL_37;
      a13 = v76 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
      goto LABEL_30;
    case 5:
      v77 = *(unint64_t **)(v65 - 128);
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (v79)
        goto LABEL_37;
      v76 = *(_QWORD *)(v65 - 128);
      if (!v76)
        goto LABEL_37;
      a13 = v76 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
LABEL_30:
      v80 = v76;
      v81 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v82 = *(unint64_t **)(v65 - 128);
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (v84)
        goto LABEL_37;
      v85 = *(_QWORD *)(v65 - 128);
      if (!v85)
        goto LABEL_37;
      boost::detail::shared_count::~shared_count((unsigned int **)(v85 + 16));
      v80 = v85;
      v81 = 0x1030C40F1F0227BLL;
      break;
    case 9:
      std::__function::__func<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()((unint64_t **)(v65 - 128));
      goto LABEL_37;
    default:
      goto LABEL_37;
  }
  MEMORY[0x219A19A08](v80, v81);
LABEL_37:
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v64);
  free(a64);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D949E80;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D949E80;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  __n128 v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unint64_t v8;
  char v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  unint64_t *v13;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  double v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v65;
  size_t v66;
  unsigned int v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  double *v71;
  uint64_t v72;
  unint64_t v73;
  double *v74;
  _QWORD *v75;
  double v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  double v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  double v95;
  void *v96;
  void *v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  double v102;
  void *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  double v110;
  unint64_t v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  std::string *v117;
  void **v118;
  __int128 v119;
  int v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  unint64_t v140;
  void *v141;
  double *v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t v147;
  void *v148;
  void *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void **v155;
  void **v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unsigned __int8 *v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  __int128 v179;
  __int128 v180;
  unint64_t v181;
  unint64_t v182;
  double v183;
  uint64_t v184;
  double v185;
  double v186;
  unint64_t v187;
  unint64_t v188;
  unsigned int v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t *v192;
  _QWORD *v193;
  unint64_t v194;
  unint64_t v195;
  void *v196;
  double *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t *v200;
  _QWORD *v201;
  unint64_t v202;
  unint64_t v203;
  void *v204;
  void *v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void **v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  unint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t *v232;
  _QWORD *v233;
  std::string *v234;
  void **v235;
  __int128 v236;
  unint64_t *v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t *v244;
  uint64_t v245;
  unint64_t *v246;
  uint64_t v247;
  unint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  __int128 v251;
  __int128 v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  void *v262;
  void *v263;
  unsigned int v264;
  unint64_t v265;
  void *v266;
  unint64_t v267;
  unint64_t v268;
  size_t v269;
  const void *v270;
  size_t v271;
  int v272;
  BOOL v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  size_t v277;
  int v278;
  int v279;
  int v280;
  int v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  void **v285;
  void **v286;
  double v287;
  int v288;
  char v289;
  uint64_t v290;

  v290 = *MEMORY[0x24BDAC8D0];
  v283 = 0x3FE0000000000000;
  v287 = 0.0;
  v288 = 0;
  v289 = 0;
  turi::flexible_type::operator=<double>((uint64_t)&v287, &v283);
  switch(v289)
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 < *(uint64_t *)&v287)
            goto LABEL_423;
          goto LABEL_40;
        case 1u:
          v4.n128_u64[0] = *(_QWORD *)a1;
          v183 = (double)*(uint64_t *)&v287;
          goto LABEL_262;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_39;
        case 6u:
          if (*(uint64_t *)&v287 > (uint64_t)(*(_QWORD *)a1 << 8) >> 8)
            goto LABEL_423;
          goto LABEL_40;
        default:
          goto LABEL_448;
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          v4.n128_f64[0] = v287;
          if (v287 > (double)*(uint64_t *)a1)
            goto LABEL_423;
          goto LABEL_40;
        case 1u:
          v4.n128_u64[0] = *(_QWORD *)a1;
          v183 = v287;
LABEL_262:
          if (v4.n128_f64[0] < v183)
            goto LABEL_423;
          goto LABEL_40;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_39;
        case 6u:
          v4.n128_f64[0] = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
          if (v4.n128_f64[0] < v287)
            goto LABEL_423;
          goto LABEL_40;
        default:
          goto LABEL_448;
      }
    case 2:
      v6 = a1[12];
      v7 = v6 - 3 >= 7 && v6 >= 2;
      if (!v7)
        goto LABEL_39;
      if (v6 != 2)
      {
LABEL_448:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
      }
      v8 = *(_QWORD *)a1;
      v9 = *(_BYTE *)(*(_QWORD *)&v287 + 31);
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
      {
        v10 = *(const void **)(v8 + 8);
        v11 = *(_QWORD *)(v8 + 16);
      }
      else
      {
        v10 = (const void *)(v8 + 8);
        v11 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      }
      if (v9 >= 0)
        v269 = *(unsigned __int8 *)(*(_QWORD *)&v287 + 31);
      else
        v269 = *(_QWORD *)(*(_QWORD *)&v287 + 16);
      if (v9 >= 0)
        v270 = (const void *)(*(_QWORD *)&v287 + 8);
      else
        v270 = *(const void **)(*(_QWORD *)&v287 + 8);
      if (v269 >= v11)
        v271 = v11;
      else
        v271 = v269;
      v272 = memcmp(v10, v270, v271);
      v273 = v11 < v269;
      if (v272)
        v273 = v272 < 0;
      if (v273)
        goto LABEL_423;
      goto LABEL_40;
    case 3:
      v12 = a1[12];
      if (v12 > 9)
        goto LABEL_448;
      if (v12 != 3)
        goto LABEL_39;
      v13 = *(unint64_t **)(*(_QWORD *)a1 + 8);
      v14 = *(double **)(*(_QWORD *)&v287 + 8);
      v15 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v287 + 16) - (_QWORD)v14) >> 3;
      v16 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v13) >> 3;
      if (*(unint64_t **)(*(_QWORD *)a1 + 16) == v13)
        goto LABEL_27;
      if (v16 <= 1)
        v17 = 1;
      else
        v17 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v13) >> 3;
      v18 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v287 + 16) - (_QWORD)v14) >> 3;
      break;
    case 4:
      v5 = a1[12];
      if (v5 > 9)
        goto LABEL_448;
      if (v5 != 4)
      {
LABEL_39:
        turi::flexible_type_fail(0);
        goto LABEL_40;
      }
      if (!turi::flexible_type_impl::lt_operator::operator()(v4, (uint64_t)&v285, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)&v287 + 8)))goto LABEL_40;
      goto LABEL_423;
    case 5:
    case 8:
    case 9:
      if (a1[12] >= 0xAu)
        goto LABEL_448;
      goto LABEL_39;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 < (uint64_t)(*(_QWORD *)&v287 << 8) >> 8)
            goto LABEL_423;
          goto LABEL_40;
        case 1u:
          v4.n128_f64[0] = (double)v288 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v287 << 8) >> 8);
          if (v4.n128_f64[0] > *(double *)a1)
            goto LABEL_423;
          goto LABEL_40;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_39;
        case 6u:
          v184 = (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          if (v184 < (uint64_t)(*(_QWORD *)&v287 << 8) >> 8
            || v184 == (uint64_t)(*(_QWORD *)&v287 << 8) >> 8 && *((_DWORD *)a1 + 2) < v288)
          {
            goto LABEL_423;
          }
          goto LABEL_40;
        default:
          goto LABEL_448;
      }
    case 7:
      if (a1[12] <= 9u)
        goto LABEL_39;
      goto LABEL_448;
    default:
      goto LABEL_448;
  }
  while (v18)
  {
    v4.n128_u64[0] = *v13;
    if (*(double *)v13 > *v14)
      break;
    if (*(double *)v13 < *v14)
      goto LABEL_423;
    ++v14;
    ++v13;
    --v18;
    if (!--v17)
    {
LABEL_27:
      if (v16 < v15)
      {
LABEL_423:
        v19 = 1;
        goto LABEL_116;
      }
      break;
    }
  }
LABEL_40:
  switch(v289)
  {
    case 0:
      v19 = 0;
      switch(a1[12])
      {
        case 0u:
          v20 = *(_QWORD *)a1 == *(_QWORD *)&v287;
          goto LABEL_98;
        case 1u:
          v4.n128_u64[0] = *(_QWORD *)a1;
          v78 = *(_QWORD *)&v287;
          goto LABEL_277;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_116;
        case 6u:
          v20 = *(_QWORD *)&v287 == (uint64_t)(*(_QWORD *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_98;
        default:
          goto LABEL_448;
      }
    case 1:
      v19 = 0;
      switch(a1[12])
      {
        case 0u:
          v4.n128_f64[0] = v287;
          v78 = *(_QWORD *)a1;
LABEL_277:
          v20 = v4.n128_f64[0] == (double)v78;
          goto LABEL_98;
        case 1u:
          v4.n128_u64[0] = *(_QWORD *)a1;
          v19 = *(double *)a1 == v287;
          goto LABEL_116;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_116;
        case 6u:
          v185 = v287;
          v186 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
          goto LABEL_280;
        default:
          goto LABEL_448;
      }
    case 2:
      v63 = a1[12];
      if (v63 - 3 < 7 || v63 < 2)
        goto LABEL_115;
      if (v63 != 2)
        goto LABEL_448;
      v65 = *(_QWORD *)a1;
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
        v66 = *(_QWORD *)(v65 + 16);
      else
        v66 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      if (*(char *)(*(_QWORD *)&v287 + 31) < 0)
        v274 = *(_QWORD *)(*(_QWORD *)&v287 + 16);
      else
        v274 = *(unsigned __int8 *)(*(_QWORD *)&v287 + 31);
      if (v66 != v274)
        goto LABEL_115;
      v275 = (_QWORD *)(v65 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) != 0)
        v275 = (_QWORD *)*v275;
      v276 = (_QWORD *)(*(_QWORD *)&v287 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v287 + 31) & 0x80) != 0)
        v276 = (_QWORD *)*v276;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) != 0)
      {
        v20 = memcmp(v275, v276, v66) == 0;
LABEL_98:
        v19 = v20;
      }
      else
      {
        if (!v66)
          goto LABEL_423;
        v277 = v66 - 1;
        do
        {
          v279 = *(unsigned __int8 *)v275;
          v275 = (_QWORD *)((char *)v275 + 1);
          v278 = v279;
          v281 = *(unsigned __int8 *)v276;
          v276 = (_QWORD *)((char *)v276 + 1);
          v280 = v281;
          v7 = v277-- != 0;
          v282 = v7;
          v19 = v278 == v280;
        }
        while (v278 == v280 && (v282 & 1) != 0);
      }
      goto LABEL_116;
    case 3:
      v67 = a1[12];
      if (v67 > 9)
        goto LABEL_448;
      if (v67 != 3)
        goto LABEL_115;
      v69 = *(unint64_t **)(*(_QWORD *)a1 + 8);
      v68 = *(_QWORD **)(*(_QWORD *)a1 + 16);
      v70 = v68 - v69;
      v71 = *(double **)(*(_QWORD *)&v287 + 8);
      if (v70 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v287 + 16) - (_QWORD)v71) >> 3)
        goto LABEL_115;
      if (v68 == v69)
        goto LABEL_423;
      if (v70 <= 1)
        v72 = 1;
      else
        v72 = v68 - v69;
      v4.n128_u64[0] = *v69;
      if (*(double *)v69 != *v71)
        goto LABEL_115;
      v73 = 0;
      v74 = v71 + 1;
      v75 = v69 + 1;
      while (v72 - 1 != v73)
      {
        v4.n128_u64[0] = v75[v73];
        v76 = v74[v73++];
        if (v4.n128_f64[0] != v76)
          goto LABEL_444;
      }
      v73 = v72;
LABEL_444:
      v19 = v73 >= v70;
      goto LABEL_116;
    case 4:
      v21 = a1[12];
      if (v21 > 9)
        goto LABEL_448;
      if (v21 != 4)
        goto LABEL_115;
      v22 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v285, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)&v287 + 8));
      goto LABEL_268;
    case 5:
      v79 = a1[12];
      if (v79 > 9)
        goto LABEL_448;
      if (v79 != 5)
        goto LABEL_115;
      v22 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v285, (uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t **)(*(_QWORD *)&v287 + 8));
      goto LABEL_268;
    case 6:
      v19 = 0;
      switch(a1[12])
      {
        case 0u:
          v20 = *(_QWORD *)a1 == (uint64_t)(*(_QWORD *)&v287 << 8) >> 8 && v288 == 0;
          goto LABEL_98;
        case 1u:
          v186 = *(double *)a1;
          v185 = (double)v288 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v287 << 8) >> 8);
LABEL_280:
          v4.n128_f64[0] = vabdd_f64(v186, v185);
          v19 = v4.n128_f64[0] < 0.0000005;
          goto LABEL_116;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_116;
        case 6u:
          v20 = ((*(_QWORD *)&v287 ^ *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == v288;
          goto LABEL_98;
        default:
          goto LABEL_448;
      }
    case 7:
      v77 = a1[12];
      if (v77 >= 0xA)
        goto LABEL_448;
      v20 = v77 == 7;
      goto LABEL_98;
    case 8:
      v80 = a1[12];
      if (v80 < 8 || v80 == 9)
        goto LABEL_115;
      if (v80 != 8)
        goto LABEL_448;
      v22 = turi::image_type::operator==(*(_QWORD *)a1 + 8, *(_QWORD *)&v287 + 8);
LABEL_268:
      v19 = v22;
      goto LABEL_116;
    case 9:
      v23 = a1[12];
      if (v23 < 9)
        goto LABEL_115;
      if (v23 != 9)
        goto LABEL_448;
      v24 = v287;
      v25 = *(_QWORD **)a1;
      if (*(_QWORD *)&v287 == *(_QWORD *)a1)
        goto LABEL_423;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v25 + 1), *(_QWORD *)&v287 + 8))
      {
LABEL_115:
        v19 = 0;
        goto LABEL_116;
      }
      v27 = (char *)v25[3];
      v26 = (char *)v25[4];
      v28 = v26 - v27;
      if (v26 == v27)
        goto LABEL_423;
      if (!v25[1])
        goto LABEL_423;
      v29 = 1;
      do
      {
        v30 = *(_QWORD *)v27;
        v27 += 8;
        v29 *= v30;
      }
      while (v27 != v26);
      if (!v29)
        goto LABEL_423;
      v284 = 0;
      std::vector<unsigned long>::vector(&v285, v28 >> 3, &v284);
      v31 = v285;
      v32 = v286;
      v33 = **(_QWORD **)(*(_QWORD *)&v24 + 8);
      v34 = (char *)v286 - (char *)v285;
      v35 = v286 - v285;
      v36 = v35 - 1;
      if (v35 <= 1)
        v37 = 1;
      else
        v37 = v286 - v285;
      break;
    default:
      goto LABEL_448;
  }
  do
  {
    if (v32 == v31)
    {
      v45 = 0;
      v4.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v25[1] + 8 * v25[9]);
    }
    else
    {
      v38 = 0;
      v39 = (uint64_t *)v25[6];
      v40 = v31;
      v41 = v37;
      do
      {
        v43 = (uint64_t)*v40++;
        v42 = v43;
        v44 = *v39++;
        v38 += v44 * v42;
        --v41;
      }
      while (v41);
      v45 = 0;
      v4.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v25[1] + 8 * (v25[9] + v38));
      v46 = *(uint64_t **)(*(_QWORD *)&v24 + 48);
      v47 = v31;
      v48 = v37;
      do
      {
        v50 = (uint64_t)*v47++;
        v49 = v50;
        v51 = *v46++;
        v45 += v51 * v49;
        --v48;
      }
      while (v48);
    }
    v52 = *(double *)(v33 + 8 * (*(_QWORD *)(*(_QWORD *)&v24 + 72) + v45));
    v19 = v4.n128_f64[0] == v52;
    if (v4.n128_f64[0] != v52)
      break;
    v53 = v35;
    v54 = v35 - 1;
    if (v34 >= 1)
    {
      v55 = v25[3];
      v56 = (unint64_t)v31[v36] + 1;
      v31[v36] = (void *)v56;
      if (v56 >= *(_QWORD *)(v55 + 8 * v36))
      {
        v57 = v55 - 16;
        v58 = v35;
        v59 = (unint64_t *)((char *)v31 + (v34 & 0xFFFFFFFFFFFFFFF8) - 16);
        while (1)
        {
          v60 = v58 - 1;
          v59[1] = 0;
          if ((uint64_t)(v58 - 1) <= 0)
            break;
          v61 = *v59 + 1;
          *v59-- = v61;
          v62 = *(_QWORD *)(v57 + 8 * v58--);
          if (v61 < v62)
          {
            v54 = v60 - 1;
            v53 = 1;
            goto LABEL_73;
          }
        }
        v19 = 1;
        break;
      }
      v53 = 1;
      v54 = v35 - 1;
    }
LABEL_73:
    ;
  }
  while (v53 && (v54 & 0x8000000000000000) == 0);
  if (v31)
  {
    v286 = v31;
    operator delete(v31);
  }
LABEL_116:
  switch(v289)
  {
    case 2:
      v82 = *(unint64_t **)&v287;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v85 = v287;
        if (v287 != 0.0)
        {
          if (*(char *)(*(_QWORD *)&v287 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v287 + 8));
          v86 = v85;
          v87 = 0x1012C404EF22A49;
          goto LABEL_157;
        }
      }
      break;
    case 3:
      v99 = *(unint64_t **)&v287;
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        v102 = v287;
        if (v287 != 0.0)
        {
          v103 = *(void **)(*(_QWORD *)&v287 + 8);
          if (v103)
          {
            *(_QWORD *)(*(_QWORD *)&v287 + 16) = v103;
            operator delete(v103);
          }
          v86 = v102;
          v87 = 0x1080C409938AC02;
          goto LABEL_157;
        }
      }
      break;
    case 4:
      v88 = *(unint64_t **)&v287;
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        v91 = v287;
        if (v287 != 0.0)
        {
          v285 = (void **)(*(_QWORD *)&v287 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v285);
          goto LABEL_150;
        }
      }
      break;
    case 5:
      v104 = *(unint64_t **)&v287;
      do
      {
        v105 = __ldaxr(v104);
        v106 = v105 - 1;
      }
      while (__stlxr(v106, v104));
      if (!v106)
      {
        v91 = v287;
        if (v287 != 0.0)
        {
          v285 = (void **)(*(_QWORD *)&v287 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v285);
LABEL_150:
          v86 = v91;
          v87 = 0x1020C405E66F15BLL;
          goto LABEL_157;
        }
      }
      break;
    case 8:
      v107 = *(unint64_t **)&v287;
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109)
      {
        v110 = v287;
        if (v287 != 0.0)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v287 + 16));
          v86 = v110;
          v98 = -235920773;
          goto LABEL_156;
        }
      }
      break;
    case 9:
      v92 = *(unint64_t **)&v287;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = v287;
        if (v287 != 0.0)
        {
          v96 = *(void **)(*(_QWORD *)&v287 + 48);
          if (v96)
          {
            *(_QWORD *)(*(_QWORD *)&v287 + 56) = v96;
            operator delete(v96);
          }
          v97 = *(void **)(*(_QWORD *)&v95 + 24);
          if (v97)
          {
            *(_QWORD *)(*(_QWORD *)&v95 + 32) = v97;
            operator delete(v97);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v95 + 8);
          v86 = v95;
          v98 = 2071181815;
LABEL_156:
          v87 = v98 | 0x1030C4000000000;
LABEL_157:
          MEMORY[0x219A19A08](*(_QWORD *)&v86, v87, v4);
        }
      }
      break;
    default:
      break;
  }
  if (!v19)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (a1 != (unsigned __int8 *)a2)
    {
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 5);
      *(_QWORD *)a2 = *(_QWORD *)a1;
      v120 = a1[12];
      *(_BYTE *)(a2 + 12) = v120;
      switch(v120)
      {
        case 2:
          v121 = *(unint64_t **)a2;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 + 1, v121));
          break;
        case 3:
          v127 = *(unint64_t **)a2;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 + 1, v127));
          break;
        case 4:
          v123 = *(unint64_t **)a2;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 + 1, v123));
          break;
        case 5:
          v129 = *(unint64_t **)a2;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 + 1, v129));
          break;
        case 8:
          v131 = *(unint64_t **)a2;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 + 1, v131));
          break;
        case 9:
          v125 = *(unint64_t **)a2;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 + 1, v125));
          break;
        default:
          return;
      }
    }
    return;
  }
  v111 = *(_QWORD *)a1;
  v112 = a1[12];
  v113 = *((_DWORD *)a1 + 2);
  v114 = *(_QWORD *)a1;
  switch(v112)
  {
    case 0u:
      v114 = -(uint64_t)v111;
      goto LABEL_172;
    case 1u:
      v114 = v111 ^ 0x8000000000000000;
LABEL_172:
      *(_BYTE *)(a2 + 12) = v112;
      *(_QWORD *)a2 = v114;
      *(_DWORD *)(a2 + 8) = v113;
      goto LABEL_293;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 8u:
    case 9u:
      do
        v115 = __ldaxr((unint64_t *)v111);
      while (__stlxr(v115 + 1, (unint64_t *)v111));
      v114 = v111;
      switch(v112)
      {
        case 2u:
          if (*(_QWORD *)v111 == 1)
            goto LABEL_203;
          v116 = operator new();
          *(_QWORD *)v116 = *(_QWORD *)v111;
          v117 = (std::string *)(v116 + 8);
          v118 = (void **)(v111 + 8);
          if (*(char *)(v111 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v117, *(const std::string::value_type **)(v111 + 8), *(_QWORD *)(v111 + 16));
          }
          else
          {
            v119 = *(_OWORD *)v118;
            *(_QWORD *)(v116 + 24) = *(_QWORD *)(v111 + 24);
            *(_OWORD *)&v117->__r_.__value_.__l.__data_ = v119;
          }
          *(_QWORD *)v116 = 1;
          do
          {
            v187 = __ldaxr((unint64_t *)v111);
            v188 = v187 - 1;
          }
          while (__stlxr(v188, (unint64_t *)v111));
          v114 = v116;
          if (v188)
            goto LABEL_288;
          v135 = 0x1012C404EF22A49;
          if (*(char *)(v111 + 31) < 0)
            operator delete(*v118);
          goto LABEL_287;
        case 3u:
          if (*(_QWORD *)v111 == 1)
          {
            v114 = v111;
          }
          else
          {
            v138 = (_QWORD *)operator new();
            *v138 = *(_QWORD *)v111;
            v138[2] = 0;
            v138[3] = 0;
            v138[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v138 + 1, *(const void **)(v111 + 8), *(_QWORD *)(v111 + 16), (uint64_t)(*(_QWORD *)(v111 + 16) - *(_QWORD *)(v111 + 8)) >> 3);
            *v138 = 1;
            do
            {
              v139 = __ldaxr((unint64_t *)v111);
              v140 = v139 - 1;
            }
            while (__stlxr(v140, (unint64_t *)v111));
            v114 = (unint64_t)v138;
            if (!v140)
            {
              v141 = *(void **)(v111 + 8);
              if (v141)
              {
                *(_QWORD *)(v111 + 16) = v141;
                operator delete(v141);
              }
              MEMORY[0x219A19A08](v111, 0x1080C409938AC02);
              v114 = (unint64_t)v138;
            }
          }
          v142 = *(double **)(v114 + 8);
          v143 = *(_QWORD *)(v114 + 16) - (_QWORD)v142;
          if (!v143)
            goto LABEL_244;
          v144 = v143 >> 3;
          if (v144 <= 1)
            v144 = 1;
          do
          {
            v4.n128_f64[0] = -*v142;
            *v142++ = v4.n128_f64[0];
            --v144;
          }
          while (v144);
          goto LABEL_289;
        case 4u:
          if (*(_QWORD *)v111 == 1)
            goto LABEL_203;
          v116 = operator new();
          *(_QWORD *)v116 = *(_QWORD *)v111;
          *(_QWORD *)(v116 + 16) = 0;
          *(_QWORD *)(v116 + 24) = 0;
          *(_QWORD *)(v116 + 8) = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(v116 + 8), *(uint64_t **)(v111 + 8), *(uint64_t **)(v111 + 16), (uint64_t)(*(_QWORD *)(v111 + 16) - *(_QWORD *)(v111 + 8)) >> 4);
          *(_QWORD *)v116 = 1;
          do
          {
            v133 = __ldaxr((unint64_t *)v111);
            v134 = v133 - 1;
          }
          while (__stlxr(v134, (unint64_t *)v111));
          v114 = v116;
          if (v134)
            goto LABEL_288;
          v135 = 0x1020C405E66F15BLL;
          v285 = (void **)(v111 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v285);
          goto LABEL_287;
        case 5u:
          if (*(_QWORD *)v111 == 1)
            goto LABEL_203;
          v116 = operator new();
          *(_QWORD *)v116 = *(_QWORD *)v111;
          *(_QWORD *)(v116 + 16) = 0;
          *(_QWORD *)(v116 + 24) = 0;
          *(_QWORD *)(v116 + 8) = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((_QWORD *)(v116 + 8), *(uint64_t **)(v111 + 8), *(uint64_t **)(v111 + 16), (uint64_t)(*(_QWORD *)(v111 + 16) - *(_QWORD *)(v111 + 8)) >> 5);
          *(_QWORD *)v116 = 1;
          do
          {
            v136 = __ldaxr((unint64_t *)v111);
            v137 = v136 - 1;
          }
          while (__stlxr(v137, (unint64_t *)v111));
          v114 = v116;
          if (v137)
            goto LABEL_288;
          v135 = 0x1020C405E66F15BLL;
          v285 = (void **)(v111 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v285);
          goto LABEL_287;
        case 6u:
        case 7u:
          goto LABEL_288;
        case 8u:
          if (*(_QWORD *)v111 == 1)
          {
LABEL_203:
            v114 = v111;
          }
          else
          {
            v116 = operator new();
            *(_QWORD *)v116 = *(_QWORD *)v111;
            v176 = *(_QWORD *)(v111 + 16);
            *(_QWORD *)(v116 + 8) = *(_QWORD *)(v111 + 8);
            *(_QWORD *)(v116 + 16) = v176;
            if (v176)
            {
              v177 = (unsigned int *)(v176 + 8);
              do
                v178 = __ldxr(v177);
              while (__stxr(v178 + 1, v177));
            }
            v179 = *(_OWORD *)(v111 + 24);
            v180 = *(_OWORD *)(v111 + 40);
            *(_OWORD *)(v116 + 56) = *(_OWORD *)(v111 + 56);
            *(_OWORD *)(v116 + 40) = v180;
            *(_OWORD *)(v116 + 24) = v179;
            *(_QWORD *)v116 = 1;
            do
            {
              v181 = __ldaxr((unint64_t *)v111);
              v182 = v181 - 1;
            }
            while (__stlxr(v182, (unint64_t *)v111));
            v114 = v116;
            if (!v182)
            {
              v135 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)(v111 + 16));
LABEL_287:
              MEMORY[0x219A19A08](v111, v135);
              v114 = v116;
            }
          }
          goto LABEL_288;
        case 9u:
          if (*(_QWORD *)v111 == 1)
          {
            v114 = v111;
          }
          else
          {
            v145 = (_QWORD *)operator new();
            *v145 = *(_QWORD *)v111;
            turi::flexible_type_impl::ndarray<double>::ndarray(v145 + 1, v111 + 8);
            *v145 = 1;
            do
            {
              v146 = __ldaxr((unint64_t *)v111);
              v147 = v146 - 1;
            }
            while (__stlxr(v147, (unint64_t *)v111));
            v114 = (unint64_t)v145;
            if (!v147)
            {
              v148 = *(void **)(v111 + 48);
              if (v148)
              {
                *(_QWORD *)(v111 + 56) = v148;
                operator delete(v148);
              }
              v149 = *(void **)(v111 + 24);
              if (v149)
              {
                *(_QWORD *)(v111 + 32) = v149;
                operator delete(v149);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v111 + 8);
              MEMORY[0x219A19A08](v111, 0x1030C407B73B9F7);
              v114 = (unint64_t)v145;
            }
          }
          v151 = *(uint64_t **)(v114 + 24);
          v150 = *(uint64_t **)(v114 + 32);
          if (v150 == v151 || !*(_QWORD *)(v114 + 8))
          {
LABEL_244:
            *(_BYTE *)(a2 + 12) = v112;
            v175 = (unsigned __int8 *)(a2 + 12);
            *(_QWORD *)a2 = v114;
            *(_DWORD *)(a2 + 8) = v113;
            goto LABEL_291;
          }
          v152 = 1;
          do
          {
            v153 = *v151++;
            v152 *= v153;
          }
          while (v151 != v150);
          if (!v152)
            goto LABEL_289;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v114 + 8));
          v154 = (uint64_t)(*(_QWORD *)(v114 + 32) - *(_QWORD *)(v114 + 24)) >> 3;
          v284 = 0;
          std::vector<unsigned long>::vector(&v285, v154, &v284);
          v155 = v285;
          v156 = v286;
          break;
        default:
          goto LABEL_448;
      }
      break;
    case 6u:
    case 7u:
LABEL_288:
      turi::flexible_type_fail(0);
      goto LABEL_289;
    default:
      goto LABEL_448;
  }
  while (1)
  {
    v157 = 0;
    v158 = (char *)v156 - (char *)v155;
    if (v158)
    {
      v159 = v158 >> 3;
      v160 = *(uint64_t **)(v114 + 48);
      if (v159 <= 1)
        v159 = 1;
      do
      {
        v162 = (uint64_t)*v155++;
        v161 = v162;
        v163 = *v160++;
        v157 += v163 * v161;
        --v159;
      }
      while (v159);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v114 + 8));
    v164 = *(_QWORD *)(v114 + 72) + v157;
    v165 = **(_QWORD **)(v114 + 8);
    v4.n128_f64[0] = -*(double *)(v165 + 8 * v164);
    *(_QWORD *)(v165 + 8 * v164) = v4.n128_u64[0];
    v155 = v285;
    v156 = v286;
    v166 = v286 - v285;
    v167 = v166 - 1;
    if ((char *)v286 - (char *)v285 < 1)
      goto LABEL_240;
    v168 = *(_QWORD *)(v114 + 24);
    v169 = (char *)v285[v167] + 1;
    v285[v167] = v169;
    if ((unint64_t)v169 >= *(_QWORD *)(v168 + 8 * v167))
      break;
LABEL_239:
    v166 = 1;
LABEL_240:
    if (v167 < 0 || !v166)
      goto LABEL_242;
  }
  v170 = (unint64_t *)&v155[v166 - 2];
  v171 = v168 - 16;
  while (1)
  {
    v172 = v166 - 1;
    v170[1] = 0;
    if (v166 - 1 <= 0)
      break;
    v173 = *v170 + 1;
    *v170-- = v173;
    v174 = *(_QWORD *)(v171 + 8 * v166--);
    if (v173 < v174)
    {
      v167 = v172 - 1;
      goto LABEL_239;
    }
  }
LABEL_242:
  if (v155)
  {
    v286 = v155;
    operator delete(v155);
  }
LABEL_289:
  *(_BYTE *)(a2 + 12) = v112;
  v175 = (unsigned __int8 *)(a2 + 12);
  *(_QWORD *)a2 = v114;
  *(_DWORD *)(a2 + 8) = v113;
  if (v112 > 9)
  {
LABEL_293:
    v189 = v112;
  }
  else
  {
    v189 = v112;
    if (((1 << v112) & 0x33C) != 0)
    {
      do
LABEL_291:
        v190 = __ldaxr((unint64_t *)v114);
      while (__stlxr(v190 + 1, (unint64_t *)v114));
      v189 = *v175;
    }
  }
  switch(v189)
  {
    case 0u:
      v191 = *(_QWORD *)a2 + 1;
      goto LABEL_343;
    case 1u:
      v4.n128_f64[0] = *(double *)a2 + 1.0;
      *(_QWORD *)a2 = v4.n128_u64[0];
      goto LABEL_373;
    case 2u:
      v232 = *(unint64_t **)a2;
      if (**(_QWORD **)a2 == 1)
        goto LABEL_372;
      v233 = (_QWORD *)operator new();
      *v233 = *v232;
      v234 = (std::string *)(v233 + 1);
      v235 = (void **)(v232 + 1);
      if (*((char *)v232 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v234, (const std::string::value_type *)v232[1], v232[2]);
      }
      else
      {
        v236 = *(_OWORD *)v235;
        v233[3] = v232[3];
        *(_OWORD *)&v234->__r_.__value_.__l.__data_ = v236;
      }
      *(_QWORD *)a2 = v233;
      *v233 = 1;
      do
      {
        v255 = __ldaxr(v232);
        v256 = v255 - 1;
      }
      while (__stlxr(v256, v232));
      if (v256)
        goto LABEL_372;
      if (*((char *)v232 + 31) < 0)
        operator delete(*v235);
      v244 = v232;
      v245 = 0x1012C404EF22A49;
      goto LABEL_371;
    case 3u:
      v192 = *(unint64_t **)a2;
      if (**(_QWORD **)a2 != 1)
      {
        v193 = (_QWORD *)operator new();
        *v193 = *v192;
        v193[2] = 0;
        v193[3] = 0;
        v193[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v193 + 1, (const void *)v192[1], v192[2], (uint64_t)(v192[2] - v192[1]) >> 3);
        *(_QWORD *)a2 = v193;
        *v193 = 1;
        do
        {
          v194 = __ldaxr(v192);
          v195 = v194 - 1;
        }
        while (__stlxr(v195, v192));
        if (!v195)
        {
          v196 = (void *)v192[1];
          if (v196)
          {
            v192[2] = (unint64_t)v196;
            operator delete(v196);
          }
          MEMORY[0x219A19A08](v192, 0x1080C409938AC02);
        }
      }
      v197 = *(double **)(*(_QWORD *)a2 + 8);
      v198 = *(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v197;
      if (v198)
      {
        v199 = v198 >> 3;
        if (v199 <= 1)
          v199 = 1;
        v4.n128_u64[0] = 1.0;
        do
        {
          *v197 = *v197 + 1.0;
          ++v197;
          --v199;
        }
        while (v199);
      }
      goto LABEL_373;
    case 4u:
      v237 = *(unint64_t **)a2;
      if (**(_QWORD **)a2 == 1)
        goto LABEL_372;
      v238 = (_QWORD *)operator new();
      *v238 = *v237;
      v238[2] = 0;
      v238[3] = 0;
      v238[1] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v238 + 1, (uint64_t *)v237[1], (uint64_t *)v237[2], (uint64_t)(v237[2] - v237[1]) >> 4);
      *(_QWORD *)a2 = v238;
      *v238 = 1;
      do
      {
        v239 = __ldaxr(v237);
        v240 = v239 - 1;
      }
      while (__stlxr(v240, v237));
      if (v240)
        goto LABEL_372;
      v285 = (void **)(v237 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v285);
      goto LABEL_355;
    case 5u:
      v237 = *(unint64_t **)a2;
      if (**(_QWORD **)a2 == 1)
        goto LABEL_372;
      v241 = (_QWORD *)operator new();
      *v241 = *v237;
      v241[2] = 0;
      v241[3] = 0;
      v241[1] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v241 + 1, (uint64_t *)v237[1], (uint64_t *)v237[2], (uint64_t)(v237[2] - v237[1]) >> 5);
      *(_QWORD *)a2 = v241;
      *v241 = 1;
      do
      {
        v242 = __ldaxr(v237);
        v243 = v242 - 1;
      }
      while (__stlxr(v243, v237));
      if (v243)
        goto LABEL_372;
      v285 = (void **)(v237 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v285);
LABEL_355:
      v244 = v237;
      v245 = 0x1020C405E66F15BLL;
      goto LABEL_371;
    case 6u:
      v191 = *(_QWORD *)a2 & 0xFF00000000000000 | (*(_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFLL;
LABEL_343:
      *(_QWORD *)a2 = v191;
      goto LABEL_373;
    case 7u:
      goto LABEL_372;
    case 8u:
      v246 = *(unint64_t **)a2;
      if (**(_QWORD **)a2 == 1)
        goto LABEL_372;
      v247 = operator new();
      *(_QWORD *)v247 = *v246;
      v248 = v246[2];
      *(_QWORD *)(v247 + 8) = v246[1];
      *(_QWORD *)(v247 + 16) = v248;
      if (v248)
      {
        v249 = (unsigned int *)(v248 + 8);
        do
          v250 = __ldxr(v249);
        while (__stxr(v250 + 1, v249));
      }
      v251 = *(_OWORD *)(v246 + 3);
      v252 = *(_OWORD *)(v246 + 5);
      *(_OWORD *)(v247 + 56) = *(_OWORD *)(v246 + 7);
      *(_OWORD *)(v247 + 40) = v252;
      *(_OWORD *)(v247 + 24) = v251;
      *(_QWORD *)a2 = v247;
      *(_QWORD *)v247 = 1;
      do
      {
        v253 = __ldaxr(v246);
        v254 = v253 - 1;
      }
      while (__stlxr(v254, v246));
      if (v254)
        goto LABEL_372;
      boost::detail::shared_count::~shared_count((unsigned int **)v246 + 2);
      v244 = v246;
      v245 = 0x1030C40F1F0227BLL;
LABEL_371:
      MEMORY[0x219A19A08](v244, v245);
LABEL_372:
      turi::flexible_type_fail(0);
      goto LABEL_373;
    case 9u:
      v200 = *(unint64_t **)a2;
      if (**(_QWORD **)a2 != 1)
      {
        v201 = (_QWORD *)operator new();
        *v201 = *v200;
        turi::flexible_type_impl::ndarray<double>::ndarray(v201 + 1, (uint64_t)(v200 + 1));
        *(_QWORD *)a2 = v201;
        *v201 = 1;
        do
        {
          v202 = __ldaxr(v200);
          v203 = v202 - 1;
        }
        while (__stlxr(v203, v200));
        if (!v203)
        {
          v204 = (void *)v200[6];
          if (v204)
          {
            v200[7] = (unint64_t)v204;
            operator delete(v204);
          }
          v205 = (void *)v200[3];
          if (v205)
          {
            v200[4] = (unint64_t)v205;
            operator delete(v205);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v200 + 1));
          MEMORY[0x219A19A08](v200, 0x1030C407B73B9F7);
        }
      }
      v206 = *(uint64_t **)a2;
      v208 = *(uint64_t **)(*(_QWORD *)a2 + 24);
      v207 = *(uint64_t **)(*(_QWORD *)a2 + 32);
      if (v207 == v208)
        goto LABEL_373;
      if (!v206[1])
        goto LABEL_373;
      v209 = 1;
      do
      {
        v210 = *v208++;
        v209 *= v210;
      }
      while (v208 != v207);
      if (!v209)
        goto LABEL_373;
      turi::flexible_type_impl::ndarray<double>::ensure_unique(v206 + 1);
      v211 = (v206[4] - v206[3]) >> 3;
      v284 = 0;
      std::vector<unsigned long>::vector(&v285, v211, &v284);
      v212 = v285;
      v213 = v286;
      break;
    default:
      goto LABEL_448;
  }
  do
  {
    v214 = 0;
    v215 = (char *)v213 - (char *)v212;
    if (v215)
    {
      v216 = v215 >> 3;
      v217 = (uint64_t *)v206[6];
      if (v216 <= 1)
        v216 = 1;
      do
      {
        v219 = (uint64_t)*v212++;
        v218 = v219;
        v220 = *v217++;
        v214 += v220 * v218;
        --v216;
      }
      while (v216);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v206 + 1);
    v221 = v206[9] + v214;
    v222 = *(_QWORD *)v206[1];
    v4.n128_f64[0] = *(double *)(v222 + 8 * v221) + 1.0;
    *(_QWORD *)(v222 + 8 * v221) = v4.n128_u64[0];
    v212 = v285;
    v213 = v286;
    v223 = v286 - v285;
    v224 = v223 - 1;
    if ((char *)v286 - (char *)v285 >= 1)
    {
      v225 = v206[3];
      v226 = (char *)v285[v224] + 1;
      v285[v224] = v226;
      if ((unint64_t)v226 >= *(_QWORD *)(v225 + 8 * v224))
      {
        v227 = (unint64_t *)&v212[v223 - 2];
        v228 = v225 - 16;
        while (1)
        {
          v229 = v223 - 1;
          v227[1] = 0;
          if (v223 - 1 <= 0)
            goto LABEL_338;
          v230 = *v227 + 1;
          *v227-- = v230;
          v231 = *(_QWORD *)(v228 + 8 * v223--);
          if (v230 < v231)
          {
            v224 = v229 - 1;
            break;
          }
        }
      }
      v223 = 1;
    }
  }
  while ((v224 & 0x8000000000000000) == 0 && v223);
  if (!v212)
    goto LABEL_373;
LABEL_338:
  v286 = v212;
  operator delete(v212);
LABEL_373:
  switch(v112)
  {
    case 2u:
      do
        v257 = __ldaxr((unint64_t *)v114);
      while (__stlxr(v257 - 1, (unint64_t *)v114));
      if (v114 && v257 == 1)
      {
        if (*(char *)(v114 + 31) < 0)
          operator delete(*(void **)(v114 + 8));
        v258 = v114;
        v259 = 0x1012C404EF22A49;
        goto LABEL_408;
      }
      break;
    case 3u:
      do
        v265 = __ldaxr((unint64_t *)v114);
      while (__stlxr(v265 - 1, (unint64_t *)v114));
      if (v114 && v265 == 1)
      {
        v266 = *(void **)(v114 + 8);
        if (v266)
        {
          *(_QWORD *)(v114 + 16) = v266;
          operator delete(v266);
        }
        v258 = v114;
        v259 = 0x1080C409938AC02;
        goto LABEL_408;
      }
      break;
    case 4u:
      do
        v260 = __ldaxr((unint64_t *)v114);
      while (__stlxr(v260 - 1, (unint64_t *)v114));
      if (v114 && v260 == 1)
      {
        v285 = (void **)(v114 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v285);
        goto LABEL_402;
      }
      break;
    case 5u:
      do
        v267 = __ldaxr((unint64_t *)v114);
      while (__stlxr(v267 - 1, (unint64_t *)v114));
      if (v114 && v267 == 1)
      {
        v285 = (void **)(v114 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v285);
LABEL_402:
        v258 = v114;
        v259 = 0x1020C405E66F15BLL;
        goto LABEL_408;
      }
      break;
    case 8u:
      do
        v268 = __ldaxr((unint64_t *)v114);
      while (__stlxr(v268 - 1, (unint64_t *)v114));
      if (v114 && v268 == 1)
      {
        boost::detail::shared_count::~shared_count((unsigned int **)(v114 + 16));
        v258 = v114;
        v264 = -235920773;
        goto LABEL_407;
      }
      break;
    case 9u:
      do
        v261 = __ldaxr((unint64_t *)v114);
      while (__stlxr(v261 - 1, (unint64_t *)v114));
      if (v114 && v261 == 1)
      {
        v262 = *(void **)(v114 + 48);
        if (v262)
        {
          *(_QWORD *)(v114 + 56) = v262;
          operator delete(v262);
        }
        v263 = *(void **)(v114 + 24);
        if (v263)
        {
          *(_QWORD *)(v114 + 32) = v263;
          operator delete(v263);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v114 + 8);
        v258 = v114;
        v264 = 2071181815;
LABEL_407:
        v259 = v264 | 0x1030C4000000000;
LABEL_408:
        MEMORY[0x219A19A08](v258, v259, v4);
      }
      break;
    default:
      return;
  }
}

void sub_2185A2BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;

  v18 = v16;
  MEMORY[0x219A19A08](v18, 0x1012C404EF22A49);
  do
    v20 = __ldaxr((unint64_t *)v17);
  while (__stlxr(v20 - 1, (unint64_t *)v17));
  if (v17 && v20 == 1)
  {
    if (*(char *)(v17 + 31) < 0)
      operator delete(*(void **)(v17 + 8));
    MEMORY[0x219A19A08](v17, 0x1012C404EF22A49);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24D949F00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24D949F00;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1::operator()(a1 + 8, *a2, *a3);
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1::operator()(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  turi::supervised::supervised_learning_model_base *v49;
  __n128 v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  BOOL v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int64_t v68;
  char *v69;
  uint64_t v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v112;
  void *v114;
  void *v115;
  unsigned int v116;
  unint64_t v117;
  void *v119;
  unint64_t v120;
  unint64_t v122;
  int v124;
  _QWORD *v125;
  _QWORD *v126;
  char v127;
  uint64_t v128;
  double *p_first;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  const char *v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  void *v140;
  _QWORD *v141;
  unint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  unint64_t v145;
  void *v146;
  void *v147;
  std::pair<unsigned long, const char *> *v148;
  double v149;
  double v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  char *v154;
  const std::string *v155;
  double v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int *v159;
  unsigned int v160;
  __int128 v161;
  __int128 v162;
  float v163;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  char *v168;
  const std::string *v169;
  double v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int v174;
  __int128 v175;
  __int128 v176;
  _QWORD *v177;
  double *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  unsigned int **v186;
  unsigned int **v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int **v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int **v196;
  unsigned int *v197;
  unsigned int *v198;
  unsigned int v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  unsigned int **v203;
  unsigned int *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int **v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t *v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t *v228;
  void *v229;
  void *v230;
  unsigned int v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t *v235;
  void *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t *v243;
  uint64_t v244;
  BOOL v245;
  int v246;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  std::vector<std::pair<unsigned long, const char *>>::pointer v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  _QWORD *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  _QWORD *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  _QWORD *v276;
  void *v277;
  void *v278;
  unsigned int v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  _QWORD *v283;
  void *v284;
  void *v285;
  unsigned int v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  void *v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t v294;
  _QWORD *v295;
  void *v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  BOOL v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  BOOL v328;
  unint64_t v329;
  unint64_t v330;
  BOOL v331;
  void *v332;
  void *v333;
  unsigned int v334;
  unint64_t v335;
  unint64_t v336;
  BOOL v337;
  void *v338;
  unint64_t v339;
  unint64_t v340;
  BOOL v341;
  unint64_t v342;
  unint64_t v343;
  BOOL v344;
  _QWORD *v345;
  unint64_t v346;
  unint64_t v347;
  _QWORD *v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  std::bad_alloc *exception;
  std::bad_alloc *v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int *v357;
  unsigned int v358;
  __int128 v359;
  __int128 v360;
  unint64_t v361;
  unint64_t v362;
  _QWORD *v363;
  std::string *v364;
  void **v365;
  std::runtime_error *v366;
  std::string *v367;
  __int128 v368;
  std::runtime_error *v369;
  std::string *v370;
  __int128 v371;
  __int128 v372;
  unint64_t v373;
  unint64_t v374;
  char v375;
  turi::supervised::supervised_learning_model_base *v376;
  uint64_t v377;
  char v379[8];
  uint64_t v380;
  uint64_t v381;
  void **v382[16];
  uint64_t v383;
  unsigned __int8 v384;
  char v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  __int128 v390;
  __int128 v391;
  __int16 v392;
  uint64_t v393;
  uint64_t v394[3];
  std::vector<std::pair<unsigned long, const char *>> v395;
  char v396[8];
  __int128 v397;
  __int128 v398;
  unint64_t v399;
  void *v400;
  uint64_t v401;
  void **v402;
  unsigned int *v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  std::string v407;
  size_t __idx;
  _BYTE v409[24];
  _BYTE *v410;
  _BYTE v411[24];
  _BYTE *v412;
  _BYTE v413[24];
  _BYTE *v414;
  __int128 v415;
  __int128 v416;
  __int16 v417;
  void *v418;
  void *v419;
  uint64_t v420;

  v420 = *MEMORY[0x24BDAC8D0];
  v376 = *(turi::supervised::supervised_learning_model_base **)(a1 + 32);
  v5 = *(unint64_t **)a1;
  v401 = 0;
  v400 = 0;
  v6 = *v5;
  if (*v5)
  {
    if (v6 >> 61 || (v7 = malloc_type_malloc(8 * v6, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v354 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v354, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v8 = a1;
    v5 = *(unint64_t **)a1;
    v400 = v7;
  }
  else
  {
    v8 = a1;
  }
  v401 = v6;
  v9 = *v5;
  v396[0] = 0;
  v397 = 0u;
  v398 = 0u;
  v399 = v9;
  turi::sframe::get_output_iterator(*(size_t **)(v8 + 8), a2, (uint64_t)v409);
  memset(&v395, 0, sizeof(v395));
  std::vector<std::pair<unsigned long,char const*>>::resize(&v395, **(_QWORD **)(v8 + 16));
  memset(v394, 0, sizeof(v394));
  std::vector<turi::flexible_type>::resize(v394, 3uLL);
  turi::ml_data::get_iterator(*(turi::ml_data **)(a1 + 24), a2, a3, (uint64_t)v382);
  if (v388 == v387)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    LOBYTE(v11) = 0;
    v10 = 0;
    v12 = a1;
    do
    {
      v13 = *(_QWORD *)(*((_QWORD *)v376 + 47) + 64);
      if (v13 <= 3 * turi::supervised::supervised_learning_model_base::num_features(v376))
      {
        v63 = v390;
        if (*((_QWORD *)&v390 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        v66 = v391;
        v67 = v392;
        v68 = v401;
        v69 = (char *)v400;
        if (v401 >= 0)
          v70 = v401;
        else
          v70 = v401 + 1;
        v71 = v70 & 0xFFFFFFFFFFFFFFFELL;
        if (v401 >= 2)
        {
          v72 = 2;
          if (v71 > 2)
            v72 = v70 & 0xFFFFFFFFFFFFFFFELL;
          bzero(v400, ((8 * v72 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if (v71 < v68)
          bzero(&v69[16 * (v70 >> 1)], 8 * v68 - 16 * (v70 >> 1));
        v12 = a1;
        if (v67)
        {
          v73 = *(_QWORD *)(v63 + 56);
          if (v73)
          {
            v74 = 0;
            v75 = 0;
            v76 = (unint64_t *)(*(_QWORD *)(v63 + 96) + 8 * v66 + 8 * (*(_BYTE *)(v63 + 18) == 0));
            v77 = *(_QWORD *)(v63 + 72);
            v78 = v400;
            while (2)
            {
              v79 = *(_QWORD *)(v77 + 16 * v74);
              v80 = *(_QWORD *)(v79 + 64);
              switch(*(_DWORD *)(v79 + 24))
              {
                case 0:
                  if (v80)
                    v78[v75] = *v76;
                  ++v76;
                  goto LABEL_102;
                case 1:
                  v89 = *v76++;
                  v88 = v89;
                  v90 = v75 - 1;
                  if (v89 < v80 && v88 != 0)
                    v78[v90 + v88] = 0x3FF0000000000000;
                  goto LABEL_116;
                case 2:
                  v81 = *(_QWORD *)(v79 + 72);
                  if (!v81)
                    goto LABEL_102;
                  v82 = 0;
                  v83 = 0;
                  v84 = (char *)v400 + 8 * v75;
                  do
                  {
                    if (v83 < v80)
                      *(_QWORD *)&v84[8 * v83] = v76[v83];
                    ++v83;
                    v82 -= 8;
                  }
                  while (v81 != v83);
                  goto LABEL_101;
                case 3:
                  v93 = *v76++;
                  v92 = v93;
                  v90 = v75 - 1;
                  if (v93)
                  {
                    v94 = v400;
                    do
                    {
                      v95 = *v76;
                      if (*v76 < v80 && v95 != 0)
                        v94[v90 + v95] = 0x3FF0000000000000;
                      ++v76;
                      --v92;
                    }
                    while (v92);
                  }
LABEL_116:
                  v75 = v90 + v80;
                  goto LABEL_125;
                case 4:
                  v99 = *v76;
                  v97 = v76 + 1;
                  v98 = v99;
                  if (v99)
                  {
                    v100 = v400;
                    v101 = v97;
                    do
                    {
                      v103 = *v101;
                      v101 += 2;
                      v102 = v103;
                      if (v103 < v80)
                        v100[v102 + v75] = v97[1];
                      v97 = v101;
                      --v98;
                    }
                    while (v98);
                  }
                  else
                  {
                    v101 = v97;
                  }
                  v75 += v80;
                  v76 = v101;
                  goto LABEL_125;
                case 7:
                  v85 = *(_QWORD *)(v79 + 72);
                  if (!v85)
                    goto LABEL_102;
                  v82 = 0;
                  v86 = 0;
                  v87 = (char *)v400 + 8 * v75;
                  do
                  {
                    if (v86 < v80)
                      *(_QWORD *)&v87[8 * v86] = v76[v86];
                    ++v86;
                    v82 -= 8;
                  }
                  while (v85 != v86);
LABEL_101:
                  v76 = (unint64_t *)((char *)v76 - v82);
LABEL_102:
                  v75 += v80;
LABEL_125:
                  if (++v74 == v73)
                    break;
                  continue;
                default:
                  goto LABEL_125;
              }
              break;
            }
          }
        }
        v49 = v376;
        if (*((_QWORD *)&v63 + 1))
        {
          v104 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v63 + 1) + 16))(*((_QWORD *)&v63 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v63 + 1));
          }
        }
        *((_QWORD *)v400 + **(_QWORD **)a1 - 1) = 0x3FF0000000000000;
        (*(void (**)(__int128 *__return_ptr, turi::supervised::supervised_learning_model_base *, void **, _QWORD))(*(_QWORD *)v376 + 88))(&v415, v376, &v400, *(_QWORD *)(a1 + 40));
        switch((char)v11)
        {
          case 2:
            do
            {
              v106 = __ldaxr((unint64_t *)v10);
              v52 = --v106 == 0;
            }
            while (__stlxr(v106, (unint64_t *)v10));
LABEL_133:
            if (v52 && v10 != 0)
            {
              if (*(char *)(v10 + 31) < 0)
                operator delete(*(void **)(v10 + 8));
              v108 = v10;
              v109 = 0x1012C404EF22A49;
              goto LABEL_178;
            }
            break;
          case 3:
            do
            {
              v117 = __ldaxr((unint64_t *)v10);
              v58 = --v117 == 0;
            }
            while (__stlxr(v117, (unint64_t *)v10));
LABEL_157:
            if (v58 && v10 != 0)
            {
              v119 = *(void **)(v10 + 8);
              if (v119)
              {
                *(_QWORD *)(v10 + 16) = v119;
                operator delete(v119);
              }
              v108 = v10;
              v109 = 0x1080C409938AC02;
              goto LABEL_178;
            }
            break;
          case 4:
            do
            {
              v110 = __ldaxr((unint64_t *)v10);
              v54 = --v110 == 0;
            }
            while (__stlxr(v110, (unint64_t *)v10));
LABEL_141:
            if (v54 && v10 != 0)
            {
              v402 = (void **)(v10 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v402);
              goto LABEL_170;
            }
            break;
          case 5:
            do
            {
              v120 = __ldaxr((unint64_t *)v10);
              v60 = --v120 == 0;
            }
            while (__stlxr(v120, (unint64_t *)v10));
LABEL_165:
            if (v60 && v10 != 0)
            {
              v402 = (void **)(v10 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v402);
LABEL_170:
              v108 = v10;
              v109 = 0x1020C405E66F15BLL;
              goto LABEL_178;
            }
            break;
          case 8:
            do
            {
              v122 = __ldaxr((unint64_t *)v10);
              v62 = --v122 == 0;
            }
            while (__stlxr(v122, (unint64_t *)v10));
LABEL_172:
            if (v62 && v10 != 0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v10 + 16));
              v108 = v10;
              v116 = -235920773;
              goto LABEL_177;
            }
            break;
          case 9:
            do
            {
              v112 = __ldaxr((unint64_t *)v10);
              v56 = --v112 == 0;
            }
            while (__stlxr(v112, (unint64_t *)v10));
LABEL_147:
            if (v56 && v10 != 0)
            {
              v114 = *(void **)(v10 + 48);
              if (v114)
              {
                *(_QWORD *)(v10 + 56) = v114;
                operator delete(v114);
              }
              v115 = *(void **)(v10 + 24);
              if (v115)
              {
                *(_QWORD *)(v10 + 32) = v115;
                operator delete(v115);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10 + 8);
              v108 = v10;
              v116 = 2071181815;
LABEL_177:
              v109 = v116 | 0x1030C4000000000;
LABEL_178:
              MEMORY[0x219A19A08](v108, v109);
            }
            break;
          default:
            break;
        }
      }
      else
      {
        v375 = v11;
        v14 = v390;
        v415 = v390;
        if (*((_QWORD *)&v390 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v417 = v392;
        v416 = v391;
        *(_QWORD *)&v398 = 0;
        if ((_BYTE)v392)
        {
          v17 = *(_QWORD *)(v14 + 56);
          if (v17)
          {
            v18 = 0;
            v19 = 0;
            v20 = (uint64_t *)(*(_QWORD *)(v14 + 96) + 8 * v416 + 8 * (*(_BYTE *)(v14 + 18) == 0));
            v377 = *(_QWORD *)(v14 + 56);
            do
            {
              v21 = *(_QWORD *)(*(_QWORD *)(v14 + 72) + 16 * v18);
              v22 = *(_QWORD *)(v21 + 64);
              switch(*(_DWORD *)(v21 + 24))
              {
                case 0:
                  v23 = *v20++;
                  v24 = v23;
                  if (v22)
                  {
                    v402 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v397, (int)v19, &v402) = v24;
                  }
                  v19 += v22;
                  break;
                case 1:
                  v35 = *v20++;
                  v34 = v35;
                  if (v35 < v22 && v34 != 0)
                  {
                    v402 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v397, (int)v34 + (int)v19 - 1, &v402) = 0x3FF0000000000000;
                  }
                  v19 = v19 + v22 - 1;
                  break;
                case 2:
                  v25 = *(_QWORD *)(v21 + 72);
                  if (!v25)
                    goto LABEL_32;
                  v26 = 0;
                  v27 = 0;
                  v28 = v19 << 32;
                  do
                  {
                    if (v27 < v22)
                    {
                      v29 = v20[v27];
                      v402 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v397, v28 >> 32, &v402) = v29;
                    }
                    ++v27;
                    v28 += 0x100000000;
                    v26 -= 8;
                  }
                  while (v25 != v27);
                  goto LABEL_31;
                case 3:
                  v38 = *v20++;
                  for (i = v38; i; --i)
                  {
                    v39 = *v20;
                    if (*v20 < v22 && v39 != 0)
                    {
                      v402 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v397, (int)v39 + (int)v19 - 1, &v402) = 0x3FF0000000000000;
                    }
                    ++v20;
                  }
                  v19 = v19 + v22 - 1;
                  break;
                case 4:
                  v42 = *v20++;
                  for (j = v42; j; --j)
                  {
                    v43 = *v20;
                    if (*v20 < v22)
                    {
                      v44 = v20[1];
                      v402 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v397, (int)v43 + (int)v19, &v402) = v44;
                    }
                    v20 += 2;
                  }
                  v19 += v22;
                  v17 = v377;
                  break;
                case 7:
                  v30 = *(_QWORD *)(v21 + 72);
                  if (v30)
                  {
                    v26 = 0;
                    v31 = 0;
                    v32 = v19 << 32;
                    do
                    {
                      if (v31 < v22)
                      {
                        v33 = v20[v31];
                        v402 = 0;
                        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v397, v32 >> 32, &v402) = v33;
                      }
                      ++v31;
                      v32 += 0x100000000;
                      v26 -= 8;
                    }
                    while (v30 != v31);
LABEL_31:
                    v20 = (uint64_t *)((char *)v20 - v26);
                    v17 = v377;
                  }
LABEL_32:
                  v19 += v22;
                  v12 = a1;
                  break;
                default:
                  break;
              }
              ++v18;
            }
            while (v18 != v17);
          }
        }
        v45 = (std::__shared_weak_count *)*((_QWORD *)&v415 + 1);
        if (*((_QWORD *)&v415 + 1))
        {
          v46 = (unint64_t *)(*((_QWORD *)&v415 + 1) + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = **(_DWORD **)v12 - 1;
        *(_QWORD *)&v415 = 0;
        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v397, v48, &v415) = 0x3FF0000000000000;
        v49 = v376;
        (*(void (**)(__int128 *__return_ptr, turi::supervised::supervised_learning_model_base *, char *, _QWORD))(*(_QWORD *)v376 + 96))(&v415, v376, v396, *(_QWORD *)(v12 + 40));
        switch(v375)
        {
          case 2:
            do
            {
              v51 = __ldaxr((unint64_t *)v10);
              v52 = --v51 == 0;
            }
            while (__stlxr(v51, (unint64_t *)v10));
            goto LABEL_133;
          case 3:
            do
            {
              v57 = __ldaxr((unint64_t *)v10);
              v58 = --v57 == 0;
            }
            while (__stlxr(v57, (unint64_t *)v10));
            goto LABEL_157;
          case 4:
            do
            {
              v53 = __ldaxr((unint64_t *)v10);
              v54 = --v53 == 0;
            }
            while (__stlxr(v53, (unint64_t *)v10));
            goto LABEL_141;
          case 5:
            do
            {
              v59 = __ldaxr((unint64_t *)v10);
              v60 = --v59 == 0;
            }
            while (__stlxr(v59, (unint64_t *)v10));
            goto LABEL_165;
          case 8:
            do
            {
              v61 = __ldaxr((unint64_t *)v10);
              v62 = --v61 == 0;
            }
            while (__stlxr(v61, (unint64_t *)v10));
            goto LABEL_172;
          case 9:
            do
            {
              v55 = __ldaxr((unint64_t *)v10);
              v56 = --v55 == 0;
            }
            while (__stlxr(v55, (unint64_t *)v10));
            goto LABEL_147;
          default:
            break;
        }
      }
      v10 = v415;
      v124 = DWORD2(v415);
      v11 = BYTE12(v415);
      switch(BYTE12(v415))
      {
        case 3:
          v125 = (_QWORD *)(v415 + 8);
          v126 = (_QWORD *)(v415 + 16);
          v127 = 3;
          goto LABEL_183;
        case 4:
          v125 = (_QWORD *)(v415 + 8);
          v126 = (_QWORD *)(v415 + 16);
          v127 = 4;
          goto LABEL_183;
        case 5:
          v125 = (_QWORD *)(v415 + 8);
          v126 = (_QWORD *)(v415 + 16);
          v127 = 5;
LABEL_183:
          v128 = (uint64_t)(*v126 - *v125) >> v127;
          goto LABEL_184;
        case 9:
          v131 = *(uint64_t **)(v415 + 24);
          v130 = *(uint64_t **)(v415 + 32);
          if (v130 == v131)
          {
            v128 = 0;
          }
          else
          {
            v128 = *(_QWORD *)(v415 + 8);
            if (v128)
            {
              v128 = 1;
              do
              {
                v132 = *v131++;
                v128 *= v132;
              }
              while (v131 != v130);
            }
          }
LABEL_184:
          if (v128 != **(_QWORD **)(v12 + 16))
            goto LABEL_222;
          if (!v128)
          {
            p_first = (double *)&v395.__begin_->first;
            goto LABEL_286;
          }
LABEL_193:
          switch(BYTE12(v415))
          {
            case 1:
            case 3:
            case 9:
              v133 = 0;
              v134 = v415;
              break;
            case 2:
              if (*(_QWORD *)v415 != 1)
              {
                v363 = (_QWORD *)operator new();
                *v363 = *(_QWORD *)v10;
                v364 = (std::string *)(v363 + 1);
                v365 = (void **)(v10 + 8);
                if (*(char *)(v10 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(v364, *(const std::string::value_type **)(v10 + 8), *(_QWORD *)(v10 + 16));
                }
                else
                {
                  v372 = *(_OWORD *)v365;
                  v363[3] = *(_QWORD *)(v10 + 24);
                  *(_OWORD *)&v364->__r_.__value_.__l.__data_ = v372;
                }
                *v363 = 1;
                do
                {
                  v373 = __ldaxr((unint64_t *)v10);
                  v374 = v373 - 1;
                }
                while (__stlxr(v374, (unint64_t *)v10));
                if (!v374)
                {
                  if (*(char *)(v10 + 31) < 0)
                    operator delete(*v365);
                  MEMORY[0x219A19A08](v10, 0x1012C404EF22A49);
                }
              }
              goto LABEL_586;
            case 4:
              if (*(_QWORD *)v415 == 1)
                goto LABEL_586;
              v348 = (_QWORD *)operator new();
              *v348 = *(_QWORD *)v10;
              v348[2] = 0;
              v348[3] = 0;
              v348[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v348 + 1, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 4);
              *v348 = 1;
              do
              {
                v349 = __ldaxr((unint64_t *)v10);
                v350 = v349 - 1;
              }
              while (__stlxr(v350, (unint64_t *)v10));
              if (v350)
                goto LABEL_586;
              *(_QWORD *)&v415 = v10 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
              goto LABEL_563;
            case 5:
              if (*(_QWORD *)v415 == 1)
                goto LABEL_586;
              v345 = (_QWORD *)operator new();
              *v345 = *(_QWORD *)v10;
              v345[2] = 0;
              v345[3] = 0;
              v345[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v345 + 1, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 5);
              *v345 = 1;
              do
              {
                v346 = __ldaxr((unint64_t *)v10);
                v347 = v346 - 1;
              }
              while (__stlxr(v347, (unint64_t *)v10));
              if (v347)
                goto LABEL_586;
              *(_QWORD *)&v415 = v10 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
LABEL_563:
              v351 = v10;
              v352 = 0x1020C405E66F15BLL;
              goto LABEL_574;
            case 8:
              if (*(_QWORD *)v415 == 1)
                goto LABEL_586;
              v355 = operator new();
              *(_QWORD *)v355 = *(_QWORD *)v10;
              v356 = *(_QWORD *)(v10 + 16);
              *(_QWORD *)(v355 + 8) = *(_QWORD *)(v10 + 8);
              *(_QWORD *)(v355 + 16) = v356;
              if (v356)
              {
                v357 = (unsigned int *)(v356 + 8);
                do
                  v358 = __ldxr(v357);
                while (__stxr(v358 + 1, v357));
              }
              v359 = *(_OWORD *)(v10 + 24);
              v360 = *(_OWORD *)(v10 + 40);
              *(_OWORD *)(v355 + 56) = *(_OWORD *)(v10 + 56);
              *(_OWORD *)(v355 + 40) = v360;
              *(_OWORD *)(v355 + 24) = v359;
              *(_QWORD *)v355 = 1;
              do
              {
                v361 = __ldaxr((unint64_t *)v10);
                v362 = v361 - 1;
              }
              while (__stlxr(v362, (unint64_t *)v10));
              if (v362)
                goto LABEL_586;
              boost::detail::shared_count::~shared_count((unsigned int **)(v10 + 16));
              v351 = v10;
              v352 = 0x1030C40F1F0227BLL;
LABEL_574:
              MEMORY[0x219A19A08](v351, v352);
              goto LABEL_586;
            default:
              goto LABEL_586;
          }
          break;
        default:
          if (**(_QWORD **)(v12 + 16) == 1)
            goto LABEL_193;
LABEL_222:
          v149 = 0.0;
          v50.n128_u64[0] = 0;
          if (**(_BYTE **)(v12 + 40) != 5)
          {
            v150 = 0.0;
            switch(BYTE12(v415))
            {
              case 0:
                v150 = (double)(uint64_t)v415;
                goto LABEL_254;
              case 1:
                v150 = *(double *)&v415;
                goto LABEL_254;
              case 2:
                __idx = 0;
                v154 = (char *)(v415 + 8);
                if (*(char *)(v415 + 31) < 0)
                  v154 = *(char **)(v415 + 8);
                v155 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v415, v154);
                v156 = std::stod(v155, &__idx);
                if (SBYTE7(v416) < 0)
                  operator delete((void *)v415);
                if (*(char *)(v10 + 31) < 0)
                  v157 = *(_QWORD *)(v10 + 16);
                else
                  v157 = *(unsigned __int8 *)(v10 + 31);
                if (__idx != v157)
                {
                  v369 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v370 = std::string::append(&v407, " cannot be interpreted as a float");
                  v371 = *(_OWORD *)&v370->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v416 = *((_QWORD *)&v370->__r_.__value_.__l + 2);
                  v415 = v371;
                  v370->__r_.__value_.__l.__size_ = 0;
                  v370->__r_.__value_.__r.__words[2] = 0;
                  v370->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v369, (const std::string *)&v415);
                  __cxa_throw(v369, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                v163 = v156;
                v150 = v163;
                goto LABEL_254;
              case 3:
                *(_QWORD *)&v416 = 0;
                v415 = 0uLL;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v415, *(const void **)(v10 + 8), *(_QWORD *)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if ((_QWORD)v415)
                {
                  *((_QWORD *)&v415 + 1) = v415;
                  operator delete((void *)v415);
                }
                goto LABEL_254;
              case 4:
                *(_QWORD *)&v416 = 0;
                v415 = 0uLL;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v415, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v415;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
                goto LABEL_254;
              case 5:
                *(_QWORD *)&v416 = 0;
                v415 = 0uLL;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v415, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v415;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
                goto LABEL_254;
              case 6:
                v150 = (double)SDWORD2(v415) / 1000000.0 + (double)((uint64_t)((_QWORD)v415 << 8) >> 8);
                goto LABEL_254;
              case 7:
                goto LABEL_254;
              case 8:
                v158 = *(unsigned int **)(v415 + 16);
                v402 = *(void ***)(v415 + 8);
                v403 = v158;
                if (v158)
                {
                  v159 = v158 + 2;
                  do
                    v160 = __ldxr(v159);
                  while (__stxr(v160 + 1, v159));
                }
                v161 = *(_OWORD *)(v10 + 24);
                v162 = *(_OWORD *)(v10 + 56);
                v405 = *(_OWORD *)(v10 + 40);
                v406 = v162;
                v404 = v161;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v403);
                goto LABEL_254;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&v415, v415 + 8);
                turi::flexible_type_fail(0);
                if (v418)
                {
                  v419 = v418;
                  operator delete(v418);
                }
                if ((_QWORD)v416)
                {
                  *((_QWORD *)&v416 + 1) = v416;
                  operator delete((void *)v416);
                }
                v151 = (std::__shared_weak_count *)*((_QWORD *)&v415 + 1);
                if (*((_QWORD *)&v415 + 1))
                {
                  v152 = (unint64_t *)(*((_QWORD *)&v415 + 1) + 8);
                  do
                    v153 = __ldaxr(v152);
                  while (__stlxr(v153 - 1, v152));
                  if (!v153)
                  {
                    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                    std::__shared_weak_count::__release_weak(v151);
                  }
                }
LABEL_254:
                v50.n128_f64[0] = 1.0 - v150;
                break;
              default:
                goto LABEL_586;
            }
          }
          begin = v395.__begin_;
          v395.__begin_->first = 0;
          begin->second = (const char *)v50.n128_u64[0];
          switch(v11)
          {
            case 0:
              v149 = (double)v10;
              goto LABEL_285;
            case 1:
              v149 = *(double *)&v10;
              goto LABEL_285;
            case 2:
              __idx = 0;
              v168 = (char *)(v10 + 8);
              if (*(char *)(v10 + 31) < 0)
                v168 = *(char **)(v10 + 8);
              v169 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v415, v168);
              v50.n128_f64[0] = std::stod(v169, &__idx);
              v170 = v50.n128_f64[0];
              if (SBYTE7(v416) < 0)
                operator delete((void *)v415);
              if (*(char *)(v10 + 31) < 0)
                v171 = *(_QWORD *)(v10 + 16);
              else
                v171 = *(unsigned __int8 *)(v10 + 31);
              if (__idx != v171)
              {
                v366 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v367 = std::string::append(&v407, " cannot be interpreted as a float");
                v368 = *(_OWORD *)&v367->__r_.__value_.__l.__data_;
                *(_QWORD *)&v416 = *((_QWORD *)&v367->__r_.__value_.__l + 2);
                v415 = v368;
                v367->__r_.__value_.__l.__size_ = 0;
                v367->__r_.__value_.__r.__words[2] = 0;
                v367->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v366, (const std::string *)&v415);
                __cxa_throw(v366, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v50.n128_f32[0] = v170;
              v149 = v50.n128_f32[0];
              goto LABEL_285;
            case 3:
              *(_QWORD *)&v416 = 0;
              v415 = 0uLL;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v415, *(const void **)(v10 + 8), *(_QWORD *)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if ((_QWORD)v415)
              {
                *((_QWORD *)&v415 + 1) = v415;
                operator delete((void *)v415);
              }
              goto LABEL_285;
            case 4:
              *(_QWORD *)&v416 = 0;
              v415 = 0uLL;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v415, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v415;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
              goto LABEL_285;
            case 5:
              *(_QWORD *)&v416 = 0;
              v415 = 0uLL;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v415, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v415;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
              goto LABEL_285;
            case 6:
              v50.n128_f64[0] = (double)(v10 << 8 >> 8);
              v149 = (double)v124 / 1000000.0 + v50.n128_f64[0];
              goto LABEL_285;
            case 7:
              goto LABEL_285;
            case 8:
              v172 = *(unsigned int **)(v10 + 16);
              v402 = *(void ***)(v10 + 8);
              v403 = v172;
              if (v172)
              {
                v173 = v172 + 2;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              v175 = *(_OWORD *)(v10 + 24);
              v176 = *(_OWORD *)(v10 + 56);
              v405 = *(_OWORD *)(v10 + 40);
              v406 = v176;
              v404 = v175;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v403);
              goto LABEL_285;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&v415, v10 + 8);
              turi::flexible_type_fail(0);
              if (v418)
              {
                v419 = v418;
                operator delete(v418);
              }
              if ((_QWORD)v416)
              {
                *((_QWORD *)&v416 + 1) = v416;
                operator delete((void *)v416);
              }
              v165 = (std::__shared_weak_count *)*((_QWORD *)&v415 + 1);
              if (*((_QWORD *)&v415 + 1))
              {
                v166 = (unint64_t *)(*((_QWORD *)&v415 + 1) + 8);
                do
                  v167 = __ldaxr(v166);
                while (__stlxr(v167 - 1, v166));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
LABEL_285:
              p_first = (double *)&v395.__begin_->first;
              v395.__begin_[1].first = 1;
              p_first[3] = v149;
              goto LABEL_286;
            default:
              goto LABEL_586;
          }
      }
      do
      {
        if (v11 == 1)
        {
          v136 = (const char *)v134;
          if (v133)
          {
LABEL_586:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
          }
        }
        else
        {
          if (v11 == 3)
          {
            if (*(_QWORD *)v134 == 1)
            {
              v135 = (_QWORD *)v134;
            }
            else
            {
              v137 = (_QWORD *)operator new();
              *v137 = *(_QWORD *)v134;
              v137[2] = 0;
              v137[3] = 0;
              v137[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v137 + 1, *(const void **)(v134 + 8), *(_QWORD *)(v134 + 16), (uint64_t)(*(_QWORD *)(v134 + 16) - *(_QWORD *)(v134 + 8)) >> 3);
              *v137 = 1;
              do
              {
                v138 = __ldaxr((unint64_t *)v134);
                v139 = v138 - 1;
              }
              while (__stlxr(v139, (unint64_t *)v134));
              v135 = v137;
              if (!v139)
              {
                v140 = *(void **)(v134 + 8);
                if (v140)
                {
                  *(_QWORD *)(v134 + 16) = v140;
                  operator delete(v140);
                }
                MEMORY[0x219A19A08](v134, 0x1080C409938AC02);
                v135 = v137;
              }
            }
            v141 = v135 + 1;
            v142 = v133;
          }
          else
          {
            if (*(_QWORD *)v134 == 1)
            {
              v135 = (_QWORD *)v134;
            }
            else
            {
              v143 = (_QWORD *)operator new();
              *v143 = *(_QWORD *)v134;
              turi::flexible_type_impl::ndarray<double>::ndarray(v143 + 1, v134 + 8);
              *v143 = 1;
              do
              {
                v144 = __ldaxr((unint64_t *)v134);
                v145 = v144 - 1;
              }
              while (__stlxr(v145, (unint64_t *)v134));
              v135 = v143;
              if (!v145)
              {
                v146 = *(void **)(v134 + 48);
                if (v146)
                {
                  *(_QWORD *)(v134 + 56) = v146;
                  operator delete(v146);
                }
                v147 = *(void **)(v134 + 24);
                if (v147)
                {
                  *(_QWORD *)(v134 + 32) = v147;
                  operator delete(v147);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v134 + 8);
                MEMORY[0x219A19A08](v134, 0x1030C407B73B9F7);
                v135 = v143;
              }
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v135 + 1);
            v141 = (_QWORD *)v135[1];
            v142 = v135[9] + v133;
          }
          v136 = *(const char **)(*v141 + 8 * v142);
          v134 = (uint64_t)v135;
        }
        p_first = (double *)&v395.__begin_->first;
        v148 = &v395.__begin_[v133];
        v148->first = v133;
        v148->second = v136;
        ++v133;
      }
      while (v133 < **(_QWORD **)(v12 + 16));
      v10 = v134;
LABEL_286:
      v177 = *(_QWORD **)(v12 + 48);
      v178 = &p_first[2 * *v177 - 2];
      v380 = 8;
      v381 = 8;
      if (v178 != (double *)v395.__end_)
      {
        v50.n128_f64[0] = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(p_first, v178, (double *)&v395.__end_->first, (uint64_t)v379, v50.n128_f64[0]);
        v177 = *(_QWORD **)(v12 + 48);
      }
      if (*v177)
      {
        v179 = 0;
        do
        {
          v180 = v388;
          v181 = v393;
          v182 = v394[0];
          switch(*(_BYTE *)(v394[0] + 12))
          {
            case 2:
              v183 = *(unint64_t **)v394[0];
              do
              {
                v184 = __ldaxr(v183);
                v185 = v184 - 1;
              }
              while (__stlxr(v185, v183));
              if (!v185)
              {
                v186 = *(unsigned int ***)v182;
                if (!*(_QWORD *)v182)
                  goto LABEL_332;
                if (*((char *)v186 + 31) < 0)
                  operator delete(v186[1]);
                v187 = v186;
                v188 = 0x1012C404EF22A49;
                goto LABEL_331;
              }
              break;
            case 3:
              v200 = *(unint64_t **)v394[0];
              do
              {
                v201 = __ldaxr(v200);
                v202 = v201 - 1;
              }
              while (__stlxr(v202, v200));
              if (!v202)
              {
                v203 = *(unsigned int ***)v182;
                if (!*(_QWORD *)v182)
                  goto LABEL_332;
                v204 = v203[1];
                if (v204)
                {
                  v203[2] = v204;
                  operator delete(v204);
                }
                v187 = v203;
                v188 = 0x1080C409938AC02;
                goto LABEL_331;
              }
              break;
            case 4:
              v189 = *(unint64_t **)v394[0];
              do
              {
                v190 = __ldaxr(v189);
                v191 = v190 - 1;
              }
              while (__stlxr(v191, v189));
              if (!v191)
              {
                v192 = *(unsigned int ***)v182;
                if (!*(_QWORD *)v182)
                  goto LABEL_332;
                *(_QWORD *)&v415 = v192 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
                goto LABEL_324;
              }
              break;
            case 5:
              v205 = *(unint64_t **)v394[0];
              do
              {
                v206 = __ldaxr(v205);
                v207 = v206 - 1;
              }
              while (__stlxr(v207, v205));
              if (!v207)
              {
                v192 = *(unsigned int ***)v182;
                if (!*(_QWORD *)v182)
                  goto LABEL_332;
                *(_QWORD *)&v415 = v192 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
LABEL_324:
                v187 = v192;
                v188 = 0x1020C405E66F15BLL;
                goto LABEL_331;
              }
              break;
            case 8:
              v208 = *(unint64_t **)v394[0];
              do
              {
                v209 = __ldaxr(v208);
                v210 = v209 - 1;
              }
              while (__stlxr(v210, v208));
              if (!v210)
              {
                v211 = *(unsigned int ***)v182;
                if (!*(_QWORD *)v182)
                  goto LABEL_332;
                boost::detail::shared_count::~shared_count(v211 + 2);
                v187 = v211;
                v199 = -235920773;
                goto LABEL_330;
              }
              break;
            case 9:
              v193 = *(unint64_t **)v394[0];
              do
              {
                v194 = __ldaxr(v193);
                v195 = v194 - 1;
              }
              while (__stlxr(v195, v193));
              if (!v195)
              {
                v196 = *(unsigned int ***)v182;
                if (*(_QWORD *)v182)
                {
                  v197 = v196[6];
                  if (v197)
                  {
                    v196[7] = v197;
                    operator delete(v197);
                  }
                  v198 = v196[3];
                  if (v198)
                  {
                    v196[4] = v198;
                    operator delete(v198);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v196 + 1));
                  v187 = v196;
                  v199 = 2071181815;
LABEL_330:
                  v188 = v199 | 0x1030C4000000000;
LABEL_331:
                  MEMORY[0x219A19A08](v187, v188, v50);
                }
LABEL_332:
                *(_QWORD *)v182 = 0;
              }
              break;
            default:
              break;
          }
          *(_DWORD *)(v182 + 8) = 0;
          *(_BYTE *)(v182 + 12) = 0;
          *(_QWORD *)v182 = v180 - v181;
          v212 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v49 + 47) + 24) + 32) + 80)
               + 16 * v395.__begin_[v179].first;
          v213 = v394[0];
          v214 = v394[0] + 16;
          if (v212 != v394[0] + 16)
          {
            switch(*(_BYTE *)(v394[0] + 28))
            {
              case 2:
                v215 = *(unint64_t **)v214;
                do
                {
                  v216 = __ldaxr(v215);
                  v217 = v216 - 1;
                }
                while (__stlxr(v217, v215));
                if (!v217)
                {
                  v218 = *(unint64_t **)v214;
                  if (!*(_QWORD *)v214)
                    goto LABEL_376;
                  if (*((char *)v218 + 31) < 0)
                    operator delete((void *)v218[1]);
                  v219 = v218;
                  v220 = 0x1012C404EF22A49;
                  goto LABEL_375;
                }
                break;
              case 3:
                v232 = *(unint64_t **)v214;
                do
                {
                  v233 = __ldaxr(v232);
                  v234 = v233 - 1;
                }
                while (__stlxr(v234, v232));
                if (!v234)
                {
                  v235 = *(unint64_t **)v214;
                  if (!*(_QWORD *)v214)
                    goto LABEL_376;
                  v236 = (void *)v235[1];
                  if (v236)
                  {
                    v235[2] = (unint64_t)v236;
                    operator delete(v236);
                  }
                  v219 = v235;
                  v220 = 0x1080C409938AC02;
                  goto LABEL_375;
                }
                break;
              case 4:
                v221 = *(unint64_t **)v214;
                do
                {
                  v222 = __ldaxr(v221);
                  v223 = v222 - 1;
                }
                while (__stlxr(v223, v221));
                if (!v223)
                {
                  v224 = *(unint64_t **)v214;
                  if (!*(_QWORD *)v214)
                    goto LABEL_376;
                  *(_QWORD *)&v415 = v224 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
                  goto LABEL_368;
                }
                break;
              case 5:
                v237 = *(unint64_t **)v214;
                do
                {
                  v238 = __ldaxr(v237);
                  v239 = v238 - 1;
                }
                while (__stlxr(v239, v237));
                if (!v239)
                {
                  v224 = *(unint64_t **)v214;
                  if (!*(_QWORD *)v214)
                    goto LABEL_376;
                  *(_QWORD *)&v415 = v224 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
LABEL_368:
                  v219 = v224;
                  v220 = 0x1020C405E66F15BLL;
                  goto LABEL_375;
                }
                break;
              case 8:
                v240 = *(unint64_t **)v214;
                do
                {
                  v241 = __ldaxr(v240);
                  v242 = v241 - 1;
                }
                while (__stlxr(v242, v240));
                if (!v242)
                {
                  v243 = *(unint64_t **)v214;
                  if (!*(_QWORD *)v214)
                    goto LABEL_376;
                  boost::detail::shared_count::~shared_count((unsigned int **)v243 + 2);
                  v219 = v243;
                  v231 = -235920773;
                  goto LABEL_374;
                }
                break;
              case 9:
                v225 = *(unint64_t **)v214;
                do
                {
                  v226 = __ldaxr(v225);
                  v227 = v226 - 1;
                }
                while (__stlxr(v227, v225));
                if (!v227)
                {
                  v228 = *(unint64_t **)v214;
                  if (*(_QWORD *)v214)
                  {
                    v229 = (void *)v228[6];
                    if (v229)
                    {
                      v228[7] = (unint64_t)v229;
                      operator delete(v229);
                    }
                    v230 = (void *)v228[3];
                    if (v230)
                    {
                      v228[4] = (unint64_t)v230;
                      operator delete(v230);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v228 + 1));
                    v219 = v228;
                    v231 = 2071181815;
LABEL_374:
                    v220 = v231 | 0x1030C4000000000;
LABEL_375:
                    MEMORY[0x219A19A08](v219, v220, v50);
                  }
LABEL_376:
                  *(_QWORD *)v214 = 0;
                }
                break;
              default:
                break;
            }
            v244 = *(_QWORD *)v212;
            *(_QWORD *)(v214 + 5) = *(_QWORD *)(v212 + 5);
            *(_QWORD *)v214 = v244;
            LODWORD(v244) = *(unsigned __int8 *)(v212 + 12);
            *(_BYTE *)(v213 + 28) = v244;
            v245 = v244 > 9;
            v246 = (1 << v244) & 0x33C;
            if (!v245 && v246 != 0)
            {
              v248 = *(unint64_t **)v214;
              do
                v249 = __ldaxr(v248);
              while (__stlxr(v249 + 1, v248));
            }
          }
          if (**(_BYTE **)(v12 + 40) == 6)
          {
            v250 = v394[0];
            switch(*(_BYTE *)(v394[0] + 44))
            {
              case 2:
                v251 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v252 = __ldaxr(v251);
                  v253 = v252 - 1;
                }
                while (__stlxr(v253, v251));
                if (!v253)
                {
                  v254 = *(_QWORD *)(v250 + 32);
                  if (!v254)
                    goto LABEL_461;
                  if (*(char *)(v254 + 31) < 0)
                    operator delete(*(void **)(v254 + 8));
                  v255 = (_QWORD *)v254;
                  v256 = 0x1012C404EF22A49;
                  goto LABEL_460;
                }
                break;
              case 3:
                v287 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v288 = __ldaxr(v287);
                  v289 = v288 - 1;
                }
                while (__stlxr(v289, v287));
                if (!v289)
                {
                  v290 = *(_QWORD **)(v250 + 32);
                  if (!v290)
                    goto LABEL_461;
                  v291 = (void *)v290[1];
                  if (v291)
                  {
                    v290[2] = v291;
                    operator delete(v291);
                  }
                  v255 = v290;
                  v256 = 0x1080C409938AC02;
                  goto LABEL_460;
                }
                break;
              case 4:
                v265 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v266 = __ldaxr(v265);
                  v267 = v266 - 1;
                }
                while (__stlxr(v267, v265));
                if (!v267)
                {
                  v268 = *(_QWORD **)(v250 + 32);
                  if (!v268)
                    goto LABEL_461;
                  *(_QWORD *)&v415 = v268 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
                  goto LABEL_447;
                }
                break;
              case 5:
                v297 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v298 = __ldaxr(v297);
                  v299 = v298 - 1;
                }
                while (__stlxr(v299, v297));
                if (!v299)
                {
                  v268 = *(_QWORD **)(v250 + 32);
                  if (!v268)
                    goto LABEL_461;
                  *(_QWORD *)&v415 = v268 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
LABEL_447:
                  v255 = v268;
                  v256 = 0x1020C405E66F15BLL;
                  goto LABEL_460;
                }
                break;
              case 8:
                v303 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v304 = __ldaxr(v303);
                  v305 = v304 - 1;
                }
                while (__stlxr(v305, v303));
                if (!v305)
                {
                  v306 = *(_QWORD *)(v250 + 32);
                  if (!v306)
                    goto LABEL_461;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v306 + 16));
                  v255 = (_QWORD *)v306;
                  v279 = -235920773;
                  goto LABEL_459;
                }
                break;
              case 9:
                v273 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v274 = __ldaxr(v273);
                  v275 = v274 - 1;
                }
                while (__stlxr(v275, v273));
                if (!v275)
                {
                  v276 = *(_QWORD **)(v250 + 32);
                  if (v276)
                  {
                    v277 = (void *)v276[6];
                    if (v277)
                    {
                      v276[7] = v277;
                      operator delete(v277);
                    }
                    v278 = (void *)v276[3];
                    if (v278)
                    {
                      v276[4] = v278;
                      operator delete(v278);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v276 + 1));
                    v255 = v276;
                    v279 = 2071181815;
LABEL_459:
                    v256 = v279 | 0x1030C4000000000;
LABEL_460:
                    MEMORY[0x219A19A08](v255, v256, v50);
                  }
LABEL_461:
                  *(_QWORD *)(v250 + 32) = 0;
                }
                break;
              default:
                break;
            }
            *(_DWORD *)(v250 + 40) = 0;
            *(_BYTE *)(v250 + 44) = 0;
            *(_QWORD *)(v250 + 32) = v179;
          }
          else
          {
            v257 = v395.__begin_;
            v258 = v394[0];
            switch(*(_BYTE *)(v394[0] + 44))
            {
              case 2:
                v259 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v260 = __ldaxr(v259);
                  v261 = v260 - 1;
                }
                while (__stlxr(v261, v259));
                if (!v261)
                {
                  v262 = *(_QWORD *)(v258 + 32);
                  if (!v262)
                    goto LABEL_470;
                  if (*(char *)(v262 + 31) < 0)
                    operator delete(*(void **)(v262 + 8));
                  v263 = (_QWORD *)v262;
                  v264 = 0x1012C404EF22A49;
                  goto LABEL_469;
                }
                break;
              case 3:
                v292 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v293 = __ldaxr(v292);
                  v294 = v293 - 1;
                }
                while (__stlxr(v294, v292));
                if (!v294)
                {
                  v295 = *(_QWORD **)(v258 + 32);
                  if (!v295)
                    goto LABEL_470;
                  v296 = (void *)v295[1];
                  if (v296)
                  {
                    v295[2] = v296;
                    operator delete(v296);
                  }
                  v263 = v295;
                  v264 = 0x1080C409938AC02;
                  goto LABEL_469;
                }
                break;
              case 4:
                v269 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v270 = __ldaxr(v269);
                  v271 = v270 - 1;
                }
                while (__stlxr(v271, v269));
                if (!v271)
                {
                  v272 = *(_QWORD **)(v258 + 32);
                  if (!v272)
                    goto LABEL_470;
                  *(_QWORD *)&v415 = v272 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
                  goto LABEL_453;
                }
                break;
              case 5:
                v300 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v301 = __ldaxr(v300);
                  v302 = v301 - 1;
                }
                while (__stlxr(v302, v300));
                if (!v302)
                {
                  v272 = *(_QWORD **)(v258 + 32);
                  if (!v272)
                    goto LABEL_470;
                  *(_QWORD *)&v415 = v272 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
LABEL_453:
                  v263 = v272;
                  v264 = 0x1020C405E66F15BLL;
                  goto LABEL_469;
                }
                break;
              case 8:
                v307 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v308 = __ldaxr(v307);
                  v309 = v308 - 1;
                }
                while (__stlxr(v309, v307));
                if (!v309)
                {
                  v310 = *(_QWORD *)(v258 + 32);
                  if (!v310)
                    goto LABEL_470;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v310 + 16));
                  v263 = (_QWORD *)v310;
                  v286 = -235920773;
                  goto LABEL_468;
                }
                break;
              case 9:
                v280 = *(unint64_t **)(v394[0] + 32);
                do
                {
                  v281 = __ldaxr(v280);
                  v282 = v281 - 1;
                }
                while (__stlxr(v282, v280));
                if (!v282)
                {
                  v283 = *(_QWORD **)(v258 + 32);
                  if (v283)
                  {
                    v284 = (void *)v283[6];
                    if (v284)
                    {
                      v283[7] = v284;
                      operator delete(v284);
                    }
                    v285 = (void *)v283[3];
                    if (v285)
                    {
                      v283[4] = v285;
                      operator delete(v285);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v283 + 1));
                    v263 = v283;
                    v286 = 2071181815;
LABEL_468:
                    v264 = v286 | 0x1030C4000000000;
LABEL_469:
                    MEMORY[0x219A19A08](v263, v264, v50);
                  }
LABEL_470:
                  *(_QWORD *)(v258 + 32) = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)(v258 + 32) = 0;
            *(_DWORD *)(v258 + 40) = 0;
            *(_BYTE *)(v258 + 44) = 1;
            v50.n128_u64[0] = (unint64_t)v257[v179].second;
            *(_QWORD *)(v258 + 32) = v50.n128_u64[0];
          }
          if (!v410)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_BYTE *, uint64_t *, __n128))(*(_QWORD *)v410 + 48))(v410, v394, v50);
          ++v179;
        }
        while (v179 < **(_QWORD **)(v12 + 48));
      }
      if (v392 | v384)
      {
        v311 = (uint64_t *)(*(_QWORD *)(v390 + 96) + 8 * v391);
        if (v385)
          v311 = &v386;
        *(_QWORD *)&v391 = *v311 + v391;
      }
      v312 = v388 + 1;
      v313 = ++v388 - v383 * v389;
      *((_QWORD *)&v391 + 1) = v313;
      if (v313 == v383 && v312 != v387)
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v382);
    }
    while (v388 != v387);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v382);
  v382[0] = (void **)v394;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v382);
  if (v395.__begin_)
  {
    v395.__end_ = v395.__begin_;
    operator delete(v395.__begin_);
  }
  v315 = v414;
  if (v414 == v413)
  {
    v316 = 4;
    v315 = v413;
  }
  else
  {
    if (!v414)
      goto LABEL_491;
    v316 = 5;
  }
  (*(void (**)(void))(*v315 + 8 * v316))();
LABEL_491:
  v317 = v412;
  if (v412 == v411)
  {
    v318 = 4;
    v317 = v411;
  }
  else
  {
    if (!v412)
      goto LABEL_496;
    v318 = 5;
  }
  (*(void (**)(void))(*v317 + 8 * v318))();
LABEL_496:
  v319 = v410;
  if (v410 == v409)
  {
    v320 = 4;
    v319 = v409;
    goto LABEL_500;
  }
  if (v410)
  {
    v320 = 5;
LABEL_500:
    (*(void (**)(void))(*v319 + 8 * v320))();
  }
  switch(v11)
  {
    case 2:
      do
      {
        v321 = __ldaxr((unint64_t *)v10);
        v322 = v321 - 1;
      }
      while (__stlxr(v322, (unint64_t *)v10));
      if (v322)
        v323 = 1;
      else
        v323 = v10 == 0;
      if (!v323)
      {
        if (*(char *)(v10 + 31) < 0)
          operator delete(*(void **)(v10 + 8));
        v324 = v10;
        v325 = 0x1012C404EF22A49;
        goto LABEL_548;
      }
      break;
    case 3:
      do
      {
        v335 = __ldaxr((unint64_t *)v10);
        v336 = v335 - 1;
      }
      while (__stlxr(v336, (unint64_t *)v10));
      if (v336)
        v337 = 1;
      else
        v337 = v10 == 0;
      if (!v337)
      {
        v338 = *(void **)(v10 + 8);
        if (v338)
        {
          *(_QWORD *)(v10 + 16) = v338;
          operator delete(v338);
        }
        v324 = v10;
        v325 = 0x1080C409938AC02;
        goto LABEL_548;
      }
      break;
    case 4:
      do
      {
        v326 = __ldaxr((unint64_t *)v10);
        v327 = v326 - 1;
      }
      while (__stlxr(v327, (unint64_t *)v10));
      if (v327)
        v328 = 1;
      else
        v328 = v10 == 0;
      if (!v328)
      {
        v382[0] = (void **)(v10 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v382);
        goto LABEL_540;
      }
      break;
    case 5:
      do
      {
        v339 = __ldaxr((unint64_t *)v10);
        v340 = v339 - 1;
      }
      while (__stlxr(v340, (unint64_t *)v10));
      if (v340)
        v341 = 1;
      else
        v341 = v10 == 0;
      if (!v341)
      {
        v382[0] = (void **)(v10 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v382);
LABEL_540:
        v324 = v10;
        v325 = 0x1020C405E66F15BLL;
        goto LABEL_548;
      }
      break;
    case 8:
      do
      {
        v342 = __ldaxr((unint64_t *)v10);
        v343 = v342 - 1;
      }
      while (__stlxr(v343, (unint64_t *)v10));
      if (v343)
        v344 = 1;
      else
        v344 = v10 == 0;
      if (!v344)
      {
        boost::detail::shared_count::~shared_count((unsigned int **)(v10 + 16));
        v324 = v10;
        v334 = -235920773;
        goto LABEL_547;
      }
      break;
    case 9:
      do
      {
        v329 = __ldaxr((unint64_t *)v10);
        v330 = v329 - 1;
      }
      while (__stlxr(v330, (unint64_t *)v10));
      if (v330)
        v331 = 1;
      else
        v331 = v10 == 0;
      if (!v331)
      {
        v332 = *(void **)(v10 + 48);
        if (v332)
        {
          *(_QWORD *)(v10 + 56) = v332;
          operator delete(v332);
        }
        v333 = *(void **)(v10 + 24);
        if (v333)
        {
          *(_QWORD *)(v10 + 32) = v333;
          operator delete(v333);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10 + 8);
        v324 = v10;
        v334 = 2071181815;
LABEL_547:
        v325 = v334 | 0x1030C4000000000;
LABEL_548:
        MEMORY[0x219A19A08](v324, v325);
      }
      break;
    default:
      break;
  }
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v397);
  free(v400);
}

void sub_2185A54CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, boost::detail::shared_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  void *a72;
  uint64_t v72;
  void *v73;
  int v74;
  uint64_t v75;
  void *v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  BOOL v86;

  if (*(char *)(v75 - 185) < 0)
    operator delete(*(void **)(v75 - 208));
  if (SLOBYTE(STACK[0x2A7]) < 0)
  {
    operator delete((void *)STACK[0x290]);
    if ((v74 & 1) == 0)
    {
LABEL_8:
      turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)&a24);
      a24 = (uint64_t)&a69;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      v77 = a72;
      if (a72)
      {
        STACK[0x200] = (unint64_t)a72;
        operator delete(v77);
      }
      v78 = (unint64_t *)STACK[0x308];
      if ((unint64_t *)STACK[0x308] == &STACK[0x2F0])
      {
        v79 = 4;
        v78 = &STACK[0x2F0];
      }
      else
      {
        if (!v78)
          goto LABEL_15;
        v79 = 5;
      }
      (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_15:
      v80 = (unint64_t *)STACK[0x2E8];
      if ((unint64_t *)STACK[0x2E8] == &STACK[0x2D0])
      {
        v81 = 4;
        v80 = &STACK[0x2D0];
      }
      else
      {
        if (!v80)
          goto LABEL_20;
        v81 = 5;
      }
      (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_20:
      v82 = (unint64_t *)STACK[0x2C8];
      if ((unint64_t *)STACK[0x2C8] == &STACK[0x2B0])
      {
        v83 = 4;
        v82 = &STACK[0x2B0];
      }
      else
      {
        if (!v82)
          goto LABEL_25;
        v83 = 5;
      }
      (*(void (**)(void))(*v82 + 8 * v83))();
      do
      {
LABEL_25:
        v84 = __ldaxr((unint64_t *)v72);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, (unint64_t *)v72));
      if (v85)
        v86 = 1;
      else
        v86 = v72 == 0;
      if (!v86)
      {
        if (*(char *)(v72 + 31) < 0)
          operator delete(*(void **)(v72 + 8));
        MEMORY[0x219A19A08](v72, 0x1012C404EF22A49);
      }
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(a18);
      free((void *)STACK[0x240]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v73);
  goto LABEL_8;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = operator new(0x28uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = 0;
  *((_DWORD *)v16 + 6) = 0;
  *((_BYTE *)v16 + 28) = 0;
  v18 = *v17;
  *(_QWORD *)((char *)v16 + 21) = *(uint64_t *)((char *)v17 + 5);
  v16[2] = v18;
  *((_BYTE *)v16 + 28) = *((_BYTE *)v17 + 12);
  *((_BYTE *)v17 + 12) = 0;
  v16[4] = 0;
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10)
          v26 %= v10;
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_2185A5BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void turi::flexible_type_converter<std::map<unsigned long,turi::flexible_type>>::set(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<9>::set<std::map<unsigned long,turi::flexible_type>>((uint64_t *)a2, a1);
}

void sub_2185A5C3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<unsigned long,turi::flexible_type>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<9>::set<std::map<unsigned long,turi::flexible_type>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  void **v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  void **v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  void *v86;
  void *v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  _QWORD *v101;
  _QWORD *v102;
  void **v103;
  _QWORD *v104;
  unint64_t *v105;
  std::string *v106;
  __int128 v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  __int128 v127;
  __int128 v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  __int128 v138;
  unint64_t v139;
  void **v140;
  _QWORD v141[2];
  _BYTE v142[13];
  _BYTE v143[13];
  void **v144[3];

  v144[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v138 = 0uLL;
  v139 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v138, a2[2]);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      memset(v141, 0, 13);
      turi::flexible_type_internals::ft_resolver<3>::set<unsigned long const&>((uint64_t)v141, v5 + 4);
      memset(v144, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v144, v5 + 5);
      *(_QWORD *)&v142[5] = *(_QWORD *)((char *)v141 + 5);
      *(_QWORD *)v142 = v141[0];
      v142[12] = BYTE4(v141[1]);
      BYTE4(v141[1]) = 0;
      *(void ***)&v143[5] = *(void ***)((char *)v144 + 5);
      *(void ***)v143 = v144[0];
      v143[12] = BYTE4(v144[1]);
      BYTE4(v144[1]) = 0;
      v7 = *((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1) >= v139)
      {
        v10 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v138, (uint64_t *)v142);
      }
      else
      {
        **((_QWORD **)&v138 + 1) = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(_BYTE *)(v7 + 12) = 0;
        v8 = *(_QWORD *)v142;
        *(_QWORD *)(v7 + 5) = *(_QWORD *)&v142[5];
        *(_QWORD *)v7 = v8;
        *(_BYTE *)(v7 + 12) = v142[12];
        v142[12] = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_BYTE *)(v7 + 28) = 0;
        v9 = *(_QWORD *)v143;
        *(_QWORD *)(v7 + 21) = *(_QWORD *)&v143[5];
        *(_QWORD *)(v7 + 16) = v9;
        *(_BYTE *)(v7 + 28) = v143[12];
        v143[12] = 0;
        v10 = v7 + 32;
      }
      *((_QWORD *)&v138 + 1) = v10;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v142);
      switch(BYTE4(v144[1]))
      {
        case 2:
          v11 = (unint64_t *)v144[0];
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v14 = v144[0];
            if (v144[0])
            {
              if (*((char *)v144[0] + 31) < 0)
                operator delete(v144[0][1]);
              v15 = v14;
              v16 = 0x1012C404EF22A49;
              goto LABEL_46;
            }
          }
          break;
        case 3:
          v28 = (unint64_t *)v144[0];
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = v144[0];
            if (v144[0])
            {
              v32 = v144[0][1];
              if (v32)
              {
                v144[0][2] = v32;
                operator delete(v32);
              }
              v15 = v31;
              v16 = 0x1080C409938AC02;
              goto LABEL_46;
            }
          }
          break;
        case 4:
          v17 = (unint64_t *)v144[0];
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = v144[0];
            if (v144[0])
            {
              v140 = v144[0] + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v140);
              goto LABEL_39;
            }
          }
          break;
        case 5:
          v33 = (unint64_t *)v144[0];
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v20 = v144[0];
            if (v144[0])
            {
              v140 = v144[0] + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v140);
LABEL_39:
              v15 = v20;
              v16 = 0x1020C405E66F15BLL;
              goto LABEL_46;
            }
          }
          break;
        case 8:
          v36 = (unint64_t *)v144[0];
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = v144[0];
            if (v144[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v144[0] + 2);
              v15 = v39;
              v27 = -235920773;
              goto LABEL_45;
            }
          }
          break;
        case 9:
          v21 = (unint64_t *)v144[0];
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = v144[0];
            if (v144[0])
            {
              v25 = v144[0][6];
              if (v25)
              {
                v144[0][7] = v25;
                operator delete(v25);
              }
              v26 = v24[3];
              if (v26)
              {
                v24[4] = v26;
                operator delete(v26);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v24 + 1));
              v15 = v24;
              v27 = 2071181815;
LABEL_45:
              v16 = v27 | 0x1030C4000000000;
LABEL_46:
              MEMORY[0x219A19A08](v15, v16);
            }
          }
          break;
        default:
          break;
      }
      switch(BYTE4(v141[1]))
      {
        case 2:
          v40 = (unint64_t *)v141[0];
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v43 = v141[0];
            if (v141[0])
            {
              if (*(char *)(v141[0] + 31) < 0)
                operator delete(*(void **)(v141[0] + 8));
              v44 = v43;
              v45 = 0x1012C404EF22A49;
              goto LABEL_88;
            }
          }
          break;
        case 3:
          v57 = (unint64_t *)v141[0];
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = v141[0];
            if (v141[0])
            {
              v61 = *(void **)(v141[0] + 8);
              if (v61)
              {
                *(_QWORD *)(v141[0] + 16) = v61;
                operator delete(v61);
              }
              v44 = v60;
              v45 = 0x1080C409938AC02;
              goto LABEL_88;
            }
          }
          break;
        case 4:
          v46 = (unint64_t *)v141[0];
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = v141[0];
            if (v141[0])
            {
              v144[0] = (void **)(v141[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v144);
              goto LABEL_81;
            }
          }
          break;
        case 5:
          v62 = (unint64_t *)v141[0];
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v49 = v141[0];
            if (v141[0])
            {
              v144[0] = (void **)(v141[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v144);
LABEL_81:
              v44 = v49;
              v45 = 0x1020C405E66F15BLL;
              goto LABEL_88;
            }
          }
          break;
        case 8:
          v65 = (unint64_t *)v141[0];
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = v141[0];
            if (v141[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v141[0] + 16));
              v44 = v68;
              v56 = -235920773;
              goto LABEL_87;
            }
          }
          break;
        case 9:
          v50 = (unint64_t *)v141[0];
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = v141[0];
            if (v141[0])
            {
              v54 = *(void **)(v141[0] + 48);
              if (v54)
              {
                *(_QWORD *)(v141[0] + 56) = v54;
                operator delete(v54);
              }
              v55 = *(void **)(v53 + 24);
              if (v55)
              {
                *(_QWORD *)(v53 + 32) = v55;
                operator delete(v55);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v53 + 8);
              v44 = v53;
              v56 = 2071181815;
LABEL_87:
              v45 = v56 | 0x1030C4000000000;
LABEL_88:
              MEMORY[0x219A19A08](v44, v45);
            }
          }
          break;
        default:
          break;
      }
      v69 = (_QWORD *)v5[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (_QWORD *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (_QWORD *)v5[2];
          v71 = *v70 == (_QWORD)v5;
          v5 = v70;
        }
        while (!v71);
      }
      v5 = v70;
    }
    while (v70 != v4);
  }
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v72 = (unint64_t *)*a1;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        if (*((char *)v75 + 31) < 0)
          operator delete((void *)v75[1]);
        v76 = v75;
        v77 = 0x1012C404EF22A49;
        goto LABEL_136;
      }
      break;
    case 3:
      v89 = (unint64_t *)*a1;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        v93 = (void *)v92[1];
        if (v93)
        {
          v92[2] = (unint64_t)v93;
          operator delete(v93);
        }
        v76 = v92;
        v77 = 0x1080C409938AC02;
        goto LABEL_136;
      }
      break;
    case 4:
      v78 = (unint64_t *)*a1;
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v81 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        *(_QWORD *)v142 = v81 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
        goto LABEL_129;
      }
      break;
    case 5:
      v94 = (unint64_t *)*a1;
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        v81 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        *(_QWORD *)v142 = v81 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
LABEL_129:
        v76 = v81;
        v77 = 0x1020C405E66F15BLL;
        goto LABEL_136;
      }
      break;
    case 8:
      v97 = (unint64_t *)*a1;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        v100 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_137;
        boost::detail::shared_count::~shared_count((unsigned int **)v100 + 2);
        v76 = v100;
        v88 = -235920773;
        goto LABEL_135;
      }
      break;
    case 9:
      v82 = (unint64_t *)*a1;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v85 = (unint64_t *)*a1;
        if (*a1)
        {
          v86 = (void *)v85[6];
          if (v86)
          {
            v85[7] = (unint64_t)v86;
            operator delete(v86);
          }
          v87 = (void *)v85[3];
          if (v87)
          {
            v85[4] = (unint64_t)v87;
            operator delete(v87);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v85 + 1));
          v76 = v85;
          v88 = 2071181815;
LABEL_135:
          v77 = v88 | 0x1030C4000000000;
LABEL_136:
          MEMORY[0x219A19A08](v76, v77);
        }
LABEL_137:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 5;
  v101 = (_QWORD *)operator new();
  v102 = v101;
  *v101 = 0;
  v101[1] = 0;
  v103 = (void **)(v101 + 1);
  v101[2] = 0;
  v101[3] = 0;
  *a1 = (uint64_t)v101;
  *v101 = 1;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v101 != 1)
      {
        v104 = (_QWORD *)operator new();
        v105 = (unint64_t *)*a1;
        *v104 = *(_QWORD *)*a1;
        v106 = (std::string *)(v104 + 1);
        if (*((char *)v105 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v106, (const std::string::value_type *)v105[1], v105[2]);
        }
        else
        {
          v107 = *(_OWORD *)(v105 + 1);
          v104[3] = v105[3];
          *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
        }
        *a1 = (uint64_t)v104;
        *v104 = 1;
        do
        {
          v135 = __ldaxr(v102);
          v136 = v135 - 1;
        }
        while (__stlxr(v136, v102));
        if (!v136)
        {
          v112 = 0x1012C404EF22A49;
          if ((*((char *)v102 + 31) & 0x80000000) == 0)
            goto LABEL_178;
          v113 = *v103;
          goto LABEL_177;
        }
      }
      break;
    case 3:
      if (*v101 != 1)
      {
        v108 = (_QWORD *)operator new();
        v109 = (unint64_t *)*a1;
        *v108 = *(_QWORD *)*a1;
        v108[2] = 0;
        v108[3] = 0;
        v108[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v108 + 1, (const void *)v109[1], v109[2], (uint64_t)(v109[2] - v109[1]) >> 3);
        *a1 = (uint64_t)v108;
        *v108 = 1;
        do
        {
          v110 = __ldaxr(v102);
          v111 = v110 - 1;
        }
        while (__stlxr(v111, v102));
        if (!v111)
        {
          v112 = 0x1080C409938AC02;
          v113 = *v103;
          if (*v103)
          {
            v102[2] = v113;
LABEL_177:
            operator delete(v113);
          }
          goto LABEL_178;
        }
      }
      break;
    case 4:
      if (*v101 != 1)
      {
        v114 = (_QWORD *)operator new();
        v115 = (unint64_t *)*a1;
        *v114 = *(_QWORD *)*a1;
        v114[2] = 0;
        v114[3] = 0;
        v114[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v114 + 1, (uint64_t *)v115[1], (uint64_t *)v115[2], (uint64_t)(v115[2] - v115[1]) >> 4);
        *a1 = (uint64_t)v114;
        *v114 = 1;
        do
        {
          v116 = __ldaxr(v102);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v102));
        if (!v117)
        {
          v112 = 0x1020C405E66F15BLL;
          *(_QWORD *)v142 = v103;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
          goto LABEL_178;
        }
      }
      break;
    case 5:
      if (*v101 != 1)
      {
        v118 = (_QWORD *)operator new();
        v119 = (unint64_t *)*a1;
        *v118 = *(_QWORD *)*a1;
        v118[2] = 0;
        v118[3] = 0;
        v118[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v118 + 1, (uint64_t *)v119[1], (uint64_t *)v119[2], (uint64_t)(v119[2] - v119[1]) >> 5);
        *a1 = (uint64_t)v118;
        *v118 = 1;
        do
        {
          v120 = __ldaxr(v102);
          v121 = v120 - 1;
        }
        while (__stlxr(v121, v102));
        if (!v121)
        {
          v112 = 0x1020C405E66F15BLL;
          *(_QWORD *)v142 = v103;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
          goto LABEL_178;
        }
      }
      break;
    case 8:
      if (*v101 != 1)
      {
        v122 = operator new();
        v123 = (unint64_t *)*a1;
        *(_QWORD *)v122 = *(_QWORD *)*a1;
        *(_QWORD *)(v122 + 8) = v123[1];
        v124 = v123[2];
        *(_QWORD *)(v122 + 16) = v124;
        if (v124)
        {
          v125 = (unsigned int *)(v124 + 8);
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        v127 = *(_OWORD *)(v123 + 3);
        v128 = *(_OWORD *)(v123 + 5);
        *(_OWORD *)(v122 + 56) = *(_OWORD *)(v123 + 7);
        *(_OWORD *)(v122 + 40) = v128;
        *(_OWORD *)(v122 + 24) = v127;
        *a1 = v122;
        *(_QWORD *)v122 = 1;
        do
        {
          v129 = __ldaxr(v102);
          v130 = v129 - 1;
        }
        while (__stlxr(v130, v102));
        if (!v130)
        {
          v112 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v102 + 2);
          goto LABEL_178;
        }
      }
      break;
    case 9:
      if (*v101 != 1)
      {
        v131 = (_QWORD *)operator new();
        v132 = *a1 + 8;
        *v131 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v131 + 1, v132);
        *a1 = (uint64_t)v131;
        *v131 = 1;
        do
        {
          v133 = __ldaxr(v102);
          v134 = v133 - 1;
        }
        while (__stlxr(v134, v102));
        if (!v134)
        {
          v112 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v102);
LABEL_178:
          MEMORY[0x219A19A08](v102, v112);
        }
      }
      break;
    default:
      break;
  }
  v137 = (unint64_t *)*a1;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)v137 + 1);
  *(_OWORD *)(v137 + 1) = v138;
  v137[3] = v139;
  v138 = 0uLL;
  v139 = 0;
  *(_QWORD *)v142 = &v138;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
}

void sub_2185A6804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v16;

  MEMORY[0x219A19A08](v16, 0x1012C404EF22A49);
  a16 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24D949F80;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24D949F80;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0::operator()(a1 + 8, *a2, *a3);
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void ***v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void ***v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int64_t v29;
  char *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  __int128 v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int64_t v78;
  char *v79;
  uint64_t v80;
  int64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  BOOL v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t k;
  uint64_t v143;
  uint64_t v144;
  uint64_t m;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  double v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t i;
  uint64_t v184;
  uint64_t v185;
  uint64_t j;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  double v197;
  double v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  double v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  double v207;
  void *v208;
  void *v209;
  unsigned int v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  double v214;
  void *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  double v222;
  unint64_t *v223;
  unint64_t v224;
  BOOL v225;
  unint64_t *v226;
  unint64_t v227;
  BOOL v228;
  unint64_t *v229;
  unint64_t v230;
  BOOL v231;
  unint64_t *v232;
  unint64_t v233;
  BOOL v234;
  unint64_t *v235;
  unint64_t v236;
  BOOL v237;
  unint64_t *v238;
  unint64_t v239;
  BOOL v240;
  unint64_t *v241;
  unint64_t v242;
  BOOL v243;
  unint64_t *v244;
  unint64_t v245;
  BOOL v246;
  unint64_t *v247;
  unint64_t v248;
  BOOL v249;
  unint64_t *v250;
  unint64_t v251;
  BOOL v252;
  unint64_t *v253;
  unint64_t v254;
  BOOL v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  double v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  double v263;
  void *v264;
  void *v265;
  unsigned int v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  double v270;
  void *v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  double v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  void *v290;
  void *v291;
  unsigned int v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  void *v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  double v302;
  double v303;
  unint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  char v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  std::string *v311;
  __int128 v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  unint64_t *v316;
  _QWORD *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t *v321;
  _QWORD *v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  void *v326;
  void *v327;
  unint64_t *v328;
  unsigned int v329;
  unint64_t *v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  void *v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int *v345;
  unsigned int v346;
  __int128 v347;
  __int128 v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  _QWORD *v353;
  double v354;
  uint64_t v355;
  double *v356;
  int v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  std::string *v361;
  __int128 v362;
  unint64_t *v363;
  _QWORD *v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  _QWORD *v368;
  _QWORD *v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  void *v373;
  void *v374;
  unint64_t *v375;
  unsigned int v376;
  unint64_t *v377;
  _QWORD *v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  void *v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int *v392;
  unsigned int v393;
  __int128 v394;
  __int128 v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  _QWORD *v400;
  double v401;
  double *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  double v406;
  double v407;
  uint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  double v412;
  unint64_t *v413;
  unint64_t v414;
  unint64_t v415;
  double v416;
  void *v417;
  void *v418;
  unsigned int v419;
  unint64_t *v420;
  unint64_t v421;
  unint64_t v422;
  double v423;
  void *v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  unint64_t v430;
  double v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t *v434;
  unint64_t v435;
  double v436;
  char *v437;
  const std::string *v438;
  uint64_t v439;
  double v440;
  unsigned int *v441;
  unsigned int *v442;
  unsigned int v443;
  __int128 v444;
  __int128 v445;
  uint64_t v447;
  _QWORD *v448;
  char v449;
  unint64_t *v450;
  unint64_t v451;
  double v452;
  unint64_t *v453;
  unint64_t v454;
  double v455;
  unint64_t *v456;
  unint64_t v457;
  double v458;
  void *v459;
  void *v460;
  double v461;
  unsigned int v462;
  unint64_t *v463;
  unint64_t v464;
  double v465;
  void *v466;
  uint64_t v467;
  unint64_t *v468;
  unint64_t v469;
  unint64_t *v470;
  unint64_t v471;
  double v472;
  unint64_t *v473;
  unint64_t v474;
  double v475;
  unint64_t *v476;
  unint64_t v477;
  double v478;
  void *v479;
  void *v480;
  unsigned int v481;
  unint64_t *v482;
  unint64_t v483;
  double v484;
  void *v485;
  unint64_t *v486;
  unint64_t v487;
  unint64_t *v488;
  unint64_t v489;
  double v490;
  BOOL v491;
  _QWORD *v492;
  unint64_t *v493;
  unint64_t v494;
  double v495;
  double v496;
  uint64_t v497;
  unint64_t *v498;
  unint64_t v499;
  double v500;
  unint64_t *v501;
  unint64_t v502;
  double v503;
  void *v504;
  void *v505;
  unsigned int v506;
  unint64_t *v507;
  unint64_t v508;
  double v509;
  void *v510;
  unint64_t *v511;
  unint64_t v512;
  unint64_t *v513;
  unint64_t v514;
  double v515;
  uint64_t v516;
  unint64_t v517;
  double *v518;
  BOOL v519;
  _BOOL4 v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  double v530;
  char *v531;
  const std::string *v532;
  uint64_t v533;
  double v534;
  unsigned int *v535;
  unsigned int *v536;
  unsigned int v537;
  __int128 v538;
  __int128 v539;
  uint64_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  double v544;
  char *v545;
  const std::string *v546;
  uint64_t v547;
  double v548;
  unsigned int *v549;
  unsigned int *v550;
  unsigned int v551;
  __int128 v552;
  __int128 v553;
  uint64_t *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  std::runtime_error *v559;
  std::string *v560;
  __int128 v561;
  _QWORD *v562;
  uint64_t v563;
  _QWORD *v564;
  uint64_t v565;
  _QWORD *v566;
  uint64_t v567;
  _QWORD *v568;
  uint64_t v569;
  _QWORD *v570;
  uint64_t v571;
  unint64_t *v572;
  unint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t *v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  void *v586;
  void *v587;
  unsigned int v588;
  unint64_t *v589;
  unint64_t v590;
  unint64_t v591;
  uint64_t v592;
  void *v593;
  unint64_t *v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t *v597;
  unint64_t v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t *v601;
  unint64_t v602;
  unint64_t v603;
  double v604;
  double v605;
  uint64_t v606;
  unint64_t *v607;
  unint64_t v608;
  unint64_t v609;
  double v610;
  unint64_t *v611;
  unint64_t v612;
  unint64_t v613;
  double v614;
  void *v615;
  void *v616;
  unsigned int v617;
  unint64_t *v618;
  unint64_t v619;
  unint64_t v620;
  double v621;
  void *v622;
  unint64_t *v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t *v626;
  unint64_t v627;
  unint64_t v628;
  double v629;
  unint64_t *v630;
  unint64_t v631;
  unint64_t v632;
  double v633;
  double v634;
  uint64_t v635;
  unint64_t *v636;
  unint64_t v637;
  unint64_t v638;
  double v639;
  unint64_t *v640;
  unint64_t v641;
  unint64_t v642;
  double v643;
  void *v644;
  void *v645;
  unsigned int v646;
  unint64_t *v647;
  unint64_t v648;
  unint64_t v649;
  double v650;
  void *v651;
  unint64_t *v652;
  unint64_t v653;
  unint64_t v654;
  unint64_t *v655;
  unint64_t v656;
  unint64_t v657;
  double v658;
  std::runtime_error *v659;
  std::string *v660;
  __int128 v661;
  std::runtime_error *v662;
  std::string *v663;
  __int128 v664;
  std::bad_alloc *exception;
  std::bad_alloc *v666;
  uint64_t v667;
  uint64_t v668;
  _QWORD *v669;
  uint64_t v670;
  uint64_t v671;
  char v672[8];
  __int128 v673;
  __int128 v674;
  unint64_t v675;
  void *v676;
  uint64_t v677;
  void **v678;
  unsigned int *v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  std::string v683;
  size_t __idx;
  void **v685[3];
  void ***v686;
  _BYTE v687[24];
  _BYTE *v688;
  _BYTE v689[24];
  _BYTE *v690;
  uint64_t v691;
  unsigned __int8 v692;
  char v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  __int128 v698;
  __int128 v699;
  __int16 v700;
  _QWORD v701[3];
  _QWORD *v702;
  _QWORD v703[3];
  _QWORD *v704;
  _QWORD v705[3];
  _QWORD *v706;
  _QWORD v707[3];
  _QWORD *v708;
  _QWORD v709[3];
  _QWORD *v710;
  _QWORD v711[3];
  _QWORD *v712;
  _QWORD v713[2];
  double v714[2];
  double v715;
  int v716;
  char v717;
  _BYTE v718[32];
  __int16 v719;
  void *v720;
  void *v721;
  uint64_t v722;

  v5 = a1;
  v722 = *MEMORY[0x24BDAC8D0];
  v669 = *(_QWORD **)(a1 + 56);
  v715 = 0.0;
  v716 = 0;
  v717 = 0;
  memset(v714, 0, 13);
  memset(v713, 0, 13);
  v6 = *(unint64_t **)a1;
  v676 = 0;
  v677 = 0;
  v7 = *v6;
  if (*v6)
  {
    if (v7 >> 61 || (v8 = malloc_type_malloc(8 * v7, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v666 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v666, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v6 = *(unint64_t **)v5;
    v676 = v8;
  }
  v677 = v7;
  v9 = *v6;
  v672[0] = 0;
  v673 = 0u;
  v674 = 0u;
  v675 = v9;
  v708 = 0;
  v710 = 0;
  v712 = 0;
  v702 = 0;
  v704 = 0;
  v706 = 0;
  if (!**(_BYTE **)(v5 + 8))
    goto LABEL_36;
  (*(void (**)(void ***__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(v5 + 16) + 32))(v685, **(_QWORD **)(v5 + 16), a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](v707, (uint64_t)v685);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](v709, (uint64_t)v687);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](v711, (uint64_t)v689);
  v10 = v690;
  if (v690 == v689)
  {
    v11 = 4;
    v10 = v689;
  }
  else
  {
    if (!v690)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = v688;
  if (v688 == v687)
  {
    v13 = 4;
    v12 = v687;
  }
  else
  {
    if (!v688)
      goto LABEL_16;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_16:
  v14 = v686;
  if (v686 == v685)
  {
    v15 = 4;
    v14 = v685;
  }
  else
  {
    if (!v686)
      goto LABEL_21;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_21:
  (*(void (**)(void ***__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(v5 + 24) + 32))(v685, **(_QWORD **)(v5 + 24), a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](v701, (uint64_t)v685);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](v703, (uint64_t)v687);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](v705, (uint64_t)v689);
  v16 = v690;
  if (v690 == v689)
  {
    v17 = 4;
    v16 = v689;
  }
  else
  {
    if (!v690)
      goto LABEL_26;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_26:
  v18 = v688;
  if (v688 == v687)
  {
    v19 = 4;
    v18 = v687;
  }
  else
  {
    if (!v688)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v20 = v686;
  if (v686 == v685)
  {
    v21 = 4;
    v20 = v685;
    goto LABEL_35;
  }
  if (v686)
  {
    v21 = 5;
LABEL_35:
    ((void (*)(void))(*v20)[v21])();
  }
LABEL_36:
  turi::ml_data::get_iterator(*(turi::ml_data **)(v5 + 32), a2, a3, (uint64_t)v685);
  if (v696 == v695)
  {
LABEL_37:
    turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v685);
    v22 = v706;
    if (v706 == v705)
    {
      v23 = 4;
      v22 = v705;
    }
    else
    {
      if (!v706)
        goto LABEL_894;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_894:
    v562 = v704;
    if (v704 == v703)
    {
      v563 = 4;
      v562 = v703;
    }
    else
    {
      if (!v704)
        goto LABEL_899;
      v563 = 5;
    }
    (*(void (**)(void))(*v562 + 8 * v563))();
LABEL_899:
    v564 = v702;
    if (v702 == v701)
    {
      v565 = 4;
      v564 = v701;
    }
    else
    {
      if (!v702)
        goto LABEL_904;
      v565 = 5;
    }
    (*(void (**)(void))(*v564 + 8 * v565))();
LABEL_904:
    v566 = v712;
    if (v712 == v711)
    {
      v567 = 4;
      v566 = v711;
    }
    else
    {
      if (!v712)
        goto LABEL_909;
      v567 = 5;
    }
    (*(void (**)(void))(*v566 + 8 * v567))();
LABEL_909:
    v568 = v710;
    if (v710 == v709)
    {
      v569 = 4;
      v568 = v709;
    }
    else
    {
      if (!v710)
        goto LABEL_914;
      v569 = 5;
    }
    (*(void (**)(void))(*v568 + 8 * v569))();
LABEL_914:
    v570 = v708;
    if (v708 == v707)
    {
      v571 = 4;
      v570 = v707;
    }
    else
    {
      if (!v708)
      {
LABEL_919:
        Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v673);
        free(v676);
        switch(BYTE4(v713[1]))
        {
          case 2:
            v572 = (unint64_t *)v713[0];
            do
            {
              v573 = __ldaxr(v572);
              v574 = v573 - 1;
            }
            while (__stlxr(v574, v572));
            if (!v574)
            {
              v575 = v713[0];
              if (v713[0])
              {
                if (*(char *)(v713[0] + 31) < 0)
                  operator delete(*(void **)(v713[0] + 8));
                v576 = v575;
                v577 = 0x1012C404EF22A49;
                goto LABEL_960;
              }
            }
            break;
          case 3:
            v589 = (unint64_t *)v713[0];
            do
            {
              v590 = __ldaxr(v589);
              v591 = v590 - 1;
            }
            while (__stlxr(v591, v589));
            if (!v591)
            {
              v592 = v713[0];
              if (v713[0])
              {
                v593 = *(void **)(v713[0] + 8);
                if (v593)
                {
                  *(_QWORD *)(v713[0] + 16) = v593;
                  operator delete(v593);
                }
                v576 = v592;
                v577 = 0x1080C409938AC02;
                goto LABEL_960;
              }
            }
            break;
          case 4:
            v578 = (unint64_t *)v713[0];
            do
            {
              v579 = __ldaxr(v578);
              v580 = v579 - 1;
            }
            while (__stlxr(v580, v578));
            if (!v580)
            {
              v581 = v713[0];
              if (v713[0])
              {
                v685[0] = (void **)(v713[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v685);
                goto LABEL_953;
              }
            }
            break;
          case 5:
            v594 = (unint64_t *)v713[0];
            do
            {
              v595 = __ldaxr(v594);
              v596 = v595 - 1;
            }
            while (__stlxr(v596, v594));
            if (!v596)
            {
              v581 = v713[0];
              if (v713[0])
              {
                v685[0] = (void **)(v713[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v685);
LABEL_953:
                v576 = v581;
                v577 = 0x1020C405E66F15BLL;
                goto LABEL_960;
              }
            }
            break;
          case 8:
            v597 = (unint64_t *)v713[0];
            do
            {
              v598 = __ldaxr(v597);
              v599 = v598 - 1;
            }
            while (__stlxr(v599, v597));
            if (!v599)
            {
              v600 = v713[0];
              if (v713[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v713[0] + 16));
                v576 = v600;
                v588 = -235920773;
                goto LABEL_959;
              }
            }
            break;
          case 9:
            v582 = (unint64_t *)v713[0];
            do
            {
              v583 = __ldaxr(v582);
              v584 = v583 - 1;
            }
            while (__stlxr(v584, v582));
            if (!v584)
            {
              v585 = v713[0];
              if (v713[0])
              {
                v586 = *(void **)(v713[0] + 48);
                if (v586)
                {
                  *(_QWORD *)(v713[0] + 56) = v586;
                  operator delete(v586);
                }
                v587 = *(void **)(v585 + 24);
                if (v587)
                {
                  *(_QWORD *)(v585 + 32) = v587;
                  operator delete(v587);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v585 + 8);
                v576 = v585;
                v588 = 2071181815;
LABEL_959:
                v577 = v588 | 0x1030C4000000000;
LABEL_960:
                MEMORY[0x219A19A08](v576, v577);
              }
            }
            break;
          default:
            break;
        }
        switch(BYTE4(v714[1]))
        {
          case 2:
            v601 = *(unint64_t **)&v714[0];
            do
            {
              v602 = __ldaxr(v601);
              v603 = v602 - 1;
            }
            while (__stlxr(v603, v601));
            if (!v603)
            {
              v604 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                if (*(char *)(*(_QWORD *)&v714[0] + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v714[0] + 8));
                v605 = v604;
                v606 = 0x1012C404EF22A49;
                goto LABEL_1002;
              }
            }
            break;
          case 3:
            v618 = *(unint64_t **)&v714[0];
            do
            {
              v619 = __ldaxr(v618);
              v620 = v619 - 1;
            }
            while (__stlxr(v620, v618));
            if (!v620)
            {
              v621 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                v622 = *(void **)(*(_QWORD *)&v714[0] + 8);
                if (v622)
                {
                  *(_QWORD *)(*(_QWORD *)&v714[0] + 16) = v622;
                  operator delete(v622);
                }
                v605 = v621;
                v606 = 0x1080C409938AC02;
                goto LABEL_1002;
              }
            }
            break;
          case 4:
            v607 = *(unint64_t **)&v714[0];
            do
            {
              v608 = __ldaxr(v607);
              v609 = v608 - 1;
            }
            while (__stlxr(v609, v607));
            if (!v609)
            {
              v610 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                v685[0] = (void **)(*(_QWORD *)&v714[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v685);
                goto LABEL_995;
              }
            }
            break;
          case 5:
            v623 = *(unint64_t **)&v714[0];
            do
            {
              v624 = __ldaxr(v623);
              v625 = v624 - 1;
            }
            while (__stlxr(v625, v623));
            if (!v625)
            {
              v610 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                v685[0] = (void **)(*(_QWORD *)&v714[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v685);
LABEL_995:
                v605 = v610;
                v606 = 0x1020C405E66F15BLL;
                goto LABEL_1002;
              }
            }
            break;
          case 8:
            v626 = *(unint64_t **)&v714[0];
            do
            {
              v627 = __ldaxr(v626);
              v628 = v627 - 1;
            }
            while (__stlxr(v628, v626));
            if (!v628)
            {
              v629 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v714[0] + 16));
                v605 = v629;
                v617 = -235920773;
                goto LABEL_1001;
              }
            }
            break;
          case 9:
            v611 = *(unint64_t **)&v714[0];
            do
            {
              v612 = __ldaxr(v611);
              v613 = v612 - 1;
            }
            while (__stlxr(v613, v611));
            if (!v613)
            {
              v614 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                v615 = *(void **)(*(_QWORD *)&v714[0] + 48);
                if (v615)
                {
                  *(_QWORD *)(*(_QWORD *)&v714[0] + 56) = v615;
                  operator delete(v615);
                }
                v616 = *(void **)(*(_QWORD *)&v614 + 24);
                if (v616)
                {
                  *(_QWORD *)(*(_QWORD *)&v614 + 32) = v616;
                  operator delete(v616);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v614 + 8);
                v605 = v614;
                v617 = 2071181815;
LABEL_1001:
                v606 = v617 | 0x1030C4000000000;
LABEL_1002:
                MEMORY[0x219A19A08](*(_QWORD *)&v605, v606);
              }
            }
            break;
          default:
            break;
        }
        switch(v717)
        {
          case 2:
            v630 = *(unint64_t **)&v715;
            do
            {
              v631 = __ldaxr(v630);
              v632 = v631 - 1;
            }
            while (__stlxr(v632, v630));
            if (!v632)
            {
              v633 = v715;
              if (v715 != 0.0)
              {
                if (*(char *)(*(_QWORD *)&v715 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v715 + 8));
                v634 = v633;
                v635 = 0x1012C404EF22A49;
                goto LABEL_1044;
              }
            }
            break;
          case 3:
            v647 = *(unint64_t **)&v715;
            do
            {
              v648 = __ldaxr(v647);
              v649 = v648 - 1;
            }
            while (__stlxr(v649, v647));
            if (!v649)
            {
              v650 = v715;
              if (v715 != 0.0)
              {
                v651 = *(void **)(*(_QWORD *)&v715 + 8);
                if (v651)
                {
                  *(_QWORD *)(*(_QWORD *)&v715 + 16) = v651;
                  operator delete(v651);
                }
                v634 = v650;
                v635 = 0x1080C409938AC02;
                goto LABEL_1044;
              }
            }
            break;
          case 4:
            v636 = *(unint64_t **)&v715;
            do
            {
              v637 = __ldaxr(v636);
              v638 = v637 - 1;
            }
            while (__stlxr(v638, v636));
            if (!v638)
            {
              v639 = v715;
              if (v715 != 0.0)
              {
                v685[0] = (void **)(*(_QWORD *)&v715 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v685);
                goto LABEL_1037;
              }
            }
            break;
          case 5:
            v652 = *(unint64_t **)&v715;
            do
            {
              v653 = __ldaxr(v652);
              v654 = v653 - 1;
            }
            while (__stlxr(v654, v652));
            if (!v654)
            {
              v639 = v715;
              if (v715 != 0.0)
              {
                v685[0] = (void **)(*(_QWORD *)&v715 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v685);
LABEL_1037:
                v634 = v639;
                v635 = 0x1020C405E66F15BLL;
                goto LABEL_1044;
              }
            }
            break;
          case 8:
            v655 = *(unint64_t **)&v715;
            do
            {
              v656 = __ldaxr(v655);
              v657 = v656 - 1;
            }
            while (__stlxr(v657, v655));
            if (!v657)
            {
              v658 = v715;
              if (v715 != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v715 + 16));
                v634 = v658;
                v646 = -235920773;
                goto LABEL_1043;
              }
            }
            break;
          case 9:
            v640 = *(unint64_t **)&v715;
            do
            {
              v641 = __ldaxr(v640);
              v642 = v641 - 1;
            }
            while (__stlxr(v642, v640));
            if (!v642)
            {
              v643 = v715;
              if (v715 != 0.0)
              {
                v644 = *(void **)(*(_QWORD *)&v715 + 48);
                if (v644)
                {
                  *(_QWORD *)(*(_QWORD *)&v715 + 56) = v644;
                  operator delete(v644);
                }
                v645 = *(void **)(*(_QWORD *)&v643 + 24);
                if (v645)
                {
                  *(_QWORD *)(*(_QWORD *)&v643 + 32) = v645;
                  operator delete(v645);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v643 + 8);
                v634 = v643;
                v646 = 2071181815;
LABEL_1043:
                v635 = v646 | 0x1030C4000000000;
LABEL_1044:
                MEMORY[0x219A19A08](*(_QWORD *)&v634, v635);
              }
            }
            break;
          default:
            return;
        }
        return;
      }
      v571 = 5;
    }
    (*(void (**)(void))(*v570 + 8 * v571))();
    goto LABEL_919;
  }
  v668 = v5;
  v667 = a2;
  while (1)
  {
    if (!**(_BYTE **)(v5 + 40))
    {
      if (**(_BYTE **)(v5 + 48))
      {
        v73 = v698;
        if (*((_QWORD *)&v698 + 1))
        {
          v74 = (unint64_t *)(*((_QWORD *)&v698 + 1) + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        v76 = v699;
        v77 = v700;
        v79 = (char *)v676;
        v78 = v677;
        if (v677 >= 0)
          v80 = v677;
        else
          v80 = v677 + 1;
        v81 = v80 & 0xFFFFFFFFFFFFFFFELL;
        if (v677 >= 2)
        {
          v82 = 2;
          if (v81 > 2)
            v82 = v80 & 0xFFFFFFFFFFFFFFFELL;
          bzero(v676, ((8 * v82 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if (v81 < v78)
          bzero(&v79[16 * (v80 >> 1)], 8 * v78 - 16 * (v80 >> 1));
        if (v77)
        {
          v83 = *(_QWORD *)(v73 + 56);
          if (v83)
          {
            v84 = 0;
            v85 = 0;
            v86 = (unint64_t *)(*(_QWORD *)(v73 + 96) + 8 * v76 + 8 * (*(_BYTE *)(v73 + 18) == 0));
            v87 = *(_QWORD *)(v73 + 72);
            v88 = v676;
            while (2)
            {
              v89 = *(_QWORD *)(v87 + 16 * v84);
              v90 = *(_QWORD *)(v89 + 64);
              switch(*(_DWORD *)(v89 + 24))
              {
                case 0:
                  if (v90)
                    v88[v85] = *v86;
                  ++v86;
                  goto LABEL_143;
                case 1:
                  v99 = *v86++;
                  v98 = v99;
                  v100 = v85 - 1;
                  if (v99 < v90 && v98 != 0)
                    v88[v100 + v98] = 0x3FF0000000000000;
                  goto LABEL_157;
                case 2:
                  v91 = *(_QWORD *)(v89 + 72);
                  if (!v91)
                    goto LABEL_143;
                  v92 = 0;
                  v93 = 0;
                  v94 = (char *)v676 + 8 * v85;
                  do
                  {
                    if (v93 < v90)
                      *(_QWORD *)&v94[8 * v93] = v86[v93];
                    ++v93;
                    v92 -= 8;
                  }
                  while (v91 != v93);
                  goto LABEL_142;
                case 3:
                  v103 = *v86++;
                  v102 = v103;
                  v100 = v85 - 1;
                  if (v103)
                  {
                    v104 = v676;
                    do
                    {
                      v105 = *v86;
                      if (*v86 < v90 && v105 != 0)
                        v104[v100 + v105] = 0x3FF0000000000000;
                      ++v86;
                      --v102;
                    }
                    while (v102);
                  }
LABEL_157:
                  v85 = v100 + v90;
                  goto LABEL_166;
                case 4:
                  v109 = *v86;
                  v107 = v86 + 1;
                  v108 = v109;
                  if (v109)
                  {
                    v110 = v676;
                    v111 = v107;
                    do
                    {
                      v113 = *v111;
                      v111 += 2;
                      v112 = v113;
                      if (v113 < v90)
                        v110[v112 + v85] = v107[1];
                      v107 = v111;
                      --v108;
                    }
                    while (v108);
                  }
                  else
                  {
                    v111 = v107;
                  }
                  v85 += v90;
                  v86 = v111;
                  goto LABEL_166;
                case 7:
                  v95 = *(_QWORD *)(v89 + 72);
                  if (!v95)
                    goto LABEL_143;
                  v92 = 0;
                  v96 = 0;
                  v97 = (char *)v676 + 8 * v85;
                  do
                  {
                    if (v96 < v90)
                      *(_QWORD *)&v97[8 * v96] = v86[v96];
                    ++v96;
                    v92 -= 8;
                  }
                  while (v95 != v96);
LABEL_142:
                  v86 = (unint64_t *)((char *)v86 - v92);
LABEL_143:
                  v85 += v90;
LABEL_166:
                  if (++v84 == v83)
                    break;
                  continue;
                default:
                  goto LABEL_166;
              }
              break;
            }
          }
        }
        if (*((_QWORD *)&v73 + 1))
        {
          v114 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v73 + 1) + 16))(*((_QWORD *)&v73 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v73 + 1));
          }
        }
        *((_QWORD *)v676 + **(_QWORD **)v5 - 1) = 0x3FF0000000000000;
        v683.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(_BYTE *__return_ptr, _QWORD *, void **, std::string *))(*v669 + 88))(v718, v669, &v676, &v683);
        switch(BYTE4(v714[1]))
        {
          case 2:
            v116 = *(unint64_t **)&v714[0];
            do
            {
              v117 = __ldaxr(v116);
              v118 = --v117 == 0;
            }
            while (__stlxr(v117, v116));
            goto LABEL_277;
          case 3:
            v247 = *(unint64_t **)&v714[0];
            do
            {
              v248 = __ldaxr(v247);
              v249 = --v248 == 0;
            }
            while (__stlxr(v248, v247));
            goto LABEL_712;
          case 4:
            v241 = *(unint64_t **)&v714[0];
            do
            {
              v242 = __ldaxr(v241);
              v243 = --v242 == 0;
            }
            while (__stlxr(v242, v241));
            goto LABEL_696;
          case 5:
            v250 = *(unint64_t **)&v714[0];
            do
            {
              v251 = __ldaxr(v250);
              v252 = --v251 == 0;
            }
            while (__stlxr(v251, v250));
            goto LABEL_720;
          case 8:
            v253 = *(unint64_t **)&v714[0];
            do
            {
              v254 = __ldaxr(v253);
              v255 = --v254 == 0;
            }
            while (__stlxr(v254, v253));
            goto LABEL_727;
          case 9:
            v244 = *(unint64_t **)&v714[0];
            do
            {
              v245 = __ldaxr(v244);
              v246 = --v245 == 0;
            }
            while (__stlxr(v245, v244));
            goto LABEL_702;
          default:
            break;
        }
      }
      else
      {
        v160 = v698;
        *(_OWORD *)v718 = v698;
        if (*((_QWORD *)&v698 + 1))
        {
          v161 = (unint64_t *)(*((_QWORD *)&v698 + 1) + 8);
          do
            v162 = __ldxr(v161);
          while (__stxr(v162 + 1, v161));
        }
        v719 = v700;
        *(_OWORD *)&v718[16] = v699;
        *(_QWORD *)&v674 = 0;
        if ((_BYTE)v700)
        {
          v163 = *(_QWORD *)(v160 + 56);
          if (v163)
          {
            v164 = 0;
            v165 = 0;
            v166 = (uint64_t *)(*(_QWORD *)(v160 + 96) + 8 * *(_QWORD *)&v718[16] + 8 * (*(_BYTE *)(v160 + 18) == 0));
            while (2)
            {
              v167 = *(_QWORD *)(*(_QWORD *)(v160 + 72) + 16 * v164);
              v168 = *(_QWORD *)(v167 + 64);
              switch(*(_DWORD *)(v167 + 24))
              {
                case 0:
                  v169 = *v166++;
                  v170 = v169;
                  if (v168)
                  {
                    v678 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, (int)v165, &v678) = v170;
                  }
                  goto LABEL_267;
                case 1:
                  v181 = *v166++;
                  v180 = v181;
                  if (v181 < v168 && v180 != 0)
                  {
                    v678 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, (int)v180 + (int)v165 - 1, &v678) = 0x3FF0000000000000;
                  }
                  goto LABEL_262;
                case 2:
                  v171 = *(_QWORD *)(v167 + 72);
                  if (!v171)
                    goto LABEL_267;
                  v172 = 0;
                  v173 = 0;
                  v174 = v165 << 32;
                  do
                  {
                    if (v173 < v168)
                    {
                      v175 = v166[v173];
                      v678 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, v174 >> 32, &v678) = v175;
                    }
                    ++v173;
                    v174 += 0x100000000;
                    v172 -= 8;
                  }
                  while (v171 != v173);
                  goto LABEL_249;
                case 3:
                  v184 = *v166++;
                  for (i = v184; i; --i)
                  {
                    v185 = *v166;
                    if (*v166 < v168 && v185 != 0)
                    {
                      v678 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, (int)v185 + (int)v165 - 1, &v678) = 0x3FF0000000000000;
                    }
                    ++v166;
                  }
LABEL_262:
                  v165 = v165 + v168 - 1;
                  goto LABEL_268;
                case 4:
                  v188 = *v166++;
                  for (j = v188; j; --j)
                  {
                    v189 = *v166;
                    if (*v166 < v168)
                    {
                      v190 = v166[1];
                      v678 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, (int)v189 + (int)v165, &v678) = v190;
                    }
                    v166 += 2;
                  }
                  goto LABEL_267;
                case 7:
                  v176 = *(_QWORD *)(v167 + 72);
                  if (!v176)
                    goto LABEL_267;
                  v172 = 0;
                  v177 = 0;
                  v178 = v165 << 32;
                  do
                  {
                    if (v177 < v168)
                    {
                      v179 = v166[v177];
                      v678 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, v178 >> 32, &v678) = v179;
                    }
                    ++v177;
                    v178 += 0x100000000;
                    v172 -= 8;
                  }
                  while (v176 != v177);
LABEL_249:
                  v166 = (uint64_t *)((char *)v166 - v172);
                  v5 = v668;
LABEL_267:
                  v165 += v168;
LABEL_268:
                  if (++v164 == v163)
                    break;
                  continue;
                default:
                  goto LABEL_268;
              }
              break;
            }
          }
        }
        v191 = *(std::__shared_weak_count **)&v718[8];
        a2 = v667;
        if (*(_QWORD *)&v718[8])
        {
          v192 = (unint64_t *)(*(_QWORD *)&v718[8] + 8);
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
        v194 = **(_DWORD **)v5 - 1;
        *(_QWORD *)v718 = 0;
        *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, v194, v718) = 0x3FF0000000000000;
        v683.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(_BYTE *__return_ptr, _QWORD *, char *, std::string *))(*v669 + 96))(v718, v669, v672, &v683);
        switch(BYTE4(v714[1]))
        {
          case 2:
            v195 = *(unint64_t **)&v714[0];
            do
            {
              v196 = __ldaxr(v195);
              v118 = --v196 == 0;
            }
            while (__stlxr(v196, v195));
LABEL_277:
            if (v118)
            {
              v197 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                if (*(char *)(*(_QWORD *)&v714[0] + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v714[0] + 8));
                v198 = v197;
                v199 = 0x1012C404EF22A49;
                goto LABEL_732;
              }
            }
            break;
          case 3:
            v482 = *(unint64_t **)&v714[0];
            do
            {
              v483 = __ldaxr(v482);
              v249 = --v483 == 0;
            }
            while (__stlxr(v483, v482));
LABEL_712:
            if (v249)
            {
              v484 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                v485 = *(void **)(*(_QWORD *)&v714[0] + 8);
                if (v485)
                {
                  *(_QWORD *)(*(_QWORD *)&v714[0] + 16) = v485;
                  operator delete(v485);
                }
                v198 = v484;
                v199 = 0x1080C409938AC02;
                goto LABEL_732;
              }
            }
            break;
          case 4:
            v473 = *(unint64_t **)&v714[0];
            do
            {
              v474 = __ldaxr(v473);
              v243 = --v474 == 0;
            }
            while (__stlxr(v474, v473));
LABEL_696:
            if (v243)
            {
              v475 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                v678 = (void **)(*(_QWORD *)&v714[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v678);
                goto LABEL_724;
              }
            }
            break;
          case 5:
            v486 = *(unint64_t **)&v714[0];
            do
            {
              v487 = __ldaxr(v486);
              v252 = --v487 == 0;
            }
            while (__stlxr(v487, v486));
LABEL_720:
            if (v252)
            {
              v475 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                v678 = (void **)(*(_QWORD *)&v714[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v678);
LABEL_724:
                v198 = v475;
                v199 = 0x1020C405E66F15BLL;
                goto LABEL_732;
              }
            }
            break;
          case 8:
            v488 = *(unint64_t **)&v714[0];
            do
            {
              v489 = __ldaxr(v488);
              v255 = --v489 == 0;
            }
            while (__stlxr(v489, v488));
LABEL_727:
            if (v255)
            {
              v490 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v714[0] + 16));
                v198 = v490;
                v481 = -235920773;
                goto LABEL_731;
              }
            }
            break;
          case 9:
            v476 = *(unint64_t **)&v714[0];
            do
            {
              v477 = __ldaxr(v476);
              v246 = --v477 == 0;
            }
            while (__stlxr(v477, v476));
LABEL_702:
            if (v246)
            {
              v478 = v714[0];
              if (*(_QWORD *)&v714[0])
              {
                v479 = *(void **)(*(_QWORD *)&v714[0] + 48);
                if (v479)
                {
                  *(_QWORD *)(*(_QWORD *)&v714[0] + 56) = v479;
                  operator delete(v479);
                }
                v480 = *(void **)(*(_QWORD *)&v478 + 24);
                if (v480)
                {
                  *(_QWORD *)(*(_QWORD *)&v478 + 32) = v480;
                  operator delete(v480);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v478 + 8);
                v198 = v478;
                v481 = 2071181815;
LABEL_731:
                v199 = v481 | 0x1030C4000000000;
LABEL_732:
                MEMORY[0x219A19A08](*(_QWORD *)&v198, v199);
              }
            }
            break;
          default:
            break;
        }
      }
      *(double *)((char *)v714 + 5) = *(double *)&v718[5];
      v714[0] = *(double *)v718;
      BYTE4(v714[1]) = v718[12];
      if (*(_BYTE *)(v698 + 16))
        v491 = *(_BYTE *)(v698 + 17) == 0;
      else
        v491 = 0;
      if (v491)
      {
        v492 = (_QWORD *)(v698 + 24);
        if (!*(_BYTE *)(v698 + 18))
          v492 = (_QWORD *)(*(_QWORD *)(v698 + 96) + 8 * v699);
        v447 = *(uint64_t *)(*(_QWORD *)(v698 + 96) + 8 * v699 + 8 * *v492 - 8);
      }
      else
      {
        *(double *)&v447 = 1.0;
      }
      v449 = 1;
      switch(v717)
      {
        case 2:
          v493 = *(unint64_t **)&v715;
          do
            v494 = __ldaxr(v493);
          while (__stlxr(v494 - 1, v493));
          if (v494 != 1)
            goto LABEL_783;
          v495 = v715;
          if (v715 == 0.0)
            goto LABEL_783;
          if (*(char *)(*(_QWORD *)&v715 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v715 + 8));
          v496 = v495;
          v497 = 0x1012C404EF22A49;
          goto LABEL_782;
        case 3:
          v507 = *(unint64_t **)&v715;
          do
            v508 = __ldaxr(v507);
          while (__stlxr(v508 - 1, v507));
          if (v508 != 1)
            goto LABEL_783;
          v509 = v715;
          if (v715 == 0.0)
            goto LABEL_783;
          v510 = *(void **)(*(_QWORD *)&v715 + 8);
          if (v510)
          {
            *(_QWORD *)(*(_QWORD *)&v715 + 16) = v510;
            operator delete(v510);
          }
          v496 = v509;
          v497 = 0x1080C409938AC02;
          goto LABEL_782;
        case 4:
          v498 = *(unint64_t **)&v715;
          do
            v499 = __ldaxr(v498);
          while (__stlxr(v499 - 1, v498));
          if (v499 != 1)
            goto LABEL_783;
          v500 = v715;
          if (v715 == 0.0)
            goto LABEL_783;
          *(_QWORD *)v718 = *(_QWORD *)&v715 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
          goto LABEL_775;
        case 5:
          v511 = *(unint64_t **)&v715;
          do
            v512 = __ldaxr(v511);
          while (__stlxr(v512 - 1, v511));
          if (v512 != 1)
            goto LABEL_783;
          v500 = v715;
          if (v715 == 0.0)
            goto LABEL_783;
          *(_QWORD *)v718 = *(_QWORD *)&v715 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
LABEL_775:
          v496 = v500;
          v497 = 0x1020C405E66F15BLL;
          goto LABEL_782;
        case 8:
          v513 = *(unint64_t **)&v715;
          do
            v514 = __ldaxr(v513);
          while (__stlxr(v514 - 1, v513));
          if (v514 != 1)
            goto LABEL_783;
          v515 = v715;
          if (v715 == 0.0)
            goto LABEL_783;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v715 + 16));
          v496 = v515;
          v506 = -235920773;
          goto LABEL_781;
        case 9:
          v501 = *(unint64_t **)&v715;
          do
            v502 = __ldaxr(v501);
          while (__stlxr(v502 - 1, v501));
          if (v502 != 1)
            goto LABEL_783;
          v503 = v715;
          if (v715 == 0.0)
            goto LABEL_783;
          v504 = *(void **)(*(_QWORD *)&v715 + 48);
          if (v504)
          {
            *(_QWORD *)(*(_QWORD *)&v715 + 56) = v504;
            operator delete(v504);
          }
          v505 = *(void **)(*(_QWORD *)&v503 + 24);
          if (v505)
          {
            *(_QWORD *)(*(_QWORD *)&v503 + 32) = v505;
            operator delete(v505);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v503 + 8);
          v496 = v503;
          v506 = 2071181815;
LABEL_781:
          v497 = v506 | 0x1030C4000000000;
LABEL_782:
          MEMORY[0x219A19A08](*(_QWORD *)&v496, v497);
LABEL_783:
          v449 = 1;
          break;
        default:
          goto LABEL_784;
      }
      goto LABEL_784;
    }
    if (**(_BYTE **)(v5 + 48))
    {
      v24 = v698;
      if (*((_QWORD *)&v698 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v698 + 1) + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = v699;
      v28 = v700;
      v30 = (char *)v676;
      v29 = v677;
      if (v677 >= 0)
        v31 = v677;
      else
        v31 = v677 + 1;
      v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
      if (v677 >= 2)
      {
        v33 = 2;
        if (v32 > 2)
          v33 = v31 & 0xFFFFFFFFFFFFFFFELL;
        bzero(v676, ((8 * v33 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      if (v32 < v29)
        bzero(&v30[16 * (v31 >> 1)], 8 * v29 - 16 * (v31 >> 1));
      if (v28)
      {
        v34 = *(_QWORD *)(v24 + 56);
        if (v34)
        {
          v35 = 0;
          v36 = 0;
          v37 = (unint64_t *)(*(_QWORD *)(v24 + 96) + 8 * v27 + 8 * (*(_BYTE *)(v24 + 18) == 0));
          v38 = *(_QWORD *)(v24 + 72);
          v39 = v676;
          while (2)
          {
            v40 = *(_QWORD *)(v38 + 16 * v35);
            v41 = *(_QWORD *)(v40 + 64);
            switch(*(_DWORD *)(v40 + 24))
            {
              case 0:
                if (v41)
                  v39[v36] = *v37;
                ++v37;
                goto LABEL_74;
              case 1:
                v50 = *v37++;
                v49 = v50;
                v51 = v36 - 1;
                if (v50 < v41 && v49 != 0)
                  v39[v51 + v49] = 0x3FF0000000000000;
                goto LABEL_88;
              case 2:
                v42 = *(_QWORD *)(v40 + 72);
                if (!v42)
                  goto LABEL_74;
                v43 = 0;
                v44 = 0;
                v45 = (char *)v676 + 8 * v36;
                do
                {
                  if (v44 < v41)
                    *(_QWORD *)&v45[8 * v44] = v37[v44];
                  ++v44;
                  v43 -= 8;
                }
                while (v42 != v44);
                goto LABEL_73;
              case 3:
                v54 = *v37++;
                v53 = v54;
                v51 = v36 - 1;
                if (v54)
                {
                  v55 = v676;
                  do
                  {
                    v56 = *v37;
                    if (*v37 < v41 && v56 != 0)
                      v55[v51 + v56] = 0x3FF0000000000000;
                    ++v37;
                    --v53;
                  }
                  while (v53);
                }
LABEL_88:
                v36 = v51 + v41;
                goto LABEL_97;
              case 4:
                v60 = *v37;
                v58 = v37 + 1;
                v59 = v60;
                if (v60)
                {
                  v61 = v676;
                  v62 = v58;
                  do
                  {
                    v64 = *v62;
                    v62 += 2;
                    v63 = v64;
                    if (v64 < v41)
                      v61[v63 + v36] = v58[1];
                    v58 = v62;
                    --v59;
                  }
                  while (v59);
                }
                else
                {
                  v62 = v58;
                }
                v36 += v41;
                v37 = v62;
                goto LABEL_97;
              case 7:
                v46 = *(_QWORD *)(v40 + 72);
                if (!v46)
                  goto LABEL_74;
                v43 = 0;
                v47 = 0;
                v48 = (char *)v676 + 8 * v36;
                do
                {
                  if (v47 < v41)
                    *(_QWORD *)&v48[8 * v47] = v37[v47];
                  ++v47;
                  v43 -= 8;
                }
                while (v46 != v47);
LABEL_73:
                v37 = (unint64_t *)((char *)v37 - v43);
LABEL_74:
                v36 += v41;
LABEL_97:
                if (++v35 == v34)
                  break;
                continue;
              default:
                goto LABEL_97;
            }
            break;
          }
        }
      }
      if (*((_QWORD *)&v24 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
        }
      }
      *((_QWORD *)v676 + **(_QWORD **)v5 - 1) = 0x3FF0000000000000;
      v683.__r_.__value_.__s.__data_[0] = 2;
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, void **, std::string *))(*v669 + 88))(v718, v669, &v676, &v683);
      switch(BYTE4(v714[1]))
      {
        case 2:
          v67 = *(unint64_t **)&v714[0];
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            v70 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              if (*(char *)(*(_QWORD *)&v714[0] + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v714[0] + 8));
              v71 = v70;
              v72 = 0x1012C404EF22A49;
              goto LABEL_316;
            }
          }
          break;
        case 3:
          v211 = *(unint64_t **)&v714[0];
          do
          {
            v212 = __ldaxr(v211);
            v213 = v212 - 1;
          }
          while (__stlxr(v213, v211));
          if (!v213)
          {
            v214 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              v215 = *(void **)(*(_QWORD *)&v714[0] + 8);
              if (v215)
              {
                *(_QWORD *)(*(_QWORD *)&v714[0] + 16) = v215;
                operator delete(v215);
              }
              v71 = v214;
              v72 = 0x1080C409938AC02;
              goto LABEL_316;
            }
          }
          break;
        case 4:
          v200 = *(unint64_t **)&v714[0];
          do
          {
            v201 = __ldaxr(v200);
            v202 = v201 - 1;
          }
          while (__stlxr(v202, v200));
          if (!v202)
          {
            v203 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              v678 = (void **)(*(_QWORD *)&v714[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v678);
              goto LABEL_309;
            }
          }
          break;
        case 5:
          v216 = *(unint64_t **)&v714[0];
          do
          {
            v217 = __ldaxr(v216);
            v218 = v217 - 1;
          }
          while (__stlxr(v218, v216));
          if (!v218)
          {
            v203 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              v678 = (void **)(*(_QWORD *)&v714[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v678);
LABEL_309:
              v71 = v203;
              v72 = 0x1020C405E66F15BLL;
              goto LABEL_316;
            }
          }
          break;
        case 8:
          v219 = *(unint64_t **)&v714[0];
          do
          {
            v220 = __ldaxr(v219);
            v221 = v220 - 1;
          }
          while (__stlxr(v221, v219));
          if (!v221)
          {
            v222 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v714[0] + 16));
              v71 = v222;
              v210 = -235920773;
              goto LABEL_315;
            }
          }
          break;
        case 9:
          v204 = *(unint64_t **)&v714[0];
          do
          {
            v205 = __ldaxr(v204);
            v206 = v205 - 1;
          }
          while (__stlxr(v206, v204));
          if (!v206)
          {
            v207 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              v208 = *(void **)(*(_QWORD *)&v714[0] + 48);
              if (v208)
              {
                *(_QWORD *)(*(_QWORD *)&v714[0] + 56) = v208;
                operator delete(v208);
              }
              v209 = *(void **)(*(_QWORD *)&v207 + 24);
              if (v209)
              {
                *(_QWORD *)(*(_QWORD *)&v207 + 32) = v209;
                operator delete(v209);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v207 + 8);
              v71 = v207;
              v210 = 2071181815;
LABEL_315:
              v72 = v210 | 0x1030C4000000000;
LABEL_316:
              MEMORY[0x219A19A08](*(_QWORD *)&v71, v72);
            }
          }
          break;
        default:
          break;
      }
      *(double *)((char *)v714 + 5) = *(double *)&v718[5];
      v714[0] = *(double *)v718;
      BYTE4(v714[1]) = v718[12];
      if (!**(_BYTE **)(v5 + 8))
        goto LABEL_436;
      v683.__r_.__value_.__s.__data_[0] = 7;
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, void **, std::string *))(*v669 + 88))(v718, v669, &v676, &v683);
      switch(BYTE4(v713[1]))
      {
        case 2:
          v223 = (unint64_t *)v713[0];
          do
          {
            v224 = __ldaxr(v223);
            v225 = --v224 == 0;
          }
          while (__stlxr(v224, v223));
          goto LABEL_390;
        case 3:
          v232 = (unint64_t *)v713[0];
          do
          {
            v233 = __ldaxr(v232);
            v234 = --v233 == 0;
          }
          while (__stlxr(v233, v232));
          goto LABEL_414;
        case 4:
          v226 = (unint64_t *)v713[0];
          do
          {
            v227 = __ldaxr(v226);
            v228 = --v227 == 0;
          }
          while (__stlxr(v227, v226));
          goto LABEL_398;
        case 5:
          v235 = (unint64_t *)v713[0];
          do
          {
            v236 = __ldaxr(v235);
            v237 = --v236 == 0;
          }
          while (__stlxr(v236, v235));
          goto LABEL_422;
        case 8:
          v238 = (unint64_t *)v713[0];
          do
          {
            v239 = __ldaxr(v238);
            v240 = --v239 == 0;
          }
          while (__stlxr(v239, v238));
          goto LABEL_429;
        case 9:
          v229 = (unint64_t *)v713[0];
          do
          {
            v230 = __ldaxr(v229);
            v231 = --v230 == 0;
          }
          while (__stlxr(v230, v229));
          goto LABEL_404;
        default:
          break;
      }
    }
    else
    {
      v119 = v698;
      *(_OWORD *)v718 = v698;
      if (*((_QWORD *)&v698 + 1))
      {
        v120 = (unint64_t *)(*((_QWORD *)&v698 + 1) + 8);
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
      }
      v719 = v700;
      *(_OWORD *)&v718[16] = v699;
      *(_QWORD *)&v674 = 0;
      if ((_BYTE)v700)
      {
        v122 = *(_QWORD *)(v119 + 56);
        if (v122)
        {
          v123 = 0;
          v124 = 0;
          v125 = (uint64_t *)(*(_QWORD *)(v119 + 96) + 8 * *(_QWORD *)&v718[16] + 8 * (*(_BYTE *)(v119 + 18) == 0));
          while (2)
          {
            v126 = *(_QWORD *)(*(_QWORD *)(v119 + 72) + 16 * v123);
            v127 = *(_QWORD *)(v126 + 64);
            switch(*(_DWORD *)(v126 + 24))
            {
              case 0:
                v128 = *v125++;
                v129 = v128;
                if (v127)
                {
                  v678 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, (int)v124, &v678) = v129;
                }
                goto LABEL_214;
              case 1:
                v140 = *v125++;
                v139 = v140;
                if (v140 < v127 && v139 != 0)
                {
                  v678 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, (int)v139 + (int)v124 - 1, &v678) = 0x3FF0000000000000;
                }
                goto LABEL_209;
              case 2:
                v130 = *(_QWORD *)(v126 + 72);
                if (!v130)
                  goto LABEL_214;
                v131 = 0;
                v132 = 0;
                v133 = v124 << 32;
                do
                {
                  if (v132 < v127)
                  {
                    v134 = v125[v132];
                    v678 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, v133 >> 32, &v678) = v134;
                  }
                  ++v132;
                  v133 += 0x100000000;
                  v131 -= 8;
                }
                while (v130 != v132);
                goto LABEL_196;
              case 3:
                v143 = *v125++;
                for (k = v143; k; --k)
                {
                  v144 = *v125;
                  if (*v125 < v127 && v144 != 0)
                  {
                    v678 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, (int)v144 + (int)v124 - 1, &v678) = 0x3FF0000000000000;
                  }
                  ++v125;
                }
LABEL_209:
                v124 = v124 + v127 - 1;
                goto LABEL_215;
              case 4:
                v147 = *v125++;
                for (m = v147; m; --m)
                {
                  v148 = *v125;
                  if (*v125 < v127)
                  {
                    v149 = v125[1];
                    v678 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, (int)v148 + (int)v124, &v678) = v149;
                  }
                  v125 += 2;
                }
                goto LABEL_214;
              case 7:
                v135 = *(_QWORD *)(v126 + 72);
                if (!v135)
                  goto LABEL_214;
                v131 = 0;
                v136 = 0;
                v137 = v124 << 32;
                do
                {
                  if (v136 < v127)
                  {
                    v138 = v125[v136];
                    v678 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, v137 >> 32, &v678) = v138;
                  }
                  ++v136;
                  v137 += 0x100000000;
                  v131 -= 8;
                }
                while (v135 != v136);
LABEL_196:
                v125 = (uint64_t *)((char *)v125 - v131);
                v5 = v668;
LABEL_214:
                v124 += v127;
LABEL_215:
                if (++v123 == v122)
                  break;
                continue;
              default:
                goto LABEL_215;
            }
            break;
          }
        }
      }
      v150 = *(std::__shared_weak_count **)&v718[8];
      a2 = v667;
      if (*(_QWORD *)&v718[8])
      {
        v151 = (unint64_t *)(*(_QWORD *)&v718[8] + 8);
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      v153 = **(_DWORD **)v5 - 1;
      *(_QWORD *)v718 = 0;
      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v673, v153, v718) = 0x3FF0000000000000;
      v683.__r_.__value_.__s.__data_[0] = 2;
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, char *, std::string *))(*v669 + 96))(v718, v669, v672, &v683);
      switch(BYTE4(v714[1]))
      {
        case 2:
          v154 = *(unint64_t **)&v714[0];
          do
          {
            v155 = __ldaxr(v154);
            v156 = v155 - 1;
          }
          while (__stlxr(v156, v154));
          if (!v156)
          {
            v157 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              if (*(char *)(*(_QWORD *)&v714[0] + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v714[0] + 8));
              v158 = v157;
              v159 = 0x1012C404EF22A49;
              goto LABEL_385;
            }
          }
          break;
        case 3:
          v267 = *(unint64_t **)&v714[0];
          do
          {
            v268 = __ldaxr(v267);
            v269 = v268 - 1;
          }
          while (__stlxr(v269, v267));
          if (!v269)
          {
            v270 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              v271 = *(void **)(*(_QWORD *)&v714[0] + 8);
              if (v271)
              {
                *(_QWORD *)(*(_QWORD *)&v714[0] + 16) = v271;
                operator delete(v271);
              }
              v158 = v270;
              v159 = 0x1080C409938AC02;
              goto LABEL_385;
            }
          }
          break;
        case 4:
          v256 = *(unint64_t **)&v714[0];
          do
          {
            v257 = __ldaxr(v256);
            v258 = v257 - 1;
          }
          while (__stlxr(v258, v256));
          if (!v258)
          {
            v259 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              v678 = (void **)(*(_QWORD *)&v714[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v678);
              goto LABEL_378;
            }
          }
          break;
        case 5:
          v272 = *(unint64_t **)&v714[0];
          do
          {
            v273 = __ldaxr(v272);
            v274 = v273 - 1;
          }
          while (__stlxr(v274, v272));
          if (!v274)
          {
            v259 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              v678 = (void **)(*(_QWORD *)&v714[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v678);
LABEL_378:
              v158 = v259;
              v159 = 0x1020C405E66F15BLL;
              goto LABEL_385;
            }
          }
          break;
        case 8:
          v275 = *(unint64_t **)&v714[0];
          do
          {
            v276 = __ldaxr(v275);
            v277 = v276 - 1;
          }
          while (__stlxr(v277, v275));
          if (!v277)
          {
            v278 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v714[0] + 16));
              v158 = v278;
              v266 = -235920773;
              goto LABEL_384;
            }
          }
          break;
        case 9:
          v260 = *(unint64_t **)&v714[0];
          do
          {
            v261 = __ldaxr(v260);
            v262 = v261 - 1;
          }
          while (__stlxr(v262, v260));
          if (!v262)
          {
            v263 = v714[0];
            if (*(_QWORD *)&v714[0])
            {
              v264 = *(void **)(*(_QWORD *)&v714[0] + 48);
              if (v264)
              {
                *(_QWORD *)(*(_QWORD *)&v714[0] + 56) = v264;
                operator delete(v264);
              }
              v265 = *(void **)(*(_QWORD *)&v263 + 24);
              if (v265)
              {
                *(_QWORD *)(*(_QWORD *)&v263 + 32) = v265;
                operator delete(v265);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v263 + 8);
              v158 = v263;
              v266 = 2071181815;
LABEL_384:
              v159 = v266 | 0x1030C4000000000;
LABEL_385:
              MEMORY[0x219A19A08](*(_QWORD *)&v158, v159);
            }
          }
          break;
        default:
          break;
      }
      *(double *)((char *)v714 + 5) = *(double *)&v718[5];
      v714[0] = *(double *)v718;
      BYTE4(v714[1]) = v718[12];
      if (!**(_BYTE **)(v5 + 8))
        goto LABEL_436;
      v683.__r_.__value_.__s.__data_[0] = 7;
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, char *, std::string *))(*v669 + 96))(v718, v669, v672, &v683);
      switch(BYTE4(v713[1]))
      {
        case 2:
          v279 = (unint64_t *)v713[0];
          do
          {
            v280 = __ldaxr(v279);
            v225 = --v280 == 0;
          }
          while (__stlxr(v280, v279));
LABEL_390:
          if (v225)
          {
            v281 = v713[0];
            if (v713[0])
            {
              if (*(char *)(v713[0] + 31) < 0)
                operator delete(*(void **)(v713[0] + 8));
              v282 = v281;
              v283 = 0x1012C404EF22A49;
              goto LABEL_434;
            }
          }
          break;
        case 3:
          v293 = (unint64_t *)v713[0];
          do
          {
            v294 = __ldaxr(v293);
            v234 = --v294 == 0;
          }
          while (__stlxr(v294, v293));
LABEL_414:
          if (v234)
          {
            v295 = v713[0];
            if (v713[0])
            {
              v296 = *(void **)(v713[0] + 8);
              if (v296)
              {
                *(_QWORD *)(v713[0] + 16) = v296;
                operator delete(v296);
              }
              v282 = v295;
              v283 = 0x1080C409938AC02;
              goto LABEL_434;
            }
          }
          break;
        case 4:
          v284 = (unint64_t *)v713[0];
          do
          {
            v285 = __ldaxr(v284);
            v228 = --v285 == 0;
          }
          while (__stlxr(v285, v284));
LABEL_398:
          if (v228)
          {
            v286 = v713[0];
            if (v713[0])
            {
              v678 = (void **)(v713[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v678);
              goto LABEL_426;
            }
          }
          break;
        case 5:
          v297 = (unint64_t *)v713[0];
          do
          {
            v298 = __ldaxr(v297);
            v237 = --v298 == 0;
          }
          while (__stlxr(v298, v297));
LABEL_422:
          if (v237)
          {
            v286 = v713[0];
            if (v713[0])
            {
              v678 = (void **)(v713[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v678);
LABEL_426:
              v282 = v286;
              v283 = 0x1020C405E66F15BLL;
              goto LABEL_434;
            }
          }
          break;
        case 8:
          v299 = (unint64_t *)v713[0];
          do
          {
            v300 = __ldaxr(v299);
            v240 = --v300 == 0;
          }
          while (__stlxr(v300, v299));
LABEL_429:
          if (v240)
          {
            v301 = v713[0];
            if (v713[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v713[0] + 16));
              v282 = v301;
              v292 = -235920773;
              goto LABEL_433;
            }
          }
          break;
        case 9:
          v287 = (unint64_t *)v713[0];
          do
          {
            v288 = __ldaxr(v287);
            v231 = --v288 == 0;
          }
          while (__stlxr(v288, v287));
LABEL_404:
          if (v231)
          {
            v289 = v713[0];
            if (v713[0])
            {
              v290 = *(void **)(v713[0] + 48);
              if (v290)
              {
                *(_QWORD *)(v713[0] + 56) = v290;
                operator delete(v290);
              }
              v291 = *(void **)(v289 + 24);
              if (v291)
              {
                *(_QWORD *)(v289 + 32) = v291;
                operator delete(v291);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v289 + 8);
              v282 = v289;
              v292 = 2071181815;
LABEL_433:
              v283 = v292 | 0x1030C4000000000;
LABEL_434:
              MEMORY[0x219A19A08](v282, v283);
            }
          }
          break;
        default:
          break;
      }
    }
    *(_QWORD *)((char *)v713 + 5) = *(_QWORD *)&v718[5];
    v713[0] = *(_QWORD *)v718;
    BYTE4(v713[1]) = v718[12];
LABEL_436:
    if (**(_BYTE **)(v5 + 8))
    {
      v302 = 0.0;
      v303 = 0.0;
      while (1)
      {
        v304 = 1;
        switch(BYTE4(v713[1]))
        {
          case 3:
            v305 = (_QWORD *)(v713[0] + 8);
            v306 = (_QWORD *)(v713[0] + 16);
            v307 = 3;
            goto LABEL_442;
          case 4:
            v305 = (_QWORD *)(v713[0] + 8);
            v306 = (_QWORD *)(v713[0] + 16);
            v307 = 4;
            goto LABEL_442;
          case 5:
            v305 = (_QWORD *)(v713[0] + 8);
            v306 = (_QWORD *)(v713[0] + 16);
            v307 = 5;
LABEL_442:
            v304 = (uint64_t)(*v306 - *v305) >> v307;
            break;
          case 9:
            v314 = *(uint64_t **)(v713[0] + 24);
            v313 = *(uint64_t **)(v713[0] + 32);
            if (v313 == v314)
            {
              v304 = 0;
            }
            else
            {
              v304 = *(_QWORD *)(v713[0] + 8);
              if (v304)
              {
                v304 = 1;
                do
                {
                  v315 = *v314++;
                  v304 *= v315;
                }
                while (v314 != v313);
              }
            }
            break;
          default:
            break;
        }
        if (*(_QWORD *)&v302 >= v304)
          break;
        switch(BYTE4(v713[1]))
        {
          case 2:
            v308 = v713[0];
            if (*(_QWORD *)v713[0] != 1)
            {
              v309 = (_QWORD *)operator new();
              v310 = v713[0];
              *v309 = *(_QWORD *)v713[0];
              v311 = (std::string *)(v309 + 1);
              if (*(char *)(v310 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v311, *(const std::string::value_type **)(v310 + 8), *(_QWORD *)(v310 + 16));
              }
              else
              {
                v312 = *(_OWORD *)(v310 + 8);
                v309[3] = *(_QWORD *)(v310 + 24);
                *(_OWORD *)&v311->__r_.__value_.__l.__data_ = v312;
              }
              v713[0] = v309;
              *v309 = 1;
              do
              {
                v351 = __ldaxr((unint64_t *)v308);
                v352 = v351 - 1;
              }
              while (__stlxr(v352, (unint64_t *)v308));
              if (!v352)
              {
                if (*(char *)(v308 + 31) < 0)
                  operator delete(*(void **)(v308 + 8));
                v328 = (unint64_t *)v308;
                v336 = 0x1012C404EF22A49;
                goto LABEL_497;
              }
            }
            break;
          case 3:
            v330 = (unint64_t *)v713[0];
            if (*(_QWORD *)v713[0] != 1)
            {
              v331 = (_QWORD *)operator new();
              v332 = v713[0];
              *v331 = *(_QWORD *)v713[0];
              v331[2] = 0;
              v331[3] = 0;
              v331[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v331 + 1, *(const void **)(v332 + 8), *(_QWORD *)(v332 + 16), (uint64_t)(*(_QWORD *)(v332 + 16) - *(_QWORD *)(v332 + 8)) >> 3);
              v713[0] = v331;
              *v331 = 1;
              do
              {
                v333 = __ldaxr(v330);
                v334 = v333 - 1;
              }
              while (__stlxr(v334, v330));
              if (!v334)
              {
                v335 = (void *)v330[1];
                if (v335)
                {
                  v330[2] = (unint64_t)v335;
                  operator delete(v335);
                }
                v328 = v330;
                v336 = 0x1080C409938AC02;
                goto LABEL_497;
              }
            }
            break;
          case 4:
            v316 = (unint64_t *)v713[0];
            if (*(_QWORD *)v713[0] != 1)
            {
              v317 = (_QWORD *)operator new();
              v318 = v713[0];
              *v317 = *(_QWORD *)v713[0];
              v317[2] = 0;
              v317[3] = 0;
              v317[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v317 + 1, *(uint64_t **)(v318 + 8), *(uint64_t **)(v318 + 16), (uint64_t)(*(_QWORD *)(v318 + 16) - *(_QWORD *)(v318 + 8)) >> 4);
              v713[0] = v317;
              *v317 = 1;
              do
              {
                v319 = __ldaxr(v316);
                v320 = v319 - 1;
              }
              while (__stlxr(v320, v316));
              if (!v320)
              {
                *(_QWORD *)v718 = v316 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
                goto LABEL_479;
              }
            }
            break;
          case 5:
            v316 = (unint64_t *)v713[0];
            if (*(_QWORD *)v713[0] != 1)
            {
              v337 = (_QWORD *)operator new();
              v338 = v713[0];
              *v337 = *(_QWORD *)v713[0];
              v337[2] = 0;
              v337[3] = 0;
              v337[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v337 + 1, *(uint64_t **)(v338 + 8), *(uint64_t **)(v338 + 16), (uint64_t)(*(_QWORD *)(v338 + 16) - *(_QWORD *)(v338 + 8)) >> 5);
              v713[0] = v337;
              *v337 = 1;
              do
              {
                v339 = __ldaxr(v316);
                v340 = v339 - 1;
              }
              while (__stlxr(v340, v316));
              if (!v340)
              {
                *(_QWORD *)v718 = v316 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
LABEL_479:
                v328 = v316;
                v336 = 0x1020C405E66F15BLL;
                goto LABEL_497;
              }
            }
            break;
          case 8:
            v341 = v713[0];
            if (*(_QWORD *)v713[0] != 1)
            {
              v342 = operator new();
              v343 = v713[0];
              *(_QWORD *)v342 = *(_QWORD *)v713[0];
              *(_QWORD *)(v342 + 8) = *(_QWORD *)(v343 + 8);
              v344 = *(_QWORD *)(v343 + 16);
              *(_QWORD *)(v342 + 16) = v344;
              if (v344)
              {
                v345 = (unsigned int *)(v344 + 8);
                do
                  v346 = __ldxr(v345);
                while (__stxr(v346 + 1, v345));
              }
              v347 = *(_OWORD *)(v343 + 24);
              v348 = *(_OWORD *)(v343 + 40);
              *(_OWORD *)(v342 + 56) = *(_OWORD *)(v343 + 56);
              *(_OWORD *)(v342 + 40) = v348;
              *(_OWORD *)(v342 + 24) = v347;
              v713[0] = v342;
              *(_QWORD *)v342 = 1;
              do
              {
                v349 = __ldaxr((unint64_t *)v341);
                v350 = v349 - 1;
              }
              while (__stlxr(v350, (unint64_t *)v341));
              if (!v350)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v341 + 16));
                v328 = (unint64_t *)v341;
                v329 = -235920773;
                goto LABEL_488;
              }
            }
            break;
          case 9:
            v321 = (unint64_t *)v713[0];
            if (*(_QWORD *)v713[0] != 1)
            {
              v322 = (_QWORD *)operator new();
              v323 = v713[0] + 8;
              *v322 = *(_QWORD *)v713[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v322 + 1, v323);
              v713[0] = v322;
              *v322 = 1;
              do
              {
                v324 = __ldaxr(v321);
                v325 = v324 - 1;
              }
              while (__stlxr(v325, v321));
              if (!v325)
              {
                v326 = (void *)v321[6];
                if (v326)
                {
                  v321[7] = (unint64_t)v326;
                  operator delete(v326);
                }
                v327 = (void *)v321[3];
                if (v327)
                {
                  v321[4] = (unint64_t)v327;
                  operator delete(v327);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v321 + 1));
                v328 = v321;
                v329 = 2071181815;
LABEL_488:
                v336 = v329 | 0x1030C4000000000;
LABEL_497:
                MEMORY[0x219A19A08](v328, v336);
              }
            }
            break;
          default:
            break;
        }
        if (BYTE4(v713[1]) == 1)
        {
          if (v302 != 0.0)
            goto LABEL_1050;
          v356 = (double *)v713;
        }
        else
        {
          if (BYTE4(v713[1]) == 9)
          {
            v355 = v713[0];
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v713[0] + 8));
            v353 = *(_QWORD **)(v355 + 8);
            *(_QWORD *)&v354 = *(_QWORD *)(v355 + 72) + *(_QWORD *)&v302;
          }
          else
          {
            if (BYTE4(v713[1]) != 3)
              goto LABEL_1050;
            v353 = (_QWORD *)(v713[0] + 8);
            v354 = v302;
          }
          v356 = (double *)(*v353 + 8 * *(_QWORD *)&v354);
        }
        if (v303 < *v356)
        {
          v357 = BYTE4(v713[1]);
          switch(BYTE4(v713[1]))
          {
            case 2:
              v358 = v713[0];
              if (*(_QWORD *)v713[0] == 1)
                goto LABEL_1050;
              v359 = (_QWORD *)operator new();
              v360 = v713[0];
              *v359 = *(_QWORD *)v713[0];
              v361 = (std::string *)(v359 + 1);
              if (*(char *)(v360 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v361, *(const std::string::value_type **)(v360 + 8), *(_QWORD *)(v360 + 16));
              }
              else
              {
                v362 = *(_OWORD *)(v360 + 8);
                v359[3] = *(_QWORD *)(v360 + 24);
                *(_OWORD *)&v361->__r_.__value_.__l.__data_ = v362;
              }
              v713[0] = v359;
              *v359 = 1;
              do
              {
                v398 = __ldaxr((unint64_t *)v358);
                v399 = v398 - 1;
              }
              while (__stlxr(v399, (unint64_t *)v358));
              if (v399)
                goto LABEL_555;
              if (*(char *)(v358 + 31) < 0)
                operator delete(*(void **)(v358 + 8));
              v375 = (unint64_t *)v358;
              v383 = 0x1012C404EF22A49;
              goto LABEL_554;
            case 3:
              v377 = (unint64_t *)v713[0];
              if (*(_QWORD *)v713[0] == 1)
                goto LABEL_560;
              v378 = (_QWORD *)operator new();
              v379 = v713[0];
              *v378 = *(_QWORD *)v713[0];
              v378[2] = 0;
              v378[3] = 0;
              v378[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v378 + 1, *(const void **)(v379 + 8), *(_QWORD *)(v379 + 16), (uint64_t)(*(_QWORD *)(v379 + 16) - *(_QWORD *)(v379 + 8)) >> 3);
              v713[0] = v378;
              *v378 = 1;
              do
              {
                v380 = __ldaxr(v377);
                v381 = v380 - 1;
              }
              while (__stlxr(v381, v377));
              if (v381)
                goto LABEL_555;
              v382 = (void *)v377[1];
              if (v382)
              {
                v377[2] = (unint64_t)v382;
                operator delete(v382);
              }
              v375 = v377;
              v383 = 0x1080C409938AC02;
              goto LABEL_554;
            case 4:
              v363 = (unint64_t *)v713[0];
              if (*(_QWORD *)v713[0] == 1)
                goto LABEL_1050;
              v364 = (_QWORD *)operator new();
              v365 = v713[0];
              *v364 = *(_QWORD *)v713[0];
              v364[2] = 0;
              v364[3] = 0;
              v364[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v364 + 1, *(uint64_t **)(v365 + 8), *(uint64_t **)(v365 + 16), (uint64_t)(*(_QWORD *)(v365 + 16) - *(_QWORD *)(v365 + 8)) >> 4);
              v713[0] = v364;
              *v364 = 1;
              do
              {
                v366 = __ldaxr(v363);
                v367 = v366 - 1;
              }
              while (__stlxr(v367, v363));
              if (v367)
                goto LABEL_555;
              *(_QWORD *)v718 = v363 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
              goto LABEL_537;
            case 5:
              v363 = (unint64_t *)v713[0];
              if (*(_QWORD *)v713[0] == 1)
                goto LABEL_1050;
              v384 = (_QWORD *)operator new();
              v385 = v713[0];
              *v384 = *(_QWORD *)v713[0];
              v384[2] = 0;
              v384[3] = 0;
              v384[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v384 + 1, *(uint64_t **)(v385 + 8), *(uint64_t **)(v385 + 16), (uint64_t)(*(_QWORD *)(v385 + 16) - *(_QWORD *)(v385 + 8)) >> 5);
              v713[0] = v384;
              *v384 = 1;
              do
              {
                v386 = __ldaxr(v363);
                v387 = v386 - 1;
              }
              while (__stlxr(v387, v363));
              if (v387)
                goto LABEL_555;
              *(_QWORD *)v718 = v363 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
LABEL_537:
              v375 = v363;
              v383 = 0x1020C405E66F15BLL;
              goto LABEL_554;
            case 8:
              v388 = v713[0];
              if (*(_QWORD *)v713[0] == 1)
                goto LABEL_1050;
              v389 = operator new();
              v390 = v713[0];
              *(_QWORD *)v389 = *(_QWORD *)v713[0];
              *(_QWORD *)(v389 + 8) = *(_QWORD *)(v390 + 8);
              v391 = *(_QWORD *)(v390 + 16);
              *(_QWORD *)(v389 + 16) = v391;
              if (v391)
              {
                v392 = (unsigned int *)(v391 + 8);
                do
                  v393 = __ldxr(v392);
                while (__stxr(v393 + 1, v392));
              }
              v394 = *(_OWORD *)(v390 + 24);
              v395 = *(_OWORD *)(v390 + 40);
              *(_OWORD *)(v389 + 56) = *(_OWORD *)(v390 + 56);
              *(_OWORD *)(v389 + 40) = v395;
              *(_OWORD *)(v389 + 24) = v394;
              v713[0] = v389;
              *(_QWORD *)v389 = 1;
              do
              {
                v396 = __ldaxr((unint64_t *)v388);
                v397 = v396 - 1;
              }
              while (__stlxr(v397, (unint64_t *)v388));
              if (v397)
                goto LABEL_555;
              boost::detail::shared_count::~shared_count((unsigned int **)(v388 + 16));
              v375 = (unint64_t *)v388;
              v376 = -235920773;
              goto LABEL_546;
            case 9:
              v368 = (_QWORD *)v713[0];
              if (*(_QWORD *)v713[0] == 1)
                goto LABEL_562;
              v369 = (_QWORD *)operator new();
              v370 = v713[0] + 8;
              *v369 = *(_QWORD *)v713[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v369 + 1, v370);
              v713[0] = v369;
              *v369 = 1;
              do
              {
                v371 = __ldaxr(v368);
                v372 = v371 - 1;
              }
              while (__stlxr(v372, v368));
              if (v372)
                goto LABEL_555;
              v373 = (void *)v368[6];
              if (v373)
              {
                v368[7] = v373;
                operator delete(v373);
              }
              v374 = (void *)v368[3];
              if (v374)
              {
                v368[4] = v374;
                operator delete(v374);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v368 + 1));
              v375 = v368;
              v376 = 2071181815;
LABEL_546:
              v383 = v376 | 0x1030C4000000000;
LABEL_554:
              MEMORY[0x219A19A08](v375, v383);
LABEL_555:
              v357 = BYTE4(v713[1]);
LABEL_556:
              if (v357 == 1)
              {
                if (v302 != 0.0)
                  goto LABEL_1050;
                v402 = (double *)v713;
              }
              else
              {
                if (v357 == 9)
                {
                  v368 = (_QWORD *)v713[0];
LABEL_562:
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v368 + 1);
                  v400 = (_QWORD *)v368[1];
                  *(_QWORD *)&v401 = v368[9] + *(_QWORD *)&v302;
                }
                else
                {
                  if (v357 != 3)
                    goto LABEL_1050;
                  v377 = (unint64_t *)v713[0];
LABEL_560:
                  v400 = v377 + 1;
                  v401 = v302;
                }
                v402 = (double *)(*v400 + 8 * *(_QWORD *)&v401);
              }
              v303 = *v402;
              switch(BYTE4(v714[1]))
              {
                case 2:
                  v403 = *(unint64_t **)&v714[0];
                  do
                  {
                    v404 = __ldaxr(v403);
                    v405 = v404 - 1;
                  }
                  while (__stlxr(v405, v403));
                  if (!v405)
                  {
                    v406 = v714[0];
                    if (*(_QWORD *)&v714[0])
                    {
                      if (*(char *)(*(_QWORD *)&v714[0] + 31) < 0)
                        operator delete(*(void **)(*(_QWORD *)&v714[0] + 8));
                      v407 = v406;
                      v408 = 0x1012C404EF22A49;
                      goto LABEL_607;
                    }
                  }
                  break;
                case 3:
                  v420 = *(unint64_t **)&v714[0];
                  do
                  {
                    v421 = __ldaxr(v420);
                    v422 = v421 - 1;
                  }
                  while (__stlxr(v422, v420));
                  if (!v422)
                  {
                    v423 = v714[0];
                    if (*(_QWORD *)&v714[0])
                    {
                      v424 = *(void **)(*(_QWORD *)&v714[0] + 8);
                      if (v424)
                      {
                        *(_QWORD *)(*(_QWORD *)&v714[0] + 16) = v424;
                        operator delete(v424);
                      }
                      v407 = v423;
                      v408 = 0x1080C409938AC02;
                      goto LABEL_607;
                    }
                  }
                  break;
                case 4:
                  v409 = *(unint64_t **)&v714[0];
                  do
                  {
                    v410 = __ldaxr(v409);
                    v411 = v410 - 1;
                  }
                  while (__stlxr(v411, v409));
                  if (!v411)
                  {
                    v412 = v714[0];
                    if (*(_QWORD *)&v714[0])
                    {
                      *(_QWORD *)v718 = *(_QWORD *)&v714[0] + 8;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
                      goto LABEL_600;
                    }
                  }
                  break;
                case 5:
                  v425 = *(unint64_t **)&v714[0];
                  do
                  {
                    v426 = __ldaxr(v425);
                    v427 = v426 - 1;
                  }
                  while (__stlxr(v427, v425));
                  if (!v427)
                  {
                    v412 = v714[0];
                    if (*(_QWORD *)&v714[0])
                    {
                      *(_QWORD *)v718 = *(_QWORD *)&v714[0] + 8;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
LABEL_600:
                      v407 = v412;
                      v408 = 0x1020C405E66F15BLL;
                      goto LABEL_607;
                    }
                  }
                  break;
                case 8:
                  v428 = *(unint64_t **)&v714[0];
                  do
                  {
                    v429 = __ldaxr(v428);
                    v430 = v429 - 1;
                  }
                  while (__stlxr(v430, v428));
                  if (!v430)
                  {
                    v431 = v714[0];
                    if (*(_QWORD *)&v714[0])
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v714[0] + 16));
                      v407 = v431;
                      v419 = -235920773;
                      goto LABEL_606;
                    }
                  }
                  break;
                case 9:
                  v413 = *(unint64_t **)&v714[0];
                  do
                  {
                    v414 = __ldaxr(v413);
                    v415 = v414 - 1;
                  }
                  while (__stlxr(v415, v413));
                  if (!v415)
                  {
                    v416 = v714[0];
                    if (*(_QWORD *)&v714[0])
                    {
                      v417 = *(void **)(*(_QWORD *)&v714[0] + 48);
                      if (v417)
                      {
                        *(_QWORD *)(*(_QWORD *)&v714[0] + 56) = v417;
                        operator delete(v417);
                      }
                      v418 = *(void **)(*(_QWORD *)&v416 + 24);
                      if (v418)
                      {
                        *(_QWORD *)(*(_QWORD *)&v416 + 32) = v418;
                        operator delete(v418);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v416 + 8);
                      v407 = v416;
                      v419 = 2071181815;
LABEL_606:
                      v408 = v419 | 0x1030C4000000000;
LABEL_607:
                      MEMORY[0x219A19A08](*(_QWORD *)&v407, v408);
                    }
                  }
                  break;
                default:
                  break;
              }
              LODWORD(v714[1]) = 0;
              BYTE4(v714[1]) = 0;
              v714[0] = v302;
              break;
            default:
              goto LABEL_556;
          }
        }
        ++*(_QWORD *)&v302;
      }
      if (!v708)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, _QWORD *))(*v708 + 48))(v708, v713);
      v432 = 0;
      v433 = *(_QWORD *)(*(_QWORD *)(v669[47] + 24) + 32);
      switch(BYTE4(v714[1]))
      {
        case 0:
          v432 = *(_QWORD *)&v714[0];
          goto LABEL_639;
        case 1:
          v432 = (uint64_t)v714[0];
          goto LABEL_639;
        case 2:
          v436 = v714[0];
          __idx = 0;
          v437 = (char *)(*(_QWORD *)&v714[0] + 8);
          if (*(char *)(*(_QWORD *)&v714[0] + 31) < 0)
            v437 = *(char **)(*(_QWORD *)&v714[0] + 8);
          v438 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v718, v437);
          v432 = std::stoll(v438, &__idx, 10);
          if ((v718[23] & 0x80000000) != 0)
            operator delete(*(void **)v718);
          if (*(char *)(*(_QWORD *)&v436 + 31) < 0)
            v439 = *(_QWORD *)(*(_QWORD *)&v436 + 16);
          else
            v439 = *(unsigned __int8 *)(*(_QWORD *)&v436 + 31);
          if (__idx != v439)
          {
            v559 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v560 = std::string::append(&v683, " cannot be interpreted as an integer");
            v561 = *(_OWORD *)&v560->__r_.__value_.__l.__data_;
            *(_QWORD *)&v718[16] = *((_QWORD *)&v560->__r_.__value_.__l + 2);
            *(_OWORD *)v718 = v561;
            v560->__r_.__value_.__l.__size_ = 0;
            v560->__r_.__value_.__r.__words[2] = 0;
            v560->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v559, (const std::string *)v718);
            __cxa_throw(v559, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_639;
        case 3:
          memset(v718, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v718, *(const void **)(*(_QWORD *)&v714[0] + 8), *(_QWORD *)(*(_QWORD *)&v714[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v714[0] + 16) - *(_QWORD *)(*(_QWORD *)&v714[0] + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (*(_QWORD *)v718)
          {
            *(_QWORD *)&v718[8] = *(_QWORD *)v718;
            operator delete(*(void **)v718);
          }
          goto LABEL_638;
        case 4:
          memset(v718, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v718, *(uint64_t **)(*(_QWORD *)&v714[0] + 8), *(uint64_t **)(*(_QWORD *)&v714[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v714[0] + 16) - *(_QWORD *)(*(_QWORD *)&v714[0] + 8)) >> 4);
          turi::flexible_type_fail(0);
          v683.__r_.__value_.__r.__words[0] = (std::string::size_type)v718;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v683);
          goto LABEL_638;
        case 5:
          memset(v718, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v718, *(uint64_t **)(*(_QWORD *)&v714[0] + 8), *(uint64_t **)(*(_QWORD *)&v714[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v714[0] + 16) - *(_QWORD *)(*(_QWORD *)&v714[0] + 8)) >> 5);
          turi::flexible_type_fail(0);
          v683.__r_.__value_.__r.__words[0] = (std::string::size_type)v718;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v683);
          goto LABEL_638;
        case 6:
          v432 = (uint64_t)(*(_QWORD *)&v714[0] << 8) >> 8;
          goto LABEL_639;
        case 7:
          goto LABEL_639;
        case 8:
          v440 = v714[0];
          v441 = *(unsigned int **)(*(_QWORD *)&v714[0] + 16);
          v678 = *(void ***)(*(_QWORD *)&v714[0] + 8);
          v679 = v441;
          if (v441)
          {
            v442 = v441 + 2;
            do
              v443 = __ldxr(v442);
            while (__stxr(v443 + 1, v442));
          }
          v444 = *(_OWORD *)(*(_QWORD *)&v440 + 24);
          v445 = *(_OWORD *)(*(_QWORD *)&v440 + 56);
          v681 = *(_OWORD *)(*(_QWORD *)&v440 + 40);
          v682 = v445;
          v680 = v444;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v679);
          goto LABEL_638;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(v718, *(_QWORD *)&v714[0] + 8);
          turi::flexible_type_fail(0);
          if (v720)
          {
            v721 = v720;
            operator delete(v720);
          }
          if (*(_QWORD *)&v718[16])
          {
            *(_QWORD *)&v718[24] = *(_QWORD *)&v718[16];
            operator delete(*(void **)&v718[16]);
          }
          v432 = *(_QWORD *)&v718[8];
          if (!*(_QWORD *)&v718[8])
            goto LABEL_639;
          v434 = (unint64_t *)(*(_QWORD *)&v718[8] + 8);
          do
            v435 = __ldaxr(v434);
          while (__stlxr(v435 - 1, v434));
          if (!v435)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v432 + 16))(v432);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v432);
          }
LABEL_638:
          v432 = 0;
LABEL_639:
          if (!v702)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, uint64_t))(*v702 + 48))(v702, *(_QWORD *)(v433 + 80) + 16 * v432);
          break;
        default:
          goto LABEL_1050;
      }
    }
    if (!*(_BYTE *)(v698 + 16) || *(_BYTE *)(v698 + 17) == 0)
    {
      *(double *)&v447 = 0.0;
    }
    else
    {
      v448 = (_QWORD *)(v698 + 24);
      if (!*(_BYTE *)(v698 + 18))
        v448 = (_QWORD *)(*(_QWORD *)(v698 + 96) + 8 * v699);
      v447 = *(uint64_t *)(*(_QWORD *)(v698 + 96) + 8 * v699 + 8 * *v448 - 8);
    }
    v449 = 0;
    switch(v717)
    {
      case 2:
        v450 = *(unint64_t **)&v715;
        do
          v451 = __ldaxr(v450);
        while (__stlxr(v451 - 1, v450));
        if (v451 == 1)
        {
          v452 = v715;
          if (v715 != 0.0)
          {
            if (*(char *)(*(_QWORD *)&v715 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v715 + 8));
            MEMORY[0x219A19A08](*(_QWORD *)&v452, 0x1012C404EF22A49);
          }
        }
        goto LABEL_693;
      case 3:
        v463 = *(unint64_t **)&v715;
        do
          v464 = __ldaxr(v463);
        while (__stlxr(v464 - 1, v463));
        if (v464 != 1)
          goto LABEL_693;
        v465 = v715;
        if (v715 == 0.0)
          goto LABEL_692;
        v466 = *(void **)(*(_QWORD *)&v715 + 8);
        if (v466)
        {
          *(_QWORD *)(*(_QWORD *)&v715 + 16) = v466;
          operator delete(v466);
        }
        v461 = v465;
        v467 = 0x1080C409938AC02;
        goto LABEL_691;
      case 4:
        v453 = *(unint64_t **)&v715;
        do
          v454 = __ldaxr(v453);
        while (__stlxr(v454 - 1, v453));
        if (v454 != 1)
          goto LABEL_693;
        v455 = v715;
        if (v715 == 0.0)
          goto LABEL_692;
        *(_QWORD *)v718 = *(_QWORD *)&v715 + 8;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
        goto LABEL_684;
      case 5:
        v468 = *(unint64_t **)&v715;
        do
          v469 = __ldaxr(v468);
        while (__stlxr(v469 - 1, v468));
        if (v469 != 1)
          goto LABEL_693;
        v455 = v715;
        if (v715 == 0.0)
          goto LABEL_692;
        *(_QWORD *)v718 = *(_QWORD *)&v715 + 8;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v718);
LABEL_684:
        v461 = v455;
        v467 = 0x1020C405E66F15BLL;
        goto LABEL_691;
      case 8:
        v470 = *(unint64_t **)&v715;
        do
          v471 = __ldaxr(v470);
        while (__stlxr(v471 - 1, v470));
        if (v471 != 1)
          goto LABEL_693;
        v472 = v715;
        if (v715 == 0.0)
          goto LABEL_692;
        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v715 + 16));
        v461 = v472;
        v462 = -235920773;
        goto LABEL_690;
      case 9:
        v456 = *(unint64_t **)&v715;
        do
          v457 = __ldaxr(v456);
        while (__stlxr(v457 - 1, v456));
        if (v457 == 1)
        {
          v458 = v715;
          if (v715 != 0.0)
          {
            v459 = *(void **)(*(_QWORD *)&v715 + 48);
            if (v459)
            {
              *(_QWORD *)(*(_QWORD *)&v715 + 56) = v459;
              operator delete(v459);
            }
            v460 = *(void **)(*(_QWORD *)&v458 + 24);
            if (v460)
            {
              *(_QWORD *)(*(_QWORD *)&v458 + 32) = v460;
              operator delete(v460);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v458 + 8);
            v461 = v458;
            v462 = 2071181815;
LABEL_690:
            v467 = v462 | 0x1030C4000000000;
LABEL_691:
            MEMORY[0x219A19A08](*(_QWORD *)&v461, v467);
          }
LABEL_692:
          v449 = 0;
          v715 = 0.0;
        }
        else
        {
LABEL_693:
          v449 = 0;
        }
        break;
      default:
        break;
    }
LABEL_784:
    v716 = 0;
    v717 = v449;
    v715 = *(double *)&v447;
    v516 = **(_QWORD **)(v5 + 64);
    if (*(_QWORD *)(*(_QWORD *)(v5 + 64) + 8) != v516)
      break;
LABEL_878:
    if (v700 | v692)
    {
      v554 = (uint64_t *)(*(_QWORD *)(v698 + 96) + 8 * v699);
      if (v693)
        v554 = &v694;
      *(_QWORD *)&v699 = *v554 + v699;
    }
    v555 = v696 + 1;
    v556 = v695;
    v557 = ++v696 - v691 * v697;
    *((_QWORD *)&v699 + 1) = v557;
    if (v557 == v691 && v555 != v695)
    {
      turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v685);
      v555 = v696;
      v556 = v695;
    }
    if (v555 == v556)
      goto LABEL_37;
  }
  v517 = 0;
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v516 + 16 * v517) + 32))(*(_QWORD *)(v516 + 16 * v517)) & 1) != 0)
    {
      v518 = (double *)v713;
      goto LABEL_814;
    }
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(**(_QWORD **)(v5 + 64) + 16 * v517) + 16))(v718);
    if ((v718[23] & 0x80000000) == 0)
    {
      if (v718[23] == 19)
      {
        v519 = *(_QWORD *)v718 == 0x6966697373616C63 && *(_QWORD *)&v718[8] == 0x72756363615F7265;
        if (v519 && *(_QWORD *)&v718[11] == 0x7963617275636361)
          goto LABEL_810;
      }
      goto LABEL_813;
    }
    if (*(_QWORD *)&v718[8] == 19)
      break;
    operator delete(*(void **)v718);
LABEL_813:
    v518 = v714;
LABEL_814:
    v526 = *(_QWORD *)(**(_QWORD **)(v5 + 64) + 16 * v517);
    (*(void (**)(uint64_t, double *, double *, uint64_t))(*(_QWORD *)v526 + 48))(v526, &v715, v518, a2);
LABEL_815:
    ++v517;
    v516 = **(_QWORD **)(v5 + 64);
    if (v517 >= (*(_QWORD *)(*(_QWORD *)(v5 + 64) + 8) - v516) >> 4)
      goto LABEL_878;
  }
  v523 = **(_QWORD **)v718 != 0x6966697373616C63
      || *(_QWORD *)(*(_QWORD *)v718 + 8) != 0x72756363615F7265
      || *(_QWORD *)(*(_QWORD *)v718 + 11) != 0x7963617275636361;
  operator delete(*(void **)v718);
  if (v523)
    goto LABEL_813;
LABEL_810:
  v524 = 0;
  v525 = *(_QWORD *)(**(_QWORD **)(v5 + 64) + 16 * v517);
  switch(v717)
  {
    case 0:
      v524 = *(_QWORD *)&v715;
      goto LABEL_843;
    case 1:
      v524 = (uint64_t)v715;
      goto LABEL_843;
    case 2:
      v530 = v715;
      __idx = 0;
      v531 = (char *)(*(_QWORD *)&v715 + 8);
      if (*(char *)(*(_QWORD *)&v715 + 31) < 0)
        v531 = *(char **)(*(_QWORD *)&v715 + 8);
      v532 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v718, v531);
      v524 = std::stoll(v532, &__idx, 10);
      if ((v718[23] & 0x80000000) != 0)
        operator delete(*(void **)v718);
      if (*(char *)(*(_QWORD *)&v530 + 31) < 0)
        v533 = *(_QWORD *)(*(_QWORD *)&v530 + 16);
      else
        v533 = *(unsigned __int8 *)(*(_QWORD *)&v530 + 31);
      if (__idx != v533)
      {
        v659 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v660 = std::string::append(&v683, " cannot be interpreted as an integer");
        v661 = *(_OWORD *)&v660->__r_.__value_.__l.__data_;
        *(_QWORD *)&v718[16] = *((_QWORD *)&v660->__r_.__value_.__l + 2);
        *(_OWORD *)v718 = v661;
        v660->__r_.__value_.__l.__size_ = 0;
        v660->__r_.__value_.__r.__words[2] = 0;
        v660->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v659, (const std::string *)v718);
        __cxa_throw(v659, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_843;
    case 3:
      memset(v718, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v718, *(const void **)(*(_QWORD *)&v715 + 8), *(_QWORD *)(*(_QWORD *)&v715 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v715 + 16) - *(_QWORD *)(*(_QWORD *)&v715 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (*(_QWORD *)v718)
      {
        *(_QWORD *)&v718[8] = *(_QWORD *)v718;
        operator delete(*(void **)v718);
      }
      goto LABEL_842;
    case 4:
      memset(v718, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v718, *(uint64_t **)(*(_QWORD *)&v715 + 8), *(uint64_t **)(*(_QWORD *)&v715 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v715 + 16) - *(_QWORD *)(*(_QWORD *)&v715 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v683.__r_.__value_.__r.__words[0] = (std::string::size_type)v718;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v683);
      goto LABEL_842;
    case 5:
      memset(v718, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v718, *(uint64_t **)(*(_QWORD *)&v715 + 8), *(uint64_t **)(*(_QWORD *)&v715 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v715 + 16) - *(_QWORD *)(*(_QWORD *)&v715 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v683.__r_.__value_.__r.__words[0] = (std::string::size_type)v718;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v683);
      goto LABEL_842;
    case 6:
      v524 = (uint64_t)(*(_QWORD *)&v715 << 8) >> 8;
      goto LABEL_843;
    case 7:
      goto LABEL_843;
    case 8:
      v534 = v715;
      v535 = *(unsigned int **)(*(_QWORD *)&v715 + 16);
      v678 = *(void ***)(*(_QWORD *)&v715 + 8);
      v679 = v535;
      if (v535)
      {
        v536 = v535 + 2;
        do
          v537 = __ldxr(v536);
        while (__stxr(v537 + 1, v536));
      }
      v538 = *(_OWORD *)(*(_QWORD *)&v534 + 24);
      v539 = *(_OWORD *)(*(_QWORD *)&v534 + 56);
      v681 = *(_OWORD *)(*(_QWORD *)&v534 + 40);
      v682 = v539;
      v680 = v538;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v679);
      goto LABEL_842;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(v718, *(_QWORD *)&v715 + 8);
      turi::flexible_type_fail(0);
      if (v720)
      {
        v721 = v720;
        operator delete(v720);
      }
      if (*(_QWORD *)&v718[16])
      {
        *(_QWORD *)&v718[24] = *(_QWORD *)&v718[16];
        operator delete(*(void **)&v718[16]);
      }
      v527 = *(std::__shared_weak_count **)&v718[8];
      if (*(_QWORD *)&v718[8])
      {
        v528 = (unint64_t *)(*(_QWORD *)&v718[8] + 8);
        do
          v529 = __ldaxr(v528);
        while (__stlxr(v529 - 1, v528));
        if (!v529)
        {
          ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
          std::__shared_weak_count::__release_weak(v527);
        }
      }
LABEL_842:
      v524 = 0;
LABEL_843:
      v671 = v524;
      v540 = 0;
      switch(BYTE4(v714[1]))
      {
        case 0:
          v540 = *(_QWORD *)&v714[0];
          goto LABEL_871;
        case 1:
          v540 = (uint64_t)v714[0];
          goto LABEL_871;
        case 2:
          v544 = v714[0];
          __idx = 0;
          v545 = (char *)(*(_QWORD *)&v714[0] + 8);
          if (*(char *)(*(_QWORD *)&v714[0] + 31) < 0)
            v545 = *(char **)(*(_QWORD *)&v714[0] + 8);
          v546 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v718, v545);
          v540 = std::stoll(v546, &__idx, 10);
          if ((v718[23] & 0x80000000) != 0)
            operator delete(*(void **)v718);
          if (*(char *)(*(_QWORD *)&v544 + 31) < 0)
            v547 = *(_QWORD *)(*(_QWORD *)&v544 + 16);
          else
            v547 = *(unsigned __int8 *)(*(_QWORD *)&v544 + 31);
          if (__idx != v547)
          {
            v662 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v663 = std::string::append(&v683, " cannot be interpreted as an integer");
            v664 = *(_OWORD *)&v663->__r_.__value_.__l.__data_;
            *(_QWORD *)&v718[16] = *((_QWORD *)&v663->__r_.__value_.__l + 2);
            *(_OWORD *)v718 = v664;
            v663->__r_.__value_.__l.__size_ = 0;
            v663->__r_.__value_.__r.__words[2] = 0;
            v663->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v662, (const std::string *)v718);
            __cxa_throw(v662, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_871;
        case 3:
          memset(v718, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v718, *(const void **)(*(_QWORD *)&v714[0] + 8), *(_QWORD *)(*(_QWORD *)&v714[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v714[0] + 16) - *(_QWORD *)(*(_QWORD *)&v714[0] + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (*(_QWORD *)v718)
          {
            *(_QWORD *)&v718[8] = *(_QWORD *)v718;
            operator delete(*(void **)v718);
          }
          goto LABEL_870;
        case 4:
          memset(v718, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v718, *(uint64_t **)(*(_QWORD *)&v714[0] + 8), *(uint64_t **)(*(_QWORD *)&v714[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v714[0] + 16) - *(_QWORD *)(*(_QWORD *)&v714[0] + 8)) >> 4);
          turi::flexible_type_fail(0);
          v683.__r_.__value_.__r.__words[0] = (std::string::size_type)v718;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v683);
          goto LABEL_870;
        case 5:
          memset(v718, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v718, *(uint64_t **)(*(_QWORD *)&v714[0] + 8), *(uint64_t **)(*(_QWORD *)&v714[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v714[0] + 16) - *(_QWORD *)(*(_QWORD *)&v714[0] + 8)) >> 5);
          turi::flexible_type_fail(0);
          v683.__r_.__value_.__r.__words[0] = (std::string::size_type)v718;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v683);
          goto LABEL_870;
        case 6:
          v540 = (uint64_t)(*(_QWORD *)&v714[0] << 8) >> 8;
          goto LABEL_871;
        case 7:
          goto LABEL_871;
        case 8:
          v548 = v714[0];
          v549 = *(unsigned int **)(*(_QWORD *)&v714[0] + 16);
          v678 = *(void ***)(*(_QWORD *)&v714[0] + 8);
          v679 = v549;
          if (v549)
          {
            v550 = v549 + 2;
            do
              v551 = __ldxr(v550);
            while (__stxr(v551 + 1, v550));
          }
          v552 = *(_OWORD *)(*(_QWORD *)&v548 + 24);
          v553 = *(_OWORD *)(*(_QWORD *)&v548 + 56);
          v681 = *(_OWORD *)(*(_QWORD *)&v548 + 40);
          v682 = v553;
          v680 = v552;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v679);
          goto LABEL_870;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(v718, *(_QWORD *)&v714[0] + 8);
          turi::flexible_type_fail(0);
          if (v720)
          {
            v721 = v720;
            operator delete(v720);
          }
          if (*(_QWORD *)&v718[16])
          {
            *(_QWORD *)&v718[24] = *(_QWORD *)&v718[16];
            operator delete(*(void **)&v718[16]);
          }
          v541 = *(std::__shared_weak_count **)&v718[8];
          if (*(_QWORD *)&v718[8])
          {
            v542 = (unint64_t *)(*(_QWORD *)&v718[8] + 8);
            do
              v543 = __ldaxr(v542);
            while (__stlxr(v543 - 1, v542));
            if (!v543)
            {
              ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
              std::__shared_weak_count::__release_weak(v541);
            }
          }
LABEL_870:
          v540 = 0;
LABEL_871:
          v670 = v540;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v525 + 56))(v525, &v671, &v670, a2);
          goto LABEL_815;
        default:
          goto LABEL_1050;
      }
    default:
      break;
  }
LABEL_1050:
  turi::flexible_type_fail(0);
  __break(1u);
}

void sub_2185AA47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, boost::detail::shared_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43)
{
  void *v43;
  int v44;
  uint64_t v45;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  unsigned int v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  void *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;

  if (*(char *)(v45 - 169) < 0)
    operator delete(*(void **)(v45 - 192));
  if (a41 < 0)
  {
    operator delete(__p);
    if ((v44 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v44)
  {
LABEL_8:
    turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)&a43);
    turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&STACK[0x260]);
    turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&STACK[0x2C0]);
    Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(a17);
    free(a26);
    switch(*(_BYTE *)(v45 - 228))
    {
      case 2:
        v47 = *(unint64_t **)(v45 - 240);
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (v49)
          goto LABEL_46;
        v50 = *(_QWORD *)(v45 - 240);
        if (!v50)
          goto LABEL_46;
        if (*(char *)(v50 + 31) < 0)
          operator delete(*(void **)(v50 + 8));
        v51 = (_QWORD *)v50;
        v52 = 0x1012C404EF22A49;
        goto LABEL_45;
      case 3:
        v62 = *(unint64_t **)(v45 - 240);
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (v64)
          goto LABEL_46;
        v65 = *(_QWORD **)(v45 - 240);
        if (!v65)
          goto LABEL_46;
        v66 = (void *)v65[1];
        if (v66)
        {
          v65[2] = v66;
          operator delete(v66);
        }
        v51 = v65;
        v52 = 0x1080C409938AC02;
        goto LABEL_45;
      case 4:
        v53 = *(unint64_t **)(v45 - 240);
        do
        {
          v54 = __ldaxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (v55)
          goto LABEL_46;
        v56 = *(_QWORD **)(v45 - 240);
        if (!v56)
          goto LABEL_46;
        a43 = (uint64_t)(v56 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
        goto LABEL_38;
      case 5:
        v67 = *(unint64_t **)(v45 - 240);
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (v69)
          goto LABEL_46;
        v56 = *(_QWORD **)(v45 - 240);
        if (!v56)
          goto LABEL_46;
        a43 = (uint64_t)(v56 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
LABEL_38:
        v51 = v56;
        v52 = 0x1020C405E66F15BLL;
        goto LABEL_45;
      case 8:
        v70 = *(unint64_t **)(v45 - 240);
        do
        {
          v71 = __ldaxr(v70);
          v72 = v71 - 1;
        }
        while (__stlxr(v72, v70));
        if (v72)
          goto LABEL_46;
        v73 = *(_QWORD *)(v45 - 240);
        if (!v73)
          goto LABEL_46;
        boost::detail::shared_count::~shared_count((unsigned int **)(v73 + 16));
        v51 = (_QWORD *)v73;
        v61 = -235920773;
        goto LABEL_44;
      case 9:
        v57 = *(unint64_t **)(v45 - 240);
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (v59)
          goto LABEL_46;
        v60 = *(_QWORD **)(v45 - 240);
        if (!v60)
          goto LABEL_46;
        v51 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v60);
        v61 = 2071181815;
LABEL_44:
        v52 = v61 | 0x1030C4000000000;
LABEL_45:
        MEMORY[0x219A19A08](v51, v52);
LABEL_46:
        switch(*(_BYTE *)(v45 - 212))
        {
          case 2:
            v74 = *(unint64_t **)(v45 - 224);
            do
            {
              v75 = __ldaxr(v74);
              v76 = v75 - 1;
            }
            while (__stlxr(v76, v74));
            if (v76)
              goto LABEL_84;
            v77 = *(_QWORD *)(v45 - 224);
            if (!v77)
              goto LABEL_84;
            if (*(char *)(v77 + 31) < 0)
              operator delete(*(void **)(v77 + 8));
            v78 = (_QWORD *)v77;
            v79 = 0x1012C404EF22A49;
            goto LABEL_83;
          case 3:
            v89 = *(unint64_t **)(v45 - 224);
            do
            {
              v90 = __ldaxr(v89);
              v91 = v90 - 1;
            }
            while (__stlxr(v91, v89));
            if (v91)
              goto LABEL_84;
            v92 = *(_QWORD **)(v45 - 224);
            if (!v92)
              goto LABEL_84;
            v93 = (void *)v92[1];
            if (v93)
            {
              v92[2] = v93;
              operator delete(v93);
            }
            v78 = v92;
            v79 = 0x1080C409938AC02;
            goto LABEL_83;
          case 4:
            v80 = *(unint64_t **)(v45 - 224);
            do
            {
              v81 = __ldaxr(v80);
              v82 = v81 - 1;
            }
            while (__stlxr(v82, v80));
            if (v82)
              goto LABEL_84;
            v83 = *(_QWORD **)(v45 - 224);
            if (!v83)
              goto LABEL_84;
            a43 = (uint64_t)(v83 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
            goto LABEL_76;
          case 5:
            v94 = *(unint64_t **)(v45 - 224);
            do
            {
              v95 = __ldaxr(v94);
              v96 = v95 - 1;
            }
            while (__stlxr(v96, v94));
            if (v96)
              goto LABEL_84;
            v83 = *(_QWORD **)(v45 - 224);
            if (!v83)
              goto LABEL_84;
            a43 = (uint64_t)(v83 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
LABEL_76:
            v78 = v83;
            v79 = 0x1020C405E66F15BLL;
            goto LABEL_83;
          case 8:
            v97 = *(unint64_t **)(v45 - 224);
            do
            {
              v98 = __ldaxr(v97);
              v99 = v98 - 1;
            }
            while (__stlxr(v99, v97));
            if (v99)
              goto LABEL_84;
            v100 = *(_QWORD *)(v45 - 224);
            if (!v100)
              goto LABEL_84;
            boost::detail::shared_count::~shared_count((unsigned int **)(v100 + 16));
            v78 = (_QWORD *)v100;
            v88 = -235920773;
            goto LABEL_82;
          case 9:
            v84 = *(unint64_t **)(v45 - 224);
            do
            {
              v85 = __ldaxr(v84);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v84));
            if (v86)
              goto LABEL_84;
            v87 = *(_QWORD **)(v45 - 224);
            if (!v87)
              goto LABEL_84;
            v78 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v87);
            v88 = 2071181815;
LABEL_82:
            v79 = v88 | 0x1030C4000000000;
LABEL_83:
            MEMORY[0x219A19A08](v78, v79);
LABEL_84:
            switch(*(_BYTE *)(v45 - 196))
            {
              case 2:
                v101 = *(unint64_t **)(v45 - 208);
                do
                {
                  v102 = __ldaxr(v101);
                  v103 = v102 - 1;
                }
                while (__stlxr(v103, v101));
                if (v103)
                  goto LABEL_122;
                v104 = *(_QWORD *)(v45 - 208);
                if (!v104)
                  goto LABEL_122;
                if (*(char *)(v104 + 31) < 0)
                  operator delete(*(void **)(v104 + 8));
                v105 = (_QWORD *)v104;
                v106 = 0x1012C404EF22A49;
                goto LABEL_121;
              case 3:
                v116 = *(unint64_t **)(v45 - 208);
                do
                {
                  v117 = __ldaxr(v116);
                  v118 = v117 - 1;
                }
                while (__stlxr(v118, v116));
                if (v118)
                  goto LABEL_122;
                v119 = *(_QWORD **)(v45 - 208);
                if (!v119)
                  goto LABEL_122;
                v120 = (void *)v119[1];
                if (v120)
                {
                  v119[2] = v120;
                  operator delete(v120);
                }
                v105 = v119;
                v106 = 0x1080C409938AC02;
                goto LABEL_121;
              case 4:
                v107 = *(unint64_t **)(v45 - 208);
                do
                {
                  v108 = __ldaxr(v107);
                  v109 = v108 - 1;
                }
                while (__stlxr(v109, v107));
                if (v109)
                  goto LABEL_122;
                v110 = *(_QWORD **)(v45 - 208);
                if (!v110)
                  goto LABEL_122;
                a43 = (uint64_t)(v110 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
                goto LABEL_114;
              case 5:
                v121 = *(unint64_t **)(v45 - 208);
                do
                {
                  v122 = __ldaxr(v121);
                  v123 = v122 - 1;
                }
                while (__stlxr(v123, v121));
                if (v123)
                  goto LABEL_122;
                v110 = *(_QWORD **)(v45 - 208);
                if (!v110)
                  goto LABEL_122;
                a43 = (uint64_t)(v110 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
LABEL_114:
                v105 = v110;
                v106 = 0x1020C405E66F15BLL;
                goto LABEL_121;
              case 8:
                v124 = *(unint64_t **)(v45 - 208);
                do
                {
                  v125 = __ldaxr(v124);
                  v126 = v125 - 1;
                }
                while (__stlxr(v126, v124));
                if (v126)
                  goto LABEL_122;
                v127 = *(_QWORD *)(v45 - 208);
                if (!v127)
                  goto LABEL_122;
                boost::detail::shared_count::~shared_count((unsigned int **)(v127 + 16));
                v105 = (_QWORD *)v127;
                v115 = -235920773;
                goto LABEL_120;
              case 9:
                v111 = *(unint64_t **)(v45 - 208);
                do
                {
                  v112 = __ldaxr(v111);
                  v113 = v112 - 1;
                }
                while (__stlxr(v113, v111));
                if (v113)
                  goto LABEL_122;
                v114 = *(_QWORD **)(v45 - 208);
                if (!v114)
                  goto LABEL_122;
                v105 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v114);
                v115 = 2071181815;
LABEL_120:
                v106 = v115 | 0x1030C4000000000;
LABEL_121:
                MEMORY[0x219A19A08](v105, v106);
LABEL_122:
                _Unwind_Resume(a1);
                return;
              default:
                goto LABEL_122;
            }
          default:
            goto LABEL_84;
        }
      default:
        goto LABEL_46;
    }
  }
  __cxa_free_exception(v43);
  goto LABEL_8;
}

void __cxx_global_var_init_89()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_supervised_learning_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_2185AAF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void turi::supervised::xgboost::make_row_batch(_QWORD *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, char **a4@<X8>)
{
  float *v5;
  uint64_t v6;
  double *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double *v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  int v18;
  float v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  int v33;
  float v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  double v45;
  uint64_t v46;
  int v47;
  float *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  double *v59;
  double v60;
  double v61;
  int v62;
  float v63;
  float *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  char v95;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  turi::ml_data_row_reference::from_row(a2, a1, *a3, (uint64_t)&v92);
  if (v95)
  {
    v90 = v92;
    v89 = *(_QWORD *)(v92 + 56);
    if (v89)
    {
      v5 = 0;
      v6 = 0;
      v7 = (double *)(*(_QWORD *)(v92 + 96) + 8 * v94 + 8 * (*(_BYTE *)(v92 + 18) == 0));
      v8 = a4 + 2;
      while (2)
      {
        v91 = v6;
        v9 = *(_QWORD *)(*(_QWORD *)(v90 + 72) + 16 * v6);
        v10 = *(_QWORD *)(v9 + 64);
        v11 = *(_QWORD *)(v9 + 104);
        v12 = v7;
        switch(*(_DWORD *)(v9 + 24))
        {
          case 0:
            v12 = v7 + 1;
            if (!v10)
              goto LABEL_128;
            v13 = *v7;
            if ((unint64_t)v5 < *v8)
            {
              *(_DWORD *)v5 = v11;
              v5[1] = v13;
              goto LABEL_56;
            }
            v73 = (float *)*a4;
            v79 = ((char *)v5 - *a4) >> 3;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 61)
LABEL_135:
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v81 = *v8 - (_QWORD)v73;
            if (v81 >> 2 > v80)
              v80 = v81 >> 2;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
              v77 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v77 = v80;
            if (v77)
            {
              v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v77);
              v73 = (float *)*a4;
              v5 = (float *)a4[1];
              v8 = a4 + 2;
            }
            else
            {
              v78 = 0;
            }
            v82 = &v78[8 * v79];
            *(_DWORD *)v82 = v11;
            *((float *)v82 + 1) = v13;
            v83 = v82;
            if (v5 == v73)
              goto LABEL_125;
            do
            {
              v85 = *((_QWORD *)v5 - 1);
              v5 -= 2;
              *((_QWORD *)v83 - 1) = v85;
              v83 -= 8;
            }
            while (v5 != v73);
            goto LABEL_124;
          case 1:
            v12 = v7 + 1;
            if (*(_QWORD *)v7 >= v10)
              goto LABEL_128;
            v44 = *(_QWORD *)v7 + v11;
            if ((unint64_t)v5 >= *v8)
            {
              v73 = (float *)*a4;
              v74 = ((char *)v5 - *a4) >> 3;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 61)
                goto LABEL_135;
              v76 = *v8 - (_QWORD)v73;
              if (v76 >> 2 > v75)
                v75 = v76 >> 2;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                v77 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77)
              {
                v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v77);
                v73 = (float *)*a4;
                v5 = (float *)a4[1];
                v8 = a4 + 2;
              }
              else
              {
                v78 = 0;
              }
              v82 = &v78[8 * v74];
              *(_DWORD *)v82 = v44;
              *((_DWORD *)v82 + 1) = 1065353216;
              v83 = v82;
              if (v5 != v73)
              {
                do
                {
                  v84 = *((_QWORD *)v5 - 1);
                  v5 -= 2;
                  *((_QWORD *)v83 - 1) = v84;
                  v83 -= 8;
                }
                while (v5 != v73);
LABEL_124:
                v73 = (float *)*a4;
              }
LABEL_125:
              v5 = (float *)(v82 + 8);
              *a4 = v83;
              a4[1] = v82 + 8;
              a4[2] = &v78[8 * v77];
              if (v73)
              {
                operator delete(v73);
                v8 = a4 + 2;
              }
            }
            else
            {
              *(_DWORD *)v5 = v44;
              v5[1] = 1.0;
LABEL_56:
              v5 += 2;
            }
            a4[1] = (char *)v5;
LABEL_128:
            v6 = v91 + 1;
            v7 = v12;
            if (v91 + 1 == v89)
              break;
            continue;
          case 2:
            v14 = *(_QWORD *)(v9 + 72);
            if (!v14)
              goto LABEL_52;
            v15 = 0;
            v12 = v7;
            do
            {
              v16 = *v12++;
              v17 = v16;
              if (v15 < v10)
              {
                v18 = v15 + v11;
                v19 = v17;
                if ((unint64_t)v5 >= *v8)
                {
                  v20 = (float *)*a4;
                  v21 = ((char *)v5 - *a4) >> 3;
                  v22 = v21 + 1;
                  if ((unint64_t)(v21 + 1) >> 61)
                    goto LABEL_135;
                  v23 = *v8 - (_QWORD)v20;
                  if (v23 >> 2 > v22)
                    v22 = v23 >> 2;
                  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
                    v24 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v24 = v22;
                  if (v24)
                  {
                    v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v24);
                    v20 = (float *)*a4;
                    v5 = (float *)a4[1];
                    v8 = a4 + 2;
                  }
                  else
                  {
                    v25 = 0;
                  }
                  v26 = &v25[8 * v21];
                  *(_DWORD *)v26 = v18;
                  *((float *)v26 + 1) = v19;
                  v27 = v26;
                  if (v5 != v20)
                  {
                    do
                    {
                      v28 = *((_QWORD *)v5 - 1);
                      v5 -= 2;
                      *((_QWORD *)v27 - 1) = v28;
                      v27 -= 8;
                    }
                    while (v5 != v20);
                    v20 = (float *)*a4;
                  }
                  v5 = (float *)(v26 + 8);
                  *a4 = v27;
                  a4[1] = v26 + 8;
                  a4[2] = &v25[8 * v24];
                  if (v20)
                  {
                    operator delete(v20);
                    v8 = a4 + 2;
                  }
                }
                else
                {
                  *(_DWORD *)v5 = v18;
                  v5[1] = v19;
                  v5 += 2;
                }
                a4[1] = (char *)v5;
              }
              ++v15;
            }
            while (v15 != v14);
            goto LABEL_128;
          case 3:
            v45 = *v7;
            v12 = v7 + 1;
            if (!*(_QWORD *)v7)
              goto LABEL_128;
            v46 = 0;
            do
            {
              if (*(_QWORD *)v12 < v10)
              {
                v47 = *(_QWORD *)v12 + v11;
                if ((unint64_t)v5 >= *v8)
                {
                  v48 = (float *)*a4;
                  v49 = ((char *)v5 - *a4) >> 3;
                  v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 61)
                    goto LABEL_135;
                  v51 = *v8 - (_QWORD)v48;
                  if (v51 >> 2 > v50)
                    v50 = v51 >> 2;
                  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                    v52 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v52 = v50;
                  if (v52)
                  {
                    v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v52);
                    v48 = (float *)*a4;
                    v5 = (float *)a4[1];
                    v8 = a4 + 2;
                  }
                  else
                  {
                    v53 = 0;
                  }
                  v54 = &v53[8 * v49];
                  *(_DWORD *)v54 = v47;
                  *((_DWORD *)v54 + 1) = 1065353216;
                  v55 = v54;
                  if (v5 != v48)
                  {
                    do
                    {
                      v56 = *((_QWORD *)v5 - 1);
                      v5 -= 2;
                      *((_QWORD *)v55 - 1) = v56;
                      v55 -= 8;
                    }
                    while (v5 != v48);
                    v48 = (float *)*a4;
                  }
                  v5 = (float *)(v54 + 8);
                  *a4 = v55;
                  a4[1] = v54 + 8;
                  a4[2] = &v53[8 * v52];
                  if (v48)
                  {
                    operator delete(v48);
                    v8 = a4 + 2;
                  }
                }
                else
                {
                  *(_DWORD *)v5 = v47;
                  v5[1] = 1.0;
                  v5 += 2;
                }
                a4[1] = (char *)v5;
              }
              ++v46;
              ++v12;
            }
            while (v46 != *(_QWORD *)&v45);
            goto LABEL_128;
          case 4:
            v12 = v7 + 1;
            v57 = *v7;
            if (!*(_QWORD *)v7)
              goto LABEL_128;
            v58 = 0;
            v59 = v7;
            do
            {
              v60 = v59[2];
              v59 += 2;
              v61 = v60;
              if (*(_QWORD *)v12 < v10)
              {
                v62 = *(_QWORD *)v12 + v11;
                v63 = v61;
                if ((unint64_t)v5 >= *v8)
                {
                  v64 = (float *)*a4;
                  v65 = ((char *)v5 - *a4) >> 3;
                  v66 = v65 + 1;
                  if ((unint64_t)(v65 + 1) >> 61)
                    goto LABEL_135;
                  v67 = *v8 - (_QWORD)v64;
                  if (v67 >> 2 > v66)
                    v66 = v67 >> 2;
                  if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
                    v68 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v68 = v66;
                  if (v68)
                  {
                    v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v68);
                    v64 = (float *)*a4;
                    v5 = (float *)a4[1];
                    v8 = a4 + 2;
                  }
                  else
                  {
                    v69 = 0;
                  }
                  v70 = &v69[8 * v65];
                  *(_DWORD *)v70 = v62;
                  *((float *)v70 + 1) = v63;
                  v71 = v70;
                  if (v5 != v64)
                  {
                    do
                    {
                      v72 = *((_QWORD *)v5 - 1);
                      v5 -= 2;
                      *((_QWORD *)v71 - 1) = v72;
                      v71 -= 8;
                    }
                    while (v5 != v64);
                    v64 = (float *)*a4;
                  }
                  v5 = (float *)(v70 + 8);
                  *a4 = v71;
                  a4[1] = v70 + 8;
                  a4[2] = &v69[8 * v68];
                  if (v64)
                  {
                    operator delete(v64);
                    v8 = a4 + 2;
                  }
                }
                else
                {
                  *(_DWORD *)v5 = v62;
                  v5[1] = v63;
                  v5 += 2;
                }
                a4[1] = (char *)v5;
              }
              ++v58;
              v12 = v7 + 3;
              v7 = v59;
            }
            while (v58 != *(_QWORD *)&v57);
            goto LABEL_128;
          case 5:
          case 6:
            goto LABEL_128;
          case 7:
            v29 = *(_QWORD *)(v9 + 72);
            if (!v29)
              goto LABEL_52;
            v30 = 0;
            v12 = v7;
            do
            {
              v31 = *v12++;
              v32 = v31;
              if (v30 < v10)
              {
                v33 = v30 + v11;
                v34 = v32;
                if ((unint64_t)v5 >= *v8)
                {
                  v35 = (float *)*a4;
                  v36 = ((char *)v5 - *a4) >> 3;
                  v37 = v36 + 1;
                  if ((unint64_t)(v36 + 1) >> 61)
                    goto LABEL_135;
                  v38 = *v8 - (_QWORD)v35;
                  if (v38 >> 2 > v37)
                    v37 = v38 >> 2;
                  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                    v39 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v39 = v37;
                  if (v39)
                  {
                    v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v39);
                    v35 = (float *)*a4;
                    v5 = (float *)a4[1];
                    v8 = a4 + 2;
                  }
                  else
                  {
                    v40 = 0;
                  }
                  v41 = &v40[8 * v36];
                  *(_DWORD *)v41 = v33;
                  *((float *)v41 + 1) = v34;
                  v42 = v41;
                  if (v5 != v35)
                  {
                    do
                    {
                      v43 = *((_QWORD *)v5 - 1);
                      v5 -= 2;
                      *((_QWORD *)v42 - 1) = v43;
                      v42 -= 8;
                    }
                    while (v5 != v35);
                    v35 = (float *)*a4;
                  }
                  v5 = (float *)(v41 + 8);
                  *a4 = v42;
                  a4[1] = v41 + 8;
                  a4[2] = &v40[8 * v39];
                  if (v35)
                  {
                    operator delete(v35);
                    v8 = a4 + 2;
                  }
                }
                else
                {
                  *(_DWORD *)v5 = v33;
                  v5[1] = v34;
                  v5 += 2;
                }
                a4[1] = (char *)v5;
              }
              ++v30;
            }
            while (v30 != v29);
            goto LABEL_128;
          default:
LABEL_52:
            v12 = v7;
            goto LABEL_128;
        }
        break;
      }
    }
  }
  v86 = v93;
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v88 = __ldaxr(p_shared_owners);
    while (__stlxr(v88 - 1, p_shared_owners));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
}

void sub_2185AB708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::make_simple_dmatrix(uint64_t **a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, xgboost_old::io::DMatrixSimple *a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[3];

  xgboost_old::io::DMatrixSimple::DMatrixSimple(a4);
  v8 = *a1;
  v9 = a1[1];
  while (v8 != v9)
  {
    if (*((_BYTE *)v8 + 12) != 5)
      turi::supervised::xgboost::make_simple_dmatrix(std::vector<turi::flexible_type> const&,std::shared_ptr<turi::ml_metadata>,turi::ml_missing_value_action const&)::$_0::operator()();
    v10 = *v8;
    v11 = a2[1];
    v17 = *a2;
    v18 = (std::__shared_weak_count *)v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    turi::supervised::xgboost::make_row_batch((_QWORD *)(v10 + 8), &v17, a3, (char **)__p);
    xgboost_old::io::DMatrixSimple::AddRow(a4, (uint64_t *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v8 += 2;
  }
}

void sub_2185AB83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  xgboost_old::io::DMatrixSimple *v13;

  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  xgboost_old::io::DMatrixSimple::~DMatrixSimple(v13);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::io::DMatrixSimple::AddRow(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  char **v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;

  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4)
  {
    v6 = 0;
    v7 = (char **)(a1 + 26);
    v8 = a1 + 28;
    v9 = (char *)a1[27];
    do
    {
      if ((unint64_t)v9 >= *v8)
      {
        v10 = (v9 - *v7) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v11 = *v8 - (_QWORD)*v7;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 28), v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = *(_QWORD *)(v3 + 8 * v6);
        v9 = v15 + 8;
        v17 = (char *)a1[26];
        v16 = (char *)a1[27];
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v7;
        }
        a1[26] = v15;
        a1[27] = v9;
        a1[28] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)(v3 + 8 * v6);
        v9 += 8;
      }
      a1[27] = v9;
      v3 = *a2;
      v19 = a2[1];
      v20 = (*(_DWORD *)(*a2 + 8 * v6) + 1);
      if (a1[3] > v20)
        v20 = a1[3];
      a1[3] = v20;
      ++v6;
      v4 = v19 - v3;
    }
    while (v6 < (v19 - v3) >> 3);
  }
  v21 = a1[25];
  v22 = (uint64_t *)a1[24];
  v23 = *(v22 - 1) + (v4 >> 3);
  if ((unint64_t)v22 >= v21)
  {
    v25 = (uint64_t *)a1[23];
    v26 = v22 - v25;
    if ((unint64_t)(v26 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v27 = v21 - (_QWORD)v25;
    v28 = (uint64_t)(v21 - (_QWORD)v25) >> 2;
    if (v28 <= v26 + 1)
      v28 = v26 + 1;
    if (v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
    {
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 25), v29);
      v25 = (uint64_t *)a1[23];
      v22 = (uint64_t *)a1[24];
    }
    else
    {
      v30 = 0;
    }
    v31 = (uint64_t *)&v30[8 * v26];
    v32 = &v30[8 * v29];
    *v31 = v23;
    v24 = v31 + 1;
    while (v22 != v25)
    {
      v33 = *--v22;
      *--v31 = v33;
    }
    a1[23] = v31;
    a1[24] = v24;
    a1[25] = v32;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v22 = v23;
    v24 = v22 + 1;
  }
  a1[24] = v24;
  ++a1[2];
  return (((uint64_t)v24 - a1[23]) >> 3) - 2;
}

void turi::supervised::xgboost::MakeFeatMap(std::vector<std::string> *this, turi::ml_metadata **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t i;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::string *p_p;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  const void ***v37;
  std::__shared_weak_count *v38;
  const void **v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  std::string *v44;
  const void *v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  turi::flexible_type_impl *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type size;
  std::string *v58;
  __int128 v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t j;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string v87;
  std::string v88;
  void *v89[2];
  int64_t v90;
  std::string __p;
  uint64_t v92;
  void *v93;
  char v94;
  uint64_t v95;

  v8 = *(_QWORD *)*a2;
  if (*((_QWORD *)*a2 + 1) != v8)
  {
    v11 = 0;
    v12 = 0;
    v85 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v86 = *MEMORY[0x24BEDB7F0];
    v84 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v83 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v13 = (uint64_t *)(v8 + 16 * v11);
      v14 = *v13;
      v15 = (std::__shared_weak_count *)v13[1];
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        v18 = *(unsigned __int8 *)(v14 + 28);
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v18 = *(unsigned __int8 *)(v14 + 28);
      }
      if (v18 <= 9)
      {
        if (((1 << v18) & 0x23A) != 0)
        {
          for (i = 0; ; ++i)
          {
            v21 = (uint64_t *)(*(_QWORD *)*a2 + 16 * v11);
            v22 = *v21;
            v23 = (std::__shared_weak_count *)v21[1];
            if (v23)
            {
              v24 = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
              v26 = *(_QWORD *)(v22 + 64);
              do
                v27 = __ldaxr(v24);
              while (__stlxr(v27 - 1, v24));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            else
            {
              v26 = *(_QWORD *)(v22 + 64);
            }
            if (i >= v26)
              break;
            turi::ml_metadata::feature_name(*a2, v11, i, 1, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            xgboost_old::utils::FeatMap::PushBack(this, i + v12, (char *)p_p, "q");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_97;
        }
        if (!v18)
        {
          for (j = 0; ; ++j)
          {
            v69 = (uint64_t *)(*(_QWORD *)*a2 + 16 * v11);
            v70 = *v69;
            v71 = (std::__shared_weak_count *)v69[1];
            if (v71)
            {
              v72 = (unint64_t *)&v71->__shared_owners_;
              do
                v73 = __ldxr(v72);
              while (__stxr(v73 + 1, v72));
              v74 = *(_QWORD *)(v70 + 64);
              do
                v75 = __ldaxr(v72);
              while (__stlxr(v75 - 1, v72));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            else
            {
              v74 = *(_QWORD *)(v70 + 64);
            }
            if (j >= v74)
              break;
            v76 = *(_QWORD *)*a2 + 16 * v11;
            v77 = *(char **)v76;
            v78 = *(std::__shared_weak_count **)(v76 + 8);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldxr(v79);
              while (__stxr(v80 + 1, v79));
              do
                v81 = __ldaxr(v79);
              while (__stlxr(v81 - 1, v79));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            if (v77[23] < 0)
              v77 = *(char **)v77;
            xgboost_old::utils::FeatMap::PushBack(this, v12, v77, "int");
          }
          goto LABEL_97;
        }
        if (v18 == 2)
        {
          v29 = 0;
          while (2)
          {
            v30 = (uint64_t *)(*(_QWORD *)*a2 + 16 * v11);
            v31 = *v30;
            v32 = (std::__shared_weak_count *)v30[1];
            if (v32)
            {
              v33 = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
              v35 = *(_QWORD *)(v31 + 64);
              do
                v36 = __ldaxr(v33);
              while (__stlxr(v36 - 1, v33));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            else
            {
              v35 = *(_QWORD *)(v31 + 64);
            }
            if (v29 < v35)
            {
              v37 = (const void ***)(*(_QWORD *)*a2 + 16 * v11);
              v39 = *v37;
              v38 = (std::__shared_weak_count *)v37[1];
              if (v38)
              {
                v40 = (unint64_t *)&v38->__shared_owners_;
                do
                  v41 = __ldxr(v40);
                while (__stxr(v41 + 1, v40));
                do
                  v42 = __ldaxr(v40);
                while (__stlxr(v42 - 1, v40));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              if (*((char *)v39 + 23) >= 0)
                v43 = *((unsigned __int8 *)v39 + 23);
              else
                v43 = (size_t)v39[1];
              std::string::basic_string[abi:ne180100]((uint64_t)&v88, v43 + 1);
              if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v44 = &v88;
              else
                v44 = (std::string *)v88.__r_.__value_.__r.__words[0];
              if (v43)
              {
                if (*((char *)v39 + 23) >= 0)
                  v45 = v39;
                else
                  v45 = *v39;
                memmove(v44, v45, v43);
              }
              *(_WORD *)((char *)&v44->__r_.__value_.__l.__data_ + v43) = 61;
              v46 = (uint64_t *)(*(_QWORD *)*a2 + 16 * v11);
              v48 = *v46;
              v47 = (std::__shared_weak_count *)v46[1];
              if (v47)
              {
                v49 = (unint64_t *)&v47->__shared_owners_;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
                do
                  v51 = __ldaxr(v49);
                while (__stlxr(v51 - 1, v49));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              v52 = (turi::flexible_type_impl *)(*(_QWORD *)(*(_QWORD *)(v48 + 32) + 80) + 16 * v29);
              switch(*((_BYTE *)v52 + 12))
              {
                case 0:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  __p.__r_.__value_.__r.__words[0] = v86;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v86 - 24)) = v85;
                  __p.__r_.__value_.__r.__words[2] = v84;
                  v53 = v83;
                  goto LABEL_73;
                case 1:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  __p.__r_.__value_.__r.__words[0] = v86;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v86 - 24)) = v85;
                  v53 = MEMORY[0x24BEDB848] + 16;
                  __p.__r_.__value_.__r.__words[2] = v84;
LABEL_73:
                  v92 = v53;
                  if (v94 < 0)
                    operator delete(v93);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x219A198F4](&v95);
                  goto LABEL_80;
                case 2:
                  v54 = *(_QWORD *)v52;
                  if (*(char *)(*(_QWORD *)v52 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
                  }
                  else
                  {
                    v55 = *(_OWORD *)(v54 + 8);
                    v87.__r_.__value_.__r.__words[2] = *(_QWORD *)(v54 + 24);
                    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v55;
                  }
                  goto LABEL_80;
                case 3:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v52 + 8));
                  goto LABEL_80;
                case 4:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v52 + 8));
                  goto LABEL_80;
                case 5:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v52 + 8));
                  goto LABEL_80;
                case 6:
                  turi::flexible_type_impl::get_string_visitor::operator()(v52, &v87);
                  goto LABEL_80;
                case 7:
                  memset(&v87, 0, sizeof(v87));
                  goto LABEL_80;
                case 8:
                  turi::flexible_type_impl::get_string_visitor::operator()();
                  goto LABEL_80;
                case 9:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v52 + 8));
LABEL_80:
                  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v56 = &v87;
                  else
                    v56 = (std::string *)v87.__r_.__value_.__r.__words[0];
                  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
                  else
                    size = v87.__r_.__value_.__l.__size_;
                  v58 = std::string::append(&v88, (const std::string::value_type *)v56, size);
                  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
                  v90 = v58->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v89 = v59;
                  v58->__r_.__value_.__l.__size_ = 0;
                  v58->__r_.__value_.__r.__words[2] = 0;
                  v58->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v87.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v88.__r_.__value_.__l.__data_);
                  if (v90 >= 0)
                    v60 = (char *)v89;
                  else
                    v60 = (char *)v89[0];
                  xgboost_old::utils::FeatMap::PushBack(this, v29 + v12, v60, "i");
                  if (SHIBYTE(v90) < 0)
                    operator delete(v89[0]);
                  ++v29;
                  continue;
                default:
                  turi::flexible_type_fail(0);
                  __break(1u);
                  return;
              }
            }
            goto LABEL_97;
          }
        }
      }
      assert_msg(0, (uint64_t)"Internal error: type not handled in xgboost switch statement.", a3, a4, a5, a6, a7, a8, v82);
LABEL_97:
      v61 = (uint64_t *)(*(_QWORD *)*a2 + 16 * v11);
      v62 = *v61;
      v63 = (std::__shared_weak_count *)v61[1];
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
        v66 = *(_QWORD *)(v62 + 64);
        do
          v67 = __ldaxr(v64);
        while (__stlxr(v67 - 1, v64));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      else
      {
        v66 = *(_QWORD *)(v62 + 64);
      }
      v12 += v66;
      ++v11;
      v8 = *(_QWORD *)*a2;
    }
    while (v11 < (*((_QWORD *)*a2 + 1) - v8) >> 4);
  }
}

void sub_2185AC1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::utils::FeatMap::PushBack(std::vector<std::string> *this, int a2, char *a3, const char *a4)
{
  std::vector<std::string>::pointer end;
  std::string *value;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  int v18;
  const char *v19;
  int v20;
  std::string *v21;
  char *v22;
  std::string *v23;
  std::vector<std::string>::pointer begin;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  int *v30;
  std::string *v31;
  int v32;
  void *__p[2];
  std::string::size_type v34;
  std::__split_buffer<std::string> __v;

  xgboost_old::utils::Check(-1431655765 * ((unint64_t)((char *)this->__end_ - (char *)this->__begin_) >> 3) == a2, "invalid fmap format", a3);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
    if (v13)
      v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&this->__end_cap_, v13);
    else
      v14 = 0;
    v15 = v14 + v10;
    __v.__first_ = v14;
    __v.__begin_ = v15;
    __v.__end_cap_.__value_ = &v14[v13];
    v16 = *(_OWORD *)__p;
    v15->__r_.__value_.__r.__words[2] = v34;
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    __p[1] = 0;
    v34 = 0;
    __p[0] = 0;
    __v.__end_ = v15 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    v17 = this->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v18 = SHIBYTE(v34);
    this->__end_ = v17;
    if (v18 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v9 = *(_OWORD *)__p;
    end->__r_.__value_.__r.__words[2] = v34;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
    this->__end_ = end + 1;
  }
  if (!strcmp("i", a4))
  {
    v20 = 0;
  }
  else if (!strcmp("q", a4))
  {
    v20 = 1;
  }
  else if (!strcmp("int", a4))
  {
    v20 = 2;
  }
  else
  {
    if (strcmp("float", a4))
      xgboost_old::utils::Error((xgboost_old::utils *)"unknown feature type, use i for indicator and q for quantity", v19);
    v20 = 3;
  }
  v21 = this[1].__end_cap_.__value_;
  v22 = (char *)this[1].__end_;
  if (v22 >= (char *)v21)
  {
    begin = this[1].__begin_;
    v25 = (v22 - (char *)begin) >> 2;
    if ((unint64_t)(v25 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v26 = (char *)v21 - (char *)begin;
    v27 = ((char *)v21 - (char *)begin) >> 1;
    if (v27 <= v25 + 1)
      v27 = v25 + 1;
    if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
      v28 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
    {
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&this[1].__end_cap_, v28);
      begin = this[1].__begin_;
      v22 = (char *)this[1].__end_;
    }
    else
    {
      v29 = 0;
    }
    v30 = (int *)&v29[4 * v25];
    v31 = (std::string *)&v29[4 * v28];
    *v30 = v20;
    v23 = (std::string *)(v30 + 1);
    while (v22 != (char *)begin)
    {
      v32 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--v30 = v32;
    }
    this[1].__begin_ = (std::vector<std::string>::pointer)v30;
    this[1].__end_ = v23;
    this[1].__end_cap_.__value_ = v31;
    if (begin)
      operator delete(begin);
  }
  else
  {
    *(_DWORD *)v22 = v20;
    v23 = (std::string *)(v22 + 4);
  }
  this[1].__end_ = v23;
}

void sub_2185AC4F4(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  _Unwind_Resume(__p);
}

uint64_t turi::supervised::xgboost::xgboost_model::_get_early_stopping_rounds(turi::supervised::xgboost::xgboost_model *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  double v10;
  char *v11;
  uint64_t v12;
  double v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  void *v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v49;
  __int128 v50;
  void *__p[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  std::string v55;
  size_t __idx;
  double v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "early_stopping_rounds");
  v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)this + 296, (const void **)__p);
  v5 = v4;
  if (SBYTE7(v52) < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      return 0;
  }
  else if (!v4)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "early_stopping_rounds");
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  turi::variant_converter<turi::flexible_type,void>::get(v6, (uint64_t)&v57);
  if (SBYTE7(v52) < 0)
    operator delete(__p[0]);
  if (v58 == 7)
    return 0;
  switch(v58)
  {
    case 0:
      v7 = *(_QWORD *)&v57;
      goto LABEL_35;
    case 1:
      v7 = (uint64_t)v57;
      goto LABEL_35;
    case 2:
      v10 = v57;
      __idx = 0;
      v11 = (char *)(*(_QWORD *)&v57 + 8);
      if (*(char *)(*(_QWORD *)&v57 + 31) < 0)
        v11 = *(char **)(*(_QWORD *)&v57 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v11);
      v7 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v52) < 0)
        operator delete(__p[0]);
      if (*(char *)(*(_QWORD *)&v10 + 31) < 0)
        v12 = *(_QWORD *)(*(_QWORD *)&v10 + 16);
      else
        v12 = *(unsigned __int8 *)(*(_QWORD *)&v10 + 31);
      if (__idx != v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v49 = std::string::append(&v55, " cannot be interpreted as an integer");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        *(_QWORD *)&v52 = *((_QWORD *)&v49->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_35;
    case 3:
      __p[1] = 0;
      *(_QWORD *)&v52 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v57 + 8), *(_QWORD *)(*(_QWORD *)&v57 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v57 + 16) - *(_QWORD *)(*(_QWORD *)&v57 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_34;
    case 4:
      __p[1] = 0;
      *(_QWORD *)&v52 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v57 + 8), *(uint64_t **)(*(_QWORD *)&v57 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v57 + 16) - *(_QWORD *)(*(_QWORD *)&v57 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v55.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
      goto LABEL_34;
    case 5:
      __p[1] = 0;
      *(_QWORD *)&v52 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v57 + 8), *(uint64_t **)(*(_QWORD *)&v57 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v57 + 16) - *(_QWORD *)(*(_QWORD *)&v57 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v55.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
      goto LABEL_34;
    case 6:
      v7 = (uint64_t)(*(_QWORD *)&v57 << 8) >> 8;
      goto LABEL_35;
    case 8:
      v13 = v57;
      v14 = *(unsigned int **)(*(_QWORD *)&v57 + 16);
      __p[0] = *(void **)(*(_QWORD *)&v57 + 8);
      __p[1] = v14;
      if (v14)
      {
        v15 = v14 + 2;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = *(_OWORD *)(*(_QWORD *)&v13 + 24);
      v18 = *(_OWORD *)(*(_QWORD *)&v13 + 56);
      v53 = *(_OWORD *)(*(_QWORD *)&v13 + 40);
      v54 = v18;
      v52 = v17;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_34;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)&v57 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v53 + 1))
      {
        *(_QWORD *)&v54 = *((_QWORD *)&v53 + 1);
        operator delete(*((void **)&v53 + 1));
      }
      if ((_QWORD)v52)
      {
        *((_QWORD *)&v52 + 1) = v52;
        operator delete((void *)v52);
      }
      v7 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_35;
      v8 = (unint64_t *)((char *)__p[1] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
      }
LABEL_34:
      v7 = 0;
LABEL_35:
      switch(v58)
      {
        case 2:
          v19 = *(unint64_t **)&v57;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = v57;
            if (v57 != 0.0)
            {
              if (*(char *)(*(_QWORD *)&v57 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v57 + 8));
              v23 = v22;
              v24 = 0x1012C404EF22A49;
              goto LABEL_70;
            }
          }
          break;
        case 3:
          v35 = *(unint64_t **)&v57;
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            v38 = v57;
            if (v57 != 0.0)
            {
              v39 = *(void **)(*(_QWORD *)&v57 + 8);
              if (v39)
              {
                *(_QWORD *)(*(_QWORD *)&v57 + 16) = v39;
                operator delete(v39);
              }
              v23 = v38;
              v24 = 0x1080C409938AC02;
              goto LABEL_70;
            }
          }
          break;
        case 4:
          v25 = *(unint64_t **)&v57;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            v28 = v57;
            if (v57 != 0.0)
            {
              __p[0] = (void *)(*(_QWORD *)&v57 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_69;
            }
          }
          break;
        case 5:
          v40 = *(unint64_t **)&v57;
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v28 = v57;
            if (v57 != 0.0)
            {
              __p[0] = (void *)(*(_QWORD *)&v57 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_69:
              v23 = v28;
              v24 = 0x1020C405E66F15BLL;
              goto LABEL_70;
            }
          }
          break;
        case 8:
          v43 = *(unint64_t **)&v57;
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            v46 = v57;
            if (v57 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v57 + 16));
              MEMORY[0x219A19A08](*(_QWORD *)&v46, 0x1030C40F1F0227BLL);
            }
            v57 = 0.0;
          }
          break;
        case 9:
          v29 = *(unint64_t **)&v57;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v32 = v57;
            if (v57 != 0.0)
            {
              v33 = *(void **)(*(_QWORD *)&v57 + 48);
              if (v33)
              {
                *(_QWORD *)(*(_QWORD *)&v57 + 56) = v33;
                operator delete(v33);
              }
              v34 = *(void **)(*(_QWORD *)&v32 + 24);
              if (v34)
              {
                *(_QWORD *)(*(_QWORD *)&v32 + 32) = v34;
                operator delete(v34);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v32 + 8);
              v23 = v32;
              v24 = 0x1030C407B73B9F7;
LABEL_70:
              MEMORY[0x219A19A08](*(_QWORD *)&v23, v24);
            }
          }
          break;
        default:
          break;
      }
      if (v7)
      {
        if (*((_QWORD *)this + 44) == *((_QWORD *)this + 43))
          turi::supervised::xgboost::xgboost_model::_get_early_stopping_rounds(BOOL)::$_0::operator()();
        if ((a2 & 1) == 0)
          turi::supervised::xgboost::xgboost_model::_get_early_stopping_rounds(BOOL)::$_1::operator()();
      }
      return result;
    default:
      result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  return v7;
}

void sub_2185ACAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v27)
  {
LABEL_8:
    switch(*(_BYTE *)(v28 - 60))
    {
      case 2:
        v30 = *(unint64_t **)(v28 - 72);
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (v32)
          goto LABEL_46;
        v33 = *(_QWORD *)(v28 - 72);
        if (!v33)
          goto LABEL_46;
        if (*(char *)(v33 + 31) < 0)
          operator delete(*(void **)(v33 + 8));
        v34 = (_QWORD *)v33;
        v35 = 0x1012C404EF22A49;
        goto LABEL_45;
      case 3:
        v45 = *(unint64_t **)(v28 - 72);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (v47)
          goto LABEL_46;
        v48 = *(_QWORD **)(v28 - 72);
        if (!v48)
          goto LABEL_46;
        v49 = (void *)v48[1];
        if (v49)
        {
          v48[2] = v49;
          operator delete(v49);
        }
        v34 = v48;
        v35 = 0x1080C409938AC02;
        goto LABEL_45;
      case 4:
        v36 = *(unint64_t **)(v28 - 72);
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (v38)
          goto LABEL_46;
        v39 = *(_QWORD **)(v28 - 72);
        if (!v39)
          goto LABEL_46;
        a21 = v39 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        goto LABEL_38;
      case 5:
        v50 = *(unint64_t **)(v28 - 72);
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (v52)
          goto LABEL_46;
        v39 = *(_QWORD **)(v28 - 72);
        if (!v39)
          goto LABEL_46;
        a21 = v39 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
LABEL_38:
        v34 = v39;
        v35 = 0x1020C405E66F15BLL;
        goto LABEL_45;
      case 8:
        v53 = *(unint64_t **)(v28 - 72);
        do
        {
          v54 = __ldaxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (v55)
          goto LABEL_46;
        v56 = *(_QWORD *)(v28 - 72);
        if (!v56)
          goto LABEL_46;
        boost::detail::shared_count::~shared_count((unsigned int **)(v56 + 16));
        v34 = (_QWORD *)v56;
        v44 = -235920773;
        goto LABEL_44;
      case 9:
        v40 = *(unint64_t **)(v28 - 72);
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (v42)
          goto LABEL_46;
        v43 = *(_QWORD **)(v28 - 72);
        if (!v43)
          goto LABEL_46;
        v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v43);
        v44 = 2071181815;
LABEL_44:
        v35 = v44 | 0x1030C4000000000;
LABEL_45:
        MEMORY[0x219A19A08](v34, v35);
LABEL_46:
        _Unwind_Resume(a1);
        return;
      default:
        goto LABEL_46;
    }
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void turi::supervised::xgboost::xgboost_model::_checkpoint(turi::supervised::xgboost::xgboost_model *a1, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *exception;
  _QWORD v12[2];
  __int128 v13;
  __int128 v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  __n128 __p;
  char v22;
  std::locale v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "_checkpoint", 269, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Checkpointing to ", 17);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v20 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v20, &__p);
    v8 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet(&v23, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v23);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v22 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  v23.__locale_ = (std::locale::__imp *)-1;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = v28;
  v28[0] = 0;
  v28[1] = 0;
  v33 = 0;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v19 = *(std::string *)a2;
  turi::dir_archive::open_directory_for_write((uint64_t)&v23, (uint64_t)&v19, 0);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v17, "contents");
  std::string::basic_string[abi:ne180100]<0>(v15, "model");
  turi::dir_archive::set_metadata((uint64_t)&v23, (uint64_t)v17, (uint64_t)v15);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  v12[0] = turi::dir_archive::get_output_stream((turi::dir_archive *)&v23);
  v12[1] = &v23;
  v13 = 0u;
  v14 = 0u;
  turi::supervised::xgboost::xgboost_model::_save(a1, (turi::oarchive *)v12, 0);
  turi::dir_archive::close((turi::dir_archive *)&v23);
  turi::dir_archive::~dir_archive((turi::dir_archive *)&v23);
}

void sub_2185AD094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,std::locale a46)
{
  std::locale::~locale(&a46);
  if (a45 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::xgboost_model::_save(turi::supervised::xgboost::xgboost_model *this, turi::oarchive *a2, uint64_t a3)
{
  _QWORD v7[2];

  turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((const void ***)this + 37, (uint64_t)a2);
  turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (turi::ml_metadata **)this + 47);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::option_manager::save((turi::supervised::xgboost::xgboost_model *)((char *)this + 224), a2);
  v7[0] = &unk_24D94A5F0;
  v7[1] = a2;
  return xgboost_old::learner::BoostLearner::SaveModel(*((_QWORD *)this + 208), (uint64_t)v7, a3);
}

void turi::supervised::xgboost::xgboost_model::_restore_from_checkpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD **v5;
  std::string *v6;
  BOOL v7;
  std::string::size_type v9;
  std::string::size_type size;
  uint64_t v11;
  unsigned __int8 *v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  double v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::locale::__imp *locale;
  std::locale::__imp *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  std::locale::__imp *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t *v43;
  std::locale::__imp *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  double v59;
  char v60;
  size_t v61;
  unsigned int v62;
  double *v63;
  double *v64;
  unint64_t v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  double v70;
  double v71;
  unsigned int v72;
  double v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  int *v77;
  file_logger *v78;
  file_logger *started;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  const std::locale::facet *v84;
  _QWORD *v85;
  _QWORD **v86;
  double v87;
  double v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  unsigned int v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *exception;
  std::string __p;
  _QWORD **v124;
  _QWORD *v125[2];
  _QWORD v126[5];
  std::string v127;
  char v128;
  std::locale v129;
  std::locale::__imp *v130;
  char v131;
  uint64_t v132;
  char v133;
  std::string v134;
  double v135;
  int v136;
  char v137;
  _QWORD v138[5];
  _QWORD v139[2];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v138[0] = -1;
  memset(&v138[1], 0, 24);
  v138[4] = v139;
  v139[0] = 0;
  v139[1] = 0;
  v144 = 0;
  v140 = 0u;
  v141 = 0u;
  v142 = 0u;
  v143 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v127 = *(std::string *)a2;
  turi::dir_archive::open_directory_for_read((uint64_t)v138, (uint64_t)&v127);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  v126[0] = turi::dir_archive::get_input_stream((turi::dir_archive *)v138);
  v126[1] = v138;
  memset(&v126[2], 0, 24);
  v4 = turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)&v124, v4);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v126, 9);
  turi::dir_archive::close((turi::dir_archive *)v138);
  v5 = v124;
  if (v124 != v125)
  {
    while (1)
    {
      std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100](&v134, (std::string *)(v5 + 4));
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (HIBYTE(v134.__r_.__value_.__r.__words[2]) != 21)
      {
        if (HIBYTE(v134.__r_.__value_.__r.__words[2]) != 22)
          goto LABEL_37;
        v6 = &v134;
LABEL_21:
        v9 = v6->__r_.__value_.__r.__words[0];
        size = v6->__r_.__value_.__l.__size_;
        v11 = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 6);
        if (v9 != 0x665F656D75736572 || size != 0x636568635F6D6F72 || v11 != 0x746E696F706B6365)
          goto LABEL_37;
        goto LABEL_127;
      }
      if (v134.__r_.__value_.__r.__words[0] != 0x68635F6C65646F6DLL
        || v134.__r_.__value_.__l.__size_ != 0x746E696F706B6365
        || *(std::string::size_type *)((char *)&v134.__r_.__value_.__r.__words[1] + 5) != 0x687461705F746E69)
      {
LABEL_37:
        v16 = (unsigned __int8 *)turi::option_manager::value(a1 + 224, (const void **)&v134.__r_.__value_.__l.__data_);
        switch(v137)
        {
          case 0:
            switch(v16[12])
            {
              case 0u:
                if (*(_QWORD *)v16 == *(_QWORD *)&v135)
                  goto LABEL_127;
                goto LABEL_110;
              case 1u:
                v73 = *(double *)v16;
                v74 = *(_QWORD *)&v135;
                goto LABEL_147;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_110;
              case 6u:
                if (*(_QWORD *)&v135 == (uint64_t)(*(_QWORD *)v16 << 8) >> 8 && !*((_DWORD *)v16 + 2))
                  goto LABEL_127;
                goto LABEL_110;
              default:
                goto LABEL_221;
            }
          case 1:
            switch(v16[12])
            {
              case 0u:
                v73 = v135;
                v74 = *(_QWORD *)v16;
LABEL_147:
                v88 = (double)v74;
                goto LABEL_148;
              case 1u:
                v73 = *(double *)v16;
                v88 = v135;
LABEL_148:
                if (v73 != v88)
                  goto LABEL_110;
                goto LABEL_127;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_110;
              case 6u:
                v87 = vabdd_f64((double)*((int *)v16 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v16 << 8) >> 8), v135);
                goto LABEL_152;
              default:
                goto LABEL_221;
            }
          case 2:
            v57 = v16[12];
            if (v57 - 3 < 7 || v57 < 2)
              goto LABEL_110;
            if (v57 != 2)
              goto LABEL_221;
            v59 = *(double *)v16;
            v60 = *(_BYTE *)(*(_QWORD *)v16 + 31);
            if (v60 < 0)
              v61 = *(_QWORD *)(*(_QWORD *)&v59 + 16);
            else
              v61 = *(unsigned __int8 *)(*(_QWORD *)v16 + 31);
            if (*(char *)(*(_QWORD *)&v135 + 31) < 0)
              v89 = *(_QWORD *)(*(_QWORD *)&v135 + 16);
            else
              v89 = *(unsigned __int8 *)(*(_QWORD *)&v135 + 31);
            if (v61 != v89)
              goto LABEL_110;
            v90 = (unsigned __int8 *)(*(_QWORD *)&v59 + 8);
            if (v60 < 0)
              v90 = *(unsigned __int8 **)v90;
            v91 = (unsigned __int8 *)(*(_QWORD *)&v135 + 8);
            if ((*(_BYTE *)(*(_QWORD *)&v135 + 31) & 0x80) != 0)
              v91 = *(unsigned __int8 **)v91;
            if (v60 < 0)
            {
              if (memcmp(v90, v91, v61))
                goto LABEL_110;
            }
            else
            {
              if (!v61)
                goto LABEL_127;
              do
              {
                if (*v90 != *v91)
                  goto LABEL_110;
                ++v90;
                ++v91;
                --v61;
              }
              while (v61);
            }
            goto LABEL_127;
          case 3:
            v62 = v16[12];
            if (v62 > 9)
              goto LABEL_221;
            if (v62 != 3)
              goto LABEL_110;
            v63 = *(double **)(*(_QWORD *)v16 + 8);
            v64 = *(double **)(*(_QWORD *)v16 + 16);
            v65 = v64 - v63;
            v66 = *(double **)(*(_QWORD *)&v135 + 8);
            if (v65 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v135 + 16) - (_QWORD)v66) >> 3)
              goto LABEL_110;
            if (v64 == v63)
              goto LABEL_127;
            if (v65 <= 1)
              v67 = 1;
            else
              v67 = v64 - v63;
            if (*v63 == *v66)
            {
              v68 = 1;
              do
              {
                v69 = v68;
                if (v67 == v68)
                  break;
                v70 = v63[v68];
                v71 = v66[v68++];
              }
              while (v70 == v71);
              v18 = v69 >= v65;
LABEL_137:
              if ((v18 & 1) != 0)
                goto LABEL_127;
            }
            goto LABEL_110;
          case 4:
            v17 = v16[12];
            if (v17 > 9)
              goto LABEL_221;
            if (v17 != 4)
              goto LABEL_110;
            v18 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v128, (uint64_t *)(*(_QWORD *)v16 + 8), (_QWORD *)(*(_QWORD *)&v135 + 8));
            goto LABEL_137;
          case 5:
            v75 = v16[12];
            if (v75 > 9)
              goto LABEL_221;
            if (v75 != 5)
              goto LABEL_110;
            v18 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v128, (uint64_t **)(*(_QWORD *)v16 + 8), (uint64_t **)(*(_QWORD *)&v135 + 8));
            goto LABEL_137;
          case 6:
            switch(v16[12])
            {
              case 0u:
                if (*(_QWORD *)v16 == (uint64_t)(*(_QWORD *)&v135 << 8) >> 8 && !v136)
                  goto LABEL_127;
                goto LABEL_110;
              case 1u:
                v87 = vabdd_f64(*(double *)v16, (double)v136 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v135 << 8) >> 8));
LABEL_152:
                if (v87 < 0.0000005)
                  goto LABEL_127;
                goto LABEL_110;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_110;
              case 6u:
                if (((*(_QWORD *)&v135 ^ *(_QWORD *)v16) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)v16 + 2) == v136)
                  goto LABEL_127;
                goto LABEL_110;
              default:
                goto LABEL_221;
            }
          case 7:
            v72 = v16[12];
            if (v72 < 7 || v72 - 8 < 2)
              goto LABEL_110;
            if (v72 != 7)
              goto LABEL_221;
            goto LABEL_127;
          case 8:
            v76 = v16[12];
            if (v76 < 8 || v76 == 9)
              goto LABEL_110;
            if (v76 != 8)
              goto LABEL_221;
            v18 = turi::image_type::operator==(*(_QWORD *)v16 + 8, *(_QWORD *)&v135 + 8);
            goto LABEL_137;
          case 9:
            v19 = v16[12];
            if (v19 < 9)
              goto LABEL_110;
            if (v19 != 9)
            {
LABEL_221:
              turi::flexible_type_fail(0);
              __break(1u);
            }
            v20 = v135;
            v21 = *(_QWORD **)v16;
            if (*(_QWORD *)&v135 == *(_QWORD *)v16)
              goto LABEL_127;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v21 + 1), *(_QWORD *)&v135 + 8))
              goto LABEL_110;
            v23 = (char *)v21[3];
            v22 = (char *)v21[4];
            v24 = v22 - v23;
            if (v22 == v23)
              goto LABEL_127;
            if (!v21[1])
              goto LABEL_127;
            v25 = 1;
            do
            {
              v26 = *(_QWORD *)v23;
              v23 += 8;
              v25 *= v26;
            }
            while (v23 != v22);
            if (!v25)
              goto LABEL_127;
            v132 = 0;
            std::vector<unsigned long>::vector(&v129, v24 >> 3, &v132);
            locale = v129.__locale_;
            v28 = v130;
            v29 = **(_QWORD **)(*(_QWORD *)&v20 + 8);
            v30 = v130 - v129.__locale_;
            v31 = (v130 - v129.__locale_) >> 3;
            v32 = v31 - 1;
            if (v31 <= 1)
              v33 = 1;
            else
              v33 = (v130 - v129.__locale_) >> 3;
            break;
          default:
            goto LABEL_221;
        }
        do
        {
          if (v28 == locale)
          {
            v41 = 0;
            v42 = *(double *)(*(_QWORD *)v21[1] + 8 * v21[9]);
          }
          else
          {
            v34 = 0;
            v35 = (uint64_t *)v21[6];
            v36 = locale;
            v37 = v33;
            do
            {
              v39 = *(_QWORD *)v36;
              v36 = (std::locale::__imp *)((char *)v36 + 8);
              v38 = v39;
              v40 = *v35++;
              v34 += v40 * v38;
              --v37;
            }
            while (v37);
            v41 = 0;
            v42 = *(double *)(*(_QWORD *)v21[1] + 8 * (v21[9] + v34));
            v43 = *(uint64_t **)(*(_QWORD *)&v20 + 48);
            v44 = locale;
            v45 = v33;
            do
            {
              v47 = *(_QWORD *)v44;
              v44 = (std::locale::__imp *)((char *)v44 + 8);
              v46 = v47;
              v48 = *v43++;
              v41 += v48 * v46;
              --v45;
            }
            while (v45);
          }
          v49 = *(double *)(v29 + 8 * (*(_QWORD *)(*(_QWORD *)&v20 + 72) + v41));
          if (v42 != v49)
            break;
          v50 = v31;
          v51 = v31 - 1;
          if (v30 >= 1)
          {
            v52 = v21[3];
            v53 = *((_QWORD *)locale + v32) + 1;
            *((_QWORD *)locale + v32) = v53;
            v54 = (v30 & 0xFFFFFFFFFFFFFFF8) - 16;
            v51 = v31 - 1;
            if (v53 >= *(_QWORD *)(v52 + 8 * v32))
            {
              while (1)
              {
                *(_QWORD *)((char *)locale + v54 + 8) = 0;
                if (v51 <= 0)
                  break;
                --v51;
                v55 = *(_QWORD *)((char *)locale + v54) + 1;
                *(_QWORD *)((char *)locale + v54) = v55;
                v56 = *(_QWORD *)(v52 + v54);
                v54 -= 8;
                if (v55 < v56)
                {
                  v50 = 1;
                  goto LABEL_70;
                }
              }
              v130 = locale;
              goto LABEL_126;
            }
            v50 = 1;
            v51 = v31 - 1;
          }
LABEL_70:
          ;
        }
        while ((v51 & 0x8000000000000000) == 0 && v50);
        if (locale)
        {
          v130 = locale;
          operator delete(locale);
        }
        if (v42 != v49)
        {
LABEL_110:
          v77 = (int *)global_logger();
          if (v77[169] <= 4)
          {
            if (cppipc::must_cancel((cppipc *)v77))
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            v78 = (file_logger *)global_logger();
            started = file_logger::start_stream(v78, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "_restore_from_checkpoint", 291, 1);
            v80 = pthread_getspecific(*((_QWORD *)started + 74));
            if (v80 && *((_BYTE *)v80 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80 + 2, (uint64_t)"Warning: ignoring provided value of ", 36);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__p, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
            else
              __p = v134;
            v81 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
            v82 = pthread_getspecific(*(_QWORD *)(v81 + 592));
            if (v82 && *((_BYTE *)v82 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82 + 2, (uint64_t)" which is different from the model checkpoint", 45);
            v83 = pthread_getspecific(*(_QWORD *)(v81 + 592));
            if (v83)
            {
              if (*((_BYTE *)v83 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(_QWORD *)(v83[2] - 24) + 16));
                v84 = std::locale::use_facet(&v129, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
                std::locale::~locale(&v129);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v81);
                if (*(_DWORD *)(v81 + 600) == 7)
                {
                  __print_back_trace();
                  exception = __cxa_allocate_exception(8uLL);
                  *exception = "LOG_FATAL encountered";
                  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
                }
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              locale = (std::locale::__imp *)__p.__r_.__value_.__r.__words[0];
LABEL_126:
              operator delete(locale);
            }
          }
        }
      }
LABEL_127:
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v134);
      v85 = v5[1];
      if (v85)
      {
        do
        {
          v86 = (_QWORD **)v85;
          v85 = (_QWORD *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = (_QWORD **)v5[2];
          v7 = *v86 == v5;
          v5 = v86;
        }
        while (!v7);
      }
      v5 = v86;
      if (v86 == v125)
        goto LABEL_171;
    }
    if (v134.__r_.__value_.__l.__size_ == 21)
    {
      v7 = *(_QWORD *)v134.__r_.__value_.__l.__data_ == 0x68635F6C65646F6DLL
        && *(_QWORD *)(v134.__r_.__value_.__r.__words[0] + 8) == 0x746E696F706B6365;
      if (v7 && *(_QWORD *)(v134.__r_.__value_.__r.__words[0] + 13) == 0x687461705F746E69)
        goto LABEL_127;
    }
    if (v134.__r_.__value_.__l.__size_ != 22)
      goto LABEL_37;
    v6 = (std::string *)v134.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
LABEL_171:
  std::string::basic_string[abi:ne180100]<0>(&v134, "resume_from_checkpoint");
  turi::flexible_type::flexible_type<std::string>((uint64_t)&v132, (const std::string *)a2);
  turi::option_manager::set_option(a1 + 224, (uint64_t)&v134, (uint64_t)&v132);
  switch(v133)
  {
    case 2:
      v92 = (unint64_t *)v132;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = v132;
        if (v132)
        {
          if (*(char *)(v132 + 31) < 0)
            operator delete(*(void **)(v132 + 8));
          v96 = v95;
          v97 = 0x1012C404EF22A49;
          goto LABEL_212;
        }
      }
      break;
    case 3:
      v109 = (unint64_t *)v132;
      do
      {
        v110 = __ldaxr(v109);
        v111 = v110 - 1;
      }
      while (__stlxr(v111, v109));
      if (!v111)
      {
        v112 = v132;
        if (v132)
        {
          v113 = *(void **)(v132 + 8);
          if (v113)
          {
            *(_QWORD *)(v132 + 16) = v113;
            operator delete(v113);
          }
          v96 = v112;
          v97 = 0x1080C409938AC02;
          goto LABEL_212;
        }
      }
      break;
    case 4:
      v98 = (unint64_t *)v132;
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        v101 = v132;
        if (v132)
        {
          v129.__locale_ = (std::locale::__imp *)(v132 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
          goto LABEL_205;
        }
      }
      break;
    case 5:
      v114 = (unint64_t *)v132;
      do
      {
        v115 = __ldaxr(v114);
        v116 = v115 - 1;
      }
      while (__stlxr(v116, v114));
      if (!v116)
      {
        v101 = v132;
        if (v132)
        {
          v129.__locale_ = (std::locale::__imp *)(v132 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
LABEL_205:
          v96 = v101;
          v97 = 0x1020C405E66F15BLL;
          goto LABEL_212;
        }
      }
      break;
    case 8:
      v117 = (unint64_t *)v132;
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        v120 = v132;
        if (v132)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v132 + 16));
          v96 = v120;
          v108 = -235920773;
          goto LABEL_211;
        }
      }
      break;
    case 9:
      v102 = (unint64_t *)v132;
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        v105 = v132;
        if (v132)
        {
          v106 = *(void **)(v132 + 48);
          if (v106)
          {
            *(_QWORD *)(v132 + 56) = v106;
            operator delete(v106);
          }
          v107 = *(void **)(v105 + 24);
          if (v107)
          {
            *(_QWORD *)(v105 + 32) = v107;
            operator delete(v107);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v105 + 8);
          v96 = v105;
          v108 = 2071181815;
LABEL_211:
          v97 = v108 | 0x1030C4000000000;
LABEL_212:
          MEMORY[0x219A19A08](v96, v97);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v134, "model_checkpoint_path");
  std::string::basic_string[abi:ne180100]<0>(&v129, "model_checkpoint_path");
  v121 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v124, (const void **)&v129.__locale_);
  turi::option_manager::set_option(a1 + 224, (uint64_t)&v134, v121);
  if (v131 < 0)
    operator delete(v129.__locale_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v124, v125[0]);
  turi::dir_archive::~dir_archive((turi::dir_archive *)v138);
}

void sub_2185ADDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::locale a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,int a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,char a48)
{
  turi::dir_archive::~dir_archive((turi::dir_archive *)&a48);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::fast_evaluate(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, float **a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  float v10;
  float v11;
  unint64_t v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  int v22;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = (_QWORD *)*a3;
  v5 = (_QWORD *)a3[1];
  if ((_QWORD *)*a3 != v5)
  {
    v9 = (uint64_t)(a4 + 2);
    do
    {
      v10 = (**(float (***)(_QWORD, uint64_t, uint64_t, _QWORD))*v4)(*v4, a1, a2, 0);
      v11 = v10;
      v13 = a4[1];
      v12 = (unint64_t)a4[2];
      if ((unint64_t)v13 >= v12)
      {
        v15 = *a4;
        v16 = v13 - *a4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v19);
          v15 = *a4;
          v13 = a4[1];
        }
        else
        {
          v20 = 0;
        }
        v21 = (float *)&v20[4 * v16];
        *v21 = v11;
        v14 = v21 + 1;
        while (v13 != v15)
        {
          v22 = *((_DWORD *)v13-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        *a4 = v21;
        a4[1] = v14;
        a4[2] = (float *)&v20[4 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = v10;
        v14 = v13 + 1;
      }
      a4[1] = v14;
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void sub_2185AE100(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *turi::supervised::xgboost::get_fast_evaluator@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  int v9;
  _QWORD *result;
  char *v12;
  _QWORD *v13;
  void *v14;
  char *v15;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v4 = a1;
    switch(*((_BYTE *)a1 + 23))
    {
      case 3:
        if (*(_WORD *)a1 != 30049 || *((_BYTE *)a1 + 2) != 99)
          goto LABEL_47;
        goto LABEL_31;
      case 4:
        goto LABEL_36;
      case 8:
        if (*a1 == 0x73736F6C5F676F6CLL)
          goto LABEL_40;
        if (*a1 == 0x7963617275636361)
          goto LABEL_42;
        if (*((_BYTE *)a1 + 23) != 4)
          goto LABEL_47;
LABEL_36:
        if (*(_DWORD *)a1 == 1702063474)
          goto LABEL_37;
        goto LABEL_47;
      case 9:
        goto LABEL_25;
      default:
        goto LABEL_47;
    }
  }
  v6 = a1[1];
  if (v6 == 3)
  {
    if (*(_WORD *)*a1 == 30049 && *(_BYTE *)(*a1 + 2) == 99)
    {
LABEL_31:
      if (a2 != 2)
        turi::supervised::xgboost::get_fast_evaluator(std::string,unsigned long)::$_0::operator()();
      result = operator new(0x20uLL);
      result[2] = 0;
      *result = &unk_24D94A770;
      result[1] = 0;
      goto LABEL_38;
    }
    v6 = a1[1];
  }
  else if (v6 == 8 && *(_QWORD *)*a1 == 0x73736F6C5F676F6CLL)
  {
LABEL_40:
    if (a2 == 2)
    {
      result = operator new(0x20uLL);
      result[2] = 0;
      *result = &unk_24D94A6D0;
      result[1] = 0;
      goto LABEL_38;
    }
    result = operator new(0x28uLL);
    result[2] = 0;
    v14 = &unk_24D94A720;
    goto LABEL_46;
  }
  if (v6 == 8)
  {
    if (*(_QWORD *)*a1 != 0x7963617275636361)
    {
      v6 = a1[1];
      goto LABEL_20;
    }
LABEL_42:
    if (a2 == 2)
    {
      result = operator new(0x20uLL);
      result[2] = 0;
      *result = &unk_24D94A7C0;
      result[1] = 0;
      goto LABEL_38;
    }
    result = operator new(0x28uLL);
    result[2] = 0;
    v14 = &unk_24D94A858;
LABEL_46:
    *result = v14;
    result[1] = 0;
    result[3] = v15 + 16;
    v13 = result + 3;
    result[4] = 0;
    goto LABEL_39;
  }
LABEL_20:
  if (v6 != 4)
    goto LABEL_23;
  if (*(_DWORD *)*a1 != 1702063474)
  {
    v6 = a1[1];
LABEL_23:
    if (v6 != 9)
      goto LABEL_47;
    v4 = (uint64_t *)*a1;
LABEL_25:
    v8 = *v4;
    v9 = *((unsigned __int8 *)v4 + 8);
    if (v8 != 0x6F7272655F78616DLL || v9 != 114)
LABEL_47:
      turi::supervised::xgboost::get_fast_evaluator(std::string,unsigned long)::$_1::operator()();
    result = operator new(0x20uLL);
    result[2] = 0;
    *result = &unk_24D94A940;
    result[1] = 0;
    goto LABEL_38;
  }
LABEL_37:
  result = operator new(0x20uLL);
  result[2] = 0;
  *result = &unk_24D94A8F0;
  result[1] = 0;
LABEL_38:
  result[3] = v12 + 16;
  v13 = result + 3;
LABEL_39:
  *a3 = v13;
  a3[1] = result;
  return result;
}

void turi::supervised::xgboost::parse_tracking_metric(unsigned __int8 *a1@<X0>, __int128 **a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  BOOL v10;
  unsigned int v11;
  _BOOL4 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::string::size_type v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::string::size_type v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::string::size_type v33;
  void *v34;
  unsigned int v35;
  double v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::string::size_type v46;
  int v47;
  double v48;
  __int128 v49;
  _BYTE *v50;
  _BYTE *k;
  uint64_t v52;
  __int128 v53;
  std::vector<std::string>::pointer end;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  std::string *v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::vector<std::string>::pointer v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  std::string *v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer m;
  void *v73;
  std::string::size_type size;
  uint64_t v75;
  int *v76;
  file_logger *v77;
  file_logger *started;
  _QWORD *v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  const std::locale::facet *v83;
  int v84;
  std::string::size_type v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::string *first;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  std::__split_buffer<std::string>::pointer v96;
  unint64_t v97;
  std::string::size_type v98;
  std::string::size_type v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t *v103;
  std::__split_buffer<std::string>::pointer v104;
  std::string::size_type v105;
  std::string::size_type v106;
  uint64_t v107;
  double v108;
  double v109;
  size_t v110;
  double *v111;
  double *v112;
  unint64_t v113;
  double *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  size_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  BOOL v131;
  std::bad_cast *exception;
  uint64_t i;
  uint64_t j;
  _QWORD *v135;
  std::bad_cast *v136;
  std::string v137;
  std::vector<std::string> v138;
  char v139;
  uint64_t v140;
  std::string v141;
  std::__split_buffer<std::string> __p;
  _QWORD v143[5];

  v143[3] = *MEMORY[0x24BDAC8D0];
  if ((v8 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rmse");
    std::string::basic_string[abi:ne180100]<0>(&__p.__end_cap_.__value_, "max_error");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_regression_metrics, (const void **)&__p.__first_, 2);
    for (i = 0; i != -6; i -= 3)
    {
      if (*((char *)&__p + i * 8 + 47) < 0)
        operator delete((&__p.__end_cap_.__value_)[i]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_regression_metrics, &dword_217E69000);
  }
  if ((v9 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "accuracy");
    std::string::basic_string[abi:ne180100]<0>(&__p.__end_cap_.__value_, "log_loss");
    std::string::basic_string[abi:ne180100]<0>(v143, "auc");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_classifier_metrics, (const void **)&__p.__first_, 3);
    for (j = 0; j != -9; j -= 3)
    {
      if (SHIBYTE(v143[j + 2]) < 0)
        operator delete((void *)v143[j]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_classifier_metrics, &dword_217E69000);
  }
  memset(&v138, 0, sizeof(v138));
  if (a1[12] == 7)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
LABEL_216:
    __p.__first_ = (std::__split_buffer<std::string>::pointer)&v138;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    return;
  }
  v141.__r_.__value_.__r.__words[0] = 0;
  LODWORD(v141.__r_.__value_.__r.__words[1]) = 0;
  v141.__r_.__value_.__s.__data_[12] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "auto");
  turi::flexible_type::operator=<std::string>((uint64_t *)&v141, (__int128 *)&__p);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  switch(v141.__r_.__value_.__s.__data_[12])
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          v10 = *(_QWORD *)a1 == v141.__r_.__value_.__r.__words[0];
          goto LABEL_187;
        case 1u:
          v36 = *(double *)a1;
          v37 = v141.__r_.__value_.__r.__words[0];
          goto LABEL_186;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_74;
        case 6u:
          v10 = v141.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_187;
        default:
          goto LABEL_235;
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          v36 = *(double *)&v141.__r_.__value_.__l.__data_;
          v37 = *(_QWORD *)a1;
LABEL_186:
          v10 = v36 == (double)v37;
          goto LABEL_187;
        case 1u:
          v12 = *(double *)a1 == *(double *)&v141.__r_.__value_.__l.__data_;
          goto LABEL_213;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_74;
        case 6u:
          v120 = *(double *)&v141.__r_.__value_.__l.__data_;
          v121 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8);
          goto LABEL_192;
        default:
          goto LABEL_235;
      }
    case 2:
      v23 = a1[12];
      if (v23 - 3 < 7 || v23 < 2)
      {
        v12 = 0;
LABEL_28:
        v24 = (unint64_t *)v141.__r_.__value_.__r.__words[0];
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = v141.__r_.__value_.__r.__words[0];
          if (!v141.__r_.__value_.__r.__words[0])
            goto LABEL_73;
          if (*(char *)(v141.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v141.__r_.__value_.__r.__words[0] + 8));
          v21 = (_QWORD *)v27;
          v28 = 0x1012C404EF22A49;
          goto LABEL_72;
        }
LABEL_214:
        if (!v12)
          goto LABEL_74;
        goto LABEL_215;
      }
      if (v23 != 2)
        goto LABEL_235;
      v109 = *(double *)a1;
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
        v110 = *(_QWORD *)(*(_QWORD *)&v109 + 16);
      else
        v110 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      if (*(char *)(v141.__r_.__value_.__r.__words[0] + 31) < 0)
        v122 = *(_QWORD *)(v141.__r_.__value_.__r.__words[0] + 16);
      else
        v122 = *(unsigned __int8 *)(v141.__r_.__value_.__r.__words[0] + 31);
      if (v110 != v122)
        goto LABEL_211;
      v123 = (_QWORD *)(*(_QWORD *)&v109 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) != 0)
        v123 = (_QWORD *)*v123;
      v124 = (_QWORD *)(v141.__r_.__value_.__r.__words[0] + 8);
      if ((*(_BYTE *)(v141.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
        v124 = (_QWORD *)*v124;
      if ((*(_BYTE *)(*(_QWORD *)a1 + 31) & 0x80) == 0)
      {
        if (v110)
        {
          v125 = v110 - 1;
          do
          {
            v127 = *(unsigned __int8 *)v123;
            v123 = (_QWORD *)((char *)v123 + 1);
            v126 = v127;
            v129 = *(unsigned __int8 *)v124;
            v124 = (_QWORD *)((char *)v124 + 1);
            v128 = v129;
            v131 = v125-- != 0;
            v12 = v126 == v128;
          }
          while (v126 == v128 && v131);
          goto LABEL_213;
        }
        goto LABEL_212;
      }
      v10 = memcmp(v123, v124, v110) == 0;
LABEL_187:
      v12 = v10;
      goto LABEL_213;
    case 3:
      v29 = a1[12];
      if (v29 > 9)
        goto LABEL_235;
      if (v29 != 3)
      {
        v12 = 0;
LABEL_38:
        v30 = (unint64_t *)v141.__r_.__value_.__r.__words[0];
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = v141.__r_.__value_.__r.__words[0];
          if (!v141.__r_.__value_.__r.__words[0])
            goto LABEL_73;
          v34 = *(void **)(v141.__r_.__value_.__r.__words[0] + 8);
          if (v34)
          {
            *(_QWORD *)(v141.__r_.__value_.__r.__words[0] + 16) = v34;
            operator delete(v34);
          }
          v21 = (_QWORD *)v33;
          v28 = 0x1080C409938AC02;
          goto LABEL_72;
        }
        goto LABEL_214;
      }
      v111 = *(double **)(*(_QWORD *)a1 + 8);
      v112 = *(double **)(*(_QWORD *)a1 + 16);
      v113 = v112 - v111;
      v114 = *(double **)(v141.__r_.__value_.__r.__words[0] + 8);
      if (v113 != (uint64_t)(*(_QWORD *)(v141.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v114) >> 3)
        goto LABEL_211;
      if (v112 == v111)
        goto LABEL_212;
      if (v113 <= 1)
        v115 = 1;
      else
        v115 = v112 - v111;
      if (*v111 != *v114)
        goto LABEL_211;
      v116 = 1;
      do
      {
        v117 = v116;
        if (v115 == v116)
          break;
        v118 = v111[v116];
        v119 = v114[v116++];
      }
      while (v118 == v119);
      v12 = v117 >= v113;
      goto LABEL_213;
    case 4:
      v11 = a1[12];
      if (v11 > 9)
        goto LABEL_235;
      if (v11 != 4)
      {
        v12 = 0;
LABEL_13:
        v13 = (unint64_t *)v141.__r_.__value_.__r.__words[0];
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (v15)
          goto LABEL_214;
        v16 = v141.__r_.__value_.__r.__words[0];
        if (!v141.__r_.__value_.__r.__words[0])
          goto LABEL_73;
        __p.__first_ = (std::__split_buffer<std::string>::pointer)(v141.__r_.__value_.__r.__words[0] + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_59:
        v21 = (_QWORD *)v16;
        v28 = 0x1020C405E66F15BLL;
LABEL_72:
        MEMORY[0x219A19A08](v21, v28);
LABEL_73:
        if (!v12)
        {
LABEL_74:
          v47 = a1[12];
          if (v47 == 4)
          {
            v50 = *(_BYTE **)(*(_QWORD *)a1 + 8);
            for (k = *(_BYTE **)(*(_QWORD *)a1 + 16); v50 != k; v50 += 16)
            {
              if (v50[12] != 2)
              {
                exception = (std::bad_cast *)__cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid type for metric. Expect string or list[string]");
                turi::bad_cast::bad_cast(exception, (__int128 *)&__p);
              }
              v52 = *(_QWORD *)v50;
              if (*(char *)(*(_QWORD *)v50 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(v52 + 8), *(_QWORD *)(v52 + 16));
              }
              else
              {
                v53 = *(_OWORD *)(v52 + 8);
                v141.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 24);
                *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v53;
              }
              end = v138.__end_;
              if (v138.__end_ >= v138.__end_cap_.__value_)
              {
                v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v138.__end_ - (char *)v138.__begin_) >> 3);
                v57 = v56 + 1;
                if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v138.__end_cap_.__value_ - (char *)v138.__begin_) >> 3) > v57)
                  v57 = 0x5555555555555556 * (((char *)v138.__end_cap_.__value_ - (char *)v138.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v138.__end_cap_.__value_ - (char *)v138.__begin_) >> 3) >= 0x555555555555555)
                  v58 = 0xAAAAAAAAAAAAAAALL;
                else
                  v58 = v57;
                __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v138.__end_cap_;
                if (v58)
                  v59 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v138.__end_cap_, v58);
                else
                  v59 = 0;
                v60 = v59 + v56;
                __p.__first_ = v59;
                __p.__begin_ = v60;
                __p.__end_cap_.__value_ = &v59[v58];
                v61 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
                v60->__r_.__value_.__r.__words[2] = v141.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
                memset(&v141, 0, sizeof(v141));
                __p.__end_ = v60 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v138, &__p);
                v62 = v138.__end_;
                std::__split_buffer<std::string>::~__split_buffer(&__p);
                v138.__end_ = v62;
                if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v141.__r_.__value_.__l.__data_);
              }
              else
              {
                v55 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
                v138.__end_->__r_.__value_.__r.__words[2] = v141.__r_.__value_.__r.__words[2];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v55;
                v138.__end_ = end + 1;
              }
            }
          }
          else
          {
            if (v47 != 2)
            {
              v136 = (std::bad_cast *)__cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid type for metric. Expect string or list[string]");
              turi::bad_cast::bad_cast(v136, (__int128 *)&__p);
            }
            v48 = *(double *)a1;
            if (*(char *)(*(_QWORD *)a1 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(*(_QWORD *)&v48 + 8), *(_QWORD *)(*(_QWORD *)&v48 + 16));
            }
            else
            {
              v49 = *(_OWORD *)(*(_QWORD *)&v48 + 8);
              v141.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)&v48 + 24);
              *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v49;
            }
            v63 = v138.__end_;
            if (v138.__end_ >= v138.__end_cap_.__value_)
            {
              v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v138.__end_ - (char *)v138.__begin_) >> 3) + 1;
              if (v65 > 0xAAAAAAAAAAAAAAALL)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v138.__end_cap_.__value_ - (char *)v138.__begin_) >> 3) > v65)
                v65 = 0x5555555555555556 * (((char *)v138.__end_cap_.__value_ - (char *)v138.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v138.__end_cap_.__value_ - (char *)v138.__begin_) >> 3) >= 0x555555555555555)
                v66 = 0xAAAAAAAAAAAAAAALL;
              else
                v66 = v65;
              __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v138.__end_cap_;
              if (v66)
                v67 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v138.__end_cap_, v66);
              else
                v67 = 0;
              v68 = (std::string *)((char *)v67 + 8 * (((char *)v138.__end_ - (char *)v138.__begin_) >> 3));
              __p.__first_ = v67;
              __p.__begin_ = v68;
              __p.__end_cap_.__value_ = &v67[v66];
              v69 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
              v68->__r_.__value_.__r.__words[2] = v141.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
              memset(&v141, 0, sizeof(v141));
              __p.__end_ = v68 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v138, &__p);
              v70 = v138.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              v138.__end_ = v70;
              if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v141.__r_.__value_.__l.__data_);
            }
            else
            {
              v64 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
              v138.__end_->__r_.__value_.__r.__words[2] = v141.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
              v138.__end_ = v63 + 1;
            }
          }
          a4->__r_.__value_.__r.__words[0] = 0;
          a4->__r_.__value_.__l.__size_ = 0;
          a4->__r_.__value_.__r.__words[2] = 0;
          begin = v138.__begin_;
          for (m = v138.__end_; begin != m; ++begin)
          {
            if (a3)
              v73 = &turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_classifier_metrics;
            else
              v73 = &turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_regression_metrics;
            if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v73, (const void **)&begin->__r_.__value_.__l.__data_))
            {
              size = a4->__r_.__value_.__l.__size_;
              if (size >= a4->__r_.__value_.__r.__words[2])
              {
                v75 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (__int128 *)begin);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, (__int128 *)begin);
                v75 = size + 24;
              }
              a4->__r_.__value_.__l.__size_ = v75;
            }
            else
            {
              v76 = (int *)global_logger();
              if (v76[169] <= 4)
              {
                if (cppipc::must_cancel((cppipc *)v76))
                  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
                v77 = (file_logger *)global_logger();
                started = file_logger::start_stream(v77, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "parse_tracking_metric", 436, 1);
                v79 = pthread_getspecific(*((_QWORD *)started + 74));
                if (v79 && *((_BYTE *)v79 + 280))
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79 + 2, (uint64_t)"WARNING: Ignore unsupported tracking metric ", 44);
                if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v137, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
                }
                else
                {
                  v80 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
                  v137.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v80;
                }
                v81 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v137);
                v82 = pthread_getspecific(*(_QWORD *)(v81 + 592));
                if (v82)
                {
                  if (*((_BYTE *)v82 + 280))
                  {
                    std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(v82[2] - 24) + 16));
                    v83 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
                    ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
                    std::locale::~locale((std::locale *)&__p);
                    std::ostream::put();
                    std::ostream::flush();
                    file_logger::stream_flush((file_logger *)v81);
                    if (*(_DWORD *)(v81 + 600) == 7)
                    {
                      __print_back_trace();
                      v135 = __cxa_allocate_exception(8uLL);
                      *v135 = "LOG_FATAL encountered";
                      __cxa_throw(v135, MEMORY[0x24BEDB718], 0);
                    }
                  }
                }
                if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v137.__r_.__value_.__l.__data_);
              }
            }
          }
          goto LABEL_216;
        }
LABEL_215:
        a4->__r_.__value_.__r.__words[0] = 0;
        a4->__r_.__value_.__l.__size_ = 0;
        a4->__r_.__value_.__r.__words[2] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
        goto LABEL_216;
      }
      v84 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v139, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(v141.__r_.__value_.__r.__words[0] + 8));
      goto LABEL_181;
    case 5:
      v38 = a1[12];
      if (v38 > 9)
        goto LABEL_235;
      if (v38 != 5)
      {
        v12 = 0;
LABEL_54:
        v39 = (unint64_t *)v141.__r_.__value_.__r.__words[0];
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (v41)
          goto LABEL_214;
        v16 = v141.__r_.__value_.__r.__words[0];
        if (!v141.__r_.__value_.__r.__words[0])
          goto LABEL_73;
        __p.__first_ = (std::__split_buffer<std::string>::pointer)(v141.__r_.__value_.__r.__words[0] + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_59;
      }
      v84 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v139, (uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t **)(v141.__r_.__value_.__r.__words[0] + 8));
      goto LABEL_181;
    case 6:
      switch(a1[12])
      {
        case 0u:
          v10 = *(_QWORD *)a1 == (uint64_t)(v141.__r_.__value_.__r.__words[0] << 8) >> 8
             && LODWORD(v141.__r_.__value_.__r.__words[1]) == 0;
          goto LABEL_187;
        case 1u:
          v121 = *(double *)a1;
          v120 = (double)SLODWORD(v141.__r_.__value_.__r.__words[1]) / 1000000.0
               + (double)((uint64_t)(v141.__r_.__value_.__r.__words[0] << 8) >> 8);
LABEL_192:
          v12 = vabdd_f64(v121, v120) < 0.0000005;
          goto LABEL_213;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_74;
        case 6u:
          v10 = ((v141.__r_.__value_.__r.__words[0] ^ *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL) == 0
             && *((_DWORD *)a1 + 2) == LODWORD(v141.__r_.__value_.__r.__words[1]);
          goto LABEL_187;
        default:
          goto LABEL_235;
      }
    case 7:
      v35 = a1[12];
      if (v35 < 7 || v35 - 8 < 2)
        goto LABEL_74;
      if (v35 != 7)
        goto LABEL_235;
      goto LABEL_215;
    case 8:
      v42 = a1[12];
      if (v42 >= 8 && v42 != 9)
      {
        if (v42 == 8)
        {
          v84 = turi::image_type::operator==(*(_QWORD *)a1 + 8, v141.__r_.__value_.__r.__words[0] + 8);
LABEL_181:
          v12 = v84;
          goto LABEL_213;
        }
        goto LABEL_235;
      }
      v12 = 0;
LABEL_66:
      v43 = (unint64_t *)v141.__r_.__value_.__r.__words[0];
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_214;
      v46 = v141.__r_.__value_.__r.__words[0];
      if (!v141.__r_.__value_.__r.__words[0])
        goto LABEL_73;
      boost::detail::shared_count::~shared_count((unsigned int **)(v141.__r_.__value_.__r.__words[0] + 16));
      v21 = (_QWORD *)v46;
      v22 = -235920773;
      goto LABEL_71;
    case 9:
      v17 = a1[12];
      if (v17 < 9)
      {
        v12 = 0;
LABEL_20:
        v18 = (unint64_t *)v141.__r_.__value_.__r.__words[0];
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (v20)
          goto LABEL_214;
        if (!v141.__r_.__value_.__r.__words[0])
          goto LABEL_73;
        v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v141.__r_.__value_.__l.__data_);
        v22 = 2071181815;
LABEL_71:
        v28 = v22 | 0x1030C4000000000;
        goto LABEL_72;
      }
      if (v17 == 9)
      {
        v85 = v141.__r_.__value_.__r.__words[0];
        v86 = *(_QWORD **)a1;
        if (v141.__r_.__value_.__r.__words[0] == *(_QWORD *)a1)
          goto LABEL_212;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v86 + 1), v141.__r_.__value_.__r.__words[0] + 8))
        {
LABEL_211:
          v12 = 0;
          goto LABEL_213;
        }
        v88 = (char *)v86[3];
        v87 = (char *)v86[4];
        v89 = v87 - v88;
        if (v87 == v88)
          goto LABEL_212;
        if (!v86[1])
          goto LABEL_212;
        v90 = 1;
        do
        {
          v91 = *(_QWORD *)v88;
          v88 += 8;
          v90 *= v91;
        }
        while (v88 != v87);
        if (!v90)
        {
LABEL_212:
          v12 = 1;
          goto LABEL_213;
        }
        v140 = 0;
        std::vector<unsigned long>::vector(&__p, v89 >> 3, &v140);
        do
        {
          first = __p.__first_;
          if (__p.__begin_ == __p.__first_)
          {
            v101 = 0;
            v102 = *(double *)(*(_QWORD *)v86[1] + 8 * v86[9]);
          }
          else
          {
            v93 = 0;
            v94 = ((char *)__p.__begin_ - (char *)__p.__first_) >> 3;
            v95 = (uint64_t *)v86[6];
            if (v94 <= 1)
              v94 = 1;
            v96 = __p.__first_;
            v97 = v94;
            do
            {
              v99 = v96->__r_.__value_.__r.__words[0];
              v96 = (std::__split_buffer<std::string>::pointer)((char *)v96 + 8);
              v98 = v99;
              v100 = *v95++;
              v93 += v100 * v98;
              --v97;
            }
            while (v97);
            v101 = 0;
            v102 = *(double *)(*(_QWORD *)v86[1] + 8 * (v86[9] + v93));
            v103 = *(uint64_t **)(v85 + 48);
            v104 = __p.__first_;
            do
            {
              v106 = v104->__r_.__value_.__r.__words[0];
              v104 = (std::__split_buffer<std::string>::pointer)((char *)v104 + 8);
              v105 = v106;
              v107 = *v103++;
              v101 += v107 * v105;
              --v94;
            }
            while (v94);
          }
          v108 = *(double *)(**(_QWORD **)(v85 + 8) + 8 * (*(_QWORD *)(v85 + 72) + v101));
          v12 = v102 == v108;
          if (v102 != v108)
            goto LABEL_160;
        }
        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v86 + 1), (uint64_t *)&__p));
        first = __p.__first_;
LABEL_160:
        if (first)
        {
          __p.__begin_ = first;
          operator delete(first);
        }
LABEL_213:
        switch(v141.__r_.__value_.__s.__data_[12])
        {
          case 2:
            goto LABEL_28;
          case 3:
            goto LABEL_38;
          case 4:
            goto LABEL_13;
          case 5:
            goto LABEL_54;
          case 8:
            goto LABEL_66;
          case 9:
            goto LABEL_20;
          default:
            goto LABEL_214;
        }
      }
LABEL_235:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
    default:
      goto LABEL_235;
  }
}

void sub_2185AF294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,int a23,char a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v36;

  v36 = 0;
  while (1)
  {
    if (*(char *)(v34 + v36 + 71) < 0)
      operator delete(*(void **)(v34 + v36 + 48));
    v36 -= 24;
    if (v36 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t turi::supervised::xgboost::transform_prediction@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  turi::thread_pool *v26;
  __int128 v27;
  turi::thread_pool *instance;
  turi::thread *v29;
  turi::thread_pool *tls_data;
  uint64_t v31;
  uint64_t *v32;
  turi::thread_pool *v33;
  uint64_t v34;
  double v35;
  turi::thread *v36;
  uint64_t v37;
  turi::thread_pool *v38;
  __int128 v39;
  turi::thread_pool *v40;
  turi::thread *v41;
  turi::thread_pool *v42;
  uint64_t v43;
  turi::thread_pool *v44;
  uint64_t v45;
  double v46;
  uint64_t *v47;
  turi::thread *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  float *v56;
  float *v57;
  float *v58;
  float v59;
  uint64_t v60;
  float *v61;
  float v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  BOOL v83;
  int v84;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  unsigned int v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  turi::thread_pool *v127;
  turi::thread *v128;
  turi::thread_pool *v129;
  turi::thread_pool *v130;
  uint64_t v131;
  double v132;
  turi::thread *v133;
  unint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  unsigned __int32 *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __n128 v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _BOOL8 v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  void *v163;
  void *v164;
  unsigned int v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  void *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  float *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  float v196;
  double *v197;
  _QWORD *v198;
  _QWORD *v199;
  void **v200;
  _QWORD *v201;
  uint64_t v202;
  std::string *v203;
  __int128 v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  void *v213;
  void *v214;
  unsigned int v215;
  _QWORD *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int *v229;
  unsigned int v230;
  __int128 v231;
  __int128 v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  void *v238;
  _QWORD *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  void *v254;
  void *v255;
  unsigned int v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  void *v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  BOOL v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __n128 v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unsigned __int32 *v313;
  uint64_t v314;
  void *v315;
  unsigned int v316;
  int v317;
  unint64_t *v319;
  unint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  _QWORD *v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t v333;
  _QWORD *v334;
  void *v335;
  void *v336;
  unsigned int v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  _QWORD *v341;
  void *v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t *v371;
  unint64_t v372;
  uint64_t i;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  float *v379;
  float *v380;
  float v381;
  uint64_t v382;
  float *v383;
  float v384;
  float v385;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  __int128 v404;
  std::__shared_weak_count *v405;
  std::__shared_weak_count *v406;
  __int128 v407;
  std::__shared_weak_count *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t v411;
  void **v412;
  __int128 v413;
  void **v414;
  _QWORD *v415;
  uint64_t *v416;
  void *__p[3];
  __int128 v418;
  void ***v419;
  uint64_t *v420;
  _QWORD v421[3];
  _QWORD *v422;
  _BYTE v423[24];
  _BYTE *v424;
  _BYTE v425[24];
  _BYTE *v426;
  uint64_t v427;

  v427 = *MEMORY[0x24BDAC8D0];
  v411 = a3;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a5);
  v398 = a5;
  turi::sarray<turi::flexible_type>::open_for_write(*a5, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 0);
  if (!a3)
  {
LABEL_15:
    turi::sarray<turi::flexible_type>::set_type(*a5, 1);
    turi::copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,void>(*a1, a1[1], *a5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v398 + 40))(*v398);
  }
  if (a3 == 2)
  {
    switch(a2)
    {
      case 0u:
      case 1u:
        turi::sarray<turi::flexible_type>::set_type(*a5, *(char *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 28));
        v16 = *(_QWORD *)(*(_QWORD *)a4 + 24);
        v17 = *(void ***)(v16 + 32);
        v18 = *(std::__shared_weak_count **)(v16 + 40);
        v409 = (unint64_t)v17;
        v410 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
          v21 = *a1;
          v406 = v18;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          do
            v23 = __ldxr(p_shared_owners);
          while (__stxr(v23 + 1, p_shared_owners));
          *(_QWORD *)&v407 = v21;
          *((_QWORD *)&v407 + 1) = v17;
          v408 = v18;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v406 = 0;
          *(_QWORD *)&v407 = *a1;
          *((_QWORD *)&v407 + 1) = v17;
          v408 = 0;
        }
        v277 = a1[1];
        v403 = v410;
        if (v410)
        {
          v278 = &v410->__shared_owners_;
          do
            v279 = __ldxr((unint64_t *)v278);
          while (__stxr(v279 + 1, (unint64_t *)v278));
          do
            v280 = __ldxr((unint64_t *)v278);
          while (__stxr(v280 + 1, (unint64_t *)v278));
          *(_QWORD *)&v404 = v277;
          *((_QWORD *)&v404 + 1) = v409;
          v405 = v410;
          do
            v281 = __ldxr((unint64_t *)v278);
          while (__stxr(v281 + 1, (unint64_t *)v278));
          do
            v282 = __ldaxr((unint64_t *)v278);
          while (__stlxr(v282 - 1, (unint64_t *)v278));
          if (!v282)
          {
            ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
            std::__shared_weak_count::__release_weak(v410);
          }
        }
        else
        {
          *(_QWORD *)&v404 = a1[1];
          *((_QWORD *)&v404 + 1) = v409;
          v405 = 0;
        }
        if (*(_BYTE *)(*a5 + 248))
          v283 = *(_BYTE *)(*a5 + 249) == 0;
        else
          v283 = 1;
        if (v283)
          turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
        v397 = *a5;
        v413 = v407;
        v414 = (void **)&v408->__vftable;
        if (v408)
        {
          v284 = (unint64_t *)&v408->__shared_owners_;
          do
            v285 = __ldxr(v284);
          while (__stxr(v285 + 1, v284));
        }
        v418 = v404;
        v419 = (void ***)v405;
        if (v405)
        {
          v286 = (unint64_t *)&v405->__shared_owners_;
          do
            v287 = __ldxr(v286);
          while (__stxr(v287 + 1, v286));
        }
        if (v408)
        {
          v288 = (unint64_t *)&v408->__shared_owners_;
          do
            v289 = __ldxr(v288);
          while (__stxr(v289 + 1, v288));
        }
        if (v405)
        {
          v290 = (unint64_t *)&v405->__shared_owners_;
          do
            v291 = __ldxr(v290);
          while (__stxr(v291 + 1, v290));
        }
        if (v408)
        {
          v292 = (unint64_t *)&v408->__shared_owners_;
          do
            v293 = __ldxr(v292);
          while (__stxr(v293 + 1, v292));
        }
        if (v405)
        {
          v294 = (unint64_t *)&v405->__shared_owners_;
          do
            v295 = __ldxr(v294);
          while (__stxr(v295 + 1, v294));
          do
            v296 = __ldaxr(v294);
          while (__stlxr(v296 - 1, v294));
          if (!v296)
          {
            ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
            std::__shared_weak_count::__release_weak(v405);
          }
        }
        if (v408)
        {
          v297 = (unint64_t *)&v408->__shared_owners_;
          do
            v298 = __ldaxr(v297);
          while (__stlxr(v298 - 1, v297));
          if (!v298)
          {
            ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
            std::__shared_weak_count::__release_weak(v408);
          }
        }
        if ((_QWORD)v404 == (_QWORD)v407)
          v299 = 0;
        else
          v299 = ((unint64_t)(v404 - v407 - 4) >> 2) + 1;
        v393 = v299;
        v300 = v397;
        if (v405)
        {
          v301 = (unint64_t *)&v405->__shared_owners_;
          do
            v302 = __ldaxr(v301);
          while (__stlxr(v302 - 1, v301));
          if (!v302)
          {
            ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
            std::__shared_weak_count::__release_weak(v405);
          }
        }
        if (v408)
        {
          v303 = (unint64_t *)&v408->__shared_owners_;
          do
            v304 = __ldaxr(v303);
          while (__stlxr(v304 - 1, v303));
          if (!v304)
          {
            ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
            std::__shared_weak_count::__release_weak(v408);
          }
        }
        if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v397 + 24))(v397))
          goto LABEL_463;
        v305 = 0;
        v306 = 0;
        v307 = 0;
        while (1)
        {
          v308 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v300 + 24))(v300);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v300 + 32))(v421, v300, v306);
          v310 = v393 - v307;
          v402 = v308 - v306;
          if (v308 - v306 <= v393 - v307)
          {
            v311 = 0;
            v312 = v308 + v305;
            v313 = (unsigned __int32 *)v413;
            do
            {
              v309.n128_u32[0] = *v313;
              v314 = *(_QWORD *)(*((_QWORD *)&v413 + 1) + 80) + 16 * (*(float *)v313 >= 0.5);
              __p[0] = 0;
              LODWORD(__p[1]) = 0;
              BYTE4(__p[1]) = 0;
              if ((void **)v314 != __p)
              {
                v315 = *(void **)v314;
                *(void **)((char *)__p + 5) = *(void **)(v314 + 5);
                __p[0] = v315;
                v316 = *(unsigned __int8 *)(v314 + 12);
                BYTE4(__p[1]) = v316;
                v83 = v316 > 9;
                v317 = (1 << v316) & 0x33C;
                if (!v83 && v317 != 0)
                {
                  v319 = (unint64_t *)__p[0];
                  do
                    v320 = __ldaxr(v319);
                  while (__stlxr(v320 + 1, v319));
                }
              }
              if (!v424)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_BYTE *, void **, __n128))(*(_QWORD *)v424 + 48))(v424, __p, v309);
              switch(BYTE4(__p[1]))
              {
                case 2:
                  v321 = (unint64_t *)__p[0];
                  do
                  {
                    v322 = __ldaxr(v321);
                    v323 = v322 - 1;
                  }
                  while (__stlxr(v323, v321));
                  if (!v323)
                  {
                    v324 = __p[0];
                    if (__p[0])
                    {
                      if (*((char *)__p[0] + 31) < 0)
                        operator delete(*((void **)__p[0] + 1));
                      v325 = v324;
                      v326 = 0x1012C404EF22A49;
                      goto LABEL_443;
                    }
                  }
                  break;
                case 3:
                  v338 = (unint64_t *)__p[0];
                  do
                  {
                    v339 = __ldaxr(v338);
                    v340 = v339 - 1;
                  }
                  while (__stlxr(v340, v338));
                  if (!v340)
                  {
                    v341 = __p[0];
                    if (__p[0])
                    {
                      v342 = (void *)*((_QWORD *)__p[0] + 1);
                      if (v342)
                      {
                        *((_QWORD *)__p[0] + 2) = v342;
                        operator delete(v342);
                      }
                      v325 = v341;
                      v326 = 0x1080C409938AC02;
                      goto LABEL_443;
                    }
                  }
                  break;
                case 4:
                  v327 = (unint64_t *)__p[0];
                  do
                  {
                    v328 = __ldaxr(v327);
                    v329 = v328 - 1;
                  }
                  while (__stlxr(v329, v327));
                  if (!v329)
                  {
                    v330 = __p[0];
                    if (__p[0])
                    {
                      v412 = (void **)((char *)__p[0] + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v412);
                      goto LABEL_436;
                    }
                  }
                  break;
                case 5:
                  v343 = (unint64_t *)__p[0];
                  do
                  {
                    v344 = __ldaxr(v343);
                    v345 = v344 - 1;
                  }
                  while (__stlxr(v345, v343));
                  if (!v345)
                  {
                    v330 = __p[0];
                    if (__p[0])
                    {
                      v412 = (void **)((char *)__p[0] + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v412);
LABEL_436:
                      v325 = v330;
                      v326 = 0x1020C405E66F15BLL;
                      goto LABEL_443;
                    }
                  }
                  break;
                case 8:
                  v346 = (unint64_t *)__p[0];
                  do
                  {
                    v347 = __ldaxr(v346);
                    v348 = v347 - 1;
                  }
                  while (__stlxr(v348, v346));
                  if (!v348)
                  {
                    v349 = __p[0];
                    if (__p[0])
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)__p[0] + 2);
                      v325 = v349;
                      v337 = -235920773;
                      goto LABEL_442;
                    }
                  }
                  break;
                case 9:
                  v331 = (unint64_t *)__p[0];
                  do
                  {
                    v332 = __ldaxr(v331);
                    v333 = v332 - 1;
                  }
                  while (__stlxr(v333, v331));
                  if (!v333)
                  {
                    v334 = __p[0];
                    if (__p[0])
                    {
                      v335 = (void *)*((_QWORD *)__p[0] + 6);
                      if (v335)
                      {
                        *((_QWORD *)__p[0] + 7) = v335;
                        operator delete(v335);
                      }
                      v336 = (void *)v334[3];
                      if (v336)
                      {
                        v334[4] = v336;
                        operator delete(v336);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v334 + 1));
                      v325 = v334;
                      v337 = 2071181815;
LABEL_442:
                      v326 = v337 | 0x1030C4000000000;
LABEL_443:
                      MEMORY[0x219A19A08](v325, v326);
                    }
                  }
                  break;
                default:
                  break;
              }
              v313 = (unsigned __int32 *)(v413 + 4);
              *(_QWORD *)&v413 = v413 + 4;
              ++v311;
              v350 = v310 / v312;
              if (v310 / v312 <= 1)
                v350 = 1;
            }
            while (v311 != v350);
          }
          v351 = v426;
          if (v426 == v425)
          {
            v351 = v425;
            v352 = 4;
            v300 = v397;
          }
          else
          {
            v300 = v397;
            if (!v426)
              goto LABEL_452;
            v352 = 5;
          }
          (*(void (**)(void))(*v351 + 8 * v352))();
LABEL_452:
          v353 = v424;
          if (v424 == v423)
          {
            v353 = v423;
            v354 = 4;
          }
          else
          {
            if (!v424)
              goto LABEL_457;
            v354 = 5;
          }
          (*(void (**)(void))(*v353 + 8 * v354))();
LABEL_457:
          v355 = v422;
          if (v422 == v421)
          {
            v355 = v421;
            v356 = 4;
            goto LABEL_461;
          }
          if (v422)
          {
            v356 = 5;
LABEL_461:
            (*(void (**)(void))(*v355 + 8 * v356))();
          }
          v307 += v310 / v402;
          ++v306;
          --v305;
          if (v306 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v300 + 24))(v300))
          {
LABEL_463:
            v357 = (std::__shared_weak_count *)v419;
            if (v419)
            {
              v358 = (unint64_t *)(v419 + 1);
              do
                v359 = __ldaxr(v358);
              while (__stlxr(v359 - 1, v358));
              if (!v359)
              {
                ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                std::__shared_weak_count::__release_weak(v357);
              }
            }
            v360 = (std::__shared_weak_count *)v414;
            if (v414)
            {
              v361 = (unint64_t *)(v414 + 1);
              do
                v362 = __ldaxr(v361);
              while (__stlxr(v362 - 1, v361));
              if (!v362)
              {
                ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                std::__shared_weak_count::__release_weak(v360);
              }
            }
            if (v405)
            {
              v363 = (unint64_t *)&v405->__shared_owners_;
              do
                v364 = __ldaxr(v363);
              while (__stlxr(v364 - 1, v363));
              if (!v364)
              {
                ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                std::__shared_weak_count::__release_weak(v405);
              }
            }
            if (v403)
            {
              v365 = (unint64_t *)&v403->__shared_owners_;
              do
                v366 = __ldaxr(v365);
              while (__stlxr(v366 - 1, v365));
              if (!v366)
              {
                ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
                std::__shared_weak_count::__release_weak(v403);
              }
            }
            if (v408)
            {
              v367 = (unint64_t *)&v408->__shared_owners_;
              do
                v368 = __ldaxr(v367);
              while (__stlxr(v368 - 1, v367));
              if (!v368)
              {
                ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
                std::__shared_weak_count::__release_weak(v408);
              }
            }
            if (v406)
            {
              v369 = (unint64_t *)&v406->__shared_owners_;
              do
                v370 = __ldaxr(v369);
              while (__stlxr(v370 - 1, v369));
              if (!v370)
              {
                ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                std::__shared_weak_count::__release_weak(v406);
              }
            }
            if (v410)
            {
              v371 = &v410->__shared_owners_;
              do
                v372 = __ldaxr((unint64_t *)v371);
              while (__stlxr(v372 - 1, (unint64_t *)v371));
              if (!v372)
              {
                ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                std::__shared_weak_count::__release_weak(v410);
              }
            }
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v398 + 40))(*v398);
          }
        }
      case 2u:
        turi::sarray<turi::flexible_type>::set_type(*a5, 0);
        v135 = *a5;
        if (*(_BYTE *)(*a5 + 248))
          v136 = *(_BYTE *)(*a5 + 249) == 0;
        else
          v136 = 1;
        if (v136)
          turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
        v138 = (unsigned __int32 *)*a1;
        v137 = a1[1];
        if (v137 == *a1)
          v139 = 0;
        else
          v139 = ((unint64_t)(v137 - *a1 - 4) >> 2) + 1;
        v395 = v139;
        if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 24))(v135))
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v398 + 40))(*v398);
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v391 = v135;
        while (1)
        {
          v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 24))(v135);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v135 + 32))(v421, v135, v141);
          v145 = v395 - v142;
          v400 = v143 - v141;
          if (v143 - v141 <= v395 - v142)
          {
            v146 = 0;
            v147 = v143 + v140;
            do
            {
              v144.n128_u32[0] = *v138;
              v148 = *(float *)v138 >= 0.5;
              BYTE12(v413) = 0;
              DWORD2(v413) = 0;
              *(_QWORD *)&v413 = v148;
              if (!v424)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_BYTE *, __int128 *, __n128))(*(_QWORD *)v424 + 48))(v424, &v413, v144);
              switch(BYTE12(v413))
              {
                case 2:
                  v149 = (unint64_t *)v413;
                  do
                  {
                    v150 = __ldaxr(v149);
                    v151 = v150 - 1;
                  }
                  while (__stlxr(v151, v149));
                  if (!v151)
                  {
                    v152 = v413;
                    if ((_QWORD)v413)
                    {
                      if (*(char *)(v413 + 31) < 0)
                        operator delete(*(void **)(v413 + 8));
                      v153 = v152;
                      v154 = 0x1012C404EF22A49;
                      goto LABEL_193;
                    }
                  }
                  break;
                case 3:
                  v166 = (unint64_t *)v413;
                  do
                  {
                    v167 = __ldaxr(v166);
                    v168 = v167 - 1;
                  }
                  while (__stlxr(v168, v166));
                  if (!v168)
                  {
                    v169 = v413;
                    if ((_QWORD)v413)
                    {
                      v170 = *(void **)(v413 + 8);
                      if (v170)
                      {
                        *(_QWORD *)(v413 + 16) = v170;
                        operator delete(v170);
                      }
                      v153 = v169;
                      v154 = 0x1080C409938AC02;
                      goto LABEL_193;
                    }
                  }
                  break;
                case 4:
                  v155 = (unint64_t *)v413;
                  do
                  {
                    v156 = __ldaxr(v155);
                    v157 = v156 - 1;
                  }
                  while (__stlxr(v157, v155));
                  if (!v157)
                  {
                    v158 = v413;
                    if ((_QWORD)v413)
                    {
                      *(_QWORD *)&v418 = v413 + 8;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v418);
                      goto LABEL_186;
                    }
                  }
                  break;
                case 5:
                  v171 = (unint64_t *)v413;
                  do
                  {
                    v172 = __ldaxr(v171);
                    v173 = v172 - 1;
                  }
                  while (__stlxr(v173, v171));
                  if (!v173)
                  {
                    v158 = v413;
                    if ((_QWORD)v413)
                    {
                      *(_QWORD *)&v418 = v413 + 8;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v418);
LABEL_186:
                      v153 = v158;
                      v154 = 0x1020C405E66F15BLL;
                      goto LABEL_193;
                    }
                  }
                  break;
                case 8:
                  v174 = (unint64_t *)v413;
                  do
                  {
                    v175 = __ldaxr(v174);
                    v176 = v175 - 1;
                  }
                  while (__stlxr(v176, v174));
                  if (!v176)
                  {
                    v177 = v413;
                    if ((_QWORD)v413)
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)(v413 + 16));
                      v153 = v177;
                      v165 = -235920773;
                      goto LABEL_192;
                    }
                  }
                  break;
                case 9:
                  v159 = (unint64_t *)v413;
                  do
                  {
                    v160 = __ldaxr(v159);
                    v161 = v160 - 1;
                  }
                  while (__stlxr(v161, v159));
                  if (!v161)
                  {
                    v162 = v413;
                    if ((_QWORD)v413)
                    {
                      v163 = *(void **)(v413 + 48);
                      if (v163)
                      {
                        *(_QWORD *)(v413 + 56) = v163;
                        operator delete(v163);
                      }
                      v164 = *(void **)(v162 + 24);
                      if (v164)
                      {
                        *(_QWORD *)(v162 + 32) = v164;
                        operator delete(v164);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v162 + 8);
                      v153 = v162;
                      v165 = 2071181815;
LABEL_192:
                      v154 = v165 | 0x1030C4000000000;
LABEL_193:
                      MEMORY[0x219A19A08](v153, v154);
                    }
                  }
                  break;
                default:
                  break;
              }
              ++v138;
              ++v146;
              v178 = v145 / v147;
              if (v145 / v147 <= 1)
                v178 = 1;
            }
            while (v146 != v178);
          }
          v179 = v426;
          if (v426 == v425)
          {
            v179 = v425;
            v180 = 4;
            v135 = v391;
          }
          else
          {
            v135 = v391;
            if (!v426)
              goto LABEL_202;
            v180 = 5;
          }
          (*(void (**)(void))(*v179 + 8 * v180))();
LABEL_202:
          v181 = v424;
          if (v424 == v423)
          {
            v181 = v423;
            v182 = 4;
          }
          else
          {
            if (!v424)
              goto LABEL_207;
            v182 = 5;
          }
          (*(void (**)(void))(*v181 + 8 * v182))();
LABEL_207:
          v183 = v422;
          if (v422 == v421)
          {
            v183 = v421;
            v184 = 4;
            goto LABEL_211;
          }
          if (v422)
          {
            v184 = 5;
LABEL_211:
            (*(void (**)(void))(*v183 + 8 * v184))();
          }
          v142 += v145 / v400;
          ++v141;
          --v140;
          if (v141 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 24))(v135))
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v398 + 40))(*v398);
        }
      case 3u:
      case 5u:
        goto LABEL_15;
      case 7u:
        turi::sarray<turi::flexible_type>::set_type(*a5, 3);
        v185 = *a5;
        if (*(_BYTE *)(*a5 + 248))
          v186 = *(_BYTE *)(*a5 + 249) == 0;
        else
          v186 = 1;
        if (v186)
          turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
        v188 = (float *)*a1;
        v187 = a1[1];
        if (v187 == *a1)
          v189 = 0;
        else
          v189 = ((unint64_t)(v187 - *a1 - 4) >> 2) + 1;
        v389 = v189;
        if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v185 + 24))(v185))
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v398 + 40))(*v398);
        v190 = 0;
        v191 = 0;
        v401 = 0;
        v388 = v185;
        break;
      default:
        turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_3::operator()();
    }
    while (1)
    {
      v192 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v185 + 24))(v185);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v185 + 32))(v421, v185, v191);
      v193 = v389 - v401;
      v392 = v192 - v191;
      v396 = v190;
      if (v192 - v191 <= v389 - v401)
      {
        v194 = 0;
        v195 = v192 + v190;
        do
        {
          v196 = *v188;
          v197 = (double *)operator new(0x10uLL);
          *v197 = 1.0 - v196;
          v197[1] = v196;
          *(_QWORD *)((char *)&v418 + 5) = 0x300000000000000;
          *(_QWORD *)&v418 = 0;
          v198 = (_QWORD *)operator new();
          v199 = v198;
          *v198 = 0;
          v198[1] = 0;
          v200 = (void **)(v198 + 1);
          v198[2] = 0;
          v198[3] = 0;
          *(_QWORD *)&v418 = v198;
          *v198 = 1;
          switch(BYTE12(v418))
          {
            case 2:
              if (*v198 != 1)
              {
                v201 = (_QWORD *)operator new();
                v202 = v418;
                *v201 = *(_QWORD *)v418;
                v203 = (std::string *)(v201 + 1);
                if (*(char *)(v202 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(v203, *(const std::string::value_type **)(v202 + 8), *(_QWORD *)(v202 + 16));
                }
                else
                {
                  v204 = *(_OWORD *)(v202 + 8);
                  v201[3] = *(_QWORD *)(v202 + 24);
                  *(_OWORD *)&v203->__r_.__value_.__l.__data_ = v204;
                }
                *(_QWORD *)&v418 = v201;
                *v201 = 1;
                do
                {
                  v235 = __ldaxr(v199);
                  v236 = v235 - 1;
                }
                while (__stlxr(v236, v199));
                if (!v236)
                {
                  v221 = 0x1012C404EF22A49;
                  if (*((char *)v199 + 31) < 0)
                  {
                    operator delete(*v200);
                    v221 = 0x1012C404EF22A49;
                  }
                  goto LABEL_270;
                }
              }
              break;
            case 3:
              if (*v198 != 1)
              {
                v216 = (_QWORD *)operator new();
                v217 = v418;
                *v216 = *(_QWORD *)v418;
                v216[2] = 0;
                v216[3] = 0;
                v216[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v216 + 1, *(const void **)(v217 + 8), *(_QWORD *)(v217 + 16), (uint64_t)(*(_QWORD *)(v217 + 16) - *(_QWORD *)(v217 + 8)) >> 3);
                *(_QWORD *)&v418 = v216;
                *v216 = 1;
                do
                {
                  v218 = __ldaxr(v199);
                  v219 = v218 - 1;
                }
                while (__stlxr(v219, v199));
                if (!v219)
                {
                  v220 = *v200;
                  v221 = 0x1080C409938AC02;
                  if (*v200)
                  {
                    v199[2] = v220;
                    operator delete(v220);
                    v221 = 0x1080C409938AC02;
                  }
                  goto LABEL_270;
                }
              }
              break;
            case 4:
              if (*v198 != 1)
              {
                v205 = (_QWORD *)operator new();
                v206 = v418;
                *v205 = *(_QWORD *)v418;
                v205[2] = 0;
                v205[3] = 0;
                v205[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v205 + 1, *(uint64_t **)(v206 + 8), *(uint64_t **)(v206 + 16), (uint64_t)(*(_QWORD *)(v206 + 16) - *(_QWORD *)(v206 + 8)) >> 4);
                *(_QWORD *)&v418 = v205;
                *v205 = 1;
                do
                {
                  v207 = __ldaxr(v199);
                  v208 = v207 - 1;
                }
                while (__stlxr(v208, v199));
                if (!v208)
                {
                  *(_QWORD *)&v413 = v200;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v413);
                  goto LABEL_254;
                }
              }
              break;
            case 5:
              if (*v198 != 1)
              {
                v222 = (_QWORD *)operator new();
                v223 = v418;
                *v222 = *(_QWORD *)v418;
                v222[2] = 0;
                v222[3] = 0;
                v222[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v222 + 1, *(uint64_t **)(v223 + 8), *(uint64_t **)(v223 + 16), (uint64_t)(*(_QWORD *)(v223 + 16) - *(_QWORD *)(v223 + 8)) >> 5);
                *(_QWORD *)&v418 = v222;
                *v222 = 1;
                do
                {
                  v224 = __ldaxr(v199);
                  v225 = v224 - 1;
                }
                while (__stlxr(v225, v199));
                if (!v225)
                {
                  *(_QWORD *)&v413 = v200;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v413);
LABEL_254:
                  v221 = 0x1020C405E66F15BLL;
                  goto LABEL_270;
                }
              }
              break;
            case 8:
              if (*v198 != 1)
              {
                v226 = operator new();
                v227 = v418;
                *(_QWORD *)v226 = *(_QWORD *)v418;
                *(_QWORD *)(v226 + 8) = *(_QWORD *)(v227 + 8);
                v228 = *(_QWORD *)(v227 + 16);
                *(_QWORD *)(v226 + 16) = v228;
                if (v228)
                {
                  v229 = (unsigned int *)(v228 + 8);
                  do
                    v230 = __ldxr(v229);
                  while (__stxr(v230 + 1, v229));
                }
                v231 = *(_OWORD *)(v227 + 24);
                v232 = *(_OWORD *)(v227 + 40);
                *(_OWORD *)(v226 + 56) = *(_OWORD *)(v227 + 56);
                *(_OWORD *)(v226 + 40) = v232;
                *(_OWORD *)(v226 + 24) = v231;
                *(_QWORD *)&v418 = v226;
                *(_QWORD *)v226 = 1;
                do
                {
                  v233 = __ldaxr(v199);
                  v234 = v233 - 1;
                }
                while (__stlxr(v234, v199));
                if (!v234)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v199 + 2);
                  v215 = -235920773;
                  goto LABEL_263;
                }
              }
              break;
            case 9:
              if (*v198 != 1)
              {
                v209 = (_QWORD *)operator new();
                v210 = v418 + 8;
                *v209 = *(_QWORD *)v418;
                turi::flexible_type_impl::ndarray<double>::ndarray(v209 + 1, v210);
                *(_QWORD *)&v418 = v209;
                *v209 = 1;
                do
                {
                  v211 = __ldaxr(v199);
                  v212 = v211 - 1;
                }
                while (__stlxr(v212, v199));
                if (!v212)
                {
                  v213 = (void *)v199[6];
                  if (v213)
                  {
                    v199[7] = v213;
                    operator delete(v213);
                  }
                  v214 = (void *)v199[3];
                  if (v214)
                  {
                    v199[4] = v214;
                    operator delete(v214);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v200);
                  v215 = 2071181815;
LABEL_263:
                  v221 = v215 | 0x1030C4000000000;
LABEL_270:
                  MEMORY[0x219A19A08](v199, v221);
                }
              }
              break;
            default:
              break;
          }
          v237 = (_QWORD *)v418;
          v239 = (_QWORD *)(v418 + 8);
          v238 = *(void **)(v418 + 8);
          if (v238)
          {
            *(_QWORD *)(v418 + 16) = v238;
            operator delete(v238);
            *v239 = 0;
            v239[1] = 0;
            v239[2] = 0;
          }
          v237[1] = v197;
          v237[2] = v197 + 2;
          v237[3] = v197 + 2;
          if (!v424)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v424 + 48))(v424, &v418);
          switch(BYTE12(v418))
          {
            case 2:
              v240 = (unint64_t *)v418;
              do
              {
                v241 = __ldaxr(v240);
                v242 = v241 - 1;
              }
              while (__stlxr(v242, v240));
              if (!v242)
              {
                v243 = v418;
                if ((_QWORD)v418)
                {
                  if (*(char *)(v418 + 31) < 0)
                    operator delete(*(void **)(v418 + 8));
                  v244 = v243;
                  v245 = 0x1012C404EF22A49;
                  goto LABEL_315;
                }
              }
              break;
            case 3:
              v257 = (unint64_t *)v418;
              do
              {
                v258 = __ldaxr(v257);
                v259 = v258 - 1;
              }
              while (__stlxr(v259, v257));
              if (!v259)
              {
                v260 = v418;
                if ((_QWORD)v418)
                {
                  v261 = *(void **)(v418 + 8);
                  if (v261)
                  {
                    *(_QWORD *)(v418 + 16) = v261;
                    operator delete(v261);
                  }
                  v244 = v260;
                  v245 = 0x1080C409938AC02;
                  goto LABEL_315;
                }
              }
              break;
            case 4:
              v246 = (unint64_t *)v418;
              do
              {
                v247 = __ldaxr(v246);
                v248 = v247 - 1;
              }
              while (__stlxr(v248, v246));
              if (!v248)
              {
                v249 = v418;
                if ((_QWORD)v418)
                {
                  *(_QWORD *)&v413 = v418 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v413);
                  goto LABEL_308;
                }
              }
              break;
            case 5:
              v262 = (unint64_t *)v418;
              do
              {
                v263 = __ldaxr(v262);
                v264 = v263 - 1;
              }
              while (__stlxr(v264, v262));
              if (!v264)
              {
                v249 = v418;
                if ((_QWORD)v418)
                {
                  *(_QWORD *)&v413 = v418 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v413);
LABEL_308:
                  v244 = v249;
                  v245 = 0x1020C405E66F15BLL;
                  goto LABEL_315;
                }
              }
              break;
            case 8:
              v265 = (unint64_t *)v418;
              do
              {
                v266 = __ldaxr(v265);
                v267 = v266 - 1;
              }
              while (__stlxr(v267, v265));
              if (!v267)
              {
                v268 = v418;
                if ((_QWORD)v418)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v418 + 16));
                  v244 = v268;
                  v256 = -235920773;
                  goto LABEL_314;
                }
              }
              break;
            case 9:
              v250 = (unint64_t *)v418;
              do
              {
                v251 = __ldaxr(v250);
                v252 = v251 - 1;
              }
              while (__stlxr(v252, v250));
              if (!v252)
              {
                v253 = v418;
                if ((_QWORD)v418)
                {
                  v254 = *(void **)(v418 + 48);
                  if (v254)
                  {
                    *(_QWORD *)(v418 + 56) = v254;
                    operator delete(v254);
                  }
                  v255 = *(void **)(v253 + 24);
                  if (v255)
                  {
                    *(_QWORD *)(v253 + 32) = v255;
                    operator delete(v255);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v253 + 8);
                  v244 = v253;
                  v256 = 2071181815;
LABEL_314:
                  v245 = v256 | 0x1030C4000000000;
LABEL_315:
                  MEMORY[0x219A19A08](v244, v245);
                }
              }
              break;
            default:
              break;
          }
          ++v188;
          ++v194;
          v269 = v193 / v195;
          if (v193 / v195 <= 1)
            v269 = 1;
        }
        while (v194 != v269);
      }
      v270 = v426;
      if (v426 == v425)
      {
        v270 = v425;
        v272 = 4;
        v185 = v388;
        v271 = v396;
      }
      else
      {
        v185 = v388;
        v271 = v396;
        if (!v426)
          goto LABEL_324;
        v272 = 5;
      }
      (*(void (**)(void))(*v270 + 8 * v272))();
LABEL_324:
      v273 = v424;
      if (v424 == v423)
      {
        v273 = v423;
        v274 = 4;
      }
      else
      {
        if (!v424)
          goto LABEL_329;
        v274 = 5;
      }
      (*(void (**)(void))(*v273 + 8 * v274))();
LABEL_329:
      v275 = v422;
      if (v422 == v421)
      {
        v275 = v421;
        v276 = 4;
        goto LABEL_333;
      }
      if (v422)
      {
        v276 = 5;
LABEL_333:
        (*(void (**)(void))(*v275 + 8 * v276))();
      }
      v401 += v193 / v392;
      v190 = v271 - 1;
      if (++v191 >= (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v185 + 24))(v185))
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v398 + 40))(*v398);
    }
  }
  assert_msg(((a1[1] - *a1) >> 2) % a3 == 0, (uint64_t)"Unexpected prediction size", v10, v11, v12, v13, v14, v15, v387);
  if (a2 < 3)
  {
    v26 = (turi::thread_pool *)std::vector<unsigned long>::vector(__p, ((a1[1] - *a1) >> 2) / v411);
    v412 = (void **)&v411;
    v27 = *(_OWORD *)__p;
    *(_QWORD *)&v418 = &v411;
    *((_QWORD *)&v418 + 1) = __p;
    v419 = &v412;
    v420 = a1;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v26);
    v29 = (turi::thread *)turi::thread_pool::size(instance);
    tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v29);
    v31 = (uint64_t)(*((_QWORD *)&v27 + 1) - v27) >> 3;
    v32 = v398;
    if (*((_BYTE *)tls_data + 8) || (unint64_t)v29 <= 1)
    {
      if (*((_QWORD *)&v27 + 1) != (_QWORD)v27)
      {
        v51 = 0;
        v52 = *v420;
        v53 = *v419;
        v54 = (_QWORD *)v418;
        v55 = **((_QWORD **)&v418 + 1);
        do
        {
          v56 = (float *)(v52 + 4 * *v54 * v51);
          if (*v53 >= 2uLL)
          {
            v58 = v56 + 1;
            v59 = *v56;
            v60 = 4 * *v53 - 4;
            v57 = (float *)(v52 + 4 * *v54 * v51);
            v61 = v56 + 1;
            do
            {
              v62 = *v61++;
              v63 = v62;
              if (v59 < v62)
              {
                v59 = v63;
                v57 = v58;
              }
              v58 = v61;
              v60 -= 4;
            }
            while (v60);
          }
          else
          {
            v57 = (float *)(v52 + 4 * *v54 * v51);
          }
          *(_QWORD *)(v55 + 8 * v51++) = v57 - v56;
        }
        while (v51 != v31);
      }
    }
    else
    {
      v33 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v421, v33);
      v34 = 0;
      v35 = (double)(unint64_t)v31 / (double)(unint64_t)v29;
      do
      {
        v36 = (turi::thread *)(v34 + 1);
        v37 = (unint64_t)(v35 * (double)(unint64_t)(v34 + 1) + 0.0);
        if ((turi::thread *)v34 == (turi::thread *)((char *)v29 - 1))
          v37 = (uint64_t)(*((_QWORD *)&v27 + 1) - v27) >> 3;
        v414 = (void **)(v35 * (double)(unint64_t)v34 + 0.0);
        v415 = (_QWORD *)v37;
        *(_QWORD *)&v413 = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7 const&)::{lambda(void)#1}>(turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7)::stored_vtable
                         + 1;
        *((_QWORD *)&v413 + 1) = &v418;
        turi::parallel_task_queue::launch((uint64_t)v421, (uint64_t)&v413, v34);
        boost::function0<void>::~function0((uint64_t *)&v413);
        v34 = (uint64_t)v36;
      }
      while (v36 != v29);
      turi::parallel_task_queue::join((turi::parallel_task_queue *)v421);
      turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v421);
      v32 = v398;
    }
    v64 = *v32;
    if (a2 == 2)
    {
      turi::sarray<turi::flexible_type>::set_type(v64, 0);
      turi::copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,void>((uint64_t)__p[0], (uint64_t)__p[1], *v32);
LABEL_513:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v398 + 40))(*v398);
    }
    turi::sarray<turi::flexible_type>::set_type(v64, *(char *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 28));
    v65 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v66 = *(std::__shared_weak_count **)(v65 + 40);
    *(_QWORD *)&v418 = *(_QWORD *)(v65 + 32);
    *((_QWORD *)&v418 + 1) = v66;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v69 = *v32;
    if (*(_BYTE *)(*v32 + 248))
      v70 = *(_BYTE *)(*v32 + 249) == 0;
    else
      v70 = 1;
    if (v70)
      turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
    v71 = __p[0];
    if (__p[1] == __p[0])
      v72 = 0;
    else
      v72 = ((unint64_t)((char *)__p[1] - (char *)__p[0] - 8) >> 3) + 1;
    v394 = v72;
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69))
    {
LABEL_128:
      if (v66)
      {
        v124 = (unint64_t *)&v66->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      goto LABEL_513;
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v390 = v69;
    while (1)
    {
      v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v69 + 32))(v421, v69, v74);
      v77 = v394 - v75;
      v399 = v76 - v74;
      if (v76 - v74 <= v394 - v75)
      {
        v78 = 0;
        v79 = v76 + v73;
        do
        {
          v80 = *(_QWORD *)(v418 + 80) + 16 * *v71;
          *(_QWORD *)&v413 = 0;
          DWORD2(v413) = 0;
          BYTE12(v413) = 0;
          if ((__int128 *)v80 != &v413)
          {
            v81 = *(_QWORD *)v80;
            *(_QWORD *)((char *)&v413 + 5) = *(_QWORD *)(v80 + 5);
            *(_QWORD *)&v413 = v81;
            v82 = *(unsigned __int8 *)(v80 + 12);
            BYTE12(v413) = v82;
            v83 = v82 > 9;
            v84 = (1 << v82) & 0x33C;
            if (!v83 && v84 != 0)
            {
              v86 = (unint64_t *)v413;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 + 1, v86));
            }
          }
          if (!v424)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v424 + 48))(v424, &v413);
          switch(BYTE12(v413))
          {
            case 2:
              v88 = (unint64_t *)v413;
              do
              {
                v89 = __ldaxr(v88);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, v88));
              if (!v90)
              {
                v91 = v413;
                if ((_QWORD)v413)
                {
                  if (*(char *)(v413 + 31) < 0)
                    operator delete(*(void **)(v413 + 8));
                  v92 = v91;
                  v93 = 0x1012C404EF22A49;
                  goto LABEL_107;
                }
              }
              break;
            case 3:
              v105 = (unint64_t *)v413;
              do
              {
                v106 = __ldaxr(v105);
                v107 = v106 - 1;
              }
              while (__stlxr(v107, v105));
              if (!v107)
              {
                v108 = v413;
                if ((_QWORD)v413)
                {
                  v109 = *(void **)(v413 + 8);
                  if (v109)
                  {
                    *(_QWORD *)(v413 + 16) = v109;
                    operator delete(v109);
                  }
                  v92 = v108;
                  v93 = 0x1080C409938AC02;
                  goto LABEL_107;
                }
              }
              break;
            case 4:
              v94 = (unint64_t *)v413;
              do
              {
                v95 = __ldaxr(v94);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, v94));
              if (!v96)
              {
                v97 = v413;
                if ((_QWORD)v413)
                {
                  v409 = v413 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v409);
                  goto LABEL_100;
                }
              }
              break;
            case 5:
              v110 = (unint64_t *)v413;
              do
              {
                v111 = __ldaxr(v110);
                v112 = v111 - 1;
              }
              while (__stlxr(v112, v110));
              if (!v112)
              {
                v97 = v413;
                if ((_QWORD)v413)
                {
                  v409 = v413 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v409);
LABEL_100:
                  v92 = v97;
                  v93 = 0x1020C405E66F15BLL;
                  goto LABEL_107;
                }
              }
              break;
            case 8:
              v113 = (unint64_t *)v413;
              do
              {
                v114 = __ldaxr(v113);
                v115 = v114 - 1;
              }
              while (__stlxr(v115, v113));
              if (!v115)
              {
                v116 = v413;
                if ((_QWORD)v413)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v413 + 16));
                  v92 = v116;
                  v104 = -235920773;
                  goto LABEL_106;
                }
              }
              break;
            case 9:
              v98 = (unint64_t *)v413;
              do
              {
                v99 = __ldaxr(v98);
                v100 = v99 - 1;
              }
              while (__stlxr(v100, v98));
              if (!v100)
              {
                v101 = v413;
                if ((_QWORD)v413)
                {
                  v102 = *(void **)(v413 + 48);
                  if (v102)
                  {
                    *(_QWORD *)(v413 + 56) = v102;
                    operator delete(v102);
                  }
                  v103 = *(void **)(v101 + 24);
                  if (v103)
                  {
                    *(_QWORD *)(v101 + 32) = v103;
                    operator delete(v103);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v101 + 8);
                  v92 = v101;
                  v104 = 2071181815;
LABEL_106:
                  v93 = v104 | 0x1030C4000000000;
LABEL_107:
                  MEMORY[0x219A19A08](v92, v93);
                }
              }
              break;
            default:
              break;
          }
          ++v71;
          ++v78;
          v117 = v77 / v79;
          if (v77 / v79 <= 1)
            v117 = 1;
        }
        while (v78 != v117);
      }
      v118 = v426;
      if (v426 == v425)
      {
        v118 = v425;
        v119 = 4;
        v69 = v390;
      }
      else
      {
        v69 = v390;
        if (!v426)
          goto LABEL_116;
        v119 = 5;
      }
      (*(void (**)(void))(*v118 + 8 * v119))();
LABEL_116:
      v120 = v424;
      if (v424 == v423)
      {
        v120 = v423;
        v121 = 4;
      }
      else
      {
        if (!v424)
          goto LABEL_121;
        v121 = 5;
      }
      (*(void (**)(void))(*v120 + 8 * v121))();
LABEL_121:
      v122 = v422;
      if (v422 == v421)
      {
        v122 = v421;
        v123 = 4;
        goto LABEL_125;
      }
      if (v422)
      {
        v123 = 5;
LABEL_125:
        (*(void (**)(void))(*v122 + 8 * v123))();
      }
      v75 += v77 / v399;
      ++v74;
      --v73;
      if (v74 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69))
      {
        v66 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
        goto LABEL_128;
      }
    }
  }
  if (a2 != 7)
  {
    if (a2 != 4)
      turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_10::operator()();
    turi::sarray<turi::flexible_type>::set_type(*a5, 1);
    v38 = (turi::thread_pool *)std::vector<double>::vector(__p, ((a1[1] - *a1) >> 2) / v411);
    v409 = (unint64_t)&v411;
    v39 = *(_OWORD *)__p;
    *(_QWORD *)&v418 = &v411;
    *((_QWORD *)&v418 + 1) = __p;
    v419 = (void ***)&v409;
    v420 = a1;
    v40 = (turi::thread_pool *)turi::thread_pool::get_instance(v38);
    v41 = (turi::thread *)turi::thread_pool::size(v40);
    v42 = (turi::thread_pool *)turi::thread::get_tls_data(v41);
    v43 = (uint64_t)(*((_QWORD *)&v39 + 1) - v39) >> 3;
    if (*((_BYTE *)v42 + 8) || (unint64_t)v41 <= 1)
    {
      v50 = (double *)__p[0];
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v47 = v398;
      }
      else
      {
        v374 = 0;
        v375 = v411;
        v376 = *a1;
        v377 = *(_QWORD *)v409;
        v378 = 4 * *(_QWORD *)v409 - 4;
        v47 = v398;
        do
        {
          v379 = (float *)(v376 + 4 * v374 * v375);
          if (v377 >= 2)
          {
            v380 = v379 + 1;
            v381 = *v379;
            v382 = v378;
            v383 = v379 + 1;
            do
            {
              v384 = *v383++;
              v385 = v384;
              if (v381 < v384)
              {
                v381 = v385;
                v379 = v380;
              }
              v380 = v383;
              v382 -= 4;
            }
            while (v382);
          }
          v50[v374++] = *v379;
        }
        while (v374 != v43);
      }
    }
    else
    {
      v44 = (turi::thread_pool *)turi::thread_pool::get_instance(v42);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v421, v44);
      v45 = 0;
      v46 = (double)(unint64_t)v43 / (double)(unint64_t)v41;
      v47 = v398;
      do
      {
        v48 = (turi::thread *)(v45 + 1);
        v49 = (unint64_t)(v46 * (double)(unint64_t)(v45 + 1) + 0.0);
        if ((turi::thread *)v45 == (turi::thread *)((char *)v41 - 1))
          v49 = (uint64_t)(*((_QWORD *)&v39 + 1) - v39) >> 3;
        v414 = (void **)(v46 * (double)(unint64_t)v45 + 0.0);
        v415 = (_QWORD *)v49;
        *(_QWORD *)&v413 = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5 const&)::{lambda(void)#1}>(turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5)::stored_vtable
                         + 1;
        *((_QWORD *)&v413 + 1) = &v418;
        turi::parallel_task_queue::launch((uint64_t)v421, (uint64_t)&v413, v45);
        boost::function0<void>::~function0((uint64_t *)&v413);
        v45 = (uint64_t)v48;
      }
      while (v48 != v41);
      turi::parallel_task_queue::join((turi::parallel_task_queue *)v421);
      turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v421);
      v50 = (double *)__p[0];
    }
    turi::copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,void>((uint64_t)v50, (uint64_t)__p[1], *v47);
    goto LABEL_513;
  }
  turi::sarray<turi::flexible_type>::set_type(*a5, 3);
  v126 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a5 + 24))(*a5);
  v416 = a1;
  __p[0] = v126;
  v409 = ((a1[1] - *a1) >> 2) / v411;
  *(_QWORD *)&v413 = a5;
  *((_QWORD *)&v413 + 1) = &v409;
  v414 = __p;
  v415 = &v411;
  v127 = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)v126);
  v128 = (turi::thread *)turi::thread_pool::size(v127);
  v129 = (turi::thread_pool *)turi::thread::get_tls_data(v128);
  if (*((_BYTE *)v129 + 8) || (unint64_t)v128 <= 1)
  {
    if (v126)
    {
      for (i = 0; (void *)i != v126; ++i)
        turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9::operator()((_QWORD **)&v413, i);
    }
  }
  else
  {
    v130 = (turi::thread_pool *)turi::thread_pool::get_instance(v129);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v421, v130);
    v131 = 0;
    v132 = (double)(unint64_t)v126 / (double)(unint64_t)v128;
    do
    {
      v133 = (turi::thread *)(v131 + 1);
      v134 = (unint64_t)(v132 * (double)(unint64_t)(v131 + 1) + 0.0);
      if ((turi::thread *)v131 == (turi::thread *)((char *)v128 - 1))
        v134 = (unint64_t)v126;
      v419 = (void ***)(v132 * (double)(unint64_t)v131 + 0.0);
      v420 = (uint64_t *)v134;
      *(_QWORD *)&v418 = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9 const&)::{lambda(void)#1}>(turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9)::stored_vtable
                       + 1;
      *((_QWORD *)&v418 + 1) = &v413;
      turi::parallel_task_queue::launch((uint64_t)v421, (uint64_t)&v418, v131);
      boost::function0<void>::~function0((uint64_t *)&v418);
      v131 = (uint64_t)v133;
    }
    while (v133 != v128);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v421);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v421);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v398 + 40))(*v398);
}

void sub_2185B1630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,int a41,char a42,uint64_t a43,uint64_t a44,char a45)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a45);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a15);
  _Unwind_Resume(a1);
}

void turi::copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;

  if (*(_BYTE *)(a3 + 248))
    v3 = *(_BYTE *)(a3 + 249) == 0;
  else
    v3 = 1;
  if (v3)
    turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
  turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(a1, a2, (uint64_t *)a3);
}

void turi::copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;

  if (*(_BYTE *)(a3 + 248))
    v3 = *(_BYTE *)(a3 + 249) == 0;
  else
    v3 = 1;
  if (v3)
    turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
  turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(a1, a2, (uint64_t *)a3);
}

void turi::supervised::xgboost::transform_prediction_topk(_QWORD *a1@<X0>, const std::string::value_type **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v11;
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  turi::thread_pool *v28;
  _QWORD **v29;
  uint64_t v30;
  unint64_t v31;
  turi::thread_pool *instance;
  turi::thread *v33;
  turi::thread_pool *tls_data;
  turi::thread_pool *v35;
  uint64_t v36;
  double v37;
  turi::thread *v38;
  unint64_t v39;
  unint64_t i;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string **v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t *v47;
  _QWORD *v48;
  unint64_t *v49;
  char *v50;
  uint64_t *v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  void *v56;
  _BYTE *v57;
  std::string *v58;
  std::string *v59;
  std::string *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[4];
  std::string __p;
  uint64_t v69[3];
  std::string v70;
  __int128 v71[7];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v65 = a4;
  v66 = a3;
  v11 = turi::supervised::prediction_type_enum_from_name(a2);
  v64 = v11;
  if (v11 == 3)
  {
LABEL_4:
    v12 = 1;
    goto LABEL_6;
  }
  if (v11 != 6)
  {
    if (v11 != 5)
      turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0::operator()();
    goto LABEL_4;
  }
  v12 = 0;
LABEL_6:
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 24);
  v15 = *(_QWORD *)(v13 + 32);
  v14 = *(std::__shared_weak_count **)(v13 + 40);
  v62 = v15;
  v63 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (a4 == 2)
    v18 = 1;
  else
    v18 = a4;
  v61 = v18;
  std::string::basic_string[abi:ne180100]<0>(&__p, "id");
  std::string::basic_string[abi:ne180100]<0>(v69, "class");
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v70, *a2, (std::string::size_type)a2[1]);
  else
    v70 = *(std::string *)a2;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v44 = &v58;
  LOBYTE(v45) = 0;
  v58 = (std::string *)operator new(0x48uLL);
  v59 = v58;
  v60 = v58 + 3;
  v19 = 0;
  v59 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v60, (__int128 *)&__p, v71, v58);
  do
  {
    if (SHIBYTE(v70.__r_.__value_.__r.__words[v19 + 2]) < 0)
      operator delete(*(void **)((char *)&v70.__r_.__value_.__l.__data_ + v19 * 8));
    v19 -= 3;
  }
  while (v19 != -9);
  v20 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a5 + 24) + 28);
  v21 = operator new(3uLL);
  v56 = v21 + 3;
  v57 = v21 + 3;
  *v21 = 0;
  v21[1] = v20;
  v21[2] = v12;
  v55 = v21;
  turi::sframe::sframe((turi::sframe *)a6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write(a6, &v58, &v55, &__p, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v54 = 0;
  v28 = (turi::thread_pool *)assert_msg(*(unsigned __int8 *)(a6 + 288), (uint64_t)"Invalid SFrame", v22, v23, v24, v25, v26, v27, (uint64_t)v44);
  if (*(_BYTE *)(a6 + 289))
  {
    v29 = (_QWORD **)(a6 + 208);
    v30 = 15;
  }
  else
  {
    if (!*(_QWORD *)(a6 + 24))
    {
      v31 = 0;
      goto LABEL_26;
    }
    v29 = *(_QWORD ***)(a6 + 184);
    v30 = 3;
  }
  v28 = (turi::thread_pool *)(*(uint64_t (**)(void))(**v29 + 8 * v30))();
  v31 = (unint64_t)v28;
LABEL_26:
  v53 = ((uint64_t)(a1[1] - *a1) >> 2) / v61;
  v54 = v31;
  v44 = (std::string **)a6;
  v45 = &v53;
  v46 = &v54;
  v47 = &v65;
  v48 = a1;
  v49 = &v61;
  v50 = &v64;
  v51 = &v66;
  v52 = &v62;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v28);
  v33 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v33);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v33 <= 1)
  {
    if (v31)
    {
      for (i = 0; i != v31; ++i)
        turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator()((uint64_t)&v44, i);
    }
  }
  else
  {
    v35 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&__p, v35);
    v36 = 0;
    v37 = (double)v31 / (double)(unint64_t)v33;
    do
    {
      v38 = (turi::thread *)(v36 + 1);
      v39 = (unint64_t)(v37 * (double)(unint64_t)(v36 + 1) + 0.0);
      if ((turi::thread *)v36 == (turi::thread *)((char *)v33 - 1))
        v39 = v31;
      v67[2] = (unint64_t)(v37 * (double)(unint64_t)v36 + 0.0);
      v67[3] = v39;
      v67[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1 const&)::{lambda(void)#1}>(turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1)::stored_vtable
             + 1;
      v67[1] = (uint64_t)&v44;
      turi::parallel_task_queue::launch((uint64_t)&__p, (uint64_t)v67, v36);
      boost::function0<void>::~function0(v67);
      v36 = (uint64_t)v38;
    }
    while (v38 != v33);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&__p);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&__p);
  }
  turi::sframe::close((turi::sframe *)a6);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v41 = v63;
  if (v63)
  {
    v42 = (unint64_t *)&v63->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_2185B225C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  turi::sframe *v41;

  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a36);
  turi::sframe::~sframe(v41);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  a9 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::trim_boost_learner(xgboost_old::learner::BoostLearner **a1)
{
  dmlc::Stream *v2;
  xgboost_old::learner::BoostLearner *v3;
  dmlc::Stream *v4;
  void *__p[2];
  char v6;
  std::string v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::get_temp_name((uint64_t)__p, &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = (dmlc::Stream *)&v7;
  else
    v2 = (dmlc::Stream *)v7.__r_.__value_.__r.__words[0];
  xgboost_old::learner::BoostLearner::SaveModel(*a1, v2, 0);
  v3 = (xgboost_old::learner::BoostLearner *)operator new();
  xgboost_old::learner::BoostLearner::BoostLearner(v3);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = (dmlc::Stream *)&v7;
  else
    v4 = (dmlc::Stream *)v7.__r_.__value_.__r.__words[0];
  xgboost_old::learner::BoostLearner::LoadModel((std::string *)v3, v4);
  std::shared_ptr<xgboost_old::learner::BoostLearner>::reset[abi:ne180100]<xgboost_old::learner::BoostLearner,void>(a1, (uint64_t)v3);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_2185B2430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x219A19A08](v20, 0x10B3C40FBEE5559);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::learner::BoostLearner::SaveModel(xgboost_old::learner::BoostLearner *this, dmlc::Stream *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  void *__p;
  uint64_t v11;
  uint64_t v12;

  v6 = dmlc::Stream::Create(a2, "w", 0);
  if (*((_DWORD *)this + 4) || !strcmp((const char *)a2, "stdout"))
  {
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v6 + 8))(v6, "bs64\t", 5);
    v8[0] = &unk_24D94A138;
    v8[1] = v6;
    v11 = 0;
    v12 = 0;
    __p = 0;
    v9 = 0;
    xgboost_old::learner::BoostLearner::SaveModel((uint64_t)this, (uint64_t)v8, a3);
    xgboost_old::utils::Base64OutStream::Finish((xgboost_old::utils::Base64OutStream *)v8, 10);
    v8[0] = &unk_24D94A138;
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  else
  {
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v6 + 8))(v6, "binf", 4);
    xgboost_old::learner::BoostLearner::SaveModel((uint64_t)this, v6, a3);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_2185B25A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::learner::BoostLearner::LoadModel(std::string *this, dmlc::Stream *a2)
{
  dmlc::Stream *v4;
  std::string *v5;
  _BOOL8 v6;
  const char *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void **v12;
  void **p_p;
  unsigned int v14;
  int v15;
  void *v16;
  dmlc::Stream *v17;
  void *__p;
  char v19;
  int64x2_t v20;
  uint64_t v21;
  std::string v22;

  v4 = (dmlc::Stream *)dmlc::Stream::Create(a2, "r", 0);
  memset(&v22, 0, sizeof(v22));
  std::string::resize(&v22, 4uLL, 0);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v22;
  else
    v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  v6 = (**(uint64_t (***)(dmlc::Stream *, std::string *, uint64_t))v4)(v4, v5, 4) != 0;
  xgboost_old::utils::Check(v6, "invalid model", v7);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v22.__r_.__value_.__l.__size_ != 4)
      goto LABEL_11;
    v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if (*(_DWORD *)v22.__r_.__value_.__l.__data_ != 875983714)
      goto LABEL_10;
  }
  else
  {
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_11;
    if (LODWORD(v22.__r_.__value_.__l.__data_) != 875983714)
    {
      v8 = &v22;
LABEL_10:
      if (LODWORD(v8->__r_.__value_.__l.__data_) == 1718511970)
      {
        xgboost_old::learner::BoostLearner::LoadModel(this, v4, 1);
        goto LABEL_13;
      }
LABEL_11:
      (*(void (**)(dmlc::Stream *))(*(_QWORD *)v4 + 24))(v4);
      v4 = (dmlc::Stream *)dmlc::Stream::Create(a2, "r", 0);
      xgboost_old::learner::BoostLearner::LoadModel(this, v4, 1);
      goto LABEL_12;
    }
  }
  v16 = &unk_24D94A1D8;
  xgboost_old::utils::StreamBufferReader::StreamBufferReader((xgboost_old::utils::StreamBufferReader *)&v17, 0x100uLL);
  v17 = v4;
  v20 = vdupq_n_s64(1uLL);
  v21 = 0;
  v9 = MEMORY[0x24BDAC740];
  do
  {
    v10 = v20.i64[1];
    v11 = v19;
    v12 = (void **)__p;
    if (v20.i64[1] >= (unint64_t)v20.i64[0])
    {
      v20.i64[0] = (**(uint64_t (***)(dmlc::Stream *))v17)(v17);
      if (!v20.i64[0])
      {
        v14 = -1;
        LODWORD(v21) = -1;
        goto LABEL_27;
      }
      v10 = 0;
      v11 = v19;
      v12 = (void **)__p;
    }
    v20.i64[1] = v10 + 1;
    if (v11 >= 0)
      p_p = &__p;
    else
      p_p = v12;
    v14 = *((char *)p_p + v10);
    LODWORD(v21) = v14;
    if ((v14 & 0x80000000) == 0)
    {
      v15 = *(_DWORD *)(v9 + 4 * v14 + 60) & 0x4000;
      continue;
    }
LABEL_27:
    v15 = __maskrune(v14, 0x4000uLL);
  }
  while (v15);
  xgboost_old::learner::BoostLearner::LoadModel(this, (dmlc::Stream *)&v16, 1);
  v16 = &unk_24D94A1D8;
  if (v19 < 0)
    operator delete(__p);
LABEL_12:
  if (v4)
LABEL_13:
    (*(void (**)(dmlc::Stream *))(*(_QWORD *)v4 + 24))(v4);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_2185B2834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<xgboost_old::learner::BoostLearner>::reset[abi:ne180100]<xgboost_old::learner::BoostLearner,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost_old::learner::BoostLearner>::shared_ptr[abi:ne180100]<xgboost_old::learner::BoostLearner,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

turi::supervised::xgboost::xgboost_model *turi::supervised::xgboost::xgboost_model::xgboost_model(turi::supervised::xgboost::xgboost_model *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v6;

  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = (char *)this + 280;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = (char *)this + 304;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_BYTE *)this + 368) = 1;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *(_QWORD *)this = off_24D94A000;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  turi::table_printer::table_printer((turi::supervised::xgboost::xgboost_model *)((char *)this + 424));
  *((_QWORD *)this + 151) = 0;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  gettimeofday((timeval *)this + 76, 0);
  turi::gl_sframe::gl_sframe((turi::supervised::xgboost::xgboost_model *)((char *)this + 1232));
  turi::gl_sframe::gl_sframe((turi::supervised::xgboost::xgboost_model *)((char *)this + 1256));
  turi::ml_data::ml_data((turi::supervised::xgboost::xgboost_model *)((char *)this + 1280));
  turi::ml_data::ml_data((turi::supervised::xgboost::xgboost_model *)((char *)this + 1472));
  *((_OWORD *)this + 104) = 0u;
  *((_DWORD *)this + 420) = 2;
  *((_QWORD *)this + 211) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN11xgboost_old7learner12BoostLearnerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 1664, &v6);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return this;
}

void sub_2185B2A94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  turi::table_printer *v3;
  uint64_t v4;
  turi::ml_data *v5;
  uint64_t v6;
  turi::ml_data *v7;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v6);
  turi::ml_data::~ml_data(v7);
  turi::ml_data::~ml_data(v5);
  *(_QWORD *)(v1 + 1256) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 1264);
  *(_QWORD *)(v1 + 1232) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 1240);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 1192);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4);
  turi::table_printer::~table_printer(v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 408);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  turi::supervised::supervised_learning_model_base::~supervised_learning_model_base((char **)v1);
  _Unwind_Resume(a1);
}

void sub_2185B2B38()
{
  JUMPOUT(0x2185B2B18);
}

uint64_t turi::supervised::xgboost::xgboost_model::model_specific_init(turi::supervised::xgboost::xgboost_model *this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  turi::ml_data::operator=((uint64_t)this + 1280, (uint64_t)a2);
  return turi::ml_data::operator=((uint64_t)this + 1472, (uint64_t)a3);
}

void turi::supervised::xgboost::convert_vec_string(const std::string **a1@<X0>, uint64_t a2@<X8>)
{
  const std::string *v3;
  const std::string *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  void **v43[2];
  uint64_t v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      turi::flexible_type::flexible_type<std::string>((uint64_t)&v44, v3);
      std::vector<turi::flexible_type>::push_back[abi:ne180100]((uint64_t *)&v40, &v44);
      switch(v45)
      {
        case 2:
          v5 = (unint64_t *)v44;
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            v8 = v44;
            if (v44)
            {
              if (*(char *)(v44 + 31) < 0)
                operator delete(*(void **)(v44 + 8));
              v9 = v8;
              v10 = 0x1012C404EF22A49;
              goto LABEL_43;
            }
          }
          break;
        case 3:
          v22 = (unint64_t *)v44;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            v25 = v44;
            if (v44)
            {
              v26 = *(void **)(v44 + 8);
              if (v26)
              {
                *(_QWORD *)(v44 + 16) = v26;
                operator delete(v26);
              }
              v9 = v25;
              v10 = 0x1080C409938AC02;
              goto LABEL_43;
            }
          }
          break;
        case 4:
          v11 = (unint64_t *)v44;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v14 = v44;
            if (v44)
            {
              v43[0] = (void **)(v44 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v43);
              goto LABEL_36;
            }
          }
          break;
        case 5:
          v27 = (unint64_t *)v44;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            v14 = v44;
            if (v44)
            {
              v43[0] = (void **)(v44 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v43);
LABEL_36:
              v9 = v14;
              v10 = 0x1020C405E66F15BLL;
              goto LABEL_43;
            }
          }
          break;
        case 8:
          v30 = (unint64_t *)v44;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v33 = v44;
            if (v44)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v44 + 16));
              v9 = v33;
              v21 = -235920773;
              goto LABEL_42;
            }
          }
          break;
        case 9:
          v15 = (unint64_t *)v44;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            v18 = v44;
            if (v44)
            {
              v19 = *(void **)(v44 + 48);
              if (v19)
              {
                *(_QWORD *)(v44 + 56) = v19;
                operator delete(v19);
              }
              v20 = *(void **)(v18 + 24);
              if (v20)
              {
                *(_QWORD *)(v18 + 32) = v20;
                operator delete(v20);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v18 + 8);
              v9 = v18;
              v21 = 2071181815;
LABEL_42:
              v10 = v21 | 0x1030C4000000000;
LABEL_43:
              MEMORY[0x219A19A08](v9, v10);
            }
          }
          break;
        default:
          break;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a2 + 5) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 12) = 4;
  v34 = operator new();
  *(_QWORD *)v34 = 0;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)a2 = v34;
  *(_QWORD *)v34 = 1;
  if (*(_QWORD *)v34 != 1)
  {
    v35 = (_QWORD *)operator new();
    v36 = *(uint64_t **)(v34 + 8);
    *v35 = *(_QWORD *)v34;
    v35[2] = 0;
    v35[3] = 0;
    v35[1] = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v35 + 1, v36, *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - (_QWORD)v36) >> 4);
    *(_QWORD *)a2 = v35;
    *v35 = 1;
    do
    {
      v37 = __ldaxr((unint64_t *)v34);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, (unint64_t *)v34));
    if (!v38)
    {
      v43[0] = (void **)(v34 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v43);
      MEMORY[0x219A19A08](v34, 0x1020C405E66F15BLL);
    }
  }
  v39 = (uint64_t **)(*(_QWORD *)a2 + 8);
  if (v39 != &v40)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v39, v40, v41, ((char *)v41 - (char *)v40) >> 4);
  v43[0] = (void **)&v40;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v43);
}

void sub_2185B2EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v15 = v13;
  MEMORY[0x219A19A08](v14, 0x1020C405E66F15BLL);
  do
  {
    v17 = __ldaxr(v15);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v15));
  if (!v18)
  {
    v19 = *v12;
    if (*v12)
    {
      a12 = (void **)(v19 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
      MEMORY[0x219A19A08](v19, 0x1020C405E66F15BLL);
    }
    *v12 = 0;
  }
  *v12 = 0;
  *((_DWORD *)v12 + 2) = 0;
  *((_BYTE *)v12 + 12) = 0;
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

size_t turi::supervised::xgboost::xgboost_model::is_random_forest(turi::supervised::xgboost::xgboost_model *this)
{
  const char *v1;
  size_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (const char *)(*(uint64_t (**)(turi::supervised::xgboost::xgboost_model *))(*(_QWORD *)this + 16))(this);
  result = strlen(v1);
  if (result)
  {
    v3 = 0;
    v4 = result - 1;
    if (result - 1 >= 0xC)
      v4 = 12;
    v5 = v4 + 1;
    while (v1[v3] == aRandomForest[v3])
    {
      if (v5 == ++v3)
        return v3 == 13;
    }
    return 0;
  }
  return result;
}

void turi::supervised::xgboost::xgboost_model::init_options(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::string::size_type size;
  void *v33;
  turi::flexible_type_impl *v34;
  turi::flexible_type_impl *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  int *v41;
  file_logger *v42;
  file_logger *started;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  std::string *v50;
  std::string *p_idx;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char **v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;
  _QWORD *v76;
  _QWORD *v77;
  void **v78;
  _QWORD *v79;
  uint64_t v80;
  std::string *v81;
  __int128 v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  turi::option_manager *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  unsigned int v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  void *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  std::string::size_type v146;
  std::string::size_type v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  std::string::size_type v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  std::string::size_type v156;
  void *v157;
  void *v158;
  unsigned int v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  std::string::size_type v163;
  void *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  std::string::size_type v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  __int128 v178;
  __int128 v179;
  std::runtime_error *exception;
  std::string *v181;
  __int128 v182;
  std::runtime_error *v183;
  std::string *v184;
  __int128 v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  std::string v190;
  std::string v191;
  std::string v192;
  std::string v193;
  void *__p[2];
  __int128 v195;
  __int128 v196;
  __int128 v197;
  void *v198;
  char v199;
  _BYTE v200[152];
  std::string v201;
  _QWORD v202[2];
  std::string __idx;
  uint64_t v204;

  v204 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "_storage_mode");
  v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  if (SBYTE7(v195) < 0)
    operator delete(__p[0]);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v193, "_storage_mode");
    v5 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v193.__r_.__value_.__l.__data_);
    LODWORD(v6) = 0;
    switch(v5[12])
    {
      case 0:
        v6 = *(_QWORD *)v5;
        goto LABEL_37;
      case 1:
        v6 = (uint64_t)*(double *)v5;
        goto LABEL_37;
      case 2:
        v13 = *(_QWORD *)v5;
        v14 = (char **)(*(_QWORD *)v5 + 8);
        __idx.__r_.__value_.__r.__words[0] = 0;
        v15 = (char *)v14;
        if (*(char *)(v13 + 31) < 0)
          v15 = *v14;
        std::string::basic_string[abi:ne180100]<0>(__p, v15);
        LODWORD(v6) = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
        if (SBYTE7(v195) < 0)
          operator delete(__p[0]);
        if (*(char *)(v13 + 31) < 0)
          v16 = *(_QWORD *)(v13 + 16);
        else
          v16 = *(unsigned __int8 *)(v13 + 31);
        if (__idx.__r_.__value_.__r.__words[0] != v16)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v181 = std::string::append(&v201, " cannot be interpreted as an integer");
          v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
          *(_QWORD *)&v195 = *((_QWORD *)&v181->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v182;
          v181->__r_.__value_.__l.__size_ = 0;
          v181->__r_.__value_.__r.__words[2] = 0;
          v181->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_37;
      case 3:
        v10 = *(_QWORD *)v5;
        __p[1] = 0;
        *(_QWORD *)&v195 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v10 + 8), *(_QWORD *)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_36;
      case 4:
        v17 = *(_QWORD *)v5;
        __p[1] = 0;
        *(_QWORD *)&v195 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v201.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
        goto LABEL_36;
      case 5:
        v18 = *(_QWORD *)v5;
        __p[1] = 0;
        *(_QWORD *)&v195 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v201.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
        goto LABEL_36;
      case 6:
        v6 = (uint64_t)(*(_QWORD *)v5 << 8) >> 8;
        goto LABEL_37;
      case 7:
        goto LABEL_37;
      case 8:
        v19 = *(_QWORD *)v5;
        v20 = *(unsigned int **)(*(_QWORD *)v5 + 16);
        __p[0] = *(void **)(*(_QWORD *)v5 + 8);
        __p[1] = v20;
        if (v20)
        {
          v21 = v20 + 2;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = *(_OWORD *)(v19 + 24);
        v24 = *(_OWORD *)(v19 + 56);
        v196 = *(_OWORD *)(v19 + 40);
        v197 = v24;
        v195 = v23;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        goto LABEL_36;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v5 + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v196 + 1))
        {
          *(_QWORD *)&v197 = *((_QWORD *)&v196 + 1);
          operator delete(*((void **)&v196 + 1));
        }
        if ((_QWORD)v195)
        {
          *((_QWORD *)&v195 + 1) = v195;
          operator delete((void *)v195);
        }
        v6 = (uint64_t)__p[1];
        if (!__p[1])
          goto LABEL_37;
        v11 = (unint64_t *)((char *)__p[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
        }
LABEL_36:
        LODWORD(v6) = 0;
LABEL_37:
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v193.__r_.__value_.__l.__data_);
        turi::supervised::xgboost::xgboost_model::_set_storage_mode(a1, v6);
        break;
      default:
        goto LABEL_321;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "_internal_opts");
    v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
    v8 = v7;
    if (SBYTE7(v195) < 0)
    {
      operator delete(__p[0]);
      if (!v8)
        goto LABEL_124;
    }
    else if (!v7)
    {
      goto LABEL_124;
    }
    std::string::basic_string[abi:ne180100]<0>(&v193, "_internal_opts");
    v9 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v193.__r_.__value_.__l.__data_);
    switch(v9[12])
    {
      case 0:
      case 1:
      case 6:
        turi::flexible_type_fail(0);
        goto LABEL_54;
      case 2:
        v30 = *(_QWORD *)v9;
        if (*(char *)(*(_QWORD *)v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
        }
        else
        {
          v31 = *(_OWORD *)(v30 + 8);
          *(_QWORD *)&v195 = *(_QWORD *)(v30 + 24);
          *(_OWORD *)__p = v31;
        }
        turi::flexible_type_fail(0);
        memset(&v201, 0, sizeof(v201));
        if ((SBYTE7(v195) & 0x80000000) == 0)
          goto LABEL_55;
        v26 = __p[0];
        break;
      case 3:
        v25 = *(_QWORD *)v9;
        __p[1] = 0;
        *(_QWORD *)&v195 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v25 + 8), *(_QWORD *)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3);
        turi::flexible_type_fail(0);
        memset(&v201, 0, sizeof(v201));
        v26 = __p[0];
        if (!__p[0])
          goto LABEL_55;
        __p[1] = __p[0];
        break;
      case 4:
        v172 = *(_QWORD *)v9;
        __p[1] = 0;
        *(_QWORD *)&v195 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v172 + 8), *(uint64_t **)(v172 + 16), (uint64_t)(*(_QWORD *)(v172 + 16) - *(_QWORD *)(v172 + 8)) >> 4);
        turi::flexible_type_fail(0);
        memset(&v201, 0, sizeof(v201));
        __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        goto LABEL_55;
      case 5:
        v173 = *(_QWORD *)v9;
        memset(&v201, 0, sizeof(v201));
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v201, *(uint64_t **)(v173 + 8), *(uint64_t **)(v173 + 16), (uint64_t)(*(_QWORD *)(v173 + 16) - *(_QWORD *)(v173 + 8)) >> 5);
        goto LABEL_55;
      case 7:
LABEL_54:
        memset(&v201, 0, sizeof(v201));
        goto LABEL_55;
      case 8:
        v174 = *(_QWORD *)v9;
        v175 = *(unsigned int **)(*(_QWORD *)v9 + 16);
        __p[0] = *(void **)(*(_QWORD *)v9 + 8);
        __p[1] = v175;
        if (v175)
        {
          v176 = v175 + 2;
          do
            v177 = __ldxr(v176);
          while (__stxr(v177 + 1, v176));
        }
        v178 = *(_OWORD *)(v174 + 24);
        v179 = *(_OWORD *)(v174 + 56);
        v196 = *(_OWORD *)(v174 + 40);
        v197 = v179;
        v195 = v178;
        turi::flexible_type_fail(0);
        memset(&v201, 0, sizeof(v201));
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        goto LABEL_55;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v9 + 8);
        turi::flexible_type_fail(0);
        memset(&v201, 0, sizeof(v201));
        if (*((_QWORD *)&v196 + 1))
        {
          *(_QWORD *)&v197 = *((_QWORD *)&v196 + 1);
          operator delete(*((void **)&v196 + 1));
        }
        if ((_QWORD)v195)
        {
          *((_QWORD *)&v195 + 1) = v195;
          operator delete((void *)v195);
        }
        v27 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v28 = (unint64_t *)((char *)__p[1] + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        goto LABEL_55;
      default:
LABEL_321:
        turi::flexible_type_fail(0);
LABEL_322:
        __break(1u);
        return;
    }
    operator delete(v26);
LABEL_55:
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193.__r_.__value_.__l.__data_);
    size = v201.__r_.__value_.__l.__size_;
    if (v201.__r_.__value_.__r.__words[0] != v201.__r_.__value_.__l.__size_)
    {
      v33 = (void *)*MEMORY[0x24BEDB7F0];
      v188 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v189 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v34 = (turi::flexible_type_impl *)(v201.__r_.__value_.__r.__words[0] + 16);
      v187 = MEMORY[0x24BEDB848] + 16;
      do
      {
        v35 = (turi::flexible_type_impl *)((char *)v34 - 16);
        switch(*((_BYTE *)v34 - 4))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            __p[0] = v33;
            *(void **)((char *)__p + *((_QWORD *)v33 - 3)) = v189;
            *(_QWORD *)&v195 = v188;
            v36 = v187;
            goto LABEL_68;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            __p[0] = v33;
            *(void **)((char *)__p + *((_QWORD *)v33 - 3)) = v189;
            v36 = MEMORY[0x24BEDB848] + 16;
            *(_QWORD *)&v195 = v188;
LABEL_68:
            *((_QWORD *)&v195 + 1) = v36;
            if (v199 < 0)
              operator delete(v198);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v200);
            break;
          case 2:
            v37 = *(_QWORD *)v35;
            if (*(char *)(*(_QWORD *)v35 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)(v37 + 8), *(_QWORD *)(v37 + 16));
            }
            else
            {
              v38 = *(_OWORD *)(v37 + 8);
              v193.__r_.__value_.__r.__words[2] = *(_QWORD *)(v37 + 24);
              *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v38;
            }
            break;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v35 + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v35 + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v35 + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(v35, &v193);
            break;
          case 7:
            memset(&v193, 0, sizeof(v193));
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v35 + 8));
            break;
          default:
LABEL_320:
            turi::flexible_type_fail(0);
            goto LABEL_322;
        }
        switch(*((_BYTE *)v34 + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_84;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_84:
            __p[0] = v33;
            *(void **)((char *)__p + *((_QWORD *)v33 - 3)) = v189;
            *(_QWORD *)&v195 = v188;
            *((_QWORD *)&v195 + 1) = MEMORY[0x24BEDB848] + 16;
            if (v199 < 0)
              operator delete(v198);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v200);
            break;
          case 2:
            v39 = *(_QWORD *)v34;
            if (*(char *)(*(_QWORD *)v34 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__idx, *(const std::string::value_type **)(v39 + 8), *(_QWORD *)(v39 + 16));
            }
            else
            {
              v40 = *(_OWORD *)(v39 + 8);
              __idx.__r_.__value_.__r.__words[2] = *(_QWORD *)(v39 + 24);
              *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v40;
            }
            break;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v34 + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v34 + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v34 + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(v34, &__idx);
            break;
          case 7:
            memset(&__idx, 0, sizeof(__idx));
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v34 + 8));
            break;
          default:
            goto LABEL_320;
        }
        v41 = (int *)global_logger();
        if (v41[169] <= 2)
        {
          if (cppipc::must_cancel((cppipc *)v41))
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          v42 = (file_logger *)global_logger();
          started = file_logger::start_stream(v42, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "init_options", 728, 1);
          v44 = pthread_getspecific(*((_QWORD *)started + 74));
          if (v44 && *((_BYTE *)v44 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44 + 2, (uint64_t)"Set internal learner option: ", 29);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v192, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
          else
            v192 = v193;
          v45 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v192);
          v46 = pthread_getspecific(*(_QWORD *)(v45 + 592));
          if (v46 && *((_BYTE *)v46 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)"=", 1);
          if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v191, __idx.__r_.__value_.__l.__data_, __idx.__r_.__value_.__l.__size_);
          else
            v191 = __idx;
          v47 = file_logger::operator<<<std::string>(v45, (uint64_t)&v191);
          v48 = pthread_getspecific(*(_QWORD *)(v47 + 592));
          if (v48)
          {
            if (*((_BYTE *)v48 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(v48[2] - 24) + 16));
              v49 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v47);
              if (*(_DWORD *)(v47 + 600) == 7)
              {
                __print_back_trace();
                v186 = __cxa_allocate_exception(8uLL);
                *v186 = "LOG_FATAL encountered";
                __cxa_throw(v186, MEMORY[0x24BEDB718], 0);
              }
            }
          }
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v191.__r_.__value_.__l.__data_);
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v192.__r_.__value_.__l.__data_);
        }
        if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v193;
        else
          v50 = (std::string *)v193.__r_.__value_.__r.__words[0];
        if ((__idx.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_idx = &__idx;
        else
          p_idx = (std::string *)__idx.__r_.__value_.__r.__words[0];
        xgboost_old::learner::BoostLearner::SetParam(*(xgboost_old::learner::BoostLearner **)(a1 + 1664), (std::string::value_type *)v50, (char *)p_idx);
        if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__idx.__r_.__value_.__l.__data_);
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v193.__r_.__value_.__l.__data_);
        v52 = (char *)v34 + 16;
        v34 = (turi::flexible_type_impl *)((char *)v34 + 32);
      }
      while (v52 != (_BYTE *)size);
    }
    __p[0] = &v201;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
LABEL_124:
  std::string::basic_string[abi:ne180100]<0>(__p, "_num_batches");
  v53 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  v54 = v53;
  if (SBYTE7(v195) < 0)
  {
    operator delete(__p[0]);
    if (!v54)
      goto LABEL_159;
  }
  else if (!v53)
  {
    goto LABEL_159;
  }
  std::string::basic_string[abi:ne180100]<0>(&v193, "_num_batches");
  v55 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v193.__r_.__value_.__l.__data_);
  LODWORD(v56) = 0;
  switch(v55[12])
  {
    case 0:
      v56 = *(_QWORD *)v55;
      goto LABEL_156;
    case 1:
      v56 = (uint64_t)*(double *)v55;
      goto LABEL_156;
    case 2:
      v60 = *(_QWORD *)v55;
      v61 = (char **)(*(_QWORD *)v55 + 8);
      __idx.__r_.__value_.__r.__words[0] = 0;
      v62 = (char *)v61;
      if (*(char *)(v60 + 31) < 0)
        v62 = *v61;
      std::string::basic_string[abi:ne180100]<0>(__p, v62);
      LODWORD(v56) = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
      if (SBYTE7(v195) < 0)
        operator delete(__p[0]);
      if (*(char *)(v60 + 31) < 0)
        v63 = *(_QWORD *)(v60 + 16);
      else
        v63 = *(unsigned __int8 *)(v60 + 31);
      if (__idx.__r_.__value_.__r.__words[0] != v63)
      {
        v183 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v184 = std::string::append(&v201, " cannot be interpreted as an integer");
        v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
        *(_QWORD *)&v195 = *((_QWORD *)&v184->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v185;
        v184->__r_.__value_.__l.__size_ = 0;
        v184->__r_.__value_.__r.__words[2] = 0;
        v184->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v183, (const std::string *)__p);
        __cxa_throw(v183, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_156;
    case 3:
      v57 = *(_QWORD *)v55;
      __p[1] = 0;
      *(_QWORD *)&v195 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v57 + 8), *(_QWORD *)(v57 + 16), (uint64_t)(*(_QWORD *)(v57 + 16) - *(_QWORD *)(v57 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_155;
    case 4:
      v64 = *(_QWORD *)v55;
      __p[1] = 0;
      *(_QWORD *)&v195 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v64 + 8), *(uint64_t **)(v64 + 16), (uint64_t)(*(_QWORD *)(v64 + 16) - *(_QWORD *)(v64 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v201.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
      goto LABEL_155;
    case 5:
      v65 = *(_QWORD *)v55;
      __p[1] = 0;
      *(_QWORD *)&v195 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v65 + 8), *(uint64_t **)(v65 + 16), (uint64_t)(*(_QWORD *)(v65 + 16) - *(_QWORD *)(v65 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v201.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
      goto LABEL_155;
    case 6:
      v56 = (uint64_t)(*(_QWORD *)v55 << 8) >> 8;
      goto LABEL_156;
    case 7:
      goto LABEL_156;
    case 8:
      v66 = *(_QWORD *)v55;
      v67 = *(unsigned int **)(*(_QWORD *)v55 + 16);
      __p[0] = *(void **)(*(_QWORD *)v55 + 8);
      __p[1] = v67;
      if (v67)
      {
        v68 = v67 + 2;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v70 = *(_OWORD *)(v66 + 24);
      v71 = *(_OWORD *)(v66 + 56);
      v196 = *(_OWORD *)(v66 + 40);
      v197 = v71;
      v195 = v70;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_155;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v55 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v196 + 1))
      {
        *(_QWORD *)&v197 = *((_QWORD *)&v196 + 1);
        operator delete(*((void **)&v196 + 1));
      }
      if ((_QWORD)v195)
      {
        *((_QWORD *)&v195 + 1) = v195;
        operator delete((void *)v195);
      }
      v56 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_156;
      v58 = (unint64_t *)((char *)__p[1] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v56);
      }
LABEL_155:
      LODWORD(v56) = 0;
LABEL_156:
      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v193.__r_.__value_.__l.__data_);
      turi::supervised::xgboost::xgboost_model::_set_num_batches((turi::supervised::xgboost::xgboost_model *)a1, (int)v56);
      break;
    default:
      goto LABEL_320;
  }
LABEL_159:
  std::string::basic_string[abi:ne180100]<0>(__p, "metric");
  v72 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  v73 = v72;
  if ((SBYTE7(v195) & 0x80000000) == 0)
  {
    if (!v72)
      goto LABEL_168;
LABEL_163:
    std::string::basic_string[abi:ne180100]<0>(&v201, "metric");
    v74 = (unsigned __int8 *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v201.__r_.__value_.__l.__data_);
    v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
    turi::supervised::xgboost::parse_tracking_metric(v74, (__int128 **)(a1 + 344), v75, (std::string *)__p);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v201.__r_.__value_.__l.__data_);
    memset(&v190, 0, sizeof(v190));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v190, (__int128 *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
    if ((std::string *)(a1 + 344) != &v190)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 344), (std::string *)v190.__r_.__value_.__l.__data_, (__int128 *)v190.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v190.__r_.__value_.__l.__size_ - v190.__r_.__value_.__r.__words[0]) >> 3));
    v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
    v201.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
    goto LABEL_168;
  }
  operator delete(__p[0]);
  if (v73)
    goto LABEL_163;
LABEL_168:
  std::string::basic_string[abi:ne180100]<0>(__p, "features");
  std::string::basic_string[abi:ne180100]<0>(&v201, "List of features that are considered during training and prediction for this model.");
  memset(&v193, 0, sizeof(v193));
  *(_QWORD *)((char *)v202 + 5) = 0x400000000000000;
  v202[0] = 0;
  v76 = (_QWORD *)operator new();
  v77 = v76;
  *v76 = 0;
  v76[1] = 0;
  v78 = (void **)(v76 + 1);
  v76[2] = 0;
  v76[3] = 0;
  v202[0] = v76;
  *v76 = 1;
  switch(BYTE4(v202[1]))
  {
    case 2:
      if (*v76 != 1)
      {
        v79 = (_QWORD *)operator new();
        v80 = v202[0];
        *v79 = *(_QWORD *)v202[0];
        v81 = (std::string *)(v79 + 1);
        if (*(char *)(v80 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)(v80 + 8), *(_QWORD *)(v80 + 16));
        }
        else
        {
          v82 = *(_OWORD *)(v80 + 8);
          v79[3] = *(_QWORD *)(v80 + 24);
          *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v82;
        }
        v202[0] = v79;
        *v79 = 1;
        do
        {
          v110 = __ldaxr(v77);
          v111 = v110 - 1;
        }
        while (__stlxr(v111, v77));
        if (!v111)
        {
          v87 = 0x1012C404EF22A49;
          if ((*((char *)v77 + 31) & 0x80000000) == 0)
            goto LABEL_208;
          v96 = *v78;
          goto LABEL_207;
        }
      }
      break;
    case 3:
      if (*v76 != 1)
      {
        v92 = (_QWORD *)operator new();
        v93 = v202[0];
        *v92 = *(_QWORD *)v202[0];
        v92[2] = 0;
        v92[3] = 0;
        v92[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v92 + 1, *(const void **)(v93 + 8), *(_QWORD *)(v93 + 16), (uint64_t)(*(_QWORD *)(v93 + 16) - *(_QWORD *)(v93 + 8)) >> 3);
        v202[0] = v92;
        *v92 = 1;
        do
        {
          v94 = __ldaxr(v77);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, v77));
        if (!v95)
        {
          v87 = 0x1080C409938AC02;
          v96 = *v78;
          if (*v78)
          {
            v77[2] = v96;
LABEL_207:
            operator delete(v96);
          }
          goto LABEL_208;
        }
      }
      break;
    case 4:
      if (*v76 != 1)
      {
        v83 = (_QWORD *)operator new();
        v84 = v202[0];
        *v83 = *(_QWORD *)v202[0];
        v83[2] = 0;
        v83[3] = 0;
        v83[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v83 + 1, *(uint64_t **)(v84 + 8), *(uint64_t **)(v84 + 16), (uint64_t)(*(_QWORD *)(v84 + 16) - *(_QWORD *)(v84 + 8)) >> 4);
        v202[0] = v83;
        *v83 = 1;
        do
        {
          v85 = __ldaxr(v77);
          v86 = v85 - 1;
        }
        while (__stlxr(v86, v77));
        if (!v86)
        {
          v87 = 0x1020C405E66F15BLL;
          __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
          goto LABEL_208;
        }
      }
      break;
    case 5:
      if (*v76 != 1)
      {
        v97 = (_QWORD *)operator new();
        v98 = v202[0];
        *v97 = *(_QWORD *)v202[0];
        v97[2] = 0;
        v97[3] = 0;
        v97[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v97 + 1, *(uint64_t **)(v98 + 8), *(uint64_t **)(v98 + 16), (uint64_t)(*(_QWORD *)(v98 + 16) - *(_QWORD *)(v98 + 8)) >> 5);
        v202[0] = v97;
        *v97 = 1;
        do
        {
          v99 = __ldaxr(v77);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v77));
        if (!v100)
        {
          v87 = 0x1020C405E66F15BLL;
          __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
          goto LABEL_208;
        }
      }
      break;
    case 8:
      if (*v76 != 1)
      {
        v101 = operator new();
        v102 = v202[0];
        *(_QWORD *)v101 = *(_QWORD *)v202[0];
        *(_QWORD *)(v101 + 8) = *(_QWORD *)(v102 + 8);
        v103 = *(_QWORD *)(v102 + 16);
        *(_QWORD *)(v101 + 16) = v103;
        if (v103)
        {
          v104 = (unsigned int *)(v103 + 8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        v106 = *(_OWORD *)(v102 + 24);
        v107 = *(_OWORD *)(v102 + 40);
        *(_OWORD *)(v101 + 56) = *(_OWORD *)(v102 + 56);
        *(_OWORD *)(v101 + 40) = v107;
        *(_OWORD *)(v101 + 24) = v106;
        v202[0] = v101;
        *(_QWORD *)v101 = 1;
        do
        {
          v108 = __ldaxr(v77);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v77));
        if (!v109)
        {
          v87 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v77 + 2);
          goto LABEL_208;
        }
      }
      break;
    case 9:
      if (*v76 != 1)
      {
        v88 = (_QWORD *)operator new();
        v89 = v202[0] + 8;
        *v88 = *(_QWORD *)v202[0];
        turi::flexible_type_impl::ndarray<double>::ndarray(v88 + 1, v89);
        v202[0] = v88;
        *v88 = 1;
        do
        {
          v90 = __ldaxr(v77);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v77));
        if (!v91)
        {
          v87 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v77);
LABEL_208:
          MEMORY[0x219A19A08](v77, v87);
        }
      }
      break;
    default:
      break;
  }
  v112 = (turi::option_manager *)(a1 + 224);
  v113 = v202[0];
  std::vector<turi::flexible_type>::__vdeallocate((void **)(v202[0] + 8));
  *(std::string *)(v113 + 8) = v193;
  memset(&v193, 0, sizeof(v193));
  turi::option_manager::create_flexible_type_option(v112, (const std::string *)__p, &v201, (uint64_t)v202, 0);
  switch(BYTE4(v202[1]))
  {
    case 2:
      v114 = (unint64_t *)v202[0];
      do
      {
        v115 = __ldaxr(v114);
        v116 = v115 - 1;
      }
      while (__stlxr(v116, v114));
      if (!v116)
      {
        v117 = v202[0];
        if (v202[0])
        {
          if (*(char *)(v202[0] + 31) < 0)
            operator delete(*(void **)(v202[0] + 8));
          v118 = v117;
          v119 = 0x1012C404EF22A49;
          goto LABEL_250;
        }
      }
      break;
    case 3:
      v131 = (unint64_t *)v202[0];
      do
      {
        v132 = __ldaxr(v131);
        v133 = v132 - 1;
      }
      while (__stlxr(v133, v131));
      if (!v133)
      {
        v134 = v202[0];
        if (v202[0])
        {
          v135 = *(void **)(v202[0] + 8);
          if (v135)
          {
            *(_QWORD *)(v202[0] + 16) = v135;
            operator delete(v135);
          }
          v118 = v134;
          v119 = 0x1080C409938AC02;
          goto LABEL_250;
        }
      }
      break;
    case 4:
      v120 = (unint64_t *)v202[0];
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        v123 = v202[0];
        if (v202[0])
        {
          __idx.__r_.__value_.__r.__words[0] = v202[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
          goto LABEL_243;
        }
      }
      break;
    case 5:
      v136 = (unint64_t *)v202[0];
      do
      {
        v137 = __ldaxr(v136);
        v138 = v137 - 1;
      }
      while (__stlxr(v138, v136));
      if (!v138)
      {
        v123 = v202[0];
        if (v202[0])
        {
          __idx.__r_.__value_.__r.__words[0] = v202[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
LABEL_243:
          v118 = v123;
          v119 = 0x1020C405E66F15BLL;
          goto LABEL_250;
        }
      }
      break;
    case 8:
      v139 = (unint64_t *)v202[0];
      do
      {
        v140 = __ldaxr(v139);
        v141 = v140 - 1;
      }
      while (__stlxr(v141, v139));
      if (!v141)
      {
        v142 = v202[0];
        if (v202[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v202[0] + 16));
          v118 = v142;
          v130 = -235920773;
          goto LABEL_249;
        }
      }
      break;
    case 9:
      v124 = (unint64_t *)v202[0];
      do
      {
        v125 = __ldaxr(v124);
        v126 = v125 - 1;
      }
      while (__stlxr(v126, v124));
      if (!v126)
      {
        v127 = v202[0];
        if (v202[0])
        {
          v128 = *(void **)(v202[0] + 48);
          if (v128)
          {
            *(_QWORD *)(v202[0] + 56) = v128;
            operator delete(v128);
          }
          v129 = *(void **)(v127 + 24);
          if (v129)
          {
            *(_QWORD *)(v127 + 32) = v129;
            operator delete(v129);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v127 + 8);
          v118 = v127;
          v130 = 2071181815;
LABEL_249:
          v119 = v130 | 0x1030C4000000000;
LABEL_250:
          MEMORY[0x219A19A08](v118, v119);
        }
      }
      break;
    default:
      break;
  }
  memset(v202, 0, 13);
  __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  if (SBYTE7(v195) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "target");
  std::string::basic_string[abi:ne180100]<0>(&v201, "Target column for training.");
  turi::flexible_type::flexible_type((turi::flexible_type *)&__idx, "target");
  turi::option_manager::create_string_option(v112, (const std::string *)__p, &v201, (uint64_t)&__idx, 0);
  switch(__idx.__r_.__value_.__s.__data_[12])
  {
    case 2:
      v143 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
      do
      {
        v144 = __ldaxr(v143);
        v145 = v144 - 1;
      }
      while (__stlxr(v145, v143));
      if (!v145)
      {
        v146 = __idx.__r_.__value_.__r.__words[0];
        if (__idx.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(__idx.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(__idx.__r_.__value_.__r.__words[0] + 8));
          v147 = v146;
          v148 = 0x1012C404EF22A49;
          goto LABEL_296;
        }
      }
      break;
    case 3:
      v160 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
      do
      {
        v161 = __ldaxr(v160);
        v162 = v161 - 1;
      }
      while (__stlxr(v162, v160));
      if (!v162)
      {
        v163 = __idx.__r_.__value_.__r.__words[0];
        if (__idx.__r_.__value_.__r.__words[0])
        {
          v164 = *(void **)(__idx.__r_.__value_.__r.__words[0] + 8);
          if (v164)
          {
            *(_QWORD *)(__idx.__r_.__value_.__r.__words[0] + 16) = v164;
            operator delete(v164);
          }
          v147 = v163;
          v148 = 0x1080C409938AC02;
          goto LABEL_296;
        }
      }
      break;
    case 4:
      v149 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
      do
      {
        v150 = __ldaxr(v149);
        v151 = v150 - 1;
      }
      while (__stlxr(v151, v149));
      if (!v151)
      {
        v152 = __idx.__r_.__value_.__r.__words[0];
        if (__idx.__r_.__value_.__r.__words[0])
        {
          v193.__r_.__value_.__r.__words[0] = __idx.__r_.__value_.__r.__words[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
          goto LABEL_289;
        }
      }
      break;
    case 5:
      v165 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
      do
      {
        v166 = __ldaxr(v165);
        v167 = v166 - 1;
      }
      while (__stlxr(v167, v165));
      if (!v167)
      {
        v152 = __idx.__r_.__value_.__r.__words[0];
        if (__idx.__r_.__value_.__r.__words[0])
        {
          v193.__r_.__value_.__r.__words[0] = __idx.__r_.__value_.__r.__words[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
LABEL_289:
          v147 = v152;
          v148 = 0x1020C405E66F15BLL;
          goto LABEL_296;
        }
      }
      break;
    case 8:
      v168 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
      do
      {
        v169 = __ldaxr(v168);
        v170 = v169 - 1;
      }
      while (__stlxr(v170, v168));
      if (!v170)
      {
        v171 = __idx.__r_.__value_.__r.__words[0];
        if (__idx.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(__idx.__r_.__value_.__r.__words[0] + 16));
          v147 = v171;
          v159 = -235920773;
          goto LABEL_295;
        }
      }
      break;
    case 9:
      v153 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
      do
      {
        v154 = __ldaxr(v153);
        v155 = v154 - 1;
      }
      while (__stlxr(v155, v153));
      if (!v155)
      {
        v156 = __idx.__r_.__value_.__r.__words[0];
        if (__idx.__r_.__value_.__r.__words[0])
        {
          v157 = *(void **)(__idx.__r_.__value_.__r.__words[0] + 48);
          if (v157)
          {
            *(_QWORD *)(__idx.__r_.__value_.__r.__words[0] + 56) = v157;
            operator delete(v157);
          }
          v158 = *(void **)(v156 + 24);
          if (v158)
          {
            *(_QWORD *)(v156 + 32) = v158;
            operator delete(v158);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v156 + 8);
          v147 = v156;
          v159 = 2071181815;
LABEL_295:
          v148 = v159 | 0x1030C4000000000;
LABEL_296:
          MEMORY[0x219A19A08](v147, v148);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  if (SBYTE7(v195) < 0)
    operator delete(__p[0]);
}

void sub_2185B4B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  int v44;
  uint64_t v45;

  if (a43 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 161) < 0)
  {
    operator delete(*(void **)(v45 - 184));
    if ((v44 & 1) == 0)
    {
LABEL_8:
      if (a36 < 0)
        operator delete(a31);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v43);
  goto LABEL_8;
}

void turi::supervised::xgboost::xgboost_model::_set_storage_mode(uint64_t a1, int a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *exception;
  std::locale v12;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "_set_storage_mode", 761, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Set storage mode to ", 20);
    v8 = file_logger::operator<<<int>((uint64_t)started);
    v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  *(_DWORD *)(a1 + 1680) = a2;
}

void sub_2185B535C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::_set_num_batches(turi::supervised::xgboost::xgboost_model *this, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *exception;
  std::locale v12;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "_set_num_batches", 766, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Set number of batches to ", 25);
    v8 = file_logger::operator<<<unsigned long>((uint64_t)started);
    v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  *((_QWORD *)this + 211) = a2;
}

void sub_2185B54D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

unint64_t turi::supervised::xgboost::xgboost_model::num_classes(turi::supervised::xgboost::xgboost_model *this)
{
  int *v2;
  unint64_t v3;
  void *__p[2];
  char v6;
  char v7;

  if (!(*(unsigned int (**)(turi::supervised::xgboost::xgboost_model *))(*(_QWORD *)this + 232))(this))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_classes");
  v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v7, v2);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_2185B5568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::xgboost_model::_init_data(turi::supervised::xgboost::xgboost_model *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  __int128 v80;
  void *__p[2];
  char v82;
  _BYTE v83[21];
  char v84;
  _BYTE v85[13];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v85[5] = 0x700000000000000;
  *(_QWORD *)v85 = 0;
  if ((*(unsigned int (**)(turi::supervised::xgboost::xgboost_model *))(*(_QWORD *)this + 232))(this))
  {
    turi::supervised::get_class_weights_from_options((uint64_t)this + 224, (uint64_t)this + 376, (uint64_t *)v83);
    switch(v85[12])
    {
      case 2:
        v4 = *(unint64_t **)v85;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(_QWORD **)v85;
          if (*(_QWORD *)v85)
          {
            if (*(char *)(*(_QWORD *)v85 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v85 + 8));
            v8 = v7;
            v9 = 0x1012C404EF22A49;
            goto LABEL_39;
          }
        }
        break;
      case 3:
        v10 = *(unint64_t **)v85;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(_QWORD **)v85;
          if (*(_QWORD *)v85)
          {
            v14 = *(void **)(*(_QWORD *)v85 + 8);
            if (v14)
            {
              *(_QWORD *)(*(_QWORD *)v85 + 16) = v14;
              operator delete(v14);
            }
            v8 = v13;
            v9 = 0x1080C409938AC02;
            goto LABEL_39;
          }
        }
        break;
      case 4:
        v15 = *(unint64_t **)v85;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(_QWORD **)v85;
          if (*(_QWORD *)v85)
          {
            __p[0] = (void *)(*(_QWORD *)v85 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_27;
          }
        }
        break;
      case 5:
        v19 = *(unint64_t **)v85;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(_QWORD **)v85;
          if (*(_QWORD *)v85)
          {
            __p[0] = (void *)(*(_QWORD *)v85 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_27:
            v8 = v18;
            v9 = 0x1020C405E66F15BLL;
            goto LABEL_39;
          }
        }
        break;
      case 8:
        v22 = *(unint64_t **)v85;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(_QWORD **)v85;
          if (*(_QWORD *)v85)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v85 + 16));
            v8 = v25;
            v26 = -235920773;
            goto LABEL_38;
          }
        }
        break;
      case 9:
        v27 = *(unint64_t **)v85;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29 && *(_QWORD *)v85)
        {
          v8 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v85);
          v26 = 2071181815;
LABEL_38:
          v9 = v26 | 0x1030C4000000000;
LABEL_39:
          MEMORY[0x219A19A08](v8, v9);
        }
        break;
      default:
        break;
    }
    *(_QWORD *)&v85[5] = *(_QWORD *)&v83[5];
    *(_QWORD *)v85 = *(_QWORD *)v83;
    v85[12] = v83[12];
    __p[0] = 0;
    LODWORD(__p[1]) = 0;
    BYTE4(__p[1]) = 0;
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)__p, (uint64_t *)v85);
    *(void **)&v83[13] = *(void **)((char *)__p + 5);
    *(void **)&v83[8] = __p[0];
    v83[20] = BYTE4(__p[1]);
    *(_DWORD *)v83 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "class_weights");
    *(_QWORD *)&v80 = __p;
    v30 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v80);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v30 + 14, (unsigned int *)v83);
    if (v82 < 0)
      operator delete(__p[0]);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v83);
  }
  *(_QWORD *)&v80 = *((_QWORD *)this + 187) - *((_QWORD *)this + 186);
  std::string::basic_string[abi:ne180100]<0>(v83, "num_validation_examples");
  __p[0] = v83;
  v31 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v83, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v31 + 14, &v80);
  if (v84 < 0)
    operator delete(*(void **)v83);
  std::allocate_shared[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,std::allocator<turi::supervised::xgboost::DMatrixMLData>,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,void>((uint64_t)this + 1280, (uint64_t)v85, (unsigned int *)this + 420, (_QWORD *)this + 211, v83);
  __p[0] = 0;
  __p[1] = 0;
  if (*((_QWORD *)this + 187) != *((_QWORD *)this + 186))
  {
    std::allocate_shared[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,std::allocator<turi::supervised::xgboost::DMatrixMLData>,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,void>((uint64_t)this + 1472, (uint64_t)v85, (unsigned int *)this + 420, (_QWORD *)this + 211, &v80);
    v32 = v80;
    v80 = 0uLL;
    v33 = (std::__shared_weak_count *)__p[1];
    *(_OWORD *)__p = v32;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
    if (*((_QWORD *)&v80 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  v39 = *(_QWORD *)&v83[8];
  *(_QWORD *)a2 = *(_QWORD *)v83;
  *(_QWORD *)(a2 + 8) = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = (char *)__p[1];
  *(void **)(a2 + 16) = __p[0];
  *(_QWORD *)(a2 + 24) = v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    v45 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v46 = (unint64_t *)((char *)__p[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  v48 = *(std::__shared_weak_count **)&v83[8];
  if (*(_QWORD *)&v83[8])
  {
    v49 = (unint64_t *)(*(_QWORD *)&v83[8] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  switch(v85[12])
  {
    case 2:
      v51 = *(unint64_t **)v85;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        v54 = *(_QWORD *)v85;
        if (*(_QWORD *)v85)
        {
          if (*(char *)(*(_QWORD *)v85 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v85 + 8));
          v55 = v54;
          v56 = 0x1012C404EF22A49;
          goto LABEL_113;
        }
      }
      break;
    case 3:
      v57 = *(unint64_t **)v85;
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        v60 = *(_QWORD *)v85;
        if (*(_QWORD *)v85)
        {
          v61 = *(void **)(*(_QWORD *)v85 + 8);
          if (v61)
          {
            *(_QWORD *)(*(_QWORD *)v85 + 16) = v61;
            operator delete(v61);
          }
          v55 = v60;
          v56 = 0x1080C409938AC02;
          goto LABEL_113;
        }
      }
      break;
    case 4:
      v62 = *(unint64_t **)v85;
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        v65 = *(_QWORD *)v85;
        if (*(_QWORD *)v85)
        {
          *(_QWORD *)v83 = *(_QWORD *)v85 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v83);
          goto LABEL_97;
        }
      }
      break;
    case 5:
      v66 = *(unint64_t **)v85;
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        v65 = *(_QWORD *)v85;
        if (*(_QWORD *)v85)
        {
          *(_QWORD *)v83 = *(_QWORD *)v85 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v83);
LABEL_97:
          v55 = v65;
          v56 = 0x1020C405E66F15BLL;
          goto LABEL_113;
        }
      }
      break;
    case 8:
      v69 = *(unint64_t **)v85;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        v72 = *(_QWORD *)v85;
        if (*(_QWORD *)v85)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v85 + 16));
          v55 = v72;
          v73 = -235920773;
          goto LABEL_112;
        }
      }
      break;
    case 9:
      v74 = *(unint64_t **)v85;
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        v77 = *(_QWORD *)v85;
        if (*(_QWORD *)v85)
        {
          v78 = *(void **)(*(_QWORD *)v85 + 48);
          if (v78)
          {
            *(_QWORD *)(*(_QWORD *)v85 + 56) = v78;
            operator delete(v78);
          }
          v79 = *(void **)(v77 + 24);
          if (v79)
          {
            *(_QWORD *)(v77 + 32) = v79;
            operator delete(v79);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v77 + 8);
          v55 = v77;
          v73 = 2071181815;
LABEL_112:
          v56 = v73 | 0x1030C4000000000;
LABEL_113:
          MEMORY[0x219A19A08](v55, v56);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2185B5C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  switch(*(_BYTE *)(v24 - 44))
  {
    case 2:
      v26 = *(unint64_t **)(v24 - 56);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD *)(v24 - 56);
      if (!v29)
        goto LABEL_39;
      if (*(char *)(v29 + 31) < 0)
        operator delete(*(void **)(v29 + 8));
      v30 = (_QWORD *)v29;
      v31 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v41 = *(unint64_t **)(v24 - 56);
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_39;
      v44 = *(_QWORD **)(v24 - 56);
      if (!v44)
        goto LABEL_39;
      v45 = (void *)v44[1];
      if (v45)
      {
        v44[2] = v45;
        operator delete(v45);
      }
      v30 = v44;
      v31 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v32 = *(unint64_t **)(v24 - 56);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_39;
      v35 = *(_QWORD **)(v24 - 56);
      if (!v35)
        goto LABEL_39;
      a19 = v35 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
      goto LABEL_31;
    case 5:
      v46 = *(unint64_t **)(v24 - 56);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (v48)
        goto LABEL_39;
      v35 = *(_QWORD **)(v24 - 56);
      if (!v35)
        goto LABEL_39;
      a19 = v35 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
LABEL_31:
      v30 = v35;
      v31 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v49 = *(unint64_t **)(v24 - 56);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_39;
      v52 = *(_QWORD *)(v24 - 56);
      if (!v52)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
      v30 = (_QWORD *)v52;
      v40 = -235920773;
      goto LABEL_37;
    case 9:
      v36 = *(unint64_t **)(v24 - 56);
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_39;
      v39 = *(_QWORD **)(v24 - 56);
      if (!v39)
        goto LABEL_39;
      v30 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v39);
      v40 = 2071181815;
LABEL_37:
      v31 = v40 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v30, v31);
LABEL_39:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::supervised::xgboost::xgboost_model::_init_learner(xgboost_old::learner::BoostLearner **a1, uint64_t *a2, uint64_t *a3, char a4, uint64_t a5, char a6)
{
  uint64_t v12;
  char **v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  xgboost_old::learner::BoostLearner *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  void *__p;
  void *v26;
  _QWORD *v27;

  (*((void (**)(xgboost_old::learner::BoostLearner **))*a1 + 33))(a1);
  v12 = *a3;
  v13 = (char **)a1[208];
  if (v12)
  {
    v14 = *a2;
    v15 = operator new(0x10uLL);
    v26 = v15 + 2;
    v27 = v15 + 2;
    *v15 = v14;
    v15[1] = v12;
    __p = v15;
  }
  else
  {
    v17 = *a2;
    v18 = operator new(8uLL);
    __p = v18;
    *v18 = v17;
    v26 = v18 + 1;
    v27 = v18 + 1;
  }
  xgboost_old::learner::BoostLearner::SetCacheData(v13, (uint64_t)&__p, v16);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(*a2 + 184))
    xgboost_old::learner::BoostLearner::SetParam(a1[208], "updater", "grow_histmaker,prune");
  if ((a4 & 1) != 0 || (a6 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      turi::supervised::xgboost::xgboost_model::_restore_from_checkpoint((uint64_t)a1, a5);
  }
  else
  {
    xgboost_old::learner::BoostLearner::InitModel(a1[208]);
  }
  v19 = a1[208];
  v20 = *a2;
  v21 = *(int *)(v20 + 24);
  v24 = 1;
  std::vector<BOOL>::vector(&__p, v21, &v24);
  if (*((_DWORD *)v19 + 7) || *((_DWORD *)v19 + 6) == 2)
    v22 = 0x8000;
  else
    v22 = -1;
  v23 = (**(uint64_t (***)(uint64_t))v20)(v20);
  (*(void (**)(uint64_t, void **, uint64_t, float))(*(_QWORD *)v23 + 24))(v23, &__p, v22, *((float *)v19 + 10));
  if (*(_DWORD *)(v20 + 8) == -21758)
    xgboost_old::learner::BoostLearner::SetParam(v19, "updater", "grow_histmaker,prune");
  if (__p)
    operator delete(__p);
}

void sub_2185B5FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::learner::BoostLearner::SetCacheData(char **a1, uint64_t a2, const char *a3)
{
  const char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char v29[25];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  xgboost_old::utils::Assert(a1[44] == a1[43], "can only call cache data once", a3);
  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 != *(_QWORD *)a2)
  {
    v8 = 0;
    v9 = 0;
    v10 = a1 + 43;
    while (v8)
    {
      v11 = 0;
      v12 = 0;
      v13 = v6[v8];
      do
        v12 |= v13 == v6[v11++];
      while (v8 != v11);
      if ((v12 & 1) == 0)
        goto LABEL_9;
LABEL_26:
      if (++v8 >= (unint64_t)((v7 - (uint64_t)v6) >> 3))
        goto LABEL_29;
    }
    v13 = *v6;
LABEL_9:
    *(_QWORD *)(v13 + 176) = a1;
    v14 = v6[v8];
    v15 = *(_QWORD *)(v14 + 16);
    v17 = a1[44];
    v16 = (unint64_t)a1[45];
    if ((unint64_t)v17 >= v16)
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *v10) >> 3);
      v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)*v10) >> 3);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v20;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(a1 + 45), v22);
      else
        v23 = 0;
      v24 = &v23[24 * v19];
      *(_QWORD *)v24 = v14;
      *((_QWORD *)v24 + 1) = v9;
      *((_QWORD *)v24 + 2) = v15;
      v26 = a1[43];
      v25 = a1[44];
      v27 = v24;
      if (v25 != v26)
      {
        do
        {
          v28 = *(_OWORD *)(v25 - 24);
          *((_QWORD *)v27 - 1) = *((_QWORD *)v25 - 1);
          *(_OWORD *)(v27 - 24) = v28;
          v27 -= 24;
          v25 -= 24;
        }
        while (v25 != v26);
        v25 = *v10;
      }
      v18 = v24 + 24;
      a1[43] = v27;
      a1[44] = v24 + 24;
      a1[45] = &v23[24 * v22];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v17 = v14;
      *((_QWORD *)v17 + 1) = v9;
      v18 = v17 + 24;
      *((_QWORD *)v17 + 2) = v15;
    }
    a1[44] = v18;
    v6 = *(uint64_t **)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v9 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v8) + 16);
    goto LABEL_26;
  }
  v9 = 0;
LABEL_29:
  xgboost_old::utils::SPrintf((xgboost_old::utils *)v29, (char *)0x19, "%lu", v5, v9);
  xgboost_old::learner::BoostLearner::SetParam((xgboost_old::learner::BoostLearner *)a1, "num_pbuffer", v29);
  a1[4] = (char *)v9;
}

uint64_t xgboost_old::learner::BoostLearner::InitModel(xgboost_old::learner::BoostLearner *this)
{
  char *v2;
  char *v3;
  int64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = (char *)*((_QWORD *)this + 43);
  v2 = (char *)*((_QWORD *)this + 44);
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = v4 / 24;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v7 = *(_QWORD *)v3;
      v3 += 24;
      v8 = *(_DWORD *)(v7 + 24);
      if (v5 <= v8)
        v5 = v8;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)v15 = v5;
  rabit::engine::Allreduce_((uint64_t)v15, 4, 1, (uint64_t)rabit::op::Reducer<rabit::op::Max,unsigned int>, 3, 0, 0, 0);
  v10 = *(unsigned int *)v15;
  v11 = *((unsigned int *)this + 19);
  if (*(_DWORD *)v15 > v11)
  {
    *((_DWORD *)this + 19) = *(_DWORD *)v15;
    v11 = v10;
  }
  xgboost_old::utils::SPrintf((xgboost_old::utils *)v15, (char *)0x19, "%d", v9, v11);
  xgboost_old::learner::BoostLearner::SetParam(this, "bst:num_feature", v15);
  xgboost_old::learner::BoostLearner::InitObjGBM(this, v12, v13);
  *((float *)this + 18) = (*(float (**)(_QWORD, float))(**((_QWORD **)this + 30) + 56))(*((_QWORD *)this + 30), *((float *)this + 18));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 32))(*((_QWORD *)this + 26));
}

void turi::supervised::xgboost::xgboost_model::_init_progress_printer(turi::supervised::xgboost::xgboost_model *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  std::string *v25;
  void *__p[2];
  std::string::size_type v28;
  std::string v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  _QWORD v36[4];
  __int128 v37;

  *(_QWORD *)&v37 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v33, "Iteration");
  v35 = 8;
  std::string::basic_string[abi:ne180100]<0>(v36, "Elapsed Time");
  v36[3] = 8;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  v29.__r_.__value_.__s.__data_[8] = 0;
  v30 = (std::string *)operator new(0x40uLL);
  v31 = v30;
  v32 = (std::string *)((char *)v30 + 64);
  v5 = 0;
  v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*>((uint64_t)&v32, &v33, &v37, v30);
  do
  {
    if (SHIBYTE(v36[v5 + 2]) < 0)
      operator delete((void *)v36[v5]);
    v5 -= 4;
  }
  while (v5 != -8);
  v6 = *((_QWORD *)this + 43);
  v7 = *((_QWORD *)this + 44);
  if (v6 != v7)
  {
    while (1)
    {
      turi::supervised::supervised_learning_model_base::get_metric_display_name(v6, &v29);
      std::operator+<char>();
      v8 = v31;
      if (v31 >= v32)
        break;
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v8->__r_.__value_.__r.__words[2] = v28;
      v8[1].__r_.__value_.__r.__words[0] = 6;
      v31 = (std::string *)((char *)v8 + 32);
      if (a2)
        goto LABEL_16;
LABEL_25:
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v6 += 24;
      if (v6 == v7)
        goto LABEL_28;
    }
    v9 = ((char *)v31 - (char *)v30) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = (char *)v32 - (char *)v30;
    if (((char *)v32 - (char *)v30) >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v36[0] = &v32;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&v32, v12);
    v14 = &v13[32 * v9];
    *(_QWORD *)&v33 = v13;
    *((_QWORD *)&v33 + 1) = v14;
    v35 = (uint64_t)&v13[32 * v15];
    *((_QWORD *)v14 + 2) = v28;
    *(_OWORD *)v14 = *(_OWORD *)__p;
    v28 = 0;
    *(_OWORD *)__p = 0uLL;
    *((_QWORD *)v14 + 3) = 6;
    v34 = v14 + 32;
    std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer((uint64_t *)&v30, &v33);
    v16 = v31;
    std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v33);
    v31 = v16;
    if (!a2)
      goto LABEL_25;
LABEL_16:
    std::operator+<char>();
    v17 = v31;
    if (v31 >= v32)
    {
      v18 = ((char *)v31 - (char *)v30) >> 5;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 59)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v20 = (char *)v32 - (char *)v30;
      if (((char *)v32 - (char *)v30) >> 4 > v19)
        v19 = v20 >> 4;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
        v21 = 0x7FFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      v36[0] = &v32;
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&v32, v21);
      v23 = &v22[32 * v18];
      *(_QWORD *)&v33 = v22;
      *((_QWORD *)&v33 + 1) = v23;
      v35 = (uint64_t)&v22[32 * v24];
      *((_QWORD *)v23 + 2) = v28;
      *(_OWORD *)v23 = *(_OWORD *)__p;
      v28 = 0;
      *(_OWORD *)__p = 0uLL;
      *((_QWORD *)v23 + 3) = 6;
      v34 = v23 + 32;
      std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer((uint64_t *)&v30, &v33);
      v25 = v31;
      std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v33);
      v31 = v25;
    }
    else
    {
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v17->__r_.__value_.__r.__words[2] = v28;
      v17[1].__r_.__value_.__r.__words[0] = 6;
      v31 = (std::string *)((char *)v17 + 32);
    }
    goto LABEL_25;
  }
LABEL_28:
  turi::table_printer::table_printer(a3, &v30, 1);
  *(_QWORD *)&v33 = &v30;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_2185B66E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  a16 = &a22;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::init_training(uint64_t a1, const turi::gl_sframe *a2, int *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::string::size_type v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::string::size_type v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  char **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  turi::flexible_type_impl *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  std::runtime_error *exception;
  std::string *v71;
  __int128 v72;
  uint64_t v73;
  double v74;
  int v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  int64_t v87;
  unint64_t v88;
  unint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t *v100;
  uint64_t *v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  double v114;
  size_t v115;
  double *v116;
  double *v117;
  unint64_t v118;
  double *v119;
  double v120;
  double v121;
  turi::flexible_type_impl *v122;
  turi::flexible_type_impl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  double v127;
  _QWORD *v128;
  _QWORD *v129;
  void **v130;
  _QWORD *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  _QWORD *v135;
  std::string::size_type v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  std::string::size_type v145;
  unint64_t v146;
  unint64_t v147;
  void *v148;
  _QWORD *v149;
  std::string::size_type v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  std::string::size_type v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  __int128 v158;
  __int128 v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  std::string::size_type v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  std::string::size_type v168;
  std::string::size_type v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  std::string::size_type v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  std::string::size_type v178;
  void *v179;
  void *v180;
  unsigned int v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  std::string::size_type v185;
  void *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  std::string::size_type v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  char *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  char *v205;
  _OWORD *v206;
  __int128 v207;
  void *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t i;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  int *v239;
  std::__shared_weak_count *size;
  unint64_t *v241;
  unint64_t v242;
  std::string *v243;
  int *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::string::size_type v249;
  char *v250;
  uint64_t v251;
  std::string::size_type v252;
  unsigned int *v253;
  unsigned int *v254;
  unsigned int v255;
  __int128 v256;
  __int128 v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  std::string::size_type v261;
  _QWORD *v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  std::string::size_type v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  std::string::size_type v274;
  void *v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  std::string::size_type v282;
  unint64_t v283;
  unint64_t v284;
  BOOL v285;
  double v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  BOOL v290;
  unint64_t v291;
  unint64_t v292;
  BOOL v293;
  void *v294;
  void *v295;
  unsigned int v296;
  unint64_t v297;
  unint64_t v298;
  BOOL v299;
  void *v300;
  unint64_t v301;
  unint64_t v302;
  BOOL v303;
  unint64_t v304;
  unint64_t v305;
  BOOL v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::runtime_error *v313;
  std::string *v314;
  __int128 v315;
  uint64_t v316;
  unsigned __int8 *v317;
  unsigned __int8 *v318;
  unsigned int v319;
  void *v320[2];
  char v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  void *v326[2];
  char v327;
  void *v328;
  void *v329;
  char *v330;
  void *v331[2];
  char v332;
  _QWORD v333[2];
  std::__shared_weak_count *v334;
  std::string v335;
  _QWORD v336[2];
  std::__shared_weak_count *v337;
  _QWORD v338[2];
  std::__shared_weak_count *v339;
  std::string v340;
  size_t v341;
  char v342;
  void *__p[2];
  __int128 v344;
  __int128 v345;
  __int128 v346;
  void *v347;
  _QWORD v348[3];
  _DWORD v349[2];
  uint64_t v350;
  int v351;
  char v352;
  _BYTE v353[296];
  std::string v354;
  uint64_t v355;
  std::string __idx;
  __int128 v357[17];
  void *v358;
  void *v359;
  char *v360;
  _BYTE v361[296];
  std::string v362;
  void *v363[2];
  std::__shared_weak_count *v364;
  _QWORD v365[2];
  std::__shared_weak_count *v366;
  unsigned __int8 v367;
  uint64_t v368;

  v368 = *MEMORY[0x24BDAC8D0];
  if ((a6 & 1) != 0)
  {
    v10 = turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a5);
    v12 = *(unsigned __int8 *)(a4 + 23);
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a4 + 8);
    if (v12)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "target");
      turi::flexible_type::flexible_type<std::string>((uint64_t)&v362, (const std::string *)a4);
      turi::option_manager::set_option(a1 + 224, (uint64_t)__p, (uint64_t)&v362);
      switch(v362.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v13 = (unint64_t *)v362.__r_.__value_.__r.__words[0];
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v16 = v362.__r_.__value_.__r.__words[0];
            if (v362.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v362.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v362.__r_.__value_.__r.__words[0] + 8));
              v17 = (_QWORD *)v16;
              v18 = 0x1012C404EF22A49;
              goto LABEL_43;
            }
          }
          break;
        case 3:
          v27 = (unint64_t *)v362.__r_.__value_.__r.__words[0];
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            v30 = v362.__r_.__value_.__r.__words[0];
            if (v362.__r_.__value_.__r.__words[0])
            {
              v31 = *(void **)(v362.__r_.__value_.__r.__words[0] + 8);
              if (v31)
              {
                *(_QWORD *)(v362.__r_.__value_.__r.__words[0] + 16) = v31;
                operator delete(v31);
              }
              v17 = (_QWORD *)v30;
              v18 = 0x1080C409938AC02;
              goto LABEL_43;
            }
          }
          break;
        case 4:
          v19 = (unint64_t *)v362.__r_.__value_.__r.__words[0];
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = v362.__r_.__value_.__r.__words[0];
            if (v362.__r_.__value_.__r.__words[0])
            {
              v363[0] = (void *)(v362.__r_.__value_.__r.__words[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v363);
              goto LABEL_36;
            }
          }
          break;
        case 5:
          v32 = (unint64_t *)v362.__r_.__value_.__r.__words[0];
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            v22 = v362.__r_.__value_.__r.__words[0];
            if (v362.__r_.__value_.__r.__words[0])
            {
              v363[0] = (void *)(v362.__r_.__value_.__r.__words[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v363);
LABEL_36:
              v17 = (_QWORD *)v22;
              v18 = 0x1020C405E66F15BLL;
              goto LABEL_43;
            }
          }
          break;
        case 8:
          v35 = (unint64_t *)v362.__r_.__value_.__r.__words[0];
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            v38 = v362.__r_.__value_.__r.__words[0];
            if (v362.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v362.__r_.__value_.__r.__words[0] + 16));
              v17 = (_QWORD *)v38;
              v26 = -235920773;
              goto LABEL_42;
            }
          }
          break;
        case 9:
          v23 = (unint64_t *)v362.__r_.__value_.__r.__words[0];
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25 && v362.__r_.__value_.__r.__words[0])
          {
            v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v362.__r_.__value_.__l.__data_);
            v26 = 2071181815;
LABEL_42:
            v18 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v17, v18);
          }
          break;
        default:
          break;
      }
      if (SBYTE7(v344) < 0)
        operator delete(__p[0]);
    }
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v338);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v336, a2);
  std::string::basic_string[abi:ne180100]<0>(&v358, "random_seed");
  v39 = (_BYTE *)turi::option_manager::value(a1 + 224, (const void **)&v358);
  LODWORD(v40) = 0;
  switch(v39[12])
  {
    case 0:
      v40 = *(_QWORD *)v39;
      goto LABEL_74;
    case 1:
      v40 = (uint64_t)*(double *)v39;
      goto LABEL_74;
    case 2:
      v45 = *(_QWORD *)v39;
      v46 = (char **)(*(_QWORD *)v39 + 8);
      __idx.__r_.__value_.__r.__words[0] = 0;
      v47 = (char *)v46;
      if (*(char *)(v45 + 31) < 0)
        v47 = *v46;
      std::string::basic_string[abi:ne180100]<0>(__p, v47);
      LODWORD(v40) = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
      if (SBYTE7(v344) < 0)
        operator delete(__p[0]);
      if (*(char *)(v45 + 31) < 0)
        v48 = *(_QWORD *)(v45 + 16);
      else
        v48 = *(unsigned __int8 *)(v45 + 31);
      if (__idx.__r_.__value_.__r.__words[0] != v48)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v71 = std::string::append(&v362, " cannot be interpreted as an integer");
        v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        *(_QWORD *)&v344 = *((_QWORD *)&v71->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_74;
    case 3:
      v41 = *(_QWORD *)v39;
      __p[1] = 0;
      *(_QWORD *)&v344 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v41 + 8), *(_QWORD *)(v41 + 16), (uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_73;
    case 4:
      v49 = *(_QWORD *)v39;
      __p[1] = 0;
      *(_QWORD *)&v344 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v49 + 8), *(uint64_t **)(v49 + 16), (uint64_t)(*(_QWORD *)(v49 + 16) - *(_QWORD *)(v49 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v362.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v362);
      goto LABEL_73;
    case 5:
      v50 = *(_QWORD *)v39;
      __p[1] = 0;
      *(_QWORD *)&v344 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v50 + 8), *(uint64_t **)(v50 + 16), (uint64_t)(*(_QWORD *)(v50 + 16) - *(_QWORD *)(v50 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v362.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v362);
      goto LABEL_73;
    case 6:
      v40 = (uint64_t)(*(_QWORD *)v39 << 8) >> 8;
      goto LABEL_74;
    case 7:
      goto LABEL_74;
    case 8:
      v51 = *(_QWORD *)v39;
      v52 = *(unsigned int **)(*(_QWORD *)v39 + 16);
      __p[0] = *(void **)(*(_QWORD *)v39 + 8);
      __p[1] = v52;
      if (v52)
      {
        v53 = v52 + 2;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = *(_OWORD *)(v51 + 24);
      v56 = *(_OWORD *)(v51 + 56);
      v345 = *(_OWORD *)(v51 + 40);
      v346 = v56;
      v344 = v55;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_73;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v39 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v345 + 1))
      {
        *(_QWORD *)&v346 = *((_QWORD *)&v345 + 1);
        operator delete(*((void **)&v345 + 1));
      }
      if ((_QWORD)v344)
      {
        *((_QWORD *)&v344 + 1) = v344;
        operator delete((void *)v344);
      }
      v42 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v43 = (unint64_t *)((char *)__p[1] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
LABEL_73:
      LODWORD(v40) = 0;
LABEL_74:
      turi::supervised::create_validation_data((turi::gl_sframe *)v336, a3, v40, (turi::gl_sframe *)v363);
      turi::gl_sframe::operator=((uint64_t)a2, (uint64_t)v363);
      turi::gl_sframe::operator=((uint64_t)v338, (uint64_t)v365);
      v365[0] = off_24D91E9C0;
      v57 = v366;
      if (v366)
      {
        p_shared_owners = (unint64_t *)&v366->__shared_owners_;
        do
          v59 = __ldaxr(p_shared_owners);
        while (__stlxr(v59 - 1, p_shared_owners));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v363[0] = off_24D91E9C0;
      v60 = v364;
      if (v364)
      {
        v61 = (unint64_t *)&v364->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if (SHIBYTE(v360) < 0)
        operator delete(v358);
      v336[0] = off_24D91E9C0;
      v63 = v337;
      if (v337)
      {
        v64 = (unint64_t *)&v337->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v363, "target");
      v66 = (turi::flexible_type_impl *)turi::option_manager::value(a1 + 224, (const void **)v363);
      switch(*((_BYTE *)v66 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_100;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_100:
          __p[0] = *(void **)MEMORY[0x24BEDB7F0];
          v69 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
          *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
          *(_QWORD *)&v344 = v69;
          *((_QWORD *)&v344 + 1) = MEMORY[0x24BEDB848] + 16;
          if (SHIBYTE(v348[0]) < 0)
            operator delete(v347);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v349);
          goto LABEL_110;
        case 2:
          v67 = *(_QWORD *)v66;
          if (*(char *)(*(_QWORD *)v66 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v335, *(const std::string::value_type **)(v67 + 8), *(_QWORD *)(v67 + 16));
          }
          else
          {
            v68 = *(_OWORD *)(v67 + 8);
            v335.__r_.__value_.__r.__words[2] = *(_QWORD *)(v67 + 24);
            *(_OWORD *)&v335.__r_.__value_.__l.__data_ = v68;
          }
          goto LABEL_110;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v66 + 8));
          goto LABEL_110;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v66 + 8));
          goto LABEL_110;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v66 + 8));
          goto LABEL_110;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v66, &v335);
          goto LABEL_110;
        case 7:
          memset(&v335, 0, sizeof(v335));
          goto LABEL_110;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_110;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v66 + 8));
LABEL_110:
          if (SHIBYTE(v364) < 0)
            operator delete(v363[0]);
          turi::gl_sframe::gl_sframe((turi::gl_sframe *)v333, a2);
          turi::gl_sframe::remove_column((uint64_t)v333, (unsigned __int8 **)&v335);
          std::string::basic_string[abi:ne180100]<0>(__p, "features");
          v73 = turi::option_manager::value(a1 + 224, (const void **)__p);
          v74 = *(double *)v73;
          v75 = *(_DWORD *)(v73 + 8);
          v319 = *(unsigned __int8 *)(v73 + 12);
          if (v319 <= 9 && ((1 << v319) & 0x33C) != 0)
          {
            do
              v76 = __ldaxr(*(unint64_t **)&v74);
            while (__stlxr(v76 + 1, *(unint64_t **)&v74));
          }
          if (SBYTE7(v344) < 0)
            operator delete(__p[0]);
          break;
        default:
          goto LABEL_547;
      }
      break;
    default:
LABEL_547:
      turi::flexible_type_fail(0);
      goto LABEL_549;
  }
  switch(byte_254FF5784)
  {
    case 0:
      switch(v319)
      {
        case 0u:
          if (*(_QWORD *)&v74 != turi::FLEX_UNDEFINED)
            goto LABEL_541;
          goto LABEL_210;
        case 1u:
          v120 = v74;
          v121 = (double)turi::FLEX_UNDEFINED;
          goto LABEL_197;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_183;
        case 6u:
          if (turi::FLEX_UNDEFINED != (uint64_t)(*(_QWORD *)&v74 << 8) >> 8)
            goto LABEL_183;
          if (v75)
            goto LABEL_541;
          goto LABEL_210;
        default:
          goto LABEL_546;
      }
    case 1:
      switch(v319)
      {
        case 0u:
          v120 = *(double *)&turi::FLEX_UNDEFINED;
          v121 = (double)*(uint64_t *)&v74;
LABEL_197:
          if (v120 != v121)
            goto LABEL_541;
          goto LABEL_210;
        case 1u:
          if (*(double *)&turi::FLEX_UNDEFINED != v74)
            goto LABEL_541;
          goto LABEL_210;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_183;
        case 6u:
          v127 = vabdd_f64((double)v75 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v74 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_209;
        default:
          goto LABEL_546;
      }
    case 2:
      if (v319 - 3 < 7 || v319 < 2)
        goto LABEL_183;
      if (v319 != 2)
        goto LABEL_546;
      if (*(char *)(*(_QWORD *)&v74 + 31) < 0)
        v115 = *(_QWORD *)(*(_QWORD *)&v74 + 16);
      else
        v115 = *(unsigned __int8 *)(*(_QWORD *)&v74 + 31);
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
        v316 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
      else
        v316 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v115 != v316)
        goto LABEL_183;
      v317 = (unsigned __int8 *)(*(_QWORD *)&v74 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v74 + 31) & 0x80) != 0)
        v317 = *(unsigned __int8 **)v317;
      v318 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v318 = *(unsigned __int8 **)v318;
      if ((*(_BYTE *)(*(_QWORD *)&v74 + 31) & 0x80) != 0)
      {
        if (!memcmp(v317, v318, v115))
          goto LABEL_210;
        goto LABEL_541;
      }
      if (!v115)
        goto LABEL_210;
      while (*v317 == *v318)
      {
        ++v317;
        ++v318;
        if (!--v115)
          goto LABEL_210;
      }
      goto LABEL_183;
    case 3:
      if (v319 > 9)
        goto LABEL_546;
      if (v319 != 3)
        goto LABEL_183;
      v116 = *(double **)(*(_QWORD *)&v74 + 8);
      v117 = *(double **)(*(_QWORD *)&v74 + 16);
      v118 = v117 - v116;
      v119 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v118 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v119) >> 3)
        goto LABEL_183;
      if (v117 == v116)
        goto LABEL_210;
      if (v118 <= 1)
        v118 = 1;
      while (*v116 == *v119)
      {
        ++v119;
        ++v116;
        if (!--v118)
          goto LABEL_210;
      }
      goto LABEL_183;
    case 4:
      if (v319 > 9)
        goto LABEL_546;
      if (v319 != 4)
        goto LABEL_183;
      v77 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v358, (uint64_t *)(*(_QWORD *)&v74 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_194;
    case 5:
      if (v319 > 9)
        goto LABEL_546;
      if (v319 != 5)
        goto LABEL_183;
      v77 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v358, (uint64_t **)(*(_QWORD *)&v74 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_194;
    case 6:
      switch(v319)
      {
        case 0u:
          if (*(_QWORD *)&v74 != turi::FLEX_UNDEFINED << 8 >> 8)
            goto LABEL_183;
          if (dword_254FF5780)
            goto LABEL_541;
          goto LABEL_210;
        case 1u:
          v127 = vabdd_f64(v74, (double)dword_254FF5780 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_209:
          if (v127 < 0.0000005)
            goto LABEL_210;
          goto LABEL_541;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_183;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)&v74) & 0xFFFFFFFFFFFFFFLL) != 0)
            goto LABEL_183;
          if (v75 != dword_254FF5780)
            goto LABEL_541;
          goto LABEL_210;
        default:
          goto LABEL_546;
      }
    case 7:
      if (v319 < 7 || v319 - 8 < 2)
        goto LABEL_183;
      if (v319 != 7)
        goto LABEL_546;
      goto LABEL_210;
    case 8:
      if (v319 < 8 || v319 == 9)
        goto LABEL_183;
      if (v319 != 8)
        goto LABEL_546;
      v77 = turi::image_type::operator==(*(_QWORD *)&v74 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_194:
      if ((v77 & 1) != 0)
        goto LABEL_210;
      goto LABEL_183;
    case 9:
      if (v319 < 9)
        goto LABEL_183;
      if (v319 != 9)
      {
LABEL_546:
        turi::flexible_type_fail(0);
LABEL_549:
        __break(1u);
        return;
      }
      v78 = turi::FLEX_UNDEFINED;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)&v74)
        goto LABEL_210;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v74 + 8, turi::FLEX_UNDEFINED + 8))
        goto LABEL_183;
      v80 = *(char **)(*(_QWORD *)&v74 + 24);
      v79 = *(char **)(*(_QWORD *)&v74 + 32);
      v81 = v79 - v80;
      if (v79 == v80)
        goto LABEL_210;
      if (!*(_QWORD *)(*(_QWORD *)&v74 + 8))
        goto LABEL_210;
      v82 = 1;
      do
      {
        v83 = *(_QWORD *)v80;
        v80 += 8;
        v82 *= v83;
      }
      while (v80 != v79);
      if (!v82)
        goto LABEL_210;
      v362.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::vector(__p, v81 >> 3, &v362);
      v84 = (uint64_t *)__p[0];
      v85 = (uint64_t *)__p[1];
      v86 = **(_QWORD **)(v78 + 8);
      v87 = (char *)__p[1] - (char *)__p[0];
      v88 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      v89 = v88 - 1;
      if (v88 <= 1)
        v90 = 1;
      else
        v90 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      while (2)
      {
        if (v85 == v84)
        {
          v98 = 0;
          v99 = *(double *)(**(_QWORD **)(*(_QWORD *)&v74 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v74 + 72));
        }
        else
        {
          v91 = 0;
          v92 = *(uint64_t **)(*(_QWORD *)&v74 + 48);
          v93 = v84;
          v94 = v90;
          do
          {
            v96 = *v93++;
            v95 = v96;
            v97 = *v92++;
            v91 += v97 * v95;
            --v94;
          }
          while (v94);
          v98 = 0;
          v99 = *(double *)(**(_QWORD **)(*(_QWORD *)&v74 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v74 + 72) + v91));
          v100 = *(uint64_t **)(v78 + 48);
          v101 = v84;
          v102 = v90;
          do
          {
            v104 = *v101++;
            v103 = v104;
            v105 = *v100++;
            v98 += v105 * v103;
            --v102;
          }
          while (v102);
        }
        v106 = *(double *)(v86 + 8 * (*(_QWORD *)(v78 + 72) + v98));
        if (v99 != v106)
        {
LABEL_152:
          if (v84)
          {
            __p[1] = v84;
            v114 = v106;
            operator delete(v84);
            if (v99 == v114)
              goto LABEL_210;
          }
          else if (v99 == v106)
          {
            goto LABEL_210;
          }
LABEL_183:
          if (v319 == 4)
          {
            v122 = *(turi::flexible_type_impl **)(*(_QWORD *)&v74 + 8);
            v123 = *(turi::flexible_type_impl **)(*(_QWORD *)&v74 + 16);
            if (v122 == v123)
              goto LABEL_210;
            __p[0] = 0;
            __p[1] = 0;
            *(_QWORD *)&v344 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((std::string *)__p, v122, v123, (v123 - v122) >> 4);
            if (__p[1] == __p[0])
              turi::supervised::xgboost::xgboost_model::init_training(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::string const&,std::map<std::string,turi::flexible_type>,BOOL)::$_1::operator()();
            turi::gl_sframe::select_columns((uint64_t)v333, (uint64_t)__p, v363);
            turi::gl_sframe::operator=((uint64_t)v333, (uint64_t)v363);
            v363[0] = off_24D91E9C0;
            v124 = v364;
            if (v364)
            {
              v125 = (unint64_t *)&v364->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            goto LABEL_295;
          }
LABEL_541:
          turi::supervised::xgboost::xgboost_model::init_training(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::string const&,std::map<std::string,turi::flexible_type>,BOOL)::$_0::operator()();
        }
        v107 = v88;
        v108 = v88 - 1;
        if (v87 < 1)
          goto LABEL_150;
        v109 = *(_QWORD *)(*(_QWORD *)&v74 + 24);
        v110 = v84[v89] + 1;
        v84[v89] = v110;
        v111 = (v87 & 0xFFFFFFFFFFFFFFF8) - 16;
        v108 = v88 - 1;
        if (v110 < *(_QWORD *)(v109 + 8 * v89))
        {
          v107 = 1;
          v108 = v88 - 1;
LABEL_150:
          if (v108 < 0 || !v107)
            goto LABEL_152;
          continue;
        }
        break;
      }
      while (1)
      {
        *(uint64_t *)((char *)v84 + v111 + 8) = 0;
        if (v108 <= 0)
          break;
        --v108;
        v112 = *(uint64_t *)((char *)v84 + v111) + 1;
        *(uint64_t *)((char *)v84 + v111) = v112;
        v113 = *(_QWORD *)(v109 + v111);
        v111 -= 8;
        if (v112 < v113)
        {
          v107 = 1;
          goto LABEL_150;
        }
      }
      __p[1] = v84;
      operator delete(v84);
LABEL_210:
      turi::gl_sframe::column_names((turi::gl_sframe *)v333);
      std::string::basic_string[abi:ne180100]<0>(v363, "features");
      memset(&v362, 0, sizeof(v362));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>((uint64_t *)&v362, (const std::string *)__p[0], (const std::string *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
      *(std::string::size_type *)((char *)__idx.__r_.__value_.__r.__words + 5) = 0x400000000000000;
      __idx.__r_.__value_.__r.__words[0] = 0;
      v128 = (_QWORD *)operator new();
      v129 = v128;
      *v128 = 0;
      v128[1] = 0;
      v130 = (void **)(v128 + 1);
      v128[2] = 0;
      v128[3] = 0;
      __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
      *v128 = 1;
      switch(__idx.__r_.__value_.__s.__data_[12])
      {
        case 2:
          if (*v128 != 1)
          {
            v131 = (_QWORD *)operator new();
            v132 = __idx.__r_.__value_.__r.__words[0];
            *v131 = *(_QWORD *)__idx.__r_.__value_.__l.__data_;
            v133 = (std::string *)(v131 + 1);
            if (*(char *)(v132 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v133, *(const std::string::value_type **)(v132 + 8), *(_QWORD *)(v132 + 16));
            }
            else
            {
              v134 = *(_OWORD *)(v132 + 8);
              v131[3] = *(_QWORD *)(v132 + 24);
              *(_OWORD *)&v133->__r_.__value_.__l.__data_ = v134;
            }
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
            *v131 = 1;
            do
            {
              v162 = __ldaxr(v129);
              v163 = v162 - 1;
            }
            while (__stlxr(v163, v129));
            if (!v163)
            {
              v139 = 0x1012C404EF22A49;
              if ((*((char *)v129 + 31) & 0x80000000) == 0)
                goto LABEL_250;
              v148 = *v130;
              goto LABEL_249;
            }
          }
          break;
        case 3:
          if (*v128 != 1)
          {
            v144 = (_QWORD *)operator new();
            v145 = __idx.__r_.__value_.__r.__words[0];
            *v144 = *(_QWORD *)__idx.__r_.__value_.__l.__data_;
            v144[2] = 0;
            v144[3] = 0;
            v144[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v144 + 1, *(const void **)(v145 + 8), *(_QWORD *)(v145 + 16), (uint64_t)(*(_QWORD *)(v145 + 16) - *(_QWORD *)(v145 + 8)) >> 3);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
            *v144 = 1;
            do
            {
              v146 = __ldaxr(v129);
              v147 = v146 - 1;
            }
            while (__stlxr(v147, v129));
            if (!v147)
            {
              v139 = 0x1080C409938AC02;
              v148 = *v130;
              if (*v130)
              {
                v129[2] = v148;
LABEL_249:
                operator delete(v148);
              }
              goto LABEL_250;
            }
          }
          break;
        case 4:
          if (*v128 != 1)
          {
            v135 = (_QWORD *)operator new();
            v136 = __idx.__r_.__value_.__r.__words[0];
            *v135 = *(_QWORD *)__idx.__r_.__value_.__l.__data_;
            v135[2] = 0;
            v135[3] = 0;
            v135[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v135 + 1, *(uint64_t **)(v136 + 8), *(uint64_t **)(v136 + 16), (uint64_t)(*(_QWORD *)(v136 + 16) - *(_QWORD *)(v136 + 8)) >> 4);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
            *v135 = 1;
            do
            {
              v137 = __ldaxr(v129);
              v138 = v137 - 1;
            }
            while (__stlxr(v138, v129));
            if (!v138)
            {
              v139 = 0x1020C405E66F15BLL;
              v358 = v130;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
              goto LABEL_250;
            }
          }
          break;
        case 5:
          if (*v128 != 1)
          {
            v149 = (_QWORD *)operator new();
            v150 = __idx.__r_.__value_.__r.__words[0];
            *v149 = *(_QWORD *)__idx.__r_.__value_.__l.__data_;
            v149[2] = 0;
            v149[3] = 0;
            v149[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v149 + 1, *(uint64_t **)(v150 + 8), *(uint64_t **)(v150 + 16), (uint64_t)(*(_QWORD *)(v150 + 16) - *(_QWORD *)(v150 + 8)) >> 5);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
            *v149 = 1;
            do
            {
              v151 = __ldaxr(v129);
              v152 = v151 - 1;
            }
            while (__stlxr(v152, v129));
            if (!v152)
            {
              v139 = 0x1020C405E66F15BLL;
              v358 = v130;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
              goto LABEL_250;
            }
          }
          break;
        case 8:
          if (*v128 != 1)
          {
            v153 = operator new();
            v154 = __idx.__r_.__value_.__r.__words[0];
            *(_QWORD *)v153 = *(_QWORD *)__idx.__r_.__value_.__l.__data_;
            *(_QWORD *)(v153 + 8) = *(_QWORD *)(v154 + 8);
            v155 = *(_QWORD *)(v154 + 16);
            *(_QWORD *)(v153 + 16) = v155;
            if (v155)
            {
              v156 = (unsigned int *)(v155 + 8);
              do
                v157 = __ldxr(v156);
              while (__stxr(v157 + 1, v156));
            }
            v158 = *(_OWORD *)(v154 + 24);
            v159 = *(_OWORD *)(v154 + 40);
            *(_OWORD *)(v153 + 56) = *(_OWORD *)(v154 + 56);
            *(_OWORD *)(v153 + 40) = v159;
            *(_OWORD *)(v153 + 24) = v158;
            __idx.__r_.__value_.__r.__words[0] = v153;
            *(_QWORD *)v153 = 1;
            do
            {
              v160 = __ldaxr(v129);
              v161 = v160 - 1;
            }
            while (__stlxr(v161, v129));
            if (!v161)
            {
              v139 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v129 + 2);
              goto LABEL_250;
            }
          }
          break;
        case 9:
          if (*v128 != 1)
          {
            v140 = (_QWORD *)operator new();
            v141 = __idx.__r_.__value_.__r.__words[0] + 8;
            *v140 = *(_QWORD *)__idx.__r_.__value_.__l.__data_;
            turi::flexible_type_impl::ndarray<double>::ndarray(v140 + 1, v141);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
            *v140 = 1;
            do
            {
              v142 = __ldaxr(v129);
              v143 = v142 - 1;
            }
            while (__stlxr(v143, v129));
            if (!v143)
            {
              v139 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v129);
LABEL_250:
              MEMORY[0x219A19A08](v129, v139);
            }
          }
          break;
        default:
          break;
      }
      v164 = __idx.__r_.__value_.__r.__words[0];
      std::vector<turi::flexible_type>::__vdeallocate((void **)(__idx.__r_.__value_.__r.__words[0] + 8));
      *(std::string *)(v164 + 8) = v362;
      memset(&v362, 0, sizeof(v362));
      turi::option_manager::set_option(a1 + 224, (uint64_t)v363, (uint64_t)&__idx);
      switch(__idx.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v165 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
          do
          {
            v166 = __ldaxr(v165);
            v167 = v166 - 1;
          }
          while (__stlxr(v167, v165));
          if (!v167)
          {
            v168 = __idx.__r_.__value_.__r.__words[0];
            if (__idx.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(__idx.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(__idx.__r_.__value_.__r.__words[0] + 8));
              v169 = v168;
              v170 = 0x1012C404EF22A49;
              goto LABEL_292;
            }
          }
          break;
        case 3:
          v182 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
          do
          {
            v183 = __ldaxr(v182);
            v184 = v183 - 1;
          }
          while (__stlxr(v184, v182));
          if (!v184)
          {
            v185 = __idx.__r_.__value_.__r.__words[0];
            if (__idx.__r_.__value_.__r.__words[0])
            {
              v186 = *(void **)(__idx.__r_.__value_.__r.__words[0] + 8);
              if (v186)
              {
                *(_QWORD *)(__idx.__r_.__value_.__r.__words[0] + 16) = v186;
                operator delete(v186);
              }
              v169 = v185;
              v170 = 0x1080C409938AC02;
              goto LABEL_292;
            }
          }
          break;
        case 4:
          v171 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
          do
          {
            v172 = __ldaxr(v171);
            v173 = v172 - 1;
          }
          while (__stlxr(v173, v171));
          if (!v173)
          {
            v174 = __idx.__r_.__value_.__r.__words[0];
            if (__idx.__r_.__value_.__r.__words[0])
            {
              v358 = (void *)(__idx.__r_.__value_.__r.__words[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
              goto LABEL_285;
            }
          }
          break;
        case 5:
          v187 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
          do
          {
            v188 = __ldaxr(v187);
            v189 = v188 - 1;
          }
          while (__stlxr(v189, v187));
          if (!v189)
          {
            v174 = __idx.__r_.__value_.__r.__words[0];
            if (__idx.__r_.__value_.__r.__words[0])
            {
              v358 = (void *)(__idx.__r_.__value_.__r.__words[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
LABEL_285:
              v169 = v174;
              v170 = 0x1020C405E66F15BLL;
              goto LABEL_292;
            }
          }
          break;
        case 8:
          v190 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
          do
          {
            v191 = __ldaxr(v190);
            v192 = v191 - 1;
          }
          while (__stlxr(v192, v190));
          if (!v192)
          {
            v193 = __idx.__r_.__value_.__r.__words[0];
            if (__idx.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(__idx.__r_.__value_.__r.__words[0] + 16));
              v169 = v193;
              v181 = -235920773;
              goto LABEL_291;
            }
          }
          break;
        case 9:
          v175 = (unint64_t *)__idx.__r_.__value_.__r.__words[0];
          do
          {
            v176 = __ldaxr(v175);
            v177 = v176 - 1;
          }
          while (__stlxr(v177, v175));
          if (!v177)
          {
            v178 = __idx.__r_.__value_.__r.__words[0];
            if (__idx.__r_.__value_.__r.__words[0])
            {
              v179 = *(void **)(__idx.__r_.__value_.__r.__words[0] + 48);
              if (v179)
              {
                *(_QWORD *)(__idx.__r_.__value_.__r.__words[0] + 56) = v179;
                operator delete(v179);
              }
              v180 = *(void **)(v178 + 24);
              if (v180)
              {
                *(_QWORD *)(v178 + 32) = v180;
                operator delete(v180);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v178 + 8);
              v169 = v178;
              v181 = 2071181815;
LABEL_291:
              v170 = v181 | 0x1030C4000000000;
LABEL_292:
              MEMORY[0x219A19A08](v169, v170);
            }
          }
          break;
        default:
          break;
      }
      __idx.__r_.__value_.__r.__words[0] = 0;
      LODWORD(__idx.__r_.__value_.__r.__words[1]) = 0;
      __idx.__r_.__value_.__s.__data_[12] = 0;
      v358 = &v362;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v358);
      if (SHIBYTE(v364) < 0)
        operator delete(v363[0]);
LABEL_295:
      v363[0] = __p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v363);
      turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)v333, (turi::sframe *)v363);
      if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__idx, v335.__r_.__value_.__l.__data_, v335.__r_.__value_.__l.__size_);
      else
        __idx = v335;
      v359 = 0;
      v358 = 0;
      v360 = 0;
      v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&v358;
      v340.__r_.__value_.__s.__data_[8] = 0;
      v358 = operator new(0x18uLL);
      v359 = v358;
      v360 = (char *)v358 + 24;
      v359 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360, (__int128 *)&__idx, v357, (std::string *)v358);
      turi::gl_sframe::select_columns((uint64_t)a2, (uint64_t)&v358, __p);
      turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)__p, (turi::sframe *)&v362);
      __p[0] = off_24D91E9C0;
      v194 = (std::__shared_weak_count *)v344;
      if ((_QWORD)v344)
      {
        v195 = (unint64_t *)(v344 + 8);
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
      }
      v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&v358;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
      if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__idx.__r_.__value_.__l.__data_);
      turi::gl_sframe::operator=(a1 + 1232, (uint64_t)a2);
      v197 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      std::string::basic_string[abi:ne180100]<0>(v331, v197);
      turi::sframe::sframe((turi::sframe *)v361, (const turi::sframe *)&v362);
      turi::supervised::check_target_column_type((uint64_t *)v331, (turi::sframe *)v361);
      turi::sframe::~sframe((turi::sframe *)v361);
      if (v332 < 0)
        operator delete(v331[0]);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1))
        v198 = 2;
      else
        v198 = 1;
      turi::sframe::sframe((turi::sframe *)&v358);
      turi::sframe::sframe((turi::sframe *)&__idx);
      if (turi::gl_sframe::num_columns((turi::gl_sframe *)v338))
      {
        turi::gl_sframe::column_names((turi::gl_sframe *)v333);
        turi::gl_sframe::select_columns((uint64_t)v338, (uint64_t)&v328, &v340);
        turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v340, (turi::sframe *)__p);
        turi::sframe::operator=((uint64_t)&v358, (uint64_t)__p);
        turi::sframe::~sframe((turi::sframe *)__p);
        v340.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
        v199 = (std::__shared_weak_count *)v340.__r_.__value_.__r.__words[2];
        if (v340.__r_.__value_.__r.__words[2])
        {
          v200 = (unint64_t *)(v340.__r_.__value_.__r.__words[2] + 8);
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        v354.__r_.__value_.__r.__words[0] = (std::string::size_type)&v328;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v354);
        if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v354, v335.__r_.__value_.__l.__data_, v335.__r_.__value_.__l.__size_);
        else
          v354 = v335;
        v328 = 0;
        v329 = 0;
        v330 = 0;
        v341 = (size_t)&v328;
        v342 = 0;
        v328 = operator new(0x18uLL);
        v329 = v328;
        v330 = (char *)v328 + 24;
        v329 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v330, (__int128 *)&v354, (__int128 *)&v355, (std::string *)v328);
        turi::gl_sframe::select_columns((uint64_t)v338, (uint64_t)&v328, &v340);
        turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v340, (turi::sframe *)__p);
        turi::sframe::operator=((uint64_t)&__idx, (uint64_t)__p);
        turi::sframe::~sframe((turi::sframe *)__p);
        v340.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
        v202 = (std::__shared_weak_count *)v340.__r_.__value_.__r.__words[2];
        if (v340.__r_.__value_.__r.__words[2])
        {
          v203 = (unint64_t *)(v340.__r_.__value_.__r.__words[2] + 8);
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
            std::__shared_weak_count::__release_weak(v202);
          }
        }
        v341 = (size_t)&v328;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
        if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v354.__r_.__value_.__l.__data_);
        v205 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        std::string::basic_string[abi:ne180100]<0>(v326, v205);
        turi::sframe::sframe((turi::sframe *)v353, (const turi::sframe *)&__idx);
        turi::supervised::check_target_column_type((uint64_t *)v326, (turi::sframe *)v353);
        turi::sframe::~sframe((turi::sframe *)v353);
        if (v327 < 0)
          operator delete(v326[0]);
        turi::gl_sframe::column_names((turi::gl_sframe *)v333);
        v206 = __p[1];
        if (__p[1] >= (void *)v344)
        {
          v208 = (void *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (__int128 *)&v335);
        }
        else
        {
          if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p[1], v335.__r_.__value_.__l.__data_, v335.__r_.__value_.__l.__size_);
          }
          else
          {
            v207 = *(_OWORD *)&v335.__r_.__value_.__l.__data_;
            *((_QWORD *)__p[1] + 2) = *((_QWORD *)&v335.__r_.__value_.__l + 2);
            *v206 = v207;
          }
          v208 = (char *)v206 + 24;
        }
        __p[1] = v208;
        turi::gl_sframe::select_columns((uint64_t)v338, (uint64_t)__p, &v340);
        turi::gl_sframe::operator=((uint64_t)v338, (uint64_t)&v340);
        v340.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
        v209 = (std::__shared_weak_count *)v340.__r_.__value_.__r.__words[2];
        if (v340.__r_.__value_.__r.__words[2])
        {
          v210 = (unint64_t *)(v340.__r_.__value_.__r.__words[2] + 8);
          do
            v211 = __ldaxr(v210);
          while (__stlxr(v211 - 1, v210));
          if (!v211)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
          }
        }
        v340.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
      }
      std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],turi::gl_sframe,0>((uint64_t)__p, "validation_data", (uint64_t)v338);
      std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v340, (const void **)__p, 1);
      turi::ml_model_base::add_or_update_state(a1, &v340);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v340, (char *)v340.__r_.__value_.__l.__size_);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v344 + 2);
      if (SBYTE7(v344) < 0)
        operator delete(__p[0]);
      turi::gl_sframe::operator=(a1 + 1256, (uint64_t)v338);
      v212 = v367;
      v213 = v365[1];
      std::string::basic_string[abi:ne180100]<0>(__p, "training_number_of_examples");
      if (v212)
        v214 = v213;
      else
        v214 = 0;
      *(_QWORD *)&v345 = v214;
      DWORD2(v345) = 0;
      BYTE12(v345) = 0;
      DWORD2(v344) = 0;
      v215 = turi::gl_sframe::size((turi::gl_sframe *)v338);
      std::string::basic_string[abi:ne180100]<0>(v348, "validation_number_of_examples");
      v350 = v215;
      v351 = 0;
      v352 = 0;
      v349[0] = 0;
      std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v340, (const void **)__p, 2);
      turi::ml_model_base::add_or_update_state(a1, &v340);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v340, (char *)v340.__r_.__value_.__l.__size_);
      for (i = 0; i != -208; i -= 104)
      {
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v349[i / 4]);
        if (SHIBYTE(v348[i / 8 + 2]) < 0)
          operator delete((void *)v348[i / 8]);
      }
      if (a6)
      {
        v217 = turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
        std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)__p, v217);
        (*(void (**)(uint64_t, void **, std::string *, void **, std::string *, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, v363, &v362, &v358, &__idx, v198, 1);
        turi::option_manager::set_options(a1 + 224, __p);
        std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
      }
      else
      {
        (*(void (**)(uint64_t, void **, std::string *, void **, std::string *, uint64_t, _QWORD))(*(_QWORD *)a1 + 200))(a1, v363, &v362, &v358, &__idx, v198, 0);
      }
      turi::supervised::xgboost::xgboost_model::_init_data((turi::supervised::xgboost::xgboost_model *)a1, (uint64_t)__p);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 392, (__int128 *)__p);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 408, &v344);
      v218 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
      if (*((_QWORD *)&v344 + 1))
      {
        v219 = (unint64_t *)(*((_QWORD *)&v344 + 1) + 8);
        do
          v220 = __ldaxr(v219);
        while (__stlxr(v220 - 1, v219));
        if (!v220)
        {
          ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
          std::__shared_weak_count::__release_weak(v218);
        }
      }
      v221 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v222 = (unint64_t *)((char *)__p[1] + 8);
        do
          v223 = __ldaxr(v222);
        while (__stlxr(v223 - 1, v222));
        if (!v223)
        {
          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
          std::__shared_weak_count::__release_weak(v221);
        }
      }
      v224 = *(std::__shared_weak_count **)(a1 + 400);
      v324 = *(_QWORD *)(a1 + 392);
      v325 = v224;
      if (v224)
      {
        v225 = (unint64_t *)&v224->__shared_owners_;
        do
          v226 = __ldxr(v225);
        while (__stxr(v226 + 1, v225));
      }
      v227 = *(std::__shared_weak_count **)(a1 + 416);
      v322 = *(_QWORD *)(a1 + 408);
      v323 = v227;
      if (v227)
      {
        v228 = (unint64_t *)&v227->__shared_owners_;
        do
          v229 = __ldxr(v228);
        while (__stxr(v229 + 1, v228));
      }
      std::string::basic_string[abi:ne180100]<0>(v320, "");
      turi::supervised::xgboost::xgboost_model::_init_learner((xgboost_old::learner::BoostLearner **)a1, &v324, &v322, 0, (uint64_t)v320, a6);
      if (v321 < 0)
        operator delete(v320[0]);
      v230 = v323;
      if (v323)
      {
        v231 = (unint64_t *)&v323->__shared_owners_;
        do
          v232 = __ldaxr(v231);
        while (__stlxr(v232 - 1, v231));
        if (!v232)
        {
          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
          std::__shared_weak_count::__release_weak(v230);
        }
      }
      v233 = v325;
      if (v325)
      {
        v234 = (unint64_t *)&v325->__shared_owners_;
        do
          v235 = __ldaxr(v234);
        while (__stlxr(v235 - 1, v234));
        if (!v235)
        {
          ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
          std::__shared_weak_count::__release_weak(v233);
        }
      }
      turi::supervised::xgboost::xgboost_model::_init_progress_printer((turi::supervised::xgboost::xgboost_model *)a1, *(_QWORD *)(a1 + 408) != 0, (uint64_t)__p);
      turi::table_printer::operator=(a1 + 424, (uint64_t)__p);
      turi::table_printer::~table_printer((turi::table_printer *)__p);
      _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 1176, (__int128 *)__p);
      v236 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_384;
      v237 = (unint64_t *)((char *)__p[1] + 8);
      do
        v238 = __ldaxr(v237);
      while (__stlxr(v238 - 1, v237));
      if (!v238)
      {
        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
        std::__shared_weak_count::__release_weak(v236);
        if (a6)
          goto LABEL_385;
      }
      else
      {
LABEL_384:
        if (a6)
        {
LABEL_385:
          std::string::basic_string[abi:ne180100]<0>(__p, "progress");
          v328 = __p;
          v239 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v328);
          turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::get(v239 + 14, &v340);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 1176, (__int128 *)&v340);
          size = (std::__shared_weak_count *)v340.__r_.__value_.__l.__size_;
          if (v340.__r_.__value_.__l.__size_)
          {
            v241 = (unint64_t *)(v340.__r_.__value_.__l.__size_ + 8);
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 - 1, v241));
            if (!v242)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if (SBYTE7(v344) < 0)
            operator delete(__p[0]);
        }
      }
      v243 = (std::string *)operator new();
      turi::supervised::xgboost::metric_tracker::metric_tracker(v243, (__int128 **)a1);
      std::shared_ptr<turi::supervised::xgboost::metric_tracker>::reset[abi:ne180100]<turi::supervised::xgboost::metric_tracker,void>((_QWORD *)(a1 + 1192), (uint64_t)v243);
      *(_QWORD *)(a1 + 1208) = 0;
      if (a6)
      {
        std::string::basic_string[abi:ne180100]<0>(&v328, "num_trees");
        __p[0] = &v328;
        v244 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)&v328, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        turi::variant_converter<turi::flexible_type,void>::get(v244 + 14, (uint64_t)&v354);
        LODWORD(v245) = 0;
        switch(v354.__r_.__value_.__s.__data_[12])
        {
          case 0:
            LODWORD(v245) = v354.__r_.__value_.__l.__data_;
            goto LABEL_422;
          case 1:
            v245 = (uint64_t)*(double *)&v354.__r_.__value_.__l.__data_;
            goto LABEL_422;
          case 2:
            v249 = v354.__r_.__value_.__r.__words[0];
            v341 = 0;
            v250 = (char *)(v354.__r_.__value_.__r.__words[0] + 8);
            if (*(char *)(v354.__r_.__value_.__r.__words[0] + 31) < 0)
              v250 = *(char **)(v354.__r_.__value_.__r.__words[0] + 8);
            std::string::basic_string[abi:ne180100]<0>(__p, v250);
            LODWORD(v245) = std::stoll((const std::string *)__p, &v341, 10);
            if (SBYTE7(v344) < 0)
              operator delete(__p[0]);
            if (*(char *)(v249 + 31) < 0)
              v251 = *(_QWORD *)(v249 + 16);
            else
              v251 = *(unsigned __int8 *)(v249 + 31);
            if (v341 != v251)
            {
              v313 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v314 = std::string::append(&v340, " cannot be interpreted as an integer");
              v315 = *(_OWORD *)&v314->__r_.__value_.__l.__data_;
              *(_QWORD *)&v344 = *((_QWORD *)&v314->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v315;
              v314->__r_.__value_.__l.__size_ = 0;
              v314->__r_.__value_.__r.__words[2] = 0;
              v314->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v313, (const std::string *)__p);
              __cxa_throw(v313, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_422;
          case 3:
            __p[1] = 0;
            *(_QWORD *)&v344 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v354.__r_.__value_.__r.__words[0] + 8), *(_QWORD *)(v354.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v354.__r_.__value_.__r.__words[0] + 16)- *(_QWORD *)(v354.__r_.__value_.__r.__words[0] + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_421;
          case 4:
            __p[1] = 0;
            *(_QWORD *)&v344 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v354.__r_.__value_.__r.__words[0] + 8), *(uint64_t **)(v354.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v354.__r_.__value_.__r.__words[0] + 16)- *(_QWORD *)(v354.__r_.__value_.__r.__words[0] + 8)) >> 4);
            turi::flexible_type_fail(0);
            v340.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
            goto LABEL_421;
          case 5:
            __p[1] = 0;
            *(_QWORD *)&v344 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v354.__r_.__value_.__r.__words[0] + 8), *(uint64_t **)(v354.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v354.__r_.__value_.__r.__words[0] + 16)- *(_QWORD *)(v354.__r_.__value_.__r.__words[0] + 8)) >> 5);
            turi::flexible_type_fail(0);
            v340.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
            goto LABEL_421;
          case 6:
            v245 = (uint64_t)(v354.__r_.__value_.__r.__words[0] << 8) >> 8;
            goto LABEL_422;
          case 7:
            goto LABEL_422;
          case 8:
            v252 = v354.__r_.__value_.__r.__words[0];
            v253 = *(unsigned int **)(v354.__r_.__value_.__r.__words[0] + 16);
            __p[0] = *(void **)(v354.__r_.__value_.__r.__words[0] + 8);
            __p[1] = v253;
            if (v253)
            {
              v254 = v253 + 2;
              do
                v255 = __ldxr(v254);
              while (__stxr(v255 + 1, v254));
            }
            v256 = *(_OWORD *)(v252 + 24);
            v257 = *(_OWORD *)(v252 + 56);
            v345 = *(_OWORD *)(v252 + 40);
            v346 = v257;
            v344 = v256;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            goto LABEL_421;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, v354.__r_.__value_.__r.__words[0] + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v345 + 1))
            {
              *(_QWORD *)&v346 = *((_QWORD *)&v345 + 1);
              operator delete(*((void **)&v345 + 1));
            }
            if ((_QWORD)v344)
            {
              *((_QWORD *)&v344 + 1) = v344;
              operator delete((void *)v344);
            }
            v246 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v247 = (unint64_t *)((char *)__p[1] + 8);
              do
                v248 = __ldaxr(v247);
              while (__stlxr(v248 - 1, v247));
              if (!v248)
              {
                ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                std::__shared_weak_count::__release_weak(v246);
              }
            }
LABEL_421:
            LODWORD(v245) = 0;
LABEL_422:
            *(_QWORD *)(a1 + 1208) = (int)v245;
            switch(v354.__r_.__value_.__s.__data_[12])
            {
              case 2:
                v258 = (unint64_t *)v354.__r_.__value_.__r.__words[0];
                do
                {
                  v259 = __ldaxr(v258);
                  v260 = v259 - 1;
                }
                while (__stlxr(v260, v258));
                if (!v260)
                {
                  v261 = v354.__r_.__value_.__r.__words[0];
                  if (v354.__r_.__value_.__r.__words[0])
                  {
                    if (*(char *)(v354.__r_.__value_.__r.__words[0] + 31) < 0)
                      operator delete(*(void **)(v354.__r_.__value_.__r.__words[0] + 8));
                    v262 = (_QWORD *)v261;
                    v263 = 0x1012C404EF22A49;
                    goto LABEL_453;
                  }
                }
                break;
              case 3:
                v271 = (unint64_t *)v354.__r_.__value_.__r.__words[0];
                do
                {
                  v272 = __ldaxr(v271);
                  v273 = v272 - 1;
                }
                while (__stlxr(v273, v271));
                if (!v273)
                {
                  v274 = v354.__r_.__value_.__r.__words[0];
                  if (v354.__r_.__value_.__r.__words[0])
                  {
                    v275 = *(void **)(v354.__r_.__value_.__r.__words[0] + 8);
                    if (v275)
                    {
                      *(_QWORD *)(v354.__r_.__value_.__r.__words[0] + 16) = v275;
                      operator delete(v275);
                    }
                    v262 = (_QWORD *)v274;
                    v263 = 0x1080C409938AC02;
                    goto LABEL_453;
                  }
                }
                break;
              case 4:
                v264 = (unint64_t *)v354.__r_.__value_.__r.__words[0];
                do
                {
                  v265 = __ldaxr(v264);
                  v266 = v265 - 1;
                }
                while (__stlxr(v266, v264));
                if (!v266)
                {
                  v267 = v354.__r_.__value_.__r.__words[0];
                  if (v354.__r_.__value_.__r.__words[0])
                  {
                    __p[0] = (void *)(v354.__r_.__value_.__r.__words[0] + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                    goto LABEL_452;
                  }
                }
                break;
              case 5:
                v276 = (unint64_t *)v354.__r_.__value_.__r.__words[0];
                do
                {
                  v277 = __ldaxr(v276);
                  v278 = v277 - 1;
                }
                while (__stlxr(v278, v276));
                if (!v278)
                {
                  v267 = v354.__r_.__value_.__r.__words[0];
                  if (v354.__r_.__value_.__r.__words[0])
                  {
                    __p[0] = (void *)(v354.__r_.__value_.__r.__words[0] + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_452:
                    v262 = (_QWORD *)v267;
                    v263 = 0x1020C405E66F15BLL;
                    goto LABEL_453;
                  }
                }
                break;
              case 8:
                v279 = (unint64_t *)v354.__r_.__value_.__r.__words[0];
                do
                {
                  v280 = __ldaxr(v279);
                  v281 = v280 - 1;
                }
                while (__stlxr(v281, v279));
                if (!v281)
                {
                  v282 = v354.__r_.__value_.__r.__words[0];
                  if (v354.__r_.__value_.__r.__words[0])
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(v354.__r_.__value_.__r.__words[0] + 16));
                    MEMORY[0x219A19A08](v282, 0x1030C40F1F0227BLL);
                  }
                  v354.__r_.__value_.__r.__words[0] = 0;
                }
                break;
              case 9:
                v268 = (unint64_t *)v354.__r_.__value_.__r.__words[0];
                do
                {
                  v269 = __ldaxr(v268);
                  v270 = v269 - 1;
                }
                while (__stlxr(v270, v268));
                if (!v270 && v354.__r_.__value_.__r.__words[0])
                {
                  v262 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v354.__r_.__value_.__l.__data_);
                  v263 = 0x1030C407B73B9F7;
LABEL_453:
                  MEMORY[0x219A19A08](v262, v263);
                }
                break;
              default:
                break;
            }
            v354.__r_.__value_.__r.__words[0] = 0;
            LODWORD(v354.__r_.__value_.__r.__words[1]) = 0;
            v354.__r_.__value_.__s.__data_[12] = 0;
            if (SHIBYTE(v330) < 0)
              operator delete(v328);
            break;
          default:
            turi::flexible_type_fail(0);
            goto LABEL_549;
        }
      }
      turi::table_printer::print_header((turi::table_printer *)(a1 + 424));
      gettimeofday((timeval *)(a1 + 1216), 0);
      turi::gl_sframe::operator=(a1 + 1232, (uint64_t)a2);
      turi::sframe::~sframe((turi::sframe *)&__idx);
      turi::sframe::~sframe((turi::sframe *)&v358);
      turi::sframe::~sframe((turi::sframe *)&v362);
      turi::sframe::~sframe((turi::sframe *)v363);
      switch(v319)
      {
        case 2u:
          do
          {
            v283 = __ldaxr(*(unint64_t **)&v74);
            v284 = v283 - 1;
          }
          while (__stlxr(v284, *(unint64_t **)&v74));
          if (v284)
            v285 = 1;
          else
            v285 = *(_QWORD *)&v74 == 0;
          if (!v285)
          {
            if (*(char *)(*(_QWORD *)&v74 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v74 + 8));
            v286 = v74;
            v287 = 0x1012C404EF22A49;
            goto LABEL_509;
          }
          break;
        case 3u:
          do
          {
            v297 = __ldaxr(*(unint64_t **)&v74);
            v298 = v297 - 1;
          }
          while (__stlxr(v298, *(unint64_t **)&v74));
          if (v298)
            v299 = 1;
          else
            v299 = *(_QWORD *)&v74 == 0;
          if (!v299)
          {
            v300 = *(void **)(*(_QWORD *)&v74 + 8);
            if (v300)
            {
              *(_QWORD *)(*(_QWORD *)&v74 + 16) = v300;
              operator delete(v300);
            }
            v286 = v74;
            v287 = 0x1080C409938AC02;
            goto LABEL_509;
          }
          break;
        case 4u:
          do
          {
            v288 = __ldaxr(*(unint64_t **)&v74);
            v289 = v288 - 1;
          }
          while (__stlxr(v289, *(unint64_t **)&v74));
          if (v289)
            v290 = 1;
          else
            v290 = *(_QWORD *)&v74 == 0;
          if (!v290)
          {
            __p[0] = (void *)(*(_QWORD *)&v74 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_501;
          }
          break;
        case 5u:
          do
          {
            v301 = __ldaxr(*(unint64_t **)&v74);
            v302 = v301 - 1;
          }
          while (__stlxr(v302, *(unint64_t **)&v74));
          if (v302)
            v303 = 1;
          else
            v303 = *(_QWORD *)&v74 == 0;
          if (!v303)
          {
            __p[0] = (void *)(*(_QWORD *)&v74 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_501:
            v286 = v74;
            v287 = 0x1020C405E66F15BLL;
            goto LABEL_509;
          }
          break;
        case 8u:
          do
          {
            v304 = __ldaxr(*(unint64_t **)&v74);
            v305 = v304 - 1;
          }
          while (__stlxr(v305, *(unint64_t **)&v74));
          if (v305)
            v306 = 1;
          else
            v306 = *(_QWORD *)&v74 == 0;
          if (!v306)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v74 + 16));
            v286 = v74;
            v296 = -235920773;
            goto LABEL_508;
          }
          break;
        case 9u:
          do
          {
            v291 = __ldaxr(*(unint64_t **)&v74);
            v292 = v291 - 1;
          }
          while (__stlxr(v292, *(unint64_t **)&v74));
          if (v292)
            v293 = 1;
          else
            v293 = *(_QWORD *)&v74 == 0;
          if (!v293)
          {
            v294 = *(void **)(*(_QWORD *)&v74 + 48);
            if (v294)
            {
              *(_QWORD *)(*(_QWORD *)&v74 + 56) = v294;
              operator delete(v294);
            }
            v295 = *(void **)(*(_QWORD *)&v74 + 24);
            if (v295)
            {
              *(_QWORD *)(*(_QWORD *)&v74 + 32) = v295;
              operator delete(v295);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v74 + 8);
            v286 = v74;
            v296 = 2071181815;
LABEL_508:
            v287 = v296 | 0x1030C4000000000;
LABEL_509:
            MEMORY[0x219A19A08](*(_QWORD *)&v286, v287);
          }
          break;
        default:
          break;
      }
      v333[0] = off_24D91E9C0;
      v307 = v334;
      if (v334)
      {
        v308 = (unint64_t *)&v334->__shared_owners_;
        do
          v309 = __ldaxr(v308);
        while (__stlxr(v309 - 1, v308));
        if (!v309)
        {
          ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
          std::__shared_weak_count::__release_weak(v307);
        }
      }
      if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v335.__r_.__value_.__l.__data_);
      v338[0] = off_24D91E9C0;
      v310 = v339;
      if (v339)
      {
        v311 = (unint64_t *)&v339->__shared_owners_;
        do
          v312 = __ldaxr(v311);
        while (__stlxr(v312 - 1, v311));
        if (!v312)
        {
          ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
          std::__shared_weak_count::__release_weak(v310);
        }
      }
      return;
    default:
      goto LABEL_546;
  }
}

void sub_2185B8DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t (**a38)(turi::gl_sframe *__hidden this),uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  uint64_t v46;
  uint64_t v47;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  unsigned int v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v89;
  void *v90;
  unint64_t v91;
  unint64_t v92;
  BOOL v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;

  MEMORY[0x219A19A08](v47, 0x1012C404EF22A49);
  switch(LOBYTE(STACK[0x55C]))
  {
    case 2:
      v49 = (unint64_t *)STACK[0x550];
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = STACK[0x550];
        if (STACK[0x550])
        {
          if (*(char *)(v52 + 31) < 0)
            operator delete(*(void **)(v52 + 8));
          MEMORY[0x219A19A08](v52, 0x1012C404EF22A49);
        }
      }
      goto LABEL_40;
    case 3:
      v62 = (unint64_t *)STACK[0x550];
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        goto LABEL_40;
      v65 = STACK[0x550];
      if (!STACK[0x550])
        goto LABEL_39;
      v66 = *(void **)(v65 + 8);
      if (v66)
      {
        *(_QWORD *)(v65 + 16) = v66;
        operator delete(v66);
      }
      v60 = (_QWORD *)v65;
      v67 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v53 = (unint64_t *)STACK[0x550];
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (v55)
        goto LABEL_40;
      v56 = STACK[0x550];
      if (!STACK[0x550])
        goto LABEL_39;
      STACK[0x680] = v56 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x680]);
      goto LABEL_31;
    case 5:
      v68 = (unint64_t *)STACK[0x550];
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (v70)
        goto LABEL_40;
      v56 = STACK[0x550];
      if (!STACK[0x550])
        goto LABEL_39;
      STACK[0x680] = v56 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x680]);
LABEL_31:
      v60 = (_QWORD *)v56;
      v67 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v71 = (unint64_t *)STACK[0x550];
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (v73)
        goto LABEL_40;
      v74 = STACK[0x550];
      if (!STACK[0x550])
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v74 + 16));
      v60 = (_QWORD *)v74;
      v61 = -235920773;
      goto LABEL_37;
    case 9:
      v57 = (unint64_t *)STACK[0x550];
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (v59)
        goto LABEL_40;
      if (!STACK[0x550])
        goto LABEL_39;
      v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)STACK[0x550]);
      v61 = 2071181815;
LABEL_37:
      v67 = v61 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v60, v67);
LABEL_39:
      STACK[0x550] = 0;
LABEL_40:
      STACK[0x550] = 0;
      LODWORD(STACK[0x558]) = 0;
      LOBYTE(STACK[0x55C]) = 0;
      STACK[0x680] = (unint64_t)&STACK[0x8D0];
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x680]);
      if (SLOBYTE(STACK[0xA17]) < 0)
        operator delete((void *)STACK[0xA00]);
      STACK[0xA00] = (unint64_t)&a46;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA00]);
      switch(a9)
      {
        case 2:
          do
          {
            v75 = __ldaxr((unint64_t *)v46);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, (unint64_t *)v46));
          if (v76)
            v77 = 1;
          else
            v77 = v46 == 0;
          if (v77)
            goto LABEL_86;
          if (*(char *)(v46 + 31) < 0)
            operator delete(*(void **)(v46 + 8));
          v78 = (_QWORD *)v46;
          v79 = 0x1012C404EF22A49;
          goto LABEL_85;
        case 3:
          do
          {
            v87 = __ldaxr((unint64_t *)v46);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, (unint64_t *)v46));
          if (v88)
            v89 = 1;
          else
            v89 = v46 == 0;
          if (v89)
            goto LABEL_86;
          v90 = *(void **)(v46 + 8);
          if (v90)
          {
            *(_QWORD *)(v46 + 16) = v90;
            operator delete(v90);
          }
          v78 = (_QWORD *)v46;
          v79 = 0x1080C409938AC02;
          goto LABEL_85;
        case 4:
          do
          {
            v80 = __ldaxr((unint64_t *)v46);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, (unint64_t *)v46));
          if (v81)
            v82 = 1;
          else
            v82 = v46 == 0;
          if (v82)
            goto LABEL_86;
          STACK[0xA00] = v46 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA00]);
          goto LABEL_77;
        case 5:
          do
          {
            v91 = __ldaxr((unint64_t *)v46);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, (unint64_t *)v46));
          if (v92)
            v93 = 1;
          else
            v93 = v46 == 0;
          if (v93)
            goto LABEL_86;
          STACK[0xA00] = v46 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA00]);
LABEL_77:
          v78 = (_QWORD *)v46;
          v79 = 0x1020C405E66F15BLL;
          goto LABEL_85;
        case 8:
          do
          {
            v94 = __ldaxr((unint64_t *)v46);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, (unint64_t *)v46));
          if (v95)
            v96 = 1;
          else
            v96 = v46 == 0;
          if (v96)
            goto LABEL_86;
          boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
          v78 = (_QWORD *)v46;
          v86 = -235920773;
          goto LABEL_84;
        case 9:
          do
          {
            v83 = __ldaxr((unint64_t *)v46);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, (unint64_t *)v46));
          if (v84)
            v85 = 1;
          else
            v85 = v46 == 0;
          if (v85)
            goto LABEL_86;
          v78 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v46);
          v86 = 2071181815;
LABEL_84:
          v79 = v86 | 0x1030C4000000000;
LABEL_85:
          MEMORY[0x219A19A08](v78, v79);
LABEL_86:
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
          if (a34 < 0)
            operator delete(a29);
          a38 = off_24D91E9C0;
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_86;
      }
    default:
      goto LABEL_40;
  }
}

uint64_t turi::table_printer::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (a1 != a2)
    std::vector<std::pair<std::string,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(a1, *(std::string **)a2, *(__int128 **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  turi::sframe::operator=(a1 + 296, a2 + 296);
  *(_WORD *)(a1 + 592) = *(_WORD *)(a2 + 592);
  std::function<void ()(std::vector<turi::flexible_type> const&)>::operator=((_QWORD *)(a1 + 600), a2 + 600);
  std::function<void ()(std::vector<turi::flexible_type> &&)>::operator=((_QWORD *)(a1 + 632), a2 + 632);
  std::function<void ()(turi::sframe_rows const&)>::operator=((_QWORD *)(a1 + 664), a2 + 664);
  if (a1 != a2)
  {
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 696, *(uint64_t **)(a2 + 696), *(uint64_t **)(a2 + 704), (uint64_t)(*(_QWORD *)(a2 + 704) - *(_QWORD *)(a2 + 696)) >> 4);
    std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>((_QWORD *)(a1 + 720), *(char **)(a2 + 720), *(char **)(a2 + 728), *(_QWORD *)(a2 + 728) - *(_QWORD *)(a2 + 720));
  }
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  return a1;
}

void std::shared_ptr<turi::supervised::xgboost::metric_tracker>::reset[abi:ne180100]<turi::supervised::xgboost::metric_tracker,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::supervised::xgboost::metric_tracker>::shared_ptr[abi:ne180100]<turi::supervised::xgboost::metric_tracker,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void turi::supervised::xgboost::xgboost_model::resume_training(uint64_t a1, const turi::gl_sframe *a2, int *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9[2];
  void *__p[2];
  char v11;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  int v14;
  _QWORD v15[10];

  v15[9] = *MEMORY[0x24BDAC8D0];
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v12, a2);
  __p[0] = v15;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a3, *a3 ^ (*a3 >> 31), (std::string **)__p, (uint64_t)(a3 + 2));
  v14 = *a3 ^ (*a3 >> 31);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  turi::supervised::xgboost::xgboost_model::init_training(a1, (const turi::gl_sframe *)v12, &v14, (uint64_t)__p, (uint64_t)&v8, 1);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v9[0]);
  if (v11 < 0)
    operator delete(__p[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v14);
  v12[0] = off_24D91E9C0;
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2185B9E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(turi::gl_sframe *__hidden this), uint64_t a19, uint64_t a20,unsigned int a21)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a9, a10);
  if (a17 < 0)
    operator delete(__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a21);
  a18 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::iterate_training(turi::supervised::xgboost::xgboost_model *this)
{
  uint64_t v2;
  int is_random_forest;
  xgboost_old::learner::BoostLearner *v4;
  uint64_t v5;
  const xgboost_old::learner::DMatrix *v6;
  double v7;
  turi::supervised::xgboost::metric_tracker *v8;
  std::string *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  turi::unity_sframe **v25;
  turi::unity_sframe *v26;
  turi::unity_sframe *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  turi::unity_sframe *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD v52[2];
  void *v53;
  std::__shared_weak_count *v54;
  void *v55;
  std::__shared_weak_count *v56;
  __int128 v57;
  uint64_t v58;
  void *__p[2];
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  timeval lpsrc;
  timeval v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 51);
  is_random_forest = turi::supervised::xgboost::xgboost_model::is_random_forest(this);
  v4 = (xgboost_old::learner::BoostLearner *)*((_QWORD *)this + 208);
  v5 = *((unsigned int *)this + 302);
  v6 = (const xgboost_old::learner::DMatrix *)*((_QWORD *)this + 49);
  if (is_random_forest)
    xgboost_old::learner::BoostLearner::UpdateOneIterKeepGpair(v4, v5, v6);
  else
    xgboost_old::learner::BoostLearner::UpdateOneIter(v4, v5, v6);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v7 = 1.0 / (double)(unint64_t)(*((_QWORD *)this + 151) + 1);
  turi::supervised::xgboost::xgboost_model::xgboost_predict(this, *((_QWORD *)this + 49), 0, (uint64_t *)&v61, v7);
  turi::supervised::xgboost::fast_evaluate((uint64_t)&v61, *((_QWORD *)this + 49) + 16, *((_QWORD **)this + 149), (float **)__p);
  turi::supervised::xgboost::metric_tracker::track_training(*((_QWORD *)this + 149), *((_QWORD *)this + 151), __p);
  if (v2)
  {
    v66.tv_sec = 0;
    *(_QWORD *)&v66.tv_usec = 0;
    v67 = 0;
    turi::supervised::xgboost::xgboost_model::xgboost_predict(this, *((_QWORD *)this + 51), 0, &v66.tv_sec, v7);
    turi::supervised::xgboost::fast_evaluate((uint64_t)&v66, *((_QWORD *)this + 51) + 16, *((_QWORD **)this + 149), (float **)&v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v57;
    v60 = v58;
    turi::supervised::xgboost::metric_tracker::track_validation(*((_QWORD *)this + 149), *((_QWORD *)this + 151), __p);
    if (v66.tv_sec)
    {
      *(_QWORD *)&v66.tv_usec = v66.tv_sec;
      operator delete((void *)v66.tv_sec);
    }
  }
  v8 = (turi::supervised::xgboost::metric_tracker *)*((_QWORD *)this + 149);
  v9 = (std::string *)*((_QWORD *)this + 151);
  gettimeofday(&v66, 0);
  turi::supervised::xgboost::metric_tracker::make_progress_table_row(v8, (double)(v66.tv_usec - *((_DWORD *)this + 306)) / 1000000.0 + (double)(v66.tv_sec - *((_QWORD *)this + 152)), v9, (std::string::size_type)&v57);
  v10 = *((_QWORD *)this + 151);
  v64 = (uint64_t)(*((_QWORD *)this + 54) - *((_QWORD *)this + 53)) >> 5;
  lpsrc.tv_sec = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3);
  if (lpsrc.tv_sec != v64)
  {
    v66.tv_sec = (__darwin_time_t)&lpsrc;
    *(_QWORD *)&v66.tv_usec = &v64;
    turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()();
  }
  v11 = v10 + 1;
  v12 = (unint64_t *)((char *)this + 496);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = turi::table_printer::register_tick((turi::supervised::xgboost::xgboost_model *)((char *)this + 424), v11, v13 + 1);
  v15 = v14;
  if (v14)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 520));
    turi::table_printer::print_row<std::string>((_QWORD *)this + 53, (uint64_t *)&v57);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 520));
  }
  v16 = *((_QWORD *)this + 146);
  if (v16 && !(v13 % v16))
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 656));
    v18 = *((_QWORD *)&v57 + 1);
    v17 = v57;
    if (!*((_BYTE *)this + 1016))
    {
      std::vector<turi::flexible_type>::resize((uint64_t *)this + 140, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3));
      v18 = *((_QWORD *)&v57 + 1);
      v17 = v57;
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3);
      v20 = *((_QWORD *)this + 143);
      v21 = *((_QWORD *)this + 144) - v20;
      if (v19 <= v21)
      {
        if (v19 < v21)
          *((_QWORD *)this + 144) = v20 - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3);
      }
      else
      {
        std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)this + 1144, v19 - v21);
        v18 = *((_QWORD *)&v57 + 1);
        v17 = v57;
      }
    }
    if (v18 != v17)
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      do
      {
        turi::flexible_type::operator=<std::string>((uint64_t *)(*((_QWORD *)this + 140) + v22), (const std::string *)(v17 + v23));
        *(_BYTE *)(*((_QWORD *)this + 143) + v24++) = 0;
        v17 = v57;
        v23 += 24;
        v22 += 16;
      }
      while (v24 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3));
    }
    turi::table_printer::track_progress_row((uint64_t)this + 424, (uint64_t *)this + 140);
    *((_BYTE *)this + 1017) = v15;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 656));
  }
  v25 = (turi::unity_sframe **)((char *)this + 1176);
  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 147) + 64))(*((_QWORD *)this + 147)))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v53);
    v26 = (turi::unity_sframe *)v53;
    turi::table_printer::get_tracked_table((turi::supervised::xgboost::xgboost_model *)((char *)this + 424), (turi::sframe *)&v66);
    turi::unity_sframe::construct_from_sframe(v26, (const turi::sframe *)&v66);
    turi::sframe::~sframe((turi::sframe *)&v66);
    v27 = *v25;
    v55 = v53;
    v56 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
    (*(void (**)(timeval *__return_ptr, turi::unity_sframe *, void **))(*(_QWORD *)v27 + 288))(&lpsrc, v27, &v55);
    if (lpsrc.tv_sec
    {
      v66.tv_sec = (__darwin_time_t)v30;
      *(_QWORD *)&v66.tv_usec = *(_QWORD *)&lpsrc.tv_usec;
      if (*(_QWORD *)&lpsrc.tv_usec)
      {
        v31 = (unint64_t *)(*(_QWORD *)&lpsrc.tv_usec + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
    }
    else
    {
      v66.tv_sec = 0;
      *(_QWORD *)&v66.tv_usec = 0;
    }
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 1176, (__int128 *)&v66.tv_sec);
    v33 = *(std::__shared_weak_count **)&v66.tv_usec;
    if (*(_QWORD *)&v66.tv_usec)
    {
      v34 = (unint64_t *)(*(_QWORD *)&v66.tv_usec + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = *(std::__shared_weak_count **)&lpsrc.tv_usec;
    if (*(_QWORD *)&lpsrc.tv_usec)
    {
      v37 = (unint64_t *)(*(_QWORD *)&lpsrc.tv_usec + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v56;
    if (v56)
    {
      v40 = (unint64_t *)&v56->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v54;
    if (v54)
    {
      v43 = (unint64_t *)&v54->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  else
  {
    v45 = *v25;
    turi::table_printer::get_tracked_table((turi::supervised::xgboost::xgboost_model *)((char *)this + 424), (turi::sframe *)&v66);
    turi::unity_sframe::construct_from_sframe(v45, (const turi::sframe *)&v66);
    turi::sframe::~sframe((turi::sframe *)&v66);
  }
  turi::supervised::xgboost::metric_tracker::get_training_metrics(*((turi::supervised::xgboost::metric_tracker **)this + 149), *((_QWORD *)this + 151), (char **)&v66);
  turi::supervised::xgboost::metric_tracker::get_validation_metrics(*((turi::supervised::xgboost::metric_tracker **)this + 149), *((_QWORD *)this + 151), (char **)&v53);
  v46 = (std::__shared_weak_count *)*((_QWORD *)this + 148);
  v52[0] = *((_QWORD *)this + 147);
  v52[1] = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  gettimeofday(&lpsrc, 0);
  turi::supervised::xgboost::xgboost_model::_save_training_state((uint64_t)this, (double)(lpsrc.tv_usec - *((_DWORD *)this + 306)) / 1000000.0 + (double)(lpsrc.tv_sec - *((_QWORD *)this + 152)), v49, &v66.tv_sec, (uint64_t *)&v53, (uint64_t)v52);
  if (v46)
  {
    v50 = (unint64_t *)&v46->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v53)
  {
    v54 = (std::__shared_weak_count *)v53;
    operator delete(v53);
  }
  if (v66.tv_sec)
  {
    *(_QWORD *)&v66.tv_usec = v66.tv_sec;
    operator delete((void *)v66.tv_sec);
  }
  ++*((_QWORD *)this + 151);
  v66.tv_sec = (__darwin_time_t)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_2185BA4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::learner::BoostLearner::UpdateOneIterKeepGpair(xgboost_old::learner::BoostLearner *this, uint64_t a2, const xgboost_old::learner::DMatrix *a3)
{
  uint64_t *Engine;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;

  if (*((_DWORD *)this + 3)
    || (Engine = rabit::engine::GetEngine(this), (*(unsigned int (**)(uint64_t *))(*Engine + 72))(Engine)))
  {
    srand(a2 - *((_DWORD *)this + 2) + (*((_DWORD *)this + 2) << 7));
  }
  if ((_DWORD)a2)
  {
    if (*((_QWORD *)this + 40) != *((_QWORD *)this + 41))
      goto LABEL_9;
  }
  else
  {
    xgboost_old::learner::BoostLearner::PredictRaw((float *)this, (uint64_t)a3, (_QWORD *)this + 37, 0, 1.0);
  }
  (*(void (**)(_QWORD, char *, char *, uint64_t, char *))(**((_QWORD **)this + 30) + 24))(*((_QWORD *)this + 30), (char *)this + 296, (char *)a3 + 16, a2, (char *)this + 320);
LABEL_9:
  v7 = *((_QWORD *)this + 26);
  v8 = (**(uint64_t (***)(const xgboost_old::learner::DMatrix *))a3)(a3);
  v9 = *((_QWORD *)this + 43);
  v10 = *((_QWORD *)this + 44) - v9;
  if (v10)
  {
    v11 = v10 / 24;
    if ((unint64_t)(v10 / 24) <= 1)
      v11 = 1;
    v12 = (uint64_t *)(v9 + 8);
    while (1)
    {
      v13 = (const xgboost_old::learner::DMatrix *)*(v12 - 1) == a3 && *((_QWORD *)a3 + 22) == (_QWORD)this;
      if (v13 && v12[1] == *((_QWORD *)a3 + 2))
        break;
      v12 += 3;
      if (!--v11)
        goto LABEL_20;
    }
    v14 = *v12;
  }
  else
  {
LABEL_20:
    v14 = -1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)v7 + 56))(v7, v8, v14, (char *)a3 + 16, (char *)this + 320);
}

uint64_t xgboost_old::learner::BoostLearner::UpdateOneIter(xgboost_old::learner::BoostLearner *this, uint64_t a2, const xgboost_old::learner::DMatrix *a3)
{
  uint64_t *Engine;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;

  if (*((_DWORD *)this + 3)
    || (Engine = rabit::engine::GetEngine(this), (*(unsigned int (**)(uint64_t *))(*Engine + 72))(Engine)))
  {
    srand(a2 - *((_DWORD *)this + 2) + (*((_DWORD *)this + 2) << 7));
  }
  xgboost_old::learner::BoostLearner::PredictRaw((float *)this, (uint64_t)a3, (_QWORD *)this + 37, 0, 1.0);
  (*(void (**)(_QWORD, char *, char *, uint64_t, char *))(**((_QWORD **)this + 30) + 24))(*((_QWORD *)this + 30), (char *)this + 296, (char *)a3 + 16, a2, (char *)this + 320);
  v7 = *((_QWORD *)this + 26);
  v8 = (**(uint64_t (***)(const xgboost_old::learner::DMatrix *))a3)(a3);
  v9 = *((_QWORD *)this + 43);
  v10 = *((_QWORD *)this + 44) - v9;
  if (v10)
  {
    v11 = v10 / 24;
    if ((unint64_t)(v10 / 24) <= 1)
      v11 = 1;
    v12 = (uint64_t *)(v9 + 8);
    while (1)
    {
      v13 = (const xgboost_old::learner::DMatrix *)*(v12 - 1) == a3 && *((_QWORD *)a3 + 22) == (_QWORD)this;
      if (v13 && v12[1] == *((_QWORD *)a3 + 2))
        break;
      v12 += 3;
      if (!--v11)
        goto LABEL_15;
    }
    v14 = *v12;
  }
  else
  {
LABEL_15:
    v14 = -1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char *))(*(_QWORD *)v7 + 56))(v7, v8, v14, (char *)a3 + 16, (char *)this + 320);
}

unint64_t turi::supervised::xgboost::xgboost_model::xgboost_predict(turi::supervised::xgboost::xgboost_model *a1, uint64_t a2, char a3, uint64_t *a4, double a5)
{
  int is_random_forest;
  double v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  float v22;
  void *__p[2];
  char v24;

  is_random_forest = turi::supervised::xgboost::xgboost_model::is_random_forest(a1);
  v11 = 1.0;
  if (is_random_forest)
  {
    v11 = a5;
    if (a5 == 0.0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "max_iterations");
      v12 = *(_QWORD *)turi::option_manager::value((uint64_t)a1 + 224, (const void **)__p);
      if (v24 < 0)
        operator delete(__p[0]);
      v11 = 1.0 / (double)v12;
    }
  }
  v13 = *((_QWORD *)a1 + 208);
  v14 = v11;
  xgboost_old::learner::BoostLearner::PredictRaw((float *)v13, a2, a4, 0, v14);
  if ((a3 & 1) != 0)
  {
    result = turi::supervised::xgboost::xgboost_model::num_classes(a1);
    if (result >= 3)
    {
      v16 = *a4;
      v17 = a4[1];
      v18 = v17 - *a4;
      if (v17 != *a4)
      {
        v19 = 0;
        v20 = v18 >> 2;
        if (v20 <= 1)
          v20 = 1;
        v21 = 0.0;
        do
        {
          v22 = *(float *)(v16 + 4 * v19) - v21;
          if (!(v19 % result))
          {
            v22 = 0.0;
            v21 = *(float *)(v16 + 4 * v19);
          }
          *(float *)(v16 + 4 * v19++) = v22;
        }
        while (v20 != v19);
      }
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v13 + 240) + 40))(*(_QWORD *)(v13 + 240), a4);
    return turi::supervised::xgboost::xgboost_model::num_classes(a1);
  }
  return result;
}

void sub_2185BA9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::metric_tracker::track_training(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  __int128 *v10;
  int v11;
  __int128 v12;
  std::string __p;
  uint64_t v14;
  std::string *p_p;

  v3 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) != v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t **)(a1 + 24);
    do
    {
      v10 = (__int128 *)(v3 + v7);
      v11 = *(_DWORD *)(*a3 + 4 * v8);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v12 = *v10;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      v14 = a2;
      p_p = &__p;
      *((_DWORD *)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long>&&>,std::tuple<>>(v9, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 16) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v8;
      v3 = *(_QWORD *)(a1 + 72);
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v3) >> 3));
  }
}

void sub_2185BAAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::metric_tracker::track_validation(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  __int128 *v10;
  int v11;
  __int128 v12;
  std::string __p;
  uint64_t v14;
  std::string *p_p;

  v3 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) != v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t **)(a1 + 48);
    do
    {
      v10 = (__int128 *)(v3 + v7);
      v11 = *(_DWORD *)(*a3 + 4 * v8);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v12 = *v10;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      v14 = a2;
      p_p = &__p;
      *((_DWORD *)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long>&&>,std::tuple<>>(v9, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 16) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v8;
      v3 = *(_QWORD *)(a1 + 72);
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v3) >> 3));
  }
}

void sub_2185BAC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::metric_tracker::make_progress_table_row(turi::supervised::xgboost::metric_tracker *this@<X0>, double a2@<D0>, std::string *a3@<X1>, std::string::size_type a4@<X8>)
{
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  float *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::string *v40;
  std::string *v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  std::string v46;
  std::string *v47;
  std::string v48;
  std::__split_buffer<std::string> v49;
  __int128 v50;

  *(_QWORD *)&v50 = *MEMORY[0x24BDAC8D0];
  std::to_string((std::string *)&v49, (unint64_t)a3->__r_.__value_.__r.__words + 1);
  std::to_string((std::string *)&v49.__end_cap_, a2);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v46.__r_.__value_.__r.__words[0] = a4;
  v46.__r_.__value_.__s.__data_[8] = 0;
  v8 = (std::string *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v8 + 2;
  v45 = a4 + 16;
  v9 = 0;
  *(_QWORD *)(a4 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(a4 + 16, (__int128 *)&v49, &v50, v8);
  do
  {
    if (*((char *)&v49 + v9 * 8 + 47) < 0)
      operator delete((&v49.__end_cap_.__value_)[v9]);
    v9 -= 3;
  }
  while (v9 != -6);
  v10 = *((_QWORD *)this + 9);
  if (*((_QWORD *)this + 10) != v10)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (__int128 *)(v10 + v11);
      if (*(char *)(v10 + v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v14 = *v13;
        v46.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v14;
      }
      v47 = a3;
      v15 = (float *)std::map<std::pair<std::string,unsigned long>,float>::at((uint64_t)this + 24, (const void **)&v46.__r_.__value_.__l.__data_);
      std::to_string(&v48, *v15);
      v16 = *(_QWORD *)(a4 + 8);
      v17 = *(_QWORD *)(a4 + 16);
      if (v16 >= v17)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a4) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(_QWORD *)a4) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v20;
        v49.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v22)
          v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v45, v22);
        else
          v23 = 0;
        v24 = v23 + v19;
        v49.__first_ = v23;
        v49.__begin_ = v24;
        v49.__end_cap_.__value_ = &v23[v22];
        v25 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        v24->__r_.__value_.__r.__words[2] = v48.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        memset(&v48, 0, sizeof(v48));
        v49.__end_ = v24 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &v49);
        v26 = *(_QWORD *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&v49);
        v27 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a4 + 8) = v26;
        if (v27 < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
      }
      else
      {
        v18 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)&v48.__r_.__value_.__l + 2);
        *(_OWORD *)v16 = v18;
        memset(&v48, 0, sizeof(v48));
        *(_QWORD *)(a4 + 8) = v16 + 24;
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v49, *(const std::string::value_type **)(v10 + v11), *(_QWORD *)(v10 + v11 + 8));
      }
      else
      {
        v28 = *v13;
        v49.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v13 + 2);
        *(_OWORD *)&v49.__first_ = v28;
      }
      v49.__end_cap_.__value_ = a3;
      v29 = std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__count_unique<std::pair<std::string,unsigned long>>((uint64_t)this + 48, (const void **)&v49.__first_);
      v30 = v29;
      if (SHIBYTE(v49.__end_) < 0)
      {
        operator delete(v49.__first_);
        if (v30)
        {
LABEL_32:
          if (*((char *)v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v10 + v11), *(_QWORD *)(v10 + v11 + 8));
          }
          else
          {
            v31 = *v13;
            v46.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
            *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v31;
          }
          v47 = a3;
          v32 = (float *)std::map<std::pair<std::string,unsigned long>,float>::at((uint64_t)this + 48, (const void **)&v46.__r_.__value_.__l.__data_);
          std::to_string(&v48, *v32);
          v33 = *(_QWORD *)(a4 + 8);
          v34 = *(_QWORD *)(a4 + 16);
          if (v33 >= v34)
          {
            v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *(_QWORD *)a4) >> 3);
            v37 = v36 + 1;
            if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(_QWORD *)a4) >> 3);
            if (2 * v38 > v37)
              v37 = 2 * v38;
            if (v38 >= 0x555555555555555)
              v39 = 0xAAAAAAAAAAAAAAALL;
            else
              v39 = v37;
            v49.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
            if (v39)
              v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v45, v39);
            else
              v40 = 0;
            v41 = v40 + v36;
            v49.__first_ = v40;
            v49.__begin_ = v41;
            v49.__end_cap_.__value_ = &v40[v39];
            v42 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
            v41->__r_.__value_.__r.__words[2] = v48.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
            memset(&v48, 0, sizeof(v48));
            v49.__end_ = v41 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &v49);
            v43 = *(_QWORD *)(a4 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&v49);
            v44 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
            *(_QWORD *)(a4 + 8) = v43;
            if (v44 < 0)
              operator delete(v48.__r_.__value_.__l.__data_);
          }
          else
          {
            v35 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
            *(_QWORD *)(v33 + 16) = *((_QWORD *)&v48.__r_.__value_.__l + 2);
            *(_OWORD *)v33 = v35;
            memset(&v48, 0, sizeof(v48));
            *(_QWORD *)(a4 + 8) = v33 + 24;
          }
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
        }
      }
      else if (v29)
      {
        goto LABEL_32;
      }
      ++v12;
      v10 = *((_QWORD *)this + 9);
      v11 += 24;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 10) - v10) >> 3));
  }
}

void sub_2185BB08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  *(_QWORD *)(v36 + 8) = v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  v39 = 0;
  while (1)
  {
    if (*(&a36 + v39) < 0)
      operator delete(*(void **)((char *)&a31 + v39));
    v39 -= 24;
    if (v39 == -48)
      _Unwind_Resume(a1);
  }
}

void turi::supervised::xgboost::xgboost_model::_save_training_state(uint64_t a1, double a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  unsigned int *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned int *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __int128 *v57;
  __int128 v58;
  uint64_t v59;
  _OWORD *v60;
  _OWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  void *v76;
  void *v77;
  unsigned int v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  void *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  void *v108;
  void *v109;
  unsigned int v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  void *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  BOOL v125;
  std::__shared_weak_count *size;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  double v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  void *v149;
  void *v150;
  unsigned int v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  void *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  double v168;
  double v169;
  uint64_t v170;
  double v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int v174;
  __int128 v175;
  __int128 v176;
  unint64_t *v177;
  unint64_t v178;
  BOOL v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  BOOL v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  BOOL v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  BOOL v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  BOOL v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  double v214;
  unint64_t *v215;
  unint64_t v216;
  double v217;
  void *v218;
  void *v219;
  unsigned int v220;
  unint64_t *v221;
  unint64_t v222;
  double v223;
  void *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  double v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  double v233;
  double v234;
  uint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  double v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  double v243;
  void *v244;
  void *v245;
  unsigned int v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  double v250;
  void *v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  double v258;
  _OWORD *v259;
  _OWORD *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  _QWORD *v274;
  void *v275;
  void *v276;
  unsigned int v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  void *v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  std::string *v294;
  __int128 v295;
  unint64_t *v296;
  _QWORD *v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t *v301;
  _QWORD *v302;
  _QWORD *v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t *v306;
  unsigned int v307;
  unint64_t *v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  void *v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int *v323;
  unsigned int v324;
  __int128 v325;
  __int128 v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t **v331;
  uint64_t *v332;
  uint64_t *v333;
  _OWORD *v334;
  _OWORD *v335;
  uint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t v345;
  _QWORD *v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  _QWORD *v350;
  void *v351;
  void *v352;
  unsigned int v353;
  unint64_t *v354;
  unint64_t v355;
  unint64_t v356;
  _QWORD *v357;
  void *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  const std::string *v366[3];
  uint64_t *v367;
  uint64_t *v368;
  uint64_t *v369;
  __int128 v370;
  void *v371[2];
  __int128 v372;
  uint64_t *v373;
  _QWORD *v374[2];
  void *__p;
  std::__shared_weak_count *v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  _QWORD v380[3];
  void **v381;
  char v382;
  double v383;
  int v384;
  char v385;
  std::string v386;
  std::string::size_type v387;
  void *v388;
  void *v389;
  double v390;
  int v391;
  char v392;
  uint64_t v393[3];

  v393[0] = *MEMORY[0x24BDAC8D0];
  v10 = *(unsigned int **)(a6 + 8);
  __p = *(void **)a6;
  v376 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 2);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&__p, (uint64_t)&v386);
  v13 = v376;
  if (v376)
  {
    p_shared_owners = (unint64_t *)&v376->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "progress");
  *(_QWORD *)&v370 = &__p;
  v16 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v370);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v16 + 14, (unsigned int *)&v386);
  if (SBYTE7(v377) < 0)
    operator delete(__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v386);
  v374[0] = 0;
  v374[1] = 0;
  v373 = (uint64_t *)v374;
  std::string::basic_string[abi:ne180100]<0>(&v386, "training_time");
  __p = &v386;
  v17 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v373, (const void **)&v386.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  v24 = v17;
  switch(*((_BYTE *)v17 + 68))
  {
    case 2:
      v25 = (unint64_t *)*((_QWORD *)v17 + 7);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *((_QWORD *)v17 + 7);
        if (!v28)
          goto LABEL_53;
        if (*(char *)(v28 + 31) < 0)
          operator delete(*(void **)(v28 + 8));
        v29 = (_QWORD *)v28;
        v30 = 0x1012C404EF22A49;
        goto LABEL_52;
      }
      break;
    case 3:
      v42 = (unint64_t *)*((_QWORD *)v17 + 7);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = (_QWORD *)*((_QWORD *)v17 + 7);
        if (!v45)
          goto LABEL_53;
        v46 = (void *)v45[1];
        if (v46)
        {
          v45[2] = v46;
          operator delete(v46);
        }
        v29 = v45;
        v30 = 0x1080C409938AC02;
        goto LABEL_52;
      }
      break;
    case 4:
      v31 = (unint64_t *)*((_QWORD *)v17 + 7);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = (_QWORD *)*((_QWORD *)v17 + 7);
        if (!v34)
          goto LABEL_53;
        __p = v34 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_45;
      }
      break;
    case 5:
      v47 = (unint64_t *)*((_QWORD *)v17 + 7);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        v34 = (_QWORD *)*((_QWORD *)v17 + 7);
        if (!v34)
          goto LABEL_53;
        __p = v34 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_45:
        v29 = v34;
        v30 = 0x1020C405E66F15BLL;
        goto LABEL_52;
      }
      break;
    case 8:
      v50 = (unint64_t *)*((_QWORD *)v17 + 7);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        v53 = *((_QWORD *)v17 + 7);
        if (!v53)
          goto LABEL_53;
        boost::detail::shared_count::~shared_count((unsigned int **)(v53 + 16));
        v29 = (_QWORD *)v53;
        v41 = -235920773;
        goto LABEL_51;
      }
      break;
    case 9:
      v35 = (unint64_t *)*((_QWORD *)v17 + 7);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = (_QWORD *)*((_QWORD *)v17 + 7);
        if (v38)
        {
          v39 = (void *)v38[6];
          if (v39)
          {
            v38[7] = v39;
            operator delete(v39);
          }
          v40 = (void *)v38[3];
          if (v40)
          {
            v38[4] = v40;
            operator delete(v40);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v38 + 1));
          v29 = v38;
          v41 = 2071181815;
LABEL_51:
          v30 = v41 | 0x1030C4000000000;
LABEL_52:
          MEMORY[0x219A19A08](v29, v30);
        }
LABEL_53:
        *((_QWORD *)v24 + 7) = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)v24 + 16) = 0;
  *((_BYTE *)v24 + 68) = 1;
  *((double *)v24 + 7) = a2;
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  v54 = *(_QWORD *)(a1 + 344);
  if (*(_QWORD *)(a1 + 352) != v54)
  {
    v55 = 0;
    v56 = a1;
    do
    {
      v57 = (__int128 *)(v54 + 24 * v55);
      if (*((char *)v57 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v386, *(const std::string::value_type **)v57, *((_QWORD *)v57 + 1));
      }
      else
      {
        v58 = *v57;
        v386.__r_.__value_.__r.__words[2] = *((_QWORD *)v57 + 2);
        *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v58;
      }
      v59 = *a4;
      std::operator+<char>();
      *(_QWORD *)&v370 = &__p;
      v60 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v373, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v370);
      v61 = v60;
      switch(*((_BYTE *)v60 + 68))
      {
        case 2:
          v62 = (unint64_t *)*((_QWORD *)v60 + 7);
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = *((_QWORD *)v60 + 7);
            if (!v65)
              goto LABEL_103;
            if (*(char *)(v65 + 31) < 0)
              operator delete(*(void **)(v65 + 8));
            v66 = (_QWORD *)v65;
            v67 = 0x1012C404EF22A49;
            goto LABEL_102;
          }
          break;
        case 3:
          v79 = (unint64_t *)*((_QWORD *)v60 + 7);
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
          {
            v82 = (_QWORD *)*((_QWORD *)v60 + 7);
            if (!v82)
              goto LABEL_103;
            v83 = (void *)v82[1];
            if (v83)
            {
              v82[2] = v83;
              operator delete(v83);
            }
            v66 = v82;
            v67 = 0x1080C409938AC02;
            goto LABEL_102;
          }
          break;
        case 4:
          v68 = (unint64_t *)*((_QWORD *)v60 + 7);
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            v71 = (_QWORD *)*((_QWORD *)v60 + 7);
            if (!v71)
              goto LABEL_103;
            *(_QWORD *)&v370 = v71 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v370);
            goto LABEL_95;
          }
          break;
        case 5:
          v84 = (unint64_t *)*((_QWORD *)v60 + 7);
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, v84));
          if (!v86)
          {
            v71 = (_QWORD *)*((_QWORD *)v60 + 7);
            if (!v71)
              goto LABEL_103;
            *(_QWORD *)&v370 = v71 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v370);
LABEL_95:
            v66 = v71;
            v67 = 0x1020C405E66F15BLL;
            goto LABEL_102;
          }
          break;
        case 8:
          v87 = (unint64_t *)*((_QWORD *)v60 + 7);
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            v90 = *((_QWORD *)v60 + 7);
            if (!v90)
              goto LABEL_103;
            boost::detail::shared_count::~shared_count((unsigned int **)(v90 + 16));
            v66 = (_QWORD *)v90;
            v78 = -235920773;
            goto LABEL_101;
          }
          break;
        case 9:
          v72 = (unint64_t *)*((_QWORD *)v60 + 7);
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            v75 = (_QWORD *)*((_QWORD *)v60 + 7);
            if (v75)
            {
              v76 = (void *)v75[6];
              if (v76)
              {
                v75[7] = v76;
                operator delete(v76);
              }
              v77 = (void *)v75[3];
              if (v77)
              {
                v75[4] = v77;
                operator delete(v77);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v75 + 1));
              v66 = v75;
              v78 = 2071181815;
LABEL_101:
              v67 = v78 | 0x1030C4000000000;
LABEL_102:
              MEMORY[0x219A19A08](v66, v67);
            }
LABEL_103:
            *((_QWORD *)v61 + 7) = 0;
            a1 = v56;
          }
          break;
        default:
          break;
      }
      *((_QWORD *)v61 + 7) = 0;
      *((_DWORD *)v61 + 16) = 0;
      *((_BYTE *)v61 + 68) = 1;
      *((double *)v61 + 7) = *(float *)(v59 + 4 * v55);
      if (SBYTE7(v377) < 0)
        operator delete(__p);
      v91 = *a5;
      if (a5[1] != *a5)
      {
        std::operator+<char>();
        *(_QWORD *)&v370 = &__p;
        v92 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v373, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v370);
        v93 = v92;
        switch(*((_BYTE *)v92 + 68))
        {
          case 2:
            v94 = (unint64_t *)*((_QWORD *)v92 + 7);
            do
            {
              v95 = __ldaxr(v94);
              v96 = v95 - 1;
            }
            while (__stlxr(v96, v94));
            if (!v96)
            {
              v97 = *((_QWORD *)v92 + 7);
              if (!v97)
                goto LABEL_149;
              if (*(char *)(v97 + 31) < 0)
                operator delete(*(void **)(v97 + 8));
              v98 = (_QWORD *)v97;
              v99 = 0x1012C404EF22A49;
              goto LABEL_148;
            }
            break;
          case 3:
            v111 = (unint64_t *)*((_QWORD *)v92 + 7);
            do
            {
              v112 = __ldaxr(v111);
              v113 = v112 - 1;
            }
            while (__stlxr(v113, v111));
            if (!v113)
            {
              v114 = (_QWORD *)*((_QWORD *)v92 + 7);
              if (!v114)
                goto LABEL_149;
              v115 = (void *)v114[1];
              if (v115)
              {
                v114[2] = v115;
                operator delete(v115);
              }
              v98 = v114;
              v99 = 0x1080C409938AC02;
              goto LABEL_148;
            }
            break;
          case 4:
            v100 = (unint64_t *)*((_QWORD *)v92 + 7);
            do
            {
              v101 = __ldaxr(v100);
              v102 = v101 - 1;
            }
            while (__stlxr(v102, v100));
            if (!v102)
            {
              v103 = (_QWORD *)*((_QWORD *)v92 + 7);
              if (!v103)
                goto LABEL_149;
              *(_QWORD *)&v370 = v103 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v370);
              goto LABEL_141;
            }
            break;
          case 5:
            v116 = (unint64_t *)*((_QWORD *)v92 + 7);
            do
            {
              v117 = __ldaxr(v116);
              v118 = v117 - 1;
            }
            while (__stlxr(v118, v116));
            if (!v118)
            {
              v103 = (_QWORD *)*((_QWORD *)v92 + 7);
              if (!v103)
                goto LABEL_149;
              *(_QWORD *)&v370 = v103 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v370);
LABEL_141:
              v98 = v103;
              v99 = 0x1020C405E66F15BLL;
              goto LABEL_148;
            }
            break;
          case 8:
            v119 = (unint64_t *)*((_QWORD *)v92 + 7);
            do
            {
              v120 = __ldaxr(v119);
              v121 = v120 - 1;
            }
            while (__stlxr(v121, v119));
            if (!v121)
            {
              v122 = *((_QWORD *)v92 + 7);
              if (!v122)
                goto LABEL_149;
              boost::detail::shared_count::~shared_count((unsigned int **)(v122 + 16));
              v98 = (_QWORD *)v122;
              v110 = -235920773;
              goto LABEL_147;
            }
            break;
          case 9:
            v104 = (unint64_t *)*((_QWORD *)v92 + 7);
            do
            {
              v105 = __ldaxr(v104);
              v106 = v105 - 1;
            }
            while (__stlxr(v106, v104));
            if (!v106)
            {
              v107 = (_QWORD *)*((_QWORD *)v92 + 7);
              if (v107)
              {
                v108 = (void *)v107[6];
                if (v108)
                {
                  v107[7] = v108;
                  operator delete(v108);
                }
                v109 = (void *)v107[3];
                if (v109)
                {
                  v107[4] = v109;
                  operator delete(v109);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v107 + 1));
                v98 = v107;
                v110 = 2071181815;
LABEL_147:
                v99 = v110 | 0x1030C4000000000;
LABEL_148:
                MEMORY[0x219A19A08](v98, v99);
              }
LABEL_149:
              *((_QWORD *)v93 + 7) = 0;
              a1 = v56;
            }
            break;
          default:
            break;
        }
        *((_QWORD *)v93 + 7) = 0;
        *((_DWORD *)v93 + 16) = 0;
        *((_BYTE *)v93 + 68) = 1;
        *((double *)v93 + 7) = *(float *)(v91 + 4 * v55);
        if (SBYTE7(v377) < 0)
          operator delete(__p);
      }
      if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v386.__r_.__value_.__l.__data_);
      ++v55;
      v54 = *(_QWORD *)(a1 + 344);
    }
    while (v55 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 352) - v54) >> 3));
  }
  *(_OWORD *)v371 = 0u;
  v372 = 0u;
  v370 = 0u;
  turi::supervised::xgboost::MakeFeatMap((std::vector<std::string> *)&v370, (turi::ml_metadata **)(a1 + 376), v18, v19, v20, v21, v22, v23);
  (*(void (**)(const std::string **__return_ptr, _QWORD, __int128 *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 1664) + 208)
                                                                                        + 88))(v366, *(_QWORD *)(*(_QWORD *)(a1 + 1664) + 208), &v370, 3);
  turi::supervised::xgboost::convert_vec_string(v366, (uint64_t)&v383);
  switch(v385)
  {
    case 0:
      v392 = 0;
      v391 = 0;
      v390 = v383;
      v368 = 0;
      v369 = 0;
      v367 = 0;
      v381 = (void **)&v367;
      v382 = 0;
      v367 = (uint64_t *)operator new(0x10uLL);
      v368 = v367;
      v369 = v367 + 2;
      v368 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v369, (uint64_t *)&v390, v393, (uint64_t)v367);
      switch(v392)
      {
        case 2:
          v123 = *(unint64_t **)&v390;
          do
          {
            v124 = __ldaxr(v123);
            v125 = --v124 == 0;
          }
          while (__stlxr(v124, v123));
          goto LABEL_230;
        case 3:
          v191 = *(unint64_t **)&v390;
          do
          {
            v192 = __ldaxr(v191);
            v193 = --v192 == 0;
          }
          while (__stlxr(v192, v191));
          goto LABEL_303;
        case 4:
          v177 = *(unint64_t **)&v390;
          do
          {
            v178 = __ldaxr(v177);
            v179 = --v178 == 0;
          }
          while (__stlxr(v178, v177));
          goto LABEL_287;
        case 5:
          v196 = *(unint64_t **)&v390;
          do
          {
            v197 = __ldaxr(v196);
            v198 = --v197 == 0;
          }
          while (__stlxr(v197, v196));
          goto LABEL_311;
        case 8:
          v203 = *(unint64_t **)&v390;
          do
          {
            v204 = __ldaxr(v203);
            v205 = --v204 == 0;
          }
          while (__stlxr(v204, v203));
          goto LABEL_318;
        case 9:
          v182 = *(unint64_t **)&v390;
          do
          {
            v183 = __ldaxr(v182);
            v184 = --v183 == 0;
          }
          while (__stlxr(v183, v182));
          goto LABEL_293;
        default:
          goto LABEL_324;
      }
      goto LABEL_324;
    case 1:
      v391 = 0;
      v392 = 1;
      v390 = v383;
      v368 = 0;
      v369 = 0;
      v367 = 0;
      v381 = (void **)&v367;
      v382 = 0;
      v367 = (uint64_t *)operator new(0x10uLL);
      v368 = v367;
      v369 = v367 + 2;
      v368 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v369, (uint64_t *)&v390, v393, (uint64_t)v367);
      switch(v392)
      {
        case 2:
          v164 = *(unint64_t **)&v390;
          do
          {
            v165 = __ldaxr(v164);
            v125 = --v165 == 0;
          }
          while (__stlxr(v165, v164));
          goto LABEL_230;
        case 3:
          v194 = *(unint64_t **)&v390;
          do
          {
            v195 = __ldaxr(v194);
            v193 = --v195 == 0;
          }
          while (__stlxr(v195, v194));
          goto LABEL_303;
        case 4:
          v180 = *(unint64_t **)&v390;
          do
          {
            v181 = __ldaxr(v180);
            v179 = --v181 == 0;
          }
          while (__stlxr(v181, v180));
          goto LABEL_287;
        case 5:
          v199 = *(unint64_t **)&v390;
          do
          {
            v200 = __ldaxr(v199);
            v198 = --v200 == 0;
          }
          while (__stlxr(v200, v199));
          goto LABEL_311;
        case 8:
          v206 = *(unint64_t **)&v390;
          do
          {
            v207 = __ldaxr(v206);
            v205 = --v207 == 0;
          }
          while (__stlxr(v207, v206));
          goto LABEL_318;
        case 9:
          v185 = *(unint64_t **)&v390;
          do
          {
            v186 = __ldaxr(v185);
            v184 = --v186 == 0;
          }
          while (__stlxr(v186, v185));
          goto LABEL_293;
        default:
          goto LABEL_324;
      }
      goto LABEL_324;
    case 2:
      v390 = 0.0;
      v391 = 0;
      v392 = 0;
      turi::flexible_type::operator=<std::string>((uint64_t *)&v390, (const std::string *)(*(_QWORD *)&v383 + 8));
      v367 = 0;
      v368 = 0;
      v369 = 0;
      v381 = (void **)&v367;
      v382 = 0;
      v367 = (uint64_t *)operator new(0x10uLL);
      v368 = v367;
      v369 = v367 + 2;
      v368 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v369, (uint64_t *)&v390, v393, (uint64_t)v367);
      switch(v392)
      {
        case 2:
          v129 = *(unint64_t **)&v390;
          do
          {
            v130 = __ldaxr(v129);
            v125 = --v130 == 0;
          }
          while (__stlxr(v130, v129));
          goto LABEL_230;
        case 3:
          v221 = *(unint64_t **)&v390;
          do
          {
            v222 = __ldaxr(v221);
            v193 = --v222 == 0;
          }
          while (__stlxr(v222, v221));
          goto LABEL_303;
        case 4:
          v212 = *(unint64_t **)&v390;
          do
          {
            v213 = __ldaxr(v212);
            v179 = --v213 == 0;
          }
          while (__stlxr(v213, v212));
          goto LABEL_287;
        case 5:
          v225 = *(unint64_t **)&v390;
          do
          {
            v226 = __ldaxr(v225);
            v198 = --v226 == 0;
          }
          while (__stlxr(v226, v225));
          goto LABEL_311;
        case 8:
          v227 = *(unint64_t **)&v390;
          do
          {
            v228 = __ldaxr(v227);
            v205 = --v228 == 0;
          }
          while (__stlxr(v228, v227));
          goto LABEL_318;
        case 9:
          v215 = *(unint64_t **)&v390;
          do
          {
            v216 = __ldaxr(v215);
            v184 = --v216 == 0;
          }
          while (__stlxr(v216, v215));
          goto LABEL_293;
        default:
          goto LABEL_324;
      }
      goto LABEL_324;
    case 3:
      v131 = v383;
      std::vector<turi::flexible_type>::vector(&v367, (uint64_t)(*(_QWORD *)(*(_QWORD *)&v383 + 16) - *(_QWORD *)(*(_QWORD *)&v383 + 8)) >> 3);
      v132 = *(_QWORD *)(*(_QWORD *)&v131 + 8);
      if (*(_QWORD *)(*(_QWORD *)&v131 + 16) != v132)
      {
        v133 = 0;
        do
        {
          v134 = &v367[2 * v133];
          switch(*((_BYTE *)v134 + 12))
          {
            case 2:
              v135 = (unint64_t *)*v134;
              do
              {
                v136 = __ldaxr(v135);
                v137 = v136 - 1;
              }
              while (__stlxr(v137, v135));
              if (!v137)
              {
                v138 = *v134;
                if (!*v134)
                  goto LABEL_218;
                if (*(char *)(v138 + 31) < 0)
                  operator delete(*(void **)(v138 + 8));
                v139 = (_QWORD *)v138;
                v140 = 0x1012C404EF22A49;
                goto LABEL_217;
              }
              break;
            case 3:
              v152 = (unint64_t *)*v134;
              do
              {
                v153 = __ldaxr(v152);
                v154 = v153 - 1;
              }
              while (__stlxr(v154, v152));
              if (!v154)
              {
                v155 = *v134;
                if (!*v134)
                  goto LABEL_218;
                v156 = *(void **)(v155 + 8);
                if (v156)
                {
                  *(_QWORD *)(v155 + 16) = v156;
                  operator delete(v156);
                }
                v139 = (_QWORD *)v155;
                v140 = 0x1080C409938AC02;
                goto LABEL_217;
              }
              break;
            case 4:
              v141 = (unint64_t *)*v134;
              do
              {
                v142 = __ldaxr(v141);
                v143 = v142 - 1;
              }
              while (__stlxr(v143, v141));
              if (!v143)
              {
                v144 = *v134;
                if (!*v134)
                  goto LABEL_218;
                v381 = (void **)(v144 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v381);
                goto LABEL_210;
              }
              break;
            case 5:
              v157 = (unint64_t *)*v134;
              do
              {
                v158 = __ldaxr(v157);
                v159 = v158 - 1;
              }
              while (__stlxr(v159, v157));
              if (!v159)
              {
                v144 = *v134;
                if (!*v134)
                  goto LABEL_218;
                v381 = (void **)(v144 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v381);
LABEL_210:
                v139 = (_QWORD *)v144;
                v140 = 0x1020C405E66F15BLL;
                goto LABEL_217;
              }
              break;
            case 8:
              v160 = (unint64_t *)*v134;
              do
              {
                v161 = __ldaxr(v160);
                v162 = v161 - 1;
              }
              while (__stlxr(v162, v160));
              if (!v162)
              {
                v163 = *v134;
                if (!*v134)
                  goto LABEL_218;
                boost::detail::shared_count::~shared_count((unsigned int **)(v163 + 16));
                v139 = (_QWORD *)v163;
                v151 = -235920773;
                goto LABEL_216;
              }
              break;
            case 9:
              v145 = (unint64_t *)*v134;
              do
              {
                v146 = __ldaxr(v145);
                v147 = v146 - 1;
              }
              while (__stlxr(v147, v145));
              if (!v147)
              {
                v148 = (_QWORD *)*v134;
                if (*v134)
                {
                  v149 = (void *)v148[6];
                  if (v149)
                  {
                    v148[7] = v149;
                    operator delete(v149);
                  }
                  v150 = (void *)v148[3];
                  if (v150)
                  {
                    v148[4] = v150;
                    operator delete(v150);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v148 + 1));
                  v139 = v148;
                  v151 = 2071181815;
LABEL_216:
                  v140 = v151 | 0x1030C4000000000;
LABEL_217:
                  MEMORY[0x219A19A08](v139, v140);
                }
LABEL_218:
                *v134 = 0;
              }
              break;
            default:
              break;
          }
          *v134 = 0;
          *((_DWORD *)v134 + 2) = 0;
          *((_BYTE *)v134 + 12) = 1;
          *v134 = *(_QWORD *)(v132 + 8 * v133++);
          v132 = *(_QWORD *)(*(_QWORD *)&v131 + 8);
        }
        while (v133 < (*(_QWORD *)(*(_QWORD *)&v131 + 16) - v132) >> 3);
      }
      goto LABEL_324;
    case 4:
      v368 = 0;
      v369 = 0;
      v367 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v367, *(uint64_t **)(*(_QWORD *)&v383 + 8), *(uint64_t **)(*(_QWORD *)&v383 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v383 + 16) - *(_QWORD *)(*(_QWORD *)&v383 + 8)) >> 4);
      goto LABEL_324;
    case 5:
      memset(v380, 0, sizeof(v380));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v380, *(uint64_t **)(*(_QWORD *)&v383 + 8), *(uint64_t **)(*(_QWORD *)&v383 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v383 + 16) - *(_QWORD *)(*(_QWORD *)&v383 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v367 = 0;
      v368 = 0;
      v369 = 0;
      v381 = (void **)v380;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v381);
      goto LABEL_324;
    case 6:
      v391 = 0;
      v392 = 1;
      v390 = (double)v384 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v383 << 8) >> 8);
      v368 = 0;
      v369 = 0;
      v367 = 0;
      v381 = (void **)&v367;
      v382 = 0;
      v367 = (uint64_t *)operator new(0x10uLL);
      v368 = v367;
      v369 = v367 + 2;
      v368 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v369, (uint64_t *)&v390, v393, (uint64_t)v367);
      switch(v392)
      {
        case 2:
          v166 = *(unint64_t **)&v390;
          do
          {
            v167 = __ldaxr(v166);
            v125 = --v167 == 0;
          }
          while (__stlxr(v167, v166));
LABEL_230:
          if (v125)
          {
            v168 = v390;
            if (v390 != 0.0)
            {
              if (*(char *)(*(_QWORD *)&v390 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v390 + 8));
              v169 = v168;
              v170 = 0x1012C404EF22A49;
              goto LABEL_323;
            }
          }
          break;
        case 3:
          v201 = *(unint64_t **)&v390;
          do
          {
            v202 = __ldaxr(v201);
            v193 = --v202 == 0;
          }
          while (__stlxr(v202, v201));
LABEL_303:
          if (v193)
          {
            v223 = v390;
            if (v390 != 0.0)
            {
              v224 = *(void **)(*(_QWORD *)&v390 + 8);
              if (v224)
              {
                *(_QWORD *)(*(_QWORD *)&v390 + 16) = v224;
                operator delete(v224);
              }
              v169 = v223;
              v170 = 0x1080C409938AC02;
              goto LABEL_323;
            }
          }
          break;
        case 4:
          v187 = *(unint64_t **)&v390;
          do
          {
            v188 = __ldaxr(v187);
            v179 = --v188 == 0;
          }
          while (__stlxr(v188, v187));
LABEL_287:
          if (v179)
          {
            v214 = v390;
            if (v390 != 0.0)
            {
              v381 = (void **)(*(_QWORD *)&v390 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v381);
              goto LABEL_315;
            }
          }
          break;
        case 5:
          v208 = *(unint64_t **)&v390;
          do
          {
            v209 = __ldaxr(v208);
            v198 = --v209 == 0;
          }
          while (__stlxr(v209, v208));
LABEL_311:
          if (v198)
          {
            v214 = v390;
            if (v390 != 0.0)
            {
              v381 = (void **)(*(_QWORD *)&v390 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v381);
LABEL_315:
              v169 = v214;
              v170 = 0x1020C405E66F15BLL;
              goto LABEL_323;
            }
          }
          break;
        case 8:
          v210 = *(unint64_t **)&v390;
          do
          {
            v211 = __ldaxr(v210);
            v205 = --v211 == 0;
          }
          while (__stlxr(v211, v210));
LABEL_318:
          if (v205)
          {
            v229 = v390;
            if (v390 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v390 + 16));
              v169 = v229;
              v220 = -235920773;
              goto LABEL_322;
            }
          }
          break;
        case 9:
          v189 = *(unint64_t **)&v390;
          do
          {
            v190 = __ldaxr(v189);
            v184 = --v190 == 0;
          }
          while (__stlxr(v190, v189));
LABEL_293:
          if (v184)
          {
            v217 = v390;
            if (v390 != 0.0)
            {
              v218 = *(void **)(*(_QWORD *)&v390 + 48);
              if (v218)
              {
                *(_QWORD *)(*(_QWORD *)&v390 + 56) = v218;
                operator delete(v218);
              }
              v219 = *(void **)(*(_QWORD *)&v217 + 24);
              if (v219)
              {
                *(_QWORD *)(*(_QWORD *)&v217 + 32) = v219;
                operator delete(v219);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v217 + 8);
              v169 = v217;
              v220 = 2071181815;
LABEL_322:
              v170 = v220 | 0x1030C4000000000;
LABEL_323:
              MEMORY[0x219A19A08](*(_QWORD *)&v169, v170);
            }
          }
          break;
        default:
          goto LABEL_324;
      }
      goto LABEL_324;
    case 7:
      v367 = 0;
      v368 = 0;
      v369 = 0;
      goto LABEL_366;
    case 8:
      v171 = v383;
      v172 = *(unsigned int **)(*(_QWORD *)&v383 + 16);
      __p = *(void **)(*(_QWORD *)&v383 + 8);
      v376 = (std::__shared_weak_count *)v172;
      if (v172)
      {
        v173 = v172 + 2;
        do
          v174 = __ldxr(v173);
        while (__stxr(v174 + 1, v173));
      }
      v175 = *(_OWORD *)(*(_QWORD *)&v171 + 24);
      v176 = *(_OWORD *)(*(_QWORD *)&v171 + 56);
      v378 = *(_OWORD *)(*(_QWORD *)&v171 + 40);
      v379 = v176;
      v377 = v175;
      turi::flexible_type_fail(0);
      v367 = 0;
      v368 = 0;
      v369 = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&v376);
      goto LABEL_324;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v386, *(_QWORD *)&v383 + 8);
      turi::flexible_type_fail(0);
      v367 = 0;
      v368 = 0;
      v369 = 0;
      if (v388)
      {
        v389 = v388;
        operator delete(v388);
      }
      if (v386.__r_.__value_.__r.__words[2])
      {
        v387 = v386.__r_.__value_.__r.__words[2];
        operator delete((void *)v386.__r_.__value_.__r.__words[2]);
      }
      size = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
      if (v386.__r_.__value_.__l.__size_)
      {
        v127 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
LABEL_324:
      switch(v385)
      {
        case 2:
          v230 = *(unint64_t **)&v383;
          do
          {
            v231 = __ldaxr(v230);
            v232 = v231 - 1;
          }
          while (__stlxr(v232, v230));
          if (!v232)
          {
            v233 = v383;
            if (v383 != 0.0)
            {
              if (*(char *)(*(_QWORD *)&v383 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v383 + 8));
              v234 = v233;
              v235 = 0x1012C404EF22A49;
              goto LABEL_365;
            }
          }
          break;
        case 3:
          v247 = *(unint64_t **)&v383;
          do
          {
            v248 = __ldaxr(v247);
            v249 = v248 - 1;
          }
          while (__stlxr(v249, v247));
          if (!v249)
          {
            v250 = v383;
            if (v383 != 0.0)
            {
              v251 = *(void **)(*(_QWORD *)&v383 + 8);
              if (v251)
              {
                *(_QWORD *)(*(_QWORD *)&v383 + 16) = v251;
                operator delete(v251);
              }
              v234 = v250;
              v235 = 0x1080C409938AC02;
              goto LABEL_365;
            }
          }
          break;
        case 4:
          v236 = *(unint64_t **)&v383;
          do
          {
            v237 = __ldaxr(v236);
            v238 = v237 - 1;
          }
          while (__stlxr(v238, v236));
          if (!v238)
          {
            v239 = v383;
            if (v383 != 0.0)
            {
              v386.__r_.__value_.__r.__words[0] = *(_QWORD *)&v383 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v386);
              goto LABEL_358;
            }
          }
          break;
        case 5:
          v252 = *(unint64_t **)&v383;
          do
          {
            v253 = __ldaxr(v252);
            v254 = v253 - 1;
          }
          while (__stlxr(v254, v252));
          if (!v254)
          {
            v239 = v383;
            if (v383 != 0.0)
            {
              v386.__r_.__value_.__r.__words[0] = *(_QWORD *)&v383 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v386);
LABEL_358:
              v234 = v239;
              v235 = 0x1020C405E66F15BLL;
              goto LABEL_365;
            }
          }
          break;
        case 8:
          v255 = *(unint64_t **)&v383;
          do
          {
            v256 = __ldaxr(v255);
            v257 = v256 - 1;
          }
          while (__stlxr(v257, v255));
          if (!v257)
          {
            v258 = v383;
            if (v383 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v383 + 16));
              v234 = v258;
              v246 = -235920773;
              goto LABEL_364;
            }
          }
          break;
        case 9:
          v240 = *(unint64_t **)&v383;
          do
          {
            v241 = __ldaxr(v240);
            v242 = v241 - 1;
          }
          while (__stlxr(v242, v240));
          if (!v242)
          {
            v243 = v383;
            if (v383 != 0.0)
            {
              v244 = *(void **)(*(_QWORD *)&v383 + 48);
              if (v244)
              {
                *(_QWORD *)(*(_QWORD *)&v383 + 56) = v244;
                operator delete(v244);
              }
              v245 = *(void **)(*(_QWORD *)&v243 + 24);
              if (v245)
              {
                *(_QWORD *)(*(_QWORD *)&v243 + 32) = v245;
                operator delete(v245);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v243 + 8);
              v234 = v243;
              v246 = 2071181815;
LABEL_364:
              v235 = v246 | 0x1030C4000000000;
LABEL_365:
              MEMORY[0x219A19A08](*(_QWORD *)&v234, v235);
            }
          }
          break;
        default:
          break;
      }
LABEL_366:
      v386.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v386);
      std::string::basic_string[abi:ne180100]<0>(&v386, "trees_json");
      __p = &v386;
      v259 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v373, (const void **)&v386.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
      v260 = v259;
      switch(*((_BYTE *)v259 + 68))
      {
        case 2:
          v261 = (unint64_t *)*((_QWORD *)v259 + 7);
          do
          {
            v262 = __ldaxr(v261);
            v263 = v262 - 1;
          }
          while (__stlxr(v263, v261));
          if (!v263)
          {
            v264 = *((_QWORD *)v259 + 7);
            if (!v264)
              goto LABEL_408;
            if (*(char *)(v264 + 31) < 0)
              operator delete(*(void **)(v264 + 8));
            v265 = (_QWORD *)v264;
            v266 = 0x1012C404EF22A49;
            goto LABEL_407;
          }
          break;
        case 3:
          v278 = (unint64_t *)*((_QWORD *)v259 + 7);
          do
          {
            v279 = __ldaxr(v278);
            v280 = v279 - 1;
          }
          while (__stlxr(v280, v278));
          if (!v280)
          {
            v281 = (_QWORD *)*((_QWORD *)v259 + 7);
            if (!v281)
              goto LABEL_408;
            v282 = (void *)v281[1];
            if (v282)
            {
              v281[2] = v282;
              operator delete(v282);
            }
            v265 = v281;
            v266 = 0x1080C409938AC02;
            goto LABEL_407;
          }
          break;
        case 4:
          v267 = (unint64_t *)*((_QWORD *)v259 + 7);
          do
          {
            v268 = __ldaxr(v267);
            v269 = v268 - 1;
          }
          while (__stlxr(v269, v267));
          if (!v269)
          {
            v270 = (_QWORD *)*((_QWORD *)v259 + 7);
            if (!v270)
              goto LABEL_408;
            __p = v270 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_400;
          }
          break;
        case 5:
          v283 = (unint64_t *)*((_QWORD *)v259 + 7);
          do
          {
            v284 = __ldaxr(v283);
            v285 = v284 - 1;
          }
          while (__stlxr(v285, v283));
          if (!v285)
          {
            v270 = (_QWORD *)*((_QWORD *)v259 + 7);
            if (!v270)
              goto LABEL_408;
            __p = v270 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_400:
            v265 = v270;
            v266 = 0x1020C405E66F15BLL;
            goto LABEL_407;
          }
          break;
        case 8:
          v286 = (unint64_t *)*((_QWORD *)v259 + 7);
          do
          {
            v287 = __ldaxr(v286);
            v288 = v287 - 1;
          }
          while (__stlxr(v288, v286));
          if (!v288)
          {
            v289 = *((_QWORD *)v259 + 7);
            if (!v289)
              goto LABEL_408;
            boost::detail::shared_count::~shared_count((unsigned int **)(v289 + 16));
            v265 = (_QWORD *)v289;
            v277 = -235920773;
            goto LABEL_406;
          }
          break;
        case 9:
          v271 = (unint64_t *)*((_QWORD *)v259 + 7);
          do
          {
            v272 = __ldaxr(v271);
            v273 = v272 - 1;
          }
          while (__stlxr(v273, v271));
          if (!v273)
          {
            v274 = (_QWORD *)*((_QWORD *)v259 + 7);
            if (v274)
            {
              v275 = (void *)v274[6];
              if (v275)
              {
                v274[7] = v275;
                operator delete(v275);
              }
              v276 = (void *)v274[3];
              if (v276)
              {
                v274[4] = v276;
                operator delete(v276);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v274 + 1));
              v265 = v274;
              v277 = 2071181815;
LABEL_406:
              v266 = v277 | 0x1030C4000000000;
LABEL_407:
              MEMORY[0x219A19A08](v265, v266);
            }
LABEL_408:
            *((_QWORD *)v260 + 7) = 0;
          }
          break;
        default:
          break;
      }
      *((_QWORD *)v260 + 7) = 0;
      *((_DWORD *)v260 + 16) = 0;
      *((_BYTE *)v260 + 68) = 4;
      v290 = (_QWORD *)operator new();
      *v290 = 0;
      v290[2] = 0;
      v290[3] = 0;
      v290[1] = 0;
      *((_QWORD *)v260 + 7) = v290;
      *v290 = 1;
      switch(*((_BYTE *)v260 + 68))
      {
        case 2:
          v291 = *((_QWORD *)v260 + 7);
          if (*(_QWORD *)v291 != 1)
          {
            v292 = (_QWORD *)operator new();
            v293 = *((_QWORD *)v260 + 7);
            *v292 = *(_QWORD *)v293;
            v294 = (std::string *)(v292 + 1);
            if (*(char *)(v293 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v294, *(const std::string::value_type **)(v293 + 8), *(_QWORD *)(v293 + 16));
            }
            else
            {
              v295 = *(_OWORD *)(v293 + 8);
              v292[3] = *(_QWORD *)(v293 + 24);
              *(_OWORD *)&v294->__r_.__value_.__l.__data_ = v295;
            }
            *((_QWORD *)v260 + 7) = v292;
            *v292 = 1;
            do
            {
              v329 = __ldaxr((unint64_t *)v291);
              v330 = v329 - 1;
            }
            while (__stlxr(v330, (unint64_t *)v291));
            if (!v330)
            {
              if (*(char *)(v291 + 31) < 0)
                operator delete(*(void **)(v291 + 8));
              v306 = (unint64_t *)v291;
              v314 = 0x1012C404EF22A49;
              goto LABEL_452;
            }
          }
          break;
        case 3:
          v308 = (unint64_t *)*((_QWORD *)v260 + 7);
          if (*v308 != 1)
          {
            v309 = (_QWORD *)operator new();
            v310 = *((_QWORD *)v260 + 7);
            *v309 = *(_QWORD *)v310;
            v309[2] = 0;
            v309[3] = 0;
            v309[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v309 + 1, *(const void **)(v310 + 8), *(_QWORD *)(v310 + 16), (uint64_t)(*(_QWORD *)(v310 + 16) - *(_QWORD *)(v310 + 8)) >> 3);
            *((_QWORD *)v260 + 7) = v309;
            *v309 = 1;
            do
            {
              v311 = __ldaxr(v308);
              v312 = v311 - 1;
            }
            while (__stlxr(v312, v308));
            if (!v312)
            {
              v313 = (void *)v308[1];
              if (v313)
              {
                v308[2] = (unint64_t)v313;
                operator delete(v313);
              }
              v306 = v308;
              v314 = 0x1080C409938AC02;
              goto LABEL_452;
            }
          }
          break;
        case 4:
          v296 = (unint64_t *)*((_QWORD *)v260 + 7);
          if (*v296 != 1)
          {
            v297 = (_QWORD *)operator new();
            v298 = *((_QWORD *)v260 + 7);
            *v297 = *(_QWORD *)v298;
            v297[2] = 0;
            v297[3] = 0;
            v297[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v297 + 1, *(uint64_t **)(v298 + 8), *(uint64_t **)(v298 + 16), (uint64_t)(*(_QWORD *)(v298 + 16) - *(_QWORD *)(v298 + 8)) >> 4);
            *((_QWORD *)v260 + 7) = v297;
            *v297 = 1;
            do
            {
              v299 = __ldaxr(v296);
              v300 = v299 - 1;
            }
            while (__stlxr(v300, v296));
            if (!v300)
            {
              __p = v296 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_435;
            }
          }
          break;
        case 5:
          v296 = (unint64_t *)*((_QWORD *)v260 + 7);
          if (*v296 != 1)
          {
            v315 = (_QWORD *)operator new();
            v316 = *((_QWORD *)v260 + 7);
            *v315 = *(_QWORD *)v316;
            v315[2] = 0;
            v315[3] = 0;
            v315[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v315 + 1, *(uint64_t **)(v316 + 8), *(uint64_t **)(v316 + 16), (uint64_t)(*(_QWORD *)(v316 + 16) - *(_QWORD *)(v316 + 8)) >> 5);
            *((_QWORD *)v260 + 7) = v315;
            *v315 = 1;
            do
            {
              v317 = __ldaxr(v296);
              v318 = v317 - 1;
            }
            while (__stlxr(v318, v296));
            if (!v318)
            {
              __p = v296 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_435:
              v306 = v296;
              v314 = 0x1020C405E66F15BLL;
              goto LABEL_452;
            }
          }
          break;
        case 8:
          v319 = *((_QWORD *)v260 + 7);
          if (*(_QWORD *)v319 != 1)
          {
            v320 = operator new();
            v321 = *((_QWORD *)v260 + 7);
            *(_QWORD *)v320 = *(_QWORD *)v321;
            *(_QWORD *)(v320 + 8) = *(_QWORD *)(v321 + 8);
            v322 = *(_QWORD *)(v321 + 16);
            *(_QWORD *)(v320 + 16) = v322;
            if (v322)
            {
              v323 = (unsigned int *)(v322 + 8);
              do
                v324 = __ldxr(v323);
              while (__stxr(v324 + 1, v323));
            }
            v325 = *(_OWORD *)(v321 + 24);
            v326 = *(_OWORD *)(v321 + 40);
            *(_OWORD *)(v320 + 56) = *(_OWORD *)(v321 + 56);
            *(_OWORD *)(v320 + 40) = v326;
            *(_OWORD *)(v320 + 24) = v325;
            *((_QWORD *)v260 + 7) = v320;
            *(_QWORD *)v320 = 1;
            do
            {
              v327 = __ldaxr((unint64_t *)v319);
              v328 = v327 - 1;
            }
            while (__stlxr(v328, (unint64_t *)v319));
            if (!v328)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v319 + 16));
              v306 = (unint64_t *)v319;
              v307 = -235920773;
              goto LABEL_444;
            }
          }
          break;
        case 9:
          v301 = (unint64_t *)*((_QWORD *)v260 + 7);
          if (*v301 != 1)
          {
            v302 = (_QWORD *)operator new();
            v303 = (_QWORD *)*((_QWORD *)v260 + 7);
            *v302 = *v303;
            turi::flexible_type_impl::ndarray<double>::ndarray(v302 + 1, (uint64_t)(v303 + 1));
            *((_QWORD *)v260 + 7) = v302;
            *v302 = 1;
            do
            {
              v304 = __ldaxr(v301);
              v305 = v304 - 1;
            }
            while (__stlxr(v305, v301));
            if (!v305)
            {
              v306 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v301);
              v307 = 2071181815;
LABEL_444:
              v314 = v307 | 0x1030C4000000000;
LABEL_452:
              MEMORY[0x219A19A08](v306, v314);
            }
          }
          break;
        default:
          break;
      }
      v331 = (uint64_t **)(*((_QWORD *)v260 + 7) + 8);
      if (v331 != &v367)
        std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v331, v367, v368, ((char *)v368 - (char *)v367) >> 4);
      if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v386.__r_.__value_.__l.__data_);
      v333 = v367;
      v332 = v368;
      std::string::basic_string[abi:ne180100]<0>(&v386, "num_trees");
      __p = &v386;
      v334 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v373, (const void **)&v386.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
      v335 = v334;
      v336 = ((char *)v332 - (char *)v333) >> 4;
      switch(*((_BYTE *)v334 + 68))
      {
        case 2:
          v337 = (unint64_t *)*((_QWORD *)v334 + 7);
          do
          {
            v338 = __ldaxr(v337);
            v339 = v338 - 1;
          }
          while (__stlxr(v339, v337));
          if (!v339)
          {
            v340 = *((_QWORD *)v334 + 7);
            if (!v340)
              goto LABEL_499;
            if (*(char *)(v340 + 31) < 0)
              operator delete(*(void **)(v340 + 8));
            v341 = (_QWORD *)v340;
            v342 = 0x1012C404EF22A49;
            goto LABEL_498;
          }
          break;
        case 3:
          v354 = (unint64_t *)*((_QWORD *)v334 + 7);
          do
          {
            v355 = __ldaxr(v354);
            v356 = v355 - 1;
          }
          while (__stlxr(v356, v354));
          if (!v356)
          {
            v357 = (_QWORD *)*((_QWORD *)v334 + 7);
            if (!v357)
              goto LABEL_499;
            v358 = (void *)v357[1];
            if (v358)
            {
              v357[2] = v358;
              operator delete(v358);
            }
            v341 = v357;
            v342 = 0x1080C409938AC02;
            goto LABEL_498;
          }
          break;
        case 4:
          v343 = (unint64_t *)*((_QWORD *)v334 + 7);
          do
          {
            v344 = __ldaxr(v343);
            v345 = v344 - 1;
          }
          while (__stlxr(v345, v343));
          if (!v345)
          {
            v346 = (_QWORD *)*((_QWORD *)v334 + 7);
            if (!v346)
              goto LABEL_499;
            __p = v346 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_491;
          }
          break;
        case 5:
          v359 = (unint64_t *)*((_QWORD *)v334 + 7);
          do
          {
            v360 = __ldaxr(v359);
            v361 = v360 - 1;
          }
          while (__stlxr(v361, v359));
          if (!v361)
          {
            v346 = (_QWORD *)*((_QWORD *)v334 + 7);
            if (!v346)
              goto LABEL_499;
            __p = v346 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_491:
            v341 = v346;
            v342 = 0x1020C405E66F15BLL;
            goto LABEL_498;
          }
          break;
        case 8:
          v362 = (unint64_t *)*((_QWORD *)v334 + 7);
          do
          {
            v363 = __ldaxr(v362);
            v364 = v363 - 1;
          }
          while (__stlxr(v364, v362));
          if (!v364)
          {
            v365 = *((_QWORD *)v334 + 7);
            if (!v365)
              goto LABEL_499;
            boost::detail::shared_count::~shared_count((unsigned int **)(v365 + 16));
            v341 = (_QWORD *)v365;
            v353 = -235920773;
            goto LABEL_497;
          }
          break;
        case 9:
          v347 = (unint64_t *)*((_QWORD *)v334 + 7);
          do
          {
            v348 = __ldaxr(v347);
            v349 = v348 - 1;
          }
          while (__stlxr(v349, v347));
          if (!v349)
          {
            v350 = (_QWORD *)*((_QWORD *)v334 + 7);
            if (v350)
            {
              v351 = (void *)v350[6];
              if (v351)
              {
                v350[7] = v351;
                operator delete(v351);
              }
              v352 = (void *)v350[3];
              if (v352)
              {
                v350[4] = v352;
                operator delete(v352);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v350 + 1));
              v341 = v350;
              v353 = 2071181815;
LABEL_497:
              v342 = v353 | 0x1030C4000000000;
LABEL_498:
              MEMORY[0x219A19A08](v341, v342);
            }
LABEL_499:
            *((_QWORD *)v335 + 7) = 0;
          }
          break;
        default:
          break;
      }
      *((_DWORD *)v335 + 16) = 0;
      *((_BYTE *)v335 + 68) = 0;
      *((_QWORD *)v335 + 7) = v336;
      if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v386.__r_.__value_.__l.__data_);
      turi::flexmap_to_varmap(&v373, (uint64_t)&v386);
      turi::ml_model_base::add_or_update_state(a1, &v386);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v386, (char *)v386.__r_.__value_.__l.__size_);
      v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&v367;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v386);
      if (v371[1])
      {
        *(void **)&v372 = v371[1];
        operator delete(v371[1]);
      }
      v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&v370;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v386);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v373, v374[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

